0001   0000             ; --- FILENAME: ../solarium/usr/bin/shell
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $p 
0011   0408             ; $t 
0012   0408             ; $temp_prog 
0013   0408             ; $varname 
0014   0408             ; $is_assignment 
0015   0408             ; $variable_str 
0016   0408             ; $variable_int 
0017   0408             ; $var_index 
0018   0408             ; $i 
0019   0408 52 8E 00      sub sp, 142
0020   040B             ;; new_str_var("path", "", 64); 
0021   040B 26 DB 3B      mov b, __s0 ; "path"
0022   040E FD AB         swp b
0023   0410 D8            push b
0024   0411 26 E0 3B      mov b, __s1 ; ""
0025   0414 FD AB         swp b
0026   0416 D8            push b
0027   0417 26 40 00      mov b, $40
0028   041A FD AB         swp b
0029   041C D8            push b
0030   041D 07 E6 2C      call new_str_var
0031   0420 51 06 00      add sp, 6
0032   0423             ;; new_str_var("home", "", 64); 
0033   0423 26 E0 3B      mov b, __s1 ; "home"
0034   0426 FD AB         swp b
0035   0428 D8            push b
0036   0429 26 E5 3B      mov b, __s2 ; ""
0037   042C FD AB         swp b
0038   042E D8            push b
0039   042F 26 40 00      mov b, $40
0040   0432 FD AB         swp b
0041   0434 D8            push b
0042   0435 07 E6 2C      call new_str_var
0043   0438 51 06 00      add sp, 6
0044   043B             ;; read_config("/etc/shell.cfg", "path", variables[0].as_string); 
0045   043B 26 E5 3B      mov b, __s2 ; "/etc/shell.cfg"
0046   043E FD AB         swp b
0047   0440 D8            push b
0048   0441 26 DB 3B      mov b, __s0 ; "path"
0049   0444 FD AB         swp b
0050   0446 D8            push b
0051   0447 3B 07 3B      mov d, _variables_data ; $variables
0052   044A D7            push a
0053   044B DA            push d
0054   044C 26 00 00      mov b, $0
0055   044F E7            pop d
0056   0450 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0057   0454 E4            pop a
0058   0455 58 11 00      add d, 17
0059   0458 FD 14         clb
0060   045A 2A            mov b, [d]
0061   045B FD AB         swp b
0062   045D D8            push b
0063   045E 07 B0 32      call read_config
0064   0461 51 06 00      add sp, 6
0065   0464             ;; read_config("/etc/shell.cfg", "home", variables[1].as_string); 
0066   0464 26 E5 3B      mov b, __s2 ; "/etc/shell.cfg"
0067   0467 FD AB         swp b
0068   0469 D8            push b
0069   046A 26 E0 3B      mov b, __s1 ; "home"
0070   046D FD AB         swp b
0071   046F D8            push b
0072   0470 3B 07 3B      mov d, _variables_data ; $variables
0073   0473 D7            push a
0074   0474 DA            push d
0075   0475 26 01 00      mov b, $1
0076   0478 E7            pop d
0077   0479 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0078   047D E4            pop a
0079   047E 58 11 00      add d, 17
0080   0481 FD 14         clb
0081   0483 2A            mov b, [d]
0082   0484 FD AB         swp b
0083   0486 D8            push b
0084   0487 07 B0 32      call read_config
0085   048A 51 06 00      add sp, 6
0086   048D             ;; for(;;){ 
0087   048D             _for1_init:
0088   048D             _for1_cond:
0089   048D             _for1_block:
0090   048D             ;; printf("root@Sol-1:");  
0091   048D 26 F4 3B      mov b, __s3 ; "root@Sol-1:"
0092   0490 FD AB         swp b
0093   0492 D8            push b
0094   0493 07 7B 0F      call printf
0095   0496 51 02 00      add sp, 2
0096   0499             ;; print_cwd();  
0097   0499 07 8D 32      call print_cwd
0098   049C             ;; printf(" # "); 
0099   049C 26 00 3C      mov b, __s4 ; " # "
0100   049F FD AB         swp b
0101   04A1 D8            push b
0102   04A2 07 7B 0F      call printf
0103   04A5 51 02 00      add sp, 2
0104   04A8             ;; gets(command); 
0105   04A8 3B 87 35      mov d, _command_data ; $command
0106   04AB 2D            mov b, d
0107   04AC FD AB         swp b
0108   04AE D8            push b
0109   04AF 07 72 13      call gets
0110   04B2 51 02 00      add sp, 2
0111   04B5             ;; print("\n\r"); 
0112   04B5 26 04 3C      mov b, __s5 ; "\n\r"
0113   04B8 FD AB         swp b
0114   04BA D8            push b
0115   04BB 07 B5 15      call print
0116   04BE 51 02 00      add sp, 2
0117   04C1             ;; if(command[0]) strcpy(last_cmd, command); 
0118   04C1             _if2_cond:
0119   04C1 3B 87 35      mov d, _command_data ; $command
0120   04C4 D7            push a
0121   04C5 DA            push d
0122   04C6 26 00 00      mov b, $0
0123   04C9 E7            pop d
0124   04CA 5A            add d, b
0125   04CB E4            pop a
0126   04CC 32            mov bl, [d]
0127   04CD A7 00         mov bh, 0
0128   04CF C0 00 00      cmp b, 0
0129   04D2 C6 EC 04      je _if2_exit
0130   04D5             _if2_true:
0131   04D5             ;; strcpy(last_cmd, command); 
0132   04D5 3B 87 3A      mov d, _last_cmd_data ; $last_cmd
0133   04D8 2D            mov b, d
0134   04D9 FD AB         swp b
0135   04DB D8            push b
0136   04DC 3B 87 35      mov d, _command_data ; $command
0137   04DF 2D            mov b, d
0138   04E0 FD AB         swp b
0139   04E2 D8            push b
0140   04E3 07 26 0D      call strcpy
0141   04E6 51 04 00      add sp, 4
0142   04E9 0A EC 04      jmp _if2_exit
0143   04EC             _if2_exit:
0144   04EC             ;; prog = command; 
0145   04EC 3B 83 33      mov d, _prog ; $prog
0146   04EF DA            push d
0147   04F0 3B 87 35      mov d, _command_data ; $command
0148   04F3 2D            mov b, d
0149   04F4 E7            pop d
0150   04F5 FD 43         mov [d], b
0151   04F7             ;; for(;;){ 
0152   04F7             _for3_init:
0153   04F7             _for3_cond:
0154   04F7             _for3_block:
0155   04F7             ;; temp_prog = prog; 
0156   04F7 FA FB FF      lea d, [bp + -5] ; $temp_prog
0157   04FA DA            push d
0158   04FB 3B 83 33      mov d, _prog ; $prog
0159   04FE 2A            mov b, [d]
0160   04FF E7            pop d
0161   0500 FD 43         mov [d], b
0162   0502             ;; get(); 
0163   0502 07 58 1C      call get
0164   0505             ;; if(tok == SEMICOLON) get(); 
0165   0505             _if4_cond:
0166   0505 3B 7F 33      mov d, _tok ; $tok
0167   0508 2A            mov b, [d]
0168   0509             ; START RELATIONAL
0169   0509 D7            push a
0170   050A 11            mov a, b
0171   050B 26 23 00      mov b, 35; SEMICOLON
0172   050E B0            cmp a, b
0173   050F FD 71         seq ; ==
0174   0511 E4            pop a
0175   0512             ; END RELATIONAL
0176   0512 C0 00 00      cmp b, 0
0177   0515 C6 1E 05      je _if4_exit
0178   0518             _if4_true:
0179   0518             ;; get(); 
0180   0518 07 58 1C      call get
0181   051B 0A 1E 05      jmp _if4_exit
0182   051E             _if4_exit:
0183   051E             ;; if(toktype == END) break; // check for empty input 
0184   051E             _if5_cond:
0185   051E 3B 81 33      mov d, _toktype ; $toktype
0186   0521 2A            mov b, [d]
0187   0522             ; START RELATIONAL
0188   0522 D7            push a
0189   0523 11            mov a, b
0190   0524 26 06 00      mov b, 6; END
0191   0527 B0            cmp a, b
0192   0528 FD 71         seq ; ==
0193   052A E4            pop a
0194   052B             ; END RELATIONAL
0195   052B C0 00 00      cmp b, 0
0196   052E C6 37 05      je _if5_exit
0197   0531             _if5_true:
0198   0531             ;; break; // check for empty input 
0199   0531 0A 83 09      jmp _for3_exit ; for break
0200   0534 0A 37 05      jmp _if5_exit
0201   0537             _if5_exit:
0202   0537             ;; is_assignment = 0; 
0203   0537 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0204   053A DA            push d
0205   053B 26 00 00      mov b, $0
0206   053E E7            pop d
0207   053F FD 3E         mov [d], bl
0208   0541             ;; if(toktype == IDENTIFIER){ 
0209   0541             _if6_cond:
0210   0541 3B 81 33      mov d, _toktype ; $toktype
0211   0544 2A            mov b, [d]
0212   0545             ; START RELATIONAL
0213   0545 D7            push a
0214   0546 11            mov a, b
0215   0547 26 05 00      mov b, 5; IDENTIFIER
0216   054A B0            cmp a, b
0217   054B FD 71         seq ; ==
0218   054D E4            pop a
0219   054E             ; END RELATIONAL
0220   054E C0 00 00      cmp b, 0
0221   0551 C6 84 05      je _if6_exit
0222   0554             _if6_true:
0223   0554             ;; strcpy(varname, token); 
0224   0554 FA FA FF      lea d, [bp + -6] ; $varname
0225   0557 32            mov bl, [d]
0226   0558 A7 00         mov bh, 0
0227   055A FD AB         swp b
0228   055C D8            push b
0229   055D 3B 85 33      mov d, _token_data ; $token
0230   0560 2D            mov b, d
0231   0561 FD AB         swp b
0232   0563 D8            push b
0233   0564 07 26 0D      call strcpy
0234   0567 51 04 00      add sp, 4
0235   056A             ;; get(); 
0236   056A 07 58 1C      call get
0237   056D             ;; is_assignment = tok == ASSIGNMENT; 
0238   056D FA F9 FF      lea d, [bp + -7] ; $is_assignment
0239   0570 DA            push d
0240   0571 3B 7F 33      mov d, _tok ; $tok
0241   0574 2A            mov b, [d]
0242   0575             ; START RELATIONAL
0243   0575 D7            push a
0244   0576 11            mov a, b
0245   0577 26 11 00      mov b, 17; ASSIGNMENT
0246   057A B0            cmp a, b
0247   057B FD 71         seq ; ==
0248   057D E4            pop a
0249   057E             ; END RELATIONAL
0250   057E E7            pop d
0251   057F FD 3E         mov [d], bl
0252   0581 0A 84 05      jmp _if6_exit
0253   0584             _if6_exit:
0254   0584             ;; if(is_assignment){ 
0255   0584             _if7_cond:
0256   0584 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0257   0587 32            mov bl, [d]
0258   0588 A7 00         mov bh, 0
0259   058A C0 00 00      cmp b, 0
0260   058D C6 43 06      je _if7_else
0261   0590             _if7_true:
0262   0590             ;; get(); 
0263   0590 07 58 1C      call get
0264   0593             ;; if(toktype == INTEGER_CONST) set_int_var(varname, atoi(token)); 
0265   0593             _if8_cond:
0266   0593 3B 81 33      mov d, _toktype ; $toktype
0267   0596 2A            mov b, [d]
0268   0597             ; START RELATIONAL
0269   0597 D7            push a
0270   0598 11            mov a, b
0271   0599 26 04 00      mov b, 4; INTEGER_CONST
0272   059C B0            cmp a, b
0273   059D FD 71         seq ; ==
0274   059F E4            pop a
0275   05A0             ; END RELATIONAL
0276   05A0 C0 00 00      cmp b, 0
0277   05A3 C6 C8 05      je _if8_else
0278   05A6             _if8_true:
0279   05A6             ;; set_int_var(varname, atoi(token)); 
0280   05A6 FA FA FF      lea d, [bp + -6] ; $varname
0281   05A9 32            mov bl, [d]
0282   05AA A7 00         mov bh, 0
0283   05AC FD AB         swp b
0284   05AE D8            push b
0285   05AF 3B 85 33      mov d, _token_data ; $token
0286   05B2 2D            mov b, d
0287   05B3 FD AB         swp b
0288   05B5 D8            push b
0289   05B6 07 5A 12      call atoi
0290   05B9 51 02 00      add sp, 2
0291   05BC FD AB         swp b
0292   05BE D8            push b
0293   05BF 07 31 2E      call set_int_var
0294   05C2 51 04 00      add sp, 4
0295   05C5 0A 40 06      jmp _if8_exit
0296   05C8             _if8_else:
0297   05C8             ;; if(toktype == STRING_CONST) new_str_var(varname, string_const, strlen(string_const)); 
0298   05C8             _if9_cond:
0299   05C8 3B 81 33      mov d, _toktype ; $toktype
0300   05CB 2A            mov b, [d]
0301   05CC             ; START RELATIONAL
0302   05CC D7            push a
0303   05CD 11            mov a, b
0304   05CE 26 03 00      mov b, 3; STRING_CONST
0305   05D1 B0            cmp a, b
0306   05D2 FD 71         seq ; ==
0307   05D4 E4            pop a
0308   05D5             ; END RELATIONAL
0309   05D5 C0 00 00      cmp b, 0
0310   05D8 C6 04 06      je _if9_else
0311   05DB             _if9_true:
0312   05DB             ;; new_str_var(varname, string_const, strlen(string_const)); 
0313   05DB FA FA FF      lea d, [bp + -6] ; $varname
0314   05DE 32            mov bl, [d]
0315   05DF A7 00         mov bh, 0
0316   05E1 FD AB         swp b
0317   05E3 D8            push b
0318   05E4 3B 85 34      mov d, _string_const_data ; $string_const
0319   05E7 2D            mov b, d
0320   05E8 FD AB         swp b
0321   05EA D8            push b
0322   05EB 3B 85 34      mov d, _string_const_data ; $string_const
0323   05EE 2D            mov b, d
0324   05EF FD AB         swp b
0325   05F1 D8            push b
0326   05F2 07 A0 0E      call strlen
0327   05F5 51 02 00      add sp, 2
0328   05F8 FD AB         swp b
0329   05FA D8            push b
0330   05FB 07 E6 2C      call new_str_var
0331   05FE 51 06 00      add sp, 6
0332   0601 0A 40 06      jmp _if9_exit
0333   0604             _if9_else:
0334   0604             ;; if(toktype == IDENTIFIER) new_str_var(varname, token, strlen(string_const)); 
0335   0604             _if10_cond:
0336   0604 3B 81 33      mov d, _toktype ; $toktype
0337   0607 2A            mov b, [d]
0338   0608             ; START RELATIONAL
0339   0608 D7            push a
0340   0609 11            mov a, b
0341   060A 26 05 00      mov b, 5; IDENTIFIER
0342   060D B0            cmp a, b
0343   060E FD 71         seq ; ==
0344   0610 E4            pop a
0345   0611             ; END RELATIONAL
0346   0611 C0 00 00      cmp b, 0
0347   0614 C6 40 06      je _if10_exit
0348   0617             _if10_true:
0349   0617             ;; new_str_var(varname, token, strlen(string_const)); 
0350   0617 FA FA FF      lea d, [bp + -6] ; $varname
0351   061A 32            mov bl, [d]
0352   061B A7 00         mov bh, 0
0353   061D FD AB         swp b
0354   061F D8            push b
0355   0620 3B 85 33      mov d, _token_data ; $token
0356   0623 2D            mov b, d
0357   0624 FD AB         swp b
0358   0626 D8            push b
0359   0627 3B 85 34      mov d, _string_const_data ; $string_const
0360   062A 2D            mov b, d
0361   062B FD AB         swp b
0362   062D D8            push b
0363   062E 07 A0 0E      call strlen
0364   0631 51 02 00      add sp, 2
0365   0634 FD AB         swp b
0366   0636 D8            push b
0367   0637 07 E6 2C      call new_str_var
0368   063A 51 06 00      add sp, 6
0369   063D 0A 40 06      jmp _if10_exit
0370   0640             _if10_exit:
0371   0640             _if9_exit:
0372   0640             _if8_exit:
0373   0640 0A 80 09      jmp _if7_exit
0374   0643             _if7_else:
0375   0643             ;; prog = temp_prog; 
0376   0643 3B 83 33      mov d, _prog ; $prog
0377   0646 DA            push d
0378   0647 FA FB FF      lea d, [bp + -5] ; $temp_prog
0379   064A 2A            mov b, [d]
0380   064B E7            pop d
0381   064C FD 43         mov [d], b
0382   064E             ;; get(); 
0383   064E 07 58 1C      call get
0384   0651             ;; if(!strcmp(token, "cd")) command_cd(); 
0385   0651             _if11_cond:
0386   0651 3B 85 33      mov d, _token_data ; $token
0387   0654 2D            mov b, d
0388   0655 FD AB         swp b
0389   0657 D8            push b
0390   0658 26 07 3C      mov b, __s6 ; "cd"
0391   065B FD AB         swp b
0392   065D D8            push b
0393   065E 07 86 0D      call strcmp
0394   0661 51 04 00      add sp, 4
0395   0664 C0 00 00      cmp b, 0
0396   0667 FD 71         seq ; !
0397   0669 C0 00 00      cmp b, 0
0398   066C C6 75 06      je _if11_else
0399   066F             _if11_true:
0400   066F             ;; command_cd(); 
0401   066F 07 8C 31      call command_cd
0402   0672 0A 80 09      jmp _if11_exit
0403   0675             _if11_else:
0404   0675             ;; if(!strcmp(token, "shell")) command_shell(); 
0405   0675             _if12_cond:
0406   0675 3B 85 33      mov d, _token_data ; $token
0407   0678 2D            mov b, d
0408   0679 FD AB         swp b
0409   067B D8            push b
0410   067C 26 0A 3C      mov b, __s7 ; "shell"
0411   067F FD AB         swp b
0412   0681 D8            push b
0413   0682 07 86 0D      call strcmp
0414   0685 51 04 00      add sp, 4
0415   0688 C0 00 00      cmp b, 0
0416   068B FD 71         seq ; !
0417   068D C0 00 00      cmp b, 0
0418   0690 C6 99 06      je _if12_else
0419   0693             _if12_true:
0420   0693             ;; command_shell(); 
0421   0693 07 A6 32      call command_shell
0422   0696 0A 80 09      jmp _if12_exit
0423   0699             _if12_else:
0424   0699             ;; back(); 
0425   0699 07 8C 1A      call back
0426   069C             ;; get_path(); 
0427   069C 07 F0 1A      call get_path
0428   069F             ;; strcpy(path, token); // save file path 
0429   069F 3B 87 37      mov d, _path_data ; $path
0430   06A2 2D            mov b, d
0431   06A3 FD AB         swp b
0432   06A5 D8            push b
0433   06A6 3B 85 33      mov d, _token_data ; $token
0434   06A9 2D            mov b, d
0435   06AA FD AB         swp b
0436   06AC D8            push b
0437   06AD 07 26 0D      call strcpy
0438   06B0 51 04 00      add sp, 4
0439   06B3             ;; for(i = 0; i < 256; i++) argument[i] = 0; 
0440   06B3             _for13_init:
0441   06B3 FA 73 FF      lea d, [bp + -141] ; $i
0442   06B6 DA            push d
0443   06B7 26 00 00      mov b, $0
0444   06BA E7            pop d
0445   06BB FD 43         mov [d], b
0446   06BD             _for13_cond:
0447   06BD FA 73 FF      lea d, [bp + -141] ; $i
0448   06C0 2A            mov b, [d]
0449   06C1             ; START RELATIONAL
0450   06C1 D7            push a
0451   06C2 11            mov a, b
0452   06C3 26 00 01      mov b, $100
0453   06C6 B0            cmp a, b
0454   06C7 FD 73         slt ; < 
0455   06C9 E4            pop a
0456   06CA             ; END RELATIONAL
0457   06CA C0 00 00      cmp b, 0
0458   06CD C6 F5 06      je _for13_exit
0459   06D0             _for13_block:
0460   06D0             ;; argument[i] = 0; 
0461   06D0 3B 87 39      mov d, _argument_data ; $argument
0462   06D3 D7            push a
0463   06D4 DA            push d
0464   06D5 FA 73 FF      lea d, [bp + -141] ; $i
0465   06D8 2A            mov b, [d]
0466   06D9 E7            pop d
0467   06DA 5A            add d, b
0468   06DB E4            pop a
0469   06DC DA            push d
0470   06DD 26 00 00      mov b, $0
0471   06E0 E7            pop d
0472   06E1 FD 3E         mov [d], bl
0473   06E3             _for13_update:
0474   06E3 FA 73 FF      lea d, [bp + -141] ; $i
0475   06E6 2A            mov b, [d]
0476   06E7 FD 79         mov g, b
0477   06E9 FD 77         inc b
0478   06EB FA 73 FF      lea d, [bp + -141] ; $i
0479   06EE FD 43         mov [d], b
0480   06F0 FD 27         mov b, g
0481   06F2 0A BD 06      jmp _for13_cond
0482   06F5             _for13_exit:
0483   06F5             ;; get(); 
0484   06F5 07 58 1C      call get
0485   06F8             ;; if(tok != SEMICOLON && toktype != END){ 
0486   06F8             _if14_cond:
0487   06F8 3B 7F 33      mov d, _tok ; $tok
0488   06FB 2A            mov b, [d]
0489   06FC             ; START RELATIONAL
0490   06FC D7            push a
0491   06FD 11            mov a, b
0492   06FE 26 23 00      mov b, 35; SEMICOLON
0493   0701 B0            cmp a, b
0494   0702 FD 72         sneq ; !=
0495   0704 E4            pop a
0496   0705             ; END RELATIONAL
0497   0705 D7            push a
0498   0706 11            mov a, b
0499   0707 3B 81 33      mov d, _toktype ; $toktype
0500   070A 2A            mov b, [d]
0501   070B             ; START RELATIONAL
0502   070B D7            push a
0503   070C 11            mov a, b
0504   070D 26 06 00      mov b, 6; END
0505   0710 B0            cmp a, b
0506   0711 FD 72         sneq ; !=
0507   0713 E4            pop a
0508   0714             ; END RELATIONAL
0509   0714 FD A7         sand a, b ; &&
0510   0716 E4            pop a
0511   0717 C0 00 00      cmp b, 0
0512   071A C6 72 08      je _if14_exit
0513   071D             _if14_true:
0514   071D             ;; back(); 
0515   071D 07 8C 1A      call back
0516   0720             ;; p = argument; 
0517   0720 FA FF FF      lea d, [bp + -1] ; $p
0518   0723 DA            push d
0519   0724 3B 87 39      mov d, _argument_data ; $argument
0520   0727 2D            mov b, d
0521   0728 E7            pop d
0522   0729 FD 43         mov [d], b
0523   072B             ;; do{ 
0524   072B             _do15_block:
0525   072B             ;; if(*prog == '$'){ 
0526   072B             _if16_cond:
0527   072B 3B 83 33      mov d, _prog ; $prog
0528   072E 2A            mov b, [d]
0529   072F 74            mov d, b
0530   0730 32            mov bl, [d]
0531   0731 A7 00         mov bh, 0
0532   0733             ; START RELATIONAL
0533   0733 D7            push a
0534   0734 11            mov a, b
0535   0735 26 24 00      mov b, $24
0536   0738 B0            cmp a, b
0537   0739 FD 71         seq ; ==
0538   073B E4            pop a
0539   073C             ; END RELATIONAL
0540   073C C0 00 00      cmp b, 0
0541   073F C6 11 08      je _if16_else
0542   0742             _if16_true:
0543   0742             ;; prog++; 
0544   0742 3B 83 33      mov d, _prog ; $prog
0545   0745 2A            mov b, [d]
0546   0746 FD 79         mov g, b
0547   0748 FD 77         inc b
0548   074A 3B 83 33      mov d, _prog ; $prog
0549   074D FD 43         mov [d], b
0550   074F FD 27         mov b, g
0551   0751             ;; get(); // get variable name 
0552   0751 07 58 1C      call get
0553   0754             ;; var_index = get_var_index(token); 
0554   0754 FA 75 FF      lea d, [bp + -139] ; $var_index
0555   0757 DA            push d
0556   0758 3B 85 33      mov d, _token_data ; $token
0557   075B 2D            mov b, d
0558   075C FD AB         swp b
0559   075E D8            push b
0560   075F 07 35 2F      call get_var_index
0561   0762 51 02 00      add sp, 2
0562   0765 E7            pop d
0563   0766 FD 43         mov [d], b
0564   0768             ;; if(var_index != -1){ 
0565   0768             _if17_cond:
0566   0768 FA 75 FF      lea d, [bp + -139] ; $var_index
0567   076B 2A            mov b, [d]
0568   076C             ; START RELATIONAL
0569   076C D7            push a
0570   076D 11            mov a, b
0571   076E 26 01 00      mov b, $1
0572   0771 FD 97         neg b
0573   0773 B0            cmp a, b
0574   0774 FD 72         sneq ; !=
0575   0776 E4            pop a
0576   0777             ; END RELATIONAL
0577   0777 C0 00 00      cmp b, 0
0578   077A C6 0E 08      je _if17_exit
0579   077D             _if17_true:
0580   077D             ;; if(get_var_type(token) == SHELL_VAR_TYP_INT) strcat(argument, "123"); 
0581   077D             _if18_cond:
0582   077D 3B 85 33      mov d, _token_data ; $token
0583   0780 2D            mov b, d
0584   0781 FD AB         swp b
0585   0783 D8            push b
0586   0784 07 AB 2F      call get_var_type
0587   0787 51 02 00      add sp, 2
0588   078A             ; START RELATIONAL
0589   078A D7            push a
0590   078B 11            mov a, b
0591   078C 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
0592   078F B0            cmp a, b
0593   0790 FD 71         seq ; ==
0594   0792 E4            pop a
0595   0793             ; END RELATIONAL
0596   0793 C0 00 00      cmp b, 0
0597   0796 C6 AF 07      je _if18_else
0598   0799             _if18_true:
0599   0799             ;; strcat(argument, "123"); 
0600   0799 3B 87 39      mov d, _argument_data ; $argument
0601   079C 2D            mov b, d
0602   079D FD AB         swp b
0603   079F D8            push b
0604   07A0 26 10 3C      mov b, __s8 ; "123"
0605   07A3 FD AB         swp b
0606   07A5 D8            push b
0607   07A6 07 EA 0D      call strcat
0608   07A9 51 04 00      add sp, 4
0609   07AC 0A EB 07      jmp _if18_exit
0610   07AF             _if18_else:
0611   07AF             ;; if(get_var_type(token) == SHELL_VAR_TYP_STR) strcat(argument, get_shell_var_strval(var_index)); 
0612   07AF             _if19_cond:
0613   07AF 3B 85 33      mov d, _token_data ; $token
0614   07B2 2D            mov b, d
0615   07B3 FD AB         swp b
0616   07B5 D8            push b
0617   07B6 07 AB 2F      call get_var_type
0618   07B9 51 02 00      add sp, 2
0619   07BC             ; START RELATIONAL
0620   07BC D7            push a
0621   07BD 11            mov a, b
0622   07BE 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
0623   07C1 B0            cmp a, b
0624   07C2 FD 71         seq ; ==
0625   07C4 E4            pop a
0626   07C5             ; END RELATIONAL
0627   07C5 C0 00 00      cmp b, 0
0628   07C8 C6 EB 07      je _if19_exit
0629   07CB             _if19_true:
0630   07CB             ;; strcat(argument, get_shell_var_strval(var_index)); 
0631   07CB 3B 87 39      mov d, _argument_data ; $argument
0632   07CE 2D            mov b, d
0633   07CF FD AB         swp b
0634   07D1 D8            push b
0635   07D2 FA 75 FF      lea d, [bp + -139] ; $var_index
0636   07D5 2A            mov b, [d]
0637   07D6 FD AB         swp b
0638   07D8 D8            push b
0639   07D9 07 3F 31      call get_shell_var_strval
0640   07DC 51 02 00      add sp, 2
0641   07DF FD AB         swp b
0642   07E1 D8            push b
0643   07E2 07 EA 0D      call strcat
0644   07E5 51 04 00      add sp, 4
0645   07E8 0A EB 07      jmp _if19_exit
0646   07EB             _if19_exit:
0647   07EB             _if18_exit:
0648   07EB             ;; while(*p) p++; 
0649   07EB             _while20_cond:
0650   07EB FA FF FF      lea d, [bp + -1] ; $p
0651   07EE 2A            mov b, [d]
0652   07EF 74            mov d, b
0653   07F0 32            mov bl, [d]
0654   07F1 A7 00         mov bh, 0
0655   07F3 C0 00 00      cmp b, 0
0656   07F6 C6 0B 08      je _while20_exit
0657   07F9             _while20_block:
0658   07F9             ;; p++; 
0659   07F9 FA FF FF      lea d, [bp + -1] ; $p
0660   07FC 2A            mov b, [d]
0661   07FD FD 79         mov g, b
0662   07FF FD 77         inc b
0663   0801 FA FF FF      lea d, [bp + -1] ; $p
0664   0804 FD 43         mov [d], b
0665   0806 FD 27         mov b, g
0666   0808 0A EB 07      jmp _while20_cond
0667   080B             _while20_exit:
0668   080B 0A 0E 08      jmp _if17_exit
0669   080E             _if17_exit:
0670   080E 0A 37 08      jmp _if16_exit
0671   0811             _if16_else:
0672   0811             ;; *p++ = *prog++; 
0673   0811 FA FF FF      lea d, [bp + -1] ; $p
0674   0814 2A            mov b, [d]
0675   0815 FD 79         mov g, b
0676   0817 FD 77         inc b
0677   0819 FA FF FF      lea d, [bp + -1] ; $p
0678   081C FD 43         mov [d], b
0679   081E FD 27         mov b, g
0680   0820 D8            push b
0681   0821 3B 83 33      mov d, _prog ; $prog
0682   0824 2A            mov b, [d]
0683   0825 FD 79         mov g, b
0684   0827 FD 77         inc b
0685   0829 3B 83 33      mov d, _prog ; $prog
0686   082C FD 43         mov [d], b
0687   082E FD 27         mov b, g
0688   0830 74            mov d, b
0689   0831 32            mov bl, [d]
0690   0832 A7 00         mov bh, 0
0691   0834 E7            pop d
0692   0835 FD 3E         mov [d], bl
0693   0837             _if16_exit:
0694   0837             ;; } while(*prog != '\0' && *prog != ';'); 
0695   0837             _do15_cond:
0696   0837 3B 83 33      mov d, _prog ; $prog
0697   083A 2A            mov b, [d]
0698   083B 74            mov d, b
0699   083C 32            mov bl, [d]
0700   083D A7 00         mov bh, 0
0701   083F             ; START RELATIONAL
0702   083F D7            push a
0703   0840 11            mov a, b
0704   0841 26 00 00      mov b, $0
0705   0844 B0            cmp a, b
0706   0845 FD 72         sneq ; !=
0707   0847 E4            pop a
0708   0848             ; END RELATIONAL
0709   0848 D7            push a
0710   0849 11            mov a, b
0711   084A 3B 83 33      mov d, _prog ; $prog
0712   084D 2A            mov b, [d]
0713   084E 74            mov d, b
0714   084F 32            mov bl, [d]
0715   0850 A7 00         mov bh, 0
0716   0852             ; START RELATIONAL
0717   0852 D7            push a
0718   0853 11            mov a, b
0719   0854 26 3B 00      mov b, $3b
0720   0857 B0            cmp a, b
0721   0858 FD 72         sneq ; !=
0722   085A E4            pop a
0723   085B             ; END RELATIONAL
0724   085B FD A7         sand a, b ; &&
0725   085D E4            pop a
0726   085E C0 01 00      cmp b, 1
0727   0861 C6 2B 07      je _do15_block
0728   0864             _do15_exit:
0729   0864             ;; *p = '\0'; 
0730   0864 FA FF FF      lea d, [bp + -1] ; $p
0731   0867 2A            mov b, [d]
0732   0868 D8            push b
0733   0869 26 00 00      mov b, $0
0734   086C E7            pop d
0735   086D FD 3E         mov [d], bl
0736   086F 0A 72 08      jmp _if14_exit
0737   0872             _if14_exit:
0738   0872             ;; if(*path == '/' || *path == '.') spawn_new_proc(path, argument); 
0739   0872             _if21_cond:
0740   0872 3B 87 37      mov d, _path_data ; $path
0741   0875 2D            mov b, d
0742   0876 74            mov d, b
0743   0877 32            mov bl, [d]
0744   0878 A7 00         mov bh, 0
0745   087A             ; START RELATIONAL
0746   087A D7            push a
0747   087B 11            mov a, b
0748   087C 26 2F 00      mov b, $2f
0749   087F B0            cmp a, b
0750   0880 FD 71         seq ; ==
0751   0882 E4            pop a
0752   0883             ; END RELATIONAL
0753   0883 D7            push a
0754   0884 11            mov a, b
0755   0885 3B 87 37      mov d, _path_data ; $path
0756   0888 2D            mov b, d
0757   0889 74            mov d, b
0758   088A 32            mov bl, [d]
0759   088B A7 00         mov bh, 0
0760   088D             ; START RELATIONAL
0761   088D D7            push a
0762   088E 11            mov a, b
0763   088F 26 2E 00      mov b, $2e
0764   0892 B0            cmp a, b
0765   0893 FD 71         seq ; ==
0766   0895 E4            pop a
0767   0896             ; END RELATIONAL
0768   0896 FD A8         sor a, b ; ||
0769   0898 E4            pop a
0770   0899 C0 00 00      cmp b, 0
0771   089C C6 B6 08      je _if21_else
0772   089F             _if21_true:
0773   089F             ;; spawn_new_proc(path, argument); 
0774   089F 3B 87 37      mov d, _path_data ; $path
0775   08A2 2D            mov b, d
0776   08A3 FD AB         swp b
0777   08A5 D8            push b
0778   08A6 3B 87 39      mov d, _argument_data ; $argument
0779   08A9 2D            mov b, d
0780   08AA FD AB         swp b
0781   08AC D8            push b
0782   08AD 07 96 32      call spawn_new_proc
0783   08B0 51 04 00      add sp, 4
0784   08B3 0A 80 09      jmp _if21_exit
0785   08B6             _if21_else:
0786   08B6             ;; temp_prog = prog; 
0787   08B6 FA FB FF      lea d, [bp + -5] ; $temp_prog
0788   08B9 DA            push d
0789   08BA 3B 83 33      mov d, _prog ; $prog
0790   08BD 2A            mov b, [d]
0791   08BE E7            pop d
0792   08BF FD 43         mov [d], b
0793   08C1             ;; prog = variables[0].as_string; 
0794   08C1 3B 83 33      mov d, _prog ; $prog
0795   08C4 DA            push d
0796   08C5 3B 07 3B      mov d, _variables_data ; $variables
0797   08C8 D7            push a
0798   08C9 DA            push d
0799   08CA 26 00 00      mov b, $0
0800   08CD E7            pop d
0801   08CE FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0802   08D2 E4            pop a
0803   08D3 58 11 00      add d, 17
0804   08D6 FD 14         clb
0805   08D8 2A            mov b, [d]
0806   08D9 E7            pop d
0807   08DA FD 43         mov [d], b
0808   08DC             ;; for(;;){ 
0809   08DC             _for22_init:
0810   08DC             _for22_cond:
0811   08DC             _for22_block:
0812   08DC             ;; get(); 
0813   08DC 07 58 1C      call get
0814   08DF             ;; if(toktype == END){ 
0815   08DF             _if23_cond:
0816   08DF 3B 81 33      mov d, _toktype ; $toktype
0817   08E2 2A            mov b, [d]
0818   08E3             ; START RELATIONAL
0819   08E3 D7            push a
0820   08E4 11            mov a, b
0821   08E5 26 06 00      mov b, 6; END
0822   08E8 B0            cmp a, b
0823   08E9 FD 71         seq ; ==
0824   08EB E4            pop a
0825   08EC             ; END RELATIONAL
0826   08EC C0 00 00      cmp b, 0
0827   08EF C6 F8 08      je _if23_else
0828   08F2             _if23_true:
0829   08F2             ;; break; 
0830   08F2 0A 75 09      jmp _for22_exit ; for break
0831   08F5 0A FB 08      jmp _if23_exit
0832   08F8             _if23_else:
0833   08F8             ;; back(); 
0834   08F8 07 8C 1A      call back
0835   08FB             _if23_exit:
0836   08FB             ;; get_path(); 
0837   08FB 07 F0 1A      call get_path
0838   08FE             ;; strcpy(temp, token); 
0839   08FE 3B 87 38      mov d, _temp_data ; $temp
0840   0901 2D            mov b, d
0841   0902 FD AB         swp b
0842   0904 D8            push b
0843   0905 3B 85 33      mov d, _token_data ; $token
0844   0908 2D            mov b, d
0845   0909 FD AB         swp b
0846   090B D8            push b
0847   090C 07 26 0D      call strcpy
0848   090F 51 04 00      add sp, 4
0849   0912             ;; strcat(temp, "/"); 
0850   0912 3B 87 38      mov d, _temp_data ; $temp
0851   0915 2D            mov b, d
0852   0916 FD AB         swp b
0853   0918 D8            push b
0854   0919 26 14 3C      mov b, __s9 ; "/"
0855   091C FD AB         swp b
0856   091E D8            push b
0857   091F 07 EA 0D      call strcat
0858   0922 51 04 00      add sp, 4
0859   0925             ;; strcat(temp, path); // form full filepath with ENV_PATH + given filename 
0860   0925 3B 87 38      mov d, _temp_data ; $temp
0861   0928 2D            mov b, d
0862   0929 FD AB         swp b
0863   092B D8            push b
0864   092C 3B 87 37      mov d, _path_data ; $path
0865   092F 2D            mov b, d
0866   0930 FD AB         swp b
0867   0932 D8            push b
0868   0933 07 EA 0D      call strcat
0869   0936 51 04 00      add sp, 4
0870   0939             ;; if(file_exists(temp) != 0){ 
0871   0939             _if24_cond:
0872   0939 3B 87 38      mov d, _temp_data ; $temp
0873   093C 2D            mov b, d
0874   093D FD AB         swp b
0875   093F D8            push b
0876   0940 07 73 31      call file_exists
0877   0943 51 02 00      add sp, 2
0878   0946             ; START RELATIONAL
0879   0946 D7            push a
0880   0947 11            mov a, b
0881   0948 26 00 00      mov b, $0
0882   094B B0            cmp a, b
0883   094C FD 72         sneq ; !=
0884   094E E4            pop a
0885   094F             ; END RELATIONAL
0886   094F C0 00 00      cmp b, 0
0887   0952 C6 6F 09      je _if24_exit
0888   0955             _if24_true:
0889   0955             ;; spawn_new_proc(temp, argument); 
0890   0955 3B 87 38      mov d, _temp_data ; $temp
0891   0958 2D            mov b, d
0892   0959 FD AB         swp b
0893   095B D8            push b
0894   095C 3B 87 39      mov d, _argument_data ; $argument
0895   095F 2D            mov b, d
0896   0960 FD AB         swp b
0897   0962 D8            push b
0898   0963 07 96 32      call spawn_new_proc
0899   0966 51 04 00      add sp, 4
0900   0969             ;; break; 
0901   0969 0A 75 09      jmp _for22_exit ; for break
0902   096C 0A 6F 09      jmp _if24_exit
0903   096F             _if24_exit:
0904   096F             ;; get(); // get separator 
0905   096F 07 58 1C      call get
0906   0972             _for22_update:
0907   0972 0A DC 08      jmp _for22_cond
0908   0975             _for22_exit:
0909   0975             ;; prog = temp_prog; 
0910   0975 3B 83 33      mov d, _prog ; $prog
0911   0978 DA            push d
0912   0979 FA FB FF      lea d, [bp + -5] ; $temp_prog
0913   097C 2A            mov b, [d]
0914   097D E7            pop d
0915   097E FD 43         mov [d], b
0916   0980             _if21_exit:
0917   0980             _if12_exit:
0918   0980             _if11_exit:
0919   0980             _if7_exit:
0920   0980             _for3_update:
0921   0980 0A F7 04      jmp _for3_cond
0922   0983             _for3_exit:
0923   0983             _for1_update:
0924   0983 0A 8D 04      jmp _for1_cond
0925   0986             _for1_exit:
0926   0986 05 0B         syscall sys_terminate_proc
0927   0988             
0928   0988             include_ctype_lib:
0929   0988 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0930   098B             
0931   098B             ; --- BEGIN INLINE ASM BLOCK
0932   098B             .include "lib/ctype.asm"
0001+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  098B             ; ctype.s
0003+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  098B             
0005+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  098B             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  098B             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  098B             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  098B             ;; characters are supported.
0010+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  098B             ;; _isalnum 
0012+  098B             ;; _isalpha 
0013+  098B             ;; islower 
0014+  098B             ;; isupper 
0015+  098B             ;; _isdigit 
0016+  098B             ;; isxdigit
0017+  098B             ;; iscntrl 
0018+  098B             ;; isgraph 
0019+  098B             ;; _isspace 
0020+  098B             ;; isblank 
0021+  098B             ;; isprint 
0022+  098B             ;; ispunct 
0023+  098B             ;; tolower 
0024+  098B             ;; toupper
0025+  098B             
0026+  098B             
0027+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  098B             ;; IS ALPHANUMERIC
0029+  098B             ;; sets ZF according with result
0030+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  098B             _isalnum:
0032+  098B 07 A8 09    	call _isalpha
0033+  098E C6 94 09    	je _isalnum_exit
0034+  0991 07 95 09    	call _isdigit
0035+  0994             _isalnum_exit:
0036+  0994 09          	ret	
0037+  0995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0995             ;; IS DIGIT
0039+  0995             ;; sets ZF according with result
0040+  0995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0995             _isdigit:
0042+  0995 DB          	push al
0043+  0996 B9 30       	cmp al, '0'
0044+  0998 C8 A4 09    	jlu _isdigit_false
0045+  099B B9 39       	cmp al, '9'
0046+  099D D1 A4 09    	jgu _isdigit_false
0047+  09A0 87 00       	and al, 0	; set ZF
0048+  09A2 E8          	pop al
0049+  09A3 09          	ret
0050+  09A4             _isdigit_false:
0051+  09A4 8B 01       	or al, 1	; clear ZF
0052+  09A6 E8          	pop al
0053+  09A7 09          	ret	
0054+  09A8             	
0055+  09A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  09A8             ;; IS ALPHA
0057+  09A8             ;; sets ZF according with result
0058+  09A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  09A8             _isalpha:
0060+  09A8 DB          	push al
0061+  09A9 B9 5F       	cmp al, '_'
0062+  09AB C6 CB 09    	je _isalpha_true
0063+  09AE B9 2E       	cmp al, '.'
0064+  09B0 C6 CB 09    	je _isalpha_true
0065+  09B3 B9 41       	cmp al, 'A'
0066+  09B5 C8 C7 09    	jlu _isalpha_false
0067+  09B8 B9 7A       	cmp al, 'z'
0068+  09BA D1 C7 09    	jgu _isalpha_false
0069+  09BD B9 5A       	cmp al, 'Z'
0070+  09BF D0 CB 09    	jleu _isalpha_true
0071+  09C2 B9 61       	cmp al, 'a'
0072+  09C4 C9 CB 09    	jgeu _isalpha_true
0073+  09C7             _isalpha_false:
0074+  09C7 8B 01       	or al, 1	; clear ZF
0075+  09C9 E8          	pop al
0076+  09CA 09          	ret
0077+  09CB             _isalpha_true:
0078+  09CB 87 00       	and al, 0	; set ZF
0079+  09CD E8          	pop al
0080+  09CE 09          	ret
0081+  09CF             
0082+  09CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  09CF             ;; IS PATH-ALPHA
0084+  09CF             ;; sets ZF according with result
0085+  09CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  09CF             ispath:
0087+  09CF DB          	push al
0088+  09D0 07 95 09    	call _isdigit
0089+  09D3 C6 FD 09    	je ispath_true
0090+  09D6 B9 5F       	cmp al, '_'
0091+  09D8 C6 FD 09    	je ispath_true
0092+  09DB B9 2F       	cmp al, '/'
0093+  09DD C6 FD 09    	je ispath_true
0094+  09E0 B9 2E       	cmp al, '.'
0095+  09E2 C6 FD 09    	je ispath_true
0096+  09E5 B9 41       	cmp al, 'A'
0097+  09E7 C8 F9 09    	jlu ispath_false
0098+  09EA B9 7A       	cmp al, 'z'
0099+  09EC D1 F9 09    	jgu ispath_false
0100+  09EF B9 5A       	cmp al, 'Z'
0101+  09F1 D0 FD 09    	jleu ispath_true
0102+  09F4 B9 61       	cmp al, 'a'
0103+  09F6 C9 FD 09    	jgeu ispath_true
0104+  09F9             ispath_false:
0105+  09F9 8B 01       	or al, 1	; clear ZF
0106+  09FB E8          	pop al
0107+  09FC 09          	ret
0108+  09FD             ispath_true:
0109+  09FD 87 00       	and al, 0	; set ZF
0110+  09FF E8          	pop al
0111+  0A00 09          	ret
0112+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0A01             ;; IS SPACE
0114+  0A01             ;; sets ZF according with result
0115+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0A01             _isspace:
0117+  0A01 B9 20       	cmp al, $20		; ' '
0118+  0A03 C6 17 0A    	je _isspace_exit
0119+  0A06 B9 09       	cmp al, $09		; '\t'
0120+  0A08 C6 17 0A    	je _isspace_exit
0121+  0A0B B9 0A       	cmp al, $0A		; '\n'
0122+  0A0D C6 17 0A    	je _isspace_exit
0123+  0A10 B9 0D       	cmp al, $0D		; '\r'
0124+  0A12 C6 17 0A    	je _isspace_exit
0125+  0A15 B9 0B       	cmp al, $0B		; '\v'
0126+  0A17             _isspace_exit:
0127+  0A17 09          	ret	
0128+  0A18             
0129+  0A18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0A18             ; TO LOWER
0131+  0A18             ; input in AL
0132+  0A18             ; output in AL
0133+  0A18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0A18             _to_lower:
0135+  0A18 B9 5A       	cmp al, 'Z'
0136+  0A1A D1 1F 0A    	jgu _to_lower_ret
0137+  0A1D 6A 20       	add al, $20				; convert to lower case
0138+  0A1F             _to_lower_ret:
0139+  0A1F 09          	ret
0140+  0A20             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0A20             ; TO UPPER
0142+  0A20             ; input in AL
0143+  0A20             ; output in AL
0144+  0A20             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0A20             _to_upper:
0146+  0A20 B9 61       	cmp al, 'a'
0147+  0A22 C8 27 0A    	jlu _to_upper_ret
0148+  0A25 6F 20       	sub al, $20			; convert to upper case
0149+  0A27             _to_upper_ret:
0150+  0A27 09          	ret
0151+  0A28             
0933   0A28             ; --- END INLINE ASM BLOCK
0934   0A28             
0935   0A28 F9            leave
0936   0A29 09            ret
0937   0A2A             
0938   0A2A             is_space:
0939   0A2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0940   0A2D             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0941   0A2D FA 05 00      lea d, [bp + 5] ; $c
0942   0A30 32            mov bl, [d]
0943   0A31 A7 00         mov bh, 0
0944   0A33             ; START RELATIONAL
0945   0A33 D7            push a
0946   0A34 11            mov a, b
0947   0A35 26 20 00      mov b, $20
0948   0A38 B0            cmp a, b
0949   0A39 FD 71         seq ; ==
0950   0A3B E4            pop a
0951   0A3C             ; END RELATIONAL
0952   0A3C D7            push a
0953   0A3D 11            mov a, b
0954   0A3E FA 05 00      lea d, [bp + 5] ; $c
0955   0A41 32            mov bl, [d]
0956   0A42 A7 00         mov bh, 0
0957   0A44             ; START RELATIONAL
0958   0A44 D7            push a
0959   0A45 11            mov a, b
0960   0A46 26 09 00      mov b, $9
0961   0A49 B0            cmp a, b
0962   0A4A FD 71         seq ; ==
0963   0A4C E4            pop a
0964   0A4D             ; END RELATIONAL
0965   0A4D FD A8         sor a, b ; ||
0966   0A4F 11            mov a, b
0967   0A50 FA 05 00      lea d, [bp + 5] ; $c
0968   0A53 32            mov bl, [d]
0969   0A54 A7 00         mov bh, 0
0970   0A56             ; START RELATIONAL
0971   0A56 D7            push a
0972   0A57 11            mov a, b
0973   0A58 26 0A 00      mov b, $a
0974   0A5B B0            cmp a, b
0975   0A5C FD 71         seq ; ==
0976   0A5E E4            pop a
0977   0A5F             ; END RELATIONAL
0978   0A5F FD A8         sor a, b ; ||
0979   0A61 11            mov a, b
0980   0A62 FA 05 00      lea d, [bp + 5] ; $c
0981   0A65 32            mov bl, [d]
0982   0A66 A7 00         mov bh, 0
0983   0A68             ; START RELATIONAL
0984   0A68 D7            push a
0985   0A69 11            mov a, b
0986   0A6A 26 0D 00      mov b, $d
0987   0A6D B0            cmp a, b
0988   0A6E FD 71         seq ; ==
0989   0A70 E4            pop a
0990   0A71             ; END RELATIONAL
0991   0A71 FD A8         sor a, b ; ||
0992   0A73 E4            pop a
0993   0A74 F9            leave
0994   0A75 09            ret
0995   0A76             
0996   0A76             is_digit:
0997   0A76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0998   0A79             ;; return c >= '0' && c <= '9'; 
0999   0A79 FA 05 00      lea d, [bp + 5] ; $c
1000   0A7C 32            mov bl, [d]
1001   0A7D A7 00         mov bh, 0
1002   0A7F             ; START RELATIONAL
1003   0A7F D7            push a
1004   0A80 11            mov a, b
1005   0A81 26 30 00      mov b, $30
1006   0A84 B0            cmp a, b
1007   0A85 FD 80         sge ; >=
1008   0A87 E4            pop a
1009   0A88             ; END RELATIONAL
1010   0A88 D7            push a
1011   0A89 11            mov a, b
1012   0A8A FA 05 00      lea d, [bp + 5] ; $c
1013   0A8D 32            mov bl, [d]
1014   0A8E A7 00         mov bh, 0
1015   0A90             ; START RELATIONAL
1016   0A90 D7            push a
1017   0A91 11            mov a, b
1018   0A92 26 39 00      mov b, $39
1019   0A95 B0            cmp a, b
1020   0A96 FD 74         sle ; <=
1021   0A98 E4            pop a
1022   0A99             ; END RELATIONAL
1023   0A99 FD A7         sand a, b ; &&
1024   0A9B E4            pop a
1025   0A9C F9            leave
1026   0A9D 09            ret
1027   0A9E             
1028   0A9E             is_alpha:
1029   0A9E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1030   0AA1             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
1031   0AA1 FA 05 00      lea d, [bp + 5] ; $c
1032   0AA4 32            mov bl, [d]
1033   0AA5 A7 00         mov bh, 0
1034   0AA7             ; START RELATIONAL
1035   0AA7 D7            push a
1036   0AA8 11            mov a, b
1037   0AA9 26 61 00      mov b, $61
1038   0AAC B0            cmp a, b
1039   0AAD FD 80         sge ; >=
1040   0AAF E4            pop a
1041   0AB0             ; END RELATIONAL
1042   0AB0 D7            push a
1043   0AB1 11            mov a, b
1044   0AB2 FA 05 00      lea d, [bp + 5] ; $c
1045   0AB5 32            mov bl, [d]
1046   0AB6 A7 00         mov bh, 0
1047   0AB8             ; START RELATIONAL
1048   0AB8 D7            push a
1049   0AB9 11            mov a, b
1050   0ABA 26 7A 00      mov b, $7a
1051   0ABD B0            cmp a, b
1052   0ABE FD 74         sle ; <=
1053   0AC0 E4            pop a
1054   0AC1             ; END RELATIONAL
1055   0AC1 FD A7         sand a, b ; &&
1056   0AC3 E4            pop a
1057   0AC4 D7            push a
1058   0AC5 11            mov a, b
1059   0AC6 FA 05 00      lea d, [bp + 5] ; $c
1060   0AC9 32            mov bl, [d]
1061   0ACA A7 00         mov bh, 0
1062   0ACC             ; START RELATIONAL
1063   0ACC D7            push a
1064   0ACD 11            mov a, b
1065   0ACE 26 41 00      mov b, $41
1066   0AD1 B0            cmp a, b
1067   0AD2 FD 80         sge ; >=
1068   0AD4 E4            pop a
1069   0AD5             ; END RELATIONAL
1070   0AD5 D7            push a
1071   0AD6 11            mov a, b
1072   0AD7 FA 05 00      lea d, [bp + 5] ; $c
1073   0ADA 32            mov bl, [d]
1074   0ADB A7 00         mov bh, 0
1075   0ADD             ; START RELATIONAL
1076   0ADD D7            push a
1077   0ADE 11            mov a, b
1078   0ADF 26 5A 00      mov b, $5a
1079   0AE2 B0            cmp a, b
1080   0AE3 FD 74         sle ; <=
1081   0AE5 E4            pop a
1082   0AE6             ; END RELATIONAL
1083   0AE6 FD A7         sand a, b ; &&
1084   0AE8 E4            pop a
1085   0AE9 FD A8         sor a, b ; ||
1086   0AEB 11            mov a, b
1087   0AEC FA 05 00      lea d, [bp + 5] ; $c
1088   0AEF 32            mov bl, [d]
1089   0AF0 A7 00         mov bh, 0
1090   0AF2             ; START RELATIONAL
1091   0AF2 D7            push a
1092   0AF3 11            mov a, b
1093   0AF4 26 5F 00      mov b, $5f
1094   0AF7 B0            cmp a, b
1095   0AF8 FD 71         seq ; ==
1096   0AFA E4            pop a
1097   0AFB             ; END RELATIONAL
1098   0AFB FD A8         sor a, b ; ||
1099   0AFD E4            pop a
1100   0AFE F9            leave
1101   0AFF 09            ret
1102   0B00             
1103   0B00             toupper:
1104   0B00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1105   0B03             ;; if (ch >= 'a' && ch <= 'z') { 
1106   0B03             _if25_cond:
1107   0B03 FA 05 00      lea d, [bp + 5] ; $ch
1108   0B06 32            mov bl, [d]
1109   0B07 A7 00         mov bh, 0
1110   0B09             ; START RELATIONAL
1111   0B09 D7            push a
1112   0B0A 11            mov a, b
1113   0B0B 26 61 00      mov b, $61
1114   0B0E B0            cmp a, b
1115   0B0F FD 80         sge ; >=
1116   0B11 E4            pop a
1117   0B12             ; END RELATIONAL
1118   0B12 D7            push a
1119   0B13 11            mov a, b
1120   0B14 FA 05 00      lea d, [bp + 5] ; $ch
1121   0B17 32            mov bl, [d]
1122   0B18 A7 00         mov bh, 0
1123   0B1A             ; START RELATIONAL
1124   0B1A D7            push a
1125   0B1B 11            mov a, b
1126   0B1C 26 7A 00      mov b, $7a
1127   0B1F B0            cmp a, b
1128   0B20 FD 74         sle ; <=
1129   0B22 E4            pop a
1130   0B23             ; END RELATIONAL
1131   0B23 FD A7         sand a, b ; &&
1132   0B25 E4            pop a
1133   0B26 C0 00 00      cmp b, 0
1134   0B29 C6 43 0B      je _if25_else
1135   0B2C             _if25_true:
1136   0B2C             ;; return ch - 'a' + 'A'; 
1137   0B2C FA 05 00      lea d, [bp + 5] ; $ch
1138   0B2F 32            mov bl, [d]
1139   0B30 A7 00         mov bh, 0
1140   0B32             ; START TERMS
1141   0B32 D7            push a
1142   0B33 11            mov a, b
1143   0B34 26 61 00      mov b, $61
1144   0B37 60            sub a, b
1145   0B38 26 41 00      mov b, $41
1146   0B3B 54            add a, b
1147   0B3C 27            mov b, a
1148   0B3D E4            pop a
1149   0B3E             ; END TERMS
1150   0B3E F9            leave
1151   0B3F 09            ret
1152   0B40 0A 4B 0B      jmp _if25_exit
1153   0B43             _if25_else:
1154   0B43             ;; return ch; 
1155   0B43 FA 05 00      lea d, [bp + 5] ; $ch
1156   0B46 32            mov bl, [d]
1157   0B47 A7 00         mov bh, 0
1158   0B49 F9            leave
1159   0B4A 09            ret
1160   0B4B             _if25_exit:
1161   0B4B F9            leave
1162   0B4C 09            ret
1163   0B4D             
1164   0B4D             is_delimiter:
1165   0B4D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1166   0B50             ;; if( 
1167   0B50             _if26_cond:
1168   0B50 FA 05 00      lea d, [bp + 5] ; $c
1169   0B53 32            mov bl, [d]
1170   0B54 A7 00         mov bh, 0
1171   0B56             ; START RELATIONAL
1172   0B56 D7            push a
1173   0B57 11            mov a, b
1174   0B58 26 40 00      mov b, $40
1175   0B5B B0            cmp a, b
1176   0B5C FD 71         seq ; ==
1177   0B5E E4            pop a
1178   0B5F             ; END RELATIONAL
1179   0B5F D7            push a
1180   0B60 11            mov a, b
1181   0B61 FA 05 00      lea d, [bp + 5] ; $c
1182   0B64 32            mov bl, [d]
1183   0B65 A7 00         mov bh, 0
1184   0B67             ; START RELATIONAL
1185   0B67 D7            push a
1186   0B68 11            mov a, b
1187   0B69 26 23 00      mov b, $23
1188   0B6C B0            cmp a, b
1189   0B6D FD 71         seq ; ==
1190   0B6F E4            pop a
1191   0B70             ; END RELATIONAL
1192   0B70 FD A8         sor a, b ; ||
1193   0B72 11            mov a, b
1194   0B73 FA 05 00      lea d, [bp + 5] ; $c
1195   0B76 32            mov bl, [d]
1196   0B77 A7 00         mov bh, 0
1197   0B79             ; START RELATIONAL
1198   0B79 D7            push a
1199   0B7A 11            mov a, b
1200   0B7B 26 24 00      mov b, $24
1201   0B7E B0            cmp a, b
1202   0B7F FD 71         seq ; ==
1203   0B81 E4            pop a
1204   0B82             ; END RELATIONAL
1205   0B82 FD A8         sor a, b ; ||
1206   0B84 11            mov a, b
1207   0B85 FA 05 00      lea d, [bp + 5] ; $c
1208   0B88 32            mov bl, [d]
1209   0B89 A7 00         mov bh, 0
1210   0B8B             ; START RELATIONAL
1211   0B8B D7            push a
1212   0B8C 11            mov a, b
1213   0B8D 26 2B 00      mov b, $2b
1214   0B90 B0            cmp a, b
1215   0B91 FD 71         seq ; ==
1216   0B93 E4            pop a
1217   0B94             ; END RELATIONAL
1218   0B94 FD A8         sor a, b ; ||
1219   0B96 11            mov a, b
1220   0B97 FA 05 00      lea d, [bp + 5] ; $c
1221   0B9A 32            mov bl, [d]
1222   0B9B A7 00         mov bh, 0
1223   0B9D             ; START RELATIONAL
1224   0B9D D7            push a
1225   0B9E 11            mov a, b
1226   0B9F 26 2D 00      mov b, $2d
1227   0BA2 B0            cmp a, b
1228   0BA3 FD 71         seq ; ==
1229   0BA5 E4            pop a
1230   0BA6             ; END RELATIONAL
1231   0BA6 FD A8         sor a, b ; ||
1232   0BA8 11            mov a, b
1233   0BA9 FA 05 00      lea d, [bp + 5] ; $c
1234   0BAC 32            mov bl, [d]
1235   0BAD A7 00         mov bh, 0
1236   0BAF             ; START RELATIONAL
1237   0BAF D7            push a
1238   0BB0 11            mov a, b
1239   0BB1 26 2A 00      mov b, $2a
1240   0BB4 B0            cmp a, b
1241   0BB5 FD 71         seq ; ==
1242   0BB7 E4            pop a
1243   0BB8             ; END RELATIONAL
1244   0BB8 FD A8         sor a, b ; ||
1245   0BBA 11            mov a, b
1246   0BBB FA 05 00      lea d, [bp + 5] ; $c
1247   0BBE 32            mov bl, [d]
1248   0BBF A7 00         mov bh, 0
1249   0BC1             ; START RELATIONAL
1250   0BC1 D7            push a
1251   0BC2 11            mov a, b
1252   0BC3 26 2F 00      mov b, $2f
1253   0BC6 B0            cmp a, b
1254   0BC7 FD 71         seq ; ==
1255   0BC9 E4            pop a
1256   0BCA             ; END RELATIONAL
1257   0BCA FD A8         sor a, b ; ||
1258   0BCC 11            mov a, b
1259   0BCD FA 05 00      lea d, [bp + 5] ; $c
1260   0BD0 32            mov bl, [d]
1261   0BD1 A7 00         mov bh, 0
1262   0BD3             ; START RELATIONAL
1263   0BD3 D7            push a
1264   0BD4 11            mov a, b
1265   0BD5 26 25 00      mov b, $25
1266   0BD8 B0            cmp a, b
1267   0BD9 FD 71         seq ; ==
1268   0BDB E4            pop a
1269   0BDC             ; END RELATIONAL
1270   0BDC FD A8         sor a, b ; ||
1271   0BDE 11            mov a, b
1272   0BDF FA 05 00      lea d, [bp + 5] ; $c
1273   0BE2 32            mov bl, [d]
1274   0BE3 A7 00         mov bh, 0
1275   0BE5             ; START RELATIONAL
1276   0BE5 D7            push a
1277   0BE6 11            mov a, b
1278   0BE7 26 5B 00      mov b, $5b
1279   0BEA B0            cmp a, b
1280   0BEB FD 71         seq ; ==
1281   0BED E4            pop a
1282   0BEE             ; END RELATIONAL
1283   0BEE FD A8         sor a, b ; ||
1284   0BF0 11            mov a, b
1285   0BF1 FA 05 00      lea d, [bp + 5] ; $c
1286   0BF4 32            mov bl, [d]
1287   0BF5 A7 00         mov bh, 0
1288   0BF7             ; START RELATIONAL
1289   0BF7 D7            push a
1290   0BF8 11            mov a, b
1291   0BF9 26 5D 00      mov b, $5d
1292   0BFC B0            cmp a, b
1293   0BFD FD 71         seq ; ==
1294   0BFF E4            pop a
1295   0C00             ; END RELATIONAL
1296   0C00 FD A8         sor a, b ; ||
1297   0C02 11            mov a, b
1298   0C03 FA 05 00      lea d, [bp + 5] ; $c
1299   0C06 32            mov bl, [d]
1300   0C07 A7 00         mov bh, 0
1301   0C09             ; START RELATIONAL
1302   0C09 D7            push a
1303   0C0A 11            mov a, b
1304   0C0B 26 28 00      mov b, $28
1305   0C0E B0            cmp a, b
1306   0C0F FD 71         seq ; ==
1307   0C11 E4            pop a
1308   0C12             ; END RELATIONAL
1309   0C12 FD A8         sor a, b ; ||
1310   0C14 11            mov a, b
1311   0C15 FA 05 00      lea d, [bp + 5] ; $c
1312   0C18 32            mov bl, [d]
1313   0C19 A7 00         mov bh, 0
1314   0C1B             ; START RELATIONAL
1315   0C1B D7            push a
1316   0C1C 11            mov a, b
1317   0C1D 26 29 00      mov b, $29
1318   0C20 B0            cmp a, b
1319   0C21 FD 71         seq ; ==
1320   0C23 E4            pop a
1321   0C24             ; END RELATIONAL
1322   0C24 FD A8         sor a, b ; ||
1323   0C26 11            mov a, b
1324   0C27 FA 05 00      lea d, [bp + 5] ; $c
1325   0C2A 32            mov bl, [d]
1326   0C2B A7 00         mov bh, 0
1327   0C2D             ; START RELATIONAL
1328   0C2D D7            push a
1329   0C2E 11            mov a, b
1330   0C2F 26 7B 00      mov b, $7b
1331   0C32 B0            cmp a, b
1332   0C33 FD 71         seq ; ==
1333   0C35 E4            pop a
1334   0C36             ; END RELATIONAL
1335   0C36 FD A8         sor a, b ; ||
1336   0C38 11            mov a, b
1337   0C39 FA 05 00      lea d, [bp + 5] ; $c
1338   0C3C 32            mov bl, [d]
1339   0C3D A7 00         mov bh, 0
1340   0C3F             ; START RELATIONAL
1341   0C3F D7            push a
1342   0C40 11            mov a, b
1343   0C41 26 7D 00      mov b, $7d
1344   0C44 B0            cmp a, b
1345   0C45 FD 71         seq ; ==
1346   0C47 E4            pop a
1347   0C48             ; END RELATIONAL
1348   0C48 FD A8         sor a, b ; ||
1349   0C4A 11            mov a, b
1350   0C4B FA 05 00      lea d, [bp + 5] ; $c
1351   0C4E 32            mov bl, [d]
1352   0C4F A7 00         mov bh, 0
1353   0C51             ; START RELATIONAL
1354   0C51 D7            push a
1355   0C52 11            mov a, b
1356   0C53 26 3A 00      mov b, $3a
1357   0C56 B0            cmp a, b
1358   0C57 FD 71         seq ; ==
1359   0C59 E4            pop a
1360   0C5A             ; END RELATIONAL
1361   0C5A FD A8         sor a, b ; ||
1362   0C5C 11            mov a, b
1363   0C5D FA 05 00      lea d, [bp + 5] ; $c
1364   0C60 32            mov bl, [d]
1365   0C61 A7 00         mov bh, 0
1366   0C63             ; START RELATIONAL
1367   0C63 D7            push a
1368   0C64 11            mov a, b
1369   0C65 26 3B 00      mov b, $3b
1370   0C68 B0            cmp a, b
1371   0C69 FD 71         seq ; ==
1372   0C6B E4            pop a
1373   0C6C             ; END RELATIONAL
1374   0C6C FD A8         sor a, b ; ||
1375   0C6E 11            mov a, b
1376   0C6F FA 05 00      lea d, [bp + 5] ; $c
1377   0C72 32            mov bl, [d]
1378   0C73 A7 00         mov bh, 0
1379   0C75             ; START RELATIONAL
1380   0C75 D7            push a
1381   0C76 11            mov a, b
1382   0C77 26 3C 00      mov b, $3c
1383   0C7A B0            cmp a, b
1384   0C7B FD 71         seq ; ==
1385   0C7D E4            pop a
1386   0C7E             ; END RELATIONAL
1387   0C7E FD A8         sor a, b ; ||
1388   0C80 11            mov a, b
1389   0C81 FA 05 00      lea d, [bp + 5] ; $c
1390   0C84 32            mov bl, [d]
1391   0C85 A7 00         mov bh, 0
1392   0C87             ; START RELATIONAL
1393   0C87 D7            push a
1394   0C88 11            mov a, b
1395   0C89 26 3E 00      mov b, $3e
1396   0C8C B0            cmp a, b
1397   0C8D FD 71         seq ; ==
1398   0C8F E4            pop a
1399   0C90             ; END RELATIONAL
1400   0C90 FD A8         sor a, b ; ||
1401   0C92 11            mov a, b
1402   0C93 FA 05 00      lea d, [bp + 5] ; $c
1403   0C96 32            mov bl, [d]
1404   0C97 A7 00         mov bh, 0
1405   0C99             ; START RELATIONAL
1406   0C99 D7            push a
1407   0C9A 11            mov a, b
1408   0C9B 26 3D 00      mov b, $3d
1409   0C9E B0            cmp a, b
1410   0C9F FD 71         seq ; ==
1411   0CA1 E4            pop a
1412   0CA2             ; END RELATIONAL
1413   0CA2 FD A8         sor a, b ; ||
1414   0CA4 11            mov a, b
1415   0CA5 FA 05 00      lea d, [bp + 5] ; $c
1416   0CA8 32            mov bl, [d]
1417   0CA9 A7 00         mov bh, 0
1418   0CAB             ; START RELATIONAL
1419   0CAB D7            push a
1420   0CAC 11            mov a, b
1421   0CAD 26 21 00      mov b, $21
1422   0CB0 B0            cmp a, b
1423   0CB1 FD 71         seq ; ==
1424   0CB3 E4            pop a
1425   0CB4             ; END RELATIONAL
1426   0CB4 FD A8         sor a, b ; ||
1427   0CB6 11            mov a, b
1428   0CB7 FA 05 00      lea d, [bp + 5] ; $c
1429   0CBA 32            mov bl, [d]
1430   0CBB A7 00         mov bh, 0
1431   0CBD             ; START RELATIONAL
1432   0CBD D7            push a
1433   0CBE 11            mov a, b
1434   0CBF 26 5E 00      mov b, $5e
1435   0CC2 B0            cmp a, b
1436   0CC3 FD 71         seq ; ==
1437   0CC5 E4            pop a
1438   0CC6             ; END RELATIONAL
1439   0CC6 FD A8         sor a, b ; ||
1440   0CC8 11            mov a, b
1441   0CC9 FA 05 00      lea d, [bp + 5] ; $c
1442   0CCC 32            mov bl, [d]
1443   0CCD A7 00         mov bh, 0
1444   0CCF             ; START RELATIONAL
1445   0CCF D7            push a
1446   0CD0 11            mov a, b
1447   0CD1 26 26 00      mov b, $26
1448   0CD4 B0            cmp a, b
1449   0CD5 FD 71         seq ; ==
1450   0CD7 E4            pop a
1451   0CD8             ; END RELATIONAL
1452   0CD8 FD A8         sor a, b ; ||
1453   0CDA 11            mov a, b
1454   0CDB FA 05 00      lea d, [bp + 5] ; $c
1455   0CDE 32            mov bl, [d]
1456   0CDF A7 00         mov bh, 0
1457   0CE1             ; START RELATIONAL
1458   0CE1 D7            push a
1459   0CE2 11            mov a, b
1460   0CE3 26 7C 00      mov b, $7c
1461   0CE6 B0            cmp a, b
1462   0CE7 FD 71         seq ; ==
1463   0CE9 E4            pop a
1464   0CEA             ; END RELATIONAL
1465   0CEA FD A8         sor a, b ; ||
1466   0CEC 11            mov a, b
1467   0CED FA 05 00      lea d, [bp + 5] ; $c
1468   0CF0 32            mov bl, [d]
1469   0CF1 A7 00         mov bh, 0
1470   0CF3             ; START RELATIONAL
1471   0CF3 D7            push a
1472   0CF4 11            mov a, b
1473   0CF5 26 7E 00      mov b, $7e
1474   0CF8 B0            cmp a, b
1475   0CF9 FD 71         seq ; ==
1476   0CFB E4            pop a
1477   0CFC             ; END RELATIONAL
1478   0CFC FD A8         sor a, b ; ||
1479   0CFE 11            mov a, b
1480   0CFF FA 05 00      lea d, [bp + 5] ; $c
1481   0D02 32            mov bl, [d]
1482   0D03 A7 00         mov bh, 0
1483   0D05             ; START RELATIONAL
1484   0D05 D7            push a
1485   0D06 11            mov a, b
1486   0D07 26 2E 00      mov b, $2e
1487   0D0A B0            cmp a, b
1488   0D0B FD 71         seq ; ==
1489   0D0D E4            pop a
1490   0D0E             ; END RELATIONAL
1491   0D0E FD A8         sor a, b ; ||
1492   0D10 E4            pop a
1493   0D11 C0 00 00      cmp b, 0
1494   0D14 C6 1F 0D      je _if26_else
1495   0D17             _if26_true:
1496   0D17             ;; return 1; 
1497   0D17 26 01 00      mov b, $1
1498   0D1A F9            leave
1499   0D1B 09            ret
1500   0D1C 0A 24 0D      jmp _if26_exit
1501   0D1F             _if26_else:
1502   0D1F             ;; return 0; 
1503   0D1F 26 00 00      mov b, $0
1504   0D22 F9            leave
1505   0D23 09            ret
1506   0D24             _if26_exit:
1507   0D24 F9            leave
1508   0D25 09            ret
1509   0D26             
1510   0D26             strcpy:
1511   0D26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1512   0D29             ; $psrc 
1513   0D29             ; $pdest 
1514   0D29 52 04 00      sub sp, 4
1515   0D2C             ;; psrc = src; 
1516   0D2C FA FF FF      lea d, [bp + -1] ; $psrc
1517   0D2F DA            push d
1518   0D30 FA 05 00      lea d, [bp + 5] ; $src
1519   0D33 2A            mov b, [d]
1520   0D34 E7            pop d
1521   0D35 FD 43         mov [d], b
1522   0D37             ;; pdest = dest; 
1523   0D37 FA FD FF      lea d, [bp + -3] ; $pdest
1524   0D3A DA            push d
1525   0D3B FA 07 00      lea d, [bp + 7] ; $dest
1526   0D3E 2A            mov b, [d]
1527   0D3F E7            pop d
1528   0D40 FD 43         mov [d], b
1529   0D42             ;; while(*psrc) *pdest++ = *psrc++; 
1530   0D42             _while27_cond:
1531   0D42 FA FF FF      lea d, [bp + -1] ; $psrc
1532   0D45 2A            mov b, [d]
1533   0D46 74            mov d, b
1534   0D47 32            mov bl, [d]
1535   0D48 A7 00         mov bh, 0
1536   0D4A C0 00 00      cmp b, 0
1537   0D4D C6 79 0D      je _while27_exit
1538   0D50             _while27_block:
1539   0D50             ;; *pdest++ = *psrc++; 
1540   0D50 FA FD FF      lea d, [bp + -3] ; $pdest
1541   0D53 2A            mov b, [d]
1542   0D54 FD 79         mov g, b
1543   0D56 FD 77         inc b
1544   0D58 FA FD FF      lea d, [bp + -3] ; $pdest
1545   0D5B FD 43         mov [d], b
1546   0D5D FD 27         mov b, g
1547   0D5F D8            push b
1548   0D60 FA FF FF      lea d, [bp + -1] ; $psrc
1549   0D63 2A            mov b, [d]
1550   0D64 FD 79         mov g, b
1551   0D66 FD 77         inc b
1552   0D68 FA FF FF      lea d, [bp + -1] ; $psrc
1553   0D6B FD 43         mov [d], b
1554   0D6D FD 27         mov b, g
1555   0D6F 74            mov d, b
1556   0D70 32            mov bl, [d]
1557   0D71 A7 00         mov bh, 0
1558   0D73 E7            pop d
1559   0D74 FD 3E         mov [d], bl
1560   0D76 0A 42 0D      jmp _while27_cond
1561   0D79             _while27_exit:
1562   0D79             ;; *pdest = '\0'; 
1563   0D79 FA FD FF      lea d, [bp + -3] ; $pdest
1564   0D7C 2A            mov b, [d]
1565   0D7D D8            push b
1566   0D7E 26 00 00      mov b, $0
1567   0D81 E7            pop d
1568   0D82 FD 3E         mov [d], bl
1569   0D84 F9            leave
1570   0D85 09            ret
1571   0D86             
1572   0D86             strcmp:
1573   0D86 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1574   0D89             ;; while (*s1 && (*s1 == *s2)) { 
1575   0D89             _while28_cond:
1576   0D89 FA 07 00      lea d, [bp + 7] ; $s1
1577   0D8C 2A            mov b, [d]
1578   0D8D 74            mov d, b
1579   0D8E 32            mov bl, [d]
1580   0D8F A7 00         mov bh, 0
1581   0D91 D7            push a
1582   0D92 11            mov a, b
1583   0D93 FA 07 00      lea d, [bp + 7] ; $s1
1584   0D96 2A            mov b, [d]
1585   0D97 74            mov d, b
1586   0D98 32            mov bl, [d]
1587   0D99 A7 00         mov bh, 0
1588   0D9B             ; START RELATIONAL
1589   0D9B D7            push a
1590   0D9C 11            mov a, b
1591   0D9D FA 05 00      lea d, [bp + 5] ; $s2
1592   0DA0 2A            mov b, [d]
1593   0DA1 74            mov d, b
1594   0DA2 32            mov bl, [d]
1595   0DA3 A7 00         mov bh, 0
1596   0DA5 B0            cmp a, b
1597   0DA6 FD 71         seq ; ==
1598   0DA8 E4            pop a
1599   0DA9             ; END RELATIONAL
1600   0DA9 FD A7         sand a, b ; &&
1601   0DAB E4            pop a
1602   0DAC C0 00 00      cmp b, 0
1603   0DAF C6 D3 0D      je _while28_exit
1604   0DB2             _while28_block:
1605   0DB2             ;; s1++; 
1606   0DB2 FA 07 00      lea d, [bp + 7] ; $s1
1607   0DB5 2A            mov b, [d]
1608   0DB6 FD 79         mov g, b
1609   0DB8 FD 77         inc b
1610   0DBA FA 07 00      lea d, [bp + 7] ; $s1
1611   0DBD FD 43         mov [d], b
1612   0DBF FD 27         mov b, g
1613   0DC1             ;; s2++; 
1614   0DC1 FA 05 00      lea d, [bp + 5] ; $s2
1615   0DC4 2A            mov b, [d]
1616   0DC5 FD 79         mov g, b
1617   0DC7 FD 77         inc b
1618   0DC9 FA 05 00      lea d, [bp + 5] ; $s2
1619   0DCC FD 43         mov [d], b
1620   0DCE FD 27         mov b, g
1621   0DD0 0A 89 0D      jmp _while28_cond
1622   0DD3             _while28_exit:
1623   0DD3             ;; return *s1 - *s2; 
1624   0DD3 FA 07 00      lea d, [bp + 7] ; $s1
1625   0DD6 2A            mov b, [d]
1626   0DD7 74            mov d, b
1627   0DD8 32            mov bl, [d]
1628   0DD9 A7 00         mov bh, 0
1629   0DDB             ; START TERMS
1630   0DDB D7            push a
1631   0DDC 11            mov a, b
1632   0DDD FA 05 00      lea d, [bp + 5] ; $s2
1633   0DE0 2A            mov b, [d]
1634   0DE1 74            mov d, b
1635   0DE2 32            mov bl, [d]
1636   0DE3 A7 00         mov bh, 0
1637   0DE5 60            sub a, b
1638   0DE6 27            mov b, a
1639   0DE7 E4            pop a
1640   0DE8             ; END TERMS
1641   0DE8 F9            leave
1642   0DE9 09            ret
1643   0DEA             
1644   0DEA             strcat:
1645   0DEA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1646   0DED             ; $dest_len 
1647   0DED             ; $i 
1648   0DED 52 04 00      sub sp, 4
1649   0DF0             ;; dest_len = strlen(dest); 
1650   0DF0 FA FF FF      lea d, [bp + -1] ; $dest_len
1651   0DF3 DA            push d
1652   0DF4 FA 07 00      lea d, [bp + 7] ; $dest
1653   0DF7 2A            mov b, [d]
1654   0DF8 FD AB         swp b
1655   0DFA D8            push b
1656   0DFB 07 A0 0E      call strlen
1657   0DFE 51 02 00      add sp, 2
1658   0E01 E7            pop d
1659   0E02 FD 43         mov [d], b
1660   0E04             ;; for (i = 0; src[i] != 0; i=i+1) { 
1661   0E04             _for29_init:
1662   0E04 FA FD FF      lea d, [bp + -3] ; $i
1663   0E07 DA            push d
1664   0E08 26 00 00      mov b, $0
1665   0E0B E7            pop d
1666   0E0C FD 43         mov [d], b
1667   0E0E             _for29_cond:
1668   0E0E FA 05 00      lea d, [bp + 5] ; $src
1669   0E11 FD 2A         mov d, [d]
1670   0E13 D7            push a
1671   0E14 DA            push d
1672   0E15 FA FD FF      lea d, [bp + -3] ; $i
1673   0E18 2A            mov b, [d]
1674   0E19 E7            pop d
1675   0E1A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1676   0E1E E4            pop a
1677   0E1F 32            mov bl, [d]
1678   0E20 A7 00         mov bh, 0
1679   0E22             ; START RELATIONAL
1680   0E22 D7            push a
1681   0E23 11            mov a, b
1682   0E24 26 00 00      mov b, $0
1683   0E27 B0            cmp a, b
1684   0E28 FD 72         sneq ; !=
1685   0E2A E4            pop a
1686   0E2B             ; END RELATIONAL
1687   0E2B C0 00 00      cmp b, 0
1688   0E2E C6 79 0E      je _for29_exit
1689   0E31             _for29_block:
1690   0E31             ;; dest[dest_len + i] = src[i]; 
1691   0E31 FA 07 00      lea d, [bp + 7] ; $dest
1692   0E34 FD 2A         mov d, [d]
1693   0E36 D7            push a
1694   0E37 DA            push d
1695   0E38 FA FF FF      lea d, [bp + -1] ; $dest_len
1696   0E3B 2A            mov b, [d]
1697   0E3C             ; START TERMS
1698   0E3C D7            push a
1699   0E3D 11            mov a, b
1700   0E3E FA FD FF      lea d, [bp + -3] ; $i
1701   0E41 2A            mov b, [d]
1702   0E42 54            add a, b
1703   0E43 27            mov b, a
1704   0E44 E4            pop a
1705   0E45             ; END TERMS
1706   0E45 E7            pop d
1707   0E46 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1708   0E4A E4            pop a
1709   0E4B DA            push d
1710   0E4C FA 05 00      lea d, [bp + 5] ; $src
1711   0E4F FD 2A         mov d, [d]
1712   0E51 D7            push a
1713   0E52 DA            push d
1714   0E53 FA FD FF      lea d, [bp + -3] ; $i
1715   0E56 2A            mov b, [d]
1716   0E57 E7            pop d
1717   0E58 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1718   0E5C E4            pop a
1719   0E5D 32            mov bl, [d]
1720   0E5E A7 00         mov bh, 0
1721   0E60 E7            pop d
1722   0E61 FD 3E         mov [d], bl
1723   0E63             _for29_update:
1724   0E63 FA FD FF      lea d, [bp + -3] ; $i
1725   0E66 DA            push d
1726   0E67 FA FD FF      lea d, [bp + -3] ; $i
1727   0E6A 2A            mov b, [d]
1728   0E6B             ; START TERMS
1729   0E6B D7            push a
1730   0E6C 11            mov a, b
1731   0E6D 26 01 00      mov b, $1
1732   0E70 54            add a, b
1733   0E71 27            mov b, a
1734   0E72 E4            pop a
1735   0E73             ; END TERMS
1736   0E73 E7            pop d
1737   0E74 FD 43         mov [d], b
1738   0E76 0A 0E 0E      jmp _for29_cond
1739   0E79             _for29_exit:
1740   0E79             ;; dest[dest_len + i] = 0; 
1741   0E79 FA 07 00      lea d, [bp + 7] ; $dest
1742   0E7C FD 2A         mov d, [d]
1743   0E7E D7            push a
1744   0E7F DA            push d
1745   0E80 FA FF FF      lea d, [bp + -1] ; $dest_len
1746   0E83 2A            mov b, [d]
1747   0E84             ; START TERMS
1748   0E84 D7            push a
1749   0E85 11            mov a, b
1750   0E86 FA FD FF      lea d, [bp + -3] ; $i
1751   0E89 2A            mov b, [d]
1752   0E8A 54            add a, b
1753   0E8B 27            mov b, a
1754   0E8C E4            pop a
1755   0E8D             ; END TERMS
1756   0E8D E7            pop d
1757   0E8E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1758   0E92 E4            pop a
1759   0E93 DA            push d
1760   0E94 26 00 00      mov b, $0
1761   0E97 E7            pop d
1762   0E98 FD 3E         mov [d], bl
1763   0E9A             ;; return dest; 
1764   0E9A FA 07 00      lea d, [bp + 7] ; $dest
1765   0E9D 2A            mov b, [d]
1766   0E9E F9            leave
1767   0E9F 09            ret
1768   0EA0             
1769   0EA0             strlen:
1770   0EA0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1771   0EA3             ; $length 
1772   0EA3 52 02 00      sub sp, 2
1773   0EA6             ;; length = 0; 
1774   0EA6 FA FF FF      lea d, [bp + -1] ; $length
1775   0EA9 DA            push d
1776   0EAA 26 00 00      mov b, $0
1777   0EAD E7            pop d
1778   0EAE FD 43         mov [d], b
1779   0EB0             ;; while (str[length] != 0) { 
1780   0EB0             _while30_cond:
1781   0EB0 FA 05 00      lea d, [bp + 5] ; $str
1782   0EB3 FD 2A         mov d, [d]
1783   0EB5 D7            push a
1784   0EB6 DA            push d
1785   0EB7 FA FF FF      lea d, [bp + -1] ; $length
1786   0EBA 2A            mov b, [d]
1787   0EBB E7            pop d
1788   0EBC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1789   0EC0 E4            pop a
1790   0EC1 32            mov bl, [d]
1791   0EC2 A7 00         mov bh, 0
1792   0EC4             ; START RELATIONAL
1793   0EC4 D7            push a
1794   0EC5 11            mov a, b
1795   0EC6 26 00 00      mov b, $0
1796   0EC9 B0            cmp a, b
1797   0ECA FD 72         sneq ; !=
1798   0ECC E4            pop a
1799   0ECD             ; END RELATIONAL
1800   0ECD C0 00 00      cmp b, 0
1801   0ED0 C6 E5 0E      je _while30_exit
1802   0ED3             _while30_block:
1803   0ED3             ;; length++; 
1804   0ED3 FA FF FF      lea d, [bp + -1] ; $length
1805   0ED6 2A            mov b, [d]
1806   0ED7 FD 79         mov g, b
1807   0ED9 FD 77         inc b
1808   0EDB FA FF FF      lea d, [bp + -1] ; $length
1809   0EDE FD 43         mov [d], b
1810   0EE0 FD 27         mov b, g
1811   0EE2 0A B0 0E      jmp _while30_cond
1812   0EE5             _while30_exit:
1813   0EE5             ;; return length; 
1814   0EE5 FA FF FF      lea d, [bp + -1] ; $length
1815   0EE8 2A            mov b, [d]
1816   0EE9 F9            leave
1817   0EEA 09            ret
1818   0EEB             
1819   0EEB             va_arg:
1820   0EEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1821   0EEE             ; $val 
1822   0EEE 52 02 00      sub sp, 2
1823   0EF1             ;; if(size == 1){ 
1824   0EF1             _if31_cond:
1825   0EF1 FA 05 00      lea d, [bp + 5] ; $size
1826   0EF4 2A            mov b, [d]
1827   0EF5             ; START RELATIONAL
1828   0EF5 D7            push a
1829   0EF6 11            mov a, b
1830   0EF7 26 01 00      mov b, $1
1831   0EFA B0            cmp a, b
1832   0EFB FD 71         seq ; ==
1833   0EFD E4            pop a
1834   0EFE             ; END RELATIONAL
1835   0EFE C0 00 00      cmp b, 0
1836   0F01 C6 1D 0F      je _if31_else
1837   0F04             _if31_true:
1838   0F04             ;; val = *(char*)arg->p; 
1839   0F04 FA FF FF      lea d, [bp + -1] ; $val
1840   0F07 DA            push d
1841   0F08 FA 07 00      lea d, [bp + 7] ; $arg
1842   0F0B FD 2A         mov d, [d]
1843   0F0D 58 00 00      add d, 0
1844   0F10 FD 14         clb
1845   0F12 2A            mov b, [d]
1846   0F13 74            mov d, b
1847   0F14 32            mov bl, [d]
1848   0F15 A7 00         mov bh, 0
1849   0F17 E7            pop d
1850   0F18 FD 43         mov [d], b
1851   0F1A 0A 53 0F      jmp _if31_exit
1852   0F1D             _if31_else:
1853   0F1D             ;; if(size == 2){ 
1854   0F1D             _if32_cond:
1855   0F1D FA 05 00      lea d, [bp + 5] ; $size
1856   0F20 2A            mov b, [d]
1857   0F21             ; START RELATIONAL
1858   0F21 D7            push a
1859   0F22 11            mov a, b
1860   0F23 26 02 00      mov b, $2
1861   0F26 B0            cmp a, b
1862   0F27 FD 71         seq ; ==
1863   0F29 E4            pop a
1864   0F2A             ; END RELATIONAL
1865   0F2A C0 00 00      cmp b, 0
1866   0F2D C6 47 0F      je _if32_else
1867   0F30             _if32_true:
1868   0F30             ;; val = *(int*)arg->p; 
1869   0F30 FA FF FF      lea d, [bp + -1] ; $val
1870   0F33 DA            push d
1871   0F34 FA 07 00      lea d, [bp + 7] ; $arg
1872   0F37 FD 2A         mov d, [d]
1873   0F39 58 00 00      add d, 0
1874   0F3C FD 14         clb
1875   0F3E 2A            mov b, [d]
1876   0F3F 74            mov d, b
1877   0F40 2A            mov b, [d]
1878   0F41 E7            pop d
1879   0F42 FD 43         mov [d], b
1880   0F44 0A 53 0F      jmp _if32_exit
1881   0F47             _if32_else:
1882   0F47             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
1883   0F47 26 16 3C      mov b, __s10 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
1884   0F4A FD AB         swp b
1885   0F4C D8            push b
1886   0F4D 07 B5 15      call print
1887   0F50 51 02 00      add sp, 2
1888   0F53             _if32_exit:
1889   0F53             _if31_exit:
1890   0F53             ;; arg->p = arg->p + size; 
1891   0F53 FA 07 00      lea d, [bp + 7] ; $arg
1892   0F56 FD 2A         mov d, [d]
1893   0F58 58 00 00      add d, 0
1894   0F5B FD 14         clb
1895   0F5D DA            push d
1896   0F5E FA 07 00      lea d, [bp + 7] ; $arg
1897   0F61 FD 2A         mov d, [d]
1898   0F63 58 00 00      add d, 0
1899   0F66 FD 14         clb
1900   0F68 2A            mov b, [d]
1901   0F69             ; START TERMS
1902   0F69 D7            push a
1903   0F6A 11            mov a, b
1904   0F6B FA 05 00      lea d, [bp + 5] ; $size
1905   0F6E 2A            mov b, [d]
1906   0F6F 54            add a, b
1907   0F70 27            mov b, a
1908   0F71 E4            pop a
1909   0F72             ; END TERMS
1910   0F72 E7            pop d
1911   0F73 FD 43         mov [d], b
1912   0F75             ;; return val; 
1913   0F75 FA FF FF      lea d, [bp + -1] ; $val
1914   0F78 2A            mov b, [d]
1915   0F79 F9            leave
1916   0F7A 09            ret
1917   0F7B             
1918   0F7B             printf:
1919   0F7B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1920   0F7E             ; $p 
1921   0F7E             ; $fp 
1922   0F7E             ; $i 
1923   0F7E 52 06 00      sub sp, 6
1924   0F81             ;; fp = format; 
1925   0F81 FA FD FF      lea d, [bp + -3] ; $fp
1926   0F84 DA            push d
1927   0F85 FA 05 00      lea d, [bp + 5] ; $format
1928   0F88 2A            mov b, [d]
1929   0F89 E7            pop d
1930   0F8A FD 43         mov [d], b
1931   0F8C             ;; p = &format; 
1932   0F8C FA FF FF      lea d, [bp + -1] ; $p
1933   0F8F DA            push d
1934   0F90 FA 05 00      lea d, [bp + 5] ; $format
1935   0F93 2D            mov b, d
1936   0F94 E7            pop d
1937   0F95 FD 43         mov [d], b
1938   0F97             ;; for(;;){ 
1939   0F97             _for33_init:
1940   0F97             _for33_cond:
1941   0F97             _for33_block:
1942   0F97             ;; if(!*fp) break; 
1943   0F97             _if34_cond:
1944   0F97 FA FD FF      lea d, [bp + -3] ; $fp
1945   0F9A 2A            mov b, [d]
1946   0F9B 74            mov d, b
1947   0F9C 32            mov bl, [d]
1948   0F9D A7 00         mov bh, 0
1949   0F9F C0 00 00      cmp b, 0
1950   0FA2 FD 71         seq ; !
1951   0FA4 C0 00 00      cmp b, 0
1952   0FA7 C6 B0 0F      je _if34_exit
1953   0FAA             _if34_true:
1954   0FAA             ;; break; 
1955   0FAA 0A FA 10      jmp _for33_exit ; for break
1956   0FAD 0A B0 0F      jmp _if34_exit
1957   0FB0             _if34_exit:
1958   0FB0             ;; if(*fp == '%'){ 
1959   0FB0             _if35_cond:
1960   0FB0 FA FD FF      lea d, [bp + -3] ; $fp
1961   0FB3 2A            mov b, [d]
1962   0FB4 74            mov d, b
1963   0FB5 32            mov bl, [d]
1964   0FB6 A7 00         mov bh, 0
1965   0FB8             ; START RELATIONAL
1966   0FB8 D7            push a
1967   0FB9 11            mov a, b
1968   0FBA 26 25 00      mov b, $25
1969   0FBD B0            cmp a, b
1970   0FBE FD 71         seq ; ==
1971   0FC0 E4            pop a
1972   0FC1             ; END RELATIONAL
1973   0FC1 C0 00 00      cmp b, 0
1974   0FC4 C6 D9 10      je _if35_else
1975   0FC7             _if35_true:
1976   0FC7             ;; fp++; 
1977   0FC7 FA FD FF      lea d, [bp + -3] ; $fp
1978   0FCA 2A            mov b, [d]
1979   0FCB FD 79         mov g, b
1980   0FCD FD 77         inc b
1981   0FCF FA FD FF      lea d, [bp + -3] ; $fp
1982   0FD2 FD 43         mov [d], b
1983   0FD4 FD 27         mov b, g
1984   0FD6             ;; switch(*fp){ 
1985   0FD6             _switch36_expr:
1986   0FD6 FA FD FF      lea d, [bp + -3] ; $fp
1987   0FD9 2A            mov b, [d]
1988   0FDA 74            mov d, b
1989   0FDB 32            mov bl, [d]
1990   0FDC A7 00         mov bh, 0
1991   0FDE             _switch36_comparisons:
1992   0FDE C1 64         cmp bl, $64
1993   0FE0 C6 02 10      je _switch36_case0
1994   0FE3 C1 69         cmp bl, $69
1995   0FE5 C6 02 10      je _switch36_case1
1996   0FE8 C1 75         cmp bl, $75
1997   0FEA C6 27 10      je _switch36_case2
1998   0FED C1 78         cmp bl, $78
1999   0FEF C6 4C 10      je _switch36_case3
2000   0FF2 C1 63         cmp bl, $63
2001   0FF4 C6 71 10      je _switch36_case4
2002   0FF7 C1 73         cmp bl, $73
2003   0FF9 C6 96 10      je _switch36_case5
2004   0FFC 0A BB 10      jmp _switch36_default
2005   0FFF 0A C7 10      jmp _switch36_exit
2006   1002             _switch36_case0:
2007   1002             _switch36_case1:
2008   1002             ;; p = p - 2; 
2009   1002 FA FF FF      lea d, [bp + -1] ; $p
2010   1005 DA            push d
2011   1006 FA FF FF      lea d, [bp + -1] ; $p
2012   1009 2A            mov b, [d]
2013   100A             ; START TERMS
2014   100A D7            push a
2015   100B 11            mov a, b
2016   100C 26 02 00      mov b, $2
2017   100F 60            sub a, b
2018   1010 27            mov b, a
2019   1011 E4            pop a
2020   1012             ; END TERMS
2021   1012 E7            pop d
2022   1013 FD 43         mov [d], b
2023   1015             ;; prints(*(int*)p); 
2024   1015 FA FF FF      lea d, [bp + -1] ; $p
2025   1018 2A            mov b, [d]
2026   1019 74            mov d, b
2027   101A 2A            mov b, [d]
2028   101B FD AB         swp b
2029   101D D8            push b
2030   101E 07 8C 13      call prints
2031   1021 51 02 00      add sp, 2
2032   1024             ;; break; 
2033   1024 0A C7 10      jmp _switch36_exit ; case break
2034   1027             _switch36_case2:
2035   1027             ;; p = p - 2; 
2036   1027 FA FF FF      lea d, [bp + -1] ; $p
2037   102A DA            push d
2038   102B FA FF FF      lea d, [bp + -1] ; $p
2039   102E 2A            mov b, [d]
2040   102F             ; START TERMS
2041   102F D7            push a
2042   1030 11            mov a, b
2043   1031 26 02 00      mov b, $2
2044   1034 60            sub a, b
2045   1035 27            mov b, a
2046   1036 E4            pop a
2047   1037             ; END TERMS
2048   1037 E7            pop d
2049   1038 FD 43         mov [d], b
2050   103A             ;; printu(*(unsigned int*)p); 
2051   103A FA FF FF      lea d, [bp + -1] ; $p
2052   103D 2A            mov b, [d]
2053   103E 74            mov d, b
2054   103F 2A            mov b, [d]
2055   1040 FD AB         swp b
2056   1042 D8            push b
2057   1043 07 81 14      call printu
2058   1046 51 02 00      add sp, 2
2059   1049             ;; break; 
2060   1049 0A C7 10      jmp _switch36_exit ; case break
2061   104C             _switch36_case3:
2062   104C             ;; p = p - 2; 
2063   104C FA FF FF      lea d, [bp + -1] ; $p
2064   104F DA            push d
2065   1050 FA FF FF      lea d, [bp + -1] ; $p
2066   1053 2A            mov b, [d]
2067   1054             ; START TERMS
2068   1054 D7            push a
2069   1055 11            mov a, b
2070   1056 26 02 00      mov b, $2
2071   1059 60            sub a, b
2072   105A 27            mov b, a
2073   105B E4            pop a
2074   105C             ; END TERMS
2075   105C E7            pop d
2076   105D FD 43         mov [d], b
2077   105F             ;; printx16(*(unsigned int*)p); 
2078   105F FA FF FF      lea d, [bp + -1] ; $p
2079   1062 2A            mov b, [d]
2080   1063 74            mov d, b
2081   1064 2A            mov b, [d]
2082   1065 FD AB         swp b
2083   1067 D8            push b
2084   1068 07 FC 10      call printx16
2085   106B 51 02 00      add sp, 2
2086   106E             ;; break; 
2087   106E 0A C7 10      jmp _switch36_exit ; case break
2088   1071             _switch36_case4:
2089   1071             ;; p = p - 2; 
2090   1071 FA FF FF      lea d, [bp + -1] ; $p
2091   1074 DA            push d
2092   1075 FA FF FF      lea d, [bp + -1] ; $p
2093   1078 2A            mov b, [d]
2094   1079             ; START TERMS
2095   1079 D7            push a
2096   107A 11            mov a, b
2097   107B 26 02 00      mov b, $2
2098   107E 60            sub a, b
2099   107F 27            mov b, a
2100   1080 E4            pop a
2101   1081             ; END TERMS
2102   1081 E7            pop d
2103   1082 FD 43         mov [d], b
2104   1084             ;; putchar(*(char*)p); 
2105   1084 FA FF FF      lea d, [bp + -1] ; $p
2106   1087 2A            mov b, [d]
2107   1088 74            mov d, b
2108   1089 32            mov bl, [d]
2109   108A A7 00         mov bh, 0
2110   108C DD            push bl
2111   108D 07 6D 15      call putchar
2112   1090 51 01 00      add sp, 1
2113   1093             ;; break; 
2114   1093 0A C7 10      jmp _switch36_exit ; case break
2115   1096             _switch36_case5:
2116   1096             ;; p = p - 2; 
2117   1096 FA FF FF      lea d, [bp + -1] ; $p
2118   1099 DA            push d
2119   109A FA FF FF      lea d, [bp + -1] ; $p
2120   109D 2A            mov b, [d]
2121   109E             ; START TERMS
2122   109E D7            push a
2123   109F 11            mov a, b
2124   10A0 26 02 00      mov b, $2
2125   10A3 60            sub a, b
2126   10A4 27            mov b, a
2127   10A5 E4            pop a
2128   10A6             ; END TERMS
2129   10A6 E7            pop d
2130   10A7 FD 43         mov [d], b
2131   10A9             ;; print(*(char**)p); 
2132   10A9 FA FF FF      lea d, [bp + -1] ; $p
2133   10AC 2A            mov b, [d]
2134   10AD 74            mov d, b
2135   10AE 2A            mov b, [d]
2136   10AF FD AB         swp b
2137   10B1 D8            push b
2138   10B2 07 B5 15      call print
2139   10B5 51 02 00      add sp, 2
2140   10B8             ;; break; 
2141   10B8 0A C7 10      jmp _switch36_exit ; case break
2142   10BB             _switch36_default:
2143   10BB             ;; print("Error: Unknown argument type.\n"); 
2144   10BB 26 5A 3C      mov b, __s11 ; "Error: Unknown argument type.\n"
2145   10BE FD AB         swp b
2146   10C0 D8            push b
2147   10C1 07 B5 15      call print
2148   10C4 51 02 00      add sp, 2
2149   10C7             _switch36_exit:
2150   10C7             ;; fp++; 
2151   10C7 FA FD FF      lea d, [bp + -3] ; $fp
2152   10CA 2A            mov b, [d]
2153   10CB FD 79         mov g, b
2154   10CD FD 77         inc b
2155   10CF FA FD FF      lea d, [bp + -3] ; $fp
2156   10D2 FD 43         mov [d], b
2157   10D4 FD 27         mov b, g
2158   10D6 0A F7 10      jmp _if35_exit
2159   10D9             _if35_else:
2160   10D9             ;; putchar(*fp); 
2161   10D9 FA FD FF      lea d, [bp + -3] ; $fp
2162   10DC 2A            mov b, [d]
2163   10DD 74            mov d, b
2164   10DE 32            mov bl, [d]
2165   10DF A7 00         mov bh, 0
2166   10E1 DD            push bl
2167   10E2 07 6D 15      call putchar
2168   10E5 51 01 00      add sp, 1
2169   10E8             ;; fp++; 
2170   10E8 FA FD FF      lea d, [bp + -3] ; $fp
2171   10EB 2A            mov b, [d]
2172   10EC FD 79         mov g, b
2173   10EE FD 77         inc b
2174   10F0 FA FD FF      lea d, [bp + -3] ; $fp
2175   10F3 FD 43         mov [d], b
2176   10F5 FD 27         mov b, g
2177   10F7             _if35_exit:
2178   10F7             _for33_update:
2179   10F7 0A 97 0F      jmp _for33_cond
2180   10FA             _for33_exit:
2181   10FA F9            leave
2182   10FB 09            ret
2183   10FC             
2184   10FC             printx16:
2185   10FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2186   10FF             
2187   10FF             ; --- BEGIN INLINE ASM BLOCK
2188   10FF FA 05 00      lea d, [bp + 5] ; $hex
2189   1102 2A            mov b, [d]
2190   1103 07 8C 19      call print_u16x
2191   1106             ; --- END INLINE ASM BLOCK
2192   1106             
2193   1106 F9            leave
2194   1107 09            ret
2195   1108             
2196   1108             printx8:
2197   1108 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2198   110B             
2199   110B             ; --- BEGIN INLINE ASM BLOCK
2200   110B FA 05 00      lea d, [bp + 5] ; $hex
2201   110E 32            mov bl, [d]
2202   110F 07 D0 19      call print_u8x
2203   1112             ; --- END INLINE ASM BLOCK
2204   1112             
2205   1112 F9            leave
2206   1113 09            ret
2207   1114             
2208   1114             hex_to_int:
2209   1114 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2210   1117             ; $value 
2211   1117 10 00 00      mov a, $0
2212   111A 45 FF FF      mov [bp + -1], a
2213   111D             ; $i 
2214   111D             ; $hex_char 
2215   111D             ; $len 
2216   111D 52 07 00      sub sp, 7
2217   1120             ;; len = strlen(hex_string); 
2218   1120 FA FA FF      lea d, [bp + -6] ; $len
2219   1123 DA            push d
2220   1124 FA 05 00      lea d, [bp + 5] ; $hex_string
2221   1127 2A            mov b, [d]
2222   1128 FD AB         swp b
2223   112A D8            push b
2224   112B 07 A0 0E      call strlen
2225   112E 51 02 00      add sp, 2
2226   1131 E7            pop d
2227   1132 FD 43         mov [d], b
2228   1134             ;; for (i = 0; i < len; i++) { 
2229   1134             _for37_init:
2230   1134 FA FD FF      lea d, [bp + -3] ; $i
2231   1137 DA            push d
2232   1138 26 00 00      mov b, $0
2233   113B E7            pop d
2234   113C FD 43         mov [d], b
2235   113E             _for37_cond:
2236   113E FA FD FF      lea d, [bp + -3] ; $i
2237   1141 2A            mov b, [d]
2238   1142             ; START RELATIONAL
2239   1142 D7            push a
2240   1143 11            mov a, b
2241   1144 FA FA FF      lea d, [bp + -6] ; $len
2242   1147 2A            mov b, [d]
2243   1148 B0            cmp a, b
2244   1149 FD 73         slt ; < 
2245   114B E4            pop a
2246   114C             ; END RELATIONAL
2247   114C C0 00 00      cmp b, 0
2248   114F C6 54 12      je _for37_exit
2249   1152             _for37_block:
2250   1152             ;; hex_char = hex_string[i]; 
2251   1152 FA FC FF      lea d, [bp + -4] ; $hex_char
2252   1155 DA            push d
2253   1156 FA 05 00      lea d, [bp + 5] ; $hex_string
2254   1159 FD 2A         mov d, [d]
2255   115B D7            push a
2256   115C DA            push d
2257   115D FA FD FF      lea d, [bp + -3] ; $i
2258   1160 2A            mov b, [d]
2259   1161 E7            pop d
2260   1162 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2261   1166 E4            pop a
2262   1167 32            mov bl, [d]
2263   1168 A7 00         mov bh, 0
2264   116A E7            pop d
2265   116B FD 3E         mov [d], bl
2266   116D             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2267   116D             _if38_cond:
2268   116D FA FC FF      lea d, [bp + -4] ; $hex_char
2269   1170 32            mov bl, [d]
2270   1171 A7 00         mov bh, 0
2271   1173             ; START RELATIONAL
2272   1173 D7            push a
2273   1174 11            mov a, b
2274   1175 26 61 00      mov b, $61
2275   1178 B0            cmp a, b
2276   1179 FD 80         sge ; >=
2277   117B E4            pop a
2278   117C             ; END RELATIONAL
2279   117C D7            push a
2280   117D 11            mov a, b
2281   117E FA FC FF      lea d, [bp + -4] ; $hex_char
2282   1181 32            mov bl, [d]
2283   1182 A7 00         mov bh, 0
2284   1184             ; START RELATIONAL
2285   1184 D7            push a
2286   1185 11            mov a, b
2287   1186 26 66 00      mov b, $66
2288   1189 B0            cmp a, b
2289   118A FD 74         sle ; <=
2290   118C E4            pop a
2291   118D             ; END RELATIONAL
2292   118D FD A7         sand a, b ; &&
2293   118F E4            pop a
2294   1190 C0 00 00      cmp b, 0
2295   1193 C6 C4 11      je _if38_else
2296   1196             _if38_true:
2297   1196             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2298   1196 FA FF FF      lea d, [bp + -1] ; $value
2299   1199 DA            push d
2300   119A FA FF FF      lea d, [bp + -1] ; $value
2301   119D 2A            mov b, [d]
2302   119E             ; START FACTORS
2303   119E D7            push a
2304   119F 11            mov a, b
2305   11A0 26 10 00      mov b, $10
2306   11A3 AC            mul a, b ; *
2307   11A4 11            mov a, b
2308   11A5 27            mov b, a
2309   11A6 E4            pop a
2310   11A7             ; END FACTORS
2311   11A7             ; START TERMS
2312   11A7 D7            push a
2313   11A8 11            mov a, b
2314   11A9 FA FC FF      lea d, [bp + -4] ; $hex_char
2315   11AC 32            mov bl, [d]
2316   11AD A7 00         mov bh, 0
2317   11AF             ; START TERMS
2318   11AF D7            push a
2319   11B0 11            mov a, b
2320   11B1 26 61 00      mov b, $61
2321   11B4 60            sub a, b
2322   11B5 26 0A 00      mov b, $a
2323   11B8 54            add a, b
2324   11B9 27            mov b, a
2325   11BA E4            pop a
2326   11BB             ; END TERMS
2327   11BB 54            add a, b
2328   11BC 27            mov b, a
2329   11BD E4            pop a
2330   11BE             ; END TERMS
2331   11BE E7            pop d
2332   11BF FD 43         mov [d], b
2333   11C1 0A 42 12      jmp _if38_exit
2334   11C4             _if38_else:
2335   11C4             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2336   11C4             _if39_cond:
2337   11C4 FA FC FF      lea d, [bp + -4] ; $hex_char
2338   11C7 32            mov bl, [d]
2339   11C8 A7 00         mov bh, 0
2340   11CA             ; START RELATIONAL
2341   11CA D7            push a
2342   11CB 11            mov a, b
2343   11CC 26 41 00      mov b, $41
2344   11CF B0            cmp a, b
2345   11D0 FD 80         sge ; >=
2346   11D2 E4            pop a
2347   11D3             ; END RELATIONAL
2348   11D3 D7            push a
2349   11D4 11            mov a, b
2350   11D5 FA FC FF      lea d, [bp + -4] ; $hex_char
2351   11D8 32            mov bl, [d]
2352   11D9 A7 00         mov bh, 0
2353   11DB             ; START RELATIONAL
2354   11DB D7            push a
2355   11DC 11            mov a, b
2356   11DD 26 46 00      mov b, $46
2357   11E0 B0            cmp a, b
2358   11E1 FD 74         sle ; <=
2359   11E3 E4            pop a
2360   11E4             ; END RELATIONAL
2361   11E4 FD A7         sand a, b ; &&
2362   11E6 E4            pop a
2363   11E7 C0 00 00      cmp b, 0
2364   11EA C6 1B 12      je _if39_else
2365   11ED             _if39_true:
2366   11ED             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2367   11ED FA FF FF      lea d, [bp + -1] ; $value
2368   11F0 DA            push d
2369   11F1 FA FF FF      lea d, [bp + -1] ; $value
2370   11F4 2A            mov b, [d]
2371   11F5             ; START FACTORS
2372   11F5 D7            push a
2373   11F6 11            mov a, b
2374   11F7 26 10 00      mov b, $10
2375   11FA AC            mul a, b ; *
2376   11FB 11            mov a, b
2377   11FC 27            mov b, a
2378   11FD E4            pop a
2379   11FE             ; END FACTORS
2380   11FE             ; START TERMS
2381   11FE D7            push a
2382   11FF 11            mov a, b
2383   1200 FA FC FF      lea d, [bp + -4] ; $hex_char
2384   1203 32            mov bl, [d]
2385   1204 A7 00         mov bh, 0
2386   1206             ; START TERMS
2387   1206 D7            push a
2388   1207 11            mov a, b
2389   1208 26 41 00      mov b, $41
2390   120B 60            sub a, b
2391   120C 26 0A 00      mov b, $a
2392   120F 54            add a, b
2393   1210 27            mov b, a
2394   1211 E4            pop a
2395   1212             ; END TERMS
2396   1212 54            add a, b
2397   1213 27            mov b, a
2398   1214 E4            pop a
2399   1215             ; END TERMS
2400   1215 E7            pop d
2401   1216 FD 43         mov [d], b
2402   1218 0A 42 12      jmp _if39_exit
2403   121B             _if39_else:
2404   121B             ;; value = (value * 16) + (hex_char - '0'); 
2405   121B FA FF FF      lea d, [bp + -1] ; $value
2406   121E DA            push d
2407   121F FA FF FF      lea d, [bp + -1] ; $value
2408   1222 2A            mov b, [d]
2409   1223             ; START FACTORS
2410   1223 D7            push a
2411   1224 11            mov a, b
2412   1225 26 10 00      mov b, $10
2413   1228 AC            mul a, b ; *
2414   1229 11            mov a, b
2415   122A 27            mov b, a
2416   122B E4            pop a
2417   122C             ; END FACTORS
2418   122C             ; START TERMS
2419   122C D7            push a
2420   122D 11            mov a, b
2421   122E FA FC FF      lea d, [bp + -4] ; $hex_char
2422   1231 32            mov bl, [d]
2423   1232 A7 00         mov bh, 0
2424   1234             ; START TERMS
2425   1234 D7            push a
2426   1235 11            mov a, b
2427   1236 26 30 00      mov b, $30
2428   1239 60            sub a, b
2429   123A 27            mov b, a
2430   123B E4            pop a
2431   123C             ; END TERMS
2432   123C 54            add a, b
2433   123D 27            mov b, a
2434   123E E4            pop a
2435   123F             ; END TERMS
2436   123F E7            pop d
2437   1240 FD 43         mov [d], b
2438   1242             _if39_exit:
2439   1242             _if38_exit:
2440   1242             _for37_update:
2441   1242 FA FD FF      lea d, [bp + -3] ; $i
2442   1245 2A            mov b, [d]
2443   1246 FD 79         mov g, b
2444   1248 FD 77         inc b
2445   124A FA FD FF      lea d, [bp + -3] ; $i
2446   124D FD 43         mov [d], b
2447   124F FD 27         mov b, g
2448   1251 0A 3E 11      jmp _for37_cond
2449   1254             _for37_exit:
2450   1254             ;; return value; 
2451   1254 FA FF FF      lea d, [bp + -1] ; $value
2452   1257 2A            mov b, [d]
2453   1258 F9            leave
2454   1259 09            ret
2455   125A             
2456   125A             atoi:
2457   125A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2458   125D             ; $result 
2459   125D 10 00 00      mov a, $0
2460   1260 45 FF FF      mov [bp + -1], a
2461   1263             ; $sign 
2462   1263 10 01 00      mov a, $1
2463   1266 45 FD FF      mov [bp + -3], a
2464   1269 52 04 00      sub sp, 4
2465   126C             ;; while (*str == ' ') str++; 
2466   126C             _while40_cond:
2467   126C FA 05 00      lea d, [bp + 5] ; $str
2468   126F 2A            mov b, [d]
2469   1270 74            mov d, b
2470   1271 32            mov bl, [d]
2471   1272 A7 00         mov bh, 0
2472   1274             ; START RELATIONAL
2473   1274 D7            push a
2474   1275 11            mov a, b
2475   1276 26 20 00      mov b, $20
2476   1279 B0            cmp a, b
2477   127A FD 71         seq ; ==
2478   127C E4            pop a
2479   127D             ; END RELATIONAL
2480   127D C0 00 00      cmp b, 0
2481   1280 C6 95 12      je _while40_exit
2482   1283             _while40_block:
2483   1283             ;; str++; 
2484   1283 FA 05 00      lea d, [bp + 5] ; $str
2485   1286 2A            mov b, [d]
2486   1287 FD 79         mov g, b
2487   1289 FD 77         inc b
2488   128B FA 05 00      lea d, [bp + 5] ; $str
2489   128E FD 43         mov [d], b
2490   1290 FD 27         mov b, g
2491   1292 0A 6C 12      jmp _while40_cond
2492   1295             _while40_exit:
2493   1295             ;; if (*str == '-' || *str == '+') { 
2494   1295             _if41_cond:
2495   1295 FA 05 00      lea d, [bp + 5] ; $str
2496   1298 2A            mov b, [d]
2497   1299 74            mov d, b
2498   129A 32            mov bl, [d]
2499   129B A7 00         mov bh, 0
2500   129D             ; START RELATIONAL
2501   129D D7            push a
2502   129E 11            mov a, b
2503   129F 26 2D 00      mov b, $2d
2504   12A2 B0            cmp a, b
2505   12A3 FD 71         seq ; ==
2506   12A5 E4            pop a
2507   12A6             ; END RELATIONAL
2508   12A6 D7            push a
2509   12A7 11            mov a, b
2510   12A8 FA 05 00      lea d, [bp + 5] ; $str
2511   12AB 2A            mov b, [d]
2512   12AC 74            mov d, b
2513   12AD 32            mov bl, [d]
2514   12AE A7 00         mov bh, 0
2515   12B0             ; START RELATIONAL
2516   12B0 D7            push a
2517   12B1 11            mov a, b
2518   12B2 26 2B 00      mov b, $2b
2519   12B5 B0            cmp a, b
2520   12B6 FD 71         seq ; ==
2521   12B8 E4            pop a
2522   12B9             ; END RELATIONAL
2523   12B9 FD A8         sor a, b ; ||
2524   12BB E4            pop a
2525   12BC C0 00 00      cmp b, 0
2526   12BF C6 FA 12      je _if41_exit
2527   12C2             _if41_true:
2528   12C2             ;; if (*str == '-') sign = -1; 
2529   12C2             _if42_cond:
2530   12C2 FA 05 00      lea d, [bp + 5] ; $str
2531   12C5 2A            mov b, [d]
2532   12C6 74            mov d, b
2533   12C7 32            mov bl, [d]
2534   12C8 A7 00         mov bh, 0
2535   12CA             ; START RELATIONAL
2536   12CA D7            push a
2537   12CB 11            mov a, b
2538   12CC 26 2D 00      mov b, $2d
2539   12CF B0            cmp a, b
2540   12D0 FD 71         seq ; ==
2541   12D2 E4            pop a
2542   12D3             ; END RELATIONAL
2543   12D3 C0 00 00      cmp b, 0
2544   12D6 C6 E8 12      je _if42_exit
2545   12D9             _if42_true:
2546   12D9             ;; sign = -1; 
2547   12D9 FA FD FF      lea d, [bp + -3] ; $sign
2548   12DC DA            push d
2549   12DD 26 01 00      mov b, $1
2550   12E0 FD 97         neg b
2551   12E2 E7            pop d
2552   12E3 FD 43         mov [d], b
2553   12E5 0A E8 12      jmp _if42_exit
2554   12E8             _if42_exit:
2555   12E8             ;; str++; 
2556   12E8 FA 05 00      lea d, [bp + 5] ; $str
2557   12EB 2A            mov b, [d]
2558   12EC FD 79         mov g, b
2559   12EE FD 77         inc b
2560   12F0 FA 05 00      lea d, [bp + 5] ; $str
2561   12F3 FD 43         mov [d], b
2562   12F5 FD 27         mov b, g
2563   12F7 0A FA 12      jmp _if41_exit
2564   12FA             _if41_exit:
2565   12FA             ;; while (*str >= '0' && *str <= '9') { 
2566   12FA             _while43_cond:
2567   12FA FA 05 00      lea d, [bp + 5] ; $str
2568   12FD 2A            mov b, [d]
2569   12FE 74            mov d, b
2570   12FF 32            mov bl, [d]
2571   1300 A7 00         mov bh, 0
2572   1302             ; START RELATIONAL
2573   1302 D7            push a
2574   1303 11            mov a, b
2575   1304 26 30 00      mov b, $30
2576   1307 B0            cmp a, b
2577   1308 FD 80         sge ; >=
2578   130A E4            pop a
2579   130B             ; END RELATIONAL
2580   130B D7            push a
2581   130C 11            mov a, b
2582   130D FA 05 00      lea d, [bp + 5] ; $str
2583   1310 2A            mov b, [d]
2584   1311 74            mov d, b
2585   1312 32            mov bl, [d]
2586   1313 A7 00         mov bh, 0
2587   1315             ; START RELATIONAL
2588   1315 D7            push a
2589   1316 11            mov a, b
2590   1317 26 39 00      mov b, $39
2591   131A B0            cmp a, b
2592   131B FD 74         sle ; <=
2593   131D E4            pop a
2594   131E             ; END RELATIONAL
2595   131E FD A7         sand a, b ; &&
2596   1320 E4            pop a
2597   1321 C0 00 00      cmp b, 0
2598   1324 C6 62 13      je _while43_exit
2599   1327             _while43_block:
2600   1327             ;; result = result * 10 + (*str - '0'); 
2601   1327 FA FF FF      lea d, [bp + -1] ; $result
2602   132A DA            push d
2603   132B FA FF FF      lea d, [bp + -1] ; $result
2604   132E 2A            mov b, [d]
2605   132F             ; START FACTORS
2606   132F D7            push a
2607   1330 11            mov a, b
2608   1331 26 0A 00      mov b, $a
2609   1334 AC            mul a, b ; *
2610   1335 11            mov a, b
2611   1336 27            mov b, a
2612   1337 E4            pop a
2613   1338             ; END FACTORS
2614   1338             ; START TERMS
2615   1338 D7            push a
2616   1339 11            mov a, b
2617   133A FA 05 00      lea d, [bp + 5] ; $str
2618   133D 2A            mov b, [d]
2619   133E 74            mov d, b
2620   133F 32            mov bl, [d]
2621   1340 A7 00         mov bh, 0
2622   1342             ; START TERMS
2623   1342 D7            push a
2624   1343 11            mov a, b
2625   1344 26 30 00      mov b, $30
2626   1347 60            sub a, b
2627   1348 27            mov b, a
2628   1349 E4            pop a
2629   134A             ; END TERMS
2630   134A 54            add a, b
2631   134B 27            mov b, a
2632   134C E4            pop a
2633   134D             ; END TERMS
2634   134D E7            pop d
2635   134E FD 43         mov [d], b
2636   1350             ;; str++; 
2637   1350 FA 05 00      lea d, [bp + 5] ; $str
2638   1353 2A            mov b, [d]
2639   1354 FD 79         mov g, b
2640   1356 FD 77         inc b
2641   1358 FA 05 00      lea d, [bp + 5] ; $str
2642   135B FD 43         mov [d], b
2643   135D FD 27         mov b, g
2644   135F 0A FA 12      jmp _while43_cond
2645   1362             _while43_exit:
2646   1362             ;; return sign * result; 
2647   1362 FA FD FF      lea d, [bp + -3] ; $sign
2648   1365 2A            mov b, [d]
2649   1366             ; START FACTORS
2650   1366 D7            push a
2651   1367 11            mov a, b
2652   1368 FA FF FF      lea d, [bp + -1] ; $result
2653   136B 2A            mov b, [d]
2654   136C AC            mul a, b ; *
2655   136D 11            mov a, b
2656   136E 27            mov b, a
2657   136F E4            pop a
2658   1370             ; END FACTORS
2659   1370 F9            leave
2660   1371 09            ret
2661   1372             
2662   1372             gets:
2663   1372 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2664   1375             
2665   1375             ; --- BEGIN INLINE ASM BLOCK
2666   1375 FA 05 00      lea d, [bp + 5] ; $s
2667   1378 15            mov a, [d]
2668   1379 3C            mov d, a
2669   137A 07 F1 17      call _gets
2670   137D             ; --- END INLINE ASM BLOCK
2671   137D             
2672   137D             ;; return strlen(s); 
2673   137D FA 05 00      lea d, [bp + 5] ; $s
2674   1380 2A            mov b, [d]
2675   1381 FD AB         swp b
2676   1383 D8            push b
2677   1384 07 A0 0E      call strlen
2678   1387 51 02 00      add sp, 2
2679   138A F9            leave
2680   138B 09            ret
2681   138C             
2682   138C             prints:
2683   138C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2684   138F             ; $digits 
2685   138F             ; $i 
2686   138F 10 00 00      mov a, $0
2687   1392 45 FA FF      mov [bp + -6], a
2688   1395 52 07 00      sub sp, 7
2689   1398             ;; if (num < 0) { 
2690   1398             _if44_cond:
2691   1398 FA 05 00      lea d, [bp + 5] ; $num
2692   139B 2A            mov b, [d]
2693   139C             ; START RELATIONAL
2694   139C D7            push a
2695   139D 11            mov a, b
2696   139E 26 00 00      mov b, $0
2697   13A1 B0            cmp a, b
2698   13A2 FD 73         slt ; < 
2699   13A4 E4            pop a
2700   13A5             ; END RELATIONAL
2701   13A5 C0 00 00      cmp b, 0
2702   13A8 C6 C5 13      je _if44_else
2703   13AB             _if44_true:
2704   13AB             ;; putchar('-'); 
2705   13AB 26 2D 00      mov b, $2d
2706   13AE DD            push bl
2707   13AF 07 6D 15      call putchar
2708   13B2 51 01 00      add sp, 1
2709   13B5             ;; num = -num; 
2710   13B5 FA 05 00      lea d, [bp + 5] ; $num
2711   13B8 DA            push d
2712   13B9 FA 05 00      lea d, [bp + 5] ; $num
2713   13BC 2A            mov b, [d]
2714   13BD FD 97         neg b
2715   13BF E7            pop d
2716   13C0 FD 43         mov [d], b
2717   13C2 0A E7 13      jmp _if44_exit
2718   13C5             _if44_else:
2719   13C5             ;; if (num == 0) { 
2720   13C5             _if45_cond:
2721   13C5 FA 05 00      lea d, [bp + 5] ; $num
2722   13C8 2A            mov b, [d]
2723   13C9             ; START RELATIONAL
2724   13C9 D7            push a
2725   13CA 11            mov a, b
2726   13CB 26 00 00      mov b, $0
2727   13CE B0            cmp a, b
2728   13CF FD 71         seq ; ==
2729   13D1 E4            pop a
2730   13D2             ; END RELATIONAL
2731   13D2 C0 00 00      cmp b, 0
2732   13D5 C6 E7 13      je _if45_exit
2733   13D8             _if45_true:
2734   13D8             ;; putchar('0'); 
2735   13D8 26 30 00      mov b, $30
2736   13DB DD            push bl
2737   13DC 07 6D 15      call putchar
2738   13DF 51 01 00      add sp, 1
2739   13E2             ;; return; 
2740   13E2 F9            leave
2741   13E3 09            ret
2742   13E4 0A E7 13      jmp _if45_exit
2743   13E7             _if45_exit:
2744   13E7             _if44_exit:
2745   13E7             ;; while (num > 0) { 
2746   13E7             _while46_cond:
2747   13E7 FA 05 00      lea d, [bp + 5] ; $num
2748   13EA 2A            mov b, [d]
2749   13EB             ; START RELATIONAL
2750   13EB D7            push a
2751   13EC 11            mov a, b
2752   13ED 26 00 00      mov b, $0
2753   13F0 B0            cmp a, b
2754   13F1 FD 7F         sgt ; >
2755   13F3 E4            pop a
2756   13F4             ; END RELATIONAL
2757   13F4 C0 00 00      cmp b, 0
2758   13F7 C6 44 14      je _while46_exit
2759   13FA             _while46_block:
2760   13FA             ;; digits[i] = '0' + (num % 10); 
2761   13FA FA FC FF      lea d, [bp + -4] ; $digits
2762   13FD D7            push a
2763   13FE DA            push d
2764   13FF FA FA FF      lea d, [bp + -6] ; $i
2765   1402 2A            mov b, [d]
2766   1403 E7            pop d
2767   1404 5A            add d, b
2768   1405 E4            pop a
2769   1406 DA            push d
2770   1407 26 30 00      mov b, $30
2771   140A             ; START TERMS
2772   140A D7            push a
2773   140B 11            mov a, b
2774   140C FA 05 00      lea d, [bp + 5] ; $num
2775   140F 2A            mov b, [d]
2776   1410             ; START FACTORS
2777   1410 D7            push a
2778   1411 11            mov a, b
2779   1412 26 0A 00      mov b, $a
2780   1415 AE            div a, b ; 
2781   1416 11            mov a, b
2782   1417 27            mov b, a
2783   1418 E4            pop a
2784   1419             ; END FACTORS
2785   1419 54            add a, b
2786   141A 27            mov b, a
2787   141B E4            pop a
2788   141C             ; END TERMS
2789   141C E7            pop d
2790   141D FD 3E         mov [d], bl
2791   141F             ;; num = num / 10; 
2792   141F FA 05 00      lea d, [bp + 5] ; $num
2793   1422 DA            push d
2794   1423 FA 05 00      lea d, [bp + 5] ; $num
2795   1426 2A            mov b, [d]
2796   1427             ; START FACTORS
2797   1427 D7            push a
2798   1428 11            mov a, b
2799   1429 26 0A 00      mov b, $a
2800   142C AE            div a, b
2801   142D 27            mov b, a
2802   142E E4            pop a
2803   142F             ; END FACTORS
2804   142F E7            pop d
2805   1430 FD 43         mov [d], b
2806   1432             ;; i++; 
2807   1432 FA FA FF      lea d, [bp + -6] ; $i
2808   1435 2A            mov b, [d]
2809   1436 FD 79         mov g, b
2810   1438 FD 77         inc b
2811   143A FA FA FF      lea d, [bp + -6] ; $i
2812   143D FD 43         mov [d], b
2813   143F FD 27         mov b, g
2814   1441 0A E7 13      jmp _while46_cond
2815   1444             _while46_exit:
2816   1444             ;; while (i > 0) { 
2817   1444             _while47_cond:
2818   1444 FA FA FF      lea d, [bp + -6] ; $i
2819   1447 2A            mov b, [d]
2820   1448             ; START RELATIONAL
2821   1448 D7            push a
2822   1449 11            mov a, b
2823   144A 26 00 00      mov b, $0
2824   144D B0            cmp a, b
2825   144E FD 7F         sgt ; >
2826   1450 E4            pop a
2827   1451             ; END RELATIONAL
2828   1451 C0 00 00      cmp b, 0
2829   1454 C6 7F 14      je _while47_exit
2830   1457             _while47_block:
2831   1457             ;; i--; 
2832   1457 FA FA FF      lea d, [bp + -6] ; $i
2833   145A 2A            mov b, [d]
2834   145B FD 79         mov g, b
2835   145D FD 7D         dec b
2836   145F FA FA FF      lea d, [bp + -6] ; $i
2837   1462 FD 43         mov [d], b
2838   1464 FD 27         mov b, g
2839   1466             ;; putchar(digits[i]); 
2840   1466 FA FC FF      lea d, [bp + -4] ; $digits
2841   1469 D7            push a
2842   146A DA            push d
2843   146B FA FA FF      lea d, [bp + -6] ; $i
2844   146E 2A            mov b, [d]
2845   146F E7            pop d
2846   1470 5A            add d, b
2847   1471 E4            pop a
2848   1472 32            mov bl, [d]
2849   1473 A7 00         mov bh, 0
2850   1475 DD            push bl
2851   1476 07 6D 15      call putchar
2852   1479 51 01 00      add sp, 1
2853   147C 0A 44 14      jmp _while47_cond
2854   147F             _while47_exit:
2855   147F F9            leave
2856   1480 09            ret
2857   1481             
2858   1481             printu:
2859   1481 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2860   1484             ; $digits 
2861   1484             ; $i 
2862   1484 52 07 00      sub sp, 7
2863   1487             ;; i = 0; 
2864   1487 FA FA FF      lea d, [bp + -6] ; $i
2865   148A DA            push d
2866   148B 26 00 00      mov b, $0
2867   148E E7            pop d
2868   148F FD 43         mov [d], b
2869   1491             ;; if(num == 0){ 
2870   1491             _if48_cond:
2871   1491 FA 05 00      lea d, [bp + 5] ; $num
2872   1494 2A            mov b, [d]
2873   1495             ; START RELATIONAL
2874   1495 D7            push a
2875   1496 11            mov a, b
2876   1497 26 00 00      mov b, $0
2877   149A B0            cmp a, b
2878   149B FD 71         seq ; ==
2879   149D E4            pop a
2880   149E             ; END RELATIONAL
2881   149E C0 00 00      cmp b, 0
2882   14A1 C6 B3 14      je _if48_exit
2883   14A4             _if48_true:
2884   14A4             ;; putchar('0'); 
2885   14A4 26 30 00      mov b, $30
2886   14A7 DD            push bl
2887   14A8 07 6D 15      call putchar
2888   14AB 51 01 00      add sp, 1
2889   14AE             ;; return; 
2890   14AE F9            leave
2891   14AF 09            ret
2892   14B0 0A B3 14      jmp _if48_exit
2893   14B3             _if48_exit:
2894   14B3             ;; while (num > 0) { 
2895   14B3             _while49_cond:
2896   14B3 FA 05 00      lea d, [bp + 5] ; $num
2897   14B6 2A            mov b, [d]
2898   14B7             ; START RELATIONAL
2899   14B7 D7            push a
2900   14B8 11            mov a, b
2901   14B9 26 00 00      mov b, $0
2902   14BC B0            cmp a, b
2903   14BD FD 81         sgu ; > (unsigned)
2904   14BF E4            pop a
2905   14C0             ; END RELATIONAL
2906   14C0 C0 00 00      cmp b, 0
2907   14C3 C6 10 15      je _while49_exit
2908   14C6             _while49_block:
2909   14C6             ;; digits[i] = '0' + (num % 10); 
2910   14C6 FA FC FF      lea d, [bp + -4] ; $digits
2911   14C9 D7            push a
2912   14CA DA            push d
2913   14CB FA FA FF      lea d, [bp + -6] ; $i
2914   14CE 2A            mov b, [d]
2915   14CF E7            pop d
2916   14D0 5A            add d, b
2917   14D1 E4            pop a
2918   14D2 DA            push d
2919   14D3 26 30 00      mov b, $30
2920   14D6             ; START TERMS
2921   14D6 D7            push a
2922   14D7 11            mov a, b
2923   14D8 FA 05 00      lea d, [bp + 5] ; $num
2924   14DB 2A            mov b, [d]
2925   14DC             ; START FACTORS
2926   14DC D7            push a
2927   14DD 11            mov a, b
2928   14DE 26 0A 00      mov b, $a
2929   14E1 AE            div a, b ; 
2930   14E2 11            mov a, b
2931   14E3 27            mov b, a
2932   14E4 E4            pop a
2933   14E5             ; END FACTORS
2934   14E5 54            add a, b
2935   14E6 27            mov b, a
2936   14E7 E4            pop a
2937   14E8             ; END TERMS
2938   14E8 E7            pop d
2939   14E9 FD 3E         mov [d], bl
2940   14EB             ;; num = num / 10; 
2941   14EB FA 05 00      lea d, [bp + 5] ; $num
2942   14EE DA            push d
2943   14EF FA 05 00      lea d, [bp + 5] ; $num
2944   14F2 2A            mov b, [d]
2945   14F3             ; START FACTORS
2946   14F3 D7            push a
2947   14F4 11            mov a, b
2948   14F5 26 0A 00      mov b, $a
2949   14F8 AE            div a, b
2950   14F9 27            mov b, a
2951   14FA E4            pop a
2952   14FB             ; END FACTORS
2953   14FB E7            pop d
2954   14FC FD 43         mov [d], b
2955   14FE             ;; i++; 
2956   14FE FA FA FF      lea d, [bp + -6] ; $i
2957   1501 2A            mov b, [d]
2958   1502 FD 79         mov g, b
2959   1504 FD 77         inc b
2960   1506 FA FA FF      lea d, [bp + -6] ; $i
2961   1509 FD 43         mov [d], b
2962   150B FD 27         mov b, g
2963   150D 0A B3 14      jmp _while49_cond
2964   1510             _while49_exit:
2965   1510             ;; while (i > 0) { 
2966   1510             _while50_cond:
2967   1510 FA FA FF      lea d, [bp + -6] ; $i
2968   1513 2A            mov b, [d]
2969   1514             ; START RELATIONAL
2970   1514 D7            push a
2971   1515 11            mov a, b
2972   1516 26 00 00      mov b, $0
2973   1519 B0            cmp a, b
2974   151A FD 7F         sgt ; >
2975   151C E4            pop a
2976   151D             ; END RELATIONAL
2977   151D C0 00 00      cmp b, 0
2978   1520 C6 4B 15      je _while50_exit
2979   1523             _while50_block:
2980   1523             ;; i--; 
2981   1523 FA FA FF      lea d, [bp + -6] ; $i
2982   1526 2A            mov b, [d]
2983   1527 FD 79         mov g, b
2984   1529 FD 7D         dec b
2985   152B FA FA FF      lea d, [bp + -6] ; $i
2986   152E FD 43         mov [d], b
2987   1530 FD 27         mov b, g
2988   1532             ;; putchar(digits[i]); 
2989   1532 FA FC FF      lea d, [bp + -4] ; $digits
2990   1535 D7            push a
2991   1536 DA            push d
2992   1537 FA FA FF      lea d, [bp + -6] ; $i
2993   153A 2A            mov b, [d]
2994   153B E7            pop d
2995   153C 5A            add d, b
2996   153D E4            pop a
2997   153E 32            mov bl, [d]
2998   153F A7 00         mov bh, 0
2999   1541 DD            push bl
3000   1542 07 6D 15      call putchar
3001   1545 51 01 00      add sp, 1
3002   1548 0A 10 15      jmp _while50_cond
3003   154B             _while50_exit:
3004   154B F9            leave
3005   154C 09            ret
3006   154D             
3007   154D             rand:
3008   154D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3009   1550             ; $sec 
3010   1550 52 01 00      sub sp, 1
3011   1553             
3012   1553             ; --- BEGIN INLINE ASM BLOCK
3013   1553 19 00         mov al, 0
3014   1555 05 01         syscall sys_rtc					
3015   1557 1A            mov al, ah
3016   1558 FA 00 00      lea d, [bp + 0] ; $sec
3017   155B 1E            mov al, [d]
3018   155C             ; --- END INLINE ASM BLOCK
3019   155C             
3020   155C             ;; return sec; 
3021   155C FA 00 00      lea d, [bp + 0] ; $sec
3022   155F 32            mov bl, [d]
3023   1560 A7 00         mov bh, 0
3024   1562 F9            leave
3025   1563 09            ret
3026   1564             
3027   1564             date:
3028   1564 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3029   1567             
3030   1567             ; --- BEGIN INLINE ASM BLOCK
3031   1567 19 00         mov al, 0 
3032   1569 05 07         syscall sys_datetime
3033   156B             ; --- END INLINE ASM BLOCK
3034   156B             
3035   156B F9            leave
3036   156C 09            ret
3037   156D             
3038   156D             putchar:
3039   156D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3040   1570             
3041   1570             ; --- BEGIN INLINE ASM BLOCK
3042   1570 FA 05 00      lea d, [bp + 5] ; $c
3043   1573 1E            mov al, [d]
3044   1574 23            mov ah, al
3045   1575 07 EA 17      call _putchar
3046   1578             ; --- END INLINE ASM BLOCK
3047   1578             
3048   1578 F9            leave
3049   1579 09            ret
3050   157A             
3051   157A             getchar:
3052   157A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3053   157D             ; $c 
3054   157D 52 01 00      sub sp, 1
3055   1580             
3056   1580             ; --- BEGIN INLINE ASM BLOCK
3057   1580 07 E3 17      call getch
3058   1583 1A            mov al, ah
3059   1584 FA 00 00      lea d, [bp + 0] ; $c
3060   1587 3E            mov [d], al
3061   1588             ; --- END INLINE ASM BLOCK
3062   1588             
3063   1588             ;; return c; 
3064   1588 FA 00 00      lea d, [bp + 0] ; $c
3065   158B 32            mov bl, [d]
3066   158C A7 00         mov bh, 0
3067   158E F9            leave
3068   158F 09            ret
3069   1590             
3070   1590             scann:
3071   1590 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3072   1593             ; $m 
3073   1593 52 02 00      sub sp, 2
3074   1596             
3075   1596             ; --- BEGIN INLINE ASM BLOCK
3076   1596 07 2E 1A      call scan_u16d
3077   1599 FA FF FF      lea d, [bp + -1] ; $m
3078   159C 43            mov [d], a
3079   159D             ; --- END INLINE ASM BLOCK
3080   159D             
3081   159D             ;; return m; 
3082   159D FA FF FF      lea d, [bp + -1] ; $m
3083   15A0 2A            mov b, [d]
3084   15A1 F9            leave
3085   15A2 09            ret
3086   15A3             
3087   15A3             puts:
3088   15A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3089   15A6             
3090   15A6             ; --- BEGIN INLINE ASM BLOCK
3091   15A6 FA 05 00      lea d, [bp + 5] ; $s
3092   15A9 15            mov a, [d]
3093   15AA 3C            mov d, a
3094   15AB 07 34 19      call _puts
3095   15AE 10 00 0A      mov a, $0A00
3096   15B1 05 03         syscall sys_io
3097   15B3             ; --- END INLINE ASM BLOCK
3098   15B3             
3099   15B3 F9            leave
3100   15B4 09            ret
3101   15B5             
3102   15B5             print:
3103   15B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3104   15B8             
3105   15B8             ; --- BEGIN INLINE ASM BLOCK
3106   15B8 FA 05 00      lea d, [bp + 5] ; $s
3107   15BB FD 2A         mov d, [d]
3108   15BD 07 34 19      call _puts
3109   15C0             ; --- END INLINE ASM BLOCK
3110   15C0             
3111   15C0 F9            leave
3112   15C1 09            ret
3113   15C2             
3114   15C2             loadfile:
3115   15C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3116   15C5             
3117   15C5             ; --- BEGIN INLINE ASM BLOCK
3118   15C5 FA 05 00      lea d, [bp + 5] ; $destination
3119   15C8 15            mov a, [d]
3120   15C9 4F            mov di, a
3121   15CA FA 07 00      lea d, [bp + 7] ; $filename
3122   15CD FD 2A         mov d, [d]
3123   15CF 19 14         mov al, 20
3124   15D1 05 04         syscall sys_filesystem
3125   15D3             ; --- END INLINE ASM BLOCK
3126   15D3             
3127   15D3 F9            leave
3128   15D4 09            ret
3129   15D5             
3130   15D5             create_file:
3131   15D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3132   15D8 F9            leave
3133   15D9 09            ret
3134   15DA             
3135   15DA             delete_file:
3136   15DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3137   15DD             
3138   15DD             ; --- BEGIN INLINE ASM BLOCK
3139   15DD FA 05 00      lea d, [bp + 5] ; $filename
3140   15E0 19 0A         mov al, 10
3141   15E2 05 04         syscall sys_filesystem
3142   15E4             ; --- END INLINE ASM BLOCK
3143   15E4             
3144   15E4 F9            leave
3145   15E5 09            ret
3146   15E6             
3147   15E6             fopen:
3148   15E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3149   15E9 F9            leave
3150   15EA 09            ret
3151   15EB             
3152   15EB             fclose:
3153   15EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3154   15EE F9            leave
3155   15EF 09            ret
3156   15F0             
3157   15F0             alloc:
3158   15F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3159   15F3             ;; heap_top = heap_top + bytes; 
3160   15F3 3B DA 3C      mov d, _heap_top ; $heap_top
3161   15F6 DA            push d
3162   15F7 3B DA 3C      mov d, _heap_top ; $heap_top
3163   15FA 2A            mov b, [d]
3164   15FB             ; START TERMS
3165   15FB D7            push a
3166   15FC 11            mov a, b
3167   15FD FA 05 00      lea d, [bp + 5] ; $bytes
3168   1600 2A            mov b, [d]
3169   1601 54            add a, b
3170   1602 27            mov b, a
3171   1603 E4            pop a
3172   1604             ; END TERMS
3173   1604 E7            pop d
3174   1605 FD 43         mov [d], b
3175   1607             ;; return heap_top - bytes; 
3176   1607 3B DA 3C      mov d, _heap_top ; $heap_top
3177   160A 2A            mov b, [d]
3178   160B             ; START TERMS
3179   160B D7            push a
3180   160C 11            mov a, b
3181   160D FA 05 00      lea d, [bp + 5] ; $bytes
3182   1610 2A            mov b, [d]
3183   1611 60            sub a, b
3184   1612 27            mov b, a
3185   1613 E4            pop a
3186   1614             ; END TERMS
3187   1614 F9            leave
3188   1615 09            ret
3189   1616             
3190   1616             free:
3191   1616 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3192   1619             ;; return heap_top = heap_top - bytes; 
3193   1619 3B DA 3C      mov d, _heap_top ; $heap_top
3194   161C DA            push d
3195   161D 3B DA 3C      mov d, _heap_top ; $heap_top
3196   1620 2A            mov b, [d]
3197   1621             ; START TERMS
3198   1621 D7            push a
3199   1622 11            mov a, b
3200   1623 FA 05 00      lea d, [bp + 5] ; $bytes
3201   1626 2A            mov b, [d]
3202   1627 60            sub a, b
3203   1628 27            mov b, a
3204   1629 E4            pop a
3205   162A             ; END TERMS
3206   162A E7            pop d
3207   162B FD 43         mov [d], b
3208   162D F9            leave
3209   162E 09            ret
3210   162F             
3211   162F             exit:
3212   162F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3213   1632             
3214   1632             ; --- BEGIN INLINE ASM BLOCK
3215   1632 05 0B         syscall sys_terminate_proc
3216   1634             ; --- END INLINE ASM BLOCK
3217   1634             
3218   1634 F9            leave
3219   1635 09            ret
3220   1636             
3221   1636             load_hex:
3222   1636 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3223   1639             ; $temp 
3224   1639 52 02 00      sub sp, 2
3225   163C             ;; temp = alloc(32768); 
3226   163C FA FF FF      lea d, [bp + -1] ; $temp
3227   163F DA            push d
3228   1640 26 00 80      mov b, $8000
3229   1643 FD AB         swp b
3230   1645 D8            push b
3231   1646 07 F0 15      call alloc
3232   1649 51 02 00      add sp, 2
3233   164C E7            pop d
3234   164D FD 43         mov [d], b
3235   164F             
3236   164F             ; --- BEGIN INLINE ASM BLOCK
3237   164F               
3238   164F               
3239   164F               
3240   164F               
3241   164F               
3242   164F             _load_hex:
3243   164F D7            push a
3244   1650 D8            push b
3245   1651 DA            push d
3246   1652 E2            push si
3247   1653 E3            push di
3248   1654 52 00 80      sub sp, $8000      
3249   1657 38 00 00      mov c, 0
3250   165A 48            mov a, sp
3251   165B 77            inc a
3252   165C 3C            mov d, a          
3253   165D 07 F1 17      call _gets        
3254   1660 4D            mov si, a
3255   1661             __load_hex_loop:
3256   1661 F6            lodsb             
3257   1662 B9 00         cmp al, 0         
3258   1664 C6 72 16      jz __load_hex_ret
3259   1667 36            mov bh, al
3260   1668 F6            lodsb
3261   1669 2F            mov bl, al
3262   166A 07 A7 17      call _atoi        
3263   166D F7            stosb             
3264   166E 78            inc c
3265   166F 0A 61 16      jmp __load_hex_loop
3266   1672             __load_hex_ret:
3267   1672 51 00 80      add sp, $8000
3268   1675 F0            pop di
3269   1676 EF            pop si
3270   1677 E7            pop d
3271   1678 E5            pop b
3272   1679 E4            pop a
3273   167A             ; --- END INLINE ASM BLOCK
3274   167A             
3275   167A F9            leave
3276   167B 09            ret
3277   167C             
3278   167C             getparam:
3279   167C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3280   167F             ; $data 
3281   167F 52 01 00      sub sp, 1
3282   1682             
3283   1682             ; --- BEGIN INLINE ASM BLOCK
3284   1682 19 04         mov al, 4
3285   1684 FA 05 00      lea d, [bp + 5] ; $address
3286   1687 FD 2A         mov d, [d]
3287   1689 05 0C         syscall sys_system
3288   168B FA 00 00      lea d, [bp + 0] ; $data
3289   168E FD 3E         mov [d], bl
3290   1690             ; --- END INLINE ASM BLOCK
3291   1690             
3292   1690             ;; return data; 
3293   1690 FA 00 00      lea d, [bp + 0] ; $data
3294   1693 32            mov bl, [d]
3295   1694 A7 00         mov bh, 0
3296   1696 F9            leave
3297   1697 09            ret
3298   1698             
3299   1698             clear:
3300   1698 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3301   169B             ;; print("\033[2J\033[H"); 
3302   169B 26 79 3C      mov b, __s12 ; "\033[2J\033[H"
3303   169E FD AB         swp b
3304   16A0 D8            push b
3305   16A1 07 B5 15      call print
3306   16A4 51 02 00      add sp, 2
3307   16A7 F9            leave
3308   16A8 09            ret
3309   16A9             
3310   16A9             printun:
3311   16A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3312   16AC             ;; print(prompt); 
3313   16AC FA 07 00      lea d, [bp + 7] ; $prompt
3314   16AF 2A            mov b, [d]
3315   16B0 FD AB         swp b
3316   16B2 D8            push b
3317   16B3 07 B5 15      call print
3318   16B6 51 02 00      add sp, 2
3319   16B9             ;; printu(n); 
3320   16B9 FA 05 00      lea d, [bp + 5] ; $n
3321   16BC 2A            mov b, [d]
3322   16BD FD AB         swp b
3323   16BF D8            push b
3324   16C0 07 81 14      call printu
3325   16C3 51 02 00      add sp, 2
3326   16C6             ;; print("\n"); 
3327   16C6 26 81 3C      mov b, __s13 ; "\n"
3328   16C9 FD AB         swp b
3329   16CB D8            push b
3330   16CC 07 B5 15      call print
3331   16CF 51 02 00      add sp, 2
3332   16D2 F9            leave
3333   16D3 09            ret
3334   16D4             
3335   16D4             printsn:
3336   16D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3337   16D7             ;; print(prompt); 
3338   16D7 FA 07 00      lea d, [bp + 7] ; $prompt
3339   16DA 2A            mov b, [d]
3340   16DB FD AB         swp b
3341   16DD D8            push b
3342   16DE 07 B5 15      call print
3343   16E1 51 02 00      add sp, 2
3344   16E4             ;; prints(n); 
3345   16E4 FA 05 00      lea d, [bp + 5] ; $n
3346   16E7 2A            mov b, [d]
3347   16E8 FD AB         swp b
3348   16EA D8            push b
3349   16EB 07 8C 13      call prints
3350   16EE 51 02 00      add sp, 2
3351   16F1             ;; print("\n"); 
3352   16F1 26 81 3C      mov b, __s13 ; "\n"
3353   16F4 FD AB         swp b
3354   16F6 D8            push b
3355   16F7 07 B5 15      call print
3356   16FA 51 02 00      add sp, 2
3357   16FD F9            leave
3358   16FE 09            ret
3359   16FF             
3360   16FF             include_stdio_asm:
3361   16FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3362   1702             
3363   1702             ; --- BEGIN INLINE ASM BLOCK
3364   1702             .include "lib/stdio.asm"
0001+  1702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1702             ; stdio.s
0003+  1702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1702             .include "lib/string.asm"
0001++ 1702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1702             ; string.s
0003++ 1702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1702             
0005++ 1702             
0006++ 1702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1702             ; _strrev
0008++ 1702             ; reverse a string
0009++ 1702             ; D = string address
0010++ 1702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1702             ; 01234
0012++ 1702             _strrev:
0013++ 1702 4B          	pusha
0014++ 1703 07 49 17    	call _strlen	; length in C
0015++ 1706 12          	mov a, c
0016++ 1707 AF 01 00    	cmp a, 1
0017++ 170A D0 24 17    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 170D 7D          	dec a
0019++ 170E FD 4E       	mov si, d	; beginning of string
0020++ 1710 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1712 59          	add d, a	; end of string
0022++ 1713 12          	mov a, c
0023++ 1714 FD 9B       	shr a		; divide by 2
0024++ 1716 39          	mov c, a	; C now counts the steps
0025++ 1717             _strrev_L0:
0026++ 1717 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1718 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1719 3E          	mov [d], al	; store left char into right side
0029++ 171A 1B          	mov al, bl
0030++ 171B F7          	stosb		; store right-side char into left-side; increase DI
0031++ 171C 7E          	dec c
0032++ 171D 7F          	dec d
0033++ 171E C2 00 00    	cmp c, 0
0034++ 1721 C7 17 17    	jne _strrev_L0
0035++ 1724             _strrev_end:
0036++ 1724 4C          	popa
0037++ 1725 09          	ret
0038++ 1726             	
0039++ 1726             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1726             ; _strchr
0041++ 1726             ; search string in D for char in AL
0042++ 1726             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1726             _strchr:
0044++ 1726             _strchr_L0:
0045++ 1726 32          	mov bl, [d]
0046++ 1727 C1 00       	cmp bl, 0
0047++ 1729 C6 34 17    	je _strchr_end
0048++ 172C BA          	cmp al, bl
0049++ 172D C6 34 17    	je _strchr_end
0050++ 1730 79          	inc d
0051++ 1731 0A 26 17    	jmp _strchr_L0
0052++ 1734             _strchr_end:
0053++ 1734 1B          	mov al, bl
0054++ 1735 09          	ret
0055++ 1736             
0056++ 1736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1736             ; _strstr
0058++ 1736             ; find sub-string
0059++ 1736             ; str1 in SI
0060++ 1736             ; str2 in DI
0061++ 1736             ; SI points to end of source string
0062++ 1736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1736             _strstr:
0064++ 1736 DB          	push al
0065++ 1737 DA          	push d
0066++ 1738 E3          	push di
0067++ 1739             _strstr_loop:
0068++ 1739 F3          	cmpsb					; compare a byte of the strings
0069++ 173A C7 45 17    	jne _strstr_ret
0070++ 173D FC 00 00    	lea d, [di + 0]
0071++ 1740 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1742 C7 39 17    	jne _strstr_loop				; equal chars but not at end
0073++ 1745             _strstr_ret:
0074++ 1745 F0          	pop di
0075++ 1746 E7          	pop d
0076++ 1747 E8          	pop al
0077++ 1748 09          	ret
0078++ 1749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1749             ; length of null terminated string
0080++ 1749             ; result in C
0081++ 1749             ; pointer in D
0082++ 1749             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1749             _strlen:
0084++ 1749 DA          	push d
0085++ 174A 38 00 00    	mov c, 0
0086++ 174D             _strlen_L1:
0087++ 174D BD 00       	cmp byte [d], 0
0088++ 174F C6 57 17    	je _strlen_ret
0089++ 1752 79          	inc d
0090++ 1753 78          	inc c
0091++ 1754 0A 4D 17    	jmp _strlen_L1
0092++ 1757             _strlen_ret:
0093++ 1757 E7          	pop d
0094++ 1758 09          	ret
0095++ 1759             
0096++ 1759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1759             ; STRCMP
0098++ 1759             ; compare two strings
0099++ 1759             ; str1 in SI
0100++ 1759             ; str2 in DI
0101++ 1759             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1759             _strcmp:
0104++ 1759 DB          	push al
0105++ 175A DA          	push d
0106++ 175B E3          	push di
0107++ 175C E2          	push si
0108++ 175D             _strcmp_loop:
0109++ 175D F3          	cmpsb					; compare a byte of the strings
0110++ 175E C7 69 17    	jne _strcmp_ret
0111++ 1761 FB FF FF    	lea d, [si +- 1]
0112++ 1764 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1766 C7 5D 17    	jne _strcmp_loop				; equal chars but not at end
0114++ 1769             _strcmp_ret:
0115++ 1769 EF          	pop si
0116++ 176A F0          	pop di
0117++ 176B E7          	pop d
0118++ 176C E8          	pop al
0119++ 176D 09          	ret
0120++ 176E             
0121++ 176E             
0122++ 176E             ; STRCPY
0123++ 176E             ; copy null terminated string from SI to DI
0124++ 176E             ; source in SI
0125++ 176E             ; destination in DI
0126++ 176E             _strcpy:
0127++ 176E E2          	push si
0128++ 176F E3          	push di
0129++ 1770 DB          	push al
0130++ 1771             _strcpy_L1:
0131++ 1771 F6          	lodsb
0132++ 1772 F7          	stosb
0133++ 1773 B9 00       	cmp al, 0
0134++ 1775 C7 71 17    	jne _strcpy_L1
0135++ 1778             _strcpy_end:
0136++ 1778 E8          	pop al
0137++ 1779 F0          	pop di
0138++ 177A EF          	pop si
0139++ 177B 09          	ret
0140++ 177C             
0141++ 177C             ; STRCAT
0142++ 177C             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 177C             ; source in SI
0144++ 177C             ; destination in DI
0145++ 177C             _strcat:
0146++ 177C E2          	push si
0147++ 177D E3          	push di
0148++ 177E D7          	push a
0149++ 177F DA          	push d
0150++ 1780 50          	mov a, di
0151++ 1781 3C          	mov d, a
0152++ 1782             _strcat_goto_end_L1:
0153++ 1782 BD 00       	cmp byte[d], 0
0154++ 1784 C6 8B 17    	je _strcat_start
0155++ 1787 79          	inc d
0156++ 1788 0A 82 17    	jmp _strcat_goto_end_L1
0157++ 178B             _strcat_start:
0158++ 178B FD 50       	mov di, d
0159++ 178D             _strcat_L1:
0160++ 178D F6          	lodsb
0161++ 178E F7          	stosb
0162++ 178F B9 00       	cmp al, 0
0163++ 1791 C7 8D 17    	jne _strcat_L1
0164++ 1794             _strcat_end:
0165++ 1794 E7          	pop d
0166++ 1795 E4          	pop a
0167++ 1796 F0          	pop di
0168++ 1797 EF          	pop si
0169++ 1798 09          	ret
0170++ 1799             
0171++ 1799             
0005+  1799             
0006+  1799             
0007+  1799             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1799             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1799             ; ASCII in BL
0010+  1799             ; result in AL
0011+  1799             ; ascii for F = 0100 0110
0012+  1799             ; ascii for 9 = 0011 1001
0013+  1799             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1799             hex_ascii_encode:
0015+  1799 1B            mov al, bl
0016+  179A 93 40         test al, $40        ; test if letter or number
0017+  179C C7 A2 17      jnz hex_letter
0018+  179F 87 0F         and al, $0F        ; get number
0019+  17A1 09            ret
0020+  17A2             hex_letter:
0021+  17A2 87 0F         and al, $0F        ; get letter
0022+  17A4 6A 09         add al, 9
0023+  17A6 09            ret
0024+  17A7             
0025+  17A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  17A7             ; ATOI
0027+  17A7             ; 2 letter hex string in B
0028+  17A7             ; 8bit integer returned in AL
0029+  17A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  17A7             _atoi:
0031+  17A7 D8            push b
0032+  17A8 07 99 17      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  17AB 30            mov bl, bh
0034+  17AC DB            push al          ; save a
0035+  17AD 07 99 17      call hex_ascii_encode
0036+  17B0 EA            pop bl  
0037+  17B1 FD 9E 04      shl al, 4
0038+  17B4 8C            or al, bl
0039+  17B5 E5            pop b
0040+  17B6 09            ret  
0041+  17B7             
0042+  17B7             
0043+  17B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  17B7             ; scanf
0045+  17B7             ; no need for explanations!
0046+  17B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  17B7             scanf:
0048+  17B7 09            ret
0049+  17B8             
0050+  17B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  17B8             ; ITOA
0052+  17B8             ; 8bit value in BL
0053+  17B8             ; 2 byte ASCII result in A
0054+  17B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  17B8             _itoa:
0056+  17B8 DA            push d
0057+  17B9 D8            push b
0058+  17BA A7 00         mov bh, 0
0059+  17BC FD A4 04      shr bl, 4  
0060+  17BF 74            mov d, b
0061+  17C0 1F 68 1A      mov al, [d + s_hex_digits]
0062+  17C3 23            mov ah, al
0063+  17C4               
0064+  17C4 E5            pop b
0065+  17C5 D8            push b
0066+  17C6 A7 00         mov bh, 0
0067+  17C8 FD 87 0F      and bl, $0F
0068+  17CB 74            mov d, b
0069+  17CC 1F 68 1A      mov al, [d + s_hex_digits]
0070+  17CF E5            pop b
0071+  17D0 E7            pop d
0072+  17D1 09            ret
0073+  17D2             
0074+  17D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  17D2             ; HEX STRING TO BINARY
0076+  17D2             ; di = destination address
0077+  17D2             ; si = source
0078+  17D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  17D2             _hex_to_int:
0080+  17D2             _hex_to_int_L1:
0081+  17D2 F6            lodsb          ; load from [SI] to AL
0082+  17D3 B9 00         cmp al, 0        ; check if ASCII 0
0083+  17D5 C6 E2 17      jz _hex_to_int_ret
0084+  17D8 36            mov bh, al
0085+  17D9 F6            lodsb
0086+  17DA 2F            mov bl, al
0087+  17DB 07 A7 17      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  17DE F7            stosb          ; store AL to [DI]
0089+  17DF 0A D2 17      jmp _hex_to_int_L1
0090+  17E2             _hex_to_int_ret:
0091+  17E2 09            ret    
0092+  17E3             
0093+  17E3             
0094+  17E3             
0095+  17E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  17E3             ; GETCHAR
0097+  17E3             ; char in ah
0098+  17E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  17E3             getch:
0100+  17E3 DB            push al
0101+  17E4             getch_retry:
0102+  17E4 19 01         mov al, 1
0103+  17E6 05 03         syscall sys_io      ; receive in AH
0104+  17E8 E8            pop al
0105+  17E9 09            ret
0106+  17EA             
0107+  17EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  17EA             ; PUTCHAR
0109+  17EA             ; char in ah
0110+  17EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  17EA             _putchar:
0112+  17EA D7            push a
0113+  17EB 19 00         mov al, 0
0114+  17ED 05 03         syscall sys_io      ; char in AH
0115+  17EF E4            pop a
0116+  17F0 09            ret
0117+  17F1             
0118+  17F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  17F1             ;; INPUT A STRING
0120+  17F1             ;; terminates with null
0121+  17F1             ;; pointer in D
0122+  17F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  17F1             _gets:
0124+  17F1 D7            push a
0125+  17F2 DA            push d
0126+  17F3             _gets_loop:
0127+  17F3 19 01         mov al, 1
0128+  17F5 05 03         syscall sys_io      ; receive in AH
0129+  17F7 B9 00         cmp al, 0        ; check error code (AL)
0130+  17F9 C6 F3 17      je _gets_loop      ; if no char received, retry
0131+  17FC             
0132+  17FC 76 1B         cmp ah, 27
0133+  17FE C6 1F 18      je _gets_ansi_esc
0134+  1801 76 0A         cmp ah, $0A        ; LF
0135+  1803 C6 8A 18      je _gets_end
0136+  1806 76 0D         cmp ah, $0D        ; CR
0137+  1808 C6 8A 18      je _gets_end
0138+  180B 76 5C         cmp ah, $5C        ; '\\'
0139+  180D C6 4B 18      je _gets_escape
0140+  1810               
0141+  1810 76 08         cmp ah, $08      ; check for backspace
0142+  1812 C6 1B 18      je _gets_backspace
0143+  1815             
0144+  1815 1A            mov al, ah
0145+  1816 3E            mov [d], al
0146+  1817 79            inc d
0147+  1818 0A F3 17      jmp _gets_loop
0148+  181B             _gets_backspace:
0149+  181B 7F            dec d
0150+  181C 0A F3 17      jmp _gets_loop
0151+  181F             _gets_ansi_esc:
0152+  181F 19 01         mov al, 1
0153+  1821 05 03         syscall sys_io        ; receive in AH without echo
0154+  1823 B9 00         cmp al, 0          ; check error code (AL)
0155+  1825 C6 1F 18      je _gets_ansi_esc    ; if no char received, retry
0156+  1828 76 5B         cmp ah, '['
0157+  182A C7 F3 17      jne _gets_loop
0158+  182D             _gets_ansi_esc_2:
0159+  182D 19 01         mov al, 1
0160+  182F 05 03         syscall sys_io          ; receive in AH without echo
0161+  1831 B9 00         cmp al, 0            ; check error code (AL)
0162+  1833 C6 2D 18      je _gets_ansi_esc_2  ; if no char received, retry
0163+  1836 76 44         cmp ah, 'D'
0164+  1838 C6 43 18      je _gets_left_arrow
0165+  183B 76 43         cmp ah, 'C'
0166+  183D C6 47 18      je _gets_right_arrow
0167+  1840 0A F3 17      jmp _gets_loop
0168+  1843             _gets_left_arrow:
0169+  1843 7F            dec d
0170+  1844 0A F3 17      jmp _gets_loop
0171+  1847             _gets_right_arrow:
0172+  1847 79            inc d
0173+  1848 0A F3 17      jmp _gets_loop
0174+  184B             _gets_escape:
0175+  184B 19 01         mov al, 1
0176+  184D 05 03         syscall sys_io      ; receive in AH
0177+  184F B9 00         cmp al, 0        ; check error code (AL)
0178+  1851 C6 4B 18      je _gets_escape      ; if no char received, retry
0179+  1854 76 6E         cmp ah, 'n'
0180+  1856 C6 75 18      je _gets_LF
0181+  1859 76 72         cmp ah, 'r'
0182+  185B C6 7C 18      je _gets_CR
0183+  185E 76 30         cmp ah, '0'
0184+  1860 C6 83 18      je _gets_NULL
0185+  1863 76 5C         cmp ah, $5C  ; '\'
0186+  1865 C6 6E 18      je _gets_slash
0187+  1868 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1869 3E            mov [d], al
0189+  186A 79            inc d
0190+  186B 0A F3 17      jmp _gets_loop
0191+  186E             _gets_slash:
0192+  186E 19 5C         mov al, $5C
0193+  1870 3E            mov [d], al
0194+  1871 79            inc d
0195+  1872 0A F3 17      jmp _gets_loop
0196+  1875             _gets_LF:
0197+  1875 19 0A         mov al, $0A
0198+  1877 3E            mov [d], al
0199+  1878 79            inc d
0200+  1879 0A F3 17      jmp _gets_loop
0201+  187C             _gets_CR:
0202+  187C 19 0D         mov al, $0D
0203+  187E 3E            mov [d], al
0204+  187F 79            inc d
0205+  1880 0A F3 17      jmp _gets_loop
0206+  1883             _gets_NULL:
0207+  1883 19 00         mov al, $00
0208+  1885 3E            mov [d], al
0209+  1886 79            inc d
0210+  1887 0A F3 17      jmp _gets_loop
0211+  188A             _gets_end:
0212+  188A 19 00         mov al, 0
0213+  188C 3E            mov [d], al        ; terminate string
0214+  188D E7            pop d
0215+  188E E4            pop a
0216+  188F 09            ret
0217+  1890             
0218+  1890             
0219+  1890             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  1890             ;; INPUT TEXT
0221+  1890             ;; terminated with CTRL+D
0222+  1890             ;; pointer in D
0223+  1890             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  1890             _gettxt:
0225+  1890 D7            push a
0226+  1891 DA            push d
0227+  1892             _gettxt_loop:
0228+  1892 19 01         mov al, 1
0229+  1894 05 03         syscall sys_io      ; receive in AH
0230+  1896 B9 00         cmp al, 0        ; check error code (AL)
0231+  1898 C6 92 18      je _gettxt_loop    ; if no char received, retry
0232+  189B 76 04         cmp ah, 4      ; EOT
0233+  189D C6 DB 18      je _gettxt_end
0234+  18A0 76 08         cmp ah, $08      ; check for backspace
0235+  18A2 C6 D7 18      je _gettxt_backspace
0236+  18A5 76 5C         cmp ah, $5C        ; '\'
0237+  18A7 C6 B0 18      je _gettxt_escape
0238+  18AA 1A            mov al, ah
0239+  18AB 3E            mov [d], al
0240+  18AC 79            inc d
0241+  18AD 0A 92 18      jmp _gettxt_loop
0242+  18B0             _gettxt_escape:
0243+  18B0 19 01         mov al, 1
0244+  18B2 05 03         syscall sys_io      ; receive in AH
0245+  18B4 B9 00         cmp al, 0        ; check error code (AL)
0246+  18B6 C6 B0 18      je _gettxt_escape    ; if no char received, retry
0247+  18B9 76 6E         cmp ah, 'n'
0248+  18BB C6 C9 18      je _gettxt_LF
0249+  18BE 76 72         cmp ah, 'r'
0250+  18C0 C6 D0 18      je _gettxt_CR
0251+  18C3 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  18C4 3E            mov [d], al
0253+  18C5 79            inc d
0254+  18C6 0A 92 18      jmp _gettxt_loop
0255+  18C9             _gettxt_LF:
0256+  18C9 19 0A         mov al, $0A
0257+  18CB 3E            mov [d], al
0258+  18CC 79            inc d
0259+  18CD 0A 92 18      jmp _gettxt_loop
0260+  18D0             _gettxt_CR:
0261+  18D0 19 0D         mov al, $0D
0262+  18D2 3E            mov [d], al
0263+  18D3 79            inc d
0264+  18D4 0A 92 18      jmp _gettxt_loop
0265+  18D7             _gettxt_backspace:
0266+  18D7 7F            dec d
0267+  18D8 0A 92 18      jmp _gettxt_loop
0268+  18DB             _gettxt_end:
0269+  18DB 19 00         mov al, 0
0270+  18DD 3E            mov [d], al        ; terminate string
0271+  18DE E7            pop d
0272+  18DF E4            pop a
0273+  18E0 09            ret
0274+  18E1             
0275+  18E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  18E1             ; PRINT NEW LINE
0277+  18E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  18E1             printnl:
0279+  18E1 D7            push a
0280+  18E2 10 00 0A      mov a, $0A00
0281+  18E5 05 03         syscall sys_io
0282+  18E7 10 00 0D      mov a, $0D00
0283+  18EA 05 03         syscall sys_io
0284+  18EC E4            pop a
0285+  18ED 09            ret
0286+  18EE             
0287+  18EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  18EE             ; _strtoint
0289+  18EE             ; 4 digit hex string number in d
0290+  18EE             ; integer returned in A
0291+  18EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  18EE             _strtointx:
0293+  18EE D8            push b
0294+  18EF 32            mov bl, [d]
0295+  18F0 37            mov bh, bl
0296+  18F1 33 01 00      mov bl, [d + 1]
0297+  18F4 07 A7 17      call _atoi        ; convert to int in AL
0298+  18F7 23            mov ah, al        ; move to AH
0299+  18F8 33 02 00      mov bl, [d + 2]
0300+  18FB 37            mov bh, bl
0301+  18FC 33 03 00      mov bl, [d + 3]
0302+  18FF 07 A7 17      call _atoi        ; convert to int in AL
0303+  1902 E5            pop b
0304+  1903 09            ret
0305+  1904             
0306+  1904             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  1904             ; _strtoint
0308+  1904             ; 5 digit base10 string number in d
0309+  1904             ; integer returned in A
0310+  1904             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  1904             _strtoint:
0312+  1904 E2            push si
0313+  1905 D8            push b
0314+  1906 D9            push c
0315+  1907 DA            push d
0316+  1908 07 49 17      call _strlen      ; get string length in C
0317+  190B 7E            dec c
0318+  190C FD 4E         mov si, d
0319+  190E 12            mov a, c
0320+  190F FD 99         shl a
0321+  1911 3B 80 1A      mov d, table_power
0322+  1914 59            add d, a
0323+  1915 38 00 00      mov c, 0
0324+  1918             _strtoint_L0:
0325+  1918 F6            lodsb      ; load ASCII to al
0326+  1919 B9 00         cmp al, 0
0327+  191B C6 2E 19      je _strtoint_end
0328+  191E 6F 30         sub al, $30    ; make into integer
0329+  1920 22 00         mov ah, 0
0330+  1922 2A            mov b, [d]
0331+  1923 AC            mul a, b      ; result in B since it fits in 16bits
0332+  1924 11            mov a, b
0333+  1925 28            mov b, c
0334+  1926 54            add a, b
0335+  1927 39            mov c, a
0336+  1928 63 02 00      sub d, 2
0337+  192B 0A 18 19      jmp _strtoint_L0
0338+  192E             _strtoint_end:
0339+  192E 12            mov a, c
0340+  192F E7            pop d
0341+  1930 E6            pop c
0342+  1931 E5            pop b
0343+  1932 EF            pop si
0344+  1933 09            ret
0345+  1934             
0346+  1934             
0347+  1934             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  1934             ; PRINT NULL TERMINATED STRING
0349+  1934             ; pointer in D
0350+  1934             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  1934             _puts:
0352+  1934 D7            push a
0353+  1935 DA            push d
0354+  1936             _puts_L1:
0355+  1936 1E            mov al, [d]
0356+  1937 B9 00         cmp al, 0
0357+  1939 C6 45 19      jz _puts_END
0358+  193C 23            mov ah, al
0359+  193D 19 00         mov al, 0
0360+  193F 05 03         syscall sys_io
0361+  1941 79            inc d
0362+  1942 0A 36 19      jmp _puts_L1
0363+  1945             _puts_END:
0364+  1945 E7            pop d
0365+  1946 E4            pop a
0366+  1947 09            ret
0367+  1948             
0368+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1948             ; PRINT N SIZE STRING
0370+  1948             ; pointer in D
0371+  1948             ; size in C
0372+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1948             _putsn:
0374+  1948 DB            push al
0375+  1949 DA            push d
0376+  194A D9            push c
0377+  194B             _putsn_L0:
0378+  194B 1E            mov al, [d]
0379+  194C 23            mov ah, al
0380+  194D 19 00         mov al, 0
0381+  194F 05 03         syscall sys_io
0382+  1951 79            inc d
0383+  1952 7E            dec c  
0384+  1953 C2 00 00      cmp c, 0
0385+  1956 C7 4B 19      jne _putsn_L0
0386+  1959             _putsn_end:
0387+  1959 E6            pop c
0388+  195A E7            pop d
0389+  195B E8            pop al
0390+  195C 09            ret
0391+  195D             
0392+  195D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  195D             ; print 16bit decimal number
0394+  195D             ; input number in A
0395+  195D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  195D             print_u16d:
0397+  195D D7            push a
0398+  195E D8            push b
0399+  195F 26 10 27      mov b, 10000
0400+  1962 AE            div a, b      ; get 10000's coeff.
0401+  1963 07 85 19      call print_number
0402+  1966 11            mov a, b
0403+  1967 26 E8 03      mov b, 1000
0404+  196A AE            div a, b      ; get 1000's coeff.
0405+  196B 07 85 19      call print_number
0406+  196E 11            mov a, b
0407+  196F 26 64 00      mov b, 100
0408+  1972 AE            div a, b
0409+  1973 07 85 19      call print_number
0410+  1976 11            mov a, b
0411+  1977 26 0A 00      mov b, 10
0412+  197A AE            div a, b
0413+  197B 07 85 19      call print_number
0414+  197E 1B            mov al, bl      ; 1's coeff in bl
0415+  197F 07 85 19      call print_number
0416+  1982 E5            pop b
0417+  1983 E4            pop a
0418+  1984 09            ret
0419+  1985             
0420+  1985             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1985             ; print AL
0422+  1985             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1985             print_number:
0424+  1985 6A 30         add al, $30
0425+  1987 23            mov ah, al
0426+  1988 07 EA 17      call _putchar
0427+  198B 09            ret
0428+  198C             
0429+  198C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  198C             ; PRINT 16BIT HEX INTEGER
0431+  198C             ; integer value in reg B
0432+  198C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  198C             print_u16x:
0434+  198C D7            push a
0435+  198D D8            push b
0436+  198E DD            push bl
0437+  198F 30            mov bl, bh
0438+  1990 07 B8 17      call _itoa        ; convert bh to char in A
0439+  1993 2F            mov bl, al        ; save al
0440+  1994 19 00         mov al, 0
0441+  1996 05 03         syscall sys_io        ; display AH
0442+  1998 24            mov ah, bl        ; retrieve al
0443+  1999 19 00         mov al, 0
0444+  199B 05 03         syscall sys_io        ; display AL
0445+  199D             
0446+  199D EA            pop bl
0447+  199E 07 B8 17      call _itoa        ; convert bh to char in A
0448+  19A1 2F            mov bl, al        ; save al
0449+  19A2 19 00         mov al, 0
0450+  19A4 05 03         syscall sys_io        ; display AH
0451+  19A6 24            mov ah, bl        ; retrieve al
0452+  19A7 19 00         mov al, 0
0453+  19A9 05 03         syscall sys_io        ; display AL
0454+  19AB             
0455+  19AB E5            pop b
0456+  19AC E4            pop a
0457+  19AD 09            ret
0458+  19AE             
0459+  19AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  19AE             ; INPUT 16BIT HEX INTEGER
0461+  19AE             ; read 16bit integer into A
0462+  19AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  19AE             scan_u16x:
0464+  19AE F8 10 00      enter 16
0465+  19B1 D8            push b
0466+  19B2 DA            push d
0467+  19B3             
0468+  19B3 FA F1 FF      lea d, [bp + -15]
0469+  19B6 07 F1 17      call _gets        ; get number
0470+  19B9             
0471+  19B9 32            mov bl, [d]
0472+  19BA 37            mov bh, bl
0473+  19BB 33 01 00      mov bl, [d + 1]
0474+  19BE 07 A7 17      call _atoi        ; convert to int in AL
0475+  19C1 23            mov ah, al        ; move to AH
0476+  19C2             
0477+  19C2 33 02 00      mov bl, [d + 2]
0478+  19C5 37            mov bh, bl
0479+  19C6 33 03 00      mov bl, [d + 3]
0480+  19C9 07 A7 17      call _atoi        ; convert to int in AL
0481+  19CC             
0482+  19CC E7            pop d
0483+  19CD E5            pop b
0484+  19CE F9            leave
0485+  19CF 09            ret
0486+  19D0             
0487+  19D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  19D0             ; PRINT 8bit HEX INTEGER
0489+  19D0             ; integer value in reg bl
0490+  19D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  19D0             print_u8x:
0492+  19D0 D7            push a
0493+  19D1 DD            push bl
0494+  19D2             
0495+  19D2 07 B8 17      call _itoa        ; convert bl to char in A
0496+  19D5 2F            mov bl, al        ; save al
0497+  19D6 19 00         mov al, 0
0498+  19D8 05 03         syscall sys_io        ; display AH
0499+  19DA 24            mov ah, bl        ; retrieve al
0500+  19DB 19 00         mov al, 0
0501+  19DD 05 03         syscall sys_io        ; display AL
0502+  19DF             
0503+  19DF EA            pop bl
0504+  19E0 E4            pop a
0505+  19E1 09            ret
0506+  19E2             
0507+  19E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  19E2             ; print 8bit decimal unsigned number
0509+  19E2             ; input number in AL
0510+  19E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  19E2             print_u8d:
0512+  19E2 D7            push a
0513+  19E3 D8            push b
0514+  19E4             
0515+  19E4 22 00         mov ah, 0
0516+  19E6 26 64 00      mov b, 100
0517+  19E9 AE            div a, b
0518+  19EA D8            push b      ; save remainder
0519+  19EB B9 00         cmp al, 0
0520+  19ED C6 F7 19      je skip100
0521+  19F0 6A 30         add al, $30
0522+  19F2 23            mov ah, al
0523+  19F3 19 00         mov al, 0
0524+  19F5 05 03         syscall sys_io  ; print coeff
0525+  19F7             skip100:
0526+  19F7 E4            pop a
0527+  19F8 22 00         mov ah, 0
0528+  19FA 26 0A 00      mov b, 10
0529+  19FD AE            div a, b
0530+  19FE D8            push b      ; save remainder
0531+  19FF B9 00         cmp al, 0
0532+  1A01 C6 0B 1A      je skip10
0533+  1A04 6A 30         add al, $30
0534+  1A06 23            mov ah, al
0535+  1A07 19 00         mov al, 0
0536+  1A09 05 03         syscall sys_io  ; print coeff
0537+  1A0B             skip10:
0538+  1A0B E4            pop a
0539+  1A0C 1B            mov al, bl
0540+  1A0D 6A 30         add al, $30
0541+  1A0F 23            mov ah, al
0542+  1A10 19 00         mov al, 0
0543+  1A12 05 03         syscall sys_io  ; print coeff
0544+  1A14 E5            pop b
0545+  1A15 E4            pop a
0546+  1A16 09            ret
0547+  1A17             
0548+  1A17             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  1A17             ; INPUT 8BIT HEX INTEGER
0550+  1A17             ; read 8bit integer into AL
0551+  1A17             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  1A17             scan_u8x:
0553+  1A17 F8 04 00      enter 4
0554+  1A1A D8            push b
0555+  1A1B DA            push d
0556+  1A1C             
0557+  1A1C FA FD FF      lea d, [bp + -3]
0558+  1A1F 07 F1 17      call _gets        ; get number
0559+  1A22             
0560+  1A22 32            mov bl, [d]
0561+  1A23 37            mov bh, bl
0562+  1A24 33 01 00      mov bl, [d + 1]
0563+  1A27 07 A7 17      call _atoi        ; convert to int in AL
0564+  1A2A             
0565+  1A2A E7            pop d
0566+  1A2B E5            pop b
0567+  1A2C F9            leave
0568+  1A2D 09            ret
0569+  1A2E             
0570+  1A2E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  1A2E             ; input decimal number
0572+  1A2E             ; result in A
0573+  1A2E             ; 655'\0'
0574+  1A2E             ; low--------high
0575+  1A2E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  1A2E             scan_u16d:
0577+  1A2E F8 08 00      enter 8
0578+  1A31 E2            push si
0579+  1A32 D8            push b
0580+  1A33 D9            push c
0581+  1A34 DA            push d
0582+  1A35 FA F9 FF      lea d, [bp +- 7]
0583+  1A38 07 F1 17      call _gets
0584+  1A3B 07 49 17      call _strlen      ; get string length in C
0585+  1A3E 7E            dec c
0586+  1A3F FD 4E         mov si, d
0587+  1A41 12            mov a, c
0588+  1A42 FD 99         shl a
0589+  1A44 3B 80 1A      mov d, table_power
0590+  1A47 59            add d, a
0591+  1A48 38 00 00      mov c, 0
0592+  1A4B             mul_loop:
0593+  1A4B F6            lodsb      ; load ASCII to al
0594+  1A4C B9 00         cmp al, 0
0595+  1A4E C6 61 1A      je mul_exit
0596+  1A51 6F 30         sub al, $30    ; make into integer
0597+  1A53 22 00         mov ah, 0
0598+  1A55 2A            mov b, [d]
0599+  1A56 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1A57 11            mov a, b
0601+  1A58 28            mov b, c
0602+  1A59 54            add a, b
0603+  1A5A 39            mov c, a
0604+  1A5B 63 02 00      sub d, 2
0605+  1A5E 0A 4B 1A      jmp mul_loop
0606+  1A61             mul_exit:
0607+  1A61 12            mov a, c
0608+  1A62 E7            pop d
0609+  1A63 E6            pop c
0610+  1A64 E5            pop b
0611+  1A65 EF            pop si
0612+  1A66 F9            leave
0613+  1A67 09            ret
0614+  1A68             
0615+  1A68             
0616+  1A68 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  1A6C 34 35 36 37 
0616+  1A70 38 39 41 42 
0616+  1A74 43 44 45 46 
0617+  1A78 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  1A7C 1B 5B 48 00 
0618+  1A80             
0619+  1A80             table_power:
0620+  1A80 01 00         .dw 1
0621+  1A82 0A 00         .dw 10
0622+  1A84 64 00         .dw 100
0623+  1A86 E8 03         .dw 1000
0624+  1A88 10 27         .dw 100003365   1A8A             ; --- END INLINE ASM BLOCK
3366   1A8A             
3367   1A8A F9            leave
3368   1A8B 09            ret
3369   1A8C             
3370   1A8C             back:
3371   1A8C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3372   1A8F             ; $t 
3373   1A8F 52 02 00      sub sp, 2
3374   1A92             ;; t = token; 
3375   1A92 FA FF FF      lea d, [bp + -1] ; $t
3376   1A95 DA            push d
3377   1A96 3B 85 33      mov d, _token_data ; $token
3378   1A99 2D            mov b, d
3379   1A9A E7            pop d
3380   1A9B FD 43         mov [d], b
3381   1A9D             ;; while(*t++) prog--; 
3382   1A9D             _while51_cond:
3383   1A9D FA FF FF      lea d, [bp + -1] ; $t
3384   1AA0 2A            mov b, [d]
3385   1AA1 FD 79         mov g, b
3386   1AA3 FD 77         inc b
3387   1AA5 FA FF FF      lea d, [bp + -1] ; $t
3388   1AA8 FD 43         mov [d], b
3389   1AAA FD 27         mov b, g
3390   1AAC 74            mov d, b
3391   1AAD 32            mov bl, [d]
3392   1AAE A7 00         mov bh, 0
3393   1AB0 C0 00 00      cmp b, 0
3394   1AB3 C6 C8 1A      je _while51_exit
3395   1AB6             _while51_block:
3396   1AB6             ;; prog--; 
3397   1AB6 3B 83 33      mov d, _prog ; $prog
3398   1AB9 2A            mov b, [d]
3399   1ABA FD 79         mov g, b
3400   1ABC FD 7D         dec b
3401   1ABE 3B 83 33      mov d, _prog ; $prog
3402   1AC1 FD 43         mov [d], b
3403   1AC3 FD 27         mov b, g
3404   1AC5 0A 9D 1A      jmp _while51_cond
3405   1AC8             _while51_exit:
3406   1AC8             ;; tok = TOK_UNDEF; 
3407   1AC8 3B 7F 33      mov d, _tok ; $tok
3408   1ACB DA            push d
3409   1ACC 26 00 00      mov b, 0; TOK_UNDEF
3410   1ACF E7            pop d
3411   1AD0 FD 43         mov [d], b
3412   1AD2             ;; toktype = TYPE_UNDEF; 
3413   1AD2 3B 81 33      mov d, _toktype ; $toktype
3414   1AD5 DA            push d
3415   1AD6 26 00 00      mov b, 0; TYPE_UNDEF
3416   1AD9 E7            pop d
3417   1ADA FD 43         mov [d], b
3418   1ADC             ;; token[0] = '\0'; 
3419   1ADC 3B 85 33      mov d, _token_data ; $token
3420   1ADF D7            push a
3421   1AE0 DA            push d
3422   1AE1 26 00 00      mov b, $0
3423   1AE4 E7            pop d
3424   1AE5 5A            add d, b
3425   1AE6 E4            pop a
3426   1AE7 DA            push d
3427   1AE8 26 00 00      mov b, $0
3428   1AEB E7            pop d
3429   1AEC FD 3E         mov [d], bl
3430   1AEE F9            leave
3431   1AEF 09            ret
3432   1AF0             
3433   1AF0             get_path:
3434   1AF0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3435   1AF3             ; $t 
3436   1AF3 52 02 00      sub sp, 2
3437   1AF6             ;; *token = '\0'; 
3438   1AF6 3B 85 33      mov d, _token_data ; $token
3439   1AF9 2D            mov b, d
3440   1AFA D8            push b
3441   1AFB 26 00 00      mov b, $0
3442   1AFE E7            pop d
3443   1AFF FD 3E         mov [d], bl
3444   1B01             ;; t = token; 
3445   1B01 FA FF FF      lea d, [bp + -1] ; $t
3446   1B04 DA            push d
3447   1B05 3B 85 33      mov d, _token_data ; $token
3448   1B08 2D            mov b, d
3449   1B09 E7            pop d
3450   1B0A FD 43         mov [d], b
3451   1B0C             ;; while(is_space(*prog)) prog++; 
3452   1B0C             _while52_cond:
3453   1B0C 3B 83 33      mov d, _prog ; $prog
3454   1B0F 2A            mov b, [d]
3455   1B10 74            mov d, b
3456   1B11 32            mov bl, [d]
3457   1B12 A7 00         mov bh, 0
3458   1B14 DD            push bl
3459   1B15 07 2A 0A      call is_space
3460   1B18 51 01 00      add sp, 1
3461   1B1B C0 00 00      cmp b, 0
3462   1B1E C6 33 1B      je _while52_exit
3463   1B21             _while52_block:
3464   1B21             ;; prog++; 
3465   1B21 3B 83 33      mov d, _prog ; $prog
3466   1B24 2A            mov b, [d]
3467   1B25 FD 79         mov g, b
3468   1B27 FD 77         inc b
3469   1B29 3B 83 33      mov d, _prog ; $prog
3470   1B2C FD 43         mov [d], b
3471   1B2E FD 27         mov b, g
3472   1B30 0A 0C 1B      jmp _while52_cond
3473   1B33             _while52_exit:
3474   1B33             ;; if(*prog == '\0'){ 
3475   1B33             _if53_cond:
3476   1B33 3B 83 33      mov d, _prog ; $prog
3477   1B36 2A            mov b, [d]
3478   1B37 74            mov d, b
3479   1B38 32            mov bl, [d]
3480   1B39 A7 00         mov bh, 0
3481   1B3B             ; START RELATIONAL
3482   1B3B D7            push a
3483   1B3C 11            mov a, b
3484   1B3D 26 00 00      mov b, $0
3485   1B40 B0            cmp a, b
3486   1B41 FD 71         seq ; ==
3487   1B43 E4            pop a
3488   1B44             ; END RELATIONAL
3489   1B44 C0 00 00      cmp b, 0
3490   1B47 C6 4F 1B      je _if53_exit
3491   1B4A             _if53_true:
3492   1B4A             ;; return; 
3493   1B4A F9            leave
3494   1B4B 09            ret
3495   1B4C 0A 4F 1B      jmp _if53_exit
3496   1B4F             _if53_exit:
3497   1B4F             ;; while( 
3498   1B4F             _while54_cond:
3499   1B4F 3B 83 33      mov d, _prog ; $prog
3500   1B52 2A            mov b, [d]
3501   1B53 74            mov d, b
3502   1B54 32            mov bl, [d]
3503   1B55 A7 00         mov bh, 0
3504   1B57             ; START RELATIONAL
3505   1B57 D7            push a
3506   1B58 11            mov a, b
3507   1B59 26 61 00      mov b, $61
3508   1B5C B0            cmp a, b
3509   1B5D FD 80         sge ; >=
3510   1B5F E4            pop a
3511   1B60             ; END RELATIONAL
3512   1B60 D7            push a
3513   1B61 11            mov a, b
3514   1B62 3B 83 33      mov d, _prog ; $prog
3515   1B65 2A            mov b, [d]
3516   1B66 74            mov d, b
3517   1B67 32            mov bl, [d]
3518   1B68 A7 00         mov bh, 0
3519   1B6A             ; START RELATIONAL
3520   1B6A D7            push a
3521   1B6B 11            mov a, b
3522   1B6C 26 7A 00      mov b, $7a
3523   1B6F B0            cmp a, b
3524   1B70 FD 74         sle ; <=
3525   1B72 E4            pop a
3526   1B73             ; END RELATIONAL
3527   1B73 FD A7         sand a, b ; &&
3528   1B75 E4            pop a
3529   1B76 D7            push a
3530   1B77 11            mov a, b
3531   1B78 3B 83 33      mov d, _prog ; $prog
3532   1B7B 2A            mov b, [d]
3533   1B7C 74            mov d, b
3534   1B7D 32            mov bl, [d]
3535   1B7E A7 00         mov bh, 0
3536   1B80             ; START RELATIONAL
3537   1B80 D7            push a
3538   1B81 11            mov a, b
3539   1B82 26 41 00      mov b, $41
3540   1B85 B0            cmp a, b
3541   1B86 FD 80         sge ; >=
3542   1B88 E4            pop a
3543   1B89             ; END RELATIONAL
3544   1B89 D7            push a
3545   1B8A 11            mov a, b
3546   1B8B 3B 83 33      mov d, _prog ; $prog
3547   1B8E 2A            mov b, [d]
3548   1B8F 74            mov d, b
3549   1B90 32            mov bl, [d]
3550   1B91 A7 00         mov bh, 0
3551   1B93             ; START RELATIONAL
3552   1B93 D7            push a
3553   1B94 11            mov a, b
3554   1B95 26 5A 00      mov b, $5a
3555   1B98 B0            cmp a, b
3556   1B99 FD 74         sle ; <=
3557   1B9B E4            pop a
3558   1B9C             ; END RELATIONAL
3559   1B9C FD A7         sand a, b ; &&
3560   1B9E E4            pop a
3561   1B9F FD A8         sor a, b ; ||
3562   1BA1 11            mov a, b
3563   1BA2 3B 83 33      mov d, _prog ; $prog
3564   1BA5 2A            mov b, [d]
3565   1BA6 74            mov d, b
3566   1BA7 32            mov bl, [d]
3567   1BA8 A7 00         mov bh, 0
3568   1BAA             ; START RELATIONAL
3569   1BAA D7            push a
3570   1BAB 11            mov a, b
3571   1BAC 26 30 00      mov b, $30
3572   1BAF B0            cmp a, b
3573   1BB0 FD 80         sge ; >=
3574   1BB2 E4            pop a
3575   1BB3             ; END RELATIONAL
3576   1BB3 D7            push a
3577   1BB4 11            mov a, b
3578   1BB5 3B 83 33      mov d, _prog ; $prog
3579   1BB8 2A            mov b, [d]
3580   1BB9 74            mov d, b
3581   1BBA 32            mov bl, [d]
3582   1BBB A7 00         mov bh, 0
3583   1BBD             ; START RELATIONAL
3584   1BBD D7            push a
3585   1BBE 11            mov a, b
3586   1BBF 26 39 00      mov b, $39
3587   1BC2 B0            cmp a, b
3588   1BC3 FD 74         sle ; <=
3589   1BC5 E4            pop a
3590   1BC6             ; END RELATIONAL
3591   1BC6 FD A7         sand a, b ; &&
3592   1BC8 E4            pop a
3593   1BC9 FD A8         sor a, b ; ||
3594   1BCB 11            mov a, b
3595   1BCC 3B 83 33      mov d, _prog ; $prog
3596   1BCF 2A            mov b, [d]
3597   1BD0 74            mov d, b
3598   1BD1 32            mov bl, [d]
3599   1BD2 A7 00         mov bh, 0
3600   1BD4             ; START RELATIONAL
3601   1BD4 D7            push a
3602   1BD5 11            mov a, b
3603   1BD6 26 2F 00      mov b, $2f
3604   1BD9 B0            cmp a, b
3605   1BDA FD 71         seq ; ==
3606   1BDC E4            pop a
3607   1BDD             ; END RELATIONAL
3608   1BDD FD A8         sor a, b ; ||
3609   1BDF 11            mov a, b
3610   1BE0 3B 83 33      mov d, _prog ; $prog
3611   1BE3 2A            mov b, [d]
3612   1BE4 74            mov d, b
3613   1BE5 32            mov bl, [d]
3614   1BE6 A7 00         mov bh, 0
3615   1BE8             ; START RELATIONAL
3616   1BE8 D7            push a
3617   1BE9 11            mov a, b
3618   1BEA 26 5F 00      mov b, $5f
3619   1BED B0            cmp a, b
3620   1BEE FD 71         seq ; ==
3621   1BF0 E4            pop a
3622   1BF1             ; END RELATIONAL
3623   1BF1 FD A8         sor a, b ; ||
3624   1BF3 11            mov a, b
3625   1BF4 3B 83 33      mov d, _prog ; $prog
3626   1BF7 2A            mov b, [d]
3627   1BF8 74            mov d, b
3628   1BF9 32            mov bl, [d]
3629   1BFA A7 00         mov bh, 0
3630   1BFC             ; START RELATIONAL
3631   1BFC D7            push a
3632   1BFD 11            mov a, b
3633   1BFE 26 2D 00      mov b, $2d
3634   1C01 B0            cmp a, b
3635   1C02 FD 71         seq ; ==
3636   1C04 E4            pop a
3637   1C05             ; END RELATIONAL
3638   1C05 FD A8         sor a, b ; ||
3639   1C07 11            mov a, b
3640   1C08 3B 83 33      mov d, _prog ; $prog
3641   1C0B 2A            mov b, [d]
3642   1C0C 74            mov d, b
3643   1C0D 32            mov bl, [d]
3644   1C0E A7 00         mov bh, 0
3645   1C10             ; START RELATIONAL
3646   1C10 D7            push a
3647   1C11 11            mov a, b
3648   1C12 26 2E 00      mov b, $2e
3649   1C15 B0            cmp a, b
3650   1C16 FD 71         seq ; ==
3651   1C18 E4            pop a
3652   1C19             ; END RELATIONAL
3653   1C19 FD A8         sor a, b ; ||
3654   1C1B E4            pop a
3655   1C1C C0 00 00      cmp b, 0
3656   1C1F C6 4B 1C      je _while54_exit
3657   1C22             _while54_block:
3658   1C22             ;; *t++ = *prog++; 
3659   1C22 FA FF FF      lea d, [bp + -1] ; $t
3660   1C25 2A            mov b, [d]
3661   1C26 FD 79         mov g, b
3662   1C28 FD 77         inc b
3663   1C2A FA FF FF      lea d, [bp + -1] ; $t
3664   1C2D FD 43         mov [d], b
3665   1C2F FD 27         mov b, g
3666   1C31 D8            push b
3667   1C32 3B 83 33      mov d, _prog ; $prog
3668   1C35 2A            mov b, [d]
3669   1C36 FD 79         mov g, b
3670   1C38 FD 77         inc b
3671   1C3A 3B 83 33      mov d, _prog ; $prog
3672   1C3D FD 43         mov [d], b
3673   1C3F FD 27         mov b, g
3674   1C41 74            mov d, b
3675   1C42 32            mov bl, [d]
3676   1C43 A7 00         mov bh, 0
3677   1C45 E7            pop d
3678   1C46 FD 3E         mov [d], bl
3679   1C48 0A 4F 1B      jmp _while54_cond
3680   1C4B             _while54_exit:
3681   1C4B             ;; *t = '\0'; 
3682   1C4B FA FF FF      lea d, [bp + -1] ; $t
3683   1C4E 2A            mov b, [d]
3684   1C4F D8            push b
3685   1C50 26 00 00      mov b, $0
3686   1C53 E7            pop d
3687   1C54 FD 3E         mov [d], bl
3688   1C56 F9            leave
3689   1C57 09            ret
3690   1C58             
3691   1C58             get:
3692   1C58 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3693   1C5B             ; $t 
3694   1C5B 52 02 00      sub sp, 2
3695   1C5E             ;; *token = '\0'; 
3696   1C5E 3B 85 33      mov d, _token_data ; $token
3697   1C61 2D            mov b, d
3698   1C62 D8            push b
3699   1C63 26 00 00      mov b, $0
3700   1C66 E7            pop d
3701   1C67 FD 3E         mov [d], bl
3702   1C69             ;; tok = 0; 
3703   1C69 3B 7F 33      mov d, _tok ; $tok
3704   1C6C DA            push d
3705   1C6D 26 00 00      mov b, $0
3706   1C70 E7            pop d
3707   1C71 FD 43         mov [d], b
3708   1C73             ;; toktype = 0; 
3709   1C73 3B 81 33      mov d, _toktype ; $toktype
3710   1C76 DA            push d
3711   1C77 26 00 00      mov b, $0
3712   1C7A E7            pop d
3713   1C7B FD 43         mov [d], b
3714   1C7D             ;; t = token; 
3715   1C7D FA FF FF      lea d, [bp + -1] ; $t
3716   1C80 DA            push d
3717   1C81 3B 85 33      mov d, _token_data ; $token
3718   1C84 2D            mov b, d
3719   1C85 E7            pop d
3720   1C86 FD 43         mov [d], b
3721   1C88             ;; while(is_space(*prog)) prog++; 
3722   1C88             _while55_cond:
3723   1C88 3B 83 33      mov d, _prog ; $prog
3724   1C8B 2A            mov b, [d]
3725   1C8C 74            mov d, b
3726   1C8D 32            mov bl, [d]
3727   1C8E A7 00         mov bh, 0
3728   1C90 DD            push bl
3729   1C91 07 2A 0A      call is_space
3730   1C94 51 01 00      add sp, 1
3731   1C97 C0 00 00      cmp b, 0
3732   1C9A C6 AF 1C      je _while55_exit
3733   1C9D             _while55_block:
3734   1C9D             ;; prog++; 
3735   1C9D 3B 83 33      mov d, _prog ; $prog
3736   1CA0 2A            mov b, [d]
3737   1CA1 FD 79         mov g, b
3738   1CA3 FD 77         inc b
3739   1CA5 3B 83 33      mov d, _prog ; $prog
3740   1CA8 FD 43         mov [d], b
3741   1CAA FD 27         mov b, g
3742   1CAC 0A 88 1C      jmp _while55_cond
3743   1CAF             _while55_exit:
3744   1CAF             ;; if(*prog == '\0'){ 
3745   1CAF             _if56_cond:
3746   1CAF 3B 83 33      mov d, _prog ; $prog
3747   1CB2 2A            mov b, [d]
3748   1CB3 74            mov d, b
3749   1CB4 32            mov bl, [d]
3750   1CB5 A7 00         mov bh, 0
3751   1CB7             ; START RELATIONAL
3752   1CB7 D7            push a
3753   1CB8 11            mov a, b
3754   1CB9 26 00 00      mov b, $0
3755   1CBC B0            cmp a, b
3756   1CBD FD 71         seq ; ==
3757   1CBF E4            pop a
3758   1CC0             ; END RELATIONAL
3759   1CC0 C0 00 00      cmp b, 0
3760   1CC3 C6 D5 1C      je _if56_exit
3761   1CC6             _if56_true:
3762   1CC6             ;; toktype = END; 
3763   1CC6 3B 81 33      mov d, _toktype ; $toktype
3764   1CC9 DA            push d
3765   1CCA 26 06 00      mov b, 6; END
3766   1CCD E7            pop d
3767   1CCE FD 43         mov [d], b
3768   1CD0             ;; return; 
3769   1CD0 F9            leave
3770   1CD1 09            ret
3771   1CD2 0A D5 1C      jmp _if56_exit
3772   1CD5             _if56_exit:
3773   1CD5             ;; if(is_digit(*prog)){ 
3774   1CD5             _if57_cond:
3775   1CD5 3B 83 33      mov d, _prog ; $prog
3776   1CD8 2A            mov b, [d]
3777   1CD9 74            mov d, b
3778   1CDA 32            mov bl, [d]
3779   1CDB A7 00         mov bh, 0
3780   1CDD DD            push bl
3781   1CDE 07 76 0A      call is_digit
3782   1CE1 51 01 00      add sp, 1
3783   1CE4 C0 00 00      cmp b, 0
3784   1CE7 C6 42 1D      je _if57_else
3785   1CEA             _if57_true:
3786   1CEA             ;; while(is_digit(*prog)){ 
3787   1CEA             _while58_cond:
3788   1CEA 3B 83 33      mov d, _prog ; $prog
3789   1CED 2A            mov b, [d]
3790   1CEE 74            mov d, b
3791   1CEF 32            mov bl, [d]
3792   1CF0 A7 00         mov bh, 0
3793   1CF2 DD            push bl
3794   1CF3 07 76 0A      call is_digit
3795   1CF6 51 01 00      add sp, 1
3796   1CF9 C0 00 00      cmp b, 0
3797   1CFC C6 28 1D      je _while58_exit
3798   1CFF             _while58_block:
3799   1CFF             ;; *t++ = *prog++; 
3800   1CFF FA FF FF      lea d, [bp + -1] ; $t
3801   1D02 2A            mov b, [d]
3802   1D03 FD 79         mov g, b
3803   1D05 FD 77         inc b
3804   1D07 FA FF FF      lea d, [bp + -1] ; $t
3805   1D0A FD 43         mov [d], b
3806   1D0C FD 27         mov b, g
3807   1D0E D8            push b
3808   1D0F 3B 83 33      mov d, _prog ; $prog
3809   1D12 2A            mov b, [d]
3810   1D13 FD 79         mov g, b
3811   1D15 FD 77         inc b
3812   1D17 3B 83 33      mov d, _prog ; $prog
3813   1D1A FD 43         mov [d], b
3814   1D1C FD 27         mov b, g
3815   1D1E 74            mov d, b
3816   1D1F 32            mov bl, [d]
3817   1D20 A7 00         mov bh, 0
3818   1D22 E7            pop d
3819   1D23 FD 3E         mov [d], bl
3820   1D25 0A EA 1C      jmp _while58_cond
3821   1D28             _while58_exit:
3822   1D28             ;; *t = '\0'; 
3823   1D28 FA FF FF      lea d, [bp + -1] ; $t
3824   1D2B 2A            mov b, [d]
3825   1D2C D8            push b
3826   1D2D 26 00 00      mov b, $0
3827   1D30 E7            pop d
3828   1D31 FD 3E         mov [d], bl
3829   1D33             ;; toktype = INTEGER_CONST; 
3830   1D33 3B 81 33      mov d, _toktype ; $toktype
3831   1D36 DA            push d
3832   1D37 26 04 00      mov b, 4; INTEGER_CONST
3833   1D3A E7            pop d
3834   1D3B FD 43         mov [d], b
3835   1D3D             ;; return; // return to avoid *t = '\0' line at the end of function 
3836   1D3D F9            leave
3837   1D3E 09            ret
3838   1D3F 0A 1C 2A      jmp _if57_exit
3839   1D42             _if57_else:
3840   1D42             ;; if(is_alpha(*prog)){ 
3841   1D42             _if59_cond:
3842   1D42 3B 83 33      mov d, _prog ; $prog
3843   1D45 2A            mov b, [d]
3844   1D46 74            mov d, b
3845   1D47 32            mov bl, [d]
3846   1D48 A7 00         mov bh, 0
3847   1D4A DD            push bl
3848   1D4B 07 9E 0A      call is_alpha
3849   1D4E 51 01 00      add sp, 1
3850   1D51 C0 00 00      cmp b, 0
3851   1D54 C6 C1 1D      je _if59_else
3852   1D57             _if59_true:
3853   1D57             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
3854   1D57             _while60_cond:
3855   1D57 3B 83 33      mov d, _prog ; $prog
3856   1D5A 2A            mov b, [d]
3857   1D5B 74            mov d, b
3858   1D5C 32            mov bl, [d]
3859   1D5D A7 00         mov bh, 0
3860   1D5F DD            push bl
3861   1D60 07 9E 0A      call is_alpha
3862   1D63 51 01 00      add sp, 1
3863   1D66 D7            push a
3864   1D67 11            mov a, b
3865   1D68 3B 83 33      mov d, _prog ; $prog
3866   1D6B 2A            mov b, [d]
3867   1D6C 74            mov d, b
3868   1D6D 32            mov bl, [d]
3869   1D6E A7 00         mov bh, 0
3870   1D70 DD            push bl
3871   1D71 07 76 0A      call is_digit
3872   1D74 51 01 00      add sp, 1
3873   1D77 FD A8         sor a, b ; ||
3874   1D79 E4            pop a
3875   1D7A C0 00 00      cmp b, 0
3876   1D7D C6 A9 1D      je _while60_exit
3877   1D80             _while60_block:
3878   1D80             ;; *t++ = *prog++; 
3879   1D80 FA FF FF      lea d, [bp + -1] ; $t
3880   1D83 2A            mov b, [d]
3881   1D84 FD 79         mov g, b
3882   1D86 FD 77         inc b
3883   1D88 FA FF FF      lea d, [bp + -1] ; $t
3884   1D8B FD 43         mov [d], b
3885   1D8D FD 27         mov b, g
3886   1D8F D8            push b
3887   1D90 3B 83 33      mov d, _prog ; $prog
3888   1D93 2A            mov b, [d]
3889   1D94 FD 79         mov g, b
3890   1D96 FD 77         inc b
3891   1D98 3B 83 33      mov d, _prog ; $prog
3892   1D9B FD 43         mov [d], b
3893   1D9D FD 27         mov b, g
3894   1D9F 74            mov d, b
3895   1DA0 32            mov bl, [d]
3896   1DA1 A7 00         mov bh, 0
3897   1DA3 E7            pop d
3898   1DA4 FD 3E         mov [d], bl
3899   1DA6 0A 57 1D      jmp _while60_cond
3900   1DA9             _while60_exit:
3901   1DA9             ;; *t = '\0'; 
3902   1DA9 FA FF FF      lea d, [bp + -1] ; $t
3903   1DAC 2A            mov b, [d]
3904   1DAD D8            push b
3905   1DAE 26 00 00      mov b, $0
3906   1DB1 E7            pop d
3907   1DB2 FD 3E         mov [d], bl
3908   1DB4             ;; toktype = IDENTIFIER; 
3909   1DB4 3B 81 33      mov d, _toktype ; $toktype
3910   1DB7 DA            push d
3911   1DB8 26 05 00      mov b, 5; IDENTIFIER
3912   1DBB E7            pop d
3913   1DBC FD 43         mov [d], b
3914   1DBE 0A 1C 2A      jmp _if59_exit
3915   1DC1             _if59_else:
3916   1DC1             ;; if(*prog == '\"'){ 
3917   1DC1             _if61_cond:
3918   1DC1 3B 83 33      mov d, _prog ; $prog
3919   1DC4 2A            mov b, [d]
3920   1DC5 74            mov d, b
3921   1DC6 32            mov bl, [d]
3922   1DC7 A7 00         mov bh, 0
3923   1DC9             ; START RELATIONAL
3924   1DC9 D7            push a
3925   1DCA 11            mov a, b
3926   1DCB 26 22 00      mov b, $22
3927   1DCE B0            cmp a, b
3928   1DCF FD 71         seq ; ==
3929   1DD1 E4            pop a
3930   1DD2             ; END RELATIONAL
3931   1DD2 C0 00 00      cmp b, 0
3932   1DD5 C6 B0 1E      je _if61_else
3933   1DD8             _if61_true:
3934   1DD8             ;; *t++ = '\"'; 
3935   1DD8 FA FF FF      lea d, [bp + -1] ; $t
3936   1DDB 2A            mov b, [d]
3937   1DDC FD 79         mov g, b
3938   1DDE FD 77         inc b
3939   1DE0 FA FF FF      lea d, [bp + -1] ; $t
3940   1DE3 FD 43         mov [d], b
3941   1DE5 FD 27         mov b, g
3942   1DE7 D8            push b
3943   1DE8 26 22 00      mov b, $22
3944   1DEB E7            pop d
3945   1DEC FD 3E         mov [d], bl
3946   1DEE             ;; prog++; 
3947   1DEE 3B 83 33      mov d, _prog ; $prog
3948   1DF1 2A            mov b, [d]
3949   1DF2 FD 79         mov g, b
3950   1DF4 FD 77         inc b
3951   1DF6 3B 83 33      mov d, _prog ; $prog
3952   1DF9 FD 43         mov [d], b
3953   1DFB FD 27         mov b, g
3954   1DFD             ;; while(*prog != '\"' && *prog){ 
3955   1DFD             _while62_cond:
3956   1DFD 3B 83 33      mov d, _prog ; $prog
3957   1E00 2A            mov b, [d]
3958   1E01 74            mov d, b
3959   1E02 32            mov bl, [d]
3960   1E03 A7 00         mov bh, 0
3961   1E05             ; START RELATIONAL
3962   1E05 D7            push a
3963   1E06 11            mov a, b
3964   1E07 26 22 00      mov b, $22
3965   1E0A B0            cmp a, b
3966   1E0B FD 72         sneq ; !=
3967   1E0D E4            pop a
3968   1E0E             ; END RELATIONAL
3969   1E0E D7            push a
3970   1E0F 11            mov a, b
3971   1E10 3B 83 33      mov d, _prog ; $prog
3972   1E13 2A            mov b, [d]
3973   1E14 74            mov d, b
3974   1E15 32            mov bl, [d]
3975   1E16 A7 00         mov bh, 0
3976   1E18 FD A7         sand a, b ; &&
3977   1E1A E4            pop a
3978   1E1B C0 00 00      cmp b, 0
3979   1E1E C6 4A 1E      je _while62_exit
3980   1E21             _while62_block:
3981   1E21             ;; *t++ = *prog++; 
3982   1E21 FA FF FF      lea d, [bp + -1] ; $t
3983   1E24 2A            mov b, [d]
3984   1E25 FD 79         mov g, b
3985   1E27 FD 77         inc b
3986   1E29 FA FF FF      lea d, [bp + -1] ; $t
3987   1E2C FD 43         mov [d], b
3988   1E2E FD 27         mov b, g
3989   1E30 D8            push b
3990   1E31 3B 83 33      mov d, _prog ; $prog
3991   1E34 2A            mov b, [d]
3992   1E35 FD 79         mov g, b
3993   1E37 FD 77         inc b
3994   1E39 3B 83 33      mov d, _prog ; $prog
3995   1E3C FD 43         mov [d], b
3996   1E3E FD 27         mov b, g
3997   1E40 74            mov d, b
3998   1E41 32            mov bl, [d]
3999   1E42 A7 00         mov bh, 0
4000   1E44 E7            pop d
4001   1E45 FD 3E         mov [d], bl
4002   1E47 0A FD 1D      jmp _while62_cond
4003   1E4A             _while62_exit:
4004   1E4A             ;; if(*prog != '\"') error("Double quotes expected"); 
4005   1E4A             _if63_cond:
4006   1E4A 3B 83 33      mov d, _prog ; $prog
4007   1E4D 2A            mov b, [d]
4008   1E4E 74            mov d, b
4009   1E4F 32            mov bl, [d]
4010   1E50 A7 00         mov bh, 0
4011   1E52             ; START RELATIONAL
4012   1E52 D7            push a
4013   1E53 11            mov a, b
4014   1E54 26 22 00      mov b, $22
4015   1E57 B0            cmp a, b
4016   1E58 FD 72         sneq ; !=
4017   1E5A E4            pop a
4018   1E5B             ; END RELATIONAL
4019   1E5B C0 00 00      cmp b, 0
4020   1E5E C6 70 1E      je _if63_exit
4021   1E61             _if63_true:
4022   1E61             ;; error("Double quotes expected"); 
4023   1E61 26 83 3C      mov b, __s14 ; "Double quotes expected"
4024   1E64 FD AB         swp b
4025   1E66 D8            push b
4026   1E67 07 7F 2C      call error
4027   1E6A 51 02 00      add sp, 2
4028   1E6D 0A 70 1E      jmp _if63_exit
4029   1E70             _if63_exit:
4030   1E70             ;; *t++ = '\"'; 
4031   1E70 FA FF FF      lea d, [bp + -1] ; $t
4032   1E73 2A            mov b, [d]
4033   1E74 FD 79         mov g, b
4034   1E76 FD 77         inc b
4035   1E78 FA FF FF      lea d, [bp + -1] ; $t
4036   1E7B FD 43         mov [d], b
4037   1E7D FD 27         mov b, g
4038   1E7F D8            push b
4039   1E80 26 22 00      mov b, $22
4040   1E83 E7            pop d
4041   1E84 FD 3E         mov [d], bl
4042   1E86             ;; prog++; 
4043   1E86 3B 83 33      mov d, _prog ; $prog
4044   1E89 2A            mov b, [d]
4045   1E8A FD 79         mov g, b
4046   1E8C FD 77         inc b
4047   1E8E 3B 83 33      mov d, _prog ; $prog
4048   1E91 FD 43         mov [d], b
4049   1E93 FD 27         mov b, g
4050   1E95             ;; toktype = STRING_CONST; 
4051   1E95 3B 81 33      mov d, _toktype ; $toktype
4052   1E98 DA            push d
4053   1E99 26 03 00      mov b, 3; STRING_CONST
4054   1E9C E7            pop d
4055   1E9D FD 43         mov [d], b
4056   1E9F             ;; *t = '\0'; 
4057   1E9F FA FF FF      lea d, [bp + -1] ; $t
4058   1EA2 2A            mov b, [d]
4059   1EA3 D8            push b
4060   1EA4 26 00 00      mov b, $0
4061   1EA7 E7            pop d
4062   1EA8 FD 3E         mov [d], bl
4063   1EAA             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
4064   1EAA 07 29 2A      call convert_constant
4065   1EAD 0A 1C 2A      jmp _if61_exit
4066   1EB0             _if61_else:
4067   1EB0             ;; if(*prog == '#'){ 
4068   1EB0             _if64_cond:
4069   1EB0 3B 83 33      mov d, _prog ; $prog
4070   1EB3 2A            mov b, [d]
4071   1EB4 74            mov d, b
4072   1EB5 32            mov bl, [d]
4073   1EB6 A7 00         mov bh, 0
4074   1EB8             ; START RELATIONAL
4075   1EB8 D7            push a
4076   1EB9 11            mov a, b
4077   1EBA 26 23 00      mov b, $23
4078   1EBD B0            cmp a, b
4079   1EBE FD 71         seq ; ==
4080   1EC0 E4            pop a
4081   1EC1             ; END RELATIONAL
4082   1EC1 C0 00 00      cmp b, 0
4083   1EC4 C6 04 1F      je _if64_else
4084   1EC7             _if64_true:
4085   1EC7             ;; *t++ = *prog++; 
4086   1EC7 FA FF FF      lea d, [bp + -1] ; $t
4087   1ECA 2A            mov b, [d]
4088   1ECB FD 79         mov g, b
4089   1ECD FD 77         inc b
4090   1ECF FA FF FF      lea d, [bp + -1] ; $t
4091   1ED2 FD 43         mov [d], b
4092   1ED4 FD 27         mov b, g
4093   1ED6 D8            push b
4094   1ED7 3B 83 33      mov d, _prog ; $prog
4095   1EDA 2A            mov b, [d]
4096   1EDB FD 79         mov g, b
4097   1EDD FD 77         inc b
4098   1EDF 3B 83 33      mov d, _prog ; $prog
4099   1EE2 FD 43         mov [d], b
4100   1EE4 FD 27         mov b, g
4101   1EE6 74            mov d, b
4102   1EE7 32            mov bl, [d]
4103   1EE8 A7 00         mov bh, 0
4104   1EEA E7            pop d
4105   1EEB FD 3E         mov [d], bl
4106   1EED             ;; tok = HASH; 
4107   1EED 3B 7F 33      mov d, _tok ; $tok
4108   1EF0 DA            push d
4109   1EF1 26 15 00      mov b, 21; HASH
4110   1EF4 E7            pop d
4111   1EF5 FD 43         mov [d], b
4112   1EF7             ;; toktype = DELIMITER;   
4113   1EF7 3B 81 33      mov d, _toktype ; $toktype
4114   1EFA DA            push d
4115   1EFB 26 01 00      mov b, 1; DELIMITER
4116   1EFE E7            pop d
4117   1EFF FD 43         mov [d], b
4118   1F01 0A 1C 2A      jmp _if64_exit
4119   1F04             _if64_else:
4120   1F04             ;; if(*prog == '{'){ 
4121   1F04             _if65_cond:
4122   1F04 3B 83 33      mov d, _prog ; $prog
4123   1F07 2A            mov b, [d]
4124   1F08 74            mov d, b
4125   1F09 32            mov bl, [d]
4126   1F0A A7 00         mov bh, 0
4127   1F0C             ; START RELATIONAL
4128   1F0C D7            push a
4129   1F0D 11            mov a, b
4130   1F0E 26 7B 00      mov b, $7b
4131   1F11 B0            cmp a, b
4132   1F12 FD 71         seq ; ==
4133   1F14 E4            pop a
4134   1F15             ; END RELATIONAL
4135   1F15 C0 00 00      cmp b, 0
4136   1F18 C6 58 1F      je _if65_else
4137   1F1B             _if65_true:
4138   1F1B             ;; *t++ = *prog++; 
4139   1F1B FA FF FF      lea d, [bp + -1] ; $t
4140   1F1E 2A            mov b, [d]
4141   1F1F FD 79         mov g, b
4142   1F21 FD 77         inc b
4143   1F23 FA FF FF      lea d, [bp + -1] ; $t
4144   1F26 FD 43         mov [d], b
4145   1F28 FD 27         mov b, g
4146   1F2A D8            push b
4147   1F2B 3B 83 33      mov d, _prog ; $prog
4148   1F2E 2A            mov b, [d]
4149   1F2F FD 79         mov g, b
4150   1F31 FD 77         inc b
4151   1F33 3B 83 33      mov d, _prog ; $prog
4152   1F36 FD 43         mov [d], b
4153   1F38 FD 27         mov b, g
4154   1F3A 74            mov d, b
4155   1F3B 32            mov bl, [d]
4156   1F3C A7 00         mov bh, 0
4157   1F3E E7            pop d
4158   1F3F FD 3E         mov [d], bl
4159   1F41             ;; tok = OPENING_BRACE; 
4160   1F41 3B 7F 33      mov d, _tok ; $tok
4161   1F44 DA            push d
4162   1F45 26 1E 00      mov b, 30; OPENING_BRACE
4163   1F48 E7            pop d
4164   1F49 FD 43         mov [d], b
4165   1F4B             ;; toktype = DELIMITER;   
4166   1F4B 3B 81 33      mov d, _toktype ; $toktype
4167   1F4E DA            push d
4168   1F4F 26 01 00      mov b, 1; DELIMITER
4169   1F52 E7            pop d
4170   1F53 FD 43         mov [d], b
4171   1F55 0A 1C 2A      jmp _if65_exit
4172   1F58             _if65_else:
4173   1F58             ;; if(*prog == '}'){ 
4174   1F58             _if66_cond:
4175   1F58 3B 83 33      mov d, _prog ; $prog
4176   1F5B 2A            mov b, [d]
4177   1F5C 74            mov d, b
4178   1F5D 32            mov bl, [d]
4179   1F5E A7 00         mov bh, 0
4180   1F60             ; START RELATIONAL
4181   1F60 D7            push a
4182   1F61 11            mov a, b
4183   1F62 26 7D 00      mov b, $7d
4184   1F65 B0            cmp a, b
4185   1F66 FD 71         seq ; ==
4186   1F68 E4            pop a
4187   1F69             ; END RELATIONAL
4188   1F69 C0 00 00      cmp b, 0
4189   1F6C C6 AC 1F      je _if66_else
4190   1F6F             _if66_true:
4191   1F6F             ;; *t++ = *prog++; 
4192   1F6F FA FF FF      lea d, [bp + -1] ; $t
4193   1F72 2A            mov b, [d]
4194   1F73 FD 79         mov g, b
4195   1F75 FD 77         inc b
4196   1F77 FA FF FF      lea d, [bp + -1] ; $t
4197   1F7A FD 43         mov [d], b
4198   1F7C FD 27         mov b, g
4199   1F7E D8            push b
4200   1F7F 3B 83 33      mov d, _prog ; $prog
4201   1F82 2A            mov b, [d]
4202   1F83 FD 79         mov g, b
4203   1F85 FD 77         inc b
4204   1F87 3B 83 33      mov d, _prog ; $prog
4205   1F8A FD 43         mov [d], b
4206   1F8C FD 27         mov b, g
4207   1F8E 74            mov d, b
4208   1F8F 32            mov bl, [d]
4209   1F90 A7 00         mov bh, 0
4210   1F92 E7            pop d
4211   1F93 FD 3E         mov [d], bl
4212   1F95             ;; tok = CLOSING_BRACE; 
4213   1F95 3B 7F 33      mov d, _tok ; $tok
4214   1F98 DA            push d
4215   1F99 26 1F 00      mov b, 31; CLOSING_BRACE
4216   1F9C E7            pop d
4217   1F9D FD 43         mov [d], b
4218   1F9F             ;; toktype = DELIMITER;   
4219   1F9F 3B 81 33      mov d, _toktype ; $toktype
4220   1FA2 DA            push d
4221   1FA3 26 01 00      mov b, 1; DELIMITER
4222   1FA6 E7            pop d
4223   1FA7 FD 43         mov [d], b
4224   1FA9 0A 1C 2A      jmp _if66_exit
4225   1FAC             _if66_else:
4226   1FAC             ;; if(*prog == '['){ 
4227   1FAC             _if67_cond:
4228   1FAC 3B 83 33      mov d, _prog ; $prog
4229   1FAF 2A            mov b, [d]
4230   1FB0 74            mov d, b
4231   1FB1 32            mov bl, [d]
4232   1FB2 A7 00         mov bh, 0
4233   1FB4             ; START RELATIONAL
4234   1FB4 D7            push a
4235   1FB5 11            mov a, b
4236   1FB6 26 5B 00      mov b, $5b
4237   1FB9 B0            cmp a, b
4238   1FBA FD 71         seq ; ==
4239   1FBC E4            pop a
4240   1FBD             ; END RELATIONAL
4241   1FBD C0 00 00      cmp b, 0
4242   1FC0 C6 00 20      je _if67_else
4243   1FC3             _if67_true:
4244   1FC3             ;; *t++ = *prog++; 
4245   1FC3 FA FF FF      lea d, [bp + -1] ; $t
4246   1FC6 2A            mov b, [d]
4247   1FC7 FD 79         mov g, b
4248   1FC9 FD 77         inc b
4249   1FCB FA FF FF      lea d, [bp + -1] ; $t
4250   1FCE FD 43         mov [d], b
4251   1FD0 FD 27         mov b, g
4252   1FD2 D8            push b
4253   1FD3 3B 83 33      mov d, _prog ; $prog
4254   1FD6 2A            mov b, [d]
4255   1FD7 FD 79         mov g, b
4256   1FD9 FD 77         inc b
4257   1FDB 3B 83 33      mov d, _prog ; $prog
4258   1FDE FD 43         mov [d], b
4259   1FE0 FD 27         mov b, g
4260   1FE2 74            mov d, b
4261   1FE3 32            mov bl, [d]
4262   1FE4 A7 00         mov bh, 0
4263   1FE6 E7            pop d
4264   1FE7 FD 3E         mov [d], bl
4265   1FE9             ;; tok = OPENING_BRACKET; 
4266   1FE9 3B 7F 33      mov d, _tok ; $tok
4267   1FEC DA            push d
4268   1FED 26 20 00      mov b, 32; OPENING_BRACKET
4269   1FF0 E7            pop d
4270   1FF1 FD 43         mov [d], b
4271   1FF3             ;; toktype = DELIMITER;   
4272   1FF3 3B 81 33      mov d, _toktype ; $toktype
4273   1FF6 DA            push d
4274   1FF7 26 01 00      mov b, 1; DELIMITER
4275   1FFA E7            pop d
4276   1FFB FD 43         mov [d], b
4277   1FFD 0A 1C 2A      jmp _if67_exit
4278   2000             _if67_else:
4279   2000             ;; if(*prog == ']'){ 
4280   2000             _if68_cond:
4281   2000 3B 83 33      mov d, _prog ; $prog
4282   2003 2A            mov b, [d]
4283   2004 74            mov d, b
4284   2005 32            mov bl, [d]
4285   2006 A7 00         mov bh, 0
4286   2008             ; START RELATIONAL
4287   2008 D7            push a
4288   2009 11            mov a, b
4289   200A 26 5D 00      mov b, $5d
4290   200D B0            cmp a, b
4291   200E FD 71         seq ; ==
4292   2010 E4            pop a
4293   2011             ; END RELATIONAL
4294   2011 C0 00 00      cmp b, 0
4295   2014 C6 54 20      je _if68_else
4296   2017             _if68_true:
4297   2017             ;; *t++ = *prog++; 
4298   2017 FA FF FF      lea d, [bp + -1] ; $t
4299   201A 2A            mov b, [d]
4300   201B FD 79         mov g, b
4301   201D FD 77         inc b
4302   201F FA FF FF      lea d, [bp + -1] ; $t
4303   2022 FD 43         mov [d], b
4304   2024 FD 27         mov b, g
4305   2026 D8            push b
4306   2027 3B 83 33      mov d, _prog ; $prog
4307   202A 2A            mov b, [d]
4308   202B FD 79         mov g, b
4309   202D FD 77         inc b
4310   202F 3B 83 33      mov d, _prog ; $prog
4311   2032 FD 43         mov [d], b
4312   2034 FD 27         mov b, g
4313   2036 74            mov d, b
4314   2037 32            mov bl, [d]
4315   2038 A7 00         mov bh, 0
4316   203A E7            pop d
4317   203B FD 3E         mov [d], bl
4318   203D             ;; tok = CLOSING_BRACKET; 
4319   203D 3B 7F 33      mov d, _tok ; $tok
4320   2040 DA            push d
4321   2041 26 21 00      mov b, 33; CLOSING_BRACKET
4322   2044 E7            pop d
4323   2045 FD 43         mov [d], b
4324   2047             ;; toktype = DELIMITER;   
4325   2047 3B 81 33      mov d, _toktype ; $toktype
4326   204A DA            push d
4327   204B 26 01 00      mov b, 1; DELIMITER
4328   204E E7            pop d
4329   204F FD 43         mov [d], b
4330   2051 0A 1C 2A      jmp _if68_exit
4331   2054             _if68_else:
4332   2054             ;; if(*prog == '='){ 
4333   2054             _if69_cond:
4334   2054 3B 83 33      mov d, _prog ; $prog
4335   2057 2A            mov b, [d]
4336   2058 74            mov d, b
4337   2059 32            mov bl, [d]
4338   205A A7 00         mov bh, 0
4339   205C             ; START RELATIONAL
4340   205C D7            push a
4341   205D 11            mov a, b
4342   205E 26 3D 00      mov b, $3d
4343   2061 B0            cmp a, b
4344   2062 FD 71         seq ; ==
4345   2064 E4            pop a
4346   2065             ; END RELATIONAL
4347   2065 C0 00 00      cmp b, 0
4348   2068 C6 F2 20      je _if69_else
4349   206B             _if69_true:
4350   206B             ;; *t++ = *prog++; 
4351   206B FA FF FF      lea d, [bp + -1] ; $t
4352   206E 2A            mov b, [d]
4353   206F FD 79         mov g, b
4354   2071 FD 77         inc b
4355   2073 FA FF FF      lea d, [bp + -1] ; $t
4356   2076 FD 43         mov [d], b
4357   2078 FD 27         mov b, g
4358   207A D8            push b
4359   207B 3B 83 33      mov d, _prog ; $prog
4360   207E 2A            mov b, [d]
4361   207F FD 79         mov g, b
4362   2081 FD 77         inc b
4363   2083 3B 83 33      mov d, _prog ; $prog
4364   2086 FD 43         mov [d], b
4365   2088 FD 27         mov b, g
4366   208A 74            mov d, b
4367   208B 32            mov bl, [d]
4368   208C A7 00         mov bh, 0
4369   208E E7            pop d
4370   208F FD 3E         mov [d], bl
4371   2091             ;; if (*prog == '='){ 
4372   2091             _if70_cond:
4373   2091 3B 83 33      mov d, _prog ; $prog
4374   2094 2A            mov b, [d]
4375   2095 74            mov d, b
4376   2096 32            mov bl, [d]
4377   2097 A7 00         mov bh, 0
4378   2099             ; START RELATIONAL
4379   2099 D7            push a
4380   209A 11            mov a, b
4381   209B 26 3D 00      mov b, $3d
4382   209E B0            cmp a, b
4383   209F FD 71         seq ; ==
4384   20A1 E4            pop a
4385   20A2             ; END RELATIONAL
4386   20A2 C0 00 00      cmp b, 0
4387   20A5 C6 DB 20      je _if70_else
4388   20A8             _if70_true:
4389   20A8             ;; *t++ = *prog++; 
4390   20A8 FA FF FF      lea d, [bp + -1] ; $t
4391   20AB 2A            mov b, [d]
4392   20AC FD 79         mov g, b
4393   20AE FD 77         inc b
4394   20B0 FA FF FF      lea d, [bp + -1] ; $t
4395   20B3 FD 43         mov [d], b
4396   20B5 FD 27         mov b, g
4397   20B7 D8            push b
4398   20B8 3B 83 33      mov d, _prog ; $prog
4399   20BB 2A            mov b, [d]
4400   20BC FD 79         mov g, b
4401   20BE FD 77         inc b
4402   20C0 3B 83 33      mov d, _prog ; $prog
4403   20C3 FD 43         mov [d], b
4404   20C5 FD 27         mov b, g
4405   20C7 74            mov d, b
4406   20C8 32            mov bl, [d]
4407   20C9 A7 00         mov bh, 0
4408   20CB E7            pop d
4409   20CC FD 3E         mov [d], bl
4410   20CE             ;; tok = EQUAL; 
4411   20CE 3B 7F 33      mov d, _tok ; $tok
4412   20D1 DA            push d
4413   20D2 26 08 00      mov b, 8; EQUAL
4414   20D5 E7            pop d
4415   20D6 FD 43         mov [d], b
4416   20D8 0A E5 20      jmp _if70_exit
4417   20DB             _if70_else:
4418   20DB             ;; tok = ASSIGNMENT; 
4419   20DB 3B 7F 33      mov d, _tok ; $tok
4420   20DE DA            push d
4421   20DF 26 11 00      mov b, 17; ASSIGNMENT
4422   20E2 E7            pop d
4423   20E3 FD 43         mov [d], b
4424   20E5             _if70_exit:
4425   20E5             ;; toktype = DELIMITER;   
4426   20E5 3B 81 33      mov d, _toktype ; $toktype
4427   20E8 DA            push d
4428   20E9 26 01 00      mov b, 1; DELIMITER
4429   20EC E7            pop d
4430   20ED FD 43         mov [d], b
4431   20EF 0A 1C 2A      jmp _if69_exit
4432   20F2             _if69_else:
4433   20F2             ;; if(*prog == '&'){ 
4434   20F2             _if71_cond:
4435   20F2 3B 83 33      mov d, _prog ; $prog
4436   20F5 2A            mov b, [d]
4437   20F6 74            mov d, b
4438   20F7 32            mov bl, [d]
4439   20F8 A7 00         mov bh, 0
4440   20FA             ; START RELATIONAL
4441   20FA D7            push a
4442   20FB 11            mov a, b
4443   20FC 26 26 00      mov b, $26
4444   20FF B0            cmp a, b
4445   2100 FD 71         seq ; ==
4446   2102 E4            pop a
4447   2103             ; END RELATIONAL
4448   2103 C0 00 00      cmp b, 0
4449   2106 C6 90 21      je _if71_else
4450   2109             _if71_true:
4451   2109             ;; *t++ = *prog++; 
4452   2109 FA FF FF      lea d, [bp + -1] ; $t
4453   210C 2A            mov b, [d]
4454   210D FD 79         mov g, b
4455   210F FD 77         inc b
4456   2111 FA FF FF      lea d, [bp + -1] ; $t
4457   2114 FD 43         mov [d], b
4458   2116 FD 27         mov b, g
4459   2118 D8            push b
4460   2119 3B 83 33      mov d, _prog ; $prog
4461   211C 2A            mov b, [d]
4462   211D FD 79         mov g, b
4463   211F FD 77         inc b
4464   2121 3B 83 33      mov d, _prog ; $prog
4465   2124 FD 43         mov [d], b
4466   2126 FD 27         mov b, g
4467   2128 74            mov d, b
4468   2129 32            mov bl, [d]
4469   212A A7 00         mov bh, 0
4470   212C E7            pop d
4471   212D FD 3E         mov [d], bl
4472   212F             ;; if(*prog == '&'){ 
4473   212F             _if72_cond:
4474   212F 3B 83 33      mov d, _prog ; $prog
4475   2132 2A            mov b, [d]
4476   2133 74            mov d, b
4477   2134 32            mov bl, [d]
4478   2135 A7 00         mov bh, 0
4479   2137             ; START RELATIONAL
4480   2137 D7            push a
4481   2138 11            mov a, b
4482   2139 26 26 00      mov b, $26
4483   213C B0            cmp a, b
4484   213D FD 71         seq ; ==
4485   213F E4            pop a
4486   2140             ; END RELATIONAL
4487   2140 C0 00 00      cmp b, 0
4488   2143 C6 79 21      je _if72_else
4489   2146             _if72_true:
4490   2146             ;; *t++ = *prog++; 
4491   2146 FA FF FF      lea d, [bp + -1] ; $t
4492   2149 2A            mov b, [d]
4493   214A FD 79         mov g, b
4494   214C FD 77         inc b
4495   214E FA FF FF      lea d, [bp + -1] ; $t
4496   2151 FD 43         mov [d], b
4497   2153 FD 27         mov b, g
4498   2155 D8            push b
4499   2156 3B 83 33      mov d, _prog ; $prog
4500   2159 2A            mov b, [d]
4501   215A FD 79         mov g, b
4502   215C FD 77         inc b
4503   215E 3B 83 33      mov d, _prog ; $prog
4504   2161 FD 43         mov [d], b
4505   2163 FD 27         mov b, g
4506   2165 74            mov d, b
4507   2166 32            mov bl, [d]
4508   2167 A7 00         mov bh, 0
4509   2169 E7            pop d
4510   216A FD 3E         mov [d], bl
4511   216C             ;; tok = LOGICAL_AND; 
4512   216C 3B 7F 33      mov d, _tok ; $tok
4513   216F DA            push d
4514   2170 26 0E 00      mov b, 14; LOGICAL_AND
4515   2173 E7            pop d
4516   2174 FD 43         mov [d], b
4517   2176 0A 83 21      jmp _if72_exit
4518   2179             _if72_else:
4519   2179             ;; tok = AMPERSAND; 
4520   2179 3B 7F 33      mov d, _tok ; $tok
4521   217C DA            push d
4522   217D 26 16 00      mov b, 22; AMPERSAND
4523   2180 E7            pop d
4524   2181 FD 43         mov [d], b
4525   2183             _if72_exit:
4526   2183             ;; toktype = DELIMITER;   
4527   2183 3B 81 33      mov d, _toktype ; $toktype
4528   2186 DA            push d
4529   2187 26 01 00      mov b, 1; DELIMITER
4530   218A E7            pop d
4531   218B FD 43         mov [d], b
4532   218D 0A 1C 2A      jmp _if71_exit
4533   2190             _if71_else:
4534   2190             ;; if(*prog == '|'){ 
4535   2190             _if73_cond:
4536   2190 3B 83 33      mov d, _prog ; $prog
4537   2193 2A            mov b, [d]
4538   2194 74            mov d, b
4539   2195 32            mov bl, [d]
4540   2196 A7 00         mov bh, 0
4541   2198             ; START RELATIONAL
4542   2198 D7            push a
4543   2199 11            mov a, b
4544   219A 26 7C 00      mov b, $7c
4545   219D B0            cmp a, b
4546   219E FD 71         seq ; ==
4547   21A0 E4            pop a
4548   21A1             ; END RELATIONAL
4549   21A1 C0 00 00      cmp b, 0
4550   21A4 C6 2E 22      je _if73_else
4551   21A7             _if73_true:
4552   21A7             ;; *t++ = *prog++; 
4553   21A7 FA FF FF      lea d, [bp + -1] ; $t
4554   21AA 2A            mov b, [d]
4555   21AB FD 79         mov g, b
4556   21AD FD 77         inc b
4557   21AF FA FF FF      lea d, [bp + -1] ; $t
4558   21B2 FD 43         mov [d], b
4559   21B4 FD 27         mov b, g
4560   21B6 D8            push b
4561   21B7 3B 83 33      mov d, _prog ; $prog
4562   21BA 2A            mov b, [d]
4563   21BB FD 79         mov g, b
4564   21BD FD 77         inc b
4565   21BF 3B 83 33      mov d, _prog ; $prog
4566   21C2 FD 43         mov [d], b
4567   21C4 FD 27         mov b, g
4568   21C6 74            mov d, b
4569   21C7 32            mov bl, [d]
4570   21C8 A7 00         mov bh, 0
4571   21CA E7            pop d
4572   21CB FD 3E         mov [d], bl
4573   21CD             ;; if (*prog == '|'){ 
4574   21CD             _if74_cond:
4575   21CD 3B 83 33      mov d, _prog ; $prog
4576   21D0 2A            mov b, [d]
4577   21D1 74            mov d, b
4578   21D2 32            mov bl, [d]
4579   21D3 A7 00         mov bh, 0
4580   21D5             ; START RELATIONAL
4581   21D5 D7            push a
4582   21D6 11            mov a, b
4583   21D7 26 7C 00      mov b, $7c
4584   21DA B0            cmp a, b
4585   21DB FD 71         seq ; ==
4586   21DD E4            pop a
4587   21DE             ; END RELATIONAL
4588   21DE C0 00 00      cmp b, 0
4589   21E1 C6 17 22      je _if74_else
4590   21E4             _if74_true:
4591   21E4             ;; *t++ = *prog++; 
4592   21E4 FA FF FF      lea d, [bp + -1] ; $t
4593   21E7 2A            mov b, [d]
4594   21E8 FD 79         mov g, b
4595   21EA FD 77         inc b
4596   21EC FA FF FF      lea d, [bp + -1] ; $t
4597   21EF FD 43         mov [d], b
4598   21F1 FD 27         mov b, g
4599   21F3 D8            push b
4600   21F4 3B 83 33      mov d, _prog ; $prog
4601   21F7 2A            mov b, [d]
4602   21F8 FD 79         mov g, b
4603   21FA FD 77         inc b
4604   21FC 3B 83 33      mov d, _prog ; $prog
4605   21FF FD 43         mov [d], b
4606   2201 FD 27         mov b, g
4607   2203 74            mov d, b
4608   2204 32            mov bl, [d]
4609   2205 A7 00         mov bh, 0
4610   2207 E7            pop d
4611   2208 FD 3E         mov [d], bl
4612   220A             ;; tok = LOGICAL_OR; 
4613   220A 3B 7F 33      mov d, _tok ; $tok
4614   220D DA            push d
4615   220E 26 0F 00      mov b, 15; LOGICAL_OR
4616   2211 E7            pop d
4617   2212 FD 43         mov [d], b
4618   2214 0A 21 22      jmp _if74_exit
4619   2217             _if74_else:
4620   2217             ;; tok = BITWISE_OR; 
4621   2217 3B 7F 33      mov d, _tok ; $tok
4622   221A DA            push d
4623   221B 26 18 00      mov b, 24; BITWISE_OR
4624   221E E7            pop d
4625   221F FD 43         mov [d], b
4626   2221             _if74_exit:
4627   2221             ;; toktype = DELIMITER;   
4628   2221 3B 81 33      mov d, _toktype ; $toktype
4629   2224 DA            push d
4630   2225 26 01 00      mov b, 1; DELIMITER
4631   2228 E7            pop d
4632   2229 FD 43         mov [d], b
4633   222B 0A 1C 2A      jmp _if73_exit
4634   222E             _if73_else:
4635   222E             ;; if(*prog == '~'){ 
4636   222E             _if75_cond:
4637   222E 3B 83 33      mov d, _prog ; $prog
4638   2231 2A            mov b, [d]
4639   2232 74            mov d, b
4640   2233 32            mov bl, [d]
4641   2234 A7 00         mov bh, 0
4642   2236             ; START RELATIONAL
4643   2236 D7            push a
4644   2237 11            mov a, b
4645   2238 26 7E 00      mov b, $7e
4646   223B B0            cmp a, b
4647   223C FD 71         seq ; ==
4648   223E E4            pop a
4649   223F             ; END RELATIONAL
4650   223F C0 00 00      cmp b, 0
4651   2242 C6 82 22      je _if75_else
4652   2245             _if75_true:
4653   2245             ;; *t++ = *prog++; 
4654   2245 FA FF FF      lea d, [bp + -1] ; $t
4655   2248 2A            mov b, [d]
4656   2249 FD 79         mov g, b
4657   224B FD 77         inc b
4658   224D FA FF FF      lea d, [bp + -1] ; $t
4659   2250 FD 43         mov [d], b
4660   2252 FD 27         mov b, g
4661   2254 D8            push b
4662   2255 3B 83 33      mov d, _prog ; $prog
4663   2258 2A            mov b, [d]
4664   2259 FD 79         mov g, b
4665   225B FD 77         inc b
4666   225D 3B 83 33      mov d, _prog ; $prog
4667   2260 FD 43         mov [d], b
4668   2262 FD 27         mov b, g
4669   2264 74            mov d, b
4670   2265 32            mov bl, [d]
4671   2266 A7 00         mov bh, 0
4672   2268 E7            pop d
4673   2269 FD 3E         mov [d], bl
4674   226B             ;; tok = BITWISE_NOT; 
4675   226B 3B 7F 33      mov d, _tok ; $tok
4676   226E DA            push d
4677   226F 26 19 00      mov b, 25; BITWISE_NOT
4678   2272 E7            pop d
4679   2273 FD 43         mov [d], b
4680   2275             ;; toktype = DELIMITER;   
4681   2275 3B 81 33      mov d, _toktype ; $toktype
4682   2278 DA            push d
4683   2279 26 01 00      mov b, 1; DELIMITER
4684   227C E7            pop d
4685   227D FD 43         mov [d], b
4686   227F 0A 1C 2A      jmp _if75_exit
4687   2282             _if75_else:
4688   2282             ;; if(*prog == '<'){ 
4689   2282             _if76_cond:
4690   2282 3B 83 33      mov d, _prog ; $prog
4691   2285 2A            mov b, [d]
4692   2286 74            mov d, b
4693   2287 32            mov bl, [d]
4694   2288 A7 00         mov bh, 0
4695   228A             ; START RELATIONAL
4696   228A D7            push a
4697   228B 11            mov a, b
4698   228C 26 3C 00      mov b, $3c
4699   228F B0            cmp a, b
4700   2290 FD 71         seq ; ==
4701   2292 E4            pop a
4702   2293             ; END RELATIONAL
4703   2293 C0 00 00      cmp b, 0
4704   2296 C6 6A 23      je _if76_else
4705   2299             _if76_true:
4706   2299             ;; *t++ = *prog++; 
4707   2299 FA FF FF      lea d, [bp + -1] ; $t
4708   229C 2A            mov b, [d]
4709   229D FD 79         mov g, b
4710   229F FD 77         inc b
4711   22A1 FA FF FF      lea d, [bp + -1] ; $t
4712   22A4 FD 43         mov [d], b
4713   22A6 FD 27         mov b, g
4714   22A8 D8            push b
4715   22A9 3B 83 33      mov d, _prog ; $prog
4716   22AC 2A            mov b, [d]
4717   22AD FD 79         mov g, b
4718   22AF FD 77         inc b
4719   22B1 3B 83 33      mov d, _prog ; $prog
4720   22B4 FD 43         mov [d], b
4721   22B6 FD 27         mov b, g
4722   22B8 74            mov d, b
4723   22B9 32            mov bl, [d]
4724   22BA A7 00         mov bh, 0
4725   22BC E7            pop d
4726   22BD FD 3E         mov [d], bl
4727   22BF             ;; if (*prog == '='){ 
4728   22BF             _if77_cond:
4729   22BF 3B 83 33      mov d, _prog ; $prog
4730   22C2 2A            mov b, [d]
4731   22C3 74            mov d, b
4732   22C4 32            mov bl, [d]
4733   22C5 A7 00         mov bh, 0
4734   22C7             ; START RELATIONAL
4735   22C7 D7            push a
4736   22C8 11            mov a, b
4737   22C9 26 3D 00      mov b, $3d
4738   22CC B0            cmp a, b
4739   22CD FD 71         seq ; ==
4740   22CF E4            pop a
4741   22D0             ; END RELATIONAL
4742   22D0 C0 00 00      cmp b, 0
4743   22D3 C6 09 23      je _if77_else
4744   22D6             _if77_true:
4745   22D6             ;; *t++ = *prog++; 
4746   22D6 FA FF FF      lea d, [bp + -1] ; $t
4747   22D9 2A            mov b, [d]
4748   22DA FD 79         mov g, b
4749   22DC FD 77         inc b
4750   22DE FA FF FF      lea d, [bp + -1] ; $t
4751   22E1 FD 43         mov [d], b
4752   22E3 FD 27         mov b, g
4753   22E5 D8            push b
4754   22E6 3B 83 33      mov d, _prog ; $prog
4755   22E9 2A            mov b, [d]
4756   22EA FD 79         mov g, b
4757   22EC FD 77         inc b
4758   22EE 3B 83 33      mov d, _prog ; $prog
4759   22F1 FD 43         mov [d], b
4760   22F3 FD 27         mov b, g
4761   22F5 74            mov d, b
4762   22F6 32            mov bl, [d]
4763   22F7 A7 00         mov bh, 0
4764   22F9 E7            pop d
4765   22FA FD 3E         mov [d], bl
4766   22FC             ;; tok = LESS_THAN_OR_EQUAL; 
4767   22FC 3B 7F 33      mov d, _tok ; $tok
4768   22FF DA            push d
4769   2300 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL
4770   2303 E7            pop d
4771   2304 FD 43         mov [d], b
4772   2306 0A 5D 23      jmp _if77_exit
4773   2309             _if77_else:
4774   2309             ;; if (*prog == '<'){ 
4775   2309             _if78_cond:
4776   2309 3B 83 33      mov d, _prog ; $prog
4777   230C 2A            mov b, [d]
4778   230D 74            mov d, b
4779   230E 32            mov bl, [d]
4780   230F A7 00         mov bh, 0
4781   2311             ; START RELATIONAL
4782   2311 D7            push a
4783   2312 11            mov a, b
4784   2313 26 3C 00      mov b, $3c
4785   2316 B0            cmp a, b
4786   2317 FD 71         seq ; ==
4787   2319 E4            pop a
4788   231A             ; END RELATIONAL
4789   231A C0 00 00      cmp b, 0
4790   231D C6 53 23      je _if78_else
4791   2320             _if78_true:
4792   2320             ;; *t++ = *prog++; 
4793   2320 FA FF FF      lea d, [bp + -1] ; $t
4794   2323 2A            mov b, [d]
4795   2324 FD 79         mov g, b
4796   2326 FD 77         inc b
4797   2328 FA FF FF      lea d, [bp + -1] ; $t
4798   232B FD 43         mov [d], b
4799   232D FD 27         mov b, g
4800   232F D8            push b
4801   2330 3B 83 33      mov d, _prog ; $prog
4802   2333 2A            mov b, [d]
4803   2334 FD 79         mov g, b
4804   2336 FD 77         inc b
4805   2338 3B 83 33      mov d, _prog ; $prog
4806   233B FD 43         mov [d], b
4807   233D FD 27         mov b, g
4808   233F 74            mov d, b
4809   2340 32            mov bl, [d]
4810   2341 A7 00         mov bh, 0
4811   2343 E7            pop d
4812   2344 FD 3E         mov [d], bl
4813   2346             ;; tok = BITWISE_SHL; 
4814   2346 3B 7F 33      mov d, _tok ; $tok
4815   2349 DA            push d
4816   234A 26 1A 00      mov b, 26; BITWISE_SHL
4817   234D E7            pop d
4818   234E FD 43         mov [d], b
4819   2350 0A 5D 23      jmp _if78_exit
4820   2353             _if78_else:
4821   2353             ;; tok = LESS_THAN; 
4822   2353 3B 7F 33      mov d, _tok ; $tok
4823   2356 DA            push d
4824   2357 26 0A 00      mov b, 10; LESS_THAN
4825   235A E7            pop d
4826   235B FD 43         mov [d], b
4827   235D             _if78_exit:
4828   235D             _if77_exit:
4829   235D             ;; toktype = DELIMITER;   
4830   235D 3B 81 33      mov d, _toktype ; $toktype
4831   2360 DA            push d
4832   2361 26 01 00      mov b, 1; DELIMITER
4833   2364 E7            pop d
4834   2365 FD 43         mov [d], b
4835   2367 0A 1C 2A      jmp _if76_exit
4836   236A             _if76_else:
4837   236A             ;; if(*prog == '>'){ 
4838   236A             _if79_cond:
4839   236A 3B 83 33      mov d, _prog ; $prog
4840   236D 2A            mov b, [d]
4841   236E 74            mov d, b
4842   236F 32            mov bl, [d]
4843   2370 A7 00         mov bh, 0
4844   2372             ; START RELATIONAL
4845   2372 D7            push a
4846   2373 11            mov a, b
4847   2374 26 3E 00      mov b, $3e
4848   2377 B0            cmp a, b
4849   2378 FD 71         seq ; ==
4850   237A E4            pop a
4851   237B             ; END RELATIONAL
4852   237B C0 00 00      cmp b, 0
4853   237E C6 52 24      je _if79_else
4854   2381             _if79_true:
4855   2381             ;; *t++ = *prog++; 
4856   2381 FA FF FF      lea d, [bp + -1] ; $t
4857   2384 2A            mov b, [d]
4858   2385 FD 79         mov g, b
4859   2387 FD 77         inc b
4860   2389 FA FF FF      lea d, [bp + -1] ; $t
4861   238C FD 43         mov [d], b
4862   238E FD 27         mov b, g
4863   2390 D8            push b
4864   2391 3B 83 33      mov d, _prog ; $prog
4865   2394 2A            mov b, [d]
4866   2395 FD 79         mov g, b
4867   2397 FD 77         inc b
4868   2399 3B 83 33      mov d, _prog ; $prog
4869   239C FD 43         mov [d], b
4870   239E FD 27         mov b, g
4871   23A0 74            mov d, b
4872   23A1 32            mov bl, [d]
4873   23A2 A7 00         mov bh, 0
4874   23A4 E7            pop d
4875   23A5 FD 3E         mov [d], bl
4876   23A7             ;; if (*prog == '='){ 
4877   23A7             _if80_cond:
4878   23A7 3B 83 33      mov d, _prog ; $prog
4879   23AA 2A            mov b, [d]
4880   23AB 74            mov d, b
4881   23AC 32            mov bl, [d]
4882   23AD A7 00         mov bh, 0
4883   23AF             ; START RELATIONAL
4884   23AF D7            push a
4885   23B0 11            mov a, b
4886   23B1 26 3D 00      mov b, $3d
4887   23B4 B0            cmp a, b
4888   23B5 FD 71         seq ; ==
4889   23B7 E4            pop a
4890   23B8             ; END RELATIONAL
4891   23B8 C0 00 00      cmp b, 0
4892   23BB C6 F1 23      je _if80_else
4893   23BE             _if80_true:
4894   23BE             ;; *t++ = *prog++; 
4895   23BE FA FF FF      lea d, [bp + -1] ; $t
4896   23C1 2A            mov b, [d]
4897   23C2 FD 79         mov g, b
4898   23C4 FD 77         inc b
4899   23C6 FA FF FF      lea d, [bp + -1] ; $t
4900   23C9 FD 43         mov [d], b
4901   23CB FD 27         mov b, g
4902   23CD D8            push b
4903   23CE 3B 83 33      mov d, _prog ; $prog
4904   23D1 2A            mov b, [d]
4905   23D2 FD 79         mov g, b
4906   23D4 FD 77         inc b
4907   23D6 3B 83 33      mov d, _prog ; $prog
4908   23D9 FD 43         mov [d], b
4909   23DB FD 27         mov b, g
4910   23DD 74            mov d, b
4911   23DE 32            mov bl, [d]
4912   23DF A7 00         mov bh, 0
4913   23E1 E7            pop d
4914   23E2 FD 3E         mov [d], bl
4915   23E4             ;; tok = GREATER_THAN_OR_EQUAL; 
4916   23E4 3B 7F 33      mov d, _tok ; $tok
4917   23E7 DA            push d
4918   23E8 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL
4919   23EB E7            pop d
4920   23EC FD 43         mov [d], b
4921   23EE 0A 45 24      jmp _if80_exit
4922   23F1             _if80_else:
4923   23F1             ;; if (*prog == '>'){ 
4924   23F1             _if81_cond:
4925   23F1 3B 83 33      mov d, _prog ; $prog
4926   23F4 2A            mov b, [d]
4927   23F5 74            mov d, b
4928   23F6 32            mov bl, [d]
4929   23F7 A7 00         mov bh, 0
4930   23F9             ; START RELATIONAL
4931   23F9 D7            push a
4932   23FA 11            mov a, b
4933   23FB 26 3E 00      mov b, $3e
4934   23FE B0            cmp a, b
4935   23FF FD 71         seq ; ==
4936   2401 E4            pop a
4937   2402             ; END RELATIONAL
4938   2402 C0 00 00      cmp b, 0
4939   2405 C6 3B 24      je _if81_else
4940   2408             _if81_true:
4941   2408             ;; *t++ = *prog++; 
4942   2408 FA FF FF      lea d, [bp + -1] ; $t
4943   240B 2A            mov b, [d]
4944   240C FD 79         mov g, b
4945   240E FD 77         inc b
4946   2410 FA FF FF      lea d, [bp + -1] ; $t
4947   2413 FD 43         mov [d], b
4948   2415 FD 27         mov b, g
4949   2417 D8            push b
4950   2418 3B 83 33      mov d, _prog ; $prog
4951   241B 2A            mov b, [d]
4952   241C FD 79         mov g, b
4953   241E FD 77         inc b
4954   2420 3B 83 33      mov d, _prog ; $prog
4955   2423 FD 43         mov [d], b
4956   2425 FD 27         mov b, g
4957   2427 74            mov d, b
4958   2428 32            mov bl, [d]
4959   2429 A7 00         mov bh, 0
4960   242B E7            pop d
4961   242C FD 3E         mov [d], bl
4962   242E             ;; tok = BITWISE_SHR; 
4963   242E 3B 7F 33      mov d, _tok ; $tok
4964   2431 DA            push d
4965   2432 26 1B 00      mov b, 27; BITWISE_SHR
4966   2435 E7            pop d
4967   2436 FD 43         mov [d], b
4968   2438 0A 45 24      jmp _if81_exit
4969   243B             _if81_else:
4970   243B             ;; tok = GREATER_THAN; 
4971   243B 3B 7F 33      mov d, _tok ; $tok
4972   243E DA            push d
4973   243F 26 0C 00      mov b, 12; GREATER_THAN
4974   2442 E7            pop d
4975   2443 FD 43         mov [d], b
4976   2445             _if81_exit:
4977   2445             _if80_exit:
4978   2445             ;; toktype = DELIMITER;   
4979   2445 3B 81 33      mov d, _toktype ; $toktype
4980   2448 DA            push d
4981   2449 26 01 00      mov b, 1; DELIMITER
4982   244C E7            pop d
4983   244D FD 43         mov [d], b
4984   244F 0A 1C 2A      jmp _if79_exit
4985   2452             _if79_else:
4986   2452             ;; if(*prog == '!'){ 
4987   2452             _if82_cond:
4988   2452 3B 83 33      mov d, _prog ; $prog
4989   2455 2A            mov b, [d]
4990   2456 74            mov d, b
4991   2457 32            mov bl, [d]
4992   2458 A7 00         mov bh, 0
4993   245A             ; START RELATIONAL
4994   245A D7            push a
4995   245B 11            mov a, b
4996   245C 26 21 00      mov b, $21
4997   245F B0            cmp a, b
4998   2460 FD 71         seq ; ==
4999   2462 E4            pop a
5000   2463             ; END RELATIONAL
5001   2463 C0 00 00      cmp b, 0
5002   2466 C6 F0 24      je _if82_else
5003   2469             _if82_true:
5004   2469             ;; *t++ = *prog++; 
5005   2469 FA FF FF      lea d, [bp + -1] ; $t
5006   246C 2A            mov b, [d]
5007   246D FD 79         mov g, b
5008   246F FD 77         inc b
5009   2471 FA FF FF      lea d, [bp + -1] ; $t
5010   2474 FD 43         mov [d], b
5011   2476 FD 27         mov b, g
5012   2478 D8            push b
5013   2479 3B 83 33      mov d, _prog ; $prog
5014   247C 2A            mov b, [d]
5015   247D FD 79         mov g, b
5016   247F FD 77         inc b
5017   2481 3B 83 33      mov d, _prog ; $prog
5018   2484 FD 43         mov [d], b
5019   2486 FD 27         mov b, g
5020   2488 74            mov d, b
5021   2489 32            mov bl, [d]
5022   248A A7 00         mov bh, 0
5023   248C E7            pop d
5024   248D FD 3E         mov [d], bl
5025   248F             ;; if(*prog == '='){ 
5026   248F             _if83_cond:
5027   248F 3B 83 33      mov d, _prog ; $prog
5028   2492 2A            mov b, [d]
5029   2493 74            mov d, b
5030   2494 32            mov bl, [d]
5031   2495 A7 00         mov bh, 0
5032   2497             ; START RELATIONAL
5033   2497 D7            push a
5034   2498 11            mov a, b
5035   2499 26 3D 00      mov b, $3d
5036   249C B0            cmp a, b
5037   249D FD 71         seq ; ==
5038   249F E4            pop a
5039   24A0             ; END RELATIONAL
5040   24A0 C0 00 00      cmp b, 0
5041   24A3 C6 D9 24      je _if83_else
5042   24A6             _if83_true:
5043   24A6             ;; *t++ = *prog++; 
5044   24A6 FA FF FF      lea d, [bp + -1] ; $t
5045   24A9 2A            mov b, [d]
5046   24AA FD 79         mov g, b
5047   24AC FD 77         inc b
5048   24AE FA FF FF      lea d, [bp + -1] ; $t
5049   24B1 FD 43         mov [d], b
5050   24B3 FD 27         mov b, g
5051   24B5 D8            push b
5052   24B6 3B 83 33      mov d, _prog ; $prog
5053   24B9 2A            mov b, [d]
5054   24BA FD 79         mov g, b
5055   24BC FD 77         inc b
5056   24BE 3B 83 33      mov d, _prog ; $prog
5057   24C1 FD 43         mov [d], b
5058   24C3 FD 27         mov b, g
5059   24C5 74            mov d, b
5060   24C6 32            mov bl, [d]
5061   24C7 A7 00         mov bh, 0
5062   24C9 E7            pop d
5063   24CA FD 3E         mov [d], bl
5064   24CC             ;; tok = NOT_EQUAL; 
5065   24CC 3B 7F 33      mov d, _tok ; $tok
5066   24CF DA            push d
5067   24D0 26 09 00      mov b, 9; NOT_EQUAL
5068   24D3 E7            pop d
5069   24D4 FD 43         mov [d], b
5070   24D6 0A E3 24      jmp _if83_exit
5071   24D9             _if83_else:
5072   24D9             ;; tok = LOGICAL_NOT; 
5073   24D9 3B 7F 33      mov d, _tok ; $tok
5074   24DC DA            push d
5075   24DD 26 10 00      mov b, 16; LOGICAL_NOT
5076   24E0 E7            pop d
5077   24E1 FD 43         mov [d], b
5078   24E3             _if83_exit:
5079   24E3             ;; toktype = DELIMITER;   
5080   24E3 3B 81 33      mov d, _toktype ; $toktype
5081   24E6 DA            push d
5082   24E7 26 01 00      mov b, 1; DELIMITER
5083   24EA E7            pop d
5084   24EB FD 43         mov [d], b
5085   24ED 0A 1C 2A      jmp _if82_exit
5086   24F0             _if82_else:
5087   24F0             ;; if(*prog == '+'){ 
5088   24F0             _if84_cond:
5089   24F0 3B 83 33      mov d, _prog ; $prog
5090   24F3 2A            mov b, [d]
5091   24F4 74            mov d, b
5092   24F5 32            mov bl, [d]
5093   24F6 A7 00         mov bh, 0
5094   24F8             ; START RELATIONAL
5095   24F8 D7            push a
5096   24F9 11            mov a, b
5097   24FA 26 2B 00      mov b, $2b
5098   24FD B0            cmp a, b
5099   24FE FD 71         seq ; ==
5100   2500 E4            pop a
5101   2501             ; END RELATIONAL
5102   2501 C0 00 00      cmp b, 0
5103   2504 C6 8E 25      je _if84_else
5104   2507             _if84_true:
5105   2507             ;; *t++ = *prog++; 
5106   2507 FA FF FF      lea d, [bp + -1] ; $t
5107   250A 2A            mov b, [d]
5108   250B FD 79         mov g, b
5109   250D FD 77         inc b
5110   250F FA FF FF      lea d, [bp + -1] ; $t
5111   2512 FD 43         mov [d], b
5112   2514 FD 27         mov b, g
5113   2516 D8            push b
5114   2517 3B 83 33      mov d, _prog ; $prog
5115   251A 2A            mov b, [d]
5116   251B FD 79         mov g, b
5117   251D FD 77         inc b
5118   251F 3B 83 33      mov d, _prog ; $prog
5119   2522 FD 43         mov [d], b
5120   2524 FD 27         mov b, g
5121   2526 74            mov d, b
5122   2527 32            mov bl, [d]
5123   2528 A7 00         mov bh, 0
5124   252A E7            pop d
5125   252B FD 3E         mov [d], bl
5126   252D             ;; if(*prog == '+'){ 
5127   252D             _if85_cond:
5128   252D 3B 83 33      mov d, _prog ; $prog
5129   2530 2A            mov b, [d]
5130   2531 74            mov d, b
5131   2532 32            mov bl, [d]
5132   2533 A7 00         mov bh, 0
5133   2535             ; START RELATIONAL
5134   2535 D7            push a
5135   2536 11            mov a, b
5136   2537 26 2B 00      mov b, $2b
5137   253A B0            cmp a, b
5138   253B FD 71         seq ; ==
5139   253D E4            pop a
5140   253E             ; END RELATIONAL
5141   253E C0 00 00      cmp b, 0
5142   2541 C6 77 25      je _if85_else
5143   2544             _if85_true:
5144   2544             ;; *t++ = *prog++; 
5145   2544 FA FF FF      lea d, [bp + -1] ; $t
5146   2547 2A            mov b, [d]
5147   2548 FD 79         mov g, b
5148   254A FD 77         inc b
5149   254C FA FF FF      lea d, [bp + -1] ; $t
5150   254F FD 43         mov [d], b
5151   2551 FD 27         mov b, g
5152   2553 D8            push b
5153   2554 3B 83 33      mov d, _prog ; $prog
5154   2557 2A            mov b, [d]
5155   2558 FD 79         mov g, b
5156   255A FD 77         inc b
5157   255C 3B 83 33      mov d, _prog ; $prog
5158   255F FD 43         mov [d], b
5159   2561 FD 27         mov b, g
5160   2563 74            mov d, b
5161   2564 32            mov bl, [d]
5162   2565 A7 00         mov bh, 0
5163   2567 E7            pop d
5164   2568 FD 3E         mov [d], bl
5165   256A             ;; tok = INCREMENT; 
5166   256A 3B 7F 33      mov d, _tok ; $tok
5167   256D DA            push d
5168   256E 26 05 00      mov b, 5; INCREMENT
5169   2571 E7            pop d
5170   2572 FD 43         mov [d], b
5171   2574 0A 81 25      jmp _if85_exit
5172   2577             _if85_else:
5173   2577             ;; tok = PLUS; 
5174   2577 3B 7F 33      mov d, _tok ; $tok
5175   257A DA            push d
5176   257B 26 01 00      mov b, 1; PLUS
5177   257E E7            pop d
5178   257F FD 43         mov [d], b
5179   2581             _if85_exit:
5180   2581             ;; toktype = DELIMITER;   
5181   2581 3B 81 33      mov d, _toktype ; $toktype
5182   2584 DA            push d
5183   2585 26 01 00      mov b, 1; DELIMITER
5184   2588 E7            pop d
5185   2589 FD 43         mov [d], b
5186   258B 0A 1C 2A      jmp _if84_exit
5187   258E             _if84_else:
5188   258E             ;; if(*prog == '-'){ 
5189   258E             _if86_cond:
5190   258E 3B 83 33      mov d, _prog ; $prog
5191   2591 2A            mov b, [d]
5192   2592 74            mov d, b
5193   2593 32            mov bl, [d]
5194   2594 A7 00         mov bh, 0
5195   2596             ; START RELATIONAL
5196   2596 D7            push a
5197   2597 11            mov a, b
5198   2598 26 2D 00      mov b, $2d
5199   259B B0            cmp a, b
5200   259C FD 71         seq ; ==
5201   259E E4            pop a
5202   259F             ; END RELATIONAL
5203   259F C0 00 00      cmp b, 0
5204   25A2 C6 2C 26      je _if86_else
5205   25A5             _if86_true:
5206   25A5             ;; *t++ = *prog++; 
5207   25A5 FA FF FF      lea d, [bp + -1] ; $t
5208   25A8 2A            mov b, [d]
5209   25A9 FD 79         mov g, b
5210   25AB FD 77         inc b
5211   25AD FA FF FF      lea d, [bp + -1] ; $t
5212   25B0 FD 43         mov [d], b
5213   25B2 FD 27         mov b, g
5214   25B4 D8            push b
5215   25B5 3B 83 33      mov d, _prog ; $prog
5216   25B8 2A            mov b, [d]
5217   25B9 FD 79         mov g, b
5218   25BB FD 77         inc b
5219   25BD 3B 83 33      mov d, _prog ; $prog
5220   25C0 FD 43         mov [d], b
5221   25C2 FD 27         mov b, g
5222   25C4 74            mov d, b
5223   25C5 32            mov bl, [d]
5224   25C6 A7 00         mov bh, 0
5225   25C8 E7            pop d
5226   25C9 FD 3E         mov [d], bl
5227   25CB             ;; if(*prog == '-'){ 
5228   25CB             _if87_cond:
5229   25CB 3B 83 33      mov d, _prog ; $prog
5230   25CE 2A            mov b, [d]
5231   25CF 74            mov d, b
5232   25D0 32            mov bl, [d]
5233   25D1 A7 00         mov bh, 0
5234   25D3             ; START RELATIONAL
5235   25D3 D7            push a
5236   25D4 11            mov a, b
5237   25D5 26 2D 00      mov b, $2d
5238   25D8 B0            cmp a, b
5239   25D9 FD 71         seq ; ==
5240   25DB E4            pop a
5241   25DC             ; END RELATIONAL
5242   25DC C0 00 00      cmp b, 0
5243   25DF C6 15 26      je _if87_else
5244   25E2             _if87_true:
5245   25E2             ;; *t++ = *prog++; 
5246   25E2 FA FF FF      lea d, [bp + -1] ; $t
5247   25E5 2A            mov b, [d]
5248   25E6 FD 79         mov g, b
5249   25E8 FD 77         inc b
5250   25EA FA FF FF      lea d, [bp + -1] ; $t
5251   25ED FD 43         mov [d], b
5252   25EF FD 27         mov b, g
5253   25F1 D8            push b
5254   25F2 3B 83 33      mov d, _prog ; $prog
5255   25F5 2A            mov b, [d]
5256   25F6 FD 79         mov g, b
5257   25F8 FD 77         inc b
5258   25FA 3B 83 33      mov d, _prog ; $prog
5259   25FD FD 43         mov [d], b
5260   25FF FD 27         mov b, g
5261   2601 74            mov d, b
5262   2602 32            mov bl, [d]
5263   2603 A7 00         mov bh, 0
5264   2605 E7            pop d
5265   2606 FD 3E         mov [d], bl
5266   2608             ;; tok = DECREMENT; 
5267   2608 3B 7F 33      mov d, _tok ; $tok
5268   260B DA            push d
5269   260C 26 06 00      mov b, 6; DECREMENT
5270   260F E7            pop d
5271   2610 FD 43         mov [d], b
5272   2612 0A 1F 26      jmp _if87_exit
5273   2615             _if87_else:
5274   2615             ;; tok = MINUS; 
5275   2615 3B 7F 33      mov d, _tok ; $tok
5276   2618 DA            push d
5277   2619 26 02 00      mov b, 2; MINUS
5278   261C E7            pop d
5279   261D FD 43         mov [d], b
5280   261F             _if87_exit:
5281   261F             ;; toktype = DELIMITER;   
5282   261F 3B 81 33      mov d, _toktype ; $toktype
5283   2622 DA            push d
5284   2623 26 01 00      mov b, 1; DELIMITER
5285   2626 E7            pop d
5286   2627 FD 43         mov [d], b
5287   2629 0A 1C 2A      jmp _if86_exit
5288   262C             _if86_else:
5289   262C             ;; if(*prog == '$'){ 
5290   262C             _if88_cond:
5291   262C 3B 83 33      mov d, _prog ; $prog
5292   262F 2A            mov b, [d]
5293   2630 74            mov d, b
5294   2631 32            mov bl, [d]
5295   2632 A7 00         mov bh, 0
5296   2634             ; START RELATIONAL
5297   2634 D7            push a
5298   2635 11            mov a, b
5299   2636 26 24 00      mov b, $24
5300   2639 B0            cmp a, b
5301   263A FD 71         seq ; ==
5302   263C E4            pop a
5303   263D             ; END RELATIONAL
5304   263D C0 00 00      cmp b, 0
5305   2640 C6 80 26      je _if88_else
5306   2643             _if88_true:
5307   2643             ;; *t++ = *prog++; 
5308   2643 FA FF FF      lea d, [bp + -1] ; $t
5309   2646 2A            mov b, [d]
5310   2647 FD 79         mov g, b
5311   2649 FD 77         inc b
5312   264B FA FF FF      lea d, [bp + -1] ; $t
5313   264E FD 43         mov [d], b
5314   2650 FD 27         mov b, g
5315   2652 D8            push b
5316   2653 3B 83 33      mov d, _prog ; $prog
5317   2656 2A            mov b, [d]
5318   2657 FD 79         mov g, b
5319   2659 FD 77         inc b
5320   265B 3B 83 33      mov d, _prog ; $prog
5321   265E FD 43         mov [d], b
5322   2660 FD 27         mov b, g
5323   2662 74            mov d, b
5324   2663 32            mov bl, [d]
5325   2664 A7 00         mov bh, 0
5326   2666 E7            pop d
5327   2667 FD 3E         mov [d], bl
5328   2669             ;; tok = DOLLAR; 
5329   2669 3B 7F 33      mov d, _tok ; $tok
5330   266C DA            push d
5331   266D 26 12 00      mov b, 18; DOLLAR
5332   2670 E7            pop d
5333   2671 FD 43         mov [d], b
5334   2673             ;; toktype = DELIMITER;   
5335   2673 3B 81 33      mov d, _toktype ; $toktype
5336   2676 DA            push d
5337   2677 26 01 00      mov b, 1; DELIMITER
5338   267A E7            pop d
5339   267B FD 43         mov [d], b
5340   267D 0A 1C 2A      jmp _if88_exit
5341   2680             _if88_else:
5342   2680             ;; if(*prog == '^'){ 
5343   2680             _if89_cond:
5344   2680 3B 83 33      mov d, _prog ; $prog
5345   2683 2A            mov b, [d]
5346   2684 74            mov d, b
5347   2685 32            mov bl, [d]
5348   2686 A7 00         mov bh, 0
5349   2688             ; START RELATIONAL
5350   2688 D7            push a
5351   2689 11            mov a, b
5352   268A 26 5E 00      mov b, $5e
5353   268D B0            cmp a, b
5354   268E FD 71         seq ; ==
5355   2690 E4            pop a
5356   2691             ; END RELATIONAL
5357   2691 C0 00 00      cmp b, 0
5358   2694 C6 D4 26      je _if89_else
5359   2697             _if89_true:
5360   2697             ;; *t++ = *prog++; 
5361   2697 FA FF FF      lea d, [bp + -1] ; $t
5362   269A 2A            mov b, [d]
5363   269B FD 79         mov g, b
5364   269D FD 77         inc b
5365   269F FA FF FF      lea d, [bp + -1] ; $t
5366   26A2 FD 43         mov [d], b
5367   26A4 FD 27         mov b, g
5368   26A6 D8            push b
5369   26A7 3B 83 33      mov d, _prog ; $prog
5370   26AA 2A            mov b, [d]
5371   26AB FD 79         mov g, b
5372   26AD FD 77         inc b
5373   26AF 3B 83 33      mov d, _prog ; $prog
5374   26B2 FD 43         mov [d], b
5375   26B4 FD 27         mov b, g
5376   26B6 74            mov d, b
5377   26B7 32            mov bl, [d]
5378   26B8 A7 00         mov bh, 0
5379   26BA E7            pop d
5380   26BB FD 3E         mov [d], bl
5381   26BD             ;; tok = BITWISE_XOR; 
5382   26BD 3B 7F 33      mov d, _tok ; $tok
5383   26C0 DA            push d
5384   26C1 26 17 00      mov b, 23; BITWISE_XOR
5385   26C4 E7            pop d
5386   26C5 FD 43         mov [d], b
5387   26C7             ;; toktype = DELIMITER;   
5388   26C7 3B 81 33      mov d, _toktype ; $toktype
5389   26CA DA            push d
5390   26CB 26 01 00      mov b, 1; DELIMITER
5391   26CE E7            pop d
5392   26CF FD 43         mov [d], b
5393   26D1 0A 1C 2A      jmp _if89_exit
5394   26D4             _if89_else:
5395   26D4             ;; if(*prog == '@'){ 
5396   26D4             _if90_cond:
5397   26D4 3B 83 33      mov d, _prog ; $prog
5398   26D7 2A            mov b, [d]
5399   26D8 74            mov d, b
5400   26D9 32            mov bl, [d]
5401   26DA A7 00         mov bh, 0
5402   26DC             ; START RELATIONAL
5403   26DC D7            push a
5404   26DD 11            mov a, b
5405   26DE 26 40 00      mov b, $40
5406   26E1 B0            cmp a, b
5407   26E2 FD 71         seq ; ==
5408   26E4 E4            pop a
5409   26E5             ; END RELATIONAL
5410   26E5 C0 00 00      cmp b, 0
5411   26E8 C6 28 27      je _if90_else
5412   26EB             _if90_true:
5413   26EB             ;; *t++ = *prog++; 
5414   26EB FA FF FF      lea d, [bp + -1] ; $t
5415   26EE 2A            mov b, [d]
5416   26EF FD 79         mov g, b
5417   26F1 FD 77         inc b
5418   26F3 FA FF FF      lea d, [bp + -1] ; $t
5419   26F6 FD 43         mov [d], b
5420   26F8 FD 27         mov b, g
5421   26FA D8            push b
5422   26FB 3B 83 33      mov d, _prog ; $prog
5423   26FE 2A            mov b, [d]
5424   26FF FD 79         mov g, b
5425   2701 FD 77         inc b
5426   2703 3B 83 33      mov d, _prog ; $prog
5427   2706 FD 43         mov [d], b
5428   2708 FD 27         mov b, g
5429   270A 74            mov d, b
5430   270B 32            mov bl, [d]
5431   270C A7 00         mov bh, 0
5432   270E E7            pop d
5433   270F FD 3E         mov [d], bl
5434   2711             ;; tok = AT; 
5435   2711 3B 7F 33      mov d, _tok ; $tok
5436   2714 DA            push d
5437   2715 26 14 00      mov b, 20; AT
5438   2718 E7            pop d
5439   2719 FD 43         mov [d], b
5440   271B             ;; toktype = DELIMITER;   
5441   271B 3B 81 33      mov d, _toktype ; $toktype
5442   271E DA            push d
5443   271F 26 01 00      mov b, 1; DELIMITER
5444   2722 E7            pop d
5445   2723 FD 43         mov [d], b
5446   2725 0A 1C 2A      jmp _if90_exit
5447   2728             _if90_else:
5448   2728             ;; if(*prog == '*'){ 
5449   2728             _if91_cond:
5450   2728 3B 83 33      mov d, _prog ; $prog
5451   272B 2A            mov b, [d]
5452   272C 74            mov d, b
5453   272D 32            mov bl, [d]
5454   272E A7 00         mov bh, 0
5455   2730             ; START RELATIONAL
5456   2730 D7            push a
5457   2731 11            mov a, b
5458   2732 26 2A 00      mov b, $2a
5459   2735 B0            cmp a, b
5460   2736 FD 71         seq ; ==
5461   2738 E4            pop a
5462   2739             ; END RELATIONAL
5463   2739 C0 00 00      cmp b, 0
5464   273C C6 7C 27      je _if91_else
5465   273F             _if91_true:
5466   273F             ;; *t++ = *prog++; 
5467   273F FA FF FF      lea d, [bp + -1] ; $t
5468   2742 2A            mov b, [d]
5469   2743 FD 79         mov g, b
5470   2745 FD 77         inc b
5471   2747 FA FF FF      lea d, [bp + -1] ; $t
5472   274A FD 43         mov [d], b
5473   274C FD 27         mov b, g
5474   274E D8            push b
5475   274F 3B 83 33      mov d, _prog ; $prog
5476   2752 2A            mov b, [d]
5477   2753 FD 79         mov g, b
5478   2755 FD 77         inc b
5479   2757 3B 83 33      mov d, _prog ; $prog
5480   275A FD 43         mov [d], b
5481   275C FD 27         mov b, g
5482   275E 74            mov d, b
5483   275F 32            mov bl, [d]
5484   2760 A7 00         mov bh, 0
5485   2762 E7            pop d
5486   2763 FD 3E         mov [d], bl
5487   2765             ;; tok = STAR; 
5488   2765 3B 7F 33      mov d, _tok ; $tok
5489   2768 DA            push d
5490   2769 26 03 00      mov b, 3; STAR
5491   276C E7            pop d
5492   276D FD 43         mov [d], b
5493   276F             ;; toktype = DELIMITER;   
5494   276F 3B 81 33      mov d, _toktype ; $toktype
5495   2772 DA            push d
5496   2773 26 01 00      mov b, 1; DELIMITER
5497   2776 E7            pop d
5498   2777 FD 43         mov [d], b
5499   2779 0A 1C 2A      jmp _if91_exit
5500   277C             _if91_else:
5501   277C             ;; if(*prog == '/'){ 
5502   277C             _if92_cond:
5503   277C 3B 83 33      mov d, _prog ; $prog
5504   277F 2A            mov b, [d]
5505   2780 74            mov d, b
5506   2781 32            mov bl, [d]
5507   2782 A7 00         mov bh, 0
5508   2784             ; START RELATIONAL
5509   2784 D7            push a
5510   2785 11            mov a, b
5511   2786 26 2F 00      mov b, $2f
5512   2789 B0            cmp a, b
5513   278A FD 71         seq ; ==
5514   278C E4            pop a
5515   278D             ; END RELATIONAL
5516   278D C0 00 00      cmp b, 0
5517   2790 C6 D0 27      je _if92_else
5518   2793             _if92_true:
5519   2793             ;; *t++ = *prog++; 
5520   2793 FA FF FF      lea d, [bp + -1] ; $t
5521   2796 2A            mov b, [d]
5522   2797 FD 79         mov g, b
5523   2799 FD 77         inc b
5524   279B FA FF FF      lea d, [bp + -1] ; $t
5525   279E FD 43         mov [d], b
5526   27A0 FD 27         mov b, g
5527   27A2 D8            push b
5528   27A3 3B 83 33      mov d, _prog ; $prog
5529   27A6 2A            mov b, [d]
5530   27A7 FD 79         mov g, b
5531   27A9 FD 77         inc b
5532   27AB 3B 83 33      mov d, _prog ; $prog
5533   27AE FD 43         mov [d], b
5534   27B0 FD 27         mov b, g
5535   27B2 74            mov d, b
5536   27B3 32            mov bl, [d]
5537   27B4 A7 00         mov bh, 0
5538   27B6 E7            pop d
5539   27B7 FD 3E         mov [d], bl
5540   27B9             ;; tok = FSLASH; 
5541   27B9 3B 7F 33      mov d, _tok ; $tok
5542   27BC DA            push d
5543   27BD 26 04 00      mov b, 4; FSLASH
5544   27C0 E7            pop d
5545   27C1 FD 43         mov [d], b
5546   27C3             ;; toktype = DELIMITER;   
5547   27C3 3B 81 33      mov d, _toktype ; $toktype
5548   27C6 DA            push d
5549   27C7 26 01 00      mov b, 1; DELIMITER
5550   27CA E7            pop d
5551   27CB FD 43         mov [d], b
5552   27CD 0A 1C 2A      jmp _if92_exit
5553   27D0             _if92_else:
5554   27D0             ;; if(*prog == '%'){ 
5555   27D0             _if93_cond:
5556   27D0 3B 83 33      mov d, _prog ; $prog
5557   27D3 2A            mov b, [d]
5558   27D4 74            mov d, b
5559   27D5 32            mov bl, [d]
5560   27D6 A7 00         mov bh, 0
5561   27D8             ; START RELATIONAL
5562   27D8 D7            push a
5563   27D9 11            mov a, b
5564   27DA 26 25 00      mov b, $25
5565   27DD B0            cmp a, b
5566   27DE FD 71         seq ; ==
5567   27E0 E4            pop a
5568   27E1             ; END RELATIONAL
5569   27E1 C0 00 00      cmp b, 0
5570   27E4 C6 24 28      je _if93_else
5571   27E7             _if93_true:
5572   27E7             ;; *t++ = *prog++; 
5573   27E7 FA FF FF      lea d, [bp + -1] ; $t
5574   27EA 2A            mov b, [d]
5575   27EB FD 79         mov g, b
5576   27ED FD 77         inc b
5577   27EF FA FF FF      lea d, [bp + -1] ; $t
5578   27F2 FD 43         mov [d], b
5579   27F4 FD 27         mov b, g
5580   27F6 D8            push b
5581   27F7 3B 83 33      mov d, _prog ; $prog
5582   27FA 2A            mov b, [d]
5583   27FB FD 79         mov g, b
5584   27FD FD 77         inc b
5585   27FF 3B 83 33      mov d, _prog ; $prog
5586   2802 FD 43         mov [d], b
5587   2804 FD 27         mov b, g
5588   2806 74            mov d, b
5589   2807 32            mov bl, [d]
5590   2808 A7 00         mov bh, 0
5591   280A E7            pop d
5592   280B FD 3E         mov [d], bl
5593   280D             ;; tok = MOD; 
5594   280D 3B 7F 33      mov d, _tok ; $tok
5595   2810 DA            push d
5596   2811 26 07 00      mov b, 7; MOD
5597   2814 E7            pop d
5598   2815 FD 43         mov [d], b
5599   2817             ;; toktype = DELIMITER;   
5600   2817 3B 81 33      mov d, _toktype ; $toktype
5601   281A DA            push d
5602   281B 26 01 00      mov b, 1; DELIMITER
5603   281E E7            pop d
5604   281F FD 43         mov [d], b
5605   2821 0A 1C 2A      jmp _if93_exit
5606   2824             _if93_else:
5607   2824             ;; if(*prog == '('){ 
5608   2824             _if94_cond:
5609   2824 3B 83 33      mov d, _prog ; $prog
5610   2827 2A            mov b, [d]
5611   2828 74            mov d, b
5612   2829 32            mov bl, [d]
5613   282A A7 00         mov bh, 0
5614   282C             ; START RELATIONAL
5615   282C D7            push a
5616   282D 11            mov a, b
5617   282E 26 28 00      mov b, $28
5618   2831 B0            cmp a, b
5619   2832 FD 71         seq ; ==
5620   2834 E4            pop a
5621   2835             ; END RELATIONAL
5622   2835 C0 00 00      cmp b, 0
5623   2838 C6 78 28      je _if94_else
5624   283B             _if94_true:
5625   283B             ;; *t++ = *prog++; 
5626   283B FA FF FF      lea d, [bp + -1] ; $t
5627   283E 2A            mov b, [d]
5628   283F FD 79         mov g, b
5629   2841 FD 77         inc b
5630   2843 FA FF FF      lea d, [bp + -1] ; $t
5631   2846 FD 43         mov [d], b
5632   2848 FD 27         mov b, g
5633   284A D8            push b
5634   284B 3B 83 33      mov d, _prog ; $prog
5635   284E 2A            mov b, [d]
5636   284F FD 79         mov g, b
5637   2851 FD 77         inc b
5638   2853 3B 83 33      mov d, _prog ; $prog
5639   2856 FD 43         mov [d], b
5640   2858 FD 27         mov b, g
5641   285A 74            mov d, b
5642   285B 32            mov bl, [d]
5643   285C A7 00         mov bh, 0
5644   285E E7            pop d
5645   285F FD 3E         mov [d], bl
5646   2861             ;; tok = OPENING_PAREN; 
5647   2861 3B 7F 33      mov d, _tok ; $tok
5648   2864 DA            push d
5649   2865 26 1C 00      mov b, 28; OPENING_PAREN
5650   2868 E7            pop d
5651   2869 FD 43         mov [d], b
5652   286B             ;; toktype = DELIMITER;   
5653   286B 3B 81 33      mov d, _toktype ; $toktype
5654   286E DA            push d
5655   286F 26 01 00      mov b, 1; DELIMITER
5656   2872 E7            pop d
5657   2873 FD 43         mov [d], b
5658   2875 0A 1C 2A      jmp _if94_exit
5659   2878             _if94_else:
5660   2878             ;; if(*prog == ')'){ 
5661   2878             _if95_cond:
5662   2878 3B 83 33      mov d, _prog ; $prog
5663   287B 2A            mov b, [d]
5664   287C 74            mov d, b
5665   287D 32            mov bl, [d]
5666   287E A7 00         mov bh, 0
5667   2880             ; START RELATIONAL
5668   2880 D7            push a
5669   2881 11            mov a, b
5670   2882 26 29 00      mov b, $29
5671   2885 B0            cmp a, b
5672   2886 FD 71         seq ; ==
5673   2888 E4            pop a
5674   2889             ; END RELATIONAL
5675   2889 C0 00 00      cmp b, 0
5676   288C C6 CC 28      je _if95_else
5677   288F             _if95_true:
5678   288F             ;; *t++ = *prog++; 
5679   288F FA FF FF      lea d, [bp + -1] ; $t
5680   2892 2A            mov b, [d]
5681   2893 FD 79         mov g, b
5682   2895 FD 77         inc b
5683   2897 FA FF FF      lea d, [bp + -1] ; $t
5684   289A FD 43         mov [d], b
5685   289C FD 27         mov b, g
5686   289E D8            push b
5687   289F 3B 83 33      mov d, _prog ; $prog
5688   28A2 2A            mov b, [d]
5689   28A3 FD 79         mov g, b
5690   28A5 FD 77         inc b
5691   28A7 3B 83 33      mov d, _prog ; $prog
5692   28AA FD 43         mov [d], b
5693   28AC FD 27         mov b, g
5694   28AE 74            mov d, b
5695   28AF 32            mov bl, [d]
5696   28B0 A7 00         mov bh, 0
5697   28B2 E7            pop d
5698   28B3 FD 3E         mov [d], bl
5699   28B5             ;; tok = CLOSING_PAREN; 
5700   28B5 3B 7F 33      mov d, _tok ; $tok
5701   28B8 DA            push d
5702   28B9 26 1D 00      mov b, 29; CLOSING_PAREN
5703   28BC E7            pop d
5704   28BD FD 43         mov [d], b
5705   28BF             ;; toktype = DELIMITER;   
5706   28BF 3B 81 33      mov d, _toktype ; $toktype
5707   28C2 DA            push d
5708   28C3 26 01 00      mov b, 1; DELIMITER
5709   28C6 E7            pop d
5710   28C7 FD 43         mov [d], b
5711   28C9 0A 1C 2A      jmp _if95_exit
5712   28CC             _if95_else:
5713   28CC             ;; if(*prog == ';'){ 
5714   28CC             _if96_cond:
5715   28CC 3B 83 33      mov d, _prog ; $prog
5716   28CF 2A            mov b, [d]
5717   28D0 74            mov d, b
5718   28D1 32            mov bl, [d]
5719   28D2 A7 00         mov bh, 0
5720   28D4             ; START RELATIONAL
5721   28D4 D7            push a
5722   28D5 11            mov a, b
5723   28D6 26 3B 00      mov b, $3b
5724   28D9 B0            cmp a, b
5725   28DA FD 71         seq ; ==
5726   28DC E4            pop a
5727   28DD             ; END RELATIONAL
5728   28DD C0 00 00      cmp b, 0
5729   28E0 C6 20 29      je _if96_else
5730   28E3             _if96_true:
5731   28E3             ;; *t++ = *prog++; 
5732   28E3 FA FF FF      lea d, [bp + -1] ; $t
5733   28E6 2A            mov b, [d]
5734   28E7 FD 79         mov g, b
5735   28E9 FD 77         inc b
5736   28EB FA FF FF      lea d, [bp + -1] ; $t
5737   28EE FD 43         mov [d], b
5738   28F0 FD 27         mov b, g
5739   28F2 D8            push b
5740   28F3 3B 83 33      mov d, _prog ; $prog
5741   28F6 2A            mov b, [d]
5742   28F7 FD 79         mov g, b
5743   28F9 FD 77         inc b
5744   28FB 3B 83 33      mov d, _prog ; $prog
5745   28FE FD 43         mov [d], b
5746   2900 FD 27         mov b, g
5747   2902 74            mov d, b
5748   2903 32            mov bl, [d]
5749   2904 A7 00         mov bh, 0
5750   2906 E7            pop d
5751   2907 FD 3E         mov [d], bl
5752   2909             ;; tok = SEMICOLON; 
5753   2909 3B 7F 33      mov d, _tok ; $tok
5754   290C DA            push d
5755   290D 26 23 00      mov b, 35; SEMICOLON
5756   2910 E7            pop d
5757   2911 FD 43         mov [d], b
5758   2913             ;; toktype = DELIMITER;   
5759   2913 3B 81 33      mov d, _toktype ; $toktype
5760   2916 DA            push d
5761   2917 26 01 00      mov b, 1; DELIMITER
5762   291A E7            pop d
5763   291B FD 43         mov [d], b
5764   291D 0A 1C 2A      jmp _if96_exit
5765   2920             _if96_else:
5766   2920             ;; if(*prog == ':'){ 
5767   2920             _if97_cond:
5768   2920 3B 83 33      mov d, _prog ; $prog
5769   2923 2A            mov b, [d]
5770   2924 74            mov d, b
5771   2925 32            mov bl, [d]
5772   2926 A7 00         mov bh, 0
5773   2928             ; START RELATIONAL
5774   2928 D7            push a
5775   2929 11            mov a, b
5776   292A 26 3A 00      mov b, $3a
5777   292D B0            cmp a, b
5778   292E FD 71         seq ; ==
5779   2930 E4            pop a
5780   2931             ; END RELATIONAL
5781   2931 C0 00 00      cmp b, 0
5782   2934 C6 74 29      je _if97_else
5783   2937             _if97_true:
5784   2937             ;; *t++ = *prog++; 
5785   2937 FA FF FF      lea d, [bp + -1] ; $t
5786   293A 2A            mov b, [d]
5787   293B FD 79         mov g, b
5788   293D FD 77         inc b
5789   293F FA FF FF      lea d, [bp + -1] ; $t
5790   2942 FD 43         mov [d], b
5791   2944 FD 27         mov b, g
5792   2946 D8            push b
5793   2947 3B 83 33      mov d, _prog ; $prog
5794   294A 2A            mov b, [d]
5795   294B FD 79         mov g, b
5796   294D FD 77         inc b
5797   294F 3B 83 33      mov d, _prog ; $prog
5798   2952 FD 43         mov [d], b
5799   2954 FD 27         mov b, g
5800   2956 74            mov d, b
5801   2957 32            mov bl, [d]
5802   2958 A7 00         mov bh, 0
5803   295A E7            pop d
5804   295B FD 3E         mov [d], bl
5805   295D             ;; tok = COLON; 
5806   295D 3B 7F 33      mov d, _tok ; $tok
5807   2960 DA            push d
5808   2961 26 22 00      mov b, 34; COLON
5809   2964 E7            pop d
5810   2965 FD 43         mov [d], b
5811   2967             ;; toktype = DELIMITER;   
5812   2967 3B 81 33      mov d, _toktype ; $toktype
5813   296A DA            push d
5814   296B 26 01 00      mov b, 1; DELIMITER
5815   296E E7            pop d
5816   296F FD 43         mov [d], b
5817   2971 0A 1C 2A      jmp _if97_exit
5818   2974             _if97_else:
5819   2974             ;; if(*prog == ','){ 
5820   2974             _if98_cond:
5821   2974 3B 83 33      mov d, _prog ; $prog
5822   2977 2A            mov b, [d]
5823   2978 74            mov d, b
5824   2979 32            mov bl, [d]
5825   297A A7 00         mov bh, 0
5826   297C             ; START RELATIONAL
5827   297C D7            push a
5828   297D 11            mov a, b
5829   297E 26 2C 00      mov b, $2c
5830   2981 B0            cmp a, b
5831   2982 FD 71         seq ; ==
5832   2984 E4            pop a
5833   2985             ; END RELATIONAL
5834   2985 C0 00 00      cmp b, 0
5835   2988 C6 C8 29      je _if98_else
5836   298B             _if98_true:
5837   298B             ;; *t++ = *prog++; 
5838   298B FA FF FF      lea d, [bp + -1] ; $t
5839   298E 2A            mov b, [d]
5840   298F FD 79         mov g, b
5841   2991 FD 77         inc b
5842   2993 FA FF FF      lea d, [bp + -1] ; $t
5843   2996 FD 43         mov [d], b
5844   2998 FD 27         mov b, g
5845   299A D8            push b
5846   299B 3B 83 33      mov d, _prog ; $prog
5847   299E 2A            mov b, [d]
5848   299F FD 79         mov g, b
5849   29A1 FD 77         inc b
5850   29A3 3B 83 33      mov d, _prog ; $prog
5851   29A6 FD 43         mov [d], b
5852   29A8 FD 27         mov b, g
5853   29AA 74            mov d, b
5854   29AB 32            mov bl, [d]
5855   29AC A7 00         mov bh, 0
5856   29AE E7            pop d
5857   29AF FD 3E         mov [d], bl
5858   29B1             ;; tok = COMMA; 
5859   29B1 3B 7F 33      mov d, _tok ; $tok
5860   29B4 DA            push d
5861   29B5 26 24 00      mov b, 36; COMMA
5862   29B8 E7            pop d
5863   29B9 FD 43         mov [d], b
5864   29BB             ;; toktype = DELIMITER;   
5865   29BB 3B 81 33      mov d, _toktype ; $toktype
5866   29BE DA            push d
5867   29BF 26 01 00      mov b, 1; DELIMITER
5868   29C2 E7            pop d
5869   29C3 FD 43         mov [d], b
5870   29C5 0A 1C 2A      jmp _if98_exit
5871   29C8             _if98_else:
5872   29C8             ;; if(*prog == '.'){ 
5873   29C8             _if99_cond:
5874   29C8 3B 83 33      mov d, _prog ; $prog
5875   29CB 2A            mov b, [d]
5876   29CC 74            mov d, b
5877   29CD 32            mov bl, [d]
5878   29CE A7 00         mov bh, 0
5879   29D0             ; START RELATIONAL
5880   29D0 D7            push a
5881   29D1 11            mov a, b
5882   29D2 26 2E 00      mov b, $2e
5883   29D5 B0            cmp a, b
5884   29D6 FD 71         seq ; ==
5885   29D8 E4            pop a
5886   29D9             ; END RELATIONAL
5887   29D9 C0 00 00      cmp b, 0
5888   29DC C6 1C 2A      je _if99_exit
5889   29DF             _if99_true:
5890   29DF             ;; *t++ = *prog++; 
5891   29DF FA FF FF      lea d, [bp + -1] ; $t
5892   29E2 2A            mov b, [d]
5893   29E3 FD 79         mov g, b
5894   29E5 FD 77         inc b
5895   29E7 FA FF FF      lea d, [bp + -1] ; $t
5896   29EA FD 43         mov [d], b
5897   29EC FD 27         mov b, g
5898   29EE D8            push b
5899   29EF 3B 83 33      mov d, _prog ; $prog
5900   29F2 2A            mov b, [d]
5901   29F3 FD 79         mov g, b
5902   29F5 FD 77         inc b
5903   29F7 3B 83 33      mov d, _prog ; $prog
5904   29FA FD 43         mov [d], b
5905   29FC FD 27         mov b, g
5906   29FE 74            mov d, b
5907   29FF 32            mov bl, [d]
5908   2A00 A7 00         mov bh, 0
5909   2A02 E7            pop d
5910   2A03 FD 3E         mov [d], bl
5911   2A05             ;; tok = DOT; 
5912   2A05 3B 7F 33      mov d, _tok ; $tok
5913   2A08 DA            push d
5914   2A09 26 25 00      mov b, 37; DOT
5915   2A0C E7            pop d
5916   2A0D FD 43         mov [d], b
5917   2A0F             ;; toktype = DELIMITER;   
5918   2A0F 3B 81 33      mov d, _toktype ; $toktype
5919   2A12 DA            push d
5920   2A13 26 01 00      mov b, 1; DELIMITER
5921   2A16 E7            pop d
5922   2A17 FD 43         mov [d], b
5923   2A19 0A 1C 2A      jmp _if99_exit
5924   2A1C             _if99_exit:
5925   2A1C             _if98_exit:
5926   2A1C             _if97_exit:
5927   2A1C             _if96_exit:
5928   2A1C             _if95_exit:
5929   2A1C             _if94_exit:
5930   2A1C             _if93_exit:
5931   2A1C             _if92_exit:
5932   2A1C             _if91_exit:
5933   2A1C             _if90_exit:
5934   2A1C             _if89_exit:
5935   2A1C             _if88_exit:
5936   2A1C             _if86_exit:
5937   2A1C             _if84_exit:
5938   2A1C             _if82_exit:
5939   2A1C             _if79_exit:
5940   2A1C             _if76_exit:
5941   2A1C             _if75_exit:
5942   2A1C             _if73_exit:
5943   2A1C             _if71_exit:
5944   2A1C             _if69_exit:
5945   2A1C             _if68_exit:
5946   2A1C             _if67_exit:
5947   2A1C             _if66_exit:
5948   2A1C             _if65_exit:
5949   2A1C             _if64_exit:
5950   2A1C             _if61_exit:
5951   2A1C             _if59_exit:
5952   2A1C             _if57_exit:
5953   2A1C             ;; *t = '\0'; 
5954   2A1C FA FF FF      lea d, [bp + -1] ; $t
5955   2A1F 2A            mov b, [d]
5956   2A20 D8            push b
5957   2A21 26 00 00      mov b, $0
5958   2A24 E7            pop d
5959   2A25 FD 3E         mov [d], bl
5960   2A27 F9            leave
5961   2A28 09            ret
5962   2A29             
5963   2A29             convert_constant:
5964   2A29 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5965   2A2C             ; $s 
5966   2A2C             ; $t 
5967   2A2C 52 04 00      sub sp, 4
5968   2A2F             ;; t = token; 
5969   2A2F FA FD FF      lea d, [bp + -3] ; $t
5970   2A32 DA            push d
5971   2A33 3B 85 33      mov d, _token_data ; $token
5972   2A36 2D            mov b, d
5973   2A37 E7            pop d
5974   2A38 FD 43         mov [d], b
5975   2A3A             ;; s = string_const; 
5976   2A3A FA FF FF      lea d, [bp + -1] ; $s
5977   2A3D DA            push d
5978   2A3E 3B 85 34      mov d, _string_const_data ; $string_const
5979   2A41 2D            mov b, d
5980   2A42 E7            pop d
5981   2A43 FD 43         mov [d], b
5982   2A45             ;; if(toktype == CHAR_CONST){ 
5983   2A45             _if100_cond:
5984   2A45 3B 81 33      mov d, _toktype ; $toktype
5985   2A48 2A            mov b, [d]
5986   2A49             ; START RELATIONAL
5987   2A49 D7            push a
5988   2A4A 11            mov a, b
5989   2A4B 26 02 00      mov b, 2; CHAR_CONST
5990   2A4E B0            cmp a, b
5991   2A4F FD 71         seq ; ==
5992   2A51 E4            pop a
5993   2A52             ; END RELATIONAL
5994   2A52 C0 00 00      cmp b, 0
5995   2A55 C6 00 2C      je _if100_else
5996   2A58             _if100_true:
5997   2A58             ;; t++; 
5998   2A58 FA FD FF      lea d, [bp + -3] ; $t
5999   2A5B 2A            mov b, [d]
6000   2A5C FD 79         mov g, b
6001   2A5E FD 77         inc b
6002   2A60 FA FD FF      lea d, [bp + -3] ; $t
6003   2A63 FD 43         mov [d], b
6004   2A65 FD 27         mov b, g
6005   2A67             ;; if(*t == '\\'){ 
6006   2A67             _if101_cond:
6007   2A67 FA FD FF      lea d, [bp + -3] ; $t
6008   2A6A 2A            mov b, [d]
6009   2A6B 74            mov d, b
6010   2A6C 32            mov bl, [d]
6011   2A6D A7 00         mov bh, 0
6012   2A6F             ; START RELATIONAL
6013   2A6F D7            push a
6014   2A70 11            mov a, b
6015   2A71 26 5C 00      mov b, $5c
6016   2A74 B0            cmp a, b
6017   2A75 FD 71         seq ; ==
6018   2A77 E4            pop a
6019   2A78             ; END RELATIONAL
6020   2A78 C0 00 00      cmp b, 0
6021   2A7B C6 E2 2B      je _if101_else
6022   2A7E             _if101_true:
6023   2A7E             ;; t++; 
6024   2A7E FA FD FF      lea d, [bp + -3] ; $t
6025   2A81 2A            mov b, [d]
6026   2A82 FD 79         mov g, b
6027   2A84 FD 77         inc b
6028   2A86 FA FD FF      lea d, [bp + -3] ; $t
6029   2A89 FD 43         mov [d], b
6030   2A8B FD 27         mov b, g
6031   2A8D             ;; switch(*t){ 
6032   2A8D             _switch102_expr:
6033   2A8D FA FD FF      lea d, [bp + -3] ; $t
6034   2A90 2A            mov b, [d]
6035   2A91 74            mov d, b
6036   2A92 32            mov bl, [d]
6037   2A93 A7 00         mov bh, 0
6038   2A95             _switch102_comparisons:
6039   2A95 C1 30         cmp bl, $30
6040   2A97 C6 CF 2A      je _switch102_case0
6041   2A9A C1 61         cmp bl, $61
6042   2A9C C6 E8 2A      je _switch102_case1
6043   2A9F C1 62         cmp bl, $62
6044   2AA1 C6 01 2B      je _switch102_case2
6045   2AA4 C1 66         cmp bl, $66
6046   2AA6 C6 1A 2B      je _switch102_case3
6047   2AA9 C1 6E         cmp bl, $6e
6048   2AAB C6 33 2B      je _switch102_case4
6049   2AAE C1 72         cmp bl, $72
6050   2AB0 C6 4C 2B      je _switch102_case5
6051   2AB3 C1 74         cmp bl, $74
6052   2AB5 C6 65 2B      je _switch102_case6
6053   2AB8 C1 76         cmp bl, $76
6054   2ABA C6 7E 2B      je _switch102_case7
6055   2ABD C1 5C         cmp bl, $5c
6056   2ABF C6 97 2B      je _switch102_case8
6057   2AC2 C1 27         cmp bl, $27
6058   2AC4 C6 B0 2B      je _switch102_case9
6059   2AC7 C1 22         cmp bl, $22
6060   2AC9 C6 C9 2B      je _switch102_case10
6061   2ACC 0A DF 2B      jmp _switch102_exit
6062   2ACF             _switch102_case0:
6063   2ACF             ;; *s++ = '\0'; 
6064   2ACF FA FF FF      lea d, [bp + -1] ; $s
6065   2AD2 2A            mov b, [d]
6066   2AD3 FD 79         mov g, b
6067   2AD5 FD 77         inc b
6068   2AD7 FA FF FF      lea d, [bp + -1] ; $s
6069   2ADA FD 43         mov [d], b
6070   2ADC FD 27         mov b, g
6071   2ADE D8            push b
6072   2ADF 26 00 00      mov b, $0
6073   2AE2 E7            pop d
6074   2AE3 FD 3E         mov [d], bl
6075   2AE5             ;; break; 
6076   2AE5 0A DF 2B      jmp _switch102_exit ; case break
6077   2AE8             _switch102_case1:
6078   2AE8             ;; *s++ = '\a'; 
6079   2AE8 FA FF FF      lea d, [bp + -1] ; $s
6080   2AEB 2A            mov b, [d]
6081   2AEC FD 79         mov g, b
6082   2AEE FD 77         inc b
6083   2AF0 FA FF FF      lea d, [bp + -1] ; $s
6084   2AF3 FD 43         mov [d], b
6085   2AF5 FD 27         mov b, g
6086   2AF7 D8            push b
6087   2AF8 26 07 00      mov b, $7
6088   2AFB E7            pop d
6089   2AFC FD 3E         mov [d], bl
6090   2AFE             ;; break; 
6091   2AFE 0A DF 2B      jmp _switch102_exit ; case break
6092   2B01             _switch102_case2:
6093   2B01             ;; *s++ = '\b'; 
6094   2B01 FA FF FF      lea d, [bp + -1] ; $s
6095   2B04 2A            mov b, [d]
6096   2B05 FD 79         mov g, b
6097   2B07 FD 77         inc b
6098   2B09 FA FF FF      lea d, [bp + -1] ; $s
6099   2B0C FD 43         mov [d], b
6100   2B0E FD 27         mov b, g
6101   2B10 D8            push b
6102   2B11 26 08 00      mov b, $8
6103   2B14 E7            pop d
6104   2B15 FD 3E         mov [d], bl
6105   2B17             ;; break;   
6106   2B17 0A DF 2B      jmp _switch102_exit ; case break
6107   2B1A             _switch102_case3:
6108   2B1A             ;; *s++ = '\f'; 
6109   2B1A FA FF FF      lea d, [bp + -1] ; $s
6110   2B1D 2A            mov b, [d]
6111   2B1E FD 79         mov g, b
6112   2B20 FD 77         inc b
6113   2B22 FA FF FF      lea d, [bp + -1] ; $s
6114   2B25 FD 43         mov [d], b
6115   2B27 FD 27         mov b, g
6116   2B29 D8            push b
6117   2B2A 26 0C 00      mov b, $c
6118   2B2D E7            pop d
6119   2B2E FD 3E         mov [d], bl
6120   2B30             ;; break; 
6121   2B30 0A DF 2B      jmp _switch102_exit ; case break
6122   2B33             _switch102_case4:
6123   2B33             ;; *s++ = '\n'; 
6124   2B33 FA FF FF      lea d, [bp + -1] ; $s
6125   2B36 2A            mov b, [d]
6126   2B37 FD 79         mov g, b
6127   2B39 FD 77         inc b
6128   2B3B FA FF FF      lea d, [bp + -1] ; $s
6129   2B3E FD 43         mov [d], b
6130   2B40 FD 27         mov b, g
6131   2B42 D8            push b
6132   2B43 26 0A 00      mov b, $a
6133   2B46 E7            pop d
6134   2B47 FD 3E         mov [d], bl
6135   2B49             ;; break; 
6136   2B49 0A DF 2B      jmp _switch102_exit ; case break
6137   2B4C             _switch102_case5:
6138   2B4C             ;; *s++ = '\r'; 
6139   2B4C FA FF FF      lea d, [bp + -1] ; $s
6140   2B4F 2A            mov b, [d]
6141   2B50 FD 79         mov g, b
6142   2B52 FD 77         inc b
6143   2B54 FA FF FF      lea d, [bp + -1] ; $s
6144   2B57 FD 43         mov [d], b
6145   2B59 FD 27         mov b, g
6146   2B5B D8            push b
6147   2B5C 26 0D 00      mov b, $d
6148   2B5F E7            pop d
6149   2B60 FD 3E         mov [d], bl
6150   2B62             ;; break; 
6151   2B62 0A DF 2B      jmp _switch102_exit ; case break
6152   2B65             _switch102_case6:
6153   2B65             ;; *s++ = '\t'; 
6154   2B65 FA FF FF      lea d, [bp + -1] ; $s
6155   2B68 2A            mov b, [d]
6156   2B69 FD 79         mov g, b
6157   2B6B FD 77         inc b
6158   2B6D FA FF FF      lea d, [bp + -1] ; $s
6159   2B70 FD 43         mov [d], b
6160   2B72 FD 27         mov b, g
6161   2B74 D8            push b
6162   2B75 26 09 00      mov b, $9
6163   2B78 E7            pop d
6164   2B79 FD 3E         mov [d], bl
6165   2B7B             ;; break; 
6166   2B7B 0A DF 2B      jmp _switch102_exit ; case break
6167   2B7E             _switch102_case7:
6168   2B7E             ;; *s++ = '\v'; 
6169   2B7E FA FF FF      lea d, [bp + -1] ; $s
6170   2B81 2A            mov b, [d]
6171   2B82 FD 79         mov g, b
6172   2B84 FD 77         inc b
6173   2B86 FA FF FF      lea d, [bp + -1] ; $s
6174   2B89 FD 43         mov [d], b
6175   2B8B FD 27         mov b, g
6176   2B8D D8            push b
6177   2B8E 26 0B 00      mov b, $b
6178   2B91 E7            pop d
6179   2B92 FD 3E         mov [d], bl
6180   2B94             ;; break; 
6181   2B94 0A DF 2B      jmp _switch102_exit ; case break
6182   2B97             _switch102_case8:
6183   2B97             ;; *s++ = '\\'; 
6184   2B97 FA FF FF      lea d, [bp + -1] ; $s
6185   2B9A 2A            mov b, [d]
6186   2B9B FD 79         mov g, b
6187   2B9D FD 77         inc b
6188   2B9F FA FF FF      lea d, [bp + -1] ; $s
6189   2BA2 FD 43         mov [d], b
6190   2BA4 FD 27         mov b, g
6191   2BA6 D8            push b
6192   2BA7 26 5C 00      mov b, $5c
6193   2BAA E7            pop d
6194   2BAB FD 3E         mov [d], bl
6195   2BAD             ;; break; 
6196   2BAD 0A DF 2B      jmp _switch102_exit ; case break
6197   2BB0             _switch102_case9:
6198   2BB0             ;; *s++ = '\''; 
6199   2BB0 FA FF FF      lea d, [bp + -1] ; $s
6200   2BB3 2A            mov b, [d]
6201   2BB4 FD 79         mov g, b
6202   2BB6 FD 77         inc b
6203   2BB8 FA FF FF      lea d, [bp + -1] ; $s
6204   2BBB FD 43         mov [d], b
6205   2BBD FD 27         mov b, g
6206   2BBF D8            push b
6207   2BC0 26 27 00      mov b, $27
6208   2BC3 E7            pop d
6209   2BC4 FD 3E         mov [d], bl
6210   2BC6             ;; break; 
6211   2BC6 0A DF 2B      jmp _switch102_exit ; case break
6212   2BC9             _switch102_case10:
6213   2BC9             ;; *s++ = '\"'; 
6214   2BC9 FA FF FF      lea d, [bp + -1] ; $s
6215   2BCC 2A            mov b, [d]
6216   2BCD FD 79         mov g, b
6217   2BCF FD 77         inc b
6218   2BD1 FA FF FF      lea d, [bp + -1] ; $s
6219   2BD4 FD 43         mov [d], b
6220   2BD6 FD 27         mov b, g
6221   2BD8 D8            push b
6222   2BD9 26 22 00      mov b, $22
6223   2BDC E7            pop d
6224   2BDD FD 3E         mov [d], bl
6225   2BDF             _switch102_exit:
6226   2BDF 0A FD 2B      jmp _if101_exit
6227   2BE2             _if101_else:
6228   2BE2             ;; *s++ = *t; 
6229   2BE2 FA FF FF      lea d, [bp + -1] ; $s
6230   2BE5 2A            mov b, [d]
6231   2BE6 FD 79         mov g, b
6232   2BE8 FD 77         inc b
6233   2BEA FA FF FF      lea d, [bp + -1] ; $s
6234   2BED FD 43         mov [d], b
6235   2BEF FD 27         mov b, g
6236   2BF1 D8            push b
6237   2BF2 FA FD FF      lea d, [bp + -3] ; $t
6238   2BF5 2A            mov b, [d]
6239   2BF6 74            mov d, b
6240   2BF7 32            mov bl, [d]
6241   2BF8 A7 00         mov bh, 0
6242   2BFA E7            pop d
6243   2BFB FD 3E         mov [d], bl
6244   2BFD             _if101_exit:
6245   2BFD 0A 72 2C      jmp _if100_exit
6246   2C00             _if100_else:
6247   2C00             ;; if(toktype == STRING_CONST){ 
6248   2C00             _if103_cond:
6249   2C00 3B 81 33      mov d, _toktype ; $toktype
6250   2C03 2A            mov b, [d]
6251   2C04             ; START RELATIONAL
6252   2C04 D7            push a
6253   2C05 11            mov a, b
6254   2C06 26 03 00      mov b, 3; STRING_CONST
6255   2C09 B0            cmp a, b
6256   2C0A FD 71         seq ; ==
6257   2C0C E4            pop a
6258   2C0D             ; END RELATIONAL
6259   2C0D C0 00 00      cmp b, 0
6260   2C10 C6 72 2C      je _if103_exit
6261   2C13             _if103_true:
6262   2C13             ;; t++; 
6263   2C13 FA FD FF      lea d, [bp + -3] ; $t
6264   2C16 2A            mov b, [d]
6265   2C17 FD 79         mov g, b
6266   2C19 FD 77         inc b
6267   2C1B FA FD FF      lea d, [bp + -3] ; $t
6268   2C1E FD 43         mov [d], b
6269   2C20 FD 27         mov b, g
6270   2C22             ;; while(*t != '\"' && *t){ 
6271   2C22             _while104_cond:
6272   2C22 FA FD FF      lea d, [bp + -3] ; $t
6273   2C25 2A            mov b, [d]
6274   2C26 74            mov d, b
6275   2C27 32            mov bl, [d]
6276   2C28 A7 00         mov bh, 0
6277   2C2A             ; START RELATIONAL
6278   2C2A D7            push a
6279   2C2B 11            mov a, b
6280   2C2C 26 22 00      mov b, $22
6281   2C2F B0            cmp a, b
6282   2C30 FD 72         sneq ; !=
6283   2C32 E4            pop a
6284   2C33             ; END RELATIONAL
6285   2C33 D7            push a
6286   2C34 11            mov a, b
6287   2C35 FA FD FF      lea d, [bp + -3] ; $t
6288   2C38 2A            mov b, [d]
6289   2C39 74            mov d, b
6290   2C3A 32            mov bl, [d]
6291   2C3B A7 00         mov bh, 0
6292   2C3D FD A7         sand a, b ; &&
6293   2C3F E4            pop a
6294   2C40 C0 00 00      cmp b, 0
6295   2C43 C6 6F 2C      je _while104_exit
6296   2C46             _while104_block:
6297   2C46             ;; *s++ = *t++; 
6298   2C46 FA FF FF      lea d, [bp + -1] ; $s
6299   2C49 2A            mov b, [d]
6300   2C4A FD 79         mov g, b
6301   2C4C FD 77         inc b
6302   2C4E FA FF FF      lea d, [bp + -1] ; $s
6303   2C51 FD 43         mov [d], b
6304   2C53 FD 27         mov b, g
6305   2C55 D8            push b
6306   2C56 FA FD FF      lea d, [bp + -3] ; $t
6307   2C59 2A            mov b, [d]
6308   2C5A FD 79         mov g, b
6309   2C5C FD 77         inc b
6310   2C5E FA FD FF      lea d, [bp + -3] ; $t
6311   2C61 FD 43         mov [d], b
6312   2C63 FD 27         mov b, g
6313   2C65 74            mov d, b
6314   2C66 32            mov bl, [d]
6315   2C67 A7 00         mov bh, 0
6316   2C69 E7            pop d
6317   2C6A FD 3E         mov [d], bl
6318   2C6C 0A 22 2C      jmp _while104_cond
6319   2C6F             _while104_exit:
6320   2C6F 0A 72 2C      jmp _if103_exit
6321   2C72             _if103_exit:
6322   2C72             _if100_exit:
6323   2C72             ;; *s = '\0'; 
6324   2C72 FA FF FF      lea d, [bp + -1] ; $s
6325   2C75 2A            mov b, [d]
6326   2C76 D8            push b
6327   2C77 26 00 00      mov b, $0
6328   2C7A E7            pop d
6329   2C7B FD 3E         mov [d], bl
6330   2C7D F9            leave
6331   2C7E 09            ret
6332   2C7F             
6333   2C7F             error:
6334   2C7F F8 00 00      enter 0 ; (push bp; mov bp, sp)
6335   2C82             ;; printf("\nError: "); 
6336   2C82 26 9A 3C      mov b, __s15 ; "\nError: "
6337   2C85 FD AB         swp b
6338   2C87 D8            push b
6339   2C88 07 7B 0F      call printf
6340   2C8B 51 02 00      add sp, 2
6341   2C8E             ;; printf(msg); 
6342   2C8E FA 05 00      lea d, [bp + 5] ; $msg
6343   2C91 2A            mov b, [d]
6344   2C92 FD AB         swp b
6345   2C94 D8            push b
6346   2C95 07 7B 0F      call printf
6347   2C98 51 02 00      add sp, 2
6348   2C9B             ;; printf("\n"); 
6349   2C9B 26 81 3C      mov b, __s13 ; "\n"
6350   2C9E FD AB         swp b
6351   2CA0 D8            push b
6352   2CA1 07 7B 0F      call printf
6353   2CA4 51 02 00      add sp, 2
6354   2CA7 F9            leave
6355   2CA8 09            ret
6356   2CA9             
6357   2CA9             last_cmd_insert:
6358   2CA9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6359   2CAC             ;; if(last_cmd[0]){ 
6360   2CAC             _if105_cond:
6361   2CAC 3B 87 3A      mov d, _last_cmd_data ; $last_cmd
6362   2CAF D7            push a
6363   2CB0 DA            push d
6364   2CB1 26 00 00      mov b, $0
6365   2CB4 E7            pop d
6366   2CB5 5A            add d, b
6367   2CB6 E4            pop a
6368   2CB7 32            mov bl, [d]
6369   2CB8 A7 00         mov bh, 0
6370   2CBA C0 00 00      cmp b, 0
6371   2CBD C6 E4 2C      je _if105_exit
6372   2CC0             _if105_true:
6373   2CC0             ;; strcpy(command, last_cmd); 
6374   2CC0 3B 87 35      mov d, _command_data ; $command
6375   2CC3 2D            mov b, d
6376   2CC4 FD AB         swp b
6377   2CC6 D8            push b
6378   2CC7 3B 87 3A      mov d, _last_cmd_data ; $last_cmd
6379   2CCA 2D            mov b, d
6380   2CCB FD AB         swp b
6381   2CCD D8            push b
6382   2CCE 07 26 0D      call strcpy
6383   2CD1 51 04 00      add sp, 4
6384   2CD4             ;; printf(command); 
6385   2CD4 3B 87 35      mov d, _command_data ; $command
6386   2CD7 2D            mov b, d
6387   2CD8 FD AB         swp b
6388   2CDA D8            push b
6389   2CDB 07 7B 0F      call printf
6390   2CDE 51 02 00      add sp, 2
6391   2CE1 0A E4 2C      jmp _if105_exit
6392   2CE4             _if105_exit:
6393   2CE4 F9            leave
6394   2CE5 09            ret
6395   2CE6             
6396   2CE6             new_str_var:
6397   2CE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6398   2CE9             ;; variables[vars_tos].var_type = SHELL_VAR_TYP_STR; 
6399   2CE9 3B 07 3B      mov d, _variables_data ; $variables
6400   2CEC D7            push a
6401   2CED DA            push d
6402   2CEE 3B D9 3B      mov d, _vars_tos ; $vars_tos
6403   2CF1 2A            mov b, [d]
6404   2CF2 E7            pop d
6405   2CF3 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6406   2CF7 E4            pop a
6407   2CF8 58 10 00      add d, 16
6408   2CFB FD 14         clb
6409   2CFD DA            push d
6410   2CFE 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
6411   2D01 E7            pop d
6412   2D02 FD 3E         mov [d], bl
6413   2D04             ;; variables[vars_tos].as_string = alloc(64); 
6414   2D04 3B 07 3B      mov d, _variables_data ; $variables
6415   2D07 D7            push a
6416   2D08 DA            push d
6417   2D09 3B D9 3B      mov d, _vars_tos ; $vars_tos
6418   2D0C 2A            mov b, [d]
6419   2D0D E7            pop d
6420   2D0E FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6421   2D12 E4            pop a
6422   2D13 58 11 00      add d, 17
6423   2D16 FD 14         clb
6424   2D18 DA            push d
6425   2D19 26 40 00      mov b, $40
6426   2D1C FD AB         swp b
6427   2D1E D8            push b
6428   2D1F 07 F0 15      call alloc
6429   2D22 51 02 00      add sp, 2
6430   2D25 E7            pop d
6431   2D26 FD 43         mov [d], b
6432   2D28             ;; strcpy(variables[vars_tos].varname, varname); 
6433   2D28 3B 07 3B      mov d, _variables_data ; $variables
6434   2D2B D7            push a
6435   2D2C DA            push d
6436   2D2D 3B D9 3B      mov d, _vars_tos ; $vars_tos
6437   2D30 2A            mov b, [d]
6438   2D31 E7            pop d
6439   2D32 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6440   2D36 E4            pop a
6441   2D37 58 00 00      add d, 0
6442   2D3A FD 14         clb
6443   2D3C 2D            mov b, d
6444   2D3D FD AB         swp b
6445   2D3F D8            push b
6446   2D40 FA 09 00      lea d, [bp + 9] ; $varname
6447   2D43 2A            mov b, [d]
6448   2D44 FD AB         swp b
6449   2D46 D8            push b
6450   2D47 07 26 0D      call strcpy
6451   2D4A 51 04 00      add sp, 4
6452   2D4D             ;; strcpy(variables[vars_tos].as_string, strval); 
6453   2D4D 3B 07 3B      mov d, _variables_data ; $variables
6454   2D50 D7            push a
6455   2D51 DA            push d
6456   2D52 3B D9 3B      mov d, _vars_tos ; $vars_tos
6457   2D55 2A            mov b, [d]
6458   2D56 E7            pop d
6459   2D57 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6460   2D5B E4            pop a
6461   2D5C 58 11 00      add d, 17
6462   2D5F FD 14         clb
6463   2D61 2A            mov b, [d]
6464   2D62 FD AB         swp b
6465   2D64 D8            push b
6466   2D65 FA 07 00      lea d, [bp + 7] ; $strval
6467   2D68 2A            mov b, [d]
6468   2D69 FD AB         swp b
6469   2D6B D8            push b
6470   2D6C 07 26 0D      call strcpy
6471   2D6F 51 04 00      add sp, 4
6472   2D72             ;; vars_tos++; 
6473   2D72 3B D9 3B      mov d, _vars_tos ; $vars_tos
6474   2D75 2A            mov b, [d]
6475   2D76 FD 79         mov g, b
6476   2D78 FD 77         inc b
6477   2D7A 3B D9 3B      mov d, _vars_tos ; $vars_tos
6478   2D7D FD 43         mov [d], b
6479   2D7F FD 27         mov b, g
6480   2D81             ;; return vars_tos - 1; 
6481   2D81 3B D9 3B      mov d, _vars_tos ; $vars_tos
6482   2D84 2A            mov b, [d]
6483   2D85             ; START TERMS
6484   2D85 D7            push a
6485   2D86 11            mov a, b
6486   2D87 26 01 00      mov b, $1
6487   2D8A 60            sub a, b
6488   2D8B 27            mov b, a
6489   2D8C E4            pop a
6490   2D8D             ; END TERMS
6491   2D8D F9            leave
6492   2D8E 09            ret
6493   2D8F             
6494   2D8F             set_str_var:
6495   2D8F F8 00 00      enter 0 ; (push bp; mov bp, sp)
6496   2D92             ; $var_index 
6497   2D92 52 02 00      sub sp, 2
6498   2D95             ;; for(var_index = 0; var_index < vars_tos; var_index++){ 
6499   2D95             _for106_init:
6500   2D95 FA FF FF      lea d, [bp + -1] ; $var_index
6501   2D98 DA            push d
6502   2D99 26 00 00      mov b, $0
6503   2D9C E7            pop d
6504   2D9D FD 43         mov [d], b
6505   2D9F             _for106_cond:
6506   2D9F FA FF FF      lea d, [bp + -1] ; $var_index
6507   2DA2 2A            mov b, [d]
6508   2DA3             ; START RELATIONAL
6509   2DA3 D7            push a
6510   2DA4 11            mov a, b
6511   2DA5 3B D9 3B      mov d, _vars_tos ; $vars_tos
6512   2DA8 2A            mov b, [d]
6513   2DA9 B0            cmp a, b
6514   2DAA FD 73         slt ; < 
6515   2DAC E4            pop a
6516   2DAD             ; END RELATIONAL
6517   2DAD C0 00 00      cmp b, 0
6518   2DB0 C6 23 2E      je _for106_exit
6519   2DB3             _for106_block:
6520   2DB3             ;; if(!strcmp(variables[var_index].varname, varname)){ 
6521   2DB3             _if107_cond:
6522   2DB3 3B 07 3B      mov d, _variables_data ; $variables
6523   2DB6 D7            push a
6524   2DB7 DA            push d
6525   2DB8 FA FF FF      lea d, [bp + -1] ; $var_index
6526   2DBB 2A            mov b, [d]
6527   2DBC E7            pop d
6528   2DBD FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6529   2DC1 E4            pop a
6530   2DC2 58 00 00      add d, 0
6531   2DC5 FD 14         clb
6532   2DC7 2D            mov b, d
6533   2DC8 FD AB         swp b
6534   2DCA D8            push b
6535   2DCB FA 07 00      lea d, [bp + 7] ; $varname
6536   2DCE 2A            mov b, [d]
6537   2DCF FD AB         swp b
6538   2DD1 D8            push b
6539   2DD2 07 86 0D      call strcmp
6540   2DD5 51 04 00      add sp, 4
6541   2DD8 C0 00 00      cmp b, 0
6542   2DDB FD 71         seq ; !
6543   2DDD C0 00 00      cmp b, 0
6544   2DE0 C6 11 2E      je _if107_exit
6545   2DE3             _if107_true:
6546   2DE3             ;; strcpy(variables[var_index].as_string, strval); 
6547   2DE3 3B 07 3B      mov d, _variables_data ; $variables
6548   2DE6 D7            push a
6549   2DE7 DA            push d
6550   2DE8 FA FF FF      lea d, [bp + -1] ; $var_index
6551   2DEB 2A            mov b, [d]
6552   2DEC E7            pop d
6553   2DED FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6554   2DF1 E4            pop a
6555   2DF2 58 11 00      add d, 17
6556   2DF5 FD 14         clb
6557   2DF7 2A            mov b, [d]
6558   2DF8 FD AB         swp b
6559   2DFA D8            push b
6560   2DFB FA 05 00      lea d, [bp + 5] ; $strval
6561   2DFE 2A            mov b, [d]
6562   2DFF FD AB         swp b
6563   2E01 D8            push b
6564   2E02 07 26 0D      call strcpy
6565   2E05 51 04 00      add sp, 4
6566   2E08             ;; return var_index; 
6567   2E08 FA FF FF      lea d, [bp + -1] ; $var_index
6568   2E0B 2A            mov b, [d]
6569   2E0C F9            leave
6570   2E0D 09            ret
6571   2E0E 0A 11 2E      jmp _if107_exit
6572   2E11             _if107_exit:
6573   2E11             _for106_update:
6574   2E11 FA FF FF      lea d, [bp + -1] ; $var_index
6575   2E14 2A            mov b, [d]
6576   2E15 FD 79         mov g, b
6577   2E17 FD 77         inc b
6578   2E19 FA FF FF      lea d, [bp + -1] ; $var_index
6579   2E1C FD 43         mov [d], b
6580   2E1E FD 27         mov b, g
6581   2E20 0A 9F 2D      jmp _for106_cond
6582   2E23             _for106_exit:
6583   2E23             ;; printf("Error: Variable does not exist."); 
6584   2E23 26 A3 3C      mov b, __s16 ; "Error: Variable does not exist."
6585   2E26 FD AB         swp b
6586   2E28 D8            push b
6587   2E29 07 7B 0F      call printf
6588   2E2C 51 02 00      add sp, 2
6589   2E2F F9            leave
6590   2E30 09            ret
6591   2E31             
6592   2E31             set_int_var:
6593   2E31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6594   2E34             ; $i 
6595   2E34 52 02 00      sub sp, 2
6596   2E37             ;; for(i = 0; i < vars_tos; i++){ 
6597   2E37             _for108_init:
6598   2E37 FA FF FF      lea d, [bp + -1] ; $i
6599   2E3A DA            push d
6600   2E3B 26 00 00      mov b, $0
6601   2E3E E7            pop d
6602   2E3F FD 43         mov [d], b
6603   2E41             _for108_cond:
6604   2E41 FA FF FF      lea d, [bp + -1] ; $i
6605   2E44 2A            mov b, [d]
6606   2E45             ; START RELATIONAL
6607   2E45 D7            push a
6608   2E46 11            mov a, b
6609   2E47 3B D9 3B      mov d, _vars_tos ; $vars_tos
6610   2E4A 2A            mov b, [d]
6611   2E4B B0            cmp a, b
6612   2E4C FD 73         slt ; < 
6613   2E4E E4            pop a
6614   2E4F             ; END RELATIONAL
6615   2E4F C0 00 00      cmp b, 0
6616   2E52 C6 BC 2E      je _for108_exit
6617   2E55             _for108_block:
6618   2E55             ;; if(!strcmp(variables[i].varname, varname)){ 
6619   2E55             _if109_cond:
6620   2E55 3B 07 3B      mov d, _variables_data ; $variables
6621   2E58 D7            push a
6622   2E59 DA            push d
6623   2E5A FA FF FF      lea d, [bp + -1] ; $i
6624   2E5D 2A            mov b, [d]
6625   2E5E E7            pop d
6626   2E5F FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6627   2E63 E4            pop a
6628   2E64 58 00 00      add d, 0
6629   2E67 FD 14         clb
6630   2E69 2D            mov b, d
6631   2E6A FD AB         swp b
6632   2E6C D8            push b
6633   2E6D FA 07 00      lea d, [bp + 7] ; $varname
6634   2E70 2A            mov b, [d]
6635   2E71 FD AB         swp b
6636   2E73 D8            push b
6637   2E74 07 86 0D      call strcmp
6638   2E77 51 04 00      add sp, 4
6639   2E7A C0 00 00      cmp b, 0
6640   2E7D FD 71         seq ; !
6641   2E7F C0 00 00      cmp b, 0
6642   2E82 C6 AA 2E      je _if109_exit
6643   2E85             _if109_true:
6644   2E85             ;; variables[vars_tos].as_int = as_int; 
6645   2E85 3B 07 3B      mov d, _variables_data ; $variables
6646   2E88 D7            push a
6647   2E89 DA            push d
6648   2E8A 3B D9 3B      mov d, _vars_tos ; $vars_tos
6649   2E8D 2A            mov b, [d]
6650   2E8E E7            pop d
6651   2E8F FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6652   2E93 E4            pop a
6653   2E94 58 13 00      add d, 19
6654   2E97 FD 14         clb
6655   2E99 DA            push d
6656   2E9A FA 05 00      lea d, [bp + 5] ; $as_int
6657   2E9D 2A            mov b, [d]
6658   2E9E E7            pop d
6659   2E9F FD 43         mov [d], b
6660   2EA1             ;; return i; 
6661   2EA1 FA FF FF      lea d, [bp + -1] ; $i
6662   2EA4 2A            mov b, [d]
6663   2EA5 F9            leave
6664   2EA6 09            ret
6665   2EA7 0A AA 2E      jmp _if109_exit
6666   2EAA             _if109_exit:
6667   2EAA             _for108_update:
6668   2EAA FA FF FF      lea d, [bp + -1] ; $i
6669   2EAD 2A            mov b, [d]
6670   2EAE FD 79         mov g, b
6671   2EB0 FD 77         inc b
6672   2EB2 FA FF FF      lea d, [bp + -1] ; $i
6673   2EB5 FD 43         mov [d], b
6674   2EB7 FD 27         mov b, g
6675   2EB9 0A 41 2E      jmp _for108_cond
6676   2EBC             _for108_exit:
6677   2EBC             ;; variables[vars_tos].var_type = SHELL_VAR_TYP_INT; 
6678   2EBC 3B 07 3B      mov d, _variables_data ; $variables
6679   2EBF D7            push a
6680   2EC0 DA            push d
6681   2EC1 3B D9 3B      mov d, _vars_tos ; $vars_tos
6682   2EC4 2A            mov b, [d]
6683   2EC5 E7            pop d
6684   2EC6 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6685   2ECA E4            pop a
6686   2ECB 58 10 00      add d, 16
6687   2ECE FD 14         clb
6688   2ED0 DA            push d
6689   2ED1 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
6690   2ED4 E7            pop d
6691   2ED5 FD 3E         mov [d], bl
6692   2ED7             ;; strcpy(variables[vars_tos].varname, varname); 
6693   2ED7 3B 07 3B      mov d, _variables_data ; $variables
6694   2EDA D7            push a
6695   2EDB DA            push d
6696   2EDC 3B D9 3B      mov d, _vars_tos ; $vars_tos
6697   2EDF 2A            mov b, [d]
6698   2EE0 E7            pop d
6699   2EE1 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6700   2EE5 E4            pop a
6701   2EE6 58 00 00      add d, 0
6702   2EE9 FD 14         clb
6703   2EEB 2D            mov b, d
6704   2EEC FD AB         swp b
6705   2EEE D8            push b
6706   2EEF FA 07 00      lea d, [bp + 7] ; $varname
6707   2EF2 2A            mov b, [d]
6708   2EF3 FD AB         swp b
6709   2EF5 D8            push b
6710   2EF6 07 26 0D      call strcpy
6711   2EF9 51 04 00      add sp, 4
6712   2EFC             ;; variables[vars_tos].as_int = as_int; 
6713   2EFC 3B 07 3B      mov d, _variables_data ; $variables
6714   2EFF D7            push a
6715   2F00 DA            push d
6716   2F01 3B D9 3B      mov d, _vars_tos ; $vars_tos
6717   2F04 2A            mov b, [d]
6718   2F05 E7            pop d
6719   2F06 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6720   2F0A E4            pop a
6721   2F0B 58 13 00      add d, 19
6722   2F0E FD 14         clb
6723   2F10 DA            push d
6724   2F11 FA 05 00      lea d, [bp + 5] ; $as_int
6725   2F14 2A            mov b, [d]
6726   2F15 E7            pop d
6727   2F16 FD 43         mov [d], b
6728   2F18             ;; vars_tos++; 
6729   2F18 3B D9 3B      mov d, _vars_tos ; $vars_tos
6730   2F1B 2A            mov b, [d]
6731   2F1C FD 79         mov g, b
6732   2F1E FD 77         inc b
6733   2F20 3B D9 3B      mov d, _vars_tos ; $vars_tos
6734   2F23 FD 43         mov [d], b
6735   2F25 FD 27         mov b, g
6736   2F27             ;; return vars_tos - 1; 
6737   2F27 3B D9 3B      mov d, _vars_tos ; $vars_tos
6738   2F2A 2A            mov b, [d]
6739   2F2B             ; START TERMS
6740   2F2B D7            push a
6741   2F2C 11            mov a, b
6742   2F2D 26 01 00      mov b, $1
6743   2F30 60            sub a, b
6744   2F31 27            mov b, a
6745   2F32 E4            pop a
6746   2F33             ; END TERMS
6747   2F33 F9            leave
6748   2F34 09            ret
6749   2F35             
6750   2F35             get_var_index:
6751   2F35 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6752   2F38             ; $i 
6753   2F38 52 02 00      sub sp, 2
6754   2F3B             ;; for(i = 0; i < vars_tos; i++) 
6755   2F3B             _for110_init:
6756   2F3B FA FF FF      lea d, [bp + -1] ; $i
6757   2F3E DA            push d
6758   2F3F 26 00 00      mov b, $0
6759   2F42 E7            pop d
6760   2F43 FD 43         mov [d], b
6761   2F45             _for110_cond:
6762   2F45 FA FF FF      lea d, [bp + -1] ; $i
6763   2F48 2A            mov b, [d]
6764   2F49             ; START RELATIONAL
6765   2F49 D7            push a
6766   2F4A 11            mov a, b
6767   2F4B 3B D9 3B      mov d, _vars_tos ; $vars_tos
6768   2F4E 2A            mov b, [d]
6769   2F4F B0            cmp a, b
6770   2F50 FD 73         slt ; < 
6771   2F52 E4            pop a
6772   2F53             ; END RELATIONAL
6773   2F53 C0 00 00      cmp b, 0
6774   2F56 C6 A4 2F      je _for110_exit
6775   2F59             _for110_block:
6776   2F59             ;; if(!strcmp(variables[i].varname, varname)) return i; 
6777   2F59             _if111_cond:
6778   2F59 3B 07 3B      mov d, _variables_data ; $variables
6779   2F5C D7            push a
6780   2F5D DA            push d
6781   2F5E FA FF FF      lea d, [bp + -1] ; $i
6782   2F61 2A            mov b, [d]
6783   2F62 E7            pop d
6784   2F63 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6785   2F67 E4            pop a
6786   2F68 58 00 00      add d, 0
6787   2F6B FD 14         clb
6788   2F6D 2D            mov b, d
6789   2F6E FD AB         swp b
6790   2F70 D8            push b
6791   2F71 FA 05 00      lea d, [bp + 5] ; $varname
6792   2F74 2A            mov b, [d]
6793   2F75 FD AB         swp b
6794   2F77 D8            push b
6795   2F78 07 86 0D      call strcmp
6796   2F7B 51 04 00      add sp, 4
6797   2F7E C0 00 00      cmp b, 0
6798   2F81 FD 71         seq ; !
6799   2F83 C0 00 00      cmp b, 0
6800   2F86 C6 92 2F      je _if111_exit
6801   2F89             _if111_true:
6802   2F89             ;; return i; 
6803   2F89 FA FF FF      lea d, [bp + -1] ; $i
6804   2F8C 2A            mov b, [d]
6805   2F8D F9            leave
6806   2F8E 09            ret
6807   2F8F 0A 92 2F      jmp _if111_exit
6808   2F92             _if111_exit:
6809   2F92             _for110_update:
6810   2F92 FA FF FF      lea d, [bp + -1] ; $i
6811   2F95 2A            mov b, [d]
6812   2F96 FD 79         mov g, b
6813   2F98 FD 77         inc b
6814   2F9A FA FF FF      lea d, [bp + -1] ; $i
6815   2F9D FD 43         mov [d], b
6816   2F9F FD 27         mov b, g
6817   2FA1 0A 45 2F      jmp _for110_cond
6818   2FA4             _for110_exit:
6819   2FA4             ;; return -1; 
6820   2FA4 26 01 00      mov b, $1
6821   2FA7 FD 97         neg b
6822   2FA9 F9            leave
6823   2FAA 09            ret
6824   2FAB             
6825   2FAB             get_var_type:
6826   2FAB F8 00 00      enter 0 ; (push bp; mov bp, sp)
6827   2FAE             ; $i 
6828   2FAE 52 02 00      sub sp, 2
6829   2FB1             ;; for(i = 0; i < vars_tos; i++) 
6830   2FB1             _for112_init:
6831   2FB1 FA FF FF      lea d, [bp + -1] ; $i
6832   2FB4 DA            push d
6833   2FB5 26 00 00      mov b, $0
6834   2FB8 E7            pop d
6835   2FB9 FD 43         mov [d], b
6836   2FBB             _for112_cond:
6837   2FBB FA FF FF      lea d, [bp + -1] ; $i
6838   2FBE 2A            mov b, [d]
6839   2FBF             ; START RELATIONAL
6840   2FBF D7            push a
6841   2FC0 11            mov a, b
6842   2FC1 3B D9 3B      mov d, _vars_tos ; $vars_tos
6843   2FC4 2A            mov b, [d]
6844   2FC5 B0            cmp a, b
6845   2FC6 FD 73         slt ; < 
6846   2FC8 E4            pop a
6847   2FC9             ; END RELATIONAL
6848   2FC9 C0 00 00      cmp b, 0
6849   2FCC C6 2D 30      je _for112_exit
6850   2FCF             _for112_block:
6851   2FCF             ;; if(!strcmp(variables[i].varname, varname)) return variables[i].var_type; 
6852   2FCF             _if113_cond:
6853   2FCF 3B 07 3B      mov d, _variables_data ; $variables
6854   2FD2 D7            push a
6855   2FD3 DA            push d
6856   2FD4 FA FF FF      lea d, [bp + -1] ; $i
6857   2FD7 2A            mov b, [d]
6858   2FD8 E7            pop d
6859   2FD9 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6860   2FDD E4            pop a
6861   2FDE 58 00 00      add d, 0
6862   2FE1 FD 14         clb
6863   2FE3 2D            mov b, d
6864   2FE4 FD AB         swp b
6865   2FE6 D8            push b
6866   2FE7 FA 05 00      lea d, [bp + 5] ; $varname
6867   2FEA 2A            mov b, [d]
6868   2FEB FD AB         swp b
6869   2FED D8            push b
6870   2FEE 07 86 0D      call strcmp
6871   2FF1 51 04 00      add sp, 4
6872   2FF4 C0 00 00      cmp b, 0
6873   2FF7 FD 71         seq ; !
6874   2FF9 C0 00 00      cmp b, 0
6875   2FFC C6 1B 30      je _if113_exit
6876   2FFF             _if113_true:
6877   2FFF             ;; return variables[i].var_type; 
6878   2FFF 3B 07 3B      mov d, _variables_data ; $variables
6879   3002 D7            push a
6880   3003 DA            push d
6881   3004 FA FF FF      lea d, [bp + -1] ; $i
6882   3007 2A            mov b, [d]
6883   3008 E7            pop d
6884   3009 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6885   300D E4            pop a
6886   300E 58 10 00      add d, 16
6887   3011 FD 14         clb
6888   3013 32            mov bl, [d]
6889   3014 A7 00         mov bh, 0
6890   3016 F9            leave
6891   3017 09            ret
6892   3018 0A 1B 30      jmp _if113_exit
6893   301B             _if113_exit:
6894   301B             _for112_update:
6895   301B FA FF FF      lea d, [bp + -1] ; $i
6896   301E 2A            mov b, [d]
6897   301F FD 79         mov g, b
6898   3021 FD 77         inc b
6899   3023 FA FF FF      lea d, [bp + -1] ; $i
6900   3026 FD 43         mov [d], b
6901   3028 FD 27         mov b, g
6902   302A 0A BB 2F      jmp _for112_cond
6903   302D             _for112_exit:
6904   302D             ;; return -1; 
6905   302D 26 01 00      mov b, $1
6906   3030 FD 97         neg b
6907   3032 F9            leave
6908   3033 09            ret
6909   3034             
6910   3034             show_var:
6911   3034 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6912   3037             ; $i 
6913   3037 52 02 00      sub sp, 2
6914   303A             ;; for(i = 0; i < vars_tos; i++){ 
6915   303A             _for114_init:
6916   303A FA FF FF      lea d, [bp + -1] ; $i
6917   303D DA            push d
6918   303E 26 00 00      mov b, $0
6919   3041 E7            pop d
6920   3042 FD 43         mov [d], b
6921   3044             _for114_cond:
6922   3044 FA FF FF      lea d, [bp + -1] ; $i
6923   3047 2A            mov b, [d]
6924   3048             ; START RELATIONAL
6925   3048 D7            push a
6926   3049 11            mov a, b
6927   304A 3B D9 3B      mov d, _vars_tos ; $vars_tos
6928   304D 2A            mov b, [d]
6929   304E B0            cmp a, b
6930   304F FD 73         slt ; < 
6931   3051 E4            pop a
6932   3052             ; END RELATIONAL
6933   3052 C0 00 00      cmp b, 0
6934   3055 C6 31 31      je _for114_exit
6935   3058             _for114_block:
6936   3058             ;; if(!strcmp(variables[i].varname, varname)){ 
6937   3058             _if115_cond:
6938   3058 3B 07 3B      mov d, _variables_data ; $variables
6939   305B D7            push a
6940   305C DA            push d
6941   305D FA FF FF      lea d, [bp + -1] ; $i
6942   3060 2A            mov b, [d]
6943   3061 E7            pop d
6944   3062 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6945   3066 E4            pop a
6946   3067 58 00 00      add d, 0
6947   306A FD 14         clb
6948   306C 2D            mov b, d
6949   306D FD AB         swp b
6950   306F D8            push b
6951   3070 FA 05 00      lea d, [bp + 5] ; $varname
6952   3073 2A            mov b, [d]
6953   3074 FD AB         swp b
6954   3076 D8            push b
6955   3077 07 86 0D      call strcmp
6956   307A 51 04 00      add sp, 4
6957   307D C0 00 00      cmp b, 0
6958   3080 FD 71         seq ; !
6959   3082 C0 00 00      cmp b, 0
6960   3085 C6 1F 31      je _if115_exit
6961   3088             _if115_true:
6962   3088             ;; if(variables[i].var_type == SHELL_VAR_TYP_INT){ 
6963   3088             _if116_cond:
6964   3088 3B 07 3B      mov d, _variables_data ; $variables
6965   308B D7            push a
6966   308C DA            push d
6967   308D FA FF FF      lea d, [bp + -1] ; $i
6968   3090 2A            mov b, [d]
6969   3091 E7            pop d
6970   3092 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6971   3096 E4            pop a
6972   3097 58 10 00      add d, 16
6973   309A FD 14         clb
6974   309C 32            mov bl, [d]
6975   309D A7 00         mov bh, 0
6976   309F             ; START RELATIONAL
6977   309F D7            push a
6978   30A0 11            mov a, b
6979   30A1 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
6980   30A4 B0            cmp a, b
6981   30A5 FD 71         seq ; ==
6982   30A7 E4            pop a
6983   30A8             ; END RELATIONAL
6984   30A8 C0 00 00      cmp b, 0
6985   30AB C6 CF 30      je _if116_else
6986   30AE             _if116_true:
6987   30AE             ;; printu(variables[i].as_int); 
6988   30AE 3B 07 3B      mov d, _variables_data ; $variables
6989   30B1 D7            push a
6990   30B2 DA            push d
6991   30B3 FA FF FF      lea d, [bp + -1] ; $i
6992   30B6 2A            mov b, [d]
6993   30B7 E7            pop d
6994   30B8 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6995   30BC E4            pop a
6996   30BD 58 13 00      add d, 19
6997   30C0 FD 14         clb
6998   30C2 2A            mov b, [d]
6999   30C3 FD AB         swp b
7000   30C5 D8            push b
7001   30C6 07 81 14      call printu
7002   30C9 51 02 00      add sp, 2
7003   30CC 0A 16 31      jmp _if116_exit
7004   30CF             _if116_else:
7005   30CF             ;; if(variables[i].var_type == SHELL_VAR_TYP_STR){ 
7006   30CF             _if117_cond:
7007   30CF 3B 07 3B      mov d, _variables_data ; $variables
7008   30D2 D7            push a
7009   30D3 DA            push d
7010   30D4 FA FF FF      lea d, [bp + -1] ; $i
7011   30D7 2A            mov b, [d]
7012   30D8 E7            pop d
7013   30D9 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7014   30DD E4            pop a
7015   30DE 58 10 00      add d, 16
7016   30E1 FD 14         clb
7017   30E3 32            mov bl, [d]
7018   30E4 A7 00         mov bh, 0
7019   30E6             ; START RELATIONAL
7020   30E6 D7            push a
7021   30E7 11            mov a, b
7022   30E8 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
7023   30EB B0            cmp a, b
7024   30EC FD 71         seq ; ==
7025   30EE E4            pop a
7026   30EF             ; END RELATIONAL
7027   30EF C0 00 00      cmp b, 0
7028   30F2 C6 16 31      je _if117_exit
7029   30F5             _if117_true:
7030   30F5             ;; printf(variables[i].as_string); 
7031   30F5 3B 07 3B      mov d, _variables_data ; $variables
7032   30F8 D7            push a
7033   30F9 DA            push d
7034   30FA FA FF FF      lea d, [bp + -1] ; $i
7035   30FD 2A            mov b, [d]
7036   30FE E7            pop d
7037   30FF FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7038   3103 E4            pop a
7039   3104 58 11 00      add d, 17
7040   3107 FD 14         clb
7041   3109 2A            mov b, [d]
7042   310A FD AB         swp b
7043   310C D8            push b
7044   310D 07 7B 0F      call printf
7045   3110 51 02 00      add sp, 2
7046   3113 0A 16 31      jmp _if117_exit
7047   3116             _if117_exit:
7048   3116             _if116_exit:
7049   3116             ;; return i; 
7050   3116 FA FF FF      lea d, [bp + -1] ; $i
7051   3119 2A            mov b, [d]
7052   311A F9            leave
7053   311B 09            ret
7054   311C 0A 1F 31      jmp _if115_exit
7055   311F             _if115_exit:
7056   311F             _for114_update:
7057   311F FA FF FF      lea d, [bp + -1] ; $i
7058   3122 2A            mov b, [d]
7059   3123 FD 79         mov g, b
7060   3125 FD 77         inc b
7061   3127 FA FF FF      lea d, [bp + -1] ; $i
7062   312A FD 43         mov [d], b
7063   312C FD 27         mov b, g
7064   312E 0A 44 30      jmp _for114_cond
7065   3131             _for114_exit:
7066   3131             ;; error("Undeclared variable."); 
7067   3131 26 C3 3C      mov b, __s17 ; "Undeclared variable."
7068   3134 FD AB         swp b
7069   3136 D8            push b
7070   3137 07 7F 2C      call error
7071   313A 51 02 00      add sp, 2
7072   313D F9            leave
7073   313E 09            ret
7074   313F             
7075   313F             get_shell_var_strval:
7076   313F F8 00 00      enter 0 ; (push bp; mov bp, sp)
7077   3142             ;; return variables[index].as_string; 
7078   3142 3B 07 3B      mov d, _variables_data ; $variables
7079   3145 D7            push a
7080   3146 DA            push d
7081   3147 FA 05 00      lea d, [bp + 5] ; $index
7082   314A 2A            mov b, [d]
7083   314B E7            pop d
7084   314C FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7085   3150 E4            pop a
7086   3151 58 11 00      add d, 17
7087   3154 FD 14         clb
7088   3156 2A            mov b, [d]
7089   3157 F9            leave
7090   3158 09            ret
7091   3159             
7092   3159             get_shell_var_intval:
7093   3159 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7094   315C             ;; return variables[index].as_int; 
7095   315C 3B 07 3B      mov d, _variables_data ; $variables
7096   315F D7            push a
7097   3160 DA            push d
7098   3161 FA 05 00      lea d, [bp + 5] ; $index
7099   3164 2A            mov b, [d]
7100   3165 E7            pop d
7101   3166 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7102   316A E4            pop a
7103   316B 58 13 00      add d, 19
7104   316E FD 14         clb
7105   3170 2A            mov b, [d]
7106   3171 F9            leave
7107   3172 09            ret
7108   3173             
7109   3173             file_exists:
7110   3173 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7111   3176             ; $file_exists 
7112   3176 52 02 00      sub sp, 2
7113   3179             
7114   3179             ; --- BEGIN INLINE ASM BLOCK
7115   3179 FA 05 00      lea d, [bp + 5] ; $filename
7116   317C FD 2A         mov d, [d]
7117   317E 19 15         mov al, 21
7118   3180 05 04         syscall sys_filesystem
7119   3182 FA FF FF      lea d, [bp + -1] ; $file_exists
7120   3185 43            mov [d], a
7121   3186             ; --- END INLINE ASM BLOCK
7122   3186             
7123   3186             ;; return file_exists; 
7124   3186 FA FF FF      lea d, [bp + -1] ; $file_exists
7125   3189 2A            mov b, [d]
7126   318A F9            leave
7127   318B 09            ret
7128   318C             
7129   318C             command_cd:
7130   318C F8 00 00      enter 0 ; (push bp; mov bp, sp)
7131   318F             ; $dirID 
7132   318F 52 02 00      sub sp, 2
7133   3192             ;; *path = '\0'; 
7134   3192 3B 87 37      mov d, _path_data ; $path
7135   3195 2D            mov b, d
7136   3196 D8            push b
7137   3197 26 00 00      mov b, $0
7138   319A E7            pop d
7139   319B FD 3E         mov [d], bl
7140   319D             ;; get(); 
7141   319D 07 58 1C      call get
7142   31A0             ;; if(toktype == END || tok == SEMICOLON || tok == BITWISE_NOT){ 
7143   31A0             _if118_cond:
7144   31A0 3B 81 33      mov d, _toktype ; $toktype
7145   31A3 2A            mov b, [d]
7146   31A4             ; START RELATIONAL
7147   31A4 D7            push a
7148   31A5 11            mov a, b
7149   31A6 26 06 00      mov b, 6; END
7150   31A9 B0            cmp a, b
7151   31AA FD 71         seq ; ==
7152   31AC E4            pop a
7153   31AD             ; END RELATIONAL
7154   31AD D7            push a
7155   31AE 11            mov a, b
7156   31AF 3B 7F 33      mov d, _tok ; $tok
7157   31B2 2A            mov b, [d]
7158   31B3             ; START RELATIONAL
7159   31B3 D7            push a
7160   31B4 11            mov a, b
7161   31B5 26 23 00      mov b, 35; SEMICOLON
7162   31B8 B0            cmp a, b
7163   31B9 FD 71         seq ; ==
7164   31BB E4            pop a
7165   31BC             ; END RELATIONAL
7166   31BC FD A8         sor a, b ; ||
7167   31BE 11            mov a, b
7168   31BF 3B 7F 33      mov d, _tok ; $tok
7169   31C2 2A            mov b, [d]
7170   31C3             ; START RELATIONAL
7171   31C3 D7            push a
7172   31C4 11            mov a, b
7173   31C5 26 19 00      mov b, 25; BITWISE_NOT
7174   31C8 B0            cmp a, b
7175   31C9 FD 71         seq ; ==
7176   31CB E4            pop a
7177   31CC             ; END RELATIONAL
7178   31CC FD A8         sor a, b ; ||
7179   31CE E4            pop a
7180   31CF C0 00 00      cmp b, 0
7181   31D2 C6 F8 31      je _if118_else
7182   31D5             _if118_true:
7183   31D5             ;; back(); 
7184   31D5 07 8C 1A      call back
7185   31D8             ;; cd_to_dir(variables[1].as_string); 
7186   31D8 3B 07 3B      mov d, _variables_data ; $variables
7187   31DB D7            push a
7188   31DC DA            push d
7189   31DD 26 01 00      mov b, $1
7190   31E0 E7            pop d
7191   31E1 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7192   31E5 E4            pop a
7193   31E6 58 11 00      add d, 17
7194   31E9 FD 14         clb
7195   31EB 2A            mov b, [d]
7196   31EC FD AB         swp b
7197   31EE D8            push b
7198   31EF 07 56 32      call cd_to_dir
7199   31F2 51 02 00      add sp, 2
7200   31F5 0A 54 32      jmp _if118_exit
7201   31F8             _if118_else:
7202   31F8             ;; for(;;){ 
7203   31F8             _for119_init:
7204   31F8             _for119_cond:
7205   31F8             _for119_block:
7206   31F8             ;; strcat(path, token); 
7207   31F8 3B 87 37      mov d, _path_data ; $path
7208   31FB 2D            mov b, d
7209   31FC FD AB         swp b
7210   31FE D8            push b
7211   31FF 3B 85 33      mov d, _token_data ; $token
7212   3202 2D            mov b, d
7213   3203 FD AB         swp b
7214   3205 D8            push b
7215   3206 07 EA 0D      call strcat
7216   3209 51 04 00      add sp, 4
7217   320C             ;; get(); 
7218   320C 07 58 1C      call get
7219   320F             ;; if(toktype == END) break; 
7220   320F             _if120_cond:
7221   320F 3B 81 33      mov d, _toktype ; $toktype
7222   3212 2A            mov b, [d]
7223   3213             ; START RELATIONAL
7224   3213 D7            push a
7225   3214 11            mov a, b
7226   3215 26 06 00      mov b, 6; END
7227   3218 B0            cmp a, b
7228   3219 FD 71         seq ; ==
7229   321B E4            pop a
7230   321C             ; END RELATIONAL
7231   321C C0 00 00      cmp b, 0
7232   321F C6 28 32      je _if120_else
7233   3222             _if120_true:
7234   3222             ;; break; 
7235   3222 0A 47 32      jmp _for119_exit ; for break
7236   3225 0A 44 32      jmp _if120_exit
7237   3228             _if120_else:
7238   3228             ;; if(tok == SEMICOLON){ 
7239   3228             _if121_cond:
7240   3228 3B 7F 33      mov d, _tok ; $tok
7241   322B 2A            mov b, [d]
7242   322C             ; START RELATIONAL
7243   322C D7            push a
7244   322D 11            mov a, b
7245   322E 26 23 00      mov b, 35; SEMICOLON
7246   3231 B0            cmp a, b
7247   3232 FD 71         seq ; ==
7248   3234 E4            pop a
7249   3235             ; END RELATIONAL
7250   3235 C0 00 00      cmp b, 0
7251   3238 C6 44 32      je _if121_exit
7252   323B             _if121_true:
7253   323B             ;; back(); 
7254   323B 07 8C 1A      call back
7255   323E             ;; break; 
7256   323E 0A 47 32      jmp _for119_exit ; for break
7257   3241 0A 44 32      jmp _if121_exit
7258   3244             _if121_exit:
7259   3244             _if120_exit:
7260   3244             _for119_update:
7261   3244 0A F8 31      jmp _for119_cond
7262   3247             _for119_exit:
7263   3247             ;; cd_to_dir(path); 
7264   3247 3B 87 37      mov d, _path_data ; $path
7265   324A 2D            mov b, d
7266   324B FD AB         swp b
7267   324D D8            push b
7268   324E 07 56 32      call cd_to_dir
7269   3251 51 02 00      add sp, 2
7270   3254             _if118_exit:
7271   3254 F9            leave
7272   3255 09            ret
7273   3256             
7274   3256             cd_to_dir:
7275   3256 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7276   3259             ; $dirID 
7277   3259 52 02 00      sub sp, 2
7278   325C             
7279   325C             ; --- BEGIN INLINE ASM BLOCK
7280   325C FA 05 00      lea d, [bp + 5] ; $dir
7281   325F FD 2A         mov d, [d]
7282   3261 19 13         mov al, 19
7283   3263 05 04         syscall sys_filesystem 
7284   3265 FA FF FF      lea d, [bp + -1] ; $dirID
7285   3268 FD 2A         mov d, [d]
7286   326A 43            mov [d], a 
7287   326B D7            push a
7288   326C             ; --- END INLINE ASM BLOCK
7289   326C             
7290   326C             ;; if(dirID != -1){ 
7291   326C             _if122_cond:
7292   326C FA FF FF      lea d, [bp + -1] ; $dirID
7293   326F 2A            mov b, [d]
7294   3270             ; START RELATIONAL
7295   3270 D7            push a
7296   3271 11            mov a, b
7297   3272 26 01 00      mov b, $1
7298   3275 FD 97         neg b
7299   3277 B0            cmp a, b
7300   3278 FD 72         sneq ; !=
7301   327A E4            pop a
7302   327B             ; END RELATIONAL
7303   327B C0 00 00      cmp b, 0
7304   327E C6 8A 32      je _if122_else
7305   3281             _if122_true:
7306   3281             
7307   3281             ; --- BEGIN INLINE ASM BLOCK
7308   3281 E4            pop a
7309   3282 27            mov b, a
7310   3283 19 03         mov al, 3
7311   3285 05 04         syscall sys_filesystem
7312   3287             ; --- END INLINE ASM BLOCK
7313   3287             
7314   3287 0A 8B 32      jmp _if122_exit
7315   328A             _if122_else:
7316   328A             
7317   328A             ; --- BEGIN INLINE ASM BLOCK
7318   328A E4            pop a
7319   328B             ; --- END INLINE ASM BLOCK
7320   328B             
7321   328B             _if122_exit:
7322   328B F9            leave
7323   328C 09            ret
7324   328D             
7325   328D             print_cwd:
7326   328D F8 00 00      enter 0 ; (push bp; mov bp, sp)
7327   3290             
7328   3290             ; --- BEGIN INLINE ASM BLOCK
7329   3290 19 12         mov al, 18
7330   3292 05 04         syscall sys_filesystem        
7331   3294             ; --- END INLINE ASM BLOCK
7332   3294             
7333   3294 F9            leave
7334   3295 09            ret
7335   3296             
7336   3296             spawn_new_proc:
7337   3296 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7338   3299             
7339   3299             ; --- BEGIN INLINE ASM BLOCK
7340   3299 FA 05 00      lea d, [bp + 5] ; $args
7341   329C 2A            mov b, [d]
7342   329D FA 07 00      lea d, [bp + 7] ; $executable_path
7343   32A0 FD 2A         mov d, [d]
7344   32A2 05 05         syscall sys_spawn_proc
7345   32A4             ; --- END INLINE ASM BLOCK
7346   32A4             
7347   32A4 F9            leave
7348   32A5 09            ret
7349   32A6             
7350   32A6             command_shell:
7351   32A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7352   32A9 F9            leave
7353   32AA 09            ret
7354   32AB             
7355   32AB             command_fg:
7356   32AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
7357   32AE F9            leave
7358   32AF 09            ret
7359   32B0             
7360   32B0             read_config:
7361   32B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7362   32B3             ;; transient_area = alloc(16385); 
7363   32B3 3B 85 35      mov d, _transient_area ; $transient_area
7364   32B6 DA            push d
7365   32B7 26 01 40      mov b, $4001
7366   32BA FD AB         swp b
7367   32BC D8            push b
7368   32BD 07 F0 15      call alloc
7369   32C0 51 02 00      add sp, 2
7370   32C3 E7            pop d
7371   32C4 FD 43         mov [d], b
7372   32C6             ;; *value = '\0'; 
7373   32C6 FA 05 00      lea d, [bp + 5] ; $value
7374   32C9 2A            mov b, [d]
7375   32CA D8            push b
7376   32CB 26 00 00      mov b, $0
7377   32CE E7            pop d
7378   32CF FD 3E         mov [d], bl
7379   32D1             ;; loadfile(filename, transient_area); 
7380   32D1 FA 09 00      lea d, [bp + 9] ; $filename
7381   32D4 2A            mov b, [d]
7382   32D5 FD AB         swp b
7383   32D7 D8            push b
7384   32D8 3B 85 35      mov d, _transient_area ; $transient_area
7385   32DB 2A            mov b, [d]
7386   32DC FD AB         swp b
7387   32DE D8            push b
7388   32DF 07 C2 15      call loadfile
7389   32E2 51 04 00      add sp, 4
7390   32E5             ;; prog = transient_area; 
7391   32E5 3B 83 33      mov d, _prog ; $prog
7392   32E8 DA            push d
7393   32E9 3B 85 35      mov d, _transient_area ; $transient_area
7394   32EC 2A            mov b, [d]
7395   32ED E7            pop d
7396   32EE FD 43         mov [d], b
7397   32F0             ;; for(;;){ 
7398   32F0             _for123_init:
7399   32F0             _for123_cond:
7400   32F0             _for123_block:
7401   32F0             ;; get(); 
7402   32F0 07 58 1C      call get
7403   32F3             ;; if(toktype == END) break; 
7404   32F3             _if124_cond:
7405   32F3 3B 81 33      mov d, _toktype ; $toktype
7406   32F6 2A            mov b, [d]
7407   32F7             ; START RELATIONAL
7408   32F7 D7            push a
7409   32F8 11            mov a, b
7410   32F9 26 06 00      mov b, 6; END
7411   32FC B0            cmp a, b
7412   32FD FD 71         seq ; ==
7413   32FF E4            pop a
7414   3300             ; END RELATIONAL
7415   3300 C0 00 00      cmp b, 0
7416   3303 C6 0C 33      je _if124_exit
7417   3306             _if124_true:
7418   3306             ;; break; 
7419   3306 0A 71 33      jmp _for123_exit ; for break
7420   3309 0A 0C 33      jmp _if124_exit
7421   330C             _if124_exit:
7422   330C             ;; if(!strcmp(entry_name, token)){ 
7423   330C             _if125_cond:
7424   330C FA 07 00      lea d, [bp + 7] ; $entry_name
7425   330F 2A            mov b, [d]
7426   3310 FD AB         swp b
7427   3312 D8            push b
7428   3313 3B 85 33      mov d, _token_data ; $token
7429   3316 2D            mov b, d
7430   3317 FD AB         swp b
7431   3319 D8            push b
7432   331A 07 86 0D      call strcmp
7433   331D 51 04 00      add sp, 4
7434   3320 C0 00 00      cmp b, 0
7435   3323 FD 71         seq ; !
7436   3325 C0 00 00      cmp b, 0
7437   3328 C6 6E 33      je _if125_exit
7438   332B             _if125_true:
7439   332B             ;; get(); // get '=' 
7440   332B 07 58 1C      call get
7441   332E             ;; for(;;){ 
7442   332E             _for126_init:
7443   332E             _for126_cond:
7444   332E             _for126_block:
7445   332E             ;; get(); 
7446   332E 07 58 1C      call get
7447   3331             ;; if(!strcmp(token, ";")) return; 
7448   3331             _if127_cond:
7449   3331 3B 85 33      mov d, _token_data ; $token
7450   3334 2D            mov b, d
7451   3335 FD AB         swp b
7452   3337 D8            push b
7453   3338 26 D8 3C      mov b, __s18 ; ";"
7454   333B FD AB         swp b
7455   333D D8            push b
7456   333E 07 86 0D      call strcmp
7457   3341 51 04 00      add sp, 4
7458   3344 C0 00 00      cmp b, 0
7459   3347 FD 71         seq ; !
7460   3349 C0 00 00      cmp b, 0
7461   334C C6 54 33      je _if127_exit
7462   334F             _if127_true:
7463   334F             ;; return; 
7464   334F F9            leave
7465   3350 09            ret
7466   3351 0A 54 33      jmp _if127_exit
7467   3354             _if127_exit:
7468   3354             ;; strcat(value, token); 
7469   3354 FA 05 00      lea d, [bp + 5] ; $value
7470   3357 2A            mov b, [d]
7471   3358 FD AB         swp b
7472   335A D8            push b
7473   335B 3B 85 33      mov d, _token_data ; $token
7474   335E 2D            mov b, d
7475   335F FD AB         swp b
7476   3361 D8            push b
7477   3362 07 EA 0D      call strcat
7478   3365 51 04 00      add sp, 4
7479   3368             _for126_update:
7480   3368 0A 2E 33      jmp _for126_cond
7481   336B             _for126_exit:
7482   336B 0A 6E 33      jmp _if125_exit
7483   336E             _if125_exit:
7484   336E             _for123_update:
7485   336E 0A F0 32      jmp _for123_cond
7486   3371             _for123_exit:
7487   3371             ;; free(16385); 
7488   3371 26 01 40      mov b, $4001
7489   3374 FD AB         swp b
7490   3376 D8            push b
7491   3377 07 16 16      call free
7492   337A 51 02 00      add sp, 2
7493   337D F9            leave
7494   337E 09            ret
7495   337F             ; --- END TEXT BLOCK
7496   337F             
7497   337F             ; --- BEGIN DATA BLOCK
7498   337F 00 00       _tok: .fill 2, 0
7499   3381 00 00       _toktype: .fill 2, 0
7500   3383 00 00       _prog: .fill 2, 0
7501   3385 00 00 00 00 _token_data: .fill 256, 0
7501   3389 00 00 00 00 
7501   338D 00 00 00 00 
7501   3391 00 00 00 00 
7501   3395 00 00 00 00 
7501   3399 00 00 00 00 
7501   339D 00 00 00 00 
7501   33A1 00 00 00 00 
7501   33A5 00 00 00 00 
7501   33A9 00 00 00 00 
7501   33AD 00 00 00 00 
7501   33B1 00 00 00 00 
7501   33B5 00 00 00 00 
7501   33B9 00 00 00 00 
7501   33BD 00 00 00 00 
7501   33C1 00 00 00 00 
7501   33C5 00 00 00 00 
7501   33C9 00 00 00 00 
7501   33CD 00 00 00 00 
7501   33D1 00 00 00 00 
7501   33D5 00 00 00 00 
7501   33D9 00 00 00 00 
7501   33DD 00 00 00 00 
7501   33E1 00 00 00 00 
7501   33E5 00 00 00 00 
7501   33E9 00 00 00 00 
7501   33ED 00 00 00 00 
7501   33F1 00 00 00 00 
7501   33F5 00 00 00 00 
7501   33F9 00 00 00 00 
7501   33FD 00 00 00 00 
7501   3401 00 00 00 00 
7501   3405 00 00 00 00 
7501   3409 00 00 00 00 
7501   340D 00 00 00 00 
7501   3411 00 00 00 00 
7501   3415 00 00 00 00 
7501   3419 00 00 00 00 
7501   341D 00 00 00 00 
7501   3421 00 00 00 00 
7501   3425 00 00 00 00 
7501   3429 00 00 00 00 
7501   342D 00 00 00 00 
7501   3431 00 00 00 00 
7501   3435 00 00 00 00 
7501   3439 00 00 00 00 
7501   343D 00 00 00 00 
7501   3441 00 00 00 00 
7501   3445 00 00 00 00 
7501   3449 00 00 00 00 
7501   344D 00 00 00 00 
7501   3451 00 00 00 00 
7501   3455 00 00 00 00 
7501   3459 00 00 00 00 
7501   345D 00 00 00 00 
7501   3461 00 00 00 00 
7501   3465 00 00 00 00 
7501   3469 00 00 00 00 
7501   346D 00 00 00 00 
7501   3471 00 00 00 00 
7501   3475 00 00 00 00 
7501   3479 00 00 00 00 
7501   347D 00 00 00 00 
7501   3481 00 00 00 00 
7502   3485 00 00 00 00 _string_const_data: .fill 256, 0
7502   3489 00 00 00 00 
7502   348D 00 00 00 00 
7502   3491 00 00 00 00 
7502   3495 00 00 00 00 
7502   3499 00 00 00 00 
7502   349D 00 00 00 00 
7502   34A1 00 00 00 00 
7502   34A5 00 00 00 00 
7502   34A9 00 00 00 00 
7502   34AD 00 00 00 00 
7502   34B1 00 00 00 00 
7502   34B5 00 00 00 00 
7502   34B9 00 00 00 00 
7502   34BD 00 00 00 00 
7502   34C1 00 00 00 00 
7502   34C5 00 00 00 00 
7502   34C9 00 00 00 00 
7502   34CD 00 00 00 00 
7502   34D1 00 00 00 00 
7502   34D5 00 00 00 00 
7502   34D9 00 00 00 00 
7502   34DD 00 00 00 00 
7502   34E1 00 00 00 00 
7502   34E5 00 00 00 00 
7502   34E9 00 00 00 00 
7502   34ED 00 00 00 00 
7502   34F1 00 00 00 00 
7502   34F5 00 00 00 00 
7502   34F9 00 00 00 00 
7502   34FD 00 00 00 00 
7502   3501 00 00 00 00 
7502   3505 00 00 00 00 
7502   3509 00 00 00 00 
7502   350D 00 00 00 00 
7502   3511 00 00 00 00 
7502   3515 00 00 00 00 
7502   3519 00 00 00 00 
7502   351D 00 00 00 00 
7502   3521 00 00 00 00 
7502   3525 00 00 00 00 
7502   3529 00 00 00 00 
7502   352D 00 00 00 00 
7502   3531 00 00 00 00 
7502   3535 00 00 00 00 
7502   3539 00 00 00 00 
7502   353D 00 00 00 00 
7502   3541 00 00 00 00 
7502   3545 00 00 00 00 
7502   3549 00 00 00 00 
7502   354D 00 00 00 00 
7502   3551 00 00 00 00 
7502   3555 00 00 00 00 
7502   3559 00 00 00 00 
7502   355D 00 00 00 00 
7502   3561 00 00 00 00 
7502   3565 00 00 00 00 
7502   3569 00 00 00 00 
7502   356D 00 00 00 00 
7502   3571 00 00 00 00 
7502   3575 00 00 00 00 
7502   3579 00 00 00 00 
7502   357D 00 00 00 00 
7502   3581 00 00 00 00 
7503   3585 00 00       _transient_area: .fill 2, 0
7504   3587 00 00 00 00 _command_data: .fill 512, 0
7504   358B 00 00 00 00 
7504   358F 00 00 00 00 
7504   3593 00 00 00 00 
7504   3597 00 00 00 00 
7504   359B 00 00 00 00 
7504   359F 00 00 00 00 
7504   35A3 00 00 00 00 
7504   35A7 00 00 00 00 
7504   35AB 00 00 00 00 
7504   35AF 00 00 00 00 
7504   35B3 00 00 00 00 
7504   35B7 00 00 00 00 
7504   35BB 00 00 00 00 
7504   35BF 00 00 00 00 
7504   35C3 00 00 00 00 
7504   35C7 00 00 00 00 
7504   35CB 00 00 00 00 
7504   35CF 00 00 00 00 
7504   35D3 00 00 00 00 
7504   35D7 00 00 00 00 
7504   35DB 00 00 00 00 
7504   35DF 00 00 00 00 
7504   35E3 00 00 00 00 
7504   35E7 00 00 00 00 
7504   35EB 00 00 00 00 
7504   35EF 00 00 00 00 
7504   35F3 00 00 00 00 
7504   35F7 00 00 00 00 
7504   35FB 00 00 00 00 
7504   35FF 00 00 00 00 
7504   3603 00 00 00 00 
7504   3607 00 00 00 00 
7504   360B 00 00 00 00 
7504   360F 00 00 00 00 
7504   3613 00 00 00 00 
7504   3617 00 00 00 00 
7504   361B 00 00 00 00 
7504   361F 00 00 00 00 
7504   3623 00 00 00 00 
7504   3627 00 00 00 00 
7504   362B 00 00 00 00 
7504   362F 00 00 00 00 
7504   3633 00 00 00 00 
7504   3637 00 00 00 00 
7504   363B 00 00 00 00 
7504   363F 00 00 00 00 
7504   3643 00 00 00 00 
7504   3647 00 00 00 00 
7504   364B 00 00 00 00 
7504   364F 00 00 00 00 
7504   3653 00 00 00 00 
7504   3657 00 00 00 00 
7504   365B 00 00 00 00 
7504   365F 00 00 00 00 
7504   3663 00 00 00 00 
7504   3667 00 00 00 00 
7504   366B 00 00 00 00 
7504   366F 00 00 00 00 
7504   3673 00 00 00 00 
7504   3677 00 00 00 00 
7504   367B 00 00 00 00 
7504   367F 00 00 00 00 
7504   3683 00 00 00 00 
7504   3687 00 00 00 00 
7504   368B 00 00 00 00 
7504   368F 00 00 00 00 
7504   3693 00 00 00 00 
7504   3697 00 00 00 00 
7504   369B 00 00 00 00 
7504   369F 00 00 00 00 
7504   36A3 00 00 00 00 
7504   36A7 00 00 00 00 
7504   36AB 00 00 00 00 
7504   36AF 00 00 00 00 
7504   36B3 00 00 00 00 
7504   36B7 00 00 00 00 
7504   36BB 00 00 00 00 
7504   36BF 00 00 00 00 
7504   36C3 00 00 00 00 
7504   36C7 00 00 00 00 
7504   36CB 00 00 00 00 
7504   36CF 00 00 00 00 
7504   36D3 00 00 00 00 
7504   36D7 00 00 00 00 
7504   36DB 00 00 00 00 
7504   36DF 00 00 00 00 
7504   36E3 00 00 00 00 
7504   36E7 00 00 00 00 
7504   36EB 00 00 00 00 
7504   36EF 00 00 00 00 
7504   36F3 00 00 00 00 
7504   36F7 00 00 00 00 
7504   36FB 00 00 00 00 
7504   36FF 00 00 00 00 
7504   3703 00 00 00 00 
7504   3707 00 00 00 00 
7504   370B 00 00 00 00 
7504   370F 00 00 00 00 
7504   3713 00 00 00 00 
7504   3717 00 00 00 00 
7504   371B 00 00 00 00 
7504   371F 00 00 00 00 
7504   3723 00 00 00 00 
7504   3727 00 00 00 00 
7504   372B 00 00 00 00 
7504   372F 00 00 00 00 
7504   3733 00 00 00 00 
7504   3737 00 00 00 00 
7504   373B 00 00 00 00 
7504   373F 00 00 00 00 
7504   3743 00 00 00 00 
7504   3747 00 00 00 00 
7504   374B 00 00 00 00 
7504   374F 00 00 00 00 
7504   3753 00 00 00 00 
7504   3757 00 00 00 00 
7504   375B 00 00 00 00 
7504   375F 00 00 00 00 
7504   3763 00 00 00 00 
7504   3767 00 00 00 00 
7504   376B 00 00 00 00 
7504   376F 00 00 00 00 
7504   3773 00 00 00 00 
7504   3777 00 00 00 00 
7504   377B 00 00 00 00 
7504   377F 00 00 00 00 
7504   3783 00 00 00 00 
7505   3787 00 00 00 00 _path_data: .fill 256, 0
7505   378B 00 00 00 00 
7505   378F 00 00 00 00 
7505   3793 00 00 00 00 
7505   3797 00 00 00 00 
7505   379B 00 00 00 00 
7505   379F 00 00 00 00 
7505   37A3 00 00 00 00 
7505   37A7 00 00 00 00 
7505   37AB 00 00 00 00 
7505   37AF 00 00 00 00 
7505   37B3 00 00 00 00 
7505   37B7 00 00 00 00 
7505   37BB 00 00 00 00 
7505   37BF 00 00 00 00 
7505   37C3 00 00 00 00 
7505   37C7 00 00 00 00 
7505   37CB 00 00 00 00 
7505   37CF 00 00 00 00 
7505   37D3 00 00 00 00 
7505   37D7 00 00 00 00 
7505   37DB 00 00 00 00 
7505   37DF 00 00 00 00 
7505   37E3 00 00 00 00 
7505   37E7 00 00 00 00 
7505   37EB 00 00 00 00 
7505   37EF 00 00 00 00 
7505   37F3 00 00 00 00 
7505   37F7 00 00 00 00 
7505   37FB 00 00 00 00 
7505   37FF 00 00 00 00 
7505   3803 00 00 00 00 
7505   3807 00 00 00 00 
7505   380B 00 00 00 00 
7505   380F 00 00 00 00 
7505   3813 00 00 00 00 
7505   3817 00 00 00 00 
7505   381B 00 00 00 00 
7505   381F 00 00 00 00 
7505   3823 00 00 00 00 
7505   3827 00 00 00 00 
7505   382B 00 00 00 00 
7505   382F 00 00 00 00 
7505   3833 00 00 00 00 
7505   3837 00 00 00 00 
7505   383B 00 00 00 00 
7505   383F 00 00 00 00 
7505   3843 00 00 00 00 
7505   3847 00 00 00 00 
7505   384B 00 00 00 00 
7505   384F 00 00 00 00 
7505   3853 00 00 00 00 
7505   3857 00 00 00 00 
7505   385B 00 00 00 00 
7505   385F 00 00 00 00 
7505   3863 00 00 00 00 
7505   3867 00 00 00 00 
7505   386B 00 00 00 00 
7505   386F 00 00 00 00 
7505   3873 00 00 00 00 
7505   3877 00 00 00 00 
7505   387B 00 00 00 00 
7505   387F 00 00 00 00 
7505   3883 00 00 00 00 
7506   3887 00 00 00 00 _temp_data: .fill 256, 0
7506   388B 00 00 00 00 
7506   388F 00 00 00 00 
7506   3893 00 00 00 00 
7506   3897 00 00 00 00 
7506   389B 00 00 00 00 
7506   389F 00 00 00 00 
7506   38A3 00 00 00 00 
7506   38A7 00 00 00 00 
7506   38AB 00 00 00 00 
7506   38AF 00 00 00 00 
7506   38B3 00 00 00 00 
7506   38B7 00 00 00 00 
7506   38BB 00 00 00 00 
7506   38BF 00 00 00 00 
7506   38C3 00 00 00 00 
7506   38C7 00 00 00 00 
7506   38CB 00 00 00 00 
7506   38CF 00 00 00 00 
7506   38D3 00 00 00 00 
7506   38D7 00 00 00 00 
7506   38DB 00 00 00 00 
7506   38DF 00 00 00 00 
7506   38E3 00 00 00 00 
7506   38E7 00 00 00 00 
7506   38EB 00 00 00 00 
7506   38EF 00 00 00 00 
7506   38F3 00 00 00 00 
7506   38F7 00 00 00 00 
7506   38FB 00 00 00 00 
7506   38FF 00 00 00 00 
7506   3903 00 00 00 00 
7506   3907 00 00 00 00 
7506   390B 00 00 00 00 
7506   390F 00 00 00 00 
7506   3913 00 00 00 00 
7506   3917 00 00 00 00 
7506   391B 00 00 00 00 
7506   391F 00 00 00 00 
7506   3923 00 00 00 00 
7506   3927 00 00 00 00 
7506   392B 00 00 00 00 
7506   392F 00 00 00 00 
7506   3933 00 00 00 00 
7506   3937 00 00 00 00 
7506   393B 00 00 00 00 
7506   393F 00 00 00 00 
7506   3943 00 00 00 00 
7506   3947 00 00 00 00 
7506   394B 00 00 00 00 
7506   394F 00 00 00 00 
7506   3953 00 00 00 00 
7506   3957 00 00 00 00 
7506   395B 00 00 00 00 
7506   395F 00 00 00 00 
7506   3963 00 00 00 00 
7506   3967 00 00 00 00 
7506   396B 00 00 00 00 
7506   396F 00 00 00 00 
7506   3973 00 00 00 00 
7506   3977 00 00 00 00 
7506   397B 00 00 00 00 
7506   397F 00 00 00 00 
7506   3983 00 00 00 00 
7507   3987 00 00 00 00 _argument_data: .fill 256, 0
7507   398B 00 00 00 00 
7507   398F 00 00 00 00 
7507   3993 00 00 00 00 
7507   3997 00 00 00 00 
7507   399B 00 00 00 00 
7507   399F 00 00 00 00 
7507   39A3 00 00 00 00 
7507   39A7 00 00 00 00 
7507   39AB 00 00 00 00 
7507   39AF 00 00 00 00 
7507   39B3 00 00 00 00 
7507   39B7 00 00 00 00 
7507   39BB 00 00 00 00 
7507   39BF 00 00 00 00 
7507   39C3 00 00 00 00 
7507   39C7 00 00 00 00 
7507   39CB 00 00 00 00 
7507   39CF 00 00 00 00 
7507   39D3 00 00 00 00 
7507   39D7 00 00 00 00 
7507   39DB 00 00 00 00 
7507   39DF 00 00 00 00 
7507   39E3 00 00 00 00 
7507   39E7 00 00 00 00 
7507   39EB 00 00 00 00 
7507   39EF 00 00 00 00 
7507   39F3 00 00 00 00 
7507   39F7 00 00 00 00 
7507   39FB 00 00 00 00 
7507   39FF 00 00 00 00 
7507   3A03 00 00 00 00 
7507   3A07 00 00 00 00 
7507   3A0B 00 00 00 00 
7507   3A0F 00 00 00 00 
7507   3A13 00 00 00 00 
7507   3A17 00 00 00 00 
7507   3A1B 00 00 00 00 
7507   3A1F 00 00 00 00 
7507   3A23 00 00 00 00 
7507   3A27 00 00 00 00 
7507   3A2B 00 00 00 00 
7507   3A2F 00 00 00 00 
7507   3A33 00 00 00 00 
7507   3A37 00 00 00 00 
7507   3A3B 00 00 00 00 
7507   3A3F 00 00 00 00 
7507   3A43 00 00 00 00 
7507   3A47 00 00 00 00 
7507   3A4B 00 00 00 00 
7507   3A4F 00 00 00 00 
7507   3A53 00 00 00 00 
7507   3A57 00 00 00 00 
7507   3A5B 00 00 00 00 
7507   3A5F 00 00 00 00 
7507   3A63 00 00 00 00 
7507   3A67 00 00 00 00 
7507   3A6B 00 00 00 00 
7507   3A6F 00 00 00 00 
7507   3A73 00 00 00 00 
7507   3A77 00 00 00 00 
7507   3A7B 00 00 00 00 
7507   3A7F 00 00 00 00 
7507   3A83 00 00 00 00 
7508   3A87 00 00 00 00 _last_cmd_data: .fill 128, 0
7508   3A8B 00 00 00 00 
7508   3A8F 00 00 00 00 
7508   3A93 00 00 00 00 
7508   3A97 00 00 00 00 
7508   3A9B 00 00 00 00 
7508   3A9F 00 00 00 00 
7508   3AA3 00 00 00 00 
7508   3AA7 00 00 00 00 
7508   3AAB 00 00 00 00 
7508   3AAF 00 00 00 00 
7508   3AB3 00 00 00 00 
7508   3AB7 00 00 00 00 
7508   3ABB 00 00 00 00 
7508   3ABF 00 00 00 00 
7508   3AC3 00 00 00 00 
7508   3AC7 00 00 00 00 
7508   3ACB 00 00 00 00 
7508   3ACF 00 00 00 00 
7508   3AD3 00 00 00 00 
7508   3AD7 00 00 00 00 
7508   3ADB 00 00 00 00 
7508   3ADF 00 00 00 00 
7508   3AE3 00 00 00 00 
7508   3AE7 00 00 00 00 
7508   3AEB 00 00 00 00 
7508   3AEF 00 00 00 00 
7508   3AF3 00 00 00 00 
7508   3AF7 00 00 00 00 
7508   3AFB 00 00 00 00 
7508   3AFF 00 00 00 00 
7508   3B03 00 00 00 00 
7509   3B07 00 00 00 00 _variables_data: .fill 210, 0
7509   3B0B 00 00 00 00 
7509   3B0F 00 00 00 00 
7509   3B13 00 00 00 00 
7509   3B17 00 00 00 00 
7509   3B1B 00 00 00 00 
7509   3B1F 00 00 00 00 
7509   3B23 00 00 00 00 
7509   3B27 00 00 00 00 
7509   3B2B 00 00 00 00 
7509   3B2F 00 00 00 00 
7509   3B33 00 00 00 00 
7509   3B37 00 00 00 00 
7509   3B3B 00 00 00 00 
7509   3B3F 00 00 00 00 
7509   3B43 00 00 00 00 
7509   3B47 00 00 00 00 
7509   3B4B 00 00 00 00 
7509   3B4F 00 00 00 00 
7509   3B53 00 00 00 00 
7509   3B57 00 00 00 00 
7509   3B5B 00 00 00 00 
7509   3B5F 00 00 00 00 
7509   3B63 00 00 00 00 
7509   3B67 00 00 00 00 
7509   3B6B 00 00 00 00 
7509   3B6F 00 00 00 00 
7509   3B73 00 00 00 00 
7509   3B77 00 00 00 00 
7509   3B7B 00 00 00 00 
7509   3B7F 00 00 00 00 
7509   3B83 00 00 00 00 
7509   3B87 00 00 00 00 
7509   3B8B 00 00 00 00 
7509   3B8F 00 00 00 00 
7509   3B93 00 00 00 00 
7509   3B97 00 00 00 00 
7509   3B9B 00 00 00 00 
7509   3B9F 00 00 00 00 
7509   3BA3 00 00 00 00 
7509   3BA7 00 00 00 00 
7509   3BAB 00 00 00 00 
7509   3BAF 00 00 00 00 
7509   3BB3 00 00 00 00 
7509   3BB7 00 00 00 00 
7509   3BBB 00 00 00 00 
7509   3BBF 00 00 00 00 
7509   3BC3 00 00 00 00 
7509   3BC7 00 00 00 00 
7509   3BCB 00 00 00 00 
7509   3BCF 00 00 00 00 
7509   3BD3 00 00 00 00 
7509   3BD7 00 00 
7510   3BD9 00 00       _vars_tos: .fill 2, 0
7511   3BDB 70 61 74 68 __s0: .db "path", 0
7511   3BDF 00 
7512   3BE0 68 6F 6D 65 __s1: .db "home", 0
7512   3BE4 00 
7513   3BE5 2F 65 74 63 __s2: .db "/etc/shell.cfg", 0
7513   3BE9 2F 73 68 65 
7513   3BED 6C 6C 2E 63 
7513   3BF1 66 67 00 
7514   3BF4 72 6F 6F 74 __s3: .db "root@Sol-1:", 0
7514   3BF8 40 53 6F 6C 
7514   3BFC 2D 31 3A 00 
7515   3C00 20 23 20 00 __s4: .db " # ", 0
7516   3C04 0A 0D 00    __s5: .db "\n\r", 0
7517   3C07 63 64 00    __s6: .db "cd", 0
7518   3C0A 73 68 65 6C __s7: .db "shell", 0
7518   3C0E 6C 00 
7519   3C10 31 32 33 00 __s8: .db "123", 0
7520   3C14 2F 00       __s9: .db "/", 0
7521   3C16 55 6E 6B 6E __s10: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
7521   3C1A 6F 77 6E 20 
7521   3C1E 74 79 70 65 
7521   3C22 20 73 69 7A 
7521   3C26 65 20 69 6E 
7521   3C2A 20 76 61 5F 
7521   3C2E 61 72 67 28 
7521   3C32 29 20 63 61 
7521   3C36 6C 6C 2E 20 
7521   3C3A 53 69 7A 65 
7521   3C3E 20 6E 65 65 
7521   3C42 64 73 20 74 
7521   3C46 6F 20 62 65 
7521   3C4A 20 65 69 74 
7521   3C4E 68 65 72 20 
7521   3C52 31 20 6F 72 
7521   3C56 20 32 2E 00 
7522   3C5A 45 72 72 6F __s11: .db "Error: Unknown argument type.\n", 0
7522   3C5E 72 3A 20 55 
7522   3C62 6E 6B 6E 6F 
7522   3C66 77 6E 20 61 
7522   3C6A 72 67 75 6D 
7522   3C6E 65 6E 74 20 
7522   3C72 74 79 70 65 
7522   3C76 2E 0A 00 
7523   3C79 1B 5B 32 4A __s12: .db "\033[2J\033[H", 0
7523   3C7D 1B 5B 48 00 
7524   3C81 0A 00       __s13: .db "\n", 0
7525   3C83 44 6F 75 62 __s14: .db "Double quotes expected", 0
7525   3C87 6C 65 20 71 
7525   3C8B 75 6F 74 65 
7525   3C8F 73 20 65 78 
7525   3C93 70 65 63 74 
7525   3C97 65 64 00 
7526   3C9A 0A 45 72 72 __s15: .db "\nError: ", 0
7526   3C9E 6F 72 3A 20 
7526   3CA2 00 
7527   3CA3 45 72 72 6F __s16: .db "Error: Variable does not exist.", 0
7527   3CA7 72 3A 20 56 
7527   3CAB 61 72 69 61 
7527   3CAF 62 6C 65 20 
7527   3CB3 64 6F 65 73 
7527   3CB7 20 6E 6F 74 
7527   3CBB 20 65 78 69 
7527   3CBF 73 74 2E 00 
7528   3CC3 55 6E 64 65 __s17: .db "Undeclared variable.", 0
7528   3CC7 63 6C 61 72 
7528   3CCB 65 64 20 76 
7528   3CCF 61 72 69 61 
7528   3CD3 62 6C 65 2E 
7528   3CD7 00 
7529   3CD8 3B 00       __s18: .db ";", 0
7530   3CDA             
7531   3CDA DC 3C       _heap_top: .dw _heap
7532   3CDC 00          _heap: .db 0
7533   3CDD             ; --- END DATA BLOCK
7534   3CDD             
7535   3CDD             .end
tasm: Number of errors = 0
