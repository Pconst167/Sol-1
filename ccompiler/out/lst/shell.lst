0001   0000             ; --- FILENAME: ../solarium/usr/bin/shell
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $p 
0011   0408             ; $t 
0012   0408             ; $temp_prog 
0013   0408             ; $varname 
0014   0408             ; $is_assignment 
0015   0408             ; $variable_str 
0016   0408             ; $variable_int 
0017   0408             ; $var_index 
0018   0408             ; $i 
0019   0408 52 8E 00      sub sp, 142
0020   040B             ;; set_string_var("path", "                                                                "); // 64 
0021   040B 26 5A 3B      mov b, __s0 ; "path"
0022   040E FD AB         swp b
0023   0410 D8            push b
0024   0411 26 5F 3B      mov b, __s1 ; "                                                                "
0025   0414 FD AB         swp b
0026   0416 D8            push b
0027   0417 07 64 2C      call set_string_var
0028   041A 51 04 00      add sp, 4
0029   041D             ;; set_string_var("home", "                                                                "); // 64 
0030   041D 26 A0 3B      mov b, __s2 ; "home"
0031   0420 FD AB         swp b
0032   0422 D8            push b
0033   0423 26 5F 3B      mov b, __s1 ; "                                                                "
0034   0426 FD AB         swp b
0035   0428 D8            push b
0036   0429 07 64 2C      call set_string_var
0037   042C 51 04 00      add sp, 4
0038   042F             ;; read_config("/etc/shell.cfg", "path", variables[0].as_string); 
0039   042F 26 A5 3B      mov b, __s3 ; "/etc/shell.cfg"
0040   0432 FD AB         swp b
0041   0434 D8            push b
0042   0435 26 5A 3B      mov b, __s0 ; "path"
0043   0438 FD AB         swp b
0044   043A D8            push b
0045   043B 3B 86 3A      mov d, _variables_data ; $variables
0046   043E D7            push a
0047   043F DA            push d
0048   0440 26 00 00      mov b, $0
0049   0443 E7            pop d
0050   0444 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0051   0448 E4            pop a
0052   0449 58 11 00      add d, 17
0053   044C FD 14         clb
0054   044E 2A            mov b, [d]
0055   044F FD AB         swp b
0056   0451 D8            push b
0057   0452 07 2F 32      call read_config
0058   0455 51 06 00      add sp, 6
0059   0458             ;; read_config("/etc/shell.cfg", "home", variables[1].as_string); 
0060   0458 26 A5 3B      mov b, __s3 ; "/etc/shell.cfg"
0061   045B FD AB         swp b
0062   045D D8            push b
0063   045E 26 A0 3B      mov b, __s2 ; "home"
0064   0461 FD AB         swp b
0065   0463 D8            push b
0066   0464 3B 86 3A      mov d, _variables_data ; $variables
0067   0467 D7            push a
0068   0468 DA            push d
0069   0469 26 01 00      mov b, $1
0070   046C E7            pop d
0071   046D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0072   0471 E4            pop a
0073   0472 58 11 00      add d, 17
0074   0475 FD 14         clb
0075   0477 2A            mov b, [d]
0076   0478 FD AB         swp b
0077   047A D8            push b
0078   047B 07 2F 32      call read_config
0079   047E 51 06 00      add sp, 6
0080   0481             ;; for(;;){ 
0081   0481             _for1_init:
0082   0481             _for1_cond:
0083   0481             _for1_block:
0084   0481             ;; printf("root@Sol-1:");  
0085   0481 26 B4 3B      mov b, __s4 ; "root@Sol-1:"
0086   0484 FD AB         swp b
0087   0486 D8            push b
0088   0487 07 4F 0F      call printf
0089   048A 51 02 00      add sp, 2
0090   048D             ;; print_cwd();  
0091   048D 07 0C 32      call print_cwd
0092   0490             ;; printf(" # "); 
0093   0490 26 C0 3B      mov b, __s5 ; " # "
0094   0493 FD AB         swp b
0095   0495 D8            push b
0096   0496 07 4F 0F      call printf
0097   0499 51 02 00      add sp, 2
0098   049C             ;; gets(command); 
0099   049C 3B 06 35      mov d, _command_data ; $command
0100   049F 2D            mov b, d
0101   04A0 FD AB         swp b
0102   04A2 D8            push b
0103   04A3 07 46 13      call gets
0104   04A6 51 02 00      add sp, 2
0105   04A9             ;; print("\n\r"); 
0106   04A9 26 C4 3B      mov b, __s6 ; "\n\r"
0107   04AC FD AB         swp b
0108   04AE D8            push b
0109   04AF 07 89 15      call print
0110   04B2 51 02 00      add sp, 2
0111   04B5             ;; if(command[0]) strcpy(last_cmd, command); 
0112   04B5             _if2_cond:
0113   04B5 3B 06 35      mov d, _command_data ; $command
0114   04B8 D7            push a
0115   04B9 DA            push d
0116   04BA 26 00 00      mov b, $0
0117   04BD E7            pop d
0118   04BE 5A            add d, b
0119   04BF E4            pop a
0120   04C0 32            mov bl, [d]
0121   04C1 A7 00         mov bh, 0
0122   04C3 C0 00 00      cmp b, 0
0123   04C6 C6 E0 04      je _if2_exit
0124   04C9             _if2_true:
0125   04C9             ;; strcpy(last_cmd, command); 
0126   04C9 3B 06 3A      mov d, _last_cmd_data ; $last_cmd
0127   04CC 2D            mov b, d
0128   04CD FD AB         swp b
0129   04CF D8            push b
0130   04D0 3B 06 35      mov d, _command_data ; $command
0131   04D3 2D            mov b, d
0132   04D4 FD AB         swp b
0133   04D6 D8            push b
0134   04D7 07 FA 0C      call strcpy
0135   04DA 51 04 00      add sp, 4
0136   04DD 0A E0 04      jmp _if2_exit
0137   04E0             _if2_exit:
0138   04E0             ;; prog = command; 
0139   04E0 3B 02 33      mov d, _prog ; $prog
0140   04E3 DA            push d
0141   04E4 3B 06 35      mov d, _command_data ; $command
0142   04E7 2D            mov b, d
0143   04E8 E7            pop d
0144   04E9 FD 43         mov [d], b
0145   04EB             ;; for(;;){ 
0146   04EB             _for3_init:
0147   04EB             _for3_cond:
0148   04EB             _for3_block:
0149   04EB             ;; temp_prog = prog; 
0150   04EB FA FB FF      lea d, [bp + -5] ; $temp_prog
0151   04EE DA            push d
0152   04EF 3B 02 33      mov d, _prog ; $prog
0153   04F2 2A            mov b, [d]
0154   04F3 E7            pop d
0155   04F4 FD 43         mov [d], b
0156   04F6             ;; get(); 
0157   04F6 07 D6 1B      call get
0158   04F9             ;; if(tok == SEMICOLON) get(); 
0159   04F9             _if4_cond:
0160   04F9 3B FE 32      mov d, _tok ; $tok
0161   04FC 2A            mov b, [d]
0162   04FD             ; START RELATIONAL
0163   04FD D7            push a
0164   04FE 11            mov a, b
0165   04FF 26 23 00      mov b, 35; SEMICOLON
0166   0502 B0            cmp a, b
0167   0503 FD 71         seq ; ==
0168   0505 E4            pop a
0169   0506             ; END RELATIONAL
0170   0506 C0 00 00      cmp b, 0
0171   0509 C6 12 05      je _if4_exit
0172   050C             _if4_true:
0173   050C             ;; get(); 
0174   050C 07 D6 1B      call get
0175   050F 0A 12 05      jmp _if4_exit
0176   0512             _if4_exit:
0177   0512             ;; if(toktype == END) break; // check for empty input 
0178   0512             _if5_cond:
0179   0512 3B 00 33      mov d, _toktype ; $toktype
0180   0515 2A            mov b, [d]
0181   0516             ; START RELATIONAL
0182   0516 D7            push a
0183   0517 11            mov a, b
0184   0518 26 06 00      mov b, 6; END
0185   051B B0            cmp a, b
0186   051C FD 71         seq ; ==
0187   051E E4            pop a
0188   051F             ; END RELATIONAL
0189   051F C0 00 00      cmp b, 0
0190   0522 C6 2B 05      je _if5_exit
0191   0525             _if5_true:
0192   0525             ;; break; // check for empty input 
0193   0525 0A 57 09      jmp _for3_exit ; for break
0194   0528 0A 2B 05      jmp _if5_exit
0195   052B             _if5_exit:
0196   052B             ;; is_assignment = 0; 
0197   052B FA F9 FF      lea d, [bp + -7] ; $is_assignment
0198   052E DA            push d
0199   052F 26 00 00      mov b, $0
0200   0532 E7            pop d
0201   0533 FD 3E         mov [d], bl
0202   0535             ;; if(toktype == IDENTIFIER){ 
0203   0535             _if6_cond:
0204   0535 3B 00 33      mov d, _toktype ; $toktype
0205   0538 2A            mov b, [d]
0206   0539             ; START RELATIONAL
0207   0539 D7            push a
0208   053A 11            mov a, b
0209   053B 26 05 00      mov b, 5; IDENTIFIER
0210   053E B0            cmp a, b
0211   053F FD 71         seq ; ==
0212   0541 E4            pop a
0213   0542             ; END RELATIONAL
0214   0542 C0 00 00      cmp b, 0
0215   0545 C6 78 05      je _if6_exit
0216   0548             _if6_true:
0217   0548             ;; strcpy(varname, token); 
0218   0548 FA FA FF      lea d, [bp + -6] ; $varname
0219   054B 32            mov bl, [d]
0220   054C A7 00         mov bh, 0
0221   054E FD AB         swp b
0222   0550 D8            push b
0223   0551 3B 04 33      mov d, _token_data ; $token
0224   0554 2D            mov b, d
0225   0555 FD AB         swp b
0226   0557 D8            push b
0227   0558 07 FA 0C      call strcpy
0228   055B 51 04 00      add sp, 4
0229   055E             ;; get(); 
0230   055E 07 D6 1B      call get
0231   0561             ;; is_assignment = tok == ASSIGNMENT; 
0232   0561 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0233   0564 DA            push d
0234   0565 3B FE 32      mov d, _tok ; $tok
0235   0568 2A            mov b, [d]
0236   0569             ; START RELATIONAL
0237   0569 D7            push a
0238   056A 11            mov a, b
0239   056B 26 11 00      mov b, 17; ASSIGNMENT
0240   056E B0            cmp a, b
0241   056F FD 71         seq ; ==
0242   0571 E4            pop a
0243   0572             ; END RELATIONAL
0244   0572 E7            pop d
0245   0573 FD 3E         mov [d], bl
0246   0575 0A 78 05      jmp _if6_exit
0247   0578             _if6_exit:
0248   0578             ;; if(is_assignment){ 
0249   0578             _if7_cond:
0250   0578 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0251   057B 32            mov bl, [d]
0252   057C A7 00         mov bh, 0
0253   057E C0 00 00      cmp b, 0
0254   0581 C6 17 06      je _if7_else
0255   0584             _if7_true:
0256   0584             ;; get(); 
0257   0584 07 D6 1B      call get
0258   0587             ;; if(toktype == INTEGER_CONST) set_int_var(varname, atoi(token)); 
0259   0587             _if8_cond:
0260   0587 3B 00 33      mov d, _toktype ; $toktype
0261   058A 2A            mov b, [d]
0262   058B             ; START RELATIONAL
0263   058B D7            push a
0264   058C 11            mov a, b
0265   058D 26 04 00      mov b, 4; INTEGER_CONST
0266   0590 B0            cmp a, b
0267   0591 FD 71         seq ; ==
0268   0593 E4            pop a
0269   0594             ; END RELATIONAL
0270   0594 C0 00 00      cmp b, 0
0271   0597 C6 BC 05      je _if8_else
0272   059A             _if8_true:
0273   059A             ;; set_int_var(varname, atoi(token)); 
0274   059A FA FA FF      lea d, [bp + -6] ; $varname
0275   059D 32            mov bl, [d]
0276   059E A7 00         mov bh, 0
0277   05A0 FD AB         swp b
0278   05A2 D8            push b
0279   05A3 3B 04 33      mov d, _token_data ; $token
0280   05A6 2D            mov b, d
0281   05A7 FD AB         swp b
0282   05A9 D8            push b
0283   05AA 07 2E 12      call atoi
0284   05AD 51 02 00      add sp, 2
0285   05B0 FD AB         swp b
0286   05B2 D8            push b
0287   05B3 07 B0 2D      call set_int_var
0288   05B6 51 04 00      add sp, 4
0289   05B9 0A 14 06      jmp _if8_exit
0290   05BC             _if8_else:
0291   05BC             ;; if(toktype == STRING_CONST) set_string_var(varname, string_const); 
0292   05BC             _if9_cond:
0293   05BC 3B 00 33      mov d, _toktype ; $toktype
0294   05BF 2A            mov b, [d]
0295   05C0             ; START RELATIONAL
0296   05C0 D7            push a
0297   05C1 11            mov a, b
0298   05C2 26 03 00      mov b, 3; STRING_CONST
0299   05C5 B0            cmp a, b
0300   05C6 FD 71         seq ; ==
0301   05C8 E4            pop a
0302   05C9             ; END RELATIONAL
0303   05C9 C0 00 00      cmp b, 0
0304   05CC C6 E8 05      je _if9_else
0305   05CF             _if9_true:
0306   05CF             ;; set_string_var(varname, string_const); 
0307   05CF FA FA FF      lea d, [bp + -6] ; $varname
0308   05D2 32            mov bl, [d]
0309   05D3 A7 00         mov bh, 0
0310   05D5 FD AB         swp b
0311   05D7 D8            push b
0312   05D8 3B 04 34      mov d, _string_const_data ; $string_const
0313   05DB 2D            mov b, d
0314   05DC FD AB         swp b
0315   05DE D8            push b
0316   05DF 07 64 2C      call set_string_var
0317   05E2 51 04 00      add sp, 4
0318   05E5 0A 14 06      jmp _if9_exit
0319   05E8             _if9_else:
0320   05E8             ;; if(toktype == IDENTIFIER) set_string_var(varname, token); 
0321   05E8             _if10_cond:
0322   05E8 3B 00 33      mov d, _toktype ; $toktype
0323   05EB 2A            mov b, [d]
0324   05EC             ; START RELATIONAL
0325   05EC D7            push a
0326   05ED 11            mov a, b
0327   05EE 26 05 00      mov b, 5; IDENTIFIER
0328   05F1 B0            cmp a, b
0329   05F2 FD 71         seq ; ==
0330   05F4 E4            pop a
0331   05F5             ; END RELATIONAL
0332   05F5 C0 00 00      cmp b, 0
0333   05F8 C6 14 06      je _if10_exit
0334   05FB             _if10_true:
0335   05FB             ;; set_string_var(varname, token); 
0336   05FB FA FA FF      lea d, [bp + -6] ; $varname
0337   05FE 32            mov bl, [d]
0338   05FF A7 00         mov bh, 0
0339   0601 FD AB         swp b
0340   0603 D8            push b
0341   0604 3B 04 33      mov d, _token_data ; $token
0342   0607 2D            mov b, d
0343   0608 FD AB         swp b
0344   060A D8            push b
0345   060B 07 64 2C      call set_string_var
0346   060E 51 04 00      add sp, 4
0347   0611 0A 14 06      jmp _if10_exit
0348   0614             _if10_exit:
0349   0614             _if9_exit:
0350   0614             _if8_exit:
0351   0614 0A 54 09      jmp _if7_exit
0352   0617             _if7_else:
0353   0617             ;; prog = temp_prog; 
0354   0617 3B 02 33      mov d, _prog ; $prog
0355   061A DA            push d
0356   061B FA FB FF      lea d, [bp + -5] ; $temp_prog
0357   061E 2A            mov b, [d]
0358   061F E7            pop d
0359   0620 FD 43         mov [d], b
0360   0622             ;; get(); 
0361   0622 07 D6 1B      call get
0362   0625             ;; if(!strcmp(token, "cd")) command_cd(); 
0363   0625             _if11_cond:
0364   0625 3B 04 33      mov d, _token_data ; $token
0365   0628 2D            mov b, d
0366   0629 FD AB         swp b
0367   062B D8            push b
0368   062C 26 C7 3B      mov b, __s7 ; "cd"
0369   062F FD AB         swp b
0370   0631 D8            push b
0371   0632 07 5A 0D      call strcmp
0372   0635 51 04 00      add sp, 4
0373   0638 C0 00 00      cmp b, 0
0374   063B FD 71         seq ; !
0375   063D C0 00 00      cmp b, 0
0376   0640 C6 49 06      je _if11_else
0377   0643             _if11_true:
0378   0643             ;; command_cd(); 
0379   0643 07 0B 31      call command_cd
0380   0646 0A 54 09      jmp _if11_exit
0381   0649             _if11_else:
0382   0649             ;; if(!strcmp(token, "shell")) command_shell(); 
0383   0649             _if12_cond:
0384   0649 3B 04 33      mov d, _token_data ; $token
0385   064C 2D            mov b, d
0386   064D FD AB         swp b
0387   064F D8            push b
0388   0650 26 CA 3B      mov b, __s8 ; "shell"
0389   0653 FD AB         swp b
0390   0655 D8            push b
0391   0656 07 5A 0D      call strcmp
0392   0659 51 04 00      add sp, 4
0393   065C C0 00 00      cmp b, 0
0394   065F FD 71         seq ; !
0395   0661 C0 00 00      cmp b, 0
0396   0664 C6 6D 06      je _if12_else
0397   0667             _if12_true:
0398   0667             ;; command_shell(); 
0399   0667 07 25 32      call command_shell
0400   066A 0A 54 09      jmp _if12_exit
0401   066D             _if12_else:
0402   066D             ;; back(); 
0403   066D 07 0A 1A      call back
0404   0670             ;; get_path(); 
0405   0670 07 6E 1A      call get_path
0406   0673             ;; strcpy(path, token); // save file path 
0407   0673 3B 06 37      mov d, _path_data ; $path
0408   0676 2D            mov b, d
0409   0677 FD AB         swp b
0410   0679 D8            push b
0411   067A 3B 04 33      mov d, _token_data ; $token
0412   067D 2D            mov b, d
0413   067E FD AB         swp b
0414   0680 D8            push b
0415   0681 07 FA 0C      call strcpy
0416   0684 51 04 00      add sp, 4
0417   0687             ;; for(i = 0; i < 256; i++) argument[i] = 0; 
0418   0687             _for13_init:
0419   0687 FA 73 FF      lea d, [bp + -141] ; $i
0420   068A DA            push d
0421   068B 26 00 00      mov b, $0
0422   068E E7            pop d
0423   068F FD 43         mov [d], b
0424   0691             _for13_cond:
0425   0691 FA 73 FF      lea d, [bp + -141] ; $i
0426   0694 2A            mov b, [d]
0427   0695             ; START RELATIONAL
0428   0695 D7            push a
0429   0696 11            mov a, b
0430   0697 26 00 01      mov b, $100
0431   069A B0            cmp a, b
0432   069B FD 73         slt ; < 
0433   069D E4            pop a
0434   069E             ; END RELATIONAL
0435   069E C0 00 00      cmp b, 0
0436   06A1 C6 C9 06      je _for13_exit
0437   06A4             _for13_block:
0438   06A4             ;; argument[i] = 0; 
0439   06A4 3B 06 39      mov d, _argument_data ; $argument
0440   06A7 D7            push a
0441   06A8 DA            push d
0442   06A9 FA 73 FF      lea d, [bp + -141] ; $i
0443   06AC 2A            mov b, [d]
0444   06AD E7            pop d
0445   06AE 5A            add d, b
0446   06AF E4            pop a
0447   06B0 DA            push d
0448   06B1 26 00 00      mov b, $0
0449   06B4 E7            pop d
0450   06B5 FD 3E         mov [d], bl
0451   06B7             _for13_update:
0452   06B7 FA 73 FF      lea d, [bp + -141] ; $i
0453   06BA 2A            mov b, [d]
0454   06BB FD 79         mov g, b
0455   06BD FD 77         inc b
0456   06BF FA 73 FF      lea d, [bp + -141] ; $i
0457   06C2 FD 43         mov [d], b
0458   06C4 FD 27         mov b, g
0459   06C6 0A 91 06      jmp _for13_cond
0460   06C9             _for13_exit:
0461   06C9             ;; get(); 
0462   06C9 07 D6 1B      call get
0463   06CC             ;; if(tok != SEMICOLON && toktype != END){ 
0464   06CC             _if14_cond:
0465   06CC 3B FE 32      mov d, _tok ; $tok
0466   06CF 2A            mov b, [d]
0467   06D0             ; START RELATIONAL
0468   06D0 D7            push a
0469   06D1 11            mov a, b
0470   06D2 26 23 00      mov b, 35; SEMICOLON
0471   06D5 B0            cmp a, b
0472   06D6 FD 72         sneq ; !=
0473   06D8 E4            pop a
0474   06D9             ; END RELATIONAL
0475   06D9 D7            push a
0476   06DA 11            mov a, b
0477   06DB 3B 00 33      mov d, _toktype ; $toktype
0478   06DE 2A            mov b, [d]
0479   06DF             ; START RELATIONAL
0480   06DF D7            push a
0481   06E0 11            mov a, b
0482   06E1 26 06 00      mov b, 6; END
0483   06E4 B0            cmp a, b
0484   06E5 FD 72         sneq ; !=
0485   06E7 E4            pop a
0486   06E8             ; END RELATIONAL
0487   06E8 FD A7         sand a, b ; &&
0488   06EA E4            pop a
0489   06EB C0 00 00      cmp b, 0
0490   06EE C6 46 08      je _if14_exit
0491   06F1             _if14_true:
0492   06F1             ;; back(); 
0493   06F1 07 0A 1A      call back
0494   06F4             ;; p = argument; 
0495   06F4 FA FF FF      lea d, [bp + -1] ; $p
0496   06F7 DA            push d
0497   06F8 3B 06 39      mov d, _argument_data ; $argument
0498   06FB 2D            mov b, d
0499   06FC E7            pop d
0500   06FD FD 43         mov [d], b
0501   06FF             ;; do{ 
0502   06FF             _do15_block:
0503   06FF             ;; if(*prog == '$'){ 
0504   06FF             _if16_cond:
0505   06FF 3B 02 33      mov d, _prog ; $prog
0506   0702 2A            mov b, [d]
0507   0703 74            mov d, b
0508   0704 32            mov bl, [d]
0509   0705 A7 00         mov bh, 0
0510   0707             ; START RELATIONAL
0511   0707 D7            push a
0512   0708 11            mov a, b
0513   0709 26 24 00      mov b, $24
0514   070C B0            cmp a, b
0515   070D FD 71         seq ; ==
0516   070F E4            pop a
0517   0710             ; END RELATIONAL
0518   0710 C0 00 00      cmp b, 0
0519   0713 C6 E5 07      je _if16_else
0520   0716             _if16_true:
0521   0716             ;; prog++; 
0522   0716 3B 02 33      mov d, _prog ; $prog
0523   0719 2A            mov b, [d]
0524   071A FD 79         mov g, b
0525   071C FD 77         inc b
0526   071E 3B 02 33      mov d, _prog ; $prog
0527   0721 FD 43         mov [d], b
0528   0723 FD 27         mov b, g
0529   0725             ;; get(); // get variable name 
0530   0725 07 D6 1B      call get
0531   0728             ;; var_index = get_var_index(token); 
0532   0728 FA 75 FF      lea d, [bp + -139] ; $var_index
0533   072B DA            push d
0534   072C 3B 04 33      mov d, _token_data ; $token
0535   072F 2D            mov b, d
0536   0730 FD AB         swp b
0537   0732 D8            push b
0538   0733 07 B4 2E      call get_var_index
0539   0736 51 02 00      add sp, 2
0540   0739 E7            pop d
0541   073A FD 43         mov [d], b
0542   073C             ;; if(var_index != -1){ 
0543   073C             _if17_cond:
0544   073C FA 75 FF      lea d, [bp + -139] ; $var_index
0545   073F 2A            mov b, [d]
0546   0740             ; START RELATIONAL
0547   0740 D7            push a
0548   0741 11            mov a, b
0549   0742 26 01 00      mov b, $1
0550   0745 FD 97         neg b
0551   0747 B0            cmp a, b
0552   0748 FD 72         sneq ; !=
0553   074A E4            pop a
0554   074B             ; END RELATIONAL
0555   074B C0 00 00      cmp b, 0
0556   074E C6 E2 07      je _if17_exit
0557   0751             _if17_true:
0558   0751             ;; if(get_var_type(token) == SHELL_VAR_TYP_INT) strcat(argument, "123"); 
0559   0751             _if18_cond:
0560   0751 3B 04 33      mov d, _token_data ; $token
0561   0754 2D            mov b, d
0562   0755 FD AB         swp b
0563   0757 D8            push b
0564   0758 07 2A 2F      call get_var_type
0565   075B 51 02 00      add sp, 2
0566   075E             ; START RELATIONAL
0567   075E D7            push a
0568   075F 11            mov a, b
0569   0760 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
0570   0763 B0            cmp a, b
0571   0764 FD 71         seq ; ==
0572   0766 E4            pop a
0573   0767             ; END RELATIONAL
0574   0767 C0 00 00      cmp b, 0
0575   076A C6 83 07      je _if18_else
0576   076D             _if18_true:
0577   076D             ;; strcat(argument, "123"); 
0578   076D 3B 06 39      mov d, _argument_data ; $argument
0579   0770 2D            mov b, d
0580   0771 FD AB         swp b
0581   0773 D8            push b
0582   0774 26 D0 3B      mov b, __s9 ; "123"
0583   0777 FD AB         swp b
0584   0779 D8            push b
0585   077A 07 BE 0D      call strcat
0586   077D 51 04 00      add sp, 4
0587   0780 0A BF 07      jmp _if18_exit
0588   0783             _if18_else:
0589   0783             ;; if(get_var_type(token) == SHELL_VAR_TYP_STR) strcat(argument, get_shell_var_strval(var_index)); 
0590   0783             _if19_cond:
0591   0783 3B 04 33      mov d, _token_data ; $token
0592   0786 2D            mov b, d
0593   0787 FD AB         swp b
0594   0789 D8            push b
0595   078A 07 2A 2F      call get_var_type
0596   078D 51 02 00      add sp, 2
0597   0790             ; START RELATIONAL
0598   0790 D7            push a
0599   0791 11            mov a, b
0600   0792 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
0601   0795 B0            cmp a, b
0602   0796 FD 71         seq ; ==
0603   0798 E4            pop a
0604   0799             ; END RELATIONAL
0605   0799 C0 00 00      cmp b, 0
0606   079C C6 BF 07      je _if19_exit
0607   079F             _if19_true:
0608   079F             ;; strcat(argument, get_shell_var_strval(var_index)); 
0609   079F 3B 06 39      mov d, _argument_data ; $argument
0610   07A2 2D            mov b, d
0611   07A3 FD AB         swp b
0612   07A5 D8            push b
0613   07A6 FA 75 FF      lea d, [bp + -139] ; $var_index
0614   07A9 2A            mov b, [d]
0615   07AA FD AB         swp b
0616   07AC D8            push b
0617   07AD 07 BE 30      call get_shell_var_strval
0618   07B0 51 02 00      add sp, 2
0619   07B3 FD AB         swp b
0620   07B5 D8            push b
0621   07B6 07 BE 0D      call strcat
0622   07B9 51 04 00      add sp, 4
0623   07BC 0A BF 07      jmp _if19_exit
0624   07BF             _if19_exit:
0625   07BF             _if18_exit:
0626   07BF             ;; while(*p) p++; 
0627   07BF             _while20_cond:
0628   07BF FA FF FF      lea d, [bp + -1] ; $p
0629   07C2 2A            mov b, [d]
0630   07C3 74            mov d, b
0631   07C4 32            mov bl, [d]
0632   07C5 A7 00         mov bh, 0
0633   07C7 C0 00 00      cmp b, 0
0634   07CA C6 DF 07      je _while20_exit
0635   07CD             _while20_block:
0636   07CD             ;; p++; 
0637   07CD FA FF FF      lea d, [bp + -1] ; $p
0638   07D0 2A            mov b, [d]
0639   07D1 FD 79         mov g, b
0640   07D3 FD 77         inc b
0641   07D5 FA FF FF      lea d, [bp + -1] ; $p
0642   07D8 FD 43         mov [d], b
0643   07DA FD 27         mov b, g
0644   07DC 0A BF 07      jmp _while20_cond
0645   07DF             _while20_exit:
0646   07DF 0A E2 07      jmp _if17_exit
0647   07E2             _if17_exit:
0648   07E2 0A 0B 08      jmp _if16_exit
0649   07E5             _if16_else:
0650   07E5             ;; *p++ = *prog++; 
0651   07E5 FA FF FF      lea d, [bp + -1] ; $p
0652   07E8 2A            mov b, [d]
0653   07E9 FD 79         mov g, b
0654   07EB FD 77         inc b
0655   07ED FA FF FF      lea d, [bp + -1] ; $p
0656   07F0 FD 43         mov [d], b
0657   07F2 FD 27         mov b, g
0658   07F4 D8            push b
0659   07F5 3B 02 33      mov d, _prog ; $prog
0660   07F8 2A            mov b, [d]
0661   07F9 FD 79         mov g, b
0662   07FB FD 77         inc b
0663   07FD 3B 02 33      mov d, _prog ; $prog
0664   0800 FD 43         mov [d], b
0665   0802 FD 27         mov b, g
0666   0804 74            mov d, b
0667   0805 32            mov bl, [d]
0668   0806 A7 00         mov bh, 0
0669   0808 E7            pop d
0670   0809 FD 3E         mov [d], bl
0671   080B             _if16_exit:
0672   080B             ;; } while(*prog != '\0' && *prog != ';'); 
0673   080B             _do15_cond:
0674   080B 3B 02 33      mov d, _prog ; $prog
0675   080E 2A            mov b, [d]
0676   080F 74            mov d, b
0677   0810 32            mov bl, [d]
0678   0811 A7 00         mov bh, 0
0679   0813             ; START RELATIONAL
0680   0813 D7            push a
0681   0814 11            mov a, b
0682   0815 26 00 00      mov b, $0
0683   0818 B0            cmp a, b
0684   0819 FD 72         sneq ; !=
0685   081B E4            pop a
0686   081C             ; END RELATIONAL
0687   081C D7            push a
0688   081D 11            mov a, b
0689   081E 3B 02 33      mov d, _prog ; $prog
0690   0821 2A            mov b, [d]
0691   0822 74            mov d, b
0692   0823 32            mov bl, [d]
0693   0824 A7 00         mov bh, 0
0694   0826             ; START RELATIONAL
0695   0826 D7            push a
0696   0827 11            mov a, b
0697   0828 26 3B 00      mov b, $3b
0698   082B B0            cmp a, b
0699   082C FD 72         sneq ; !=
0700   082E E4            pop a
0701   082F             ; END RELATIONAL
0702   082F FD A7         sand a, b ; &&
0703   0831 E4            pop a
0704   0832 C0 01 00      cmp b, 1
0705   0835 C6 FF 06      je _do15_block
0706   0838             _do15_exit:
0707   0838             ;; *p = '\0'; 
0708   0838 FA FF FF      lea d, [bp + -1] ; $p
0709   083B 2A            mov b, [d]
0710   083C D8            push b
0711   083D 26 00 00      mov b, $0
0712   0840 E7            pop d
0713   0841 FD 3E         mov [d], bl
0714   0843 0A 46 08      jmp _if14_exit
0715   0846             _if14_exit:
0716   0846             ;; if(*path == '/' || *path == '.') spawn_new_proc(path, argument); 
0717   0846             _if21_cond:
0718   0846 3B 06 37      mov d, _path_data ; $path
0719   0849 2D            mov b, d
0720   084A 74            mov d, b
0721   084B 32            mov bl, [d]
0722   084C A7 00         mov bh, 0
0723   084E             ; START RELATIONAL
0724   084E D7            push a
0725   084F 11            mov a, b
0726   0850 26 2F 00      mov b, $2f
0727   0853 B0            cmp a, b
0728   0854 FD 71         seq ; ==
0729   0856 E4            pop a
0730   0857             ; END RELATIONAL
0731   0857 D7            push a
0732   0858 11            mov a, b
0733   0859 3B 06 37      mov d, _path_data ; $path
0734   085C 2D            mov b, d
0735   085D 74            mov d, b
0736   085E 32            mov bl, [d]
0737   085F A7 00         mov bh, 0
0738   0861             ; START RELATIONAL
0739   0861 D7            push a
0740   0862 11            mov a, b
0741   0863 26 2E 00      mov b, $2e
0742   0866 B0            cmp a, b
0743   0867 FD 71         seq ; ==
0744   0869 E4            pop a
0745   086A             ; END RELATIONAL
0746   086A FD A8         sor a, b ; ||
0747   086C E4            pop a
0748   086D C0 00 00      cmp b, 0
0749   0870 C6 8A 08      je _if21_else
0750   0873             _if21_true:
0751   0873             ;; spawn_new_proc(path, argument); 
0752   0873 3B 06 37      mov d, _path_data ; $path
0753   0876 2D            mov b, d
0754   0877 FD AB         swp b
0755   0879 D8            push b
0756   087A 3B 06 39      mov d, _argument_data ; $argument
0757   087D 2D            mov b, d
0758   087E FD AB         swp b
0759   0880 D8            push b
0760   0881 07 15 32      call spawn_new_proc
0761   0884 51 04 00      add sp, 4
0762   0887 0A 54 09      jmp _if21_exit
0763   088A             _if21_else:
0764   088A             ;; temp_prog = prog; 
0765   088A FA FB FF      lea d, [bp + -5] ; $temp_prog
0766   088D DA            push d
0767   088E 3B 02 33      mov d, _prog ; $prog
0768   0891 2A            mov b, [d]
0769   0892 E7            pop d
0770   0893 FD 43         mov [d], b
0771   0895             ;; prog = variables[0].as_string; 
0772   0895 3B 02 33      mov d, _prog ; $prog
0773   0898 DA            push d
0774   0899 3B 86 3A      mov d, _variables_data ; $variables
0775   089C D7            push a
0776   089D DA            push d
0777   089E 26 00 00      mov b, $0
0778   08A1 E7            pop d
0779   08A2 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0780   08A6 E4            pop a
0781   08A7 58 11 00      add d, 17
0782   08AA FD 14         clb
0783   08AC 2A            mov b, [d]
0784   08AD E7            pop d
0785   08AE FD 43         mov [d], b
0786   08B0             ;; for(;;){ 
0787   08B0             _for22_init:
0788   08B0             _for22_cond:
0789   08B0             _for22_block:
0790   08B0             ;; get(); 
0791   08B0 07 D6 1B      call get
0792   08B3             ;; if(toktype == END){ 
0793   08B3             _if23_cond:
0794   08B3 3B 00 33      mov d, _toktype ; $toktype
0795   08B6 2A            mov b, [d]
0796   08B7             ; START RELATIONAL
0797   08B7 D7            push a
0798   08B8 11            mov a, b
0799   08B9 26 06 00      mov b, 6; END
0800   08BC B0            cmp a, b
0801   08BD FD 71         seq ; ==
0802   08BF E4            pop a
0803   08C0             ; END RELATIONAL
0804   08C0 C0 00 00      cmp b, 0
0805   08C3 C6 CC 08      je _if23_else
0806   08C6             _if23_true:
0807   08C6             ;; break; 
0808   08C6 0A 49 09      jmp _for22_exit ; for break
0809   08C9 0A CF 08      jmp _if23_exit
0810   08CC             _if23_else:
0811   08CC             ;; back(); 
0812   08CC 07 0A 1A      call back
0813   08CF             _if23_exit:
0814   08CF             ;; get_path(); 
0815   08CF 07 6E 1A      call get_path
0816   08D2             ;; strcpy(temp, token); 
0817   08D2 3B 06 38      mov d, _temp_data ; $temp
0818   08D5 2D            mov b, d
0819   08D6 FD AB         swp b
0820   08D8 D8            push b
0821   08D9 3B 04 33      mov d, _token_data ; $token
0822   08DC 2D            mov b, d
0823   08DD FD AB         swp b
0824   08DF D8            push b
0825   08E0 07 FA 0C      call strcpy
0826   08E3 51 04 00      add sp, 4
0827   08E6             ;; strcat(temp, "/"); 
0828   08E6 3B 06 38      mov d, _temp_data ; $temp
0829   08E9 2D            mov b, d
0830   08EA FD AB         swp b
0831   08EC D8            push b
0832   08ED 26 D4 3B      mov b, __s10 ; "/"
0833   08F0 FD AB         swp b
0834   08F2 D8            push b
0835   08F3 07 BE 0D      call strcat
0836   08F6 51 04 00      add sp, 4
0837   08F9             ;; strcat(temp, path); // form full filepath with ENV_PATH + given filename 
0838   08F9 3B 06 38      mov d, _temp_data ; $temp
0839   08FC 2D            mov b, d
0840   08FD FD AB         swp b
0841   08FF D8            push b
0842   0900 3B 06 37      mov d, _path_data ; $path
0843   0903 2D            mov b, d
0844   0904 FD AB         swp b
0845   0906 D8            push b
0846   0907 07 BE 0D      call strcat
0847   090A 51 04 00      add sp, 4
0848   090D             ;; if(file_exists(temp) != 0){ 
0849   090D             _if24_cond:
0850   090D 3B 06 38      mov d, _temp_data ; $temp
0851   0910 2D            mov b, d
0852   0911 FD AB         swp b
0853   0913 D8            push b
0854   0914 07 F2 30      call file_exists
0855   0917 51 02 00      add sp, 2
0856   091A             ; START RELATIONAL
0857   091A D7            push a
0858   091B 11            mov a, b
0859   091C 26 00 00      mov b, $0
0860   091F B0            cmp a, b
0861   0920 FD 72         sneq ; !=
0862   0922 E4            pop a
0863   0923             ; END RELATIONAL
0864   0923 C0 00 00      cmp b, 0
0865   0926 C6 43 09      je _if24_exit
0866   0929             _if24_true:
0867   0929             ;; spawn_new_proc(temp, argument); 
0868   0929 3B 06 38      mov d, _temp_data ; $temp
0869   092C 2D            mov b, d
0870   092D FD AB         swp b
0871   092F D8            push b
0872   0930 3B 06 39      mov d, _argument_data ; $argument
0873   0933 2D            mov b, d
0874   0934 FD AB         swp b
0875   0936 D8            push b
0876   0937 07 15 32      call spawn_new_proc
0877   093A 51 04 00      add sp, 4
0878   093D             ;; break; 
0879   093D 0A 49 09      jmp _for22_exit ; for break
0880   0940 0A 43 09      jmp _if24_exit
0881   0943             _if24_exit:
0882   0943             ;; get(); // get separator 
0883   0943 07 D6 1B      call get
0884   0946             _for22_update:
0885   0946 0A B0 08      jmp _for22_cond
0886   0949             _for22_exit:
0887   0949             ;; prog = temp_prog; 
0888   0949 3B 02 33      mov d, _prog ; $prog
0889   094C DA            push d
0890   094D FA FB FF      lea d, [bp + -5] ; $temp_prog
0891   0950 2A            mov b, [d]
0892   0951 E7            pop d
0893   0952 FD 43         mov [d], b
0894   0954             _if21_exit:
0895   0954             _if12_exit:
0896   0954             _if11_exit:
0897   0954             _if7_exit:
0898   0954             _for3_update:
0899   0954 0A EB 04      jmp _for3_cond
0900   0957             _for3_exit:
0901   0957             _for1_update:
0902   0957 0A 81 04      jmp _for1_cond
0903   095A             _for1_exit:
0904   095A 05 0B         syscall sys_terminate_proc
0905   095C             
0906   095C             include_ctype_lib:
0907   095C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0908   095F             
0909   095F             ; --- BEGIN INLINE ASM BLOCK
0910   095F             .include "lib/ctype.asm"
0001+  095F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  095F             ; ctype.s
0003+  095F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  095F             
0005+  095F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  095F             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  095F             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  095F             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  095F             ;; characters are supported.
0010+  095F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  095F             ;; _isalnum 
0012+  095F             ;; _isalpha 
0013+  095F             ;; islower 
0014+  095F             ;; isupper 
0015+  095F             ;; _isdigit 
0016+  095F             ;; isxdigit
0017+  095F             ;; iscntrl 
0018+  095F             ;; isgraph 
0019+  095F             ;; _isspace 
0020+  095F             ;; isblank 
0021+  095F             ;; isprint 
0022+  095F             ;; ispunct 
0023+  095F             ;; tolower 
0024+  095F             ;; toupper
0025+  095F             
0026+  095F             
0027+  095F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  095F             ;; IS ALPHANUMERIC
0029+  095F             ;; sets ZF according with result
0030+  095F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  095F             _isalnum:
0032+  095F 07 7C 09    	call _isalpha
0033+  0962 C6 68 09    	je _isalnum_exit
0034+  0965 07 69 09    	call _isdigit
0035+  0968             _isalnum_exit:
0036+  0968 09          	ret	
0037+  0969             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0969             ;; IS DIGIT
0039+  0969             ;; sets ZF according with result
0040+  0969             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0969             _isdigit:
0042+  0969 DB          	push al
0043+  096A B9 30       	cmp al, '0'
0044+  096C C8 78 09    	jlu _isdigit_false
0045+  096F B9 39       	cmp al, '9'
0046+  0971 D1 78 09    	jgu _isdigit_false
0047+  0974 87 00       	and al, 0	; set ZF
0048+  0976 E8          	pop al
0049+  0977 09          	ret
0050+  0978             _isdigit_false:
0051+  0978 8B 01       	or al, 1	; clear ZF
0052+  097A E8          	pop al
0053+  097B 09          	ret	
0054+  097C             	
0055+  097C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  097C             ;; IS ALPHA
0057+  097C             ;; sets ZF according with result
0058+  097C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  097C             _isalpha:
0060+  097C DB          	push al
0061+  097D B9 5F       	cmp al, '_'
0062+  097F C6 9F 09    	je _isalpha_true
0063+  0982 B9 2E       	cmp al, '.'
0064+  0984 C6 9F 09    	je _isalpha_true
0065+  0987 B9 41       	cmp al, 'A'
0066+  0989 C8 9B 09    	jlu _isalpha_false
0067+  098C B9 7A       	cmp al, 'z'
0068+  098E D1 9B 09    	jgu _isalpha_false
0069+  0991 B9 5A       	cmp al, 'Z'
0070+  0993 D0 9F 09    	jleu _isalpha_true
0071+  0996 B9 61       	cmp al, 'a'
0072+  0998 C9 9F 09    	jgeu _isalpha_true
0073+  099B             _isalpha_false:
0074+  099B 8B 01       	or al, 1	; clear ZF
0075+  099D E8          	pop al
0076+  099E 09          	ret
0077+  099F             _isalpha_true:
0078+  099F 87 00       	and al, 0	; set ZF
0079+  09A1 E8          	pop al
0080+  09A2 09          	ret
0081+  09A3             
0082+  09A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  09A3             ;; IS PATH-ALPHA
0084+  09A3             ;; sets ZF according with result
0085+  09A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  09A3             ispath:
0087+  09A3 DB          	push al
0088+  09A4 07 69 09    	call _isdigit
0089+  09A7 C6 D1 09    	je ispath_true
0090+  09AA B9 5F       	cmp al, '_'
0091+  09AC C6 D1 09    	je ispath_true
0092+  09AF B9 2F       	cmp al, '/'
0093+  09B1 C6 D1 09    	je ispath_true
0094+  09B4 B9 2E       	cmp al, '.'
0095+  09B6 C6 D1 09    	je ispath_true
0096+  09B9 B9 41       	cmp al, 'A'
0097+  09BB C8 CD 09    	jlu ispath_false
0098+  09BE B9 7A       	cmp al, 'z'
0099+  09C0 D1 CD 09    	jgu ispath_false
0100+  09C3 B9 5A       	cmp al, 'Z'
0101+  09C5 D0 D1 09    	jleu ispath_true
0102+  09C8 B9 61       	cmp al, 'a'
0103+  09CA C9 D1 09    	jgeu ispath_true
0104+  09CD             ispath_false:
0105+  09CD 8B 01       	or al, 1	; clear ZF
0106+  09CF E8          	pop al
0107+  09D0 09          	ret
0108+  09D1             ispath_true:
0109+  09D1 87 00       	and al, 0	; set ZF
0110+  09D3 E8          	pop al
0111+  09D4 09          	ret
0112+  09D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  09D5             ;; IS SPACE
0114+  09D5             ;; sets ZF according with result
0115+  09D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  09D5             _isspace:
0117+  09D5 B9 20       	cmp al, $20		; ' '
0118+  09D7 C6 EB 09    	je _isspace_exit
0119+  09DA B9 09       	cmp al, $09		; '\t'
0120+  09DC C6 EB 09    	je _isspace_exit
0121+  09DF B9 0A       	cmp al, $0A		; '\n'
0122+  09E1 C6 EB 09    	je _isspace_exit
0123+  09E4 B9 0D       	cmp al, $0D		; '\r'
0124+  09E6 C6 EB 09    	je _isspace_exit
0125+  09E9 B9 0B       	cmp al, $0B		; '\v'
0126+  09EB             _isspace_exit:
0127+  09EB 09          	ret	
0128+  09EC             
0129+  09EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  09EC             ; TO LOWER
0131+  09EC             ; input in AL
0132+  09EC             ; output in AL
0133+  09EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  09EC             _to_lower:
0135+  09EC B9 5A       	cmp al, 'Z'
0136+  09EE D1 F3 09    	jgu _to_lower_ret
0137+  09F1 6A 20       	add al, $20				; convert to lower case
0138+  09F3             _to_lower_ret:
0139+  09F3 09          	ret
0140+  09F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  09F4             ; TO UPPER
0142+  09F4             ; input in AL
0143+  09F4             ; output in AL
0144+  09F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  09F4             _to_upper:
0146+  09F4 B9 61       	cmp al, 'a'
0147+  09F6 C8 FB 09    	jlu _to_upper_ret
0148+  09F9 6F 20       	sub al, $20			; convert to upper case
0149+  09FB             _to_upper_ret:
0150+  09FB 09          	ret
0151+  09FC             
0911   09FC             ; --- END INLINE ASM BLOCK
0912   09FC             
0913   09FC F9            leave
0914   09FD 09            ret
0915   09FE             
0916   09FE             is_space:
0917   09FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0918   0A01             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0919   0A01 FA 05 00      lea d, [bp + 5] ; $c
0920   0A04 32            mov bl, [d]
0921   0A05 A7 00         mov bh, 0
0922   0A07             ; START RELATIONAL
0923   0A07 D7            push a
0924   0A08 11            mov a, b
0925   0A09 26 20 00      mov b, $20
0926   0A0C B0            cmp a, b
0927   0A0D FD 71         seq ; ==
0928   0A0F E4            pop a
0929   0A10             ; END RELATIONAL
0930   0A10 D7            push a
0931   0A11 11            mov a, b
0932   0A12 FA 05 00      lea d, [bp + 5] ; $c
0933   0A15 32            mov bl, [d]
0934   0A16 A7 00         mov bh, 0
0935   0A18             ; START RELATIONAL
0936   0A18 D7            push a
0937   0A19 11            mov a, b
0938   0A1A 26 09 00      mov b, $9
0939   0A1D B0            cmp a, b
0940   0A1E FD 71         seq ; ==
0941   0A20 E4            pop a
0942   0A21             ; END RELATIONAL
0943   0A21 FD A8         sor a, b ; ||
0944   0A23 11            mov a, b
0945   0A24 FA 05 00      lea d, [bp + 5] ; $c
0946   0A27 32            mov bl, [d]
0947   0A28 A7 00         mov bh, 0
0948   0A2A             ; START RELATIONAL
0949   0A2A D7            push a
0950   0A2B 11            mov a, b
0951   0A2C 26 0A 00      mov b, $a
0952   0A2F B0            cmp a, b
0953   0A30 FD 71         seq ; ==
0954   0A32 E4            pop a
0955   0A33             ; END RELATIONAL
0956   0A33 FD A8         sor a, b ; ||
0957   0A35 11            mov a, b
0958   0A36 FA 05 00      lea d, [bp + 5] ; $c
0959   0A39 32            mov bl, [d]
0960   0A3A A7 00         mov bh, 0
0961   0A3C             ; START RELATIONAL
0962   0A3C D7            push a
0963   0A3D 11            mov a, b
0964   0A3E 26 0D 00      mov b, $d
0965   0A41 B0            cmp a, b
0966   0A42 FD 71         seq ; ==
0967   0A44 E4            pop a
0968   0A45             ; END RELATIONAL
0969   0A45 FD A8         sor a, b ; ||
0970   0A47 E4            pop a
0971   0A48 F9            leave
0972   0A49 09            ret
0973   0A4A             
0974   0A4A             is_digit:
0975   0A4A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0976   0A4D             ;; return c >= '0' && c <= '9'; 
0977   0A4D FA 05 00      lea d, [bp + 5] ; $c
0978   0A50 32            mov bl, [d]
0979   0A51 A7 00         mov bh, 0
0980   0A53             ; START RELATIONAL
0981   0A53 D7            push a
0982   0A54 11            mov a, b
0983   0A55 26 30 00      mov b, $30
0984   0A58 B0            cmp a, b
0985   0A59 FD 80         sge ; >=
0986   0A5B E4            pop a
0987   0A5C             ; END RELATIONAL
0988   0A5C D7            push a
0989   0A5D 11            mov a, b
0990   0A5E FA 05 00      lea d, [bp + 5] ; $c
0991   0A61 32            mov bl, [d]
0992   0A62 A7 00         mov bh, 0
0993   0A64             ; START RELATIONAL
0994   0A64 D7            push a
0995   0A65 11            mov a, b
0996   0A66 26 39 00      mov b, $39
0997   0A69 B0            cmp a, b
0998   0A6A FD 74         sle ; <=
0999   0A6C E4            pop a
1000   0A6D             ; END RELATIONAL
1001   0A6D FD A7         sand a, b ; &&
1002   0A6F E4            pop a
1003   0A70 F9            leave
1004   0A71 09            ret
1005   0A72             
1006   0A72             is_alpha:
1007   0A72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1008   0A75             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
1009   0A75 FA 05 00      lea d, [bp + 5] ; $c
1010   0A78 32            mov bl, [d]
1011   0A79 A7 00         mov bh, 0
1012   0A7B             ; START RELATIONAL
1013   0A7B D7            push a
1014   0A7C 11            mov a, b
1015   0A7D 26 61 00      mov b, $61
1016   0A80 B0            cmp a, b
1017   0A81 FD 80         sge ; >=
1018   0A83 E4            pop a
1019   0A84             ; END RELATIONAL
1020   0A84 D7            push a
1021   0A85 11            mov a, b
1022   0A86 FA 05 00      lea d, [bp + 5] ; $c
1023   0A89 32            mov bl, [d]
1024   0A8A A7 00         mov bh, 0
1025   0A8C             ; START RELATIONAL
1026   0A8C D7            push a
1027   0A8D 11            mov a, b
1028   0A8E 26 7A 00      mov b, $7a
1029   0A91 B0            cmp a, b
1030   0A92 FD 74         sle ; <=
1031   0A94 E4            pop a
1032   0A95             ; END RELATIONAL
1033   0A95 FD A7         sand a, b ; &&
1034   0A97 E4            pop a
1035   0A98 D7            push a
1036   0A99 11            mov a, b
1037   0A9A FA 05 00      lea d, [bp + 5] ; $c
1038   0A9D 32            mov bl, [d]
1039   0A9E A7 00         mov bh, 0
1040   0AA0             ; START RELATIONAL
1041   0AA0 D7            push a
1042   0AA1 11            mov a, b
1043   0AA2 26 41 00      mov b, $41
1044   0AA5 B0            cmp a, b
1045   0AA6 FD 80         sge ; >=
1046   0AA8 E4            pop a
1047   0AA9             ; END RELATIONAL
1048   0AA9 D7            push a
1049   0AAA 11            mov a, b
1050   0AAB FA 05 00      lea d, [bp + 5] ; $c
1051   0AAE 32            mov bl, [d]
1052   0AAF A7 00         mov bh, 0
1053   0AB1             ; START RELATIONAL
1054   0AB1 D7            push a
1055   0AB2 11            mov a, b
1056   0AB3 26 5A 00      mov b, $5a
1057   0AB6 B0            cmp a, b
1058   0AB7 FD 74         sle ; <=
1059   0AB9 E4            pop a
1060   0ABA             ; END RELATIONAL
1061   0ABA FD A7         sand a, b ; &&
1062   0ABC E4            pop a
1063   0ABD FD A8         sor a, b ; ||
1064   0ABF 11            mov a, b
1065   0AC0 FA 05 00      lea d, [bp + 5] ; $c
1066   0AC3 32            mov bl, [d]
1067   0AC4 A7 00         mov bh, 0
1068   0AC6             ; START RELATIONAL
1069   0AC6 D7            push a
1070   0AC7 11            mov a, b
1071   0AC8 26 5F 00      mov b, $5f
1072   0ACB B0            cmp a, b
1073   0ACC FD 71         seq ; ==
1074   0ACE E4            pop a
1075   0ACF             ; END RELATIONAL
1076   0ACF FD A8         sor a, b ; ||
1077   0AD1 E4            pop a
1078   0AD2 F9            leave
1079   0AD3 09            ret
1080   0AD4             
1081   0AD4             toupper:
1082   0AD4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1083   0AD7             ;; if (ch >= 'a' && ch <= 'z') { 
1084   0AD7             _if25_cond:
1085   0AD7 FA 05 00      lea d, [bp + 5] ; $ch
1086   0ADA 32            mov bl, [d]
1087   0ADB A7 00         mov bh, 0
1088   0ADD             ; START RELATIONAL
1089   0ADD D7            push a
1090   0ADE 11            mov a, b
1091   0ADF 26 61 00      mov b, $61
1092   0AE2 B0            cmp a, b
1093   0AE3 FD 80         sge ; >=
1094   0AE5 E4            pop a
1095   0AE6             ; END RELATIONAL
1096   0AE6 D7            push a
1097   0AE7 11            mov a, b
1098   0AE8 FA 05 00      lea d, [bp + 5] ; $ch
1099   0AEB 32            mov bl, [d]
1100   0AEC A7 00         mov bh, 0
1101   0AEE             ; START RELATIONAL
1102   0AEE D7            push a
1103   0AEF 11            mov a, b
1104   0AF0 26 7A 00      mov b, $7a
1105   0AF3 B0            cmp a, b
1106   0AF4 FD 74         sle ; <=
1107   0AF6 E4            pop a
1108   0AF7             ; END RELATIONAL
1109   0AF7 FD A7         sand a, b ; &&
1110   0AF9 E4            pop a
1111   0AFA C0 00 00      cmp b, 0
1112   0AFD C6 17 0B      je _if25_else
1113   0B00             _if25_true:
1114   0B00             ;; return ch - 'a' + 'A'; 
1115   0B00 FA 05 00      lea d, [bp + 5] ; $ch
1116   0B03 32            mov bl, [d]
1117   0B04 A7 00         mov bh, 0
1118   0B06             ; START TERMS
1119   0B06 D7            push a
1120   0B07 11            mov a, b
1121   0B08 26 61 00      mov b, $61
1122   0B0B 60            sub a, b
1123   0B0C 26 41 00      mov b, $41
1124   0B0F 54            add a, b
1125   0B10 27            mov b, a
1126   0B11 E4            pop a
1127   0B12             ; END TERMS
1128   0B12 F9            leave
1129   0B13 09            ret
1130   0B14 0A 1F 0B      jmp _if25_exit
1131   0B17             _if25_else:
1132   0B17             ;; return ch; 
1133   0B17 FA 05 00      lea d, [bp + 5] ; $ch
1134   0B1A 32            mov bl, [d]
1135   0B1B A7 00         mov bh, 0
1136   0B1D F9            leave
1137   0B1E 09            ret
1138   0B1F             _if25_exit:
1139   0B1F F9            leave
1140   0B20 09            ret
1141   0B21             
1142   0B21             is_delimiter:
1143   0B21 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1144   0B24             ;; if( 
1145   0B24             _if26_cond:
1146   0B24 FA 05 00      lea d, [bp + 5] ; $c
1147   0B27 32            mov bl, [d]
1148   0B28 A7 00         mov bh, 0
1149   0B2A             ; START RELATIONAL
1150   0B2A D7            push a
1151   0B2B 11            mov a, b
1152   0B2C 26 40 00      mov b, $40
1153   0B2F B0            cmp a, b
1154   0B30 FD 71         seq ; ==
1155   0B32 E4            pop a
1156   0B33             ; END RELATIONAL
1157   0B33 D7            push a
1158   0B34 11            mov a, b
1159   0B35 FA 05 00      lea d, [bp + 5] ; $c
1160   0B38 32            mov bl, [d]
1161   0B39 A7 00         mov bh, 0
1162   0B3B             ; START RELATIONAL
1163   0B3B D7            push a
1164   0B3C 11            mov a, b
1165   0B3D 26 23 00      mov b, $23
1166   0B40 B0            cmp a, b
1167   0B41 FD 71         seq ; ==
1168   0B43 E4            pop a
1169   0B44             ; END RELATIONAL
1170   0B44 FD A8         sor a, b ; ||
1171   0B46 11            mov a, b
1172   0B47 FA 05 00      lea d, [bp + 5] ; $c
1173   0B4A 32            mov bl, [d]
1174   0B4B A7 00         mov bh, 0
1175   0B4D             ; START RELATIONAL
1176   0B4D D7            push a
1177   0B4E 11            mov a, b
1178   0B4F 26 24 00      mov b, $24
1179   0B52 B0            cmp a, b
1180   0B53 FD 71         seq ; ==
1181   0B55 E4            pop a
1182   0B56             ; END RELATIONAL
1183   0B56 FD A8         sor a, b ; ||
1184   0B58 11            mov a, b
1185   0B59 FA 05 00      lea d, [bp + 5] ; $c
1186   0B5C 32            mov bl, [d]
1187   0B5D A7 00         mov bh, 0
1188   0B5F             ; START RELATIONAL
1189   0B5F D7            push a
1190   0B60 11            mov a, b
1191   0B61 26 2B 00      mov b, $2b
1192   0B64 B0            cmp a, b
1193   0B65 FD 71         seq ; ==
1194   0B67 E4            pop a
1195   0B68             ; END RELATIONAL
1196   0B68 FD A8         sor a, b ; ||
1197   0B6A 11            mov a, b
1198   0B6B FA 05 00      lea d, [bp + 5] ; $c
1199   0B6E 32            mov bl, [d]
1200   0B6F A7 00         mov bh, 0
1201   0B71             ; START RELATIONAL
1202   0B71 D7            push a
1203   0B72 11            mov a, b
1204   0B73 26 2D 00      mov b, $2d
1205   0B76 B0            cmp a, b
1206   0B77 FD 71         seq ; ==
1207   0B79 E4            pop a
1208   0B7A             ; END RELATIONAL
1209   0B7A FD A8         sor a, b ; ||
1210   0B7C 11            mov a, b
1211   0B7D FA 05 00      lea d, [bp + 5] ; $c
1212   0B80 32            mov bl, [d]
1213   0B81 A7 00         mov bh, 0
1214   0B83             ; START RELATIONAL
1215   0B83 D7            push a
1216   0B84 11            mov a, b
1217   0B85 26 2A 00      mov b, $2a
1218   0B88 B0            cmp a, b
1219   0B89 FD 71         seq ; ==
1220   0B8B E4            pop a
1221   0B8C             ; END RELATIONAL
1222   0B8C FD A8         sor a, b ; ||
1223   0B8E 11            mov a, b
1224   0B8F FA 05 00      lea d, [bp + 5] ; $c
1225   0B92 32            mov bl, [d]
1226   0B93 A7 00         mov bh, 0
1227   0B95             ; START RELATIONAL
1228   0B95 D7            push a
1229   0B96 11            mov a, b
1230   0B97 26 2F 00      mov b, $2f
1231   0B9A B0            cmp a, b
1232   0B9B FD 71         seq ; ==
1233   0B9D E4            pop a
1234   0B9E             ; END RELATIONAL
1235   0B9E FD A8         sor a, b ; ||
1236   0BA0 11            mov a, b
1237   0BA1 FA 05 00      lea d, [bp + 5] ; $c
1238   0BA4 32            mov bl, [d]
1239   0BA5 A7 00         mov bh, 0
1240   0BA7             ; START RELATIONAL
1241   0BA7 D7            push a
1242   0BA8 11            mov a, b
1243   0BA9 26 25 00      mov b, $25
1244   0BAC B0            cmp a, b
1245   0BAD FD 71         seq ; ==
1246   0BAF E4            pop a
1247   0BB0             ; END RELATIONAL
1248   0BB0 FD A8         sor a, b ; ||
1249   0BB2 11            mov a, b
1250   0BB3 FA 05 00      lea d, [bp + 5] ; $c
1251   0BB6 32            mov bl, [d]
1252   0BB7 A7 00         mov bh, 0
1253   0BB9             ; START RELATIONAL
1254   0BB9 D7            push a
1255   0BBA 11            mov a, b
1256   0BBB 26 5B 00      mov b, $5b
1257   0BBE B0            cmp a, b
1258   0BBF FD 71         seq ; ==
1259   0BC1 E4            pop a
1260   0BC2             ; END RELATIONAL
1261   0BC2 FD A8         sor a, b ; ||
1262   0BC4 11            mov a, b
1263   0BC5 FA 05 00      lea d, [bp + 5] ; $c
1264   0BC8 32            mov bl, [d]
1265   0BC9 A7 00         mov bh, 0
1266   0BCB             ; START RELATIONAL
1267   0BCB D7            push a
1268   0BCC 11            mov a, b
1269   0BCD 26 5D 00      mov b, $5d
1270   0BD0 B0            cmp a, b
1271   0BD1 FD 71         seq ; ==
1272   0BD3 E4            pop a
1273   0BD4             ; END RELATIONAL
1274   0BD4 FD A8         sor a, b ; ||
1275   0BD6 11            mov a, b
1276   0BD7 FA 05 00      lea d, [bp + 5] ; $c
1277   0BDA 32            mov bl, [d]
1278   0BDB A7 00         mov bh, 0
1279   0BDD             ; START RELATIONAL
1280   0BDD D7            push a
1281   0BDE 11            mov a, b
1282   0BDF 26 28 00      mov b, $28
1283   0BE2 B0            cmp a, b
1284   0BE3 FD 71         seq ; ==
1285   0BE5 E4            pop a
1286   0BE6             ; END RELATIONAL
1287   0BE6 FD A8         sor a, b ; ||
1288   0BE8 11            mov a, b
1289   0BE9 FA 05 00      lea d, [bp + 5] ; $c
1290   0BEC 32            mov bl, [d]
1291   0BED A7 00         mov bh, 0
1292   0BEF             ; START RELATIONAL
1293   0BEF D7            push a
1294   0BF0 11            mov a, b
1295   0BF1 26 29 00      mov b, $29
1296   0BF4 B0            cmp a, b
1297   0BF5 FD 71         seq ; ==
1298   0BF7 E4            pop a
1299   0BF8             ; END RELATIONAL
1300   0BF8 FD A8         sor a, b ; ||
1301   0BFA 11            mov a, b
1302   0BFB FA 05 00      lea d, [bp + 5] ; $c
1303   0BFE 32            mov bl, [d]
1304   0BFF A7 00         mov bh, 0
1305   0C01             ; START RELATIONAL
1306   0C01 D7            push a
1307   0C02 11            mov a, b
1308   0C03 26 7B 00      mov b, $7b
1309   0C06 B0            cmp a, b
1310   0C07 FD 71         seq ; ==
1311   0C09 E4            pop a
1312   0C0A             ; END RELATIONAL
1313   0C0A FD A8         sor a, b ; ||
1314   0C0C 11            mov a, b
1315   0C0D FA 05 00      lea d, [bp + 5] ; $c
1316   0C10 32            mov bl, [d]
1317   0C11 A7 00         mov bh, 0
1318   0C13             ; START RELATIONAL
1319   0C13 D7            push a
1320   0C14 11            mov a, b
1321   0C15 26 7D 00      mov b, $7d
1322   0C18 B0            cmp a, b
1323   0C19 FD 71         seq ; ==
1324   0C1B E4            pop a
1325   0C1C             ; END RELATIONAL
1326   0C1C FD A8         sor a, b ; ||
1327   0C1E 11            mov a, b
1328   0C1F FA 05 00      lea d, [bp + 5] ; $c
1329   0C22 32            mov bl, [d]
1330   0C23 A7 00         mov bh, 0
1331   0C25             ; START RELATIONAL
1332   0C25 D7            push a
1333   0C26 11            mov a, b
1334   0C27 26 3A 00      mov b, $3a
1335   0C2A B0            cmp a, b
1336   0C2B FD 71         seq ; ==
1337   0C2D E4            pop a
1338   0C2E             ; END RELATIONAL
1339   0C2E FD A8         sor a, b ; ||
1340   0C30 11            mov a, b
1341   0C31 FA 05 00      lea d, [bp + 5] ; $c
1342   0C34 32            mov bl, [d]
1343   0C35 A7 00         mov bh, 0
1344   0C37             ; START RELATIONAL
1345   0C37 D7            push a
1346   0C38 11            mov a, b
1347   0C39 26 3B 00      mov b, $3b
1348   0C3C B0            cmp a, b
1349   0C3D FD 71         seq ; ==
1350   0C3F E4            pop a
1351   0C40             ; END RELATIONAL
1352   0C40 FD A8         sor a, b ; ||
1353   0C42 11            mov a, b
1354   0C43 FA 05 00      lea d, [bp + 5] ; $c
1355   0C46 32            mov bl, [d]
1356   0C47 A7 00         mov bh, 0
1357   0C49             ; START RELATIONAL
1358   0C49 D7            push a
1359   0C4A 11            mov a, b
1360   0C4B 26 3C 00      mov b, $3c
1361   0C4E B0            cmp a, b
1362   0C4F FD 71         seq ; ==
1363   0C51 E4            pop a
1364   0C52             ; END RELATIONAL
1365   0C52 FD A8         sor a, b ; ||
1366   0C54 11            mov a, b
1367   0C55 FA 05 00      lea d, [bp + 5] ; $c
1368   0C58 32            mov bl, [d]
1369   0C59 A7 00         mov bh, 0
1370   0C5B             ; START RELATIONAL
1371   0C5B D7            push a
1372   0C5C 11            mov a, b
1373   0C5D 26 3E 00      mov b, $3e
1374   0C60 B0            cmp a, b
1375   0C61 FD 71         seq ; ==
1376   0C63 E4            pop a
1377   0C64             ; END RELATIONAL
1378   0C64 FD A8         sor a, b ; ||
1379   0C66 11            mov a, b
1380   0C67 FA 05 00      lea d, [bp + 5] ; $c
1381   0C6A 32            mov bl, [d]
1382   0C6B A7 00         mov bh, 0
1383   0C6D             ; START RELATIONAL
1384   0C6D D7            push a
1385   0C6E 11            mov a, b
1386   0C6F 26 3D 00      mov b, $3d
1387   0C72 B0            cmp a, b
1388   0C73 FD 71         seq ; ==
1389   0C75 E4            pop a
1390   0C76             ; END RELATIONAL
1391   0C76 FD A8         sor a, b ; ||
1392   0C78 11            mov a, b
1393   0C79 FA 05 00      lea d, [bp + 5] ; $c
1394   0C7C 32            mov bl, [d]
1395   0C7D A7 00         mov bh, 0
1396   0C7F             ; START RELATIONAL
1397   0C7F D7            push a
1398   0C80 11            mov a, b
1399   0C81 26 21 00      mov b, $21
1400   0C84 B0            cmp a, b
1401   0C85 FD 71         seq ; ==
1402   0C87 E4            pop a
1403   0C88             ; END RELATIONAL
1404   0C88 FD A8         sor a, b ; ||
1405   0C8A 11            mov a, b
1406   0C8B FA 05 00      lea d, [bp + 5] ; $c
1407   0C8E 32            mov bl, [d]
1408   0C8F A7 00         mov bh, 0
1409   0C91             ; START RELATIONAL
1410   0C91 D7            push a
1411   0C92 11            mov a, b
1412   0C93 26 5E 00      mov b, $5e
1413   0C96 B0            cmp a, b
1414   0C97 FD 71         seq ; ==
1415   0C99 E4            pop a
1416   0C9A             ; END RELATIONAL
1417   0C9A FD A8         sor a, b ; ||
1418   0C9C 11            mov a, b
1419   0C9D FA 05 00      lea d, [bp + 5] ; $c
1420   0CA0 32            mov bl, [d]
1421   0CA1 A7 00         mov bh, 0
1422   0CA3             ; START RELATIONAL
1423   0CA3 D7            push a
1424   0CA4 11            mov a, b
1425   0CA5 26 26 00      mov b, $26
1426   0CA8 B0            cmp a, b
1427   0CA9 FD 71         seq ; ==
1428   0CAB E4            pop a
1429   0CAC             ; END RELATIONAL
1430   0CAC FD A8         sor a, b ; ||
1431   0CAE 11            mov a, b
1432   0CAF FA 05 00      lea d, [bp + 5] ; $c
1433   0CB2 32            mov bl, [d]
1434   0CB3 A7 00         mov bh, 0
1435   0CB5             ; START RELATIONAL
1436   0CB5 D7            push a
1437   0CB6 11            mov a, b
1438   0CB7 26 7C 00      mov b, $7c
1439   0CBA B0            cmp a, b
1440   0CBB FD 71         seq ; ==
1441   0CBD E4            pop a
1442   0CBE             ; END RELATIONAL
1443   0CBE FD A8         sor a, b ; ||
1444   0CC0 11            mov a, b
1445   0CC1 FA 05 00      lea d, [bp + 5] ; $c
1446   0CC4 32            mov bl, [d]
1447   0CC5 A7 00         mov bh, 0
1448   0CC7             ; START RELATIONAL
1449   0CC7 D7            push a
1450   0CC8 11            mov a, b
1451   0CC9 26 7E 00      mov b, $7e
1452   0CCC B0            cmp a, b
1453   0CCD FD 71         seq ; ==
1454   0CCF E4            pop a
1455   0CD0             ; END RELATIONAL
1456   0CD0 FD A8         sor a, b ; ||
1457   0CD2 11            mov a, b
1458   0CD3 FA 05 00      lea d, [bp + 5] ; $c
1459   0CD6 32            mov bl, [d]
1460   0CD7 A7 00         mov bh, 0
1461   0CD9             ; START RELATIONAL
1462   0CD9 D7            push a
1463   0CDA 11            mov a, b
1464   0CDB 26 2E 00      mov b, $2e
1465   0CDE B0            cmp a, b
1466   0CDF FD 71         seq ; ==
1467   0CE1 E4            pop a
1468   0CE2             ; END RELATIONAL
1469   0CE2 FD A8         sor a, b ; ||
1470   0CE4 E4            pop a
1471   0CE5 C0 00 00      cmp b, 0
1472   0CE8 C6 F3 0C      je _if26_else
1473   0CEB             _if26_true:
1474   0CEB             ;; return 1; 
1475   0CEB 26 01 00      mov b, $1
1476   0CEE F9            leave
1477   0CEF 09            ret
1478   0CF0 0A F8 0C      jmp _if26_exit
1479   0CF3             _if26_else:
1480   0CF3             ;; return 0; 
1481   0CF3 26 00 00      mov b, $0
1482   0CF6 F9            leave
1483   0CF7 09            ret
1484   0CF8             _if26_exit:
1485   0CF8 F9            leave
1486   0CF9 09            ret
1487   0CFA             
1488   0CFA             strcpy:
1489   0CFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1490   0CFD             ; $psrc 
1491   0CFD             ; $pdest 
1492   0CFD 52 04 00      sub sp, 4
1493   0D00             ;; psrc = src; 
1494   0D00 FA FF FF      lea d, [bp + -1] ; $psrc
1495   0D03 DA            push d
1496   0D04 FA 05 00      lea d, [bp + 5] ; $src
1497   0D07 2A            mov b, [d]
1498   0D08 E7            pop d
1499   0D09 FD 43         mov [d], b
1500   0D0B             ;; pdest = dest; 
1501   0D0B FA FD FF      lea d, [bp + -3] ; $pdest
1502   0D0E DA            push d
1503   0D0F FA 07 00      lea d, [bp + 7] ; $dest
1504   0D12 2A            mov b, [d]
1505   0D13 E7            pop d
1506   0D14 FD 43         mov [d], b
1507   0D16             ;; while(*psrc) *pdest++ = *psrc++; 
1508   0D16             _while27_cond:
1509   0D16 FA FF FF      lea d, [bp + -1] ; $psrc
1510   0D19 2A            mov b, [d]
1511   0D1A 74            mov d, b
1512   0D1B 32            mov bl, [d]
1513   0D1C A7 00         mov bh, 0
1514   0D1E C0 00 00      cmp b, 0
1515   0D21 C6 4D 0D      je _while27_exit
1516   0D24             _while27_block:
1517   0D24             ;; *pdest++ = *psrc++; 
1518   0D24 FA FD FF      lea d, [bp + -3] ; $pdest
1519   0D27 2A            mov b, [d]
1520   0D28 FD 79         mov g, b
1521   0D2A FD 77         inc b
1522   0D2C FA FD FF      lea d, [bp + -3] ; $pdest
1523   0D2F FD 43         mov [d], b
1524   0D31 FD 27         mov b, g
1525   0D33 D8            push b
1526   0D34 FA FF FF      lea d, [bp + -1] ; $psrc
1527   0D37 2A            mov b, [d]
1528   0D38 FD 79         mov g, b
1529   0D3A FD 77         inc b
1530   0D3C FA FF FF      lea d, [bp + -1] ; $psrc
1531   0D3F FD 43         mov [d], b
1532   0D41 FD 27         mov b, g
1533   0D43 74            mov d, b
1534   0D44 32            mov bl, [d]
1535   0D45 A7 00         mov bh, 0
1536   0D47 E7            pop d
1537   0D48 FD 3E         mov [d], bl
1538   0D4A 0A 16 0D      jmp _while27_cond
1539   0D4D             _while27_exit:
1540   0D4D             ;; *pdest = '\0'; 
1541   0D4D FA FD FF      lea d, [bp + -3] ; $pdest
1542   0D50 2A            mov b, [d]
1543   0D51 D8            push b
1544   0D52 26 00 00      mov b, $0
1545   0D55 E7            pop d
1546   0D56 FD 3E         mov [d], bl
1547   0D58 F9            leave
1548   0D59 09            ret
1549   0D5A             
1550   0D5A             strcmp:
1551   0D5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1552   0D5D             ;; while (*s1 && (*s1 == *s2)) { 
1553   0D5D             _while28_cond:
1554   0D5D FA 07 00      lea d, [bp + 7] ; $s1
1555   0D60 2A            mov b, [d]
1556   0D61 74            mov d, b
1557   0D62 32            mov bl, [d]
1558   0D63 A7 00         mov bh, 0
1559   0D65 D7            push a
1560   0D66 11            mov a, b
1561   0D67 FA 07 00      lea d, [bp + 7] ; $s1
1562   0D6A 2A            mov b, [d]
1563   0D6B 74            mov d, b
1564   0D6C 32            mov bl, [d]
1565   0D6D A7 00         mov bh, 0
1566   0D6F             ; START RELATIONAL
1567   0D6F D7            push a
1568   0D70 11            mov a, b
1569   0D71 FA 05 00      lea d, [bp + 5] ; $s2
1570   0D74 2A            mov b, [d]
1571   0D75 74            mov d, b
1572   0D76 32            mov bl, [d]
1573   0D77 A7 00         mov bh, 0
1574   0D79 B0            cmp a, b
1575   0D7A FD 71         seq ; ==
1576   0D7C E4            pop a
1577   0D7D             ; END RELATIONAL
1578   0D7D FD A7         sand a, b ; &&
1579   0D7F E4            pop a
1580   0D80 C0 00 00      cmp b, 0
1581   0D83 C6 A7 0D      je _while28_exit
1582   0D86             _while28_block:
1583   0D86             ;; s1++; 
1584   0D86 FA 07 00      lea d, [bp + 7] ; $s1
1585   0D89 2A            mov b, [d]
1586   0D8A FD 79         mov g, b
1587   0D8C FD 77         inc b
1588   0D8E FA 07 00      lea d, [bp + 7] ; $s1
1589   0D91 FD 43         mov [d], b
1590   0D93 FD 27         mov b, g
1591   0D95             ;; s2++; 
1592   0D95 FA 05 00      lea d, [bp + 5] ; $s2
1593   0D98 2A            mov b, [d]
1594   0D99 FD 79         mov g, b
1595   0D9B FD 77         inc b
1596   0D9D FA 05 00      lea d, [bp + 5] ; $s2
1597   0DA0 FD 43         mov [d], b
1598   0DA2 FD 27         mov b, g
1599   0DA4 0A 5D 0D      jmp _while28_cond
1600   0DA7             _while28_exit:
1601   0DA7             ;; return *s1 - *s2; 
1602   0DA7 FA 07 00      lea d, [bp + 7] ; $s1
1603   0DAA 2A            mov b, [d]
1604   0DAB 74            mov d, b
1605   0DAC 32            mov bl, [d]
1606   0DAD A7 00         mov bh, 0
1607   0DAF             ; START TERMS
1608   0DAF D7            push a
1609   0DB0 11            mov a, b
1610   0DB1 FA 05 00      lea d, [bp + 5] ; $s2
1611   0DB4 2A            mov b, [d]
1612   0DB5 74            mov d, b
1613   0DB6 32            mov bl, [d]
1614   0DB7 A7 00         mov bh, 0
1615   0DB9 60            sub a, b
1616   0DBA 27            mov b, a
1617   0DBB E4            pop a
1618   0DBC             ; END TERMS
1619   0DBC F9            leave
1620   0DBD 09            ret
1621   0DBE             
1622   0DBE             strcat:
1623   0DBE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1624   0DC1             ; $dest_len 
1625   0DC1             ; $i 
1626   0DC1 52 04 00      sub sp, 4
1627   0DC4             ;; dest_len = strlen(dest); 
1628   0DC4 FA FF FF      lea d, [bp + -1] ; $dest_len
1629   0DC7 DA            push d
1630   0DC8 FA 07 00      lea d, [bp + 7] ; $dest
1631   0DCB 2A            mov b, [d]
1632   0DCC FD AB         swp b
1633   0DCE D8            push b
1634   0DCF 07 74 0E      call strlen
1635   0DD2 51 02 00      add sp, 2
1636   0DD5 E7            pop d
1637   0DD6 FD 43         mov [d], b
1638   0DD8             ;; for (i = 0; src[i] != 0; i=i+1) { 
1639   0DD8             _for29_init:
1640   0DD8 FA FD FF      lea d, [bp + -3] ; $i
1641   0DDB DA            push d
1642   0DDC 26 00 00      mov b, $0
1643   0DDF E7            pop d
1644   0DE0 FD 43         mov [d], b
1645   0DE2             _for29_cond:
1646   0DE2 FA 05 00      lea d, [bp + 5] ; $src
1647   0DE5 FD 2A         mov d, [d]
1648   0DE7 D7            push a
1649   0DE8 DA            push d
1650   0DE9 FA FD FF      lea d, [bp + -3] ; $i
1651   0DEC 2A            mov b, [d]
1652   0DED E7            pop d
1653   0DEE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1654   0DF2 E4            pop a
1655   0DF3 32            mov bl, [d]
1656   0DF4 A7 00         mov bh, 0
1657   0DF6             ; START RELATIONAL
1658   0DF6 D7            push a
1659   0DF7 11            mov a, b
1660   0DF8 26 00 00      mov b, $0
1661   0DFB B0            cmp a, b
1662   0DFC FD 72         sneq ; !=
1663   0DFE E4            pop a
1664   0DFF             ; END RELATIONAL
1665   0DFF C0 00 00      cmp b, 0
1666   0E02 C6 4D 0E      je _for29_exit
1667   0E05             _for29_block:
1668   0E05             ;; dest[dest_len + i] = src[i]; 
1669   0E05 FA 07 00      lea d, [bp + 7] ; $dest
1670   0E08 FD 2A         mov d, [d]
1671   0E0A D7            push a
1672   0E0B DA            push d
1673   0E0C FA FF FF      lea d, [bp + -1] ; $dest_len
1674   0E0F 2A            mov b, [d]
1675   0E10             ; START TERMS
1676   0E10 D7            push a
1677   0E11 11            mov a, b
1678   0E12 FA FD FF      lea d, [bp + -3] ; $i
1679   0E15 2A            mov b, [d]
1680   0E16 54            add a, b
1681   0E17 27            mov b, a
1682   0E18 E4            pop a
1683   0E19             ; END TERMS
1684   0E19 E7            pop d
1685   0E1A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1686   0E1E E4            pop a
1687   0E1F DA            push d
1688   0E20 FA 05 00      lea d, [bp + 5] ; $src
1689   0E23 FD 2A         mov d, [d]
1690   0E25 D7            push a
1691   0E26 DA            push d
1692   0E27 FA FD FF      lea d, [bp + -3] ; $i
1693   0E2A 2A            mov b, [d]
1694   0E2B E7            pop d
1695   0E2C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1696   0E30 E4            pop a
1697   0E31 32            mov bl, [d]
1698   0E32 A7 00         mov bh, 0
1699   0E34 E7            pop d
1700   0E35 FD 3E         mov [d], bl
1701   0E37             _for29_update:
1702   0E37 FA FD FF      lea d, [bp + -3] ; $i
1703   0E3A DA            push d
1704   0E3B FA FD FF      lea d, [bp + -3] ; $i
1705   0E3E 2A            mov b, [d]
1706   0E3F             ; START TERMS
1707   0E3F D7            push a
1708   0E40 11            mov a, b
1709   0E41 26 01 00      mov b, $1
1710   0E44 54            add a, b
1711   0E45 27            mov b, a
1712   0E46 E4            pop a
1713   0E47             ; END TERMS
1714   0E47 E7            pop d
1715   0E48 FD 43         mov [d], b
1716   0E4A 0A E2 0D      jmp _for29_cond
1717   0E4D             _for29_exit:
1718   0E4D             ;; dest[dest_len + i] = 0; 
1719   0E4D FA 07 00      lea d, [bp + 7] ; $dest
1720   0E50 FD 2A         mov d, [d]
1721   0E52 D7            push a
1722   0E53 DA            push d
1723   0E54 FA FF FF      lea d, [bp + -1] ; $dest_len
1724   0E57 2A            mov b, [d]
1725   0E58             ; START TERMS
1726   0E58 D7            push a
1727   0E59 11            mov a, b
1728   0E5A FA FD FF      lea d, [bp + -3] ; $i
1729   0E5D 2A            mov b, [d]
1730   0E5E 54            add a, b
1731   0E5F 27            mov b, a
1732   0E60 E4            pop a
1733   0E61             ; END TERMS
1734   0E61 E7            pop d
1735   0E62 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1736   0E66 E4            pop a
1737   0E67 DA            push d
1738   0E68 26 00 00      mov b, $0
1739   0E6B E7            pop d
1740   0E6C FD 3E         mov [d], bl
1741   0E6E             ;; return dest; 
1742   0E6E FA 07 00      lea d, [bp + 7] ; $dest
1743   0E71 2A            mov b, [d]
1744   0E72 F9            leave
1745   0E73 09            ret
1746   0E74             
1747   0E74             strlen:
1748   0E74 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1749   0E77             ; $length 
1750   0E77 52 02 00      sub sp, 2
1751   0E7A             ;; length = 0; 
1752   0E7A FA FF FF      lea d, [bp + -1] ; $length
1753   0E7D DA            push d
1754   0E7E 26 00 00      mov b, $0
1755   0E81 E7            pop d
1756   0E82 FD 43         mov [d], b
1757   0E84             ;; while (str[length] != 0) { 
1758   0E84             _while30_cond:
1759   0E84 FA 05 00      lea d, [bp + 5] ; $str
1760   0E87 FD 2A         mov d, [d]
1761   0E89 D7            push a
1762   0E8A DA            push d
1763   0E8B FA FF FF      lea d, [bp + -1] ; $length
1764   0E8E 2A            mov b, [d]
1765   0E8F E7            pop d
1766   0E90 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1767   0E94 E4            pop a
1768   0E95 32            mov bl, [d]
1769   0E96 A7 00         mov bh, 0
1770   0E98             ; START RELATIONAL
1771   0E98 D7            push a
1772   0E99 11            mov a, b
1773   0E9A 26 00 00      mov b, $0
1774   0E9D B0            cmp a, b
1775   0E9E FD 72         sneq ; !=
1776   0EA0 E4            pop a
1777   0EA1             ; END RELATIONAL
1778   0EA1 C0 00 00      cmp b, 0
1779   0EA4 C6 B9 0E      je _while30_exit
1780   0EA7             _while30_block:
1781   0EA7             ;; length++; 
1782   0EA7 FA FF FF      lea d, [bp + -1] ; $length
1783   0EAA 2A            mov b, [d]
1784   0EAB FD 79         mov g, b
1785   0EAD FD 77         inc b
1786   0EAF FA FF FF      lea d, [bp + -1] ; $length
1787   0EB2 FD 43         mov [d], b
1788   0EB4 FD 27         mov b, g
1789   0EB6 0A 84 0E      jmp _while30_cond
1790   0EB9             _while30_exit:
1791   0EB9             ;; return length; 
1792   0EB9 FA FF FF      lea d, [bp + -1] ; $length
1793   0EBC 2A            mov b, [d]
1794   0EBD F9            leave
1795   0EBE 09            ret
1796   0EBF             
1797   0EBF             va_arg:
1798   0EBF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1799   0EC2             ; $val 
1800   0EC2 52 02 00      sub sp, 2
1801   0EC5             ;; if(size == 1){ 
1802   0EC5             _if31_cond:
1803   0EC5 FA 05 00      lea d, [bp + 5] ; $size
1804   0EC8 2A            mov b, [d]
1805   0EC9             ; START RELATIONAL
1806   0EC9 D7            push a
1807   0ECA 11            mov a, b
1808   0ECB 26 01 00      mov b, $1
1809   0ECE B0            cmp a, b
1810   0ECF FD 71         seq ; ==
1811   0ED1 E4            pop a
1812   0ED2             ; END RELATIONAL
1813   0ED2 C0 00 00      cmp b, 0
1814   0ED5 C6 F1 0E      je _if31_else
1815   0ED8             _if31_true:
1816   0ED8             ;; val = *(char*)arg->p; 
1817   0ED8 FA FF FF      lea d, [bp + -1] ; $val
1818   0EDB DA            push d
1819   0EDC FA 07 00      lea d, [bp + 7] ; $arg
1820   0EDF FD 2A         mov d, [d]
1821   0EE1 58 00 00      add d, 0
1822   0EE4 FD 14         clb
1823   0EE6 2A            mov b, [d]
1824   0EE7 74            mov d, b
1825   0EE8 32            mov bl, [d]
1826   0EE9 A7 00         mov bh, 0
1827   0EEB E7            pop d
1828   0EEC FD 43         mov [d], b
1829   0EEE 0A 27 0F      jmp _if31_exit
1830   0EF1             _if31_else:
1831   0EF1             ;; if(size == 2){ 
1832   0EF1             _if32_cond:
1833   0EF1 FA 05 00      lea d, [bp + 5] ; $size
1834   0EF4 2A            mov b, [d]
1835   0EF5             ; START RELATIONAL
1836   0EF5 D7            push a
1837   0EF6 11            mov a, b
1838   0EF7 26 02 00      mov b, $2
1839   0EFA B0            cmp a, b
1840   0EFB FD 71         seq ; ==
1841   0EFD E4            pop a
1842   0EFE             ; END RELATIONAL
1843   0EFE C0 00 00      cmp b, 0
1844   0F01 C6 1B 0F      je _if32_else
1845   0F04             _if32_true:
1846   0F04             ;; val = *(int*)arg->p; 
1847   0F04 FA FF FF      lea d, [bp + -1] ; $val
1848   0F07 DA            push d
1849   0F08 FA 07 00      lea d, [bp + 7] ; $arg
1850   0F0B FD 2A         mov d, [d]
1851   0F0D 58 00 00      add d, 0
1852   0F10 FD 14         clb
1853   0F12 2A            mov b, [d]
1854   0F13 74            mov d, b
1855   0F14 2A            mov b, [d]
1856   0F15 E7            pop d
1857   0F16 FD 43         mov [d], b
1858   0F18 0A 27 0F      jmp _if32_exit
1859   0F1B             _if32_else:
1860   0F1B             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
1861   0F1B 26 D6 3B      mov b, __s11 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
1862   0F1E FD AB         swp b
1863   0F20 D8            push b
1864   0F21 07 89 15      call print
1865   0F24 51 02 00      add sp, 2
1866   0F27             _if32_exit:
1867   0F27             _if31_exit:
1868   0F27             ;; arg->p = arg->p + size; 
1869   0F27 FA 07 00      lea d, [bp + 7] ; $arg
1870   0F2A FD 2A         mov d, [d]
1871   0F2C 58 00 00      add d, 0
1872   0F2F FD 14         clb
1873   0F31 DA            push d
1874   0F32 FA 07 00      lea d, [bp + 7] ; $arg
1875   0F35 FD 2A         mov d, [d]
1876   0F37 58 00 00      add d, 0
1877   0F3A FD 14         clb
1878   0F3C 2A            mov b, [d]
1879   0F3D             ; START TERMS
1880   0F3D D7            push a
1881   0F3E 11            mov a, b
1882   0F3F FA 05 00      lea d, [bp + 5] ; $size
1883   0F42 2A            mov b, [d]
1884   0F43 54            add a, b
1885   0F44 27            mov b, a
1886   0F45 E4            pop a
1887   0F46             ; END TERMS
1888   0F46 E7            pop d
1889   0F47 FD 43         mov [d], b
1890   0F49             ;; return val; 
1891   0F49 FA FF FF      lea d, [bp + -1] ; $val
1892   0F4C 2A            mov b, [d]
1893   0F4D F9            leave
1894   0F4E 09            ret
1895   0F4F             
1896   0F4F             printf:
1897   0F4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1898   0F52             ; $p 
1899   0F52             ; $fp 
1900   0F52             ; $i 
1901   0F52 52 06 00      sub sp, 6
1902   0F55             ;; fp = format; 
1903   0F55 FA FD FF      lea d, [bp + -3] ; $fp
1904   0F58 DA            push d
1905   0F59 FA 05 00      lea d, [bp + 5] ; $format
1906   0F5C 2A            mov b, [d]
1907   0F5D E7            pop d
1908   0F5E FD 43         mov [d], b
1909   0F60             ;; p = &format; 
1910   0F60 FA FF FF      lea d, [bp + -1] ; $p
1911   0F63 DA            push d
1912   0F64 FA 05 00      lea d, [bp + 5] ; $format
1913   0F67 2D            mov b, d
1914   0F68 E7            pop d
1915   0F69 FD 43         mov [d], b
1916   0F6B             ;; for(;;){ 
1917   0F6B             _for33_init:
1918   0F6B             _for33_cond:
1919   0F6B             _for33_block:
1920   0F6B             ;; if(!*fp) break; 
1921   0F6B             _if34_cond:
1922   0F6B FA FD FF      lea d, [bp + -3] ; $fp
1923   0F6E 2A            mov b, [d]
1924   0F6F 74            mov d, b
1925   0F70 32            mov bl, [d]
1926   0F71 A7 00         mov bh, 0
1927   0F73 C0 00 00      cmp b, 0
1928   0F76 FD 71         seq ; !
1929   0F78 C0 00 00      cmp b, 0
1930   0F7B C6 84 0F      je _if34_exit
1931   0F7E             _if34_true:
1932   0F7E             ;; break; 
1933   0F7E 0A CE 10      jmp _for33_exit ; for break
1934   0F81 0A 84 0F      jmp _if34_exit
1935   0F84             _if34_exit:
1936   0F84             ;; if(*fp == '%'){ 
1937   0F84             _if35_cond:
1938   0F84 FA FD FF      lea d, [bp + -3] ; $fp
1939   0F87 2A            mov b, [d]
1940   0F88 74            mov d, b
1941   0F89 32            mov bl, [d]
1942   0F8A A7 00         mov bh, 0
1943   0F8C             ; START RELATIONAL
1944   0F8C D7            push a
1945   0F8D 11            mov a, b
1946   0F8E 26 25 00      mov b, $25
1947   0F91 B0            cmp a, b
1948   0F92 FD 71         seq ; ==
1949   0F94 E4            pop a
1950   0F95             ; END RELATIONAL
1951   0F95 C0 00 00      cmp b, 0
1952   0F98 C6 AD 10      je _if35_else
1953   0F9B             _if35_true:
1954   0F9B             ;; fp++; 
1955   0F9B FA FD FF      lea d, [bp + -3] ; $fp
1956   0F9E 2A            mov b, [d]
1957   0F9F FD 79         mov g, b
1958   0FA1 FD 77         inc b
1959   0FA3 FA FD FF      lea d, [bp + -3] ; $fp
1960   0FA6 FD 43         mov [d], b
1961   0FA8 FD 27         mov b, g
1962   0FAA             ;; switch(*fp){ 
1963   0FAA             _switch36_expr:
1964   0FAA FA FD FF      lea d, [bp + -3] ; $fp
1965   0FAD 2A            mov b, [d]
1966   0FAE 74            mov d, b
1967   0FAF 32            mov bl, [d]
1968   0FB0 A7 00         mov bh, 0
1969   0FB2             _switch36_comparisons:
1970   0FB2 C1 64         cmp bl, $64
1971   0FB4 C6 D6 0F      je _switch36_case0
1972   0FB7 C1 69         cmp bl, $69
1973   0FB9 C6 D6 0F      je _switch36_case1
1974   0FBC C1 75         cmp bl, $75
1975   0FBE C6 FB 0F      je _switch36_case2
1976   0FC1 C1 78         cmp bl, $78
1977   0FC3 C6 20 10      je _switch36_case3
1978   0FC6 C1 63         cmp bl, $63
1979   0FC8 C6 45 10      je _switch36_case4
1980   0FCB C1 73         cmp bl, $73
1981   0FCD C6 6A 10      je _switch36_case5
1982   0FD0 0A 8F 10      jmp _switch36_default
1983   0FD3 0A 9B 10      jmp _switch36_exit
1984   0FD6             _switch36_case0:
1985   0FD6             _switch36_case1:
1986   0FD6             ;; p = p - 2; 
1987   0FD6 FA FF FF      lea d, [bp + -1] ; $p
1988   0FD9 DA            push d
1989   0FDA FA FF FF      lea d, [bp + -1] ; $p
1990   0FDD 2A            mov b, [d]
1991   0FDE             ; START TERMS
1992   0FDE D7            push a
1993   0FDF 11            mov a, b
1994   0FE0 26 02 00      mov b, $2
1995   0FE3 60            sub a, b
1996   0FE4 27            mov b, a
1997   0FE5 E4            pop a
1998   0FE6             ; END TERMS
1999   0FE6 E7            pop d
2000   0FE7 FD 43         mov [d], b
2001   0FE9             ;; prints(*(int*)p); 
2002   0FE9 FA FF FF      lea d, [bp + -1] ; $p
2003   0FEC 2A            mov b, [d]
2004   0FED 74            mov d, b
2005   0FEE 2A            mov b, [d]
2006   0FEF FD AB         swp b
2007   0FF1 D8            push b
2008   0FF2 07 60 13      call prints
2009   0FF5 51 02 00      add sp, 2
2010   0FF8             ;; break; 
2011   0FF8 0A 9B 10      jmp _switch36_exit ; case break
2012   0FFB             _switch36_case2:
2013   0FFB             ;; p = p - 2; 
2014   0FFB FA FF FF      lea d, [bp + -1] ; $p
2015   0FFE DA            push d
2016   0FFF FA FF FF      lea d, [bp + -1] ; $p
2017   1002 2A            mov b, [d]
2018   1003             ; START TERMS
2019   1003 D7            push a
2020   1004 11            mov a, b
2021   1005 26 02 00      mov b, $2
2022   1008 60            sub a, b
2023   1009 27            mov b, a
2024   100A E4            pop a
2025   100B             ; END TERMS
2026   100B E7            pop d
2027   100C FD 43         mov [d], b
2028   100E             ;; printu(*(unsigned int*)p); 
2029   100E FA FF FF      lea d, [bp + -1] ; $p
2030   1011 2A            mov b, [d]
2031   1012 74            mov d, b
2032   1013 2A            mov b, [d]
2033   1014 FD AB         swp b
2034   1016 D8            push b
2035   1017 07 55 14      call printu
2036   101A 51 02 00      add sp, 2
2037   101D             ;; break; 
2038   101D 0A 9B 10      jmp _switch36_exit ; case break
2039   1020             _switch36_case3:
2040   1020             ;; p = p - 2; 
2041   1020 FA FF FF      lea d, [bp + -1] ; $p
2042   1023 DA            push d
2043   1024 FA FF FF      lea d, [bp + -1] ; $p
2044   1027 2A            mov b, [d]
2045   1028             ; START TERMS
2046   1028 D7            push a
2047   1029 11            mov a, b
2048   102A 26 02 00      mov b, $2
2049   102D 60            sub a, b
2050   102E 27            mov b, a
2051   102F E4            pop a
2052   1030             ; END TERMS
2053   1030 E7            pop d
2054   1031 FD 43         mov [d], b
2055   1033             ;; printx16(*(unsigned int*)p); 
2056   1033 FA FF FF      lea d, [bp + -1] ; $p
2057   1036 2A            mov b, [d]
2058   1037 74            mov d, b
2059   1038 2A            mov b, [d]
2060   1039 FD AB         swp b
2061   103B D8            push b
2062   103C 07 D0 10      call printx16
2063   103F 51 02 00      add sp, 2
2064   1042             ;; break; 
2065   1042 0A 9B 10      jmp _switch36_exit ; case break
2066   1045             _switch36_case4:
2067   1045             ;; p = p - 2; 
2068   1045 FA FF FF      lea d, [bp + -1] ; $p
2069   1048 DA            push d
2070   1049 FA FF FF      lea d, [bp + -1] ; $p
2071   104C 2A            mov b, [d]
2072   104D             ; START TERMS
2073   104D D7            push a
2074   104E 11            mov a, b
2075   104F 26 02 00      mov b, $2
2076   1052 60            sub a, b
2077   1053 27            mov b, a
2078   1054 E4            pop a
2079   1055             ; END TERMS
2080   1055 E7            pop d
2081   1056 FD 43         mov [d], b
2082   1058             ;; putchar(*(char*)p); 
2083   1058 FA FF FF      lea d, [bp + -1] ; $p
2084   105B 2A            mov b, [d]
2085   105C 74            mov d, b
2086   105D 32            mov bl, [d]
2087   105E A7 00         mov bh, 0
2088   1060 DD            push bl
2089   1061 07 41 15      call putchar
2090   1064 51 01 00      add sp, 1
2091   1067             ;; break; 
2092   1067 0A 9B 10      jmp _switch36_exit ; case break
2093   106A             _switch36_case5:
2094   106A             ;; p = p - 2; 
2095   106A FA FF FF      lea d, [bp + -1] ; $p
2096   106D DA            push d
2097   106E FA FF FF      lea d, [bp + -1] ; $p
2098   1071 2A            mov b, [d]
2099   1072             ; START TERMS
2100   1072 D7            push a
2101   1073 11            mov a, b
2102   1074 26 02 00      mov b, $2
2103   1077 60            sub a, b
2104   1078 27            mov b, a
2105   1079 E4            pop a
2106   107A             ; END TERMS
2107   107A E7            pop d
2108   107B FD 43         mov [d], b
2109   107D             ;; print(*(char**)p); 
2110   107D FA FF FF      lea d, [bp + -1] ; $p
2111   1080 2A            mov b, [d]
2112   1081 74            mov d, b
2113   1082 2A            mov b, [d]
2114   1083 FD AB         swp b
2115   1085 D8            push b
2116   1086 07 89 15      call print
2117   1089 51 02 00      add sp, 2
2118   108C             ;; break; 
2119   108C 0A 9B 10      jmp _switch36_exit ; case break
2120   108F             _switch36_default:
2121   108F             ;; print("Error: Unknown argument type.\n"); 
2122   108F 26 1A 3C      mov b, __s12 ; "Error: Unknown argument type.\n"
2123   1092 FD AB         swp b
2124   1094 D8            push b
2125   1095 07 89 15      call print
2126   1098 51 02 00      add sp, 2
2127   109B             _switch36_exit:
2128   109B             ;; fp++; 
2129   109B FA FD FF      lea d, [bp + -3] ; $fp
2130   109E 2A            mov b, [d]
2131   109F FD 79         mov g, b
2132   10A1 FD 77         inc b
2133   10A3 FA FD FF      lea d, [bp + -3] ; $fp
2134   10A6 FD 43         mov [d], b
2135   10A8 FD 27         mov b, g
2136   10AA 0A CB 10      jmp _if35_exit
2137   10AD             _if35_else:
2138   10AD             ;; putchar(*fp); 
2139   10AD FA FD FF      lea d, [bp + -3] ; $fp
2140   10B0 2A            mov b, [d]
2141   10B1 74            mov d, b
2142   10B2 32            mov bl, [d]
2143   10B3 A7 00         mov bh, 0
2144   10B5 DD            push bl
2145   10B6 07 41 15      call putchar
2146   10B9 51 01 00      add sp, 1
2147   10BC             ;; fp++; 
2148   10BC FA FD FF      lea d, [bp + -3] ; $fp
2149   10BF 2A            mov b, [d]
2150   10C0 FD 79         mov g, b
2151   10C2 FD 77         inc b
2152   10C4 FA FD FF      lea d, [bp + -3] ; $fp
2153   10C7 FD 43         mov [d], b
2154   10C9 FD 27         mov b, g
2155   10CB             _if35_exit:
2156   10CB             _for33_update:
2157   10CB 0A 6B 0F      jmp _for33_cond
2158   10CE             _for33_exit:
2159   10CE F9            leave
2160   10CF 09            ret
2161   10D0             
2162   10D0             printx16:
2163   10D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2164   10D3             
2165   10D3             ; --- BEGIN INLINE ASM BLOCK
2166   10D3 FA 05 00      lea d, [bp + 5] ; $hex
2167   10D6 2A            mov b, [d]
2168   10D7 07 0A 19      call print_u16x
2169   10DA             ; --- END INLINE ASM BLOCK
2170   10DA             
2171   10DA F9            leave
2172   10DB 09            ret
2173   10DC             
2174   10DC             printx8:
2175   10DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2176   10DF             
2177   10DF             ; --- BEGIN INLINE ASM BLOCK
2178   10DF FA 05 00      lea d, [bp + 5] ; $hex
2179   10E2 32            mov bl, [d]
2180   10E3 07 4E 19      call print_u8x
2181   10E6             ; --- END INLINE ASM BLOCK
2182   10E6             
2183   10E6 F9            leave
2184   10E7 09            ret
2185   10E8             
2186   10E8             hex_to_int:
2187   10E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2188   10EB             ; $value 
2189   10EB 10 00 00      mov a, $0
2190   10EE 45 FF FF      mov [bp + -1], a
2191   10F1             ; $i 
2192   10F1             ; $hex_char 
2193   10F1             ; $len 
2194   10F1 52 07 00      sub sp, 7
2195   10F4             ;; len = strlen(hex_string); 
2196   10F4 FA FA FF      lea d, [bp + -6] ; $len
2197   10F7 DA            push d
2198   10F8 FA 05 00      lea d, [bp + 5] ; $hex_string
2199   10FB 2A            mov b, [d]
2200   10FC FD AB         swp b
2201   10FE D8            push b
2202   10FF 07 74 0E      call strlen
2203   1102 51 02 00      add sp, 2
2204   1105 E7            pop d
2205   1106 FD 43         mov [d], b
2206   1108             ;; for (i = 0; i < len; i++) { 
2207   1108             _for37_init:
2208   1108 FA FD FF      lea d, [bp + -3] ; $i
2209   110B DA            push d
2210   110C 26 00 00      mov b, $0
2211   110F E7            pop d
2212   1110 FD 43         mov [d], b
2213   1112             _for37_cond:
2214   1112 FA FD FF      lea d, [bp + -3] ; $i
2215   1115 2A            mov b, [d]
2216   1116             ; START RELATIONAL
2217   1116 D7            push a
2218   1117 11            mov a, b
2219   1118 FA FA FF      lea d, [bp + -6] ; $len
2220   111B 2A            mov b, [d]
2221   111C B0            cmp a, b
2222   111D FD 73         slt ; < 
2223   111F E4            pop a
2224   1120             ; END RELATIONAL
2225   1120 C0 00 00      cmp b, 0
2226   1123 C6 28 12      je _for37_exit
2227   1126             _for37_block:
2228   1126             ;; hex_char = hex_string[i]; 
2229   1126 FA FC FF      lea d, [bp + -4] ; $hex_char
2230   1129 DA            push d
2231   112A FA 05 00      lea d, [bp + 5] ; $hex_string
2232   112D FD 2A         mov d, [d]
2233   112F D7            push a
2234   1130 DA            push d
2235   1131 FA FD FF      lea d, [bp + -3] ; $i
2236   1134 2A            mov b, [d]
2237   1135 E7            pop d
2238   1136 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2239   113A E4            pop a
2240   113B 32            mov bl, [d]
2241   113C A7 00         mov bh, 0
2242   113E E7            pop d
2243   113F FD 3E         mov [d], bl
2244   1141             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2245   1141             _if38_cond:
2246   1141 FA FC FF      lea d, [bp + -4] ; $hex_char
2247   1144 32            mov bl, [d]
2248   1145 A7 00         mov bh, 0
2249   1147             ; START RELATIONAL
2250   1147 D7            push a
2251   1148 11            mov a, b
2252   1149 26 61 00      mov b, $61
2253   114C B0            cmp a, b
2254   114D FD 80         sge ; >=
2255   114F E4            pop a
2256   1150             ; END RELATIONAL
2257   1150 D7            push a
2258   1151 11            mov a, b
2259   1152 FA FC FF      lea d, [bp + -4] ; $hex_char
2260   1155 32            mov bl, [d]
2261   1156 A7 00         mov bh, 0
2262   1158             ; START RELATIONAL
2263   1158 D7            push a
2264   1159 11            mov a, b
2265   115A 26 66 00      mov b, $66
2266   115D B0            cmp a, b
2267   115E FD 74         sle ; <=
2268   1160 E4            pop a
2269   1161             ; END RELATIONAL
2270   1161 FD A7         sand a, b ; &&
2271   1163 E4            pop a
2272   1164 C0 00 00      cmp b, 0
2273   1167 C6 98 11      je _if38_else
2274   116A             _if38_true:
2275   116A             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2276   116A FA FF FF      lea d, [bp + -1] ; $value
2277   116D DA            push d
2278   116E FA FF FF      lea d, [bp + -1] ; $value
2279   1171 2A            mov b, [d]
2280   1172             ; START FACTORS
2281   1172 D7            push a
2282   1173 11            mov a, b
2283   1174 26 10 00      mov b, $10
2284   1177 AC            mul a, b ; *
2285   1178 11            mov a, b
2286   1179 27            mov b, a
2287   117A E4            pop a
2288   117B             ; END FACTORS
2289   117B             ; START TERMS
2290   117B D7            push a
2291   117C 11            mov a, b
2292   117D FA FC FF      lea d, [bp + -4] ; $hex_char
2293   1180 32            mov bl, [d]
2294   1181 A7 00         mov bh, 0
2295   1183             ; START TERMS
2296   1183 D7            push a
2297   1184 11            mov a, b
2298   1185 26 61 00      mov b, $61
2299   1188 60            sub a, b
2300   1189 26 0A 00      mov b, $a
2301   118C 54            add a, b
2302   118D 27            mov b, a
2303   118E E4            pop a
2304   118F             ; END TERMS
2305   118F 54            add a, b
2306   1190 27            mov b, a
2307   1191 E4            pop a
2308   1192             ; END TERMS
2309   1192 E7            pop d
2310   1193 FD 43         mov [d], b
2311   1195 0A 16 12      jmp _if38_exit
2312   1198             _if38_else:
2313   1198             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2314   1198             _if39_cond:
2315   1198 FA FC FF      lea d, [bp + -4] ; $hex_char
2316   119B 32            mov bl, [d]
2317   119C A7 00         mov bh, 0
2318   119E             ; START RELATIONAL
2319   119E D7            push a
2320   119F 11            mov a, b
2321   11A0 26 41 00      mov b, $41
2322   11A3 B0            cmp a, b
2323   11A4 FD 80         sge ; >=
2324   11A6 E4            pop a
2325   11A7             ; END RELATIONAL
2326   11A7 D7            push a
2327   11A8 11            mov a, b
2328   11A9 FA FC FF      lea d, [bp + -4] ; $hex_char
2329   11AC 32            mov bl, [d]
2330   11AD A7 00         mov bh, 0
2331   11AF             ; START RELATIONAL
2332   11AF D7            push a
2333   11B0 11            mov a, b
2334   11B1 26 46 00      mov b, $46
2335   11B4 B0            cmp a, b
2336   11B5 FD 74         sle ; <=
2337   11B7 E4            pop a
2338   11B8             ; END RELATIONAL
2339   11B8 FD A7         sand a, b ; &&
2340   11BA E4            pop a
2341   11BB C0 00 00      cmp b, 0
2342   11BE C6 EF 11      je _if39_else
2343   11C1             _if39_true:
2344   11C1             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2345   11C1 FA FF FF      lea d, [bp + -1] ; $value
2346   11C4 DA            push d
2347   11C5 FA FF FF      lea d, [bp + -1] ; $value
2348   11C8 2A            mov b, [d]
2349   11C9             ; START FACTORS
2350   11C9 D7            push a
2351   11CA 11            mov a, b
2352   11CB 26 10 00      mov b, $10
2353   11CE AC            mul a, b ; *
2354   11CF 11            mov a, b
2355   11D0 27            mov b, a
2356   11D1 E4            pop a
2357   11D2             ; END FACTORS
2358   11D2             ; START TERMS
2359   11D2 D7            push a
2360   11D3 11            mov a, b
2361   11D4 FA FC FF      lea d, [bp + -4] ; $hex_char
2362   11D7 32            mov bl, [d]
2363   11D8 A7 00         mov bh, 0
2364   11DA             ; START TERMS
2365   11DA D7            push a
2366   11DB 11            mov a, b
2367   11DC 26 41 00      mov b, $41
2368   11DF 60            sub a, b
2369   11E0 26 0A 00      mov b, $a
2370   11E3 54            add a, b
2371   11E4 27            mov b, a
2372   11E5 E4            pop a
2373   11E6             ; END TERMS
2374   11E6 54            add a, b
2375   11E7 27            mov b, a
2376   11E8 E4            pop a
2377   11E9             ; END TERMS
2378   11E9 E7            pop d
2379   11EA FD 43         mov [d], b
2380   11EC 0A 16 12      jmp _if39_exit
2381   11EF             _if39_else:
2382   11EF             ;; value = (value * 16) + (hex_char - '0'); 
2383   11EF FA FF FF      lea d, [bp + -1] ; $value
2384   11F2 DA            push d
2385   11F3 FA FF FF      lea d, [bp + -1] ; $value
2386   11F6 2A            mov b, [d]
2387   11F7             ; START FACTORS
2388   11F7 D7            push a
2389   11F8 11            mov a, b
2390   11F9 26 10 00      mov b, $10
2391   11FC AC            mul a, b ; *
2392   11FD 11            mov a, b
2393   11FE 27            mov b, a
2394   11FF E4            pop a
2395   1200             ; END FACTORS
2396   1200             ; START TERMS
2397   1200 D7            push a
2398   1201 11            mov a, b
2399   1202 FA FC FF      lea d, [bp + -4] ; $hex_char
2400   1205 32            mov bl, [d]
2401   1206 A7 00         mov bh, 0
2402   1208             ; START TERMS
2403   1208 D7            push a
2404   1209 11            mov a, b
2405   120A 26 30 00      mov b, $30
2406   120D 60            sub a, b
2407   120E 27            mov b, a
2408   120F E4            pop a
2409   1210             ; END TERMS
2410   1210 54            add a, b
2411   1211 27            mov b, a
2412   1212 E4            pop a
2413   1213             ; END TERMS
2414   1213 E7            pop d
2415   1214 FD 43         mov [d], b
2416   1216             _if39_exit:
2417   1216             _if38_exit:
2418   1216             _for37_update:
2419   1216 FA FD FF      lea d, [bp + -3] ; $i
2420   1219 2A            mov b, [d]
2421   121A FD 79         mov g, b
2422   121C FD 77         inc b
2423   121E FA FD FF      lea d, [bp + -3] ; $i
2424   1221 FD 43         mov [d], b
2425   1223 FD 27         mov b, g
2426   1225 0A 12 11      jmp _for37_cond
2427   1228             _for37_exit:
2428   1228             ;; return value; 
2429   1228 FA FF FF      lea d, [bp + -1] ; $value
2430   122B 2A            mov b, [d]
2431   122C F9            leave
2432   122D 09            ret
2433   122E             
2434   122E             atoi:
2435   122E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2436   1231             ; $result 
2437   1231 10 00 00      mov a, $0
2438   1234 45 FF FF      mov [bp + -1], a
2439   1237             ; $sign 
2440   1237 10 01 00      mov a, $1
2441   123A 45 FD FF      mov [bp + -3], a
2442   123D 52 04 00      sub sp, 4
2443   1240             ;; while (*str == ' ') str++; 
2444   1240             _while40_cond:
2445   1240 FA 05 00      lea d, [bp + 5] ; $str
2446   1243 2A            mov b, [d]
2447   1244 74            mov d, b
2448   1245 32            mov bl, [d]
2449   1246 A7 00         mov bh, 0
2450   1248             ; START RELATIONAL
2451   1248 D7            push a
2452   1249 11            mov a, b
2453   124A 26 20 00      mov b, $20
2454   124D B0            cmp a, b
2455   124E FD 71         seq ; ==
2456   1250 E4            pop a
2457   1251             ; END RELATIONAL
2458   1251 C0 00 00      cmp b, 0
2459   1254 C6 69 12      je _while40_exit
2460   1257             _while40_block:
2461   1257             ;; str++; 
2462   1257 FA 05 00      lea d, [bp + 5] ; $str
2463   125A 2A            mov b, [d]
2464   125B FD 79         mov g, b
2465   125D FD 77         inc b
2466   125F FA 05 00      lea d, [bp + 5] ; $str
2467   1262 FD 43         mov [d], b
2468   1264 FD 27         mov b, g
2469   1266 0A 40 12      jmp _while40_cond
2470   1269             _while40_exit:
2471   1269             ;; if (*str == '-' || *str == '+') { 
2472   1269             _if41_cond:
2473   1269 FA 05 00      lea d, [bp + 5] ; $str
2474   126C 2A            mov b, [d]
2475   126D 74            mov d, b
2476   126E 32            mov bl, [d]
2477   126F A7 00         mov bh, 0
2478   1271             ; START RELATIONAL
2479   1271 D7            push a
2480   1272 11            mov a, b
2481   1273 26 2D 00      mov b, $2d
2482   1276 B0            cmp a, b
2483   1277 FD 71         seq ; ==
2484   1279 E4            pop a
2485   127A             ; END RELATIONAL
2486   127A D7            push a
2487   127B 11            mov a, b
2488   127C FA 05 00      lea d, [bp + 5] ; $str
2489   127F 2A            mov b, [d]
2490   1280 74            mov d, b
2491   1281 32            mov bl, [d]
2492   1282 A7 00         mov bh, 0
2493   1284             ; START RELATIONAL
2494   1284 D7            push a
2495   1285 11            mov a, b
2496   1286 26 2B 00      mov b, $2b
2497   1289 B0            cmp a, b
2498   128A FD 71         seq ; ==
2499   128C E4            pop a
2500   128D             ; END RELATIONAL
2501   128D FD A8         sor a, b ; ||
2502   128F E4            pop a
2503   1290 C0 00 00      cmp b, 0
2504   1293 C6 CE 12      je _if41_exit
2505   1296             _if41_true:
2506   1296             ;; if (*str == '-') sign = -1; 
2507   1296             _if42_cond:
2508   1296 FA 05 00      lea d, [bp + 5] ; $str
2509   1299 2A            mov b, [d]
2510   129A 74            mov d, b
2511   129B 32            mov bl, [d]
2512   129C A7 00         mov bh, 0
2513   129E             ; START RELATIONAL
2514   129E D7            push a
2515   129F 11            mov a, b
2516   12A0 26 2D 00      mov b, $2d
2517   12A3 B0            cmp a, b
2518   12A4 FD 71         seq ; ==
2519   12A6 E4            pop a
2520   12A7             ; END RELATIONAL
2521   12A7 C0 00 00      cmp b, 0
2522   12AA C6 BC 12      je _if42_exit
2523   12AD             _if42_true:
2524   12AD             ;; sign = -1; 
2525   12AD FA FD FF      lea d, [bp + -3] ; $sign
2526   12B0 DA            push d
2527   12B1 26 01 00      mov b, $1
2528   12B4 FD 97         neg b
2529   12B6 E7            pop d
2530   12B7 FD 43         mov [d], b
2531   12B9 0A BC 12      jmp _if42_exit
2532   12BC             _if42_exit:
2533   12BC             ;; str++; 
2534   12BC FA 05 00      lea d, [bp + 5] ; $str
2535   12BF 2A            mov b, [d]
2536   12C0 FD 79         mov g, b
2537   12C2 FD 77         inc b
2538   12C4 FA 05 00      lea d, [bp + 5] ; $str
2539   12C7 FD 43         mov [d], b
2540   12C9 FD 27         mov b, g
2541   12CB 0A CE 12      jmp _if41_exit
2542   12CE             _if41_exit:
2543   12CE             ;; while (*str >= '0' && *str <= '9') { 
2544   12CE             _while43_cond:
2545   12CE FA 05 00      lea d, [bp + 5] ; $str
2546   12D1 2A            mov b, [d]
2547   12D2 74            mov d, b
2548   12D3 32            mov bl, [d]
2549   12D4 A7 00         mov bh, 0
2550   12D6             ; START RELATIONAL
2551   12D6 D7            push a
2552   12D7 11            mov a, b
2553   12D8 26 30 00      mov b, $30
2554   12DB B0            cmp a, b
2555   12DC FD 80         sge ; >=
2556   12DE E4            pop a
2557   12DF             ; END RELATIONAL
2558   12DF D7            push a
2559   12E0 11            mov a, b
2560   12E1 FA 05 00      lea d, [bp + 5] ; $str
2561   12E4 2A            mov b, [d]
2562   12E5 74            mov d, b
2563   12E6 32            mov bl, [d]
2564   12E7 A7 00         mov bh, 0
2565   12E9             ; START RELATIONAL
2566   12E9 D7            push a
2567   12EA 11            mov a, b
2568   12EB 26 39 00      mov b, $39
2569   12EE B0            cmp a, b
2570   12EF FD 74         sle ; <=
2571   12F1 E4            pop a
2572   12F2             ; END RELATIONAL
2573   12F2 FD A7         sand a, b ; &&
2574   12F4 E4            pop a
2575   12F5 C0 00 00      cmp b, 0
2576   12F8 C6 36 13      je _while43_exit
2577   12FB             _while43_block:
2578   12FB             ;; result = result * 10 + (*str - '0'); 
2579   12FB FA FF FF      lea d, [bp + -1] ; $result
2580   12FE DA            push d
2581   12FF FA FF FF      lea d, [bp + -1] ; $result
2582   1302 2A            mov b, [d]
2583   1303             ; START FACTORS
2584   1303 D7            push a
2585   1304 11            mov a, b
2586   1305 26 0A 00      mov b, $a
2587   1308 AC            mul a, b ; *
2588   1309 11            mov a, b
2589   130A 27            mov b, a
2590   130B E4            pop a
2591   130C             ; END FACTORS
2592   130C             ; START TERMS
2593   130C D7            push a
2594   130D 11            mov a, b
2595   130E FA 05 00      lea d, [bp + 5] ; $str
2596   1311 2A            mov b, [d]
2597   1312 74            mov d, b
2598   1313 32            mov bl, [d]
2599   1314 A7 00         mov bh, 0
2600   1316             ; START TERMS
2601   1316 D7            push a
2602   1317 11            mov a, b
2603   1318 26 30 00      mov b, $30
2604   131B 60            sub a, b
2605   131C 27            mov b, a
2606   131D E4            pop a
2607   131E             ; END TERMS
2608   131E 54            add a, b
2609   131F 27            mov b, a
2610   1320 E4            pop a
2611   1321             ; END TERMS
2612   1321 E7            pop d
2613   1322 FD 43         mov [d], b
2614   1324             ;; str++; 
2615   1324 FA 05 00      lea d, [bp + 5] ; $str
2616   1327 2A            mov b, [d]
2617   1328 FD 79         mov g, b
2618   132A FD 77         inc b
2619   132C FA 05 00      lea d, [bp + 5] ; $str
2620   132F FD 43         mov [d], b
2621   1331 FD 27         mov b, g
2622   1333 0A CE 12      jmp _while43_cond
2623   1336             _while43_exit:
2624   1336             ;; return sign * result; 
2625   1336 FA FD FF      lea d, [bp + -3] ; $sign
2626   1339 2A            mov b, [d]
2627   133A             ; START FACTORS
2628   133A D7            push a
2629   133B 11            mov a, b
2630   133C FA FF FF      lea d, [bp + -1] ; $result
2631   133F 2A            mov b, [d]
2632   1340 AC            mul a, b ; *
2633   1341 11            mov a, b
2634   1342 27            mov b, a
2635   1343 E4            pop a
2636   1344             ; END FACTORS
2637   1344 F9            leave
2638   1345 09            ret
2639   1346             
2640   1346             gets:
2641   1346 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2642   1349             
2643   1349             ; --- BEGIN INLINE ASM BLOCK
2644   1349 FA 05 00      lea d, [bp + 5] ; $s
2645   134C 15            mov a, [d]
2646   134D 3C            mov d, a
2647   134E 07 6F 17      call _gets
2648   1351             ; --- END INLINE ASM BLOCK
2649   1351             
2650   1351             ;; return strlen(s); 
2651   1351 FA 05 00      lea d, [bp + 5] ; $s
2652   1354 2A            mov b, [d]
2653   1355 FD AB         swp b
2654   1357 D8            push b
2655   1358 07 74 0E      call strlen
2656   135B 51 02 00      add sp, 2
2657   135E F9            leave
2658   135F 09            ret
2659   1360             
2660   1360             prints:
2661   1360 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2662   1363             ; $digits 
2663   1363             ; $i 
2664   1363 10 00 00      mov a, $0
2665   1366 45 FA FF      mov [bp + -6], a
2666   1369 52 07 00      sub sp, 7
2667   136C             ;; if (num < 0) { 
2668   136C             _if44_cond:
2669   136C FA 05 00      lea d, [bp + 5] ; $num
2670   136F 2A            mov b, [d]
2671   1370             ; START RELATIONAL
2672   1370 D7            push a
2673   1371 11            mov a, b
2674   1372 26 00 00      mov b, $0
2675   1375 B0            cmp a, b
2676   1376 FD 73         slt ; < 
2677   1378 E4            pop a
2678   1379             ; END RELATIONAL
2679   1379 C0 00 00      cmp b, 0
2680   137C C6 99 13      je _if44_else
2681   137F             _if44_true:
2682   137F             ;; putchar('-'); 
2683   137F 26 2D 00      mov b, $2d
2684   1382 DD            push bl
2685   1383 07 41 15      call putchar
2686   1386 51 01 00      add sp, 1
2687   1389             ;; num = -num; 
2688   1389 FA 05 00      lea d, [bp + 5] ; $num
2689   138C DA            push d
2690   138D FA 05 00      lea d, [bp + 5] ; $num
2691   1390 2A            mov b, [d]
2692   1391 FD 97         neg b
2693   1393 E7            pop d
2694   1394 FD 43         mov [d], b
2695   1396 0A BB 13      jmp _if44_exit
2696   1399             _if44_else:
2697   1399             ;; if (num == 0) { 
2698   1399             _if45_cond:
2699   1399 FA 05 00      lea d, [bp + 5] ; $num
2700   139C 2A            mov b, [d]
2701   139D             ; START RELATIONAL
2702   139D D7            push a
2703   139E 11            mov a, b
2704   139F 26 00 00      mov b, $0
2705   13A2 B0            cmp a, b
2706   13A3 FD 71         seq ; ==
2707   13A5 E4            pop a
2708   13A6             ; END RELATIONAL
2709   13A6 C0 00 00      cmp b, 0
2710   13A9 C6 BB 13      je _if45_exit
2711   13AC             _if45_true:
2712   13AC             ;; putchar('0'); 
2713   13AC 26 30 00      mov b, $30
2714   13AF DD            push bl
2715   13B0 07 41 15      call putchar
2716   13B3 51 01 00      add sp, 1
2717   13B6             ;; return; 
2718   13B6 F9            leave
2719   13B7 09            ret
2720   13B8 0A BB 13      jmp _if45_exit
2721   13BB             _if45_exit:
2722   13BB             _if44_exit:
2723   13BB             ;; while (num > 0) { 
2724   13BB             _while46_cond:
2725   13BB FA 05 00      lea d, [bp + 5] ; $num
2726   13BE 2A            mov b, [d]
2727   13BF             ; START RELATIONAL
2728   13BF D7            push a
2729   13C0 11            mov a, b
2730   13C1 26 00 00      mov b, $0
2731   13C4 B0            cmp a, b
2732   13C5 FD 7F         sgt ; >
2733   13C7 E4            pop a
2734   13C8             ; END RELATIONAL
2735   13C8 C0 00 00      cmp b, 0
2736   13CB C6 18 14      je _while46_exit
2737   13CE             _while46_block:
2738   13CE             ;; digits[i] = '0' + (num % 10); 
2739   13CE FA FC FF      lea d, [bp + -4] ; $digits
2740   13D1 D7            push a
2741   13D2 DA            push d
2742   13D3 FA FA FF      lea d, [bp + -6] ; $i
2743   13D6 2A            mov b, [d]
2744   13D7 E7            pop d
2745   13D8 5A            add d, b
2746   13D9 E4            pop a
2747   13DA DA            push d
2748   13DB 26 30 00      mov b, $30
2749   13DE             ; START TERMS
2750   13DE D7            push a
2751   13DF 11            mov a, b
2752   13E0 FA 05 00      lea d, [bp + 5] ; $num
2753   13E3 2A            mov b, [d]
2754   13E4             ; START FACTORS
2755   13E4 D7            push a
2756   13E5 11            mov a, b
2757   13E6 26 0A 00      mov b, $a
2758   13E9 AE            div a, b ; 
2759   13EA 11            mov a, b
2760   13EB 27            mov b, a
2761   13EC E4            pop a
2762   13ED             ; END FACTORS
2763   13ED 54            add a, b
2764   13EE 27            mov b, a
2765   13EF E4            pop a
2766   13F0             ; END TERMS
2767   13F0 E7            pop d
2768   13F1 FD 3E         mov [d], bl
2769   13F3             ;; num = num / 10; 
2770   13F3 FA 05 00      lea d, [bp + 5] ; $num
2771   13F6 DA            push d
2772   13F7 FA 05 00      lea d, [bp + 5] ; $num
2773   13FA 2A            mov b, [d]
2774   13FB             ; START FACTORS
2775   13FB D7            push a
2776   13FC 11            mov a, b
2777   13FD 26 0A 00      mov b, $a
2778   1400 AE            div a, b
2779   1401 27            mov b, a
2780   1402 E4            pop a
2781   1403             ; END FACTORS
2782   1403 E7            pop d
2783   1404 FD 43         mov [d], b
2784   1406             ;; i++; 
2785   1406 FA FA FF      lea d, [bp + -6] ; $i
2786   1409 2A            mov b, [d]
2787   140A FD 79         mov g, b
2788   140C FD 77         inc b
2789   140E FA FA FF      lea d, [bp + -6] ; $i
2790   1411 FD 43         mov [d], b
2791   1413 FD 27         mov b, g
2792   1415 0A BB 13      jmp _while46_cond
2793   1418             _while46_exit:
2794   1418             ;; while (i > 0) { 
2795   1418             _while47_cond:
2796   1418 FA FA FF      lea d, [bp + -6] ; $i
2797   141B 2A            mov b, [d]
2798   141C             ; START RELATIONAL
2799   141C D7            push a
2800   141D 11            mov a, b
2801   141E 26 00 00      mov b, $0
2802   1421 B0            cmp a, b
2803   1422 FD 7F         sgt ; >
2804   1424 E4            pop a
2805   1425             ; END RELATIONAL
2806   1425 C0 00 00      cmp b, 0
2807   1428 C6 53 14      je _while47_exit
2808   142B             _while47_block:
2809   142B             ;; i--; 
2810   142B FA FA FF      lea d, [bp + -6] ; $i
2811   142E 2A            mov b, [d]
2812   142F FD 79         mov g, b
2813   1431 FD 7D         dec b
2814   1433 FA FA FF      lea d, [bp + -6] ; $i
2815   1436 FD 43         mov [d], b
2816   1438 FD 27         mov b, g
2817   143A             ;; putchar(digits[i]); 
2818   143A FA FC FF      lea d, [bp + -4] ; $digits
2819   143D D7            push a
2820   143E DA            push d
2821   143F FA FA FF      lea d, [bp + -6] ; $i
2822   1442 2A            mov b, [d]
2823   1443 E7            pop d
2824   1444 5A            add d, b
2825   1445 E4            pop a
2826   1446 32            mov bl, [d]
2827   1447 A7 00         mov bh, 0
2828   1449 DD            push bl
2829   144A 07 41 15      call putchar
2830   144D 51 01 00      add sp, 1
2831   1450 0A 18 14      jmp _while47_cond
2832   1453             _while47_exit:
2833   1453 F9            leave
2834   1454 09            ret
2835   1455             
2836   1455             printu:
2837   1455 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2838   1458             ; $digits 
2839   1458             ; $i 
2840   1458 52 07 00      sub sp, 7
2841   145B             ;; i = 0; 
2842   145B FA FA FF      lea d, [bp + -6] ; $i
2843   145E DA            push d
2844   145F 26 00 00      mov b, $0
2845   1462 E7            pop d
2846   1463 FD 43         mov [d], b
2847   1465             ;; if(num == 0){ 
2848   1465             _if48_cond:
2849   1465 FA 05 00      lea d, [bp + 5] ; $num
2850   1468 2A            mov b, [d]
2851   1469             ; START RELATIONAL
2852   1469 D7            push a
2853   146A 11            mov a, b
2854   146B 26 00 00      mov b, $0
2855   146E B0            cmp a, b
2856   146F FD 71         seq ; ==
2857   1471 E4            pop a
2858   1472             ; END RELATIONAL
2859   1472 C0 00 00      cmp b, 0
2860   1475 C6 87 14      je _if48_exit
2861   1478             _if48_true:
2862   1478             ;; putchar('0'); 
2863   1478 26 30 00      mov b, $30
2864   147B DD            push bl
2865   147C 07 41 15      call putchar
2866   147F 51 01 00      add sp, 1
2867   1482             ;; return; 
2868   1482 F9            leave
2869   1483 09            ret
2870   1484 0A 87 14      jmp _if48_exit
2871   1487             _if48_exit:
2872   1487             ;; while (num > 0) { 
2873   1487             _while49_cond:
2874   1487 FA 05 00      lea d, [bp + 5] ; $num
2875   148A 2A            mov b, [d]
2876   148B             ; START RELATIONAL
2877   148B D7            push a
2878   148C 11            mov a, b
2879   148D 26 00 00      mov b, $0
2880   1490 B0            cmp a, b
2881   1491 FD 81         sgu ; > (unsigned)
2882   1493 E4            pop a
2883   1494             ; END RELATIONAL
2884   1494 C0 00 00      cmp b, 0
2885   1497 C6 E4 14      je _while49_exit
2886   149A             _while49_block:
2887   149A             ;; digits[i] = '0' + (num % 10); 
2888   149A FA FC FF      lea d, [bp + -4] ; $digits
2889   149D D7            push a
2890   149E DA            push d
2891   149F FA FA FF      lea d, [bp + -6] ; $i
2892   14A2 2A            mov b, [d]
2893   14A3 E7            pop d
2894   14A4 5A            add d, b
2895   14A5 E4            pop a
2896   14A6 DA            push d
2897   14A7 26 30 00      mov b, $30
2898   14AA             ; START TERMS
2899   14AA D7            push a
2900   14AB 11            mov a, b
2901   14AC FA 05 00      lea d, [bp + 5] ; $num
2902   14AF 2A            mov b, [d]
2903   14B0             ; START FACTORS
2904   14B0 D7            push a
2905   14B1 11            mov a, b
2906   14B2 26 0A 00      mov b, $a
2907   14B5 AE            div a, b ; 
2908   14B6 11            mov a, b
2909   14B7 27            mov b, a
2910   14B8 E4            pop a
2911   14B9             ; END FACTORS
2912   14B9 54            add a, b
2913   14BA 27            mov b, a
2914   14BB E4            pop a
2915   14BC             ; END TERMS
2916   14BC E7            pop d
2917   14BD FD 3E         mov [d], bl
2918   14BF             ;; num = num / 10; 
2919   14BF FA 05 00      lea d, [bp + 5] ; $num
2920   14C2 DA            push d
2921   14C3 FA 05 00      lea d, [bp + 5] ; $num
2922   14C6 2A            mov b, [d]
2923   14C7             ; START FACTORS
2924   14C7 D7            push a
2925   14C8 11            mov a, b
2926   14C9 26 0A 00      mov b, $a
2927   14CC AE            div a, b
2928   14CD 27            mov b, a
2929   14CE E4            pop a
2930   14CF             ; END FACTORS
2931   14CF E7            pop d
2932   14D0 FD 43         mov [d], b
2933   14D2             ;; i++; 
2934   14D2 FA FA FF      lea d, [bp + -6] ; $i
2935   14D5 2A            mov b, [d]
2936   14D6 FD 79         mov g, b
2937   14D8 FD 77         inc b
2938   14DA FA FA FF      lea d, [bp + -6] ; $i
2939   14DD FD 43         mov [d], b
2940   14DF FD 27         mov b, g
2941   14E1 0A 87 14      jmp _while49_cond
2942   14E4             _while49_exit:
2943   14E4             ;; while (i > 0) { 
2944   14E4             _while50_cond:
2945   14E4 FA FA FF      lea d, [bp + -6] ; $i
2946   14E7 2A            mov b, [d]
2947   14E8             ; START RELATIONAL
2948   14E8 D7            push a
2949   14E9 11            mov a, b
2950   14EA 26 00 00      mov b, $0
2951   14ED B0            cmp a, b
2952   14EE FD 7F         sgt ; >
2953   14F0 E4            pop a
2954   14F1             ; END RELATIONAL
2955   14F1 C0 00 00      cmp b, 0
2956   14F4 C6 1F 15      je _while50_exit
2957   14F7             _while50_block:
2958   14F7             ;; i--; 
2959   14F7 FA FA FF      lea d, [bp + -6] ; $i
2960   14FA 2A            mov b, [d]
2961   14FB FD 79         mov g, b
2962   14FD FD 7D         dec b
2963   14FF FA FA FF      lea d, [bp + -6] ; $i
2964   1502 FD 43         mov [d], b
2965   1504 FD 27         mov b, g
2966   1506             ;; putchar(digits[i]); 
2967   1506 FA FC FF      lea d, [bp + -4] ; $digits
2968   1509 D7            push a
2969   150A DA            push d
2970   150B FA FA FF      lea d, [bp + -6] ; $i
2971   150E 2A            mov b, [d]
2972   150F E7            pop d
2973   1510 5A            add d, b
2974   1511 E4            pop a
2975   1512 32            mov bl, [d]
2976   1513 A7 00         mov bh, 0
2977   1515 DD            push bl
2978   1516 07 41 15      call putchar
2979   1519 51 01 00      add sp, 1
2980   151C 0A E4 14      jmp _while50_cond
2981   151F             _while50_exit:
2982   151F F9            leave
2983   1520 09            ret
2984   1521             
2985   1521             rand:
2986   1521 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2987   1524             ; $sec 
2988   1524 52 01 00      sub sp, 1
2989   1527             
2990   1527             ; --- BEGIN INLINE ASM BLOCK
2991   1527 19 00         mov al, 0
2992   1529 05 01         syscall sys_rtc					
2993   152B 1A            mov al, ah
2994   152C FA 00 00      lea d, [bp + 0] ; $sec
2995   152F 1E            mov al, [d]
2996   1530             ; --- END INLINE ASM BLOCK
2997   1530             
2998   1530             ;; return sec; 
2999   1530 FA 00 00      lea d, [bp + 0] ; $sec
3000   1533 32            mov bl, [d]
3001   1534 A7 00         mov bh, 0
3002   1536 F9            leave
3003   1537 09            ret
3004   1538             
3005   1538             date:
3006   1538 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3007   153B             
3008   153B             ; --- BEGIN INLINE ASM BLOCK
3009   153B 19 00         mov al, 0 
3010   153D 05 07         syscall sys_datetime
3011   153F             ; --- END INLINE ASM BLOCK
3012   153F             
3013   153F F9            leave
3014   1540 09            ret
3015   1541             
3016   1541             putchar:
3017   1541 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3018   1544             
3019   1544             ; --- BEGIN INLINE ASM BLOCK
3020   1544 FA 05 00      lea d, [bp + 5] ; $c
3021   1547 1E            mov al, [d]
3022   1548 23            mov ah, al
3023   1549 07 68 17      call _putchar
3024   154C             ; --- END INLINE ASM BLOCK
3025   154C             
3026   154C F9            leave
3027   154D 09            ret
3028   154E             
3029   154E             getchar:
3030   154E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3031   1551             ; $c 
3032   1551 52 01 00      sub sp, 1
3033   1554             
3034   1554             ; --- BEGIN INLINE ASM BLOCK
3035   1554 07 61 17      call getch
3036   1557 1A            mov al, ah
3037   1558 FA 00 00      lea d, [bp + 0] ; $c
3038   155B 3E            mov [d], al
3039   155C             ; --- END INLINE ASM BLOCK
3040   155C             
3041   155C             ;; return c; 
3042   155C FA 00 00      lea d, [bp + 0] ; $c
3043   155F 32            mov bl, [d]
3044   1560 A7 00         mov bh, 0
3045   1562 F9            leave
3046   1563 09            ret
3047   1564             
3048   1564             scann:
3049   1564 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3050   1567             ; $m 
3051   1567 52 02 00      sub sp, 2
3052   156A             
3053   156A             ; --- BEGIN INLINE ASM BLOCK
3054   156A 07 AC 19      call scan_u16d
3055   156D FA FF FF      lea d, [bp + -1] ; $m
3056   1570 43            mov [d], a
3057   1571             ; --- END INLINE ASM BLOCK
3058   1571             
3059   1571             ;; return m; 
3060   1571 FA FF FF      lea d, [bp + -1] ; $m
3061   1574 2A            mov b, [d]
3062   1575 F9            leave
3063   1576 09            ret
3064   1577             
3065   1577             puts:
3066   1577 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3067   157A             
3068   157A             ; --- BEGIN INLINE ASM BLOCK
3069   157A FA 05 00      lea d, [bp + 5] ; $s
3070   157D 15            mov a, [d]
3071   157E 3C            mov d, a
3072   157F 07 B2 18      call _puts
3073   1582 10 00 0A      mov a, $0A00
3074   1585 05 03         syscall sys_io
3075   1587             ; --- END INLINE ASM BLOCK
3076   1587             
3077   1587 F9            leave
3078   1588 09            ret
3079   1589             
3080   1589             print:
3081   1589 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3082   158C             
3083   158C             ; --- BEGIN INLINE ASM BLOCK
3084   158C FA 05 00      lea d, [bp + 5] ; $s
3085   158F FD 2A         mov d, [d]
3086   1591 07 B2 18      call _puts
3087   1594             ; --- END INLINE ASM BLOCK
3088   1594             
3089   1594 F9            leave
3090   1595 09            ret
3091   1596             
3092   1596             loadfile:
3093   1596 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3094   1599             
3095   1599             ; --- BEGIN INLINE ASM BLOCK
3096   1599 FA 05 00      lea d, [bp + 5] ; $destination
3097   159C 15            mov a, [d]
3098   159D 4F            mov di, a
3099   159E FA 07 00      lea d, [bp + 7] ; $filename
3100   15A1 FD 2A         mov d, [d]
3101   15A3 19 14         mov al, 20
3102   15A5 05 04         syscall sys_filesystem
3103   15A7             ; --- END INLINE ASM BLOCK
3104   15A7             
3105   15A7 F9            leave
3106   15A8 09            ret
3107   15A9             
3108   15A9             create_file:
3109   15A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3110   15AC F9            leave
3111   15AD 09            ret
3112   15AE             
3113   15AE             delete_file:
3114   15AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3115   15B1             
3116   15B1             ; --- BEGIN INLINE ASM BLOCK
3117   15B1 FA 05 00      lea d, [bp + 5] ; $filename
3118   15B4 19 0A         mov al, 10
3119   15B6 05 04         syscall sys_filesystem
3120   15B8             ; --- END INLINE ASM BLOCK
3121   15B8             
3122   15B8 F9            leave
3123   15B9 09            ret
3124   15BA             
3125   15BA             fopen:
3126   15BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3127   15BD F9            leave
3128   15BE 09            ret
3129   15BF             
3130   15BF             fclose:
3131   15BF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3132   15C2 F9            leave
3133   15C3 09            ret
3134   15C4             
3135   15C4             alloc:
3136   15C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3137   15C7             ;; heap_top = heap_top + bytes; 
3138   15C7 3B 7A 3C      mov d, _heap_top ; $heap_top
3139   15CA DA            push d
3140   15CB 3B 7A 3C      mov d, _heap_top ; $heap_top
3141   15CE 2A            mov b, [d]
3142   15CF             ; START TERMS
3143   15CF D7            push a
3144   15D0 11            mov a, b
3145   15D1 FA 05 00      lea d, [bp + 5] ; $bytes
3146   15D4 2A            mov b, [d]
3147   15D5 54            add a, b
3148   15D6 27            mov b, a
3149   15D7 E4            pop a
3150   15D8             ; END TERMS
3151   15D8 E7            pop d
3152   15D9 FD 43         mov [d], b
3153   15DB             ;; return heap_top - bytes; 
3154   15DB 3B 7A 3C      mov d, _heap_top ; $heap_top
3155   15DE 2A            mov b, [d]
3156   15DF             ; START TERMS
3157   15DF D7            push a
3158   15E0 11            mov a, b
3159   15E1 FA 05 00      lea d, [bp + 5] ; $bytes
3160   15E4 2A            mov b, [d]
3161   15E5 60            sub a, b
3162   15E6 27            mov b, a
3163   15E7 E4            pop a
3164   15E8             ; END TERMS
3165   15E8 F9            leave
3166   15E9 09            ret
3167   15EA             
3168   15EA             free:
3169   15EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3170   15ED             ;; return heap_top = heap_top - bytes; 
3171   15ED 3B 7A 3C      mov d, _heap_top ; $heap_top
3172   15F0 DA            push d
3173   15F1 3B 7A 3C      mov d, _heap_top ; $heap_top
3174   15F4 2A            mov b, [d]
3175   15F5             ; START TERMS
3176   15F5 D7            push a
3177   15F6 11            mov a, b
3178   15F7 FA 05 00      lea d, [bp + 5] ; $bytes
3179   15FA 2A            mov b, [d]
3180   15FB 60            sub a, b
3181   15FC 27            mov b, a
3182   15FD E4            pop a
3183   15FE             ; END TERMS
3184   15FE E7            pop d
3185   15FF FD 43         mov [d], b
3186   1601 F9            leave
3187   1602 09            ret
3188   1603             
3189   1603             exit:
3190   1603 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3191   1606             
3192   1606             ; --- BEGIN INLINE ASM BLOCK
3193   1606 05 0B         syscall sys_terminate_proc
3194   1608             ; --- END INLINE ASM BLOCK
3195   1608             
3196   1608 F9            leave
3197   1609 09            ret
3198   160A             
3199   160A             load_hex:
3200   160A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3201   160D             ; $temp 
3202   160D 52 02 00      sub sp, 2
3203   1610             ;; temp = alloc(32768); 
3204   1610 FA FF FF      lea d, [bp + -1] ; $temp
3205   1613 DA            push d
3206   1614 26 00 80      mov b, $8000
3207   1617 FD AB         swp b
3208   1619 D8            push b
3209   161A 07 C4 15      call alloc
3210   161D 51 02 00      add sp, 2
3211   1620 E7            pop d
3212   1621 FD 43         mov [d], b
3213   1623             
3214   1623             ; --- BEGIN INLINE ASM BLOCK
3215   1623               
3216   1623               
3217   1623               
3218   1623               
3219   1623               
3220   1623             _load_hex:
3221   1623 D7            push a
3222   1624 D8            push b
3223   1625 DA            push d
3224   1626 E2            push si
3225   1627 E3            push di
3226   1628 52 00 80      sub sp, $8000      
3227   162B 38 00 00      mov c, 0
3228   162E 48            mov a, sp
3229   162F 77            inc a
3230   1630 3C            mov d, a          
3231   1631 07 6F 17      call _gets        
3232   1634 4D            mov si, a
3233   1635             __load_hex_loop:
3234   1635 F6            lodsb             
3235   1636 B9 00         cmp al, 0         
3236   1638 C6 46 16      jz __load_hex_ret
3237   163B 36            mov bh, al
3238   163C F6            lodsb
3239   163D 2F            mov bl, al
3240   163E 07 25 17      call _atoi        
3241   1641 F7            stosb             
3242   1642 78            inc c
3243   1643 0A 35 16      jmp __load_hex_loop
3244   1646             __load_hex_ret:
3245   1646 51 00 80      add sp, $8000
3246   1649 F0            pop di
3247   164A EF            pop si
3248   164B E7            pop d
3249   164C E5            pop b
3250   164D E4            pop a
3251   164E             ; --- END INLINE ASM BLOCK
3252   164E             
3253   164E F9            leave
3254   164F 09            ret
3255   1650             
3256   1650             getparam:
3257   1650 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3258   1653             ; $data 
3259   1653 52 01 00      sub sp, 1
3260   1656             
3261   1656             ; --- BEGIN INLINE ASM BLOCK
3262   1656 19 04         mov al, 4
3263   1658 FA 05 00      lea d, [bp + 5] ; $address
3264   165B FD 2A         mov d, [d]
3265   165D 05 0C         syscall sys_system
3266   165F FA 00 00      lea d, [bp + 0] ; $data
3267   1662 FD 3E         mov [d], bl
3268   1664             ; --- END INLINE ASM BLOCK
3269   1664             
3270   1664             ;; return data; 
3271   1664 FA 00 00      lea d, [bp + 0] ; $data
3272   1667 32            mov bl, [d]
3273   1668 A7 00         mov bh, 0
3274   166A F9            leave
3275   166B 09            ret
3276   166C             
3277   166C             clear:
3278   166C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3279   166F             ;; print("\033[2J\033[H"); 
3280   166F 26 39 3C      mov b, __s13 ; "\033[2J\033[H"
3281   1672 FD AB         swp b
3282   1674 D8            push b
3283   1675 07 89 15      call print
3284   1678 51 02 00      add sp, 2
3285   167B F9            leave
3286   167C 09            ret
3287   167D             
3288   167D             include_stdio_asm:
3289   167D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3290   1680             
3291   1680             ; --- BEGIN INLINE ASM BLOCK
3292   1680             .include "lib/stdio.asm"
0001+  1680             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1680             ; stdio.s
0003+  1680             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1680             .include "lib/string.asm"
0001++ 1680             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1680             ; string.s
0003++ 1680             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1680             
0005++ 1680             
0006++ 1680             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1680             ; _strrev
0008++ 1680             ; reverse a string
0009++ 1680             ; D = string address
0010++ 1680             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1680             ; 01234
0012++ 1680             _strrev:
0013++ 1680 4B          	pusha
0014++ 1681 07 C7 16    	call _strlen	; length in C
0015++ 1684 12          	mov a, c
0016++ 1685 AF 01 00    	cmp a, 1
0017++ 1688 D0 A2 16    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 168B 7D          	dec a
0019++ 168C FD 4E       	mov si, d	; beginning of string
0020++ 168E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1690 59          	add d, a	; end of string
0022++ 1691 12          	mov a, c
0023++ 1692 FD 9B       	shr a		; divide by 2
0024++ 1694 39          	mov c, a	; C now counts the steps
0025++ 1695             _strrev_L0:
0026++ 1695 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1696 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1697 3E          	mov [d], al	; store left char into right side
0029++ 1698 1B          	mov al, bl
0030++ 1699 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 169A 7E          	dec c
0032++ 169B 7F          	dec d
0033++ 169C C2 00 00    	cmp c, 0
0034++ 169F C7 95 16    	jne _strrev_L0
0035++ 16A2             _strrev_end:
0036++ 16A2 4C          	popa
0037++ 16A3 09          	ret
0038++ 16A4             	
0039++ 16A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 16A4             ; _strchr
0041++ 16A4             ; search string in D for char in AL
0042++ 16A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 16A4             _strchr:
0044++ 16A4             _strchr_L0:
0045++ 16A4 32          	mov bl, [d]
0046++ 16A5 C1 00       	cmp bl, 0
0047++ 16A7 C6 B2 16    	je _strchr_end
0048++ 16AA BA          	cmp al, bl
0049++ 16AB C6 B2 16    	je _strchr_end
0050++ 16AE 79          	inc d
0051++ 16AF 0A A4 16    	jmp _strchr_L0
0052++ 16B2             _strchr_end:
0053++ 16B2 1B          	mov al, bl
0054++ 16B3 09          	ret
0055++ 16B4             
0056++ 16B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 16B4             ; _strstr
0058++ 16B4             ; find sub-string
0059++ 16B4             ; str1 in SI
0060++ 16B4             ; str2 in DI
0061++ 16B4             ; SI points to end of source string
0062++ 16B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 16B4             _strstr:
0064++ 16B4 DB          	push al
0065++ 16B5 DA          	push d
0066++ 16B6 E3          	push di
0067++ 16B7             _strstr_loop:
0068++ 16B7 F3          	cmpsb					; compare a byte of the strings
0069++ 16B8 C7 C3 16    	jne _strstr_ret
0070++ 16BB FC 00 00    	lea d, [di + 0]
0071++ 16BE BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 16C0 C7 B7 16    	jne _strstr_loop				; equal chars but not at end
0073++ 16C3             _strstr_ret:
0074++ 16C3 F0          	pop di
0075++ 16C4 E7          	pop d
0076++ 16C5 E8          	pop al
0077++ 16C6 09          	ret
0078++ 16C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 16C7             ; length of null terminated string
0080++ 16C7             ; result in C
0081++ 16C7             ; pointer in D
0082++ 16C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 16C7             _strlen:
0084++ 16C7 DA          	push d
0085++ 16C8 38 00 00    	mov c, 0
0086++ 16CB             _strlen_L1:
0087++ 16CB BD 00       	cmp byte [d], 0
0088++ 16CD C6 D5 16    	je _strlen_ret
0089++ 16D0 79          	inc d
0090++ 16D1 78          	inc c
0091++ 16D2 0A CB 16    	jmp _strlen_L1
0092++ 16D5             _strlen_ret:
0093++ 16D5 E7          	pop d
0094++ 16D6 09          	ret
0095++ 16D7             
0096++ 16D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 16D7             ; STRCMP
0098++ 16D7             ; compare two strings
0099++ 16D7             ; str1 in SI
0100++ 16D7             ; str2 in DI
0101++ 16D7             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 16D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 16D7             _strcmp:
0104++ 16D7 DB          	push al
0105++ 16D8 DA          	push d
0106++ 16D9 E3          	push di
0107++ 16DA E2          	push si
0108++ 16DB             _strcmp_loop:
0109++ 16DB F3          	cmpsb					; compare a byte of the strings
0110++ 16DC C7 E7 16    	jne _strcmp_ret
0111++ 16DF FB FF FF    	lea d, [si +- 1]
0112++ 16E2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 16E4 C7 DB 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 16E7             _strcmp_ret:
0115++ 16E7 EF          	pop si
0116++ 16E8 F0          	pop di
0117++ 16E9 E7          	pop d
0118++ 16EA E8          	pop al
0119++ 16EB 09          	ret
0120++ 16EC             
0121++ 16EC             
0122++ 16EC             ; STRCPY
0123++ 16EC             ; copy null terminated string from SI to DI
0124++ 16EC             ; source in SI
0125++ 16EC             ; destination in DI
0126++ 16EC             _strcpy:
0127++ 16EC E2          	push si
0128++ 16ED E3          	push di
0129++ 16EE DB          	push al
0130++ 16EF             _strcpy_L1:
0131++ 16EF F6          	lodsb
0132++ 16F0 F7          	stosb
0133++ 16F1 B9 00       	cmp al, 0
0134++ 16F3 C7 EF 16    	jne _strcpy_L1
0135++ 16F6             _strcpy_end:
0136++ 16F6 E8          	pop al
0137++ 16F7 F0          	pop di
0138++ 16F8 EF          	pop si
0139++ 16F9 09          	ret
0140++ 16FA             
0141++ 16FA             ; STRCAT
0142++ 16FA             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 16FA             ; source in SI
0144++ 16FA             ; destination in DI
0145++ 16FA             _strcat:
0146++ 16FA E2          	push si
0147++ 16FB E3          	push di
0148++ 16FC D7          	push a
0149++ 16FD DA          	push d
0150++ 16FE 50          	mov a, di
0151++ 16FF 3C          	mov d, a
0152++ 1700             _strcat_goto_end_L1:
0153++ 1700 BD 00       	cmp byte[d], 0
0154++ 1702 C6 09 17    	je _strcat_start
0155++ 1705 79          	inc d
0156++ 1706 0A 00 17    	jmp _strcat_goto_end_L1
0157++ 1709             _strcat_start:
0158++ 1709 FD 50       	mov di, d
0159++ 170B             _strcat_L1:
0160++ 170B F6          	lodsb
0161++ 170C F7          	stosb
0162++ 170D B9 00       	cmp al, 0
0163++ 170F C7 0B 17    	jne _strcat_L1
0164++ 1712             _strcat_end:
0165++ 1712 E7          	pop d
0166++ 1713 E4          	pop a
0167++ 1714 F0          	pop di
0168++ 1715 EF          	pop si
0169++ 1716 09          	ret
0170++ 1717             
0171++ 1717             
0005+  1717             
0006+  1717             
0007+  1717             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1717             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1717             ; ASCII in BL
0010+  1717             ; result in AL
0011+  1717             ; ascii for F = 0100 0110
0012+  1717             ; ascii for 9 = 0011 1001
0013+  1717             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1717             hex_ascii_encode:
0015+  1717 1B            mov al, bl
0016+  1718 93 40         test al, $40        ; test if letter or number
0017+  171A C7 20 17      jnz hex_letter
0018+  171D 87 0F         and al, $0F        ; get number
0019+  171F 09            ret
0020+  1720             hex_letter:
0021+  1720 87 0F         and al, $0F        ; get letter
0022+  1722 6A 09         add al, 9
0023+  1724 09            ret
0024+  1725             
0025+  1725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1725             ; ATOI
0027+  1725             ; 2 letter hex string in B
0028+  1725             ; 8bit integer returned in AL
0029+  1725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1725             _atoi:
0031+  1725 D8            push b
0032+  1726 07 17 17      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  1729 30            mov bl, bh
0034+  172A DB            push al          ; save a
0035+  172B 07 17 17      call hex_ascii_encode
0036+  172E EA            pop bl  
0037+  172F FD 9E 04      shl al, 4
0038+  1732 8C            or al, bl
0039+  1733 E5            pop b
0040+  1734 09            ret  
0041+  1735             
0042+  1735             
0043+  1735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1735             ; scanf
0045+  1735             ; no need for explanations!
0046+  1735             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1735             scanf:
0048+  1735 09            ret
0049+  1736             
0050+  1736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1736             ; ITOA
0052+  1736             ; 8bit value in BL
0053+  1736             ; 2 byte ASCII result in A
0054+  1736             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1736             _itoa:
0056+  1736 DA            push d
0057+  1737 D8            push b
0058+  1738 A7 00         mov bh, 0
0059+  173A FD A4 04      shr bl, 4  
0060+  173D 74            mov d, b
0061+  173E 1F E6 19      mov al, [d + s_hex_digits]
0062+  1741 23            mov ah, al
0063+  1742               
0064+  1742 E5            pop b
0065+  1743 D8            push b
0066+  1744 A7 00         mov bh, 0
0067+  1746 FD 87 0F      and bl, $0F
0068+  1749 74            mov d, b
0069+  174A 1F E6 19      mov al, [d + s_hex_digits]
0070+  174D E5            pop b
0071+  174E E7            pop d
0072+  174F 09            ret
0073+  1750             
0074+  1750             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  1750             ; HEX STRING TO BINARY
0076+  1750             ; di = destination address
0077+  1750             ; si = source
0078+  1750             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  1750             _hex_to_int:
0080+  1750             _hex_to_int_L1:
0081+  1750 F6            lodsb          ; load from [SI] to AL
0082+  1751 B9 00         cmp al, 0        ; check if ASCII 0
0083+  1753 C6 60 17      jz _hex_to_int_ret
0084+  1756 36            mov bh, al
0085+  1757 F6            lodsb
0086+  1758 2F            mov bl, al
0087+  1759 07 25 17      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  175C F7            stosb          ; store AL to [DI]
0089+  175D 0A 50 17      jmp _hex_to_int_L1
0090+  1760             _hex_to_int_ret:
0091+  1760 09            ret    
0092+  1761             
0093+  1761             
0094+  1761             
0095+  1761             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  1761             ; GETCHAR
0097+  1761             ; char in ah
0098+  1761             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  1761             getch:
0100+  1761 DB            push al
0101+  1762             getch_retry:
0102+  1762 19 01         mov al, 1
0103+  1764 05 03         syscall sys_io      ; receive in AH
0104+  1766 E8            pop al
0105+  1767 09            ret
0106+  1768             
0107+  1768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  1768             ; PUTCHAR
0109+  1768             ; char in ah
0110+  1768             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1768             _putchar:
0112+  1768 D7            push a
0113+  1769 19 00         mov al, 0
0114+  176B 05 03         syscall sys_io      ; char in AH
0115+  176D E4            pop a
0116+  176E 09            ret
0117+  176F             
0118+  176F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  176F             ;; INPUT A STRING
0120+  176F             ;; terminates with null
0121+  176F             ;; pointer in D
0122+  176F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  176F             _gets:
0124+  176F D7            push a
0125+  1770 DA            push d
0126+  1771             _gets_loop:
0127+  1771 19 01         mov al, 1
0128+  1773 05 03         syscall sys_io      ; receive in AH
0129+  1775 B9 00         cmp al, 0        ; check error code (AL)
0130+  1777 C6 71 17      je _gets_loop      ; if no char received, retry
0131+  177A             
0132+  177A 76 1B         cmp ah, 27
0133+  177C C6 9D 17      je _gets_ansi_esc
0134+  177F 76 0A         cmp ah, $0A        ; LF
0135+  1781 C6 08 18      je _gets_end
0136+  1784 76 0D         cmp ah, $0D        ; CR
0137+  1786 C6 08 18      je _gets_end
0138+  1789 76 5C         cmp ah, $5C        ; '\\'
0139+  178B C6 C9 17      je _gets_escape
0140+  178E               
0141+  178E 76 08         cmp ah, $08      ; check for backspace
0142+  1790 C6 99 17      je _gets_backspace
0143+  1793             
0144+  1793 1A            mov al, ah
0145+  1794 3E            mov [d], al
0146+  1795 79            inc d
0147+  1796 0A 71 17      jmp _gets_loop
0148+  1799             _gets_backspace:
0149+  1799 7F            dec d
0150+  179A 0A 71 17      jmp _gets_loop
0151+  179D             _gets_ansi_esc:
0152+  179D 19 01         mov al, 1
0153+  179F 05 03         syscall sys_io        ; receive in AH without echo
0154+  17A1 B9 00         cmp al, 0          ; check error code (AL)
0155+  17A3 C6 9D 17      je _gets_ansi_esc    ; if no char received, retry
0156+  17A6 76 5B         cmp ah, '['
0157+  17A8 C7 71 17      jne _gets_loop
0158+  17AB             _gets_ansi_esc_2:
0159+  17AB 19 01         mov al, 1
0160+  17AD 05 03         syscall sys_io          ; receive in AH without echo
0161+  17AF B9 00         cmp al, 0            ; check error code (AL)
0162+  17B1 C6 AB 17      je _gets_ansi_esc_2  ; if no char received, retry
0163+  17B4 76 44         cmp ah, 'D'
0164+  17B6 C6 C1 17      je _gets_left_arrow
0165+  17B9 76 43         cmp ah, 'C'
0166+  17BB C6 C5 17      je _gets_right_arrow
0167+  17BE 0A 71 17      jmp _gets_loop
0168+  17C1             _gets_left_arrow:
0169+  17C1 7F            dec d
0170+  17C2 0A 71 17      jmp _gets_loop
0171+  17C5             _gets_right_arrow:
0172+  17C5 79            inc d
0173+  17C6 0A 71 17      jmp _gets_loop
0174+  17C9             _gets_escape:
0175+  17C9 19 01         mov al, 1
0176+  17CB 05 03         syscall sys_io      ; receive in AH
0177+  17CD B9 00         cmp al, 0        ; check error code (AL)
0178+  17CF C6 C9 17      je _gets_escape      ; if no char received, retry
0179+  17D2 76 6E         cmp ah, 'n'
0180+  17D4 C6 F3 17      je _gets_LF
0181+  17D7 76 72         cmp ah, 'r'
0182+  17D9 C6 FA 17      je _gets_CR
0183+  17DC 76 30         cmp ah, '0'
0184+  17DE C6 01 18      je _gets_NULL
0185+  17E1 76 5C         cmp ah, $5C  ; '\'
0186+  17E3 C6 EC 17      je _gets_slash
0187+  17E6 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  17E7 3E            mov [d], al
0189+  17E8 79            inc d
0190+  17E9 0A 71 17      jmp _gets_loop
0191+  17EC             _gets_slash:
0192+  17EC 19 5C         mov al, $5C
0193+  17EE 3E            mov [d], al
0194+  17EF 79            inc d
0195+  17F0 0A 71 17      jmp _gets_loop
0196+  17F3             _gets_LF:
0197+  17F3 19 0A         mov al, $0A
0198+  17F5 3E            mov [d], al
0199+  17F6 79            inc d
0200+  17F7 0A 71 17      jmp _gets_loop
0201+  17FA             _gets_CR:
0202+  17FA 19 0D         mov al, $0D
0203+  17FC 3E            mov [d], al
0204+  17FD 79            inc d
0205+  17FE 0A 71 17      jmp _gets_loop
0206+  1801             _gets_NULL:
0207+  1801 19 00         mov al, $00
0208+  1803 3E            mov [d], al
0209+  1804 79            inc d
0210+  1805 0A 71 17      jmp _gets_loop
0211+  1808             _gets_end:
0212+  1808 19 00         mov al, 0
0213+  180A 3E            mov [d], al        ; terminate string
0214+  180B E7            pop d
0215+  180C E4            pop a
0216+  180D 09            ret
0217+  180E             
0218+  180E             
0219+  180E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  180E             ;; INPUT TEXT
0221+  180E             ;; terminated with CTRL+D
0222+  180E             ;; pointer in D
0223+  180E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  180E             _gettxt:
0225+  180E D7            push a
0226+  180F DA            push d
0227+  1810             _gettxt_loop:
0228+  1810 19 01         mov al, 1
0229+  1812 05 03         syscall sys_io      ; receive in AH
0230+  1814 B9 00         cmp al, 0        ; check error code (AL)
0231+  1816 C6 10 18      je _gettxt_loop    ; if no char received, retry
0232+  1819 76 04         cmp ah, 4      ; EOT
0233+  181B C6 59 18      je _gettxt_end
0234+  181E 76 08         cmp ah, $08      ; check for backspace
0235+  1820 C6 55 18      je _gettxt_backspace
0236+  1823 76 5C         cmp ah, $5C        ; '\'
0237+  1825 C6 2E 18      je _gettxt_escape
0238+  1828 1A            mov al, ah
0239+  1829 3E            mov [d], al
0240+  182A 79            inc d
0241+  182B 0A 10 18      jmp _gettxt_loop
0242+  182E             _gettxt_escape:
0243+  182E 19 01         mov al, 1
0244+  1830 05 03         syscall sys_io      ; receive in AH
0245+  1832 B9 00         cmp al, 0        ; check error code (AL)
0246+  1834 C6 2E 18      je _gettxt_escape    ; if no char received, retry
0247+  1837 76 6E         cmp ah, 'n'
0248+  1839 C6 47 18      je _gettxt_LF
0249+  183C 76 72         cmp ah, 'r'
0250+  183E C6 4E 18      je _gettxt_CR
0251+  1841 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1842 3E            mov [d], al
0253+  1843 79            inc d
0254+  1844 0A 10 18      jmp _gettxt_loop
0255+  1847             _gettxt_LF:
0256+  1847 19 0A         mov al, $0A
0257+  1849 3E            mov [d], al
0258+  184A 79            inc d
0259+  184B 0A 10 18      jmp _gettxt_loop
0260+  184E             _gettxt_CR:
0261+  184E 19 0D         mov al, $0D
0262+  1850 3E            mov [d], al
0263+  1851 79            inc d
0264+  1852 0A 10 18      jmp _gettxt_loop
0265+  1855             _gettxt_backspace:
0266+  1855 7F            dec d
0267+  1856 0A 10 18      jmp _gettxt_loop
0268+  1859             _gettxt_end:
0269+  1859 19 00         mov al, 0
0270+  185B 3E            mov [d], al        ; terminate string
0271+  185C E7            pop d
0272+  185D E4            pop a
0273+  185E 09            ret
0274+  185F             
0275+  185F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  185F             ; PRINT NEW LINE
0277+  185F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  185F             printnl:
0279+  185F D7            push a
0280+  1860 10 00 0A      mov a, $0A00
0281+  1863 05 03         syscall sys_io
0282+  1865 10 00 0D      mov a, $0D00
0283+  1868 05 03         syscall sys_io
0284+  186A E4            pop a
0285+  186B 09            ret
0286+  186C             
0287+  186C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  186C             ; _strtoint
0289+  186C             ; 4 digit hex string number in d
0290+  186C             ; integer returned in A
0291+  186C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  186C             _strtointx:
0293+  186C D8            push b
0294+  186D 32            mov bl, [d]
0295+  186E 37            mov bh, bl
0296+  186F 33 01 00      mov bl, [d + 1]
0297+  1872 07 25 17      call _atoi        ; convert to int in AL
0298+  1875 23            mov ah, al        ; move to AH
0299+  1876 33 02 00      mov bl, [d + 2]
0300+  1879 37            mov bh, bl
0301+  187A 33 03 00      mov bl, [d + 3]
0302+  187D 07 25 17      call _atoi        ; convert to int in AL
0303+  1880 E5            pop b
0304+  1881 09            ret
0305+  1882             
0306+  1882             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  1882             ; _strtoint
0308+  1882             ; 5 digit base10 string number in d
0309+  1882             ; integer returned in A
0310+  1882             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  1882             _strtoint:
0312+  1882 E2            push si
0313+  1883 D8            push b
0314+  1884 D9            push c
0315+  1885 DA            push d
0316+  1886 07 C7 16      call _strlen      ; get string length in C
0317+  1889 7E            dec c
0318+  188A FD 4E         mov si, d
0319+  188C 12            mov a, c
0320+  188D FD 99         shl a
0321+  188F 3B FE 19      mov d, table_power
0322+  1892 59            add d, a
0323+  1893 38 00 00      mov c, 0
0324+  1896             _strtoint_L0:
0325+  1896 F6            lodsb      ; load ASCII to al
0326+  1897 B9 00         cmp al, 0
0327+  1899 C6 AC 18      je _strtoint_end
0328+  189C 6F 30         sub al, $30    ; make into integer
0329+  189E 22 00         mov ah, 0
0330+  18A0 2A            mov b, [d]
0331+  18A1 AC            mul a, b      ; result in B since it fits in 16bits
0332+  18A2 11            mov a, b
0333+  18A3 28            mov b, c
0334+  18A4 54            add a, b
0335+  18A5 39            mov c, a
0336+  18A6 63 02 00      sub d, 2
0337+  18A9 0A 96 18      jmp _strtoint_L0
0338+  18AC             _strtoint_end:
0339+  18AC 12            mov a, c
0340+  18AD E7            pop d
0341+  18AE E6            pop c
0342+  18AF E5            pop b
0343+  18B0 EF            pop si
0344+  18B1 09            ret
0345+  18B2             
0346+  18B2             
0347+  18B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  18B2             ; PRINT NULL TERMINATED STRING
0349+  18B2             ; pointer in D
0350+  18B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  18B2             _puts:
0352+  18B2 D7            push a
0353+  18B3 DA            push d
0354+  18B4             _puts_L1:
0355+  18B4 1E            mov al, [d]
0356+  18B5 B9 00         cmp al, 0
0357+  18B7 C6 C3 18      jz _puts_END
0358+  18BA 23            mov ah, al
0359+  18BB 19 00         mov al, 0
0360+  18BD 05 03         syscall sys_io
0361+  18BF 79            inc d
0362+  18C0 0A B4 18      jmp _puts_L1
0363+  18C3             _puts_END:
0364+  18C3 E7            pop d
0365+  18C4 E4            pop a
0366+  18C5 09            ret
0367+  18C6             
0368+  18C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  18C6             ; PRINT N SIZE STRING
0370+  18C6             ; pointer in D
0371+  18C6             ; size in C
0372+  18C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  18C6             _putsn:
0374+  18C6 DB            push al
0375+  18C7 DA            push d
0376+  18C8 D9            push c
0377+  18C9             _putsn_L0:
0378+  18C9 1E            mov al, [d]
0379+  18CA 23            mov ah, al
0380+  18CB 19 00         mov al, 0
0381+  18CD 05 03         syscall sys_io
0382+  18CF 79            inc d
0383+  18D0 7E            dec c  
0384+  18D1 C2 00 00      cmp c, 0
0385+  18D4 C7 C9 18      jne _putsn_L0
0386+  18D7             _putsn_end:
0387+  18D7 E6            pop c
0388+  18D8 E7            pop d
0389+  18D9 E8            pop al
0390+  18DA 09            ret
0391+  18DB             
0392+  18DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  18DB             ; print 16bit decimal number
0394+  18DB             ; input number in A
0395+  18DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  18DB             print_u16d:
0397+  18DB D7            push a
0398+  18DC D8            push b
0399+  18DD 26 10 27      mov b, 10000
0400+  18E0 AE            div a, b      ; get 10000's coeff.
0401+  18E1 07 03 19      call print_number
0402+  18E4 11            mov a, b
0403+  18E5 26 E8 03      mov b, 1000
0404+  18E8 AE            div a, b      ; get 1000's coeff.
0405+  18E9 07 03 19      call print_number
0406+  18EC 11            mov a, b
0407+  18ED 26 64 00      mov b, 100
0408+  18F0 AE            div a, b
0409+  18F1 07 03 19      call print_number
0410+  18F4 11            mov a, b
0411+  18F5 26 0A 00      mov b, 10
0412+  18F8 AE            div a, b
0413+  18F9 07 03 19      call print_number
0414+  18FC 1B            mov al, bl      ; 1's coeff in bl
0415+  18FD 07 03 19      call print_number
0416+  1900 E5            pop b
0417+  1901 E4            pop a
0418+  1902 09            ret
0419+  1903             
0420+  1903             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1903             ; print AL
0422+  1903             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1903             print_number:
0424+  1903 6A 30         add al, $30
0425+  1905 23            mov ah, al
0426+  1906 07 68 17      call _putchar
0427+  1909 09            ret
0428+  190A             
0429+  190A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  190A             ; PRINT 16BIT HEX INTEGER
0431+  190A             ; integer value in reg B
0432+  190A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  190A             print_u16x:
0434+  190A D7            push a
0435+  190B D8            push b
0436+  190C DD            push bl
0437+  190D 30            mov bl, bh
0438+  190E 07 36 17      call _itoa        ; convert bh to char in A
0439+  1911 2F            mov bl, al        ; save al
0440+  1912 19 00         mov al, 0
0441+  1914 05 03         syscall sys_io        ; display AH
0442+  1916 24            mov ah, bl        ; retrieve al
0443+  1917 19 00         mov al, 0
0444+  1919 05 03         syscall sys_io        ; display AL
0445+  191B             
0446+  191B EA            pop bl
0447+  191C 07 36 17      call _itoa        ; convert bh to char in A
0448+  191F 2F            mov bl, al        ; save al
0449+  1920 19 00         mov al, 0
0450+  1922 05 03         syscall sys_io        ; display AH
0451+  1924 24            mov ah, bl        ; retrieve al
0452+  1925 19 00         mov al, 0
0453+  1927 05 03         syscall sys_io        ; display AL
0454+  1929             
0455+  1929 E5            pop b
0456+  192A E4            pop a
0457+  192B 09            ret
0458+  192C             
0459+  192C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  192C             ; INPUT 16BIT HEX INTEGER
0461+  192C             ; read 16bit integer into A
0462+  192C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  192C             scan_u16x:
0464+  192C F8 10 00      enter 16
0465+  192F D8            push b
0466+  1930 DA            push d
0467+  1931             
0468+  1931 FA F1 FF      lea d, [bp + -15]
0469+  1934 07 6F 17      call _gets        ; get number
0470+  1937             
0471+  1937 32            mov bl, [d]
0472+  1938 37            mov bh, bl
0473+  1939 33 01 00      mov bl, [d + 1]
0474+  193C 07 25 17      call _atoi        ; convert to int in AL
0475+  193F 23            mov ah, al        ; move to AH
0476+  1940             
0477+  1940 33 02 00      mov bl, [d + 2]
0478+  1943 37            mov bh, bl
0479+  1944 33 03 00      mov bl, [d + 3]
0480+  1947 07 25 17      call _atoi        ; convert to int in AL
0481+  194A             
0482+  194A E7            pop d
0483+  194B E5            pop b
0484+  194C F9            leave
0485+  194D 09            ret
0486+  194E             
0487+  194E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  194E             ; PRINT 8bit HEX INTEGER
0489+  194E             ; integer value in reg bl
0490+  194E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  194E             print_u8x:
0492+  194E D7            push a
0493+  194F DD            push bl
0494+  1950             
0495+  1950 07 36 17      call _itoa        ; convert bl to char in A
0496+  1953 2F            mov bl, al        ; save al
0497+  1954 19 00         mov al, 0
0498+  1956 05 03         syscall sys_io        ; display AH
0499+  1958 24            mov ah, bl        ; retrieve al
0500+  1959 19 00         mov al, 0
0501+  195B 05 03         syscall sys_io        ; display AL
0502+  195D             
0503+  195D EA            pop bl
0504+  195E E4            pop a
0505+  195F 09            ret
0506+  1960             
0507+  1960             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  1960             ; print 8bit decimal unsigned number
0509+  1960             ; input number in AL
0510+  1960             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  1960             print_u8d:
0512+  1960 D7            push a
0513+  1961 D8            push b
0514+  1962             
0515+  1962 22 00         mov ah, 0
0516+  1964 26 64 00      mov b, 100
0517+  1967 AE            div a, b
0518+  1968 D8            push b      ; save remainder
0519+  1969 B9 00         cmp al, 0
0520+  196B C6 75 19      je skip100
0521+  196E 6A 30         add al, $30
0522+  1970 23            mov ah, al
0523+  1971 19 00         mov al, 0
0524+  1973 05 03         syscall sys_io  ; print coeff
0525+  1975             skip100:
0526+  1975 E4            pop a
0527+  1976 22 00         mov ah, 0
0528+  1978 26 0A 00      mov b, 10
0529+  197B AE            div a, b
0530+  197C D8            push b      ; save remainder
0531+  197D B9 00         cmp al, 0
0532+  197F C6 89 19      je skip10
0533+  1982 6A 30         add al, $30
0534+  1984 23            mov ah, al
0535+  1985 19 00         mov al, 0
0536+  1987 05 03         syscall sys_io  ; print coeff
0537+  1989             skip10:
0538+  1989 E4            pop a
0539+  198A 1B            mov al, bl
0540+  198B 6A 30         add al, $30
0541+  198D 23            mov ah, al
0542+  198E 19 00         mov al, 0
0543+  1990 05 03         syscall sys_io  ; print coeff
0544+  1992 E5            pop b
0545+  1993 E4            pop a
0546+  1994 09            ret
0547+  1995             
0548+  1995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  1995             ; INPUT 8BIT HEX INTEGER
0550+  1995             ; read 8bit integer into AL
0551+  1995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  1995             scan_u8x:
0553+  1995 F8 04 00      enter 4
0554+  1998 D8            push b
0555+  1999 DA            push d
0556+  199A             
0557+  199A FA FD FF      lea d, [bp + -3]
0558+  199D 07 6F 17      call _gets        ; get number
0559+  19A0             
0560+  19A0 32            mov bl, [d]
0561+  19A1 37            mov bh, bl
0562+  19A2 33 01 00      mov bl, [d + 1]
0563+  19A5 07 25 17      call _atoi        ; convert to int in AL
0564+  19A8             
0565+  19A8 E7            pop d
0566+  19A9 E5            pop b
0567+  19AA F9            leave
0568+  19AB 09            ret
0569+  19AC             
0570+  19AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  19AC             ; input decimal number
0572+  19AC             ; result in A
0573+  19AC             ; 655'\0'
0574+  19AC             ; low--------high
0575+  19AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  19AC             scan_u16d:
0577+  19AC F8 08 00      enter 8
0578+  19AF E2            push si
0579+  19B0 D8            push b
0580+  19B1 D9            push c
0581+  19B2 DA            push d
0582+  19B3 FA F9 FF      lea d, [bp +- 7]
0583+  19B6 07 6F 17      call _gets
0584+  19B9 07 C7 16      call _strlen      ; get string length in C
0585+  19BC 7E            dec c
0586+  19BD FD 4E         mov si, d
0587+  19BF 12            mov a, c
0588+  19C0 FD 99         shl a
0589+  19C2 3B FE 19      mov d, table_power
0590+  19C5 59            add d, a
0591+  19C6 38 00 00      mov c, 0
0592+  19C9             mul_loop:
0593+  19C9 F6            lodsb      ; load ASCII to al
0594+  19CA B9 00         cmp al, 0
0595+  19CC C6 DF 19      je mul_exit
0596+  19CF 6F 30         sub al, $30    ; make into integer
0597+  19D1 22 00         mov ah, 0
0598+  19D3 2A            mov b, [d]
0599+  19D4 AC            mul a, b      ; result in B since it fits in 16bits
0600+  19D5 11            mov a, b
0601+  19D6 28            mov b, c
0602+  19D7 54            add a, b
0603+  19D8 39            mov c, a
0604+  19D9 63 02 00      sub d, 2
0605+  19DC 0A C9 19      jmp mul_loop
0606+  19DF             mul_exit:
0607+  19DF 12            mov a, c
0608+  19E0 E7            pop d
0609+  19E1 E6            pop c
0610+  19E2 E5            pop b
0611+  19E3 EF            pop si
0612+  19E4 F9            leave
0613+  19E5 09            ret
0614+  19E6             
0615+  19E6             
0616+  19E6 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  19EA 34 35 36 37 
0616+  19EE 38 39 41 42 
0616+  19F2 43 44 45 46 
0617+  19F6 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  19FA 1B 5B 48 00 
0618+  19FE             
0619+  19FE             table_power:
0620+  19FE 01 00         .dw 1
0621+  1A00 0A 00         .dw 10
0622+  1A02 64 00         .dw 100
0623+  1A04 E8 03         .dw 1000
0624+  1A06 10 27         .dw 100003293   1A08             ; --- END INLINE ASM BLOCK
3294   1A08             
3295   1A08 F9            leave
3296   1A09 09            ret
3297   1A0A             
3298   1A0A             back:
3299   1A0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3300   1A0D             ; $t 
3301   1A0D 52 02 00      sub sp, 2
3302   1A10             ;; t = token; 
3303   1A10 FA FF FF      lea d, [bp + -1] ; $t
3304   1A13 DA            push d
3305   1A14 3B 04 33      mov d, _token_data ; $token
3306   1A17 2D            mov b, d
3307   1A18 E7            pop d
3308   1A19 FD 43         mov [d], b
3309   1A1B             ;; while(*t++) prog--; 
3310   1A1B             _while51_cond:
3311   1A1B FA FF FF      lea d, [bp + -1] ; $t
3312   1A1E 2A            mov b, [d]
3313   1A1F FD 79         mov g, b
3314   1A21 FD 77         inc b
3315   1A23 FA FF FF      lea d, [bp + -1] ; $t
3316   1A26 FD 43         mov [d], b
3317   1A28 FD 27         mov b, g
3318   1A2A 74            mov d, b
3319   1A2B 32            mov bl, [d]
3320   1A2C A7 00         mov bh, 0
3321   1A2E C0 00 00      cmp b, 0
3322   1A31 C6 46 1A      je _while51_exit
3323   1A34             _while51_block:
3324   1A34             ;; prog--; 
3325   1A34 3B 02 33      mov d, _prog ; $prog
3326   1A37 2A            mov b, [d]
3327   1A38 FD 79         mov g, b
3328   1A3A FD 7D         dec b
3329   1A3C 3B 02 33      mov d, _prog ; $prog
3330   1A3F FD 43         mov [d], b
3331   1A41 FD 27         mov b, g
3332   1A43 0A 1B 1A      jmp _while51_cond
3333   1A46             _while51_exit:
3334   1A46             ;; tok = TOK_UNDEF; 
3335   1A46 3B FE 32      mov d, _tok ; $tok
3336   1A49 DA            push d
3337   1A4A 26 00 00      mov b, 0; TOK_UNDEF
3338   1A4D E7            pop d
3339   1A4E FD 43         mov [d], b
3340   1A50             ;; toktype = TYPE_UNDEF; 
3341   1A50 3B 00 33      mov d, _toktype ; $toktype
3342   1A53 DA            push d
3343   1A54 26 00 00      mov b, 0; TYPE_UNDEF
3344   1A57 E7            pop d
3345   1A58 FD 43         mov [d], b
3346   1A5A             ;; token[0] = '\0'; 
3347   1A5A 3B 04 33      mov d, _token_data ; $token
3348   1A5D D7            push a
3349   1A5E DA            push d
3350   1A5F 26 00 00      mov b, $0
3351   1A62 E7            pop d
3352   1A63 5A            add d, b
3353   1A64 E4            pop a
3354   1A65 DA            push d
3355   1A66 26 00 00      mov b, $0
3356   1A69 E7            pop d
3357   1A6A FD 3E         mov [d], bl
3358   1A6C F9            leave
3359   1A6D 09            ret
3360   1A6E             
3361   1A6E             get_path:
3362   1A6E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3363   1A71             ; $t 
3364   1A71 52 02 00      sub sp, 2
3365   1A74             ;; *token = '\0'; 
3366   1A74 3B 04 33      mov d, _token_data ; $token
3367   1A77 2D            mov b, d
3368   1A78 D8            push b
3369   1A79 26 00 00      mov b, $0
3370   1A7C E7            pop d
3371   1A7D FD 3E         mov [d], bl
3372   1A7F             ;; t = token; 
3373   1A7F FA FF FF      lea d, [bp + -1] ; $t
3374   1A82 DA            push d
3375   1A83 3B 04 33      mov d, _token_data ; $token
3376   1A86 2D            mov b, d
3377   1A87 E7            pop d
3378   1A88 FD 43         mov [d], b
3379   1A8A             ;; while(is_space(*prog)) prog++; 
3380   1A8A             _while52_cond:
3381   1A8A 3B 02 33      mov d, _prog ; $prog
3382   1A8D 2A            mov b, [d]
3383   1A8E 74            mov d, b
3384   1A8F 32            mov bl, [d]
3385   1A90 A7 00         mov bh, 0
3386   1A92 DD            push bl
3387   1A93 07 FE 09      call is_space
3388   1A96 51 01 00      add sp, 1
3389   1A99 C0 00 00      cmp b, 0
3390   1A9C C6 B1 1A      je _while52_exit
3391   1A9F             _while52_block:
3392   1A9F             ;; prog++; 
3393   1A9F 3B 02 33      mov d, _prog ; $prog
3394   1AA2 2A            mov b, [d]
3395   1AA3 FD 79         mov g, b
3396   1AA5 FD 77         inc b
3397   1AA7 3B 02 33      mov d, _prog ; $prog
3398   1AAA FD 43         mov [d], b
3399   1AAC FD 27         mov b, g
3400   1AAE 0A 8A 1A      jmp _while52_cond
3401   1AB1             _while52_exit:
3402   1AB1             ;; if(*prog == '\0'){ 
3403   1AB1             _if53_cond:
3404   1AB1 3B 02 33      mov d, _prog ; $prog
3405   1AB4 2A            mov b, [d]
3406   1AB5 74            mov d, b
3407   1AB6 32            mov bl, [d]
3408   1AB7 A7 00         mov bh, 0
3409   1AB9             ; START RELATIONAL
3410   1AB9 D7            push a
3411   1ABA 11            mov a, b
3412   1ABB 26 00 00      mov b, $0
3413   1ABE B0            cmp a, b
3414   1ABF FD 71         seq ; ==
3415   1AC1 E4            pop a
3416   1AC2             ; END RELATIONAL
3417   1AC2 C0 00 00      cmp b, 0
3418   1AC5 C6 CD 1A      je _if53_exit
3419   1AC8             _if53_true:
3420   1AC8             ;; return; 
3421   1AC8 F9            leave
3422   1AC9 09            ret
3423   1ACA 0A CD 1A      jmp _if53_exit
3424   1ACD             _if53_exit:
3425   1ACD             ;; while( 
3426   1ACD             _while54_cond:
3427   1ACD 3B 02 33      mov d, _prog ; $prog
3428   1AD0 2A            mov b, [d]
3429   1AD1 74            mov d, b
3430   1AD2 32            mov bl, [d]
3431   1AD3 A7 00         mov bh, 0
3432   1AD5             ; START RELATIONAL
3433   1AD5 D7            push a
3434   1AD6 11            mov a, b
3435   1AD7 26 61 00      mov b, $61
3436   1ADA B0            cmp a, b
3437   1ADB FD 80         sge ; >=
3438   1ADD E4            pop a
3439   1ADE             ; END RELATIONAL
3440   1ADE D7            push a
3441   1ADF 11            mov a, b
3442   1AE0 3B 02 33      mov d, _prog ; $prog
3443   1AE3 2A            mov b, [d]
3444   1AE4 74            mov d, b
3445   1AE5 32            mov bl, [d]
3446   1AE6 A7 00         mov bh, 0
3447   1AE8             ; START RELATIONAL
3448   1AE8 D7            push a
3449   1AE9 11            mov a, b
3450   1AEA 26 7A 00      mov b, $7a
3451   1AED B0            cmp a, b
3452   1AEE FD 74         sle ; <=
3453   1AF0 E4            pop a
3454   1AF1             ; END RELATIONAL
3455   1AF1 FD A7         sand a, b ; &&
3456   1AF3 E4            pop a
3457   1AF4 D7            push a
3458   1AF5 11            mov a, b
3459   1AF6 3B 02 33      mov d, _prog ; $prog
3460   1AF9 2A            mov b, [d]
3461   1AFA 74            mov d, b
3462   1AFB 32            mov bl, [d]
3463   1AFC A7 00         mov bh, 0
3464   1AFE             ; START RELATIONAL
3465   1AFE D7            push a
3466   1AFF 11            mov a, b
3467   1B00 26 41 00      mov b, $41
3468   1B03 B0            cmp a, b
3469   1B04 FD 80         sge ; >=
3470   1B06 E4            pop a
3471   1B07             ; END RELATIONAL
3472   1B07 D7            push a
3473   1B08 11            mov a, b
3474   1B09 3B 02 33      mov d, _prog ; $prog
3475   1B0C 2A            mov b, [d]
3476   1B0D 74            mov d, b
3477   1B0E 32            mov bl, [d]
3478   1B0F A7 00         mov bh, 0
3479   1B11             ; START RELATIONAL
3480   1B11 D7            push a
3481   1B12 11            mov a, b
3482   1B13 26 5A 00      mov b, $5a
3483   1B16 B0            cmp a, b
3484   1B17 FD 74         sle ; <=
3485   1B19 E4            pop a
3486   1B1A             ; END RELATIONAL
3487   1B1A FD A7         sand a, b ; &&
3488   1B1C E4            pop a
3489   1B1D FD A8         sor a, b ; ||
3490   1B1F 11            mov a, b
3491   1B20 3B 02 33      mov d, _prog ; $prog
3492   1B23 2A            mov b, [d]
3493   1B24 74            mov d, b
3494   1B25 32            mov bl, [d]
3495   1B26 A7 00         mov bh, 0
3496   1B28             ; START RELATIONAL
3497   1B28 D7            push a
3498   1B29 11            mov a, b
3499   1B2A 26 30 00      mov b, $30
3500   1B2D B0            cmp a, b
3501   1B2E FD 80         sge ; >=
3502   1B30 E4            pop a
3503   1B31             ; END RELATIONAL
3504   1B31 D7            push a
3505   1B32 11            mov a, b
3506   1B33 3B 02 33      mov d, _prog ; $prog
3507   1B36 2A            mov b, [d]
3508   1B37 74            mov d, b
3509   1B38 32            mov bl, [d]
3510   1B39 A7 00         mov bh, 0
3511   1B3B             ; START RELATIONAL
3512   1B3B D7            push a
3513   1B3C 11            mov a, b
3514   1B3D 26 39 00      mov b, $39
3515   1B40 B0            cmp a, b
3516   1B41 FD 74         sle ; <=
3517   1B43 E4            pop a
3518   1B44             ; END RELATIONAL
3519   1B44 FD A7         sand a, b ; &&
3520   1B46 E4            pop a
3521   1B47 FD A8         sor a, b ; ||
3522   1B49 11            mov a, b
3523   1B4A 3B 02 33      mov d, _prog ; $prog
3524   1B4D 2A            mov b, [d]
3525   1B4E 74            mov d, b
3526   1B4F 32            mov bl, [d]
3527   1B50 A7 00         mov bh, 0
3528   1B52             ; START RELATIONAL
3529   1B52 D7            push a
3530   1B53 11            mov a, b
3531   1B54 26 2F 00      mov b, $2f
3532   1B57 B0            cmp a, b
3533   1B58 FD 71         seq ; ==
3534   1B5A E4            pop a
3535   1B5B             ; END RELATIONAL
3536   1B5B FD A8         sor a, b ; ||
3537   1B5D 11            mov a, b
3538   1B5E 3B 02 33      mov d, _prog ; $prog
3539   1B61 2A            mov b, [d]
3540   1B62 74            mov d, b
3541   1B63 32            mov bl, [d]
3542   1B64 A7 00         mov bh, 0
3543   1B66             ; START RELATIONAL
3544   1B66 D7            push a
3545   1B67 11            mov a, b
3546   1B68 26 5F 00      mov b, $5f
3547   1B6B B0            cmp a, b
3548   1B6C FD 71         seq ; ==
3549   1B6E E4            pop a
3550   1B6F             ; END RELATIONAL
3551   1B6F FD A8         sor a, b ; ||
3552   1B71 11            mov a, b
3553   1B72 3B 02 33      mov d, _prog ; $prog
3554   1B75 2A            mov b, [d]
3555   1B76 74            mov d, b
3556   1B77 32            mov bl, [d]
3557   1B78 A7 00         mov bh, 0
3558   1B7A             ; START RELATIONAL
3559   1B7A D7            push a
3560   1B7B 11            mov a, b
3561   1B7C 26 2D 00      mov b, $2d
3562   1B7F B0            cmp a, b
3563   1B80 FD 71         seq ; ==
3564   1B82 E4            pop a
3565   1B83             ; END RELATIONAL
3566   1B83 FD A8         sor a, b ; ||
3567   1B85 11            mov a, b
3568   1B86 3B 02 33      mov d, _prog ; $prog
3569   1B89 2A            mov b, [d]
3570   1B8A 74            mov d, b
3571   1B8B 32            mov bl, [d]
3572   1B8C A7 00         mov bh, 0
3573   1B8E             ; START RELATIONAL
3574   1B8E D7            push a
3575   1B8F 11            mov a, b
3576   1B90 26 2E 00      mov b, $2e
3577   1B93 B0            cmp a, b
3578   1B94 FD 71         seq ; ==
3579   1B96 E4            pop a
3580   1B97             ; END RELATIONAL
3581   1B97 FD A8         sor a, b ; ||
3582   1B99 E4            pop a
3583   1B9A C0 00 00      cmp b, 0
3584   1B9D C6 C9 1B      je _while54_exit
3585   1BA0             _while54_block:
3586   1BA0             ;; *t++ = *prog++; 
3587   1BA0 FA FF FF      lea d, [bp + -1] ; $t
3588   1BA3 2A            mov b, [d]
3589   1BA4 FD 79         mov g, b
3590   1BA6 FD 77         inc b
3591   1BA8 FA FF FF      lea d, [bp + -1] ; $t
3592   1BAB FD 43         mov [d], b
3593   1BAD FD 27         mov b, g
3594   1BAF D8            push b
3595   1BB0 3B 02 33      mov d, _prog ; $prog
3596   1BB3 2A            mov b, [d]
3597   1BB4 FD 79         mov g, b
3598   1BB6 FD 77         inc b
3599   1BB8 3B 02 33      mov d, _prog ; $prog
3600   1BBB FD 43         mov [d], b
3601   1BBD FD 27         mov b, g
3602   1BBF 74            mov d, b
3603   1BC0 32            mov bl, [d]
3604   1BC1 A7 00         mov bh, 0
3605   1BC3 E7            pop d
3606   1BC4 FD 3E         mov [d], bl
3607   1BC6 0A CD 1A      jmp _while54_cond
3608   1BC9             _while54_exit:
3609   1BC9             ;; *t = '\0'; 
3610   1BC9 FA FF FF      lea d, [bp + -1] ; $t
3611   1BCC 2A            mov b, [d]
3612   1BCD D8            push b
3613   1BCE 26 00 00      mov b, $0
3614   1BD1 E7            pop d
3615   1BD2 FD 3E         mov [d], bl
3616   1BD4 F9            leave
3617   1BD5 09            ret
3618   1BD6             
3619   1BD6             get:
3620   1BD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3621   1BD9             ; $t 
3622   1BD9 52 02 00      sub sp, 2
3623   1BDC             ;; *token = '\0'; 
3624   1BDC 3B 04 33      mov d, _token_data ; $token
3625   1BDF 2D            mov b, d
3626   1BE0 D8            push b
3627   1BE1 26 00 00      mov b, $0
3628   1BE4 E7            pop d
3629   1BE5 FD 3E         mov [d], bl
3630   1BE7             ;; tok = 0; 
3631   1BE7 3B FE 32      mov d, _tok ; $tok
3632   1BEA DA            push d
3633   1BEB 26 00 00      mov b, $0
3634   1BEE E7            pop d
3635   1BEF FD 43         mov [d], b
3636   1BF1             ;; toktype = 0; 
3637   1BF1 3B 00 33      mov d, _toktype ; $toktype
3638   1BF4 DA            push d
3639   1BF5 26 00 00      mov b, $0
3640   1BF8 E7            pop d
3641   1BF9 FD 43         mov [d], b
3642   1BFB             ;; t = token; 
3643   1BFB FA FF FF      lea d, [bp + -1] ; $t
3644   1BFE DA            push d
3645   1BFF 3B 04 33      mov d, _token_data ; $token
3646   1C02 2D            mov b, d
3647   1C03 E7            pop d
3648   1C04 FD 43         mov [d], b
3649   1C06             ;; while(is_space(*prog)) prog++; 
3650   1C06             _while55_cond:
3651   1C06 3B 02 33      mov d, _prog ; $prog
3652   1C09 2A            mov b, [d]
3653   1C0A 74            mov d, b
3654   1C0B 32            mov bl, [d]
3655   1C0C A7 00         mov bh, 0
3656   1C0E DD            push bl
3657   1C0F 07 FE 09      call is_space
3658   1C12 51 01 00      add sp, 1
3659   1C15 C0 00 00      cmp b, 0
3660   1C18 C6 2D 1C      je _while55_exit
3661   1C1B             _while55_block:
3662   1C1B             ;; prog++; 
3663   1C1B 3B 02 33      mov d, _prog ; $prog
3664   1C1E 2A            mov b, [d]
3665   1C1F FD 79         mov g, b
3666   1C21 FD 77         inc b
3667   1C23 3B 02 33      mov d, _prog ; $prog
3668   1C26 FD 43         mov [d], b
3669   1C28 FD 27         mov b, g
3670   1C2A 0A 06 1C      jmp _while55_cond
3671   1C2D             _while55_exit:
3672   1C2D             ;; if(*prog == '\0'){ 
3673   1C2D             _if56_cond:
3674   1C2D 3B 02 33      mov d, _prog ; $prog
3675   1C30 2A            mov b, [d]
3676   1C31 74            mov d, b
3677   1C32 32            mov bl, [d]
3678   1C33 A7 00         mov bh, 0
3679   1C35             ; START RELATIONAL
3680   1C35 D7            push a
3681   1C36 11            mov a, b
3682   1C37 26 00 00      mov b, $0
3683   1C3A B0            cmp a, b
3684   1C3B FD 71         seq ; ==
3685   1C3D E4            pop a
3686   1C3E             ; END RELATIONAL
3687   1C3E C0 00 00      cmp b, 0
3688   1C41 C6 53 1C      je _if56_exit
3689   1C44             _if56_true:
3690   1C44             ;; toktype = END; 
3691   1C44 3B 00 33      mov d, _toktype ; $toktype
3692   1C47 DA            push d
3693   1C48 26 06 00      mov b, 6; END
3694   1C4B E7            pop d
3695   1C4C FD 43         mov [d], b
3696   1C4E             ;; return; 
3697   1C4E F9            leave
3698   1C4F 09            ret
3699   1C50 0A 53 1C      jmp _if56_exit
3700   1C53             _if56_exit:
3701   1C53             ;; if(is_digit(*prog)){ 
3702   1C53             _if57_cond:
3703   1C53 3B 02 33      mov d, _prog ; $prog
3704   1C56 2A            mov b, [d]
3705   1C57 74            mov d, b
3706   1C58 32            mov bl, [d]
3707   1C59 A7 00         mov bh, 0
3708   1C5B DD            push bl
3709   1C5C 07 4A 0A      call is_digit
3710   1C5F 51 01 00      add sp, 1
3711   1C62 C0 00 00      cmp b, 0
3712   1C65 C6 C0 1C      je _if57_else
3713   1C68             _if57_true:
3714   1C68             ;; while(is_digit(*prog)){ 
3715   1C68             _while58_cond:
3716   1C68 3B 02 33      mov d, _prog ; $prog
3717   1C6B 2A            mov b, [d]
3718   1C6C 74            mov d, b
3719   1C6D 32            mov bl, [d]
3720   1C6E A7 00         mov bh, 0
3721   1C70 DD            push bl
3722   1C71 07 4A 0A      call is_digit
3723   1C74 51 01 00      add sp, 1
3724   1C77 C0 00 00      cmp b, 0
3725   1C7A C6 A6 1C      je _while58_exit
3726   1C7D             _while58_block:
3727   1C7D             ;; *t++ = *prog++; 
3728   1C7D FA FF FF      lea d, [bp + -1] ; $t
3729   1C80 2A            mov b, [d]
3730   1C81 FD 79         mov g, b
3731   1C83 FD 77         inc b
3732   1C85 FA FF FF      lea d, [bp + -1] ; $t
3733   1C88 FD 43         mov [d], b
3734   1C8A FD 27         mov b, g
3735   1C8C D8            push b
3736   1C8D 3B 02 33      mov d, _prog ; $prog
3737   1C90 2A            mov b, [d]
3738   1C91 FD 79         mov g, b
3739   1C93 FD 77         inc b
3740   1C95 3B 02 33      mov d, _prog ; $prog
3741   1C98 FD 43         mov [d], b
3742   1C9A FD 27         mov b, g
3743   1C9C 74            mov d, b
3744   1C9D 32            mov bl, [d]
3745   1C9E A7 00         mov bh, 0
3746   1CA0 E7            pop d
3747   1CA1 FD 3E         mov [d], bl
3748   1CA3 0A 68 1C      jmp _while58_cond
3749   1CA6             _while58_exit:
3750   1CA6             ;; *t = '\0'; 
3751   1CA6 FA FF FF      lea d, [bp + -1] ; $t
3752   1CA9 2A            mov b, [d]
3753   1CAA D8            push b
3754   1CAB 26 00 00      mov b, $0
3755   1CAE E7            pop d
3756   1CAF FD 3E         mov [d], bl
3757   1CB1             ;; toktype = INTEGER_CONST; 
3758   1CB1 3B 00 33      mov d, _toktype ; $toktype
3759   1CB4 DA            push d
3760   1CB5 26 04 00      mov b, 4; INTEGER_CONST
3761   1CB8 E7            pop d
3762   1CB9 FD 43         mov [d], b
3763   1CBB             ;; return; // return to avoid *t = '\0' line at the end of function 
3764   1CBB F9            leave
3765   1CBC 09            ret
3766   1CBD 0A 9A 29      jmp _if57_exit
3767   1CC0             _if57_else:
3768   1CC0             ;; if(is_alpha(*prog)){ 
3769   1CC0             _if59_cond:
3770   1CC0 3B 02 33      mov d, _prog ; $prog
3771   1CC3 2A            mov b, [d]
3772   1CC4 74            mov d, b
3773   1CC5 32            mov bl, [d]
3774   1CC6 A7 00         mov bh, 0
3775   1CC8 DD            push bl
3776   1CC9 07 72 0A      call is_alpha
3777   1CCC 51 01 00      add sp, 1
3778   1CCF C0 00 00      cmp b, 0
3779   1CD2 C6 3F 1D      je _if59_else
3780   1CD5             _if59_true:
3781   1CD5             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
3782   1CD5             _while60_cond:
3783   1CD5 3B 02 33      mov d, _prog ; $prog
3784   1CD8 2A            mov b, [d]
3785   1CD9 74            mov d, b
3786   1CDA 32            mov bl, [d]
3787   1CDB A7 00         mov bh, 0
3788   1CDD DD            push bl
3789   1CDE 07 72 0A      call is_alpha
3790   1CE1 51 01 00      add sp, 1
3791   1CE4 D7            push a
3792   1CE5 11            mov a, b
3793   1CE6 3B 02 33      mov d, _prog ; $prog
3794   1CE9 2A            mov b, [d]
3795   1CEA 74            mov d, b
3796   1CEB 32            mov bl, [d]
3797   1CEC A7 00         mov bh, 0
3798   1CEE DD            push bl
3799   1CEF 07 4A 0A      call is_digit
3800   1CF2 51 01 00      add sp, 1
3801   1CF5 FD A8         sor a, b ; ||
3802   1CF7 E4            pop a
3803   1CF8 C0 00 00      cmp b, 0
3804   1CFB C6 27 1D      je _while60_exit
3805   1CFE             _while60_block:
3806   1CFE             ;; *t++ = *prog++; 
3807   1CFE FA FF FF      lea d, [bp + -1] ; $t
3808   1D01 2A            mov b, [d]
3809   1D02 FD 79         mov g, b
3810   1D04 FD 77         inc b
3811   1D06 FA FF FF      lea d, [bp + -1] ; $t
3812   1D09 FD 43         mov [d], b
3813   1D0B FD 27         mov b, g
3814   1D0D D8            push b
3815   1D0E 3B 02 33      mov d, _prog ; $prog
3816   1D11 2A            mov b, [d]
3817   1D12 FD 79         mov g, b
3818   1D14 FD 77         inc b
3819   1D16 3B 02 33      mov d, _prog ; $prog
3820   1D19 FD 43         mov [d], b
3821   1D1B FD 27         mov b, g
3822   1D1D 74            mov d, b
3823   1D1E 32            mov bl, [d]
3824   1D1F A7 00         mov bh, 0
3825   1D21 E7            pop d
3826   1D22 FD 3E         mov [d], bl
3827   1D24 0A D5 1C      jmp _while60_cond
3828   1D27             _while60_exit:
3829   1D27             ;; *t = '\0'; 
3830   1D27 FA FF FF      lea d, [bp + -1] ; $t
3831   1D2A 2A            mov b, [d]
3832   1D2B D8            push b
3833   1D2C 26 00 00      mov b, $0
3834   1D2F E7            pop d
3835   1D30 FD 3E         mov [d], bl
3836   1D32             ;; toktype = IDENTIFIER; 
3837   1D32 3B 00 33      mov d, _toktype ; $toktype
3838   1D35 DA            push d
3839   1D36 26 05 00      mov b, 5; IDENTIFIER
3840   1D39 E7            pop d
3841   1D3A FD 43         mov [d], b
3842   1D3C 0A 9A 29      jmp _if59_exit
3843   1D3F             _if59_else:
3844   1D3F             ;; if(*prog == '\"'){ 
3845   1D3F             _if61_cond:
3846   1D3F 3B 02 33      mov d, _prog ; $prog
3847   1D42 2A            mov b, [d]
3848   1D43 74            mov d, b
3849   1D44 32            mov bl, [d]
3850   1D45 A7 00         mov bh, 0
3851   1D47             ; START RELATIONAL
3852   1D47 D7            push a
3853   1D48 11            mov a, b
3854   1D49 26 22 00      mov b, $22
3855   1D4C B0            cmp a, b
3856   1D4D FD 71         seq ; ==
3857   1D4F E4            pop a
3858   1D50             ; END RELATIONAL
3859   1D50 C0 00 00      cmp b, 0
3860   1D53 C6 2E 1E      je _if61_else
3861   1D56             _if61_true:
3862   1D56             ;; *t++ = '\"'; 
3863   1D56 FA FF FF      lea d, [bp + -1] ; $t
3864   1D59 2A            mov b, [d]
3865   1D5A FD 79         mov g, b
3866   1D5C FD 77         inc b
3867   1D5E FA FF FF      lea d, [bp + -1] ; $t
3868   1D61 FD 43         mov [d], b
3869   1D63 FD 27         mov b, g
3870   1D65 D8            push b
3871   1D66 26 22 00      mov b, $22
3872   1D69 E7            pop d
3873   1D6A FD 3E         mov [d], bl
3874   1D6C             ;; prog++; 
3875   1D6C 3B 02 33      mov d, _prog ; $prog
3876   1D6F 2A            mov b, [d]
3877   1D70 FD 79         mov g, b
3878   1D72 FD 77         inc b
3879   1D74 3B 02 33      mov d, _prog ; $prog
3880   1D77 FD 43         mov [d], b
3881   1D79 FD 27         mov b, g
3882   1D7B             ;; while(*prog != '\"' && *prog){ 
3883   1D7B             _while62_cond:
3884   1D7B 3B 02 33      mov d, _prog ; $prog
3885   1D7E 2A            mov b, [d]
3886   1D7F 74            mov d, b
3887   1D80 32            mov bl, [d]
3888   1D81 A7 00         mov bh, 0
3889   1D83             ; START RELATIONAL
3890   1D83 D7            push a
3891   1D84 11            mov a, b
3892   1D85 26 22 00      mov b, $22
3893   1D88 B0            cmp a, b
3894   1D89 FD 72         sneq ; !=
3895   1D8B E4            pop a
3896   1D8C             ; END RELATIONAL
3897   1D8C D7            push a
3898   1D8D 11            mov a, b
3899   1D8E 3B 02 33      mov d, _prog ; $prog
3900   1D91 2A            mov b, [d]
3901   1D92 74            mov d, b
3902   1D93 32            mov bl, [d]
3903   1D94 A7 00         mov bh, 0
3904   1D96 FD A7         sand a, b ; &&
3905   1D98 E4            pop a
3906   1D99 C0 00 00      cmp b, 0
3907   1D9C C6 C8 1D      je _while62_exit
3908   1D9F             _while62_block:
3909   1D9F             ;; *t++ = *prog++; 
3910   1D9F FA FF FF      lea d, [bp + -1] ; $t
3911   1DA2 2A            mov b, [d]
3912   1DA3 FD 79         mov g, b
3913   1DA5 FD 77         inc b
3914   1DA7 FA FF FF      lea d, [bp + -1] ; $t
3915   1DAA FD 43         mov [d], b
3916   1DAC FD 27         mov b, g
3917   1DAE D8            push b
3918   1DAF 3B 02 33      mov d, _prog ; $prog
3919   1DB2 2A            mov b, [d]
3920   1DB3 FD 79         mov g, b
3921   1DB5 FD 77         inc b
3922   1DB7 3B 02 33      mov d, _prog ; $prog
3923   1DBA FD 43         mov [d], b
3924   1DBC FD 27         mov b, g
3925   1DBE 74            mov d, b
3926   1DBF 32            mov bl, [d]
3927   1DC0 A7 00         mov bh, 0
3928   1DC2 E7            pop d
3929   1DC3 FD 3E         mov [d], bl
3930   1DC5 0A 7B 1D      jmp _while62_cond
3931   1DC8             _while62_exit:
3932   1DC8             ;; if(*prog != '\"') error("Double quotes expected"); 
3933   1DC8             _if63_cond:
3934   1DC8 3B 02 33      mov d, _prog ; $prog
3935   1DCB 2A            mov b, [d]
3936   1DCC 74            mov d, b
3937   1DCD 32            mov bl, [d]
3938   1DCE A7 00         mov bh, 0
3939   1DD0             ; START RELATIONAL
3940   1DD0 D7            push a
3941   1DD1 11            mov a, b
3942   1DD2 26 22 00      mov b, $22
3943   1DD5 B0            cmp a, b
3944   1DD6 FD 72         sneq ; !=
3945   1DD8 E4            pop a
3946   1DD9             ; END RELATIONAL
3947   1DD9 C0 00 00      cmp b, 0
3948   1DDC C6 EE 1D      je _if63_exit
3949   1DDF             _if63_true:
3950   1DDF             ;; error("Double quotes expected"); 
3951   1DDF 26 41 3C      mov b, __s14 ; "Double quotes expected"
3952   1DE2 FD AB         swp b
3953   1DE4 D8            push b
3954   1DE5 07 FD 2B      call error
3955   1DE8 51 02 00      add sp, 2
3956   1DEB 0A EE 1D      jmp _if63_exit
3957   1DEE             _if63_exit:
3958   1DEE             ;; *t++ = '\"'; 
3959   1DEE FA FF FF      lea d, [bp + -1] ; $t
3960   1DF1 2A            mov b, [d]
3961   1DF2 FD 79         mov g, b
3962   1DF4 FD 77         inc b
3963   1DF6 FA FF FF      lea d, [bp + -1] ; $t
3964   1DF9 FD 43         mov [d], b
3965   1DFB FD 27         mov b, g
3966   1DFD D8            push b
3967   1DFE 26 22 00      mov b, $22
3968   1E01 E7            pop d
3969   1E02 FD 3E         mov [d], bl
3970   1E04             ;; prog++; 
3971   1E04 3B 02 33      mov d, _prog ; $prog
3972   1E07 2A            mov b, [d]
3973   1E08 FD 79         mov g, b
3974   1E0A FD 77         inc b
3975   1E0C 3B 02 33      mov d, _prog ; $prog
3976   1E0F FD 43         mov [d], b
3977   1E11 FD 27         mov b, g
3978   1E13             ;; toktype = STRING_CONST; 
3979   1E13 3B 00 33      mov d, _toktype ; $toktype
3980   1E16 DA            push d
3981   1E17 26 03 00      mov b, 3; STRING_CONST
3982   1E1A E7            pop d
3983   1E1B FD 43         mov [d], b
3984   1E1D             ;; *t = '\0'; 
3985   1E1D FA FF FF      lea d, [bp + -1] ; $t
3986   1E20 2A            mov b, [d]
3987   1E21 D8            push b
3988   1E22 26 00 00      mov b, $0
3989   1E25 E7            pop d
3990   1E26 FD 3E         mov [d], bl
3991   1E28             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
3992   1E28 07 A7 29      call convert_constant
3993   1E2B 0A 9A 29      jmp _if61_exit
3994   1E2E             _if61_else:
3995   1E2E             ;; if(*prog == '#'){ 
3996   1E2E             _if64_cond:
3997   1E2E 3B 02 33      mov d, _prog ; $prog
3998   1E31 2A            mov b, [d]
3999   1E32 74            mov d, b
4000   1E33 32            mov bl, [d]
4001   1E34 A7 00         mov bh, 0
4002   1E36             ; START RELATIONAL
4003   1E36 D7            push a
4004   1E37 11            mov a, b
4005   1E38 26 23 00      mov b, $23
4006   1E3B B0            cmp a, b
4007   1E3C FD 71         seq ; ==
4008   1E3E E4            pop a
4009   1E3F             ; END RELATIONAL
4010   1E3F C0 00 00      cmp b, 0
4011   1E42 C6 82 1E      je _if64_else
4012   1E45             _if64_true:
4013   1E45             ;; *t++ = *prog++; 
4014   1E45 FA FF FF      lea d, [bp + -1] ; $t
4015   1E48 2A            mov b, [d]
4016   1E49 FD 79         mov g, b
4017   1E4B FD 77         inc b
4018   1E4D FA FF FF      lea d, [bp + -1] ; $t
4019   1E50 FD 43         mov [d], b
4020   1E52 FD 27         mov b, g
4021   1E54 D8            push b
4022   1E55 3B 02 33      mov d, _prog ; $prog
4023   1E58 2A            mov b, [d]
4024   1E59 FD 79         mov g, b
4025   1E5B FD 77         inc b
4026   1E5D 3B 02 33      mov d, _prog ; $prog
4027   1E60 FD 43         mov [d], b
4028   1E62 FD 27         mov b, g
4029   1E64 74            mov d, b
4030   1E65 32            mov bl, [d]
4031   1E66 A7 00         mov bh, 0
4032   1E68 E7            pop d
4033   1E69 FD 3E         mov [d], bl
4034   1E6B             ;; tok = HASH; 
4035   1E6B 3B FE 32      mov d, _tok ; $tok
4036   1E6E DA            push d
4037   1E6F 26 15 00      mov b, 21; HASH
4038   1E72 E7            pop d
4039   1E73 FD 43         mov [d], b
4040   1E75             ;; toktype = DELIMITER;   
4041   1E75 3B 00 33      mov d, _toktype ; $toktype
4042   1E78 DA            push d
4043   1E79 26 01 00      mov b, 1; DELIMITER
4044   1E7C E7            pop d
4045   1E7D FD 43         mov [d], b
4046   1E7F 0A 9A 29      jmp _if64_exit
4047   1E82             _if64_else:
4048   1E82             ;; if(*prog == '{'){ 
4049   1E82             _if65_cond:
4050   1E82 3B 02 33      mov d, _prog ; $prog
4051   1E85 2A            mov b, [d]
4052   1E86 74            mov d, b
4053   1E87 32            mov bl, [d]
4054   1E88 A7 00         mov bh, 0
4055   1E8A             ; START RELATIONAL
4056   1E8A D7            push a
4057   1E8B 11            mov a, b
4058   1E8C 26 7B 00      mov b, $7b
4059   1E8F B0            cmp a, b
4060   1E90 FD 71         seq ; ==
4061   1E92 E4            pop a
4062   1E93             ; END RELATIONAL
4063   1E93 C0 00 00      cmp b, 0
4064   1E96 C6 D6 1E      je _if65_else
4065   1E99             _if65_true:
4066   1E99             ;; *t++ = *prog++; 
4067   1E99 FA FF FF      lea d, [bp + -1] ; $t
4068   1E9C 2A            mov b, [d]
4069   1E9D FD 79         mov g, b
4070   1E9F FD 77         inc b
4071   1EA1 FA FF FF      lea d, [bp + -1] ; $t
4072   1EA4 FD 43         mov [d], b
4073   1EA6 FD 27         mov b, g
4074   1EA8 D8            push b
4075   1EA9 3B 02 33      mov d, _prog ; $prog
4076   1EAC 2A            mov b, [d]
4077   1EAD FD 79         mov g, b
4078   1EAF FD 77         inc b
4079   1EB1 3B 02 33      mov d, _prog ; $prog
4080   1EB4 FD 43         mov [d], b
4081   1EB6 FD 27         mov b, g
4082   1EB8 74            mov d, b
4083   1EB9 32            mov bl, [d]
4084   1EBA A7 00         mov bh, 0
4085   1EBC E7            pop d
4086   1EBD FD 3E         mov [d], bl
4087   1EBF             ;; tok = OPENING_BRACE; 
4088   1EBF 3B FE 32      mov d, _tok ; $tok
4089   1EC2 DA            push d
4090   1EC3 26 1E 00      mov b, 30; OPENING_BRACE
4091   1EC6 E7            pop d
4092   1EC7 FD 43         mov [d], b
4093   1EC9             ;; toktype = DELIMITER;   
4094   1EC9 3B 00 33      mov d, _toktype ; $toktype
4095   1ECC DA            push d
4096   1ECD 26 01 00      mov b, 1; DELIMITER
4097   1ED0 E7            pop d
4098   1ED1 FD 43         mov [d], b
4099   1ED3 0A 9A 29      jmp _if65_exit
4100   1ED6             _if65_else:
4101   1ED6             ;; if(*prog == '}'){ 
4102   1ED6             _if66_cond:
4103   1ED6 3B 02 33      mov d, _prog ; $prog
4104   1ED9 2A            mov b, [d]
4105   1EDA 74            mov d, b
4106   1EDB 32            mov bl, [d]
4107   1EDC A7 00         mov bh, 0
4108   1EDE             ; START RELATIONAL
4109   1EDE D7            push a
4110   1EDF 11            mov a, b
4111   1EE0 26 7D 00      mov b, $7d
4112   1EE3 B0            cmp a, b
4113   1EE4 FD 71         seq ; ==
4114   1EE6 E4            pop a
4115   1EE7             ; END RELATIONAL
4116   1EE7 C0 00 00      cmp b, 0
4117   1EEA C6 2A 1F      je _if66_else
4118   1EED             _if66_true:
4119   1EED             ;; *t++ = *prog++; 
4120   1EED FA FF FF      lea d, [bp + -1] ; $t
4121   1EF0 2A            mov b, [d]
4122   1EF1 FD 79         mov g, b
4123   1EF3 FD 77         inc b
4124   1EF5 FA FF FF      lea d, [bp + -1] ; $t
4125   1EF8 FD 43         mov [d], b
4126   1EFA FD 27         mov b, g
4127   1EFC D8            push b
4128   1EFD 3B 02 33      mov d, _prog ; $prog
4129   1F00 2A            mov b, [d]
4130   1F01 FD 79         mov g, b
4131   1F03 FD 77         inc b
4132   1F05 3B 02 33      mov d, _prog ; $prog
4133   1F08 FD 43         mov [d], b
4134   1F0A FD 27         mov b, g
4135   1F0C 74            mov d, b
4136   1F0D 32            mov bl, [d]
4137   1F0E A7 00         mov bh, 0
4138   1F10 E7            pop d
4139   1F11 FD 3E         mov [d], bl
4140   1F13             ;; tok = CLOSING_BRACE; 
4141   1F13 3B FE 32      mov d, _tok ; $tok
4142   1F16 DA            push d
4143   1F17 26 1F 00      mov b, 31; CLOSING_BRACE
4144   1F1A E7            pop d
4145   1F1B FD 43         mov [d], b
4146   1F1D             ;; toktype = DELIMITER;   
4147   1F1D 3B 00 33      mov d, _toktype ; $toktype
4148   1F20 DA            push d
4149   1F21 26 01 00      mov b, 1; DELIMITER
4150   1F24 E7            pop d
4151   1F25 FD 43         mov [d], b
4152   1F27 0A 9A 29      jmp _if66_exit
4153   1F2A             _if66_else:
4154   1F2A             ;; if(*prog == '['){ 
4155   1F2A             _if67_cond:
4156   1F2A 3B 02 33      mov d, _prog ; $prog
4157   1F2D 2A            mov b, [d]
4158   1F2E 74            mov d, b
4159   1F2F 32            mov bl, [d]
4160   1F30 A7 00         mov bh, 0
4161   1F32             ; START RELATIONAL
4162   1F32 D7            push a
4163   1F33 11            mov a, b
4164   1F34 26 5B 00      mov b, $5b
4165   1F37 B0            cmp a, b
4166   1F38 FD 71         seq ; ==
4167   1F3A E4            pop a
4168   1F3B             ; END RELATIONAL
4169   1F3B C0 00 00      cmp b, 0
4170   1F3E C6 7E 1F      je _if67_else
4171   1F41             _if67_true:
4172   1F41             ;; *t++ = *prog++; 
4173   1F41 FA FF FF      lea d, [bp + -1] ; $t
4174   1F44 2A            mov b, [d]
4175   1F45 FD 79         mov g, b
4176   1F47 FD 77         inc b
4177   1F49 FA FF FF      lea d, [bp + -1] ; $t
4178   1F4C FD 43         mov [d], b
4179   1F4E FD 27         mov b, g
4180   1F50 D8            push b
4181   1F51 3B 02 33      mov d, _prog ; $prog
4182   1F54 2A            mov b, [d]
4183   1F55 FD 79         mov g, b
4184   1F57 FD 77         inc b
4185   1F59 3B 02 33      mov d, _prog ; $prog
4186   1F5C FD 43         mov [d], b
4187   1F5E FD 27         mov b, g
4188   1F60 74            mov d, b
4189   1F61 32            mov bl, [d]
4190   1F62 A7 00         mov bh, 0
4191   1F64 E7            pop d
4192   1F65 FD 3E         mov [d], bl
4193   1F67             ;; tok = OPENING_BRACKET; 
4194   1F67 3B FE 32      mov d, _tok ; $tok
4195   1F6A DA            push d
4196   1F6B 26 20 00      mov b, 32; OPENING_BRACKET
4197   1F6E E7            pop d
4198   1F6F FD 43         mov [d], b
4199   1F71             ;; toktype = DELIMITER;   
4200   1F71 3B 00 33      mov d, _toktype ; $toktype
4201   1F74 DA            push d
4202   1F75 26 01 00      mov b, 1; DELIMITER
4203   1F78 E7            pop d
4204   1F79 FD 43         mov [d], b
4205   1F7B 0A 9A 29      jmp _if67_exit
4206   1F7E             _if67_else:
4207   1F7E             ;; if(*prog == ']'){ 
4208   1F7E             _if68_cond:
4209   1F7E 3B 02 33      mov d, _prog ; $prog
4210   1F81 2A            mov b, [d]
4211   1F82 74            mov d, b
4212   1F83 32            mov bl, [d]
4213   1F84 A7 00         mov bh, 0
4214   1F86             ; START RELATIONAL
4215   1F86 D7            push a
4216   1F87 11            mov a, b
4217   1F88 26 5D 00      mov b, $5d
4218   1F8B B0            cmp a, b
4219   1F8C FD 71         seq ; ==
4220   1F8E E4            pop a
4221   1F8F             ; END RELATIONAL
4222   1F8F C0 00 00      cmp b, 0
4223   1F92 C6 D2 1F      je _if68_else
4224   1F95             _if68_true:
4225   1F95             ;; *t++ = *prog++; 
4226   1F95 FA FF FF      lea d, [bp + -1] ; $t
4227   1F98 2A            mov b, [d]
4228   1F99 FD 79         mov g, b
4229   1F9B FD 77         inc b
4230   1F9D FA FF FF      lea d, [bp + -1] ; $t
4231   1FA0 FD 43         mov [d], b
4232   1FA2 FD 27         mov b, g
4233   1FA4 D8            push b
4234   1FA5 3B 02 33      mov d, _prog ; $prog
4235   1FA8 2A            mov b, [d]
4236   1FA9 FD 79         mov g, b
4237   1FAB FD 77         inc b
4238   1FAD 3B 02 33      mov d, _prog ; $prog
4239   1FB0 FD 43         mov [d], b
4240   1FB2 FD 27         mov b, g
4241   1FB4 74            mov d, b
4242   1FB5 32            mov bl, [d]
4243   1FB6 A7 00         mov bh, 0
4244   1FB8 E7            pop d
4245   1FB9 FD 3E         mov [d], bl
4246   1FBB             ;; tok = CLOSING_BRACKET; 
4247   1FBB 3B FE 32      mov d, _tok ; $tok
4248   1FBE DA            push d
4249   1FBF 26 21 00      mov b, 33; CLOSING_BRACKET
4250   1FC2 E7            pop d
4251   1FC3 FD 43         mov [d], b
4252   1FC5             ;; toktype = DELIMITER;   
4253   1FC5 3B 00 33      mov d, _toktype ; $toktype
4254   1FC8 DA            push d
4255   1FC9 26 01 00      mov b, 1; DELIMITER
4256   1FCC E7            pop d
4257   1FCD FD 43         mov [d], b
4258   1FCF 0A 9A 29      jmp _if68_exit
4259   1FD2             _if68_else:
4260   1FD2             ;; if(*prog == '='){ 
4261   1FD2             _if69_cond:
4262   1FD2 3B 02 33      mov d, _prog ; $prog
4263   1FD5 2A            mov b, [d]
4264   1FD6 74            mov d, b
4265   1FD7 32            mov bl, [d]
4266   1FD8 A7 00         mov bh, 0
4267   1FDA             ; START RELATIONAL
4268   1FDA D7            push a
4269   1FDB 11            mov a, b
4270   1FDC 26 3D 00      mov b, $3d
4271   1FDF B0            cmp a, b
4272   1FE0 FD 71         seq ; ==
4273   1FE2 E4            pop a
4274   1FE3             ; END RELATIONAL
4275   1FE3 C0 00 00      cmp b, 0
4276   1FE6 C6 70 20      je _if69_else
4277   1FE9             _if69_true:
4278   1FE9             ;; *t++ = *prog++; 
4279   1FE9 FA FF FF      lea d, [bp + -1] ; $t
4280   1FEC 2A            mov b, [d]
4281   1FED FD 79         mov g, b
4282   1FEF FD 77         inc b
4283   1FF1 FA FF FF      lea d, [bp + -1] ; $t
4284   1FF4 FD 43         mov [d], b
4285   1FF6 FD 27         mov b, g
4286   1FF8 D8            push b
4287   1FF9 3B 02 33      mov d, _prog ; $prog
4288   1FFC 2A            mov b, [d]
4289   1FFD FD 79         mov g, b
4290   1FFF FD 77         inc b
4291   2001 3B 02 33      mov d, _prog ; $prog
4292   2004 FD 43         mov [d], b
4293   2006 FD 27         mov b, g
4294   2008 74            mov d, b
4295   2009 32            mov bl, [d]
4296   200A A7 00         mov bh, 0
4297   200C E7            pop d
4298   200D FD 3E         mov [d], bl
4299   200F             ;; if (*prog == '='){ 
4300   200F             _if70_cond:
4301   200F 3B 02 33      mov d, _prog ; $prog
4302   2012 2A            mov b, [d]
4303   2013 74            mov d, b
4304   2014 32            mov bl, [d]
4305   2015 A7 00         mov bh, 0
4306   2017             ; START RELATIONAL
4307   2017 D7            push a
4308   2018 11            mov a, b
4309   2019 26 3D 00      mov b, $3d
4310   201C B0            cmp a, b
4311   201D FD 71         seq ; ==
4312   201F E4            pop a
4313   2020             ; END RELATIONAL
4314   2020 C0 00 00      cmp b, 0
4315   2023 C6 59 20      je _if70_else
4316   2026             _if70_true:
4317   2026             ;; *t++ = *prog++; 
4318   2026 FA FF FF      lea d, [bp + -1] ; $t
4319   2029 2A            mov b, [d]
4320   202A FD 79         mov g, b
4321   202C FD 77         inc b
4322   202E FA FF FF      lea d, [bp + -1] ; $t
4323   2031 FD 43         mov [d], b
4324   2033 FD 27         mov b, g
4325   2035 D8            push b
4326   2036 3B 02 33      mov d, _prog ; $prog
4327   2039 2A            mov b, [d]
4328   203A FD 79         mov g, b
4329   203C FD 77         inc b
4330   203E 3B 02 33      mov d, _prog ; $prog
4331   2041 FD 43         mov [d], b
4332   2043 FD 27         mov b, g
4333   2045 74            mov d, b
4334   2046 32            mov bl, [d]
4335   2047 A7 00         mov bh, 0
4336   2049 E7            pop d
4337   204A FD 3E         mov [d], bl
4338   204C             ;; tok = EQUAL; 
4339   204C 3B FE 32      mov d, _tok ; $tok
4340   204F DA            push d
4341   2050 26 08 00      mov b, 8; EQUAL
4342   2053 E7            pop d
4343   2054 FD 43         mov [d], b
4344   2056 0A 63 20      jmp _if70_exit
4345   2059             _if70_else:
4346   2059             ;; tok = ASSIGNMENT; 
4347   2059 3B FE 32      mov d, _tok ; $tok
4348   205C DA            push d
4349   205D 26 11 00      mov b, 17; ASSIGNMENT
4350   2060 E7            pop d
4351   2061 FD 43         mov [d], b
4352   2063             _if70_exit:
4353   2063             ;; toktype = DELIMITER;   
4354   2063 3B 00 33      mov d, _toktype ; $toktype
4355   2066 DA            push d
4356   2067 26 01 00      mov b, 1; DELIMITER
4357   206A E7            pop d
4358   206B FD 43         mov [d], b
4359   206D 0A 9A 29      jmp _if69_exit
4360   2070             _if69_else:
4361   2070             ;; if(*prog == '&'){ 
4362   2070             _if71_cond:
4363   2070 3B 02 33      mov d, _prog ; $prog
4364   2073 2A            mov b, [d]
4365   2074 74            mov d, b
4366   2075 32            mov bl, [d]
4367   2076 A7 00         mov bh, 0
4368   2078             ; START RELATIONAL
4369   2078 D7            push a
4370   2079 11            mov a, b
4371   207A 26 26 00      mov b, $26
4372   207D B0            cmp a, b
4373   207E FD 71         seq ; ==
4374   2080 E4            pop a
4375   2081             ; END RELATIONAL
4376   2081 C0 00 00      cmp b, 0
4377   2084 C6 0E 21      je _if71_else
4378   2087             _if71_true:
4379   2087             ;; *t++ = *prog++; 
4380   2087 FA FF FF      lea d, [bp + -1] ; $t
4381   208A 2A            mov b, [d]
4382   208B FD 79         mov g, b
4383   208D FD 77         inc b
4384   208F FA FF FF      lea d, [bp + -1] ; $t
4385   2092 FD 43         mov [d], b
4386   2094 FD 27         mov b, g
4387   2096 D8            push b
4388   2097 3B 02 33      mov d, _prog ; $prog
4389   209A 2A            mov b, [d]
4390   209B FD 79         mov g, b
4391   209D FD 77         inc b
4392   209F 3B 02 33      mov d, _prog ; $prog
4393   20A2 FD 43         mov [d], b
4394   20A4 FD 27         mov b, g
4395   20A6 74            mov d, b
4396   20A7 32            mov bl, [d]
4397   20A8 A7 00         mov bh, 0
4398   20AA E7            pop d
4399   20AB FD 3E         mov [d], bl
4400   20AD             ;; if(*prog == '&'){ 
4401   20AD             _if72_cond:
4402   20AD 3B 02 33      mov d, _prog ; $prog
4403   20B0 2A            mov b, [d]
4404   20B1 74            mov d, b
4405   20B2 32            mov bl, [d]
4406   20B3 A7 00         mov bh, 0
4407   20B5             ; START RELATIONAL
4408   20B5 D7            push a
4409   20B6 11            mov a, b
4410   20B7 26 26 00      mov b, $26
4411   20BA B0            cmp a, b
4412   20BB FD 71         seq ; ==
4413   20BD E4            pop a
4414   20BE             ; END RELATIONAL
4415   20BE C0 00 00      cmp b, 0
4416   20C1 C6 F7 20      je _if72_else
4417   20C4             _if72_true:
4418   20C4             ;; *t++ = *prog++; 
4419   20C4 FA FF FF      lea d, [bp + -1] ; $t
4420   20C7 2A            mov b, [d]
4421   20C8 FD 79         mov g, b
4422   20CA FD 77         inc b
4423   20CC FA FF FF      lea d, [bp + -1] ; $t
4424   20CF FD 43         mov [d], b
4425   20D1 FD 27         mov b, g
4426   20D3 D8            push b
4427   20D4 3B 02 33      mov d, _prog ; $prog
4428   20D7 2A            mov b, [d]
4429   20D8 FD 79         mov g, b
4430   20DA FD 77         inc b
4431   20DC 3B 02 33      mov d, _prog ; $prog
4432   20DF FD 43         mov [d], b
4433   20E1 FD 27         mov b, g
4434   20E3 74            mov d, b
4435   20E4 32            mov bl, [d]
4436   20E5 A7 00         mov bh, 0
4437   20E7 E7            pop d
4438   20E8 FD 3E         mov [d], bl
4439   20EA             ;; tok = LOGICAL_AND; 
4440   20EA 3B FE 32      mov d, _tok ; $tok
4441   20ED DA            push d
4442   20EE 26 0E 00      mov b, 14; LOGICAL_AND
4443   20F1 E7            pop d
4444   20F2 FD 43         mov [d], b
4445   20F4 0A 01 21      jmp _if72_exit
4446   20F7             _if72_else:
4447   20F7             ;; tok = AMPERSAND; 
4448   20F7 3B FE 32      mov d, _tok ; $tok
4449   20FA DA            push d
4450   20FB 26 16 00      mov b, 22; AMPERSAND
4451   20FE E7            pop d
4452   20FF FD 43         mov [d], b
4453   2101             _if72_exit:
4454   2101             ;; toktype = DELIMITER;   
4455   2101 3B 00 33      mov d, _toktype ; $toktype
4456   2104 DA            push d
4457   2105 26 01 00      mov b, 1; DELIMITER
4458   2108 E7            pop d
4459   2109 FD 43         mov [d], b
4460   210B 0A 9A 29      jmp _if71_exit
4461   210E             _if71_else:
4462   210E             ;; if(*prog == '|'){ 
4463   210E             _if73_cond:
4464   210E 3B 02 33      mov d, _prog ; $prog
4465   2111 2A            mov b, [d]
4466   2112 74            mov d, b
4467   2113 32            mov bl, [d]
4468   2114 A7 00         mov bh, 0
4469   2116             ; START RELATIONAL
4470   2116 D7            push a
4471   2117 11            mov a, b
4472   2118 26 7C 00      mov b, $7c
4473   211B B0            cmp a, b
4474   211C FD 71         seq ; ==
4475   211E E4            pop a
4476   211F             ; END RELATIONAL
4477   211F C0 00 00      cmp b, 0
4478   2122 C6 AC 21      je _if73_else
4479   2125             _if73_true:
4480   2125             ;; *t++ = *prog++; 
4481   2125 FA FF FF      lea d, [bp + -1] ; $t
4482   2128 2A            mov b, [d]
4483   2129 FD 79         mov g, b
4484   212B FD 77         inc b
4485   212D FA FF FF      lea d, [bp + -1] ; $t
4486   2130 FD 43         mov [d], b
4487   2132 FD 27         mov b, g
4488   2134 D8            push b
4489   2135 3B 02 33      mov d, _prog ; $prog
4490   2138 2A            mov b, [d]
4491   2139 FD 79         mov g, b
4492   213B FD 77         inc b
4493   213D 3B 02 33      mov d, _prog ; $prog
4494   2140 FD 43         mov [d], b
4495   2142 FD 27         mov b, g
4496   2144 74            mov d, b
4497   2145 32            mov bl, [d]
4498   2146 A7 00         mov bh, 0
4499   2148 E7            pop d
4500   2149 FD 3E         mov [d], bl
4501   214B             ;; if (*prog == '|'){ 
4502   214B             _if74_cond:
4503   214B 3B 02 33      mov d, _prog ; $prog
4504   214E 2A            mov b, [d]
4505   214F 74            mov d, b
4506   2150 32            mov bl, [d]
4507   2151 A7 00         mov bh, 0
4508   2153             ; START RELATIONAL
4509   2153 D7            push a
4510   2154 11            mov a, b
4511   2155 26 7C 00      mov b, $7c
4512   2158 B0            cmp a, b
4513   2159 FD 71         seq ; ==
4514   215B E4            pop a
4515   215C             ; END RELATIONAL
4516   215C C0 00 00      cmp b, 0
4517   215F C6 95 21      je _if74_else
4518   2162             _if74_true:
4519   2162             ;; *t++ = *prog++; 
4520   2162 FA FF FF      lea d, [bp + -1] ; $t
4521   2165 2A            mov b, [d]
4522   2166 FD 79         mov g, b
4523   2168 FD 77         inc b
4524   216A FA FF FF      lea d, [bp + -1] ; $t
4525   216D FD 43         mov [d], b
4526   216F FD 27         mov b, g
4527   2171 D8            push b
4528   2172 3B 02 33      mov d, _prog ; $prog
4529   2175 2A            mov b, [d]
4530   2176 FD 79         mov g, b
4531   2178 FD 77         inc b
4532   217A 3B 02 33      mov d, _prog ; $prog
4533   217D FD 43         mov [d], b
4534   217F FD 27         mov b, g
4535   2181 74            mov d, b
4536   2182 32            mov bl, [d]
4537   2183 A7 00         mov bh, 0
4538   2185 E7            pop d
4539   2186 FD 3E         mov [d], bl
4540   2188             ;; tok = LOGICAL_OR; 
4541   2188 3B FE 32      mov d, _tok ; $tok
4542   218B DA            push d
4543   218C 26 0F 00      mov b, 15; LOGICAL_OR
4544   218F E7            pop d
4545   2190 FD 43         mov [d], b
4546   2192 0A 9F 21      jmp _if74_exit
4547   2195             _if74_else:
4548   2195             ;; tok = BITWISE_OR; 
4549   2195 3B FE 32      mov d, _tok ; $tok
4550   2198 DA            push d
4551   2199 26 18 00      mov b, 24; BITWISE_OR
4552   219C E7            pop d
4553   219D FD 43         mov [d], b
4554   219F             _if74_exit:
4555   219F             ;; toktype = DELIMITER;   
4556   219F 3B 00 33      mov d, _toktype ; $toktype
4557   21A2 DA            push d
4558   21A3 26 01 00      mov b, 1; DELIMITER
4559   21A6 E7            pop d
4560   21A7 FD 43         mov [d], b
4561   21A9 0A 9A 29      jmp _if73_exit
4562   21AC             _if73_else:
4563   21AC             ;; if(*prog == '~'){ 
4564   21AC             _if75_cond:
4565   21AC 3B 02 33      mov d, _prog ; $prog
4566   21AF 2A            mov b, [d]
4567   21B0 74            mov d, b
4568   21B1 32            mov bl, [d]
4569   21B2 A7 00         mov bh, 0
4570   21B4             ; START RELATIONAL
4571   21B4 D7            push a
4572   21B5 11            mov a, b
4573   21B6 26 7E 00      mov b, $7e
4574   21B9 B0            cmp a, b
4575   21BA FD 71         seq ; ==
4576   21BC E4            pop a
4577   21BD             ; END RELATIONAL
4578   21BD C0 00 00      cmp b, 0
4579   21C0 C6 00 22      je _if75_else
4580   21C3             _if75_true:
4581   21C3             ;; *t++ = *prog++; 
4582   21C3 FA FF FF      lea d, [bp + -1] ; $t
4583   21C6 2A            mov b, [d]
4584   21C7 FD 79         mov g, b
4585   21C9 FD 77         inc b
4586   21CB FA FF FF      lea d, [bp + -1] ; $t
4587   21CE FD 43         mov [d], b
4588   21D0 FD 27         mov b, g
4589   21D2 D8            push b
4590   21D3 3B 02 33      mov d, _prog ; $prog
4591   21D6 2A            mov b, [d]
4592   21D7 FD 79         mov g, b
4593   21D9 FD 77         inc b
4594   21DB 3B 02 33      mov d, _prog ; $prog
4595   21DE FD 43         mov [d], b
4596   21E0 FD 27         mov b, g
4597   21E2 74            mov d, b
4598   21E3 32            mov bl, [d]
4599   21E4 A7 00         mov bh, 0
4600   21E6 E7            pop d
4601   21E7 FD 3E         mov [d], bl
4602   21E9             ;; tok = BITWISE_NOT; 
4603   21E9 3B FE 32      mov d, _tok ; $tok
4604   21EC DA            push d
4605   21ED 26 19 00      mov b, 25; BITWISE_NOT
4606   21F0 E7            pop d
4607   21F1 FD 43         mov [d], b
4608   21F3             ;; toktype = DELIMITER;   
4609   21F3 3B 00 33      mov d, _toktype ; $toktype
4610   21F6 DA            push d
4611   21F7 26 01 00      mov b, 1; DELIMITER
4612   21FA E7            pop d
4613   21FB FD 43         mov [d], b
4614   21FD 0A 9A 29      jmp _if75_exit
4615   2200             _if75_else:
4616   2200             ;; if(*prog == '<'){ 
4617   2200             _if76_cond:
4618   2200 3B 02 33      mov d, _prog ; $prog
4619   2203 2A            mov b, [d]
4620   2204 74            mov d, b
4621   2205 32            mov bl, [d]
4622   2206 A7 00         mov bh, 0
4623   2208             ; START RELATIONAL
4624   2208 D7            push a
4625   2209 11            mov a, b
4626   220A 26 3C 00      mov b, $3c
4627   220D B0            cmp a, b
4628   220E FD 71         seq ; ==
4629   2210 E4            pop a
4630   2211             ; END RELATIONAL
4631   2211 C0 00 00      cmp b, 0
4632   2214 C6 E8 22      je _if76_else
4633   2217             _if76_true:
4634   2217             ;; *t++ = *prog++; 
4635   2217 FA FF FF      lea d, [bp + -1] ; $t
4636   221A 2A            mov b, [d]
4637   221B FD 79         mov g, b
4638   221D FD 77         inc b
4639   221F FA FF FF      lea d, [bp + -1] ; $t
4640   2222 FD 43         mov [d], b
4641   2224 FD 27         mov b, g
4642   2226 D8            push b
4643   2227 3B 02 33      mov d, _prog ; $prog
4644   222A 2A            mov b, [d]
4645   222B FD 79         mov g, b
4646   222D FD 77         inc b
4647   222F 3B 02 33      mov d, _prog ; $prog
4648   2232 FD 43         mov [d], b
4649   2234 FD 27         mov b, g
4650   2236 74            mov d, b
4651   2237 32            mov bl, [d]
4652   2238 A7 00         mov bh, 0
4653   223A E7            pop d
4654   223B FD 3E         mov [d], bl
4655   223D             ;; if (*prog == '='){ 
4656   223D             _if77_cond:
4657   223D 3B 02 33      mov d, _prog ; $prog
4658   2240 2A            mov b, [d]
4659   2241 74            mov d, b
4660   2242 32            mov bl, [d]
4661   2243 A7 00         mov bh, 0
4662   2245             ; START RELATIONAL
4663   2245 D7            push a
4664   2246 11            mov a, b
4665   2247 26 3D 00      mov b, $3d
4666   224A B0            cmp a, b
4667   224B FD 71         seq ; ==
4668   224D E4            pop a
4669   224E             ; END RELATIONAL
4670   224E C0 00 00      cmp b, 0
4671   2251 C6 87 22      je _if77_else
4672   2254             _if77_true:
4673   2254             ;; *t++ = *prog++; 
4674   2254 FA FF FF      lea d, [bp + -1] ; $t
4675   2257 2A            mov b, [d]
4676   2258 FD 79         mov g, b
4677   225A FD 77         inc b
4678   225C FA FF FF      lea d, [bp + -1] ; $t
4679   225F FD 43         mov [d], b
4680   2261 FD 27         mov b, g
4681   2263 D8            push b
4682   2264 3B 02 33      mov d, _prog ; $prog
4683   2267 2A            mov b, [d]
4684   2268 FD 79         mov g, b
4685   226A FD 77         inc b
4686   226C 3B 02 33      mov d, _prog ; $prog
4687   226F FD 43         mov [d], b
4688   2271 FD 27         mov b, g
4689   2273 74            mov d, b
4690   2274 32            mov bl, [d]
4691   2275 A7 00         mov bh, 0
4692   2277 E7            pop d
4693   2278 FD 3E         mov [d], bl
4694   227A             ;; tok = LESS_THAN_OR_EQUAL; 
4695   227A 3B FE 32      mov d, _tok ; $tok
4696   227D DA            push d
4697   227E 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL
4698   2281 E7            pop d
4699   2282 FD 43         mov [d], b
4700   2284 0A DB 22      jmp _if77_exit
4701   2287             _if77_else:
4702   2287             ;; if (*prog == '<'){ 
4703   2287             _if78_cond:
4704   2287 3B 02 33      mov d, _prog ; $prog
4705   228A 2A            mov b, [d]
4706   228B 74            mov d, b
4707   228C 32            mov bl, [d]
4708   228D A7 00         mov bh, 0
4709   228F             ; START RELATIONAL
4710   228F D7            push a
4711   2290 11            mov a, b
4712   2291 26 3C 00      mov b, $3c
4713   2294 B0            cmp a, b
4714   2295 FD 71         seq ; ==
4715   2297 E4            pop a
4716   2298             ; END RELATIONAL
4717   2298 C0 00 00      cmp b, 0
4718   229B C6 D1 22      je _if78_else
4719   229E             _if78_true:
4720   229E             ;; *t++ = *prog++; 
4721   229E FA FF FF      lea d, [bp + -1] ; $t
4722   22A1 2A            mov b, [d]
4723   22A2 FD 79         mov g, b
4724   22A4 FD 77         inc b
4725   22A6 FA FF FF      lea d, [bp + -1] ; $t
4726   22A9 FD 43         mov [d], b
4727   22AB FD 27         mov b, g
4728   22AD D8            push b
4729   22AE 3B 02 33      mov d, _prog ; $prog
4730   22B1 2A            mov b, [d]
4731   22B2 FD 79         mov g, b
4732   22B4 FD 77         inc b
4733   22B6 3B 02 33      mov d, _prog ; $prog
4734   22B9 FD 43         mov [d], b
4735   22BB FD 27         mov b, g
4736   22BD 74            mov d, b
4737   22BE 32            mov bl, [d]
4738   22BF A7 00         mov bh, 0
4739   22C1 E7            pop d
4740   22C2 FD 3E         mov [d], bl
4741   22C4             ;; tok = BITWISE_SHL; 
4742   22C4 3B FE 32      mov d, _tok ; $tok
4743   22C7 DA            push d
4744   22C8 26 1A 00      mov b, 26; BITWISE_SHL
4745   22CB E7            pop d
4746   22CC FD 43         mov [d], b
4747   22CE 0A DB 22      jmp _if78_exit
4748   22D1             _if78_else:
4749   22D1             ;; tok = LESS_THAN; 
4750   22D1 3B FE 32      mov d, _tok ; $tok
4751   22D4 DA            push d
4752   22D5 26 0A 00      mov b, 10; LESS_THAN
4753   22D8 E7            pop d
4754   22D9 FD 43         mov [d], b
4755   22DB             _if78_exit:
4756   22DB             _if77_exit:
4757   22DB             ;; toktype = DELIMITER;   
4758   22DB 3B 00 33      mov d, _toktype ; $toktype
4759   22DE DA            push d
4760   22DF 26 01 00      mov b, 1; DELIMITER
4761   22E2 E7            pop d
4762   22E3 FD 43         mov [d], b
4763   22E5 0A 9A 29      jmp _if76_exit
4764   22E8             _if76_else:
4765   22E8             ;; if(*prog == '>'){ 
4766   22E8             _if79_cond:
4767   22E8 3B 02 33      mov d, _prog ; $prog
4768   22EB 2A            mov b, [d]
4769   22EC 74            mov d, b
4770   22ED 32            mov bl, [d]
4771   22EE A7 00         mov bh, 0
4772   22F0             ; START RELATIONAL
4773   22F0 D7            push a
4774   22F1 11            mov a, b
4775   22F2 26 3E 00      mov b, $3e
4776   22F5 B0            cmp a, b
4777   22F6 FD 71         seq ; ==
4778   22F8 E4            pop a
4779   22F9             ; END RELATIONAL
4780   22F9 C0 00 00      cmp b, 0
4781   22FC C6 D0 23      je _if79_else
4782   22FF             _if79_true:
4783   22FF             ;; *t++ = *prog++; 
4784   22FF FA FF FF      lea d, [bp + -1] ; $t
4785   2302 2A            mov b, [d]
4786   2303 FD 79         mov g, b
4787   2305 FD 77         inc b
4788   2307 FA FF FF      lea d, [bp + -1] ; $t
4789   230A FD 43         mov [d], b
4790   230C FD 27         mov b, g
4791   230E D8            push b
4792   230F 3B 02 33      mov d, _prog ; $prog
4793   2312 2A            mov b, [d]
4794   2313 FD 79         mov g, b
4795   2315 FD 77         inc b
4796   2317 3B 02 33      mov d, _prog ; $prog
4797   231A FD 43         mov [d], b
4798   231C FD 27         mov b, g
4799   231E 74            mov d, b
4800   231F 32            mov bl, [d]
4801   2320 A7 00         mov bh, 0
4802   2322 E7            pop d
4803   2323 FD 3E         mov [d], bl
4804   2325             ;; if (*prog == '='){ 
4805   2325             _if80_cond:
4806   2325 3B 02 33      mov d, _prog ; $prog
4807   2328 2A            mov b, [d]
4808   2329 74            mov d, b
4809   232A 32            mov bl, [d]
4810   232B A7 00         mov bh, 0
4811   232D             ; START RELATIONAL
4812   232D D7            push a
4813   232E 11            mov a, b
4814   232F 26 3D 00      mov b, $3d
4815   2332 B0            cmp a, b
4816   2333 FD 71         seq ; ==
4817   2335 E4            pop a
4818   2336             ; END RELATIONAL
4819   2336 C0 00 00      cmp b, 0
4820   2339 C6 6F 23      je _if80_else
4821   233C             _if80_true:
4822   233C             ;; *t++ = *prog++; 
4823   233C FA FF FF      lea d, [bp + -1] ; $t
4824   233F 2A            mov b, [d]
4825   2340 FD 79         mov g, b
4826   2342 FD 77         inc b
4827   2344 FA FF FF      lea d, [bp + -1] ; $t
4828   2347 FD 43         mov [d], b
4829   2349 FD 27         mov b, g
4830   234B D8            push b
4831   234C 3B 02 33      mov d, _prog ; $prog
4832   234F 2A            mov b, [d]
4833   2350 FD 79         mov g, b
4834   2352 FD 77         inc b
4835   2354 3B 02 33      mov d, _prog ; $prog
4836   2357 FD 43         mov [d], b
4837   2359 FD 27         mov b, g
4838   235B 74            mov d, b
4839   235C 32            mov bl, [d]
4840   235D A7 00         mov bh, 0
4841   235F E7            pop d
4842   2360 FD 3E         mov [d], bl
4843   2362             ;; tok = GREATER_THAN_OR_EQUAL; 
4844   2362 3B FE 32      mov d, _tok ; $tok
4845   2365 DA            push d
4846   2366 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL
4847   2369 E7            pop d
4848   236A FD 43         mov [d], b
4849   236C 0A C3 23      jmp _if80_exit
4850   236F             _if80_else:
4851   236F             ;; if (*prog == '>'){ 
4852   236F             _if81_cond:
4853   236F 3B 02 33      mov d, _prog ; $prog
4854   2372 2A            mov b, [d]
4855   2373 74            mov d, b
4856   2374 32            mov bl, [d]
4857   2375 A7 00         mov bh, 0
4858   2377             ; START RELATIONAL
4859   2377 D7            push a
4860   2378 11            mov a, b
4861   2379 26 3E 00      mov b, $3e
4862   237C B0            cmp a, b
4863   237D FD 71         seq ; ==
4864   237F E4            pop a
4865   2380             ; END RELATIONAL
4866   2380 C0 00 00      cmp b, 0
4867   2383 C6 B9 23      je _if81_else
4868   2386             _if81_true:
4869   2386             ;; *t++ = *prog++; 
4870   2386 FA FF FF      lea d, [bp + -1] ; $t
4871   2389 2A            mov b, [d]
4872   238A FD 79         mov g, b
4873   238C FD 77         inc b
4874   238E FA FF FF      lea d, [bp + -1] ; $t
4875   2391 FD 43         mov [d], b
4876   2393 FD 27         mov b, g
4877   2395 D8            push b
4878   2396 3B 02 33      mov d, _prog ; $prog
4879   2399 2A            mov b, [d]
4880   239A FD 79         mov g, b
4881   239C FD 77         inc b
4882   239E 3B 02 33      mov d, _prog ; $prog
4883   23A1 FD 43         mov [d], b
4884   23A3 FD 27         mov b, g
4885   23A5 74            mov d, b
4886   23A6 32            mov bl, [d]
4887   23A7 A7 00         mov bh, 0
4888   23A9 E7            pop d
4889   23AA FD 3E         mov [d], bl
4890   23AC             ;; tok = BITWISE_SHR; 
4891   23AC 3B FE 32      mov d, _tok ; $tok
4892   23AF DA            push d
4893   23B0 26 1B 00      mov b, 27; BITWISE_SHR
4894   23B3 E7            pop d
4895   23B4 FD 43         mov [d], b
4896   23B6 0A C3 23      jmp _if81_exit
4897   23B9             _if81_else:
4898   23B9             ;; tok = GREATER_THAN; 
4899   23B9 3B FE 32      mov d, _tok ; $tok
4900   23BC DA            push d
4901   23BD 26 0C 00      mov b, 12; GREATER_THAN
4902   23C0 E7            pop d
4903   23C1 FD 43         mov [d], b
4904   23C3             _if81_exit:
4905   23C3             _if80_exit:
4906   23C3             ;; toktype = DELIMITER;   
4907   23C3 3B 00 33      mov d, _toktype ; $toktype
4908   23C6 DA            push d
4909   23C7 26 01 00      mov b, 1; DELIMITER
4910   23CA E7            pop d
4911   23CB FD 43         mov [d], b
4912   23CD 0A 9A 29      jmp _if79_exit
4913   23D0             _if79_else:
4914   23D0             ;; if(*prog == '!'){ 
4915   23D0             _if82_cond:
4916   23D0 3B 02 33      mov d, _prog ; $prog
4917   23D3 2A            mov b, [d]
4918   23D4 74            mov d, b
4919   23D5 32            mov bl, [d]
4920   23D6 A7 00         mov bh, 0
4921   23D8             ; START RELATIONAL
4922   23D8 D7            push a
4923   23D9 11            mov a, b
4924   23DA 26 21 00      mov b, $21
4925   23DD B0            cmp a, b
4926   23DE FD 71         seq ; ==
4927   23E0 E4            pop a
4928   23E1             ; END RELATIONAL
4929   23E1 C0 00 00      cmp b, 0
4930   23E4 C6 6E 24      je _if82_else
4931   23E7             _if82_true:
4932   23E7             ;; *t++ = *prog++; 
4933   23E7 FA FF FF      lea d, [bp + -1] ; $t
4934   23EA 2A            mov b, [d]
4935   23EB FD 79         mov g, b
4936   23ED FD 77         inc b
4937   23EF FA FF FF      lea d, [bp + -1] ; $t
4938   23F2 FD 43         mov [d], b
4939   23F4 FD 27         mov b, g
4940   23F6 D8            push b
4941   23F7 3B 02 33      mov d, _prog ; $prog
4942   23FA 2A            mov b, [d]
4943   23FB FD 79         mov g, b
4944   23FD FD 77         inc b
4945   23FF 3B 02 33      mov d, _prog ; $prog
4946   2402 FD 43         mov [d], b
4947   2404 FD 27         mov b, g
4948   2406 74            mov d, b
4949   2407 32            mov bl, [d]
4950   2408 A7 00         mov bh, 0
4951   240A E7            pop d
4952   240B FD 3E         mov [d], bl
4953   240D             ;; if(*prog == '='){ 
4954   240D             _if83_cond:
4955   240D 3B 02 33      mov d, _prog ; $prog
4956   2410 2A            mov b, [d]
4957   2411 74            mov d, b
4958   2412 32            mov bl, [d]
4959   2413 A7 00         mov bh, 0
4960   2415             ; START RELATIONAL
4961   2415 D7            push a
4962   2416 11            mov a, b
4963   2417 26 3D 00      mov b, $3d
4964   241A B0            cmp a, b
4965   241B FD 71         seq ; ==
4966   241D E4            pop a
4967   241E             ; END RELATIONAL
4968   241E C0 00 00      cmp b, 0
4969   2421 C6 57 24      je _if83_else
4970   2424             _if83_true:
4971   2424             ;; *t++ = *prog++; 
4972   2424 FA FF FF      lea d, [bp + -1] ; $t
4973   2427 2A            mov b, [d]
4974   2428 FD 79         mov g, b
4975   242A FD 77         inc b
4976   242C FA FF FF      lea d, [bp + -1] ; $t
4977   242F FD 43         mov [d], b
4978   2431 FD 27         mov b, g
4979   2433 D8            push b
4980   2434 3B 02 33      mov d, _prog ; $prog
4981   2437 2A            mov b, [d]
4982   2438 FD 79         mov g, b
4983   243A FD 77         inc b
4984   243C 3B 02 33      mov d, _prog ; $prog
4985   243F FD 43         mov [d], b
4986   2441 FD 27         mov b, g
4987   2443 74            mov d, b
4988   2444 32            mov bl, [d]
4989   2445 A7 00         mov bh, 0
4990   2447 E7            pop d
4991   2448 FD 3E         mov [d], bl
4992   244A             ;; tok = NOT_EQUAL; 
4993   244A 3B FE 32      mov d, _tok ; $tok
4994   244D DA            push d
4995   244E 26 09 00      mov b, 9; NOT_EQUAL
4996   2451 E7            pop d
4997   2452 FD 43         mov [d], b
4998   2454 0A 61 24      jmp _if83_exit
4999   2457             _if83_else:
5000   2457             ;; tok = LOGICAL_NOT; 
5001   2457 3B FE 32      mov d, _tok ; $tok
5002   245A DA            push d
5003   245B 26 10 00      mov b, 16; LOGICAL_NOT
5004   245E E7            pop d
5005   245F FD 43         mov [d], b
5006   2461             _if83_exit:
5007   2461             ;; toktype = DELIMITER;   
5008   2461 3B 00 33      mov d, _toktype ; $toktype
5009   2464 DA            push d
5010   2465 26 01 00      mov b, 1; DELIMITER
5011   2468 E7            pop d
5012   2469 FD 43         mov [d], b
5013   246B 0A 9A 29      jmp _if82_exit
5014   246E             _if82_else:
5015   246E             ;; if(*prog == '+'){ 
5016   246E             _if84_cond:
5017   246E 3B 02 33      mov d, _prog ; $prog
5018   2471 2A            mov b, [d]
5019   2472 74            mov d, b
5020   2473 32            mov bl, [d]
5021   2474 A7 00         mov bh, 0
5022   2476             ; START RELATIONAL
5023   2476 D7            push a
5024   2477 11            mov a, b
5025   2478 26 2B 00      mov b, $2b
5026   247B B0            cmp a, b
5027   247C FD 71         seq ; ==
5028   247E E4            pop a
5029   247F             ; END RELATIONAL
5030   247F C0 00 00      cmp b, 0
5031   2482 C6 0C 25      je _if84_else
5032   2485             _if84_true:
5033   2485             ;; *t++ = *prog++; 
5034   2485 FA FF FF      lea d, [bp + -1] ; $t
5035   2488 2A            mov b, [d]
5036   2489 FD 79         mov g, b
5037   248B FD 77         inc b
5038   248D FA FF FF      lea d, [bp + -1] ; $t
5039   2490 FD 43         mov [d], b
5040   2492 FD 27         mov b, g
5041   2494 D8            push b
5042   2495 3B 02 33      mov d, _prog ; $prog
5043   2498 2A            mov b, [d]
5044   2499 FD 79         mov g, b
5045   249B FD 77         inc b
5046   249D 3B 02 33      mov d, _prog ; $prog
5047   24A0 FD 43         mov [d], b
5048   24A2 FD 27         mov b, g
5049   24A4 74            mov d, b
5050   24A5 32            mov bl, [d]
5051   24A6 A7 00         mov bh, 0
5052   24A8 E7            pop d
5053   24A9 FD 3E         mov [d], bl
5054   24AB             ;; if(*prog == '+'){ 
5055   24AB             _if85_cond:
5056   24AB 3B 02 33      mov d, _prog ; $prog
5057   24AE 2A            mov b, [d]
5058   24AF 74            mov d, b
5059   24B0 32            mov bl, [d]
5060   24B1 A7 00         mov bh, 0
5061   24B3             ; START RELATIONAL
5062   24B3 D7            push a
5063   24B4 11            mov a, b
5064   24B5 26 2B 00      mov b, $2b
5065   24B8 B0            cmp a, b
5066   24B9 FD 71         seq ; ==
5067   24BB E4            pop a
5068   24BC             ; END RELATIONAL
5069   24BC C0 00 00      cmp b, 0
5070   24BF C6 F5 24      je _if85_else
5071   24C2             _if85_true:
5072   24C2             ;; *t++ = *prog++; 
5073   24C2 FA FF FF      lea d, [bp + -1] ; $t
5074   24C5 2A            mov b, [d]
5075   24C6 FD 79         mov g, b
5076   24C8 FD 77         inc b
5077   24CA FA FF FF      lea d, [bp + -1] ; $t
5078   24CD FD 43         mov [d], b
5079   24CF FD 27         mov b, g
5080   24D1 D8            push b
5081   24D2 3B 02 33      mov d, _prog ; $prog
5082   24D5 2A            mov b, [d]
5083   24D6 FD 79         mov g, b
5084   24D8 FD 77         inc b
5085   24DA 3B 02 33      mov d, _prog ; $prog
5086   24DD FD 43         mov [d], b
5087   24DF FD 27         mov b, g
5088   24E1 74            mov d, b
5089   24E2 32            mov bl, [d]
5090   24E3 A7 00         mov bh, 0
5091   24E5 E7            pop d
5092   24E6 FD 3E         mov [d], bl
5093   24E8             ;; tok = INCREMENT; 
5094   24E8 3B FE 32      mov d, _tok ; $tok
5095   24EB DA            push d
5096   24EC 26 05 00      mov b, 5; INCREMENT
5097   24EF E7            pop d
5098   24F0 FD 43         mov [d], b
5099   24F2 0A FF 24      jmp _if85_exit
5100   24F5             _if85_else:
5101   24F5             ;; tok = PLUS; 
5102   24F5 3B FE 32      mov d, _tok ; $tok
5103   24F8 DA            push d
5104   24F9 26 01 00      mov b, 1; PLUS
5105   24FC E7            pop d
5106   24FD FD 43         mov [d], b
5107   24FF             _if85_exit:
5108   24FF             ;; toktype = DELIMITER;   
5109   24FF 3B 00 33      mov d, _toktype ; $toktype
5110   2502 DA            push d
5111   2503 26 01 00      mov b, 1; DELIMITER
5112   2506 E7            pop d
5113   2507 FD 43         mov [d], b
5114   2509 0A 9A 29      jmp _if84_exit
5115   250C             _if84_else:
5116   250C             ;; if(*prog == '-'){ 
5117   250C             _if86_cond:
5118   250C 3B 02 33      mov d, _prog ; $prog
5119   250F 2A            mov b, [d]
5120   2510 74            mov d, b
5121   2511 32            mov bl, [d]
5122   2512 A7 00         mov bh, 0
5123   2514             ; START RELATIONAL
5124   2514 D7            push a
5125   2515 11            mov a, b
5126   2516 26 2D 00      mov b, $2d
5127   2519 B0            cmp a, b
5128   251A FD 71         seq ; ==
5129   251C E4            pop a
5130   251D             ; END RELATIONAL
5131   251D C0 00 00      cmp b, 0
5132   2520 C6 AA 25      je _if86_else
5133   2523             _if86_true:
5134   2523             ;; *t++ = *prog++; 
5135   2523 FA FF FF      lea d, [bp + -1] ; $t
5136   2526 2A            mov b, [d]
5137   2527 FD 79         mov g, b
5138   2529 FD 77         inc b
5139   252B FA FF FF      lea d, [bp + -1] ; $t
5140   252E FD 43         mov [d], b
5141   2530 FD 27         mov b, g
5142   2532 D8            push b
5143   2533 3B 02 33      mov d, _prog ; $prog
5144   2536 2A            mov b, [d]
5145   2537 FD 79         mov g, b
5146   2539 FD 77         inc b
5147   253B 3B 02 33      mov d, _prog ; $prog
5148   253E FD 43         mov [d], b
5149   2540 FD 27         mov b, g
5150   2542 74            mov d, b
5151   2543 32            mov bl, [d]
5152   2544 A7 00         mov bh, 0
5153   2546 E7            pop d
5154   2547 FD 3E         mov [d], bl
5155   2549             ;; if(*prog == '-'){ 
5156   2549             _if87_cond:
5157   2549 3B 02 33      mov d, _prog ; $prog
5158   254C 2A            mov b, [d]
5159   254D 74            mov d, b
5160   254E 32            mov bl, [d]
5161   254F A7 00         mov bh, 0
5162   2551             ; START RELATIONAL
5163   2551 D7            push a
5164   2552 11            mov a, b
5165   2553 26 2D 00      mov b, $2d
5166   2556 B0            cmp a, b
5167   2557 FD 71         seq ; ==
5168   2559 E4            pop a
5169   255A             ; END RELATIONAL
5170   255A C0 00 00      cmp b, 0
5171   255D C6 93 25      je _if87_else
5172   2560             _if87_true:
5173   2560             ;; *t++ = *prog++; 
5174   2560 FA FF FF      lea d, [bp + -1] ; $t
5175   2563 2A            mov b, [d]
5176   2564 FD 79         mov g, b
5177   2566 FD 77         inc b
5178   2568 FA FF FF      lea d, [bp + -1] ; $t
5179   256B FD 43         mov [d], b
5180   256D FD 27         mov b, g
5181   256F D8            push b
5182   2570 3B 02 33      mov d, _prog ; $prog
5183   2573 2A            mov b, [d]
5184   2574 FD 79         mov g, b
5185   2576 FD 77         inc b
5186   2578 3B 02 33      mov d, _prog ; $prog
5187   257B FD 43         mov [d], b
5188   257D FD 27         mov b, g
5189   257F 74            mov d, b
5190   2580 32            mov bl, [d]
5191   2581 A7 00         mov bh, 0
5192   2583 E7            pop d
5193   2584 FD 3E         mov [d], bl
5194   2586             ;; tok = DECREMENT; 
5195   2586 3B FE 32      mov d, _tok ; $tok
5196   2589 DA            push d
5197   258A 26 06 00      mov b, 6; DECREMENT
5198   258D E7            pop d
5199   258E FD 43         mov [d], b
5200   2590 0A 9D 25      jmp _if87_exit
5201   2593             _if87_else:
5202   2593             ;; tok = MINUS; 
5203   2593 3B FE 32      mov d, _tok ; $tok
5204   2596 DA            push d
5205   2597 26 02 00      mov b, 2; MINUS
5206   259A E7            pop d
5207   259B FD 43         mov [d], b
5208   259D             _if87_exit:
5209   259D             ;; toktype = DELIMITER;   
5210   259D 3B 00 33      mov d, _toktype ; $toktype
5211   25A0 DA            push d
5212   25A1 26 01 00      mov b, 1; DELIMITER
5213   25A4 E7            pop d
5214   25A5 FD 43         mov [d], b
5215   25A7 0A 9A 29      jmp _if86_exit
5216   25AA             _if86_else:
5217   25AA             ;; if(*prog == '$'){ 
5218   25AA             _if88_cond:
5219   25AA 3B 02 33      mov d, _prog ; $prog
5220   25AD 2A            mov b, [d]
5221   25AE 74            mov d, b
5222   25AF 32            mov bl, [d]
5223   25B0 A7 00         mov bh, 0
5224   25B2             ; START RELATIONAL
5225   25B2 D7            push a
5226   25B3 11            mov a, b
5227   25B4 26 24 00      mov b, $24
5228   25B7 B0            cmp a, b
5229   25B8 FD 71         seq ; ==
5230   25BA E4            pop a
5231   25BB             ; END RELATIONAL
5232   25BB C0 00 00      cmp b, 0
5233   25BE C6 FE 25      je _if88_else
5234   25C1             _if88_true:
5235   25C1             ;; *t++ = *prog++; 
5236   25C1 FA FF FF      lea d, [bp + -1] ; $t
5237   25C4 2A            mov b, [d]
5238   25C5 FD 79         mov g, b
5239   25C7 FD 77         inc b
5240   25C9 FA FF FF      lea d, [bp + -1] ; $t
5241   25CC FD 43         mov [d], b
5242   25CE FD 27         mov b, g
5243   25D0 D8            push b
5244   25D1 3B 02 33      mov d, _prog ; $prog
5245   25D4 2A            mov b, [d]
5246   25D5 FD 79         mov g, b
5247   25D7 FD 77         inc b
5248   25D9 3B 02 33      mov d, _prog ; $prog
5249   25DC FD 43         mov [d], b
5250   25DE FD 27         mov b, g
5251   25E0 74            mov d, b
5252   25E1 32            mov bl, [d]
5253   25E2 A7 00         mov bh, 0
5254   25E4 E7            pop d
5255   25E5 FD 3E         mov [d], bl
5256   25E7             ;; tok = DOLLAR; 
5257   25E7 3B FE 32      mov d, _tok ; $tok
5258   25EA DA            push d
5259   25EB 26 12 00      mov b, 18; DOLLAR
5260   25EE E7            pop d
5261   25EF FD 43         mov [d], b
5262   25F1             ;; toktype = DELIMITER;   
5263   25F1 3B 00 33      mov d, _toktype ; $toktype
5264   25F4 DA            push d
5265   25F5 26 01 00      mov b, 1; DELIMITER
5266   25F8 E7            pop d
5267   25F9 FD 43         mov [d], b
5268   25FB 0A 9A 29      jmp _if88_exit
5269   25FE             _if88_else:
5270   25FE             ;; if(*prog == '^'){ 
5271   25FE             _if89_cond:
5272   25FE 3B 02 33      mov d, _prog ; $prog
5273   2601 2A            mov b, [d]
5274   2602 74            mov d, b
5275   2603 32            mov bl, [d]
5276   2604 A7 00         mov bh, 0
5277   2606             ; START RELATIONAL
5278   2606 D7            push a
5279   2607 11            mov a, b
5280   2608 26 5E 00      mov b, $5e
5281   260B B0            cmp a, b
5282   260C FD 71         seq ; ==
5283   260E E4            pop a
5284   260F             ; END RELATIONAL
5285   260F C0 00 00      cmp b, 0
5286   2612 C6 52 26      je _if89_else
5287   2615             _if89_true:
5288   2615             ;; *t++ = *prog++; 
5289   2615 FA FF FF      lea d, [bp + -1] ; $t
5290   2618 2A            mov b, [d]
5291   2619 FD 79         mov g, b
5292   261B FD 77         inc b
5293   261D FA FF FF      lea d, [bp + -1] ; $t
5294   2620 FD 43         mov [d], b
5295   2622 FD 27         mov b, g
5296   2624 D8            push b
5297   2625 3B 02 33      mov d, _prog ; $prog
5298   2628 2A            mov b, [d]
5299   2629 FD 79         mov g, b
5300   262B FD 77         inc b
5301   262D 3B 02 33      mov d, _prog ; $prog
5302   2630 FD 43         mov [d], b
5303   2632 FD 27         mov b, g
5304   2634 74            mov d, b
5305   2635 32            mov bl, [d]
5306   2636 A7 00         mov bh, 0
5307   2638 E7            pop d
5308   2639 FD 3E         mov [d], bl
5309   263B             ;; tok = BITWISE_XOR; 
5310   263B 3B FE 32      mov d, _tok ; $tok
5311   263E DA            push d
5312   263F 26 17 00      mov b, 23; BITWISE_XOR
5313   2642 E7            pop d
5314   2643 FD 43         mov [d], b
5315   2645             ;; toktype = DELIMITER;   
5316   2645 3B 00 33      mov d, _toktype ; $toktype
5317   2648 DA            push d
5318   2649 26 01 00      mov b, 1; DELIMITER
5319   264C E7            pop d
5320   264D FD 43         mov [d], b
5321   264F 0A 9A 29      jmp _if89_exit
5322   2652             _if89_else:
5323   2652             ;; if(*prog == '@'){ 
5324   2652             _if90_cond:
5325   2652 3B 02 33      mov d, _prog ; $prog
5326   2655 2A            mov b, [d]
5327   2656 74            mov d, b
5328   2657 32            mov bl, [d]
5329   2658 A7 00         mov bh, 0
5330   265A             ; START RELATIONAL
5331   265A D7            push a
5332   265B 11            mov a, b
5333   265C 26 40 00      mov b, $40
5334   265F B0            cmp a, b
5335   2660 FD 71         seq ; ==
5336   2662 E4            pop a
5337   2663             ; END RELATIONAL
5338   2663 C0 00 00      cmp b, 0
5339   2666 C6 A6 26      je _if90_else
5340   2669             _if90_true:
5341   2669             ;; *t++ = *prog++; 
5342   2669 FA FF FF      lea d, [bp + -1] ; $t
5343   266C 2A            mov b, [d]
5344   266D FD 79         mov g, b
5345   266F FD 77         inc b
5346   2671 FA FF FF      lea d, [bp + -1] ; $t
5347   2674 FD 43         mov [d], b
5348   2676 FD 27         mov b, g
5349   2678 D8            push b
5350   2679 3B 02 33      mov d, _prog ; $prog
5351   267C 2A            mov b, [d]
5352   267D FD 79         mov g, b
5353   267F FD 77         inc b
5354   2681 3B 02 33      mov d, _prog ; $prog
5355   2684 FD 43         mov [d], b
5356   2686 FD 27         mov b, g
5357   2688 74            mov d, b
5358   2689 32            mov bl, [d]
5359   268A A7 00         mov bh, 0
5360   268C E7            pop d
5361   268D FD 3E         mov [d], bl
5362   268F             ;; tok = AT; 
5363   268F 3B FE 32      mov d, _tok ; $tok
5364   2692 DA            push d
5365   2693 26 14 00      mov b, 20; AT
5366   2696 E7            pop d
5367   2697 FD 43         mov [d], b
5368   2699             ;; toktype = DELIMITER;   
5369   2699 3B 00 33      mov d, _toktype ; $toktype
5370   269C DA            push d
5371   269D 26 01 00      mov b, 1; DELIMITER
5372   26A0 E7            pop d
5373   26A1 FD 43         mov [d], b
5374   26A3 0A 9A 29      jmp _if90_exit
5375   26A6             _if90_else:
5376   26A6             ;; if(*prog == '*'){ 
5377   26A6             _if91_cond:
5378   26A6 3B 02 33      mov d, _prog ; $prog
5379   26A9 2A            mov b, [d]
5380   26AA 74            mov d, b
5381   26AB 32            mov bl, [d]
5382   26AC A7 00         mov bh, 0
5383   26AE             ; START RELATIONAL
5384   26AE D7            push a
5385   26AF 11            mov a, b
5386   26B0 26 2A 00      mov b, $2a
5387   26B3 B0            cmp a, b
5388   26B4 FD 71         seq ; ==
5389   26B6 E4            pop a
5390   26B7             ; END RELATIONAL
5391   26B7 C0 00 00      cmp b, 0
5392   26BA C6 FA 26      je _if91_else
5393   26BD             _if91_true:
5394   26BD             ;; *t++ = *prog++; 
5395   26BD FA FF FF      lea d, [bp + -1] ; $t
5396   26C0 2A            mov b, [d]
5397   26C1 FD 79         mov g, b
5398   26C3 FD 77         inc b
5399   26C5 FA FF FF      lea d, [bp + -1] ; $t
5400   26C8 FD 43         mov [d], b
5401   26CA FD 27         mov b, g
5402   26CC D8            push b
5403   26CD 3B 02 33      mov d, _prog ; $prog
5404   26D0 2A            mov b, [d]
5405   26D1 FD 79         mov g, b
5406   26D3 FD 77         inc b
5407   26D5 3B 02 33      mov d, _prog ; $prog
5408   26D8 FD 43         mov [d], b
5409   26DA FD 27         mov b, g
5410   26DC 74            mov d, b
5411   26DD 32            mov bl, [d]
5412   26DE A7 00         mov bh, 0
5413   26E0 E7            pop d
5414   26E1 FD 3E         mov [d], bl
5415   26E3             ;; tok = STAR; 
5416   26E3 3B FE 32      mov d, _tok ; $tok
5417   26E6 DA            push d
5418   26E7 26 03 00      mov b, 3; STAR
5419   26EA E7            pop d
5420   26EB FD 43         mov [d], b
5421   26ED             ;; toktype = DELIMITER;   
5422   26ED 3B 00 33      mov d, _toktype ; $toktype
5423   26F0 DA            push d
5424   26F1 26 01 00      mov b, 1; DELIMITER
5425   26F4 E7            pop d
5426   26F5 FD 43         mov [d], b
5427   26F7 0A 9A 29      jmp _if91_exit
5428   26FA             _if91_else:
5429   26FA             ;; if(*prog == '/'){ 
5430   26FA             _if92_cond:
5431   26FA 3B 02 33      mov d, _prog ; $prog
5432   26FD 2A            mov b, [d]
5433   26FE 74            mov d, b
5434   26FF 32            mov bl, [d]
5435   2700 A7 00         mov bh, 0
5436   2702             ; START RELATIONAL
5437   2702 D7            push a
5438   2703 11            mov a, b
5439   2704 26 2F 00      mov b, $2f
5440   2707 B0            cmp a, b
5441   2708 FD 71         seq ; ==
5442   270A E4            pop a
5443   270B             ; END RELATIONAL
5444   270B C0 00 00      cmp b, 0
5445   270E C6 4E 27      je _if92_else
5446   2711             _if92_true:
5447   2711             ;; *t++ = *prog++; 
5448   2711 FA FF FF      lea d, [bp + -1] ; $t
5449   2714 2A            mov b, [d]
5450   2715 FD 79         mov g, b
5451   2717 FD 77         inc b
5452   2719 FA FF FF      lea d, [bp + -1] ; $t
5453   271C FD 43         mov [d], b
5454   271E FD 27         mov b, g
5455   2720 D8            push b
5456   2721 3B 02 33      mov d, _prog ; $prog
5457   2724 2A            mov b, [d]
5458   2725 FD 79         mov g, b
5459   2727 FD 77         inc b
5460   2729 3B 02 33      mov d, _prog ; $prog
5461   272C FD 43         mov [d], b
5462   272E FD 27         mov b, g
5463   2730 74            mov d, b
5464   2731 32            mov bl, [d]
5465   2732 A7 00         mov bh, 0
5466   2734 E7            pop d
5467   2735 FD 3E         mov [d], bl
5468   2737             ;; tok = FSLASH; 
5469   2737 3B FE 32      mov d, _tok ; $tok
5470   273A DA            push d
5471   273B 26 04 00      mov b, 4; FSLASH
5472   273E E7            pop d
5473   273F FD 43         mov [d], b
5474   2741             ;; toktype = DELIMITER;   
5475   2741 3B 00 33      mov d, _toktype ; $toktype
5476   2744 DA            push d
5477   2745 26 01 00      mov b, 1; DELIMITER
5478   2748 E7            pop d
5479   2749 FD 43         mov [d], b
5480   274B 0A 9A 29      jmp _if92_exit
5481   274E             _if92_else:
5482   274E             ;; if(*prog == '%'){ 
5483   274E             _if93_cond:
5484   274E 3B 02 33      mov d, _prog ; $prog
5485   2751 2A            mov b, [d]
5486   2752 74            mov d, b
5487   2753 32            mov bl, [d]
5488   2754 A7 00         mov bh, 0
5489   2756             ; START RELATIONAL
5490   2756 D7            push a
5491   2757 11            mov a, b
5492   2758 26 25 00      mov b, $25
5493   275B B0            cmp a, b
5494   275C FD 71         seq ; ==
5495   275E E4            pop a
5496   275F             ; END RELATIONAL
5497   275F C0 00 00      cmp b, 0
5498   2762 C6 A2 27      je _if93_else
5499   2765             _if93_true:
5500   2765             ;; *t++ = *prog++; 
5501   2765 FA FF FF      lea d, [bp + -1] ; $t
5502   2768 2A            mov b, [d]
5503   2769 FD 79         mov g, b
5504   276B FD 77         inc b
5505   276D FA FF FF      lea d, [bp + -1] ; $t
5506   2770 FD 43         mov [d], b
5507   2772 FD 27         mov b, g
5508   2774 D8            push b
5509   2775 3B 02 33      mov d, _prog ; $prog
5510   2778 2A            mov b, [d]
5511   2779 FD 79         mov g, b
5512   277B FD 77         inc b
5513   277D 3B 02 33      mov d, _prog ; $prog
5514   2780 FD 43         mov [d], b
5515   2782 FD 27         mov b, g
5516   2784 74            mov d, b
5517   2785 32            mov bl, [d]
5518   2786 A7 00         mov bh, 0
5519   2788 E7            pop d
5520   2789 FD 3E         mov [d], bl
5521   278B             ;; tok = MOD; 
5522   278B 3B FE 32      mov d, _tok ; $tok
5523   278E DA            push d
5524   278F 26 07 00      mov b, 7; MOD
5525   2792 E7            pop d
5526   2793 FD 43         mov [d], b
5527   2795             ;; toktype = DELIMITER;   
5528   2795 3B 00 33      mov d, _toktype ; $toktype
5529   2798 DA            push d
5530   2799 26 01 00      mov b, 1; DELIMITER
5531   279C E7            pop d
5532   279D FD 43         mov [d], b
5533   279F 0A 9A 29      jmp _if93_exit
5534   27A2             _if93_else:
5535   27A2             ;; if(*prog == '('){ 
5536   27A2             _if94_cond:
5537   27A2 3B 02 33      mov d, _prog ; $prog
5538   27A5 2A            mov b, [d]
5539   27A6 74            mov d, b
5540   27A7 32            mov bl, [d]
5541   27A8 A7 00         mov bh, 0
5542   27AA             ; START RELATIONAL
5543   27AA D7            push a
5544   27AB 11            mov a, b
5545   27AC 26 28 00      mov b, $28
5546   27AF B0            cmp a, b
5547   27B0 FD 71         seq ; ==
5548   27B2 E4            pop a
5549   27B3             ; END RELATIONAL
5550   27B3 C0 00 00      cmp b, 0
5551   27B6 C6 F6 27      je _if94_else
5552   27B9             _if94_true:
5553   27B9             ;; *t++ = *prog++; 
5554   27B9 FA FF FF      lea d, [bp + -1] ; $t
5555   27BC 2A            mov b, [d]
5556   27BD FD 79         mov g, b
5557   27BF FD 77         inc b
5558   27C1 FA FF FF      lea d, [bp + -1] ; $t
5559   27C4 FD 43         mov [d], b
5560   27C6 FD 27         mov b, g
5561   27C8 D8            push b
5562   27C9 3B 02 33      mov d, _prog ; $prog
5563   27CC 2A            mov b, [d]
5564   27CD FD 79         mov g, b
5565   27CF FD 77         inc b
5566   27D1 3B 02 33      mov d, _prog ; $prog
5567   27D4 FD 43         mov [d], b
5568   27D6 FD 27         mov b, g
5569   27D8 74            mov d, b
5570   27D9 32            mov bl, [d]
5571   27DA A7 00         mov bh, 0
5572   27DC E7            pop d
5573   27DD FD 3E         mov [d], bl
5574   27DF             ;; tok = OPENING_PAREN; 
5575   27DF 3B FE 32      mov d, _tok ; $tok
5576   27E2 DA            push d
5577   27E3 26 1C 00      mov b, 28; OPENING_PAREN
5578   27E6 E7            pop d
5579   27E7 FD 43         mov [d], b
5580   27E9             ;; toktype = DELIMITER;   
5581   27E9 3B 00 33      mov d, _toktype ; $toktype
5582   27EC DA            push d
5583   27ED 26 01 00      mov b, 1; DELIMITER
5584   27F0 E7            pop d
5585   27F1 FD 43         mov [d], b
5586   27F3 0A 9A 29      jmp _if94_exit
5587   27F6             _if94_else:
5588   27F6             ;; if(*prog == ')'){ 
5589   27F6             _if95_cond:
5590   27F6 3B 02 33      mov d, _prog ; $prog
5591   27F9 2A            mov b, [d]
5592   27FA 74            mov d, b
5593   27FB 32            mov bl, [d]
5594   27FC A7 00         mov bh, 0
5595   27FE             ; START RELATIONAL
5596   27FE D7            push a
5597   27FF 11            mov a, b
5598   2800 26 29 00      mov b, $29
5599   2803 B0            cmp a, b
5600   2804 FD 71         seq ; ==
5601   2806 E4            pop a
5602   2807             ; END RELATIONAL
5603   2807 C0 00 00      cmp b, 0
5604   280A C6 4A 28      je _if95_else
5605   280D             _if95_true:
5606   280D             ;; *t++ = *prog++; 
5607   280D FA FF FF      lea d, [bp + -1] ; $t
5608   2810 2A            mov b, [d]
5609   2811 FD 79         mov g, b
5610   2813 FD 77         inc b
5611   2815 FA FF FF      lea d, [bp + -1] ; $t
5612   2818 FD 43         mov [d], b
5613   281A FD 27         mov b, g
5614   281C D8            push b
5615   281D 3B 02 33      mov d, _prog ; $prog
5616   2820 2A            mov b, [d]
5617   2821 FD 79         mov g, b
5618   2823 FD 77         inc b
5619   2825 3B 02 33      mov d, _prog ; $prog
5620   2828 FD 43         mov [d], b
5621   282A FD 27         mov b, g
5622   282C 74            mov d, b
5623   282D 32            mov bl, [d]
5624   282E A7 00         mov bh, 0
5625   2830 E7            pop d
5626   2831 FD 3E         mov [d], bl
5627   2833             ;; tok = CLOSING_PAREN; 
5628   2833 3B FE 32      mov d, _tok ; $tok
5629   2836 DA            push d
5630   2837 26 1D 00      mov b, 29; CLOSING_PAREN
5631   283A E7            pop d
5632   283B FD 43         mov [d], b
5633   283D             ;; toktype = DELIMITER;   
5634   283D 3B 00 33      mov d, _toktype ; $toktype
5635   2840 DA            push d
5636   2841 26 01 00      mov b, 1; DELIMITER
5637   2844 E7            pop d
5638   2845 FD 43         mov [d], b
5639   2847 0A 9A 29      jmp _if95_exit
5640   284A             _if95_else:
5641   284A             ;; if(*prog == ';'){ 
5642   284A             _if96_cond:
5643   284A 3B 02 33      mov d, _prog ; $prog
5644   284D 2A            mov b, [d]
5645   284E 74            mov d, b
5646   284F 32            mov bl, [d]
5647   2850 A7 00         mov bh, 0
5648   2852             ; START RELATIONAL
5649   2852 D7            push a
5650   2853 11            mov a, b
5651   2854 26 3B 00      mov b, $3b
5652   2857 B0            cmp a, b
5653   2858 FD 71         seq ; ==
5654   285A E4            pop a
5655   285B             ; END RELATIONAL
5656   285B C0 00 00      cmp b, 0
5657   285E C6 9E 28      je _if96_else
5658   2861             _if96_true:
5659   2861             ;; *t++ = *prog++; 
5660   2861 FA FF FF      lea d, [bp + -1] ; $t
5661   2864 2A            mov b, [d]
5662   2865 FD 79         mov g, b
5663   2867 FD 77         inc b
5664   2869 FA FF FF      lea d, [bp + -1] ; $t
5665   286C FD 43         mov [d], b
5666   286E FD 27         mov b, g
5667   2870 D8            push b
5668   2871 3B 02 33      mov d, _prog ; $prog
5669   2874 2A            mov b, [d]
5670   2875 FD 79         mov g, b
5671   2877 FD 77         inc b
5672   2879 3B 02 33      mov d, _prog ; $prog
5673   287C FD 43         mov [d], b
5674   287E FD 27         mov b, g
5675   2880 74            mov d, b
5676   2881 32            mov bl, [d]
5677   2882 A7 00         mov bh, 0
5678   2884 E7            pop d
5679   2885 FD 3E         mov [d], bl
5680   2887             ;; tok = SEMICOLON; 
5681   2887 3B FE 32      mov d, _tok ; $tok
5682   288A DA            push d
5683   288B 26 23 00      mov b, 35; SEMICOLON
5684   288E E7            pop d
5685   288F FD 43         mov [d], b
5686   2891             ;; toktype = DELIMITER;   
5687   2891 3B 00 33      mov d, _toktype ; $toktype
5688   2894 DA            push d
5689   2895 26 01 00      mov b, 1; DELIMITER
5690   2898 E7            pop d
5691   2899 FD 43         mov [d], b
5692   289B 0A 9A 29      jmp _if96_exit
5693   289E             _if96_else:
5694   289E             ;; if(*prog == ':'){ 
5695   289E             _if97_cond:
5696   289E 3B 02 33      mov d, _prog ; $prog
5697   28A1 2A            mov b, [d]
5698   28A2 74            mov d, b
5699   28A3 32            mov bl, [d]
5700   28A4 A7 00         mov bh, 0
5701   28A6             ; START RELATIONAL
5702   28A6 D7            push a
5703   28A7 11            mov a, b
5704   28A8 26 3A 00      mov b, $3a
5705   28AB B0            cmp a, b
5706   28AC FD 71         seq ; ==
5707   28AE E4            pop a
5708   28AF             ; END RELATIONAL
5709   28AF C0 00 00      cmp b, 0
5710   28B2 C6 F2 28      je _if97_else
5711   28B5             _if97_true:
5712   28B5             ;; *t++ = *prog++; 
5713   28B5 FA FF FF      lea d, [bp + -1] ; $t
5714   28B8 2A            mov b, [d]
5715   28B9 FD 79         mov g, b
5716   28BB FD 77         inc b
5717   28BD FA FF FF      lea d, [bp + -1] ; $t
5718   28C0 FD 43         mov [d], b
5719   28C2 FD 27         mov b, g
5720   28C4 D8            push b
5721   28C5 3B 02 33      mov d, _prog ; $prog
5722   28C8 2A            mov b, [d]
5723   28C9 FD 79         mov g, b
5724   28CB FD 77         inc b
5725   28CD 3B 02 33      mov d, _prog ; $prog
5726   28D0 FD 43         mov [d], b
5727   28D2 FD 27         mov b, g
5728   28D4 74            mov d, b
5729   28D5 32            mov bl, [d]
5730   28D6 A7 00         mov bh, 0
5731   28D8 E7            pop d
5732   28D9 FD 3E         mov [d], bl
5733   28DB             ;; tok = COLON; 
5734   28DB 3B FE 32      mov d, _tok ; $tok
5735   28DE DA            push d
5736   28DF 26 22 00      mov b, 34; COLON
5737   28E2 E7            pop d
5738   28E3 FD 43         mov [d], b
5739   28E5             ;; toktype = DELIMITER;   
5740   28E5 3B 00 33      mov d, _toktype ; $toktype
5741   28E8 DA            push d
5742   28E9 26 01 00      mov b, 1; DELIMITER
5743   28EC E7            pop d
5744   28ED FD 43         mov [d], b
5745   28EF 0A 9A 29      jmp _if97_exit
5746   28F2             _if97_else:
5747   28F2             ;; if(*prog == ','){ 
5748   28F2             _if98_cond:
5749   28F2 3B 02 33      mov d, _prog ; $prog
5750   28F5 2A            mov b, [d]
5751   28F6 74            mov d, b
5752   28F7 32            mov bl, [d]
5753   28F8 A7 00         mov bh, 0
5754   28FA             ; START RELATIONAL
5755   28FA D7            push a
5756   28FB 11            mov a, b
5757   28FC 26 2C 00      mov b, $2c
5758   28FF B0            cmp a, b
5759   2900 FD 71         seq ; ==
5760   2902 E4            pop a
5761   2903             ; END RELATIONAL
5762   2903 C0 00 00      cmp b, 0
5763   2906 C6 46 29      je _if98_else
5764   2909             _if98_true:
5765   2909             ;; *t++ = *prog++; 
5766   2909 FA FF FF      lea d, [bp + -1] ; $t
5767   290C 2A            mov b, [d]
5768   290D FD 79         mov g, b
5769   290F FD 77         inc b
5770   2911 FA FF FF      lea d, [bp + -1] ; $t
5771   2914 FD 43         mov [d], b
5772   2916 FD 27         mov b, g
5773   2918 D8            push b
5774   2919 3B 02 33      mov d, _prog ; $prog
5775   291C 2A            mov b, [d]
5776   291D FD 79         mov g, b
5777   291F FD 77         inc b
5778   2921 3B 02 33      mov d, _prog ; $prog
5779   2924 FD 43         mov [d], b
5780   2926 FD 27         mov b, g
5781   2928 74            mov d, b
5782   2929 32            mov bl, [d]
5783   292A A7 00         mov bh, 0
5784   292C E7            pop d
5785   292D FD 3E         mov [d], bl
5786   292F             ;; tok = COMMA; 
5787   292F 3B FE 32      mov d, _tok ; $tok
5788   2932 DA            push d
5789   2933 26 24 00      mov b, 36; COMMA
5790   2936 E7            pop d
5791   2937 FD 43         mov [d], b
5792   2939             ;; toktype = DELIMITER;   
5793   2939 3B 00 33      mov d, _toktype ; $toktype
5794   293C DA            push d
5795   293D 26 01 00      mov b, 1; DELIMITER
5796   2940 E7            pop d
5797   2941 FD 43         mov [d], b
5798   2943 0A 9A 29      jmp _if98_exit
5799   2946             _if98_else:
5800   2946             ;; if(*prog == '.'){ 
5801   2946             _if99_cond:
5802   2946 3B 02 33      mov d, _prog ; $prog
5803   2949 2A            mov b, [d]
5804   294A 74            mov d, b
5805   294B 32            mov bl, [d]
5806   294C A7 00         mov bh, 0
5807   294E             ; START RELATIONAL
5808   294E D7            push a
5809   294F 11            mov a, b
5810   2950 26 2E 00      mov b, $2e
5811   2953 B0            cmp a, b
5812   2954 FD 71         seq ; ==
5813   2956 E4            pop a
5814   2957             ; END RELATIONAL
5815   2957 C0 00 00      cmp b, 0
5816   295A C6 9A 29      je _if99_exit
5817   295D             _if99_true:
5818   295D             ;; *t++ = *prog++; 
5819   295D FA FF FF      lea d, [bp + -1] ; $t
5820   2960 2A            mov b, [d]
5821   2961 FD 79         mov g, b
5822   2963 FD 77         inc b
5823   2965 FA FF FF      lea d, [bp + -1] ; $t
5824   2968 FD 43         mov [d], b
5825   296A FD 27         mov b, g
5826   296C D8            push b
5827   296D 3B 02 33      mov d, _prog ; $prog
5828   2970 2A            mov b, [d]
5829   2971 FD 79         mov g, b
5830   2973 FD 77         inc b
5831   2975 3B 02 33      mov d, _prog ; $prog
5832   2978 FD 43         mov [d], b
5833   297A FD 27         mov b, g
5834   297C 74            mov d, b
5835   297D 32            mov bl, [d]
5836   297E A7 00         mov bh, 0
5837   2980 E7            pop d
5838   2981 FD 3E         mov [d], bl
5839   2983             ;; tok = DOT; 
5840   2983 3B FE 32      mov d, _tok ; $tok
5841   2986 DA            push d
5842   2987 26 25 00      mov b, 37; DOT
5843   298A E7            pop d
5844   298B FD 43         mov [d], b
5845   298D             ;; toktype = DELIMITER;   
5846   298D 3B 00 33      mov d, _toktype ; $toktype
5847   2990 DA            push d
5848   2991 26 01 00      mov b, 1; DELIMITER
5849   2994 E7            pop d
5850   2995 FD 43         mov [d], b
5851   2997 0A 9A 29      jmp _if99_exit
5852   299A             _if99_exit:
5853   299A             _if98_exit:
5854   299A             _if97_exit:
5855   299A             _if96_exit:
5856   299A             _if95_exit:
5857   299A             _if94_exit:
5858   299A             _if93_exit:
5859   299A             _if92_exit:
5860   299A             _if91_exit:
5861   299A             _if90_exit:
5862   299A             _if89_exit:
5863   299A             _if88_exit:
5864   299A             _if86_exit:
5865   299A             _if84_exit:
5866   299A             _if82_exit:
5867   299A             _if79_exit:
5868   299A             _if76_exit:
5869   299A             _if75_exit:
5870   299A             _if73_exit:
5871   299A             _if71_exit:
5872   299A             _if69_exit:
5873   299A             _if68_exit:
5874   299A             _if67_exit:
5875   299A             _if66_exit:
5876   299A             _if65_exit:
5877   299A             _if64_exit:
5878   299A             _if61_exit:
5879   299A             _if59_exit:
5880   299A             _if57_exit:
5881   299A             ;; *t = '\0'; 
5882   299A FA FF FF      lea d, [bp + -1] ; $t
5883   299D 2A            mov b, [d]
5884   299E D8            push b
5885   299F 26 00 00      mov b, $0
5886   29A2 E7            pop d
5887   29A3 FD 3E         mov [d], bl
5888   29A5 F9            leave
5889   29A6 09            ret
5890   29A7             
5891   29A7             convert_constant:
5892   29A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5893   29AA             ; $s 
5894   29AA             ; $t 
5895   29AA 52 04 00      sub sp, 4
5896   29AD             ;; t = token; 
5897   29AD FA FD FF      lea d, [bp + -3] ; $t
5898   29B0 DA            push d
5899   29B1 3B 04 33      mov d, _token_data ; $token
5900   29B4 2D            mov b, d
5901   29B5 E7            pop d
5902   29B6 FD 43         mov [d], b
5903   29B8             ;; s = string_const; 
5904   29B8 FA FF FF      lea d, [bp + -1] ; $s
5905   29BB DA            push d
5906   29BC 3B 04 34      mov d, _string_const_data ; $string_const
5907   29BF 2D            mov b, d
5908   29C0 E7            pop d
5909   29C1 FD 43         mov [d], b
5910   29C3             ;; if(toktype == CHAR_CONST){ 
5911   29C3             _if100_cond:
5912   29C3 3B 00 33      mov d, _toktype ; $toktype
5913   29C6 2A            mov b, [d]
5914   29C7             ; START RELATIONAL
5915   29C7 D7            push a
5916   29C8 11            mov a, b
5917   29C9 26 02 00      mov b, 2; CHAR_CONST
5918   29CC B0            cmp a, b
5919   29CD FD 71         seq ; ==
5920   29CF E4            pop a
5921   29D0             ; END RELATIONAL
5922   29D0 C0 00 00      cmp b, 0
5923   29D3 C6 7E 2B      je _if100_else
5924   29D6             _if100_true:
5925   29D6             ;; t++; 
5926   29D6 FA FD FF      lea d, [bp + -3] ; $t
5927   29D9 2A            mov b, [d]
5928   29DA FD 79         mov g, b
5929   29DC FD 77         inc b
5930   29DE FA FD FF      lea d, [bp + -3] ; $t
5931   29E1 FD 43         mov [d], b
5932   29E3 FD 27         mov b, g
5933   29E5             ;; if(*t == '\\'){ 
5934   29E5             _if101_cond:
5935   29E5 FA FD FF      lea d, [bp + -3] ; $t
5936   29E8 2A            mov b, [d]
5937   29E9 74            mov d, b
5938   29EA 32            mov bl, [d]
5939   29EB A7 00         mov bh, 0
5940   29ED             ; START RELATIONAL
5941   29ED D7            push a
5942   29EE 11            mov a, b
5943   29EF 26 5C 00      mov b, $5c
5944   29F2 B0            cmp a, b
5945   29F3 FD 71         seq ; ==
5946   29F5 E4            pop a
5947   29F6             ; END RELATIONAL
5948   29F6 C0 00 00      cmp b, 0
5949   29F9 C6 60 2B      je _if101_else
5950   29FC             _if101_true:
5951   29FC             ;; t++; 
5952   29FC FA FD FF      lea d, [bp + -3] ; $t
5953   29FF 2A            mov b, [d]
5954   2A00 FD 79         mov g, b
5955   2A02 FD 77         inc b
5956   2A04 FA FD FF      lea d, [bp + -3] ; $t
5957   2A07 FD 43         mov [d], b
5958   2A09 FD 27         mov b, g
5959   2A0B             ;; switch(*t){ 
5960   2A0B             _switch102_expr:
5961   2A0B FA FD FF      lea d, [bp + -3] ; $t
5962   2A0E 2A            mov b, [d]
5963   2A0F 74            mov d, b
5964   2A10 32            mov bl, [d]
5965   2A11 A7 00         mov bh, 0
5966   2A13             _switch102_comparisons:
5967   2A13 C1 30         cmp bl, $30
5968   2A15 C6 4D 2A      je _switch102_case0
5969   2A18 C1 61         cmp bl, $61
5970   2A1A C6 66 2A      je _switch102_case1
5971   2A1D C1 62         cmp bl, $62
5972   2A1F C6 7F 2A      je _switch102_case2
5973   2A22 C1 66         cmp bl, $66
5974   2A24 C6 98 2A      je _switch102_case3
5975   2A27 C1 6E         cmp bl, $6e
5976   2A29 C6 B1 2A      je _switch102_case4
5977   2A2C C1 72         cmp bl, $72
5978   2A2E C6 CA 2A      je _switch102_case5
5979   2A31 C1 74         cmp bl, $74
5980   2A33 C6 E3 2A      je _switch102_case6
5981   2A36 C1 76         cmp bl, $76
5982   2A38 C6 FC 2A      je _switch102_case7
5983   2A3B C1 5C         cmp bl, $5c
5984   2A3D C6 15 2B      je _switch102_case8
5985   2A40 C1 27         cmp bl, $27
5986   2A42 C6 2E 2B      je _switch102_case9
5987   2A45 C1 22         cmp bl, $22
5988   2A47 C6 47 2B      je _switch102_case10
5989   2A4A 0A 5D 2B      jmp _switch102_exit
5990   2A4D             _switch102_case0:
5991   2A4D             ;; *s++ = '\0'; 
5992   2A4D FA FF FF      lea d, [bp + -1] ; $s
5993   2A50 2A            mov b, [d]
5994   2A51 FD 79         mov g, b
5995   2A53 FD 77         inc b
5996   2A55 FA FF FF      lea d, [bp + -1] ; $s
5997   2A58 FD 43         mov [d], b
5998   2A5A FD 27         mov b, g
5999   2A5C D8            push b
6000   2A5D 26 00 00      mov b, $0
6001   2A60 E7            pop d
6002   2A61 FD 3E         mov [d], bl
6003   2A63             ;; break; 
6004   2A63 0A 5D 2B      jmp _switch102_exit ; case break
6005   2A66             _switch102_case1:
6006   2A66             ;; *s++ = '\a'; 
6007   2A66 FA FF FF      lea d, [bp + -1] ; $s
6008   2A69 2A            mov b, [d]
6009   2A6A FD 79         mov g, b
6010   2A6C FD 77         inc b
6011   2A6E FA FF FF      lea d, [bp + -1] ; $s
6012   2A71 FD 43         mov [d], b
6013   2A73 FD 27         mov b, g
6014   2A75 D8            push b
6015   2A76 26 07 00      mov b, $7
6016   2A79 E7            pop d
6017   2A7A FD 3E         mov [d], bl
6018   2A7C             ;; break; 
6019   2A7C 0A 5D 2B      jmp _switch102_exit ; case break
6020   2A7F             _switch102_case2:
6021   2A7F             ;; *s++ = '\b'; 
6022   2A7F FA FF FF      lea d, [bp + -1] ; $s
6023   2A82 2A            mov b, [d]
6024   2A83 FD 79         mov g, b
6025   2A85 FD 77         inc b
6026   2A87 FA FF FF      lea d, [bp + -1] ; $s
6027   2A8A FD 43         mov [d], b
6028   2A8C FD 27         mov b, g
6029   2A8E D8            push b
6030   2A8F 26 08 00      mov b, $8
6031   2A92 E7            pop d
6032   2A93 FD 3E         mov [d], bl
6033   2A95             ;; break;   
6034   2A95 0A 5D 2B      jmp _switch102_exit ; case break
6035   2A98             _switch102_case3:
6036   2A98             ;; *s++ = '\f'; 
6037   2A98 FA FF FF      lea d, [bp + -1] ; $s
6038   2A9B 2A            mov b, [d]
6039   2A9C FD 79         mov g, b
6040   2A9E FD 77         inc b
6041   2AA0 FA FF FF      lea d, [bp + -1] ; $s
6042   2AA3 FD 43         mov [d], b
6043   2AA5 FD 27         mov b, g
6044   2AA7 D8            push b
6045   2AA8 26 0C 00      mov b, $c
6046   2AAB E7            pop d
6047   2AAC FD 3E         mov [d], bl
6048   2AAE             ;; break; 
6049   2AAE 0A 5D 2B      jmp _switch102_exit ; case break
6050   2AB1             _switch102_case4:
6051   2AB1             ;; *s++ = '\n'; 
6052   2AB1 FA FF FF      lea d, [bp + -1] ; $s
6053   2AB4 2A            mov b, [d]
6054   2AB5 FD 79         mov g, b
6055   2AB7 FD 77         inc b
6056   2AB9 FA FF FF      lea d, [bp + -1] ; $s
6057   2ABC FD 43         mov [d], b
6058   2ABE FD 27         mov b, g
6059   2AC0 D8            push b
6060   2AC1 26 0A 00      mov b, $a
6061   2AC4 E7            pop d
6062   2AC5 FD 3E         mov [d], bl
6063   2AC7             ;; break; 
6064   2AC7 0A 5D 2B      jmp _switch102_exit ; case break
6065   2ACA             _switch102_case5:
6066   2ACA             ;; *s++ = '\r'; 
6067   2ACA FA FF FF      lea d, [bp + -1] ; $s
6068   2ACD 2A            mov b, [d]
6069   2ACE FD 79         mov g, b
6070   2AD0 FD 77         inc b
6071   2AD2 FA FF FF      lea d, [bp + -1] ; $s
6072   2AD5 FD 43         mov [d], b
6073   2AD7 FD 27         mov b, g
6074   2AD9 D8            push b
6075   2ADA 26 0D 00      mov b, $d
6076   2ADD E7            pop d
6077   2ADE FD 3E         mov [d], bl
6078   2AE0             ;; break; 
6079   2AE0 0A 5D 2B      jmp _switch102_exit ; case break
6080   2AE3             _switch102_case6:
6081   2AE3             ;; *s++ = '\t'; 
6082   2AE3 FA FF FF      lea d, [bp + -1] ; $s
6083   2AE6 2A            mov b, [d]
6084   2AE7 FD 79         mov g, b
6085   2AE9 FD 77         inc b
6086   2AEB FA FF FF      lea d, [bp + -1] ; $s
6087   2AEE FD 43         mov [d], b
6088   2AF0 FD 27         mov b, g
6089   2AF2 D8            push b
6090   2AF3 26 09 00      mov b, $9
6091   2AF6 E7            pop d
6092   2AF7 FD 3E         mov [d], bl
6093   2AF9             ;; break; 
6094   2AF9 0A 5D 2B      jmp _switch102_exit ; case break
6095   2AFC             _switch102_case7:
6096   2AFC             ;; *s++ = '\v'; 
6097   2AFC FA FF FF      lea d, [bp + -1] ; $s
6098   2AFF 2A            mov b, [d]
6099   2B00 FD 79         mov g, b
6100   2B02 FD 77         inc b
6101   2B04 FA FF FF      lea d, [bp + -1] ; $s
6102   2B07 FD 43         mov [d], b
6103   2B09 FD 27         mov b, g
6104   2B0B D8            push b
6105   2B0C 26 0B 00      mov b, $b
6106   2B0F E7            pop d
6107   2B10 FD 3E         mov [d], bl
6108   2B12             ;; break; 
6109   2B12 0A 5D 2B      jmp _switch102_exit ; case break
6110   2B15             _switch102_case8:
6111   2B15             ;; *s++ = '\\'; 
6112   2B15 FA FF FF      lea d, [bp + -1] ; $s
6113   2B18 2A            mov b, [d]
6114   2B19 FD 79         mov g, b
6115   2B1B FD 77         inc b
6116   2B1D FA FF FF      lea d, [bp + -1] ; $s
6117   2B20 FD 43         mov [d], b
6118   2B22 FD 27         mov b, g
6119   2B24 D8            push b
6120   2B25 26 5C 00      mov b, $5c
6121   2B28 E7            pop d
6122   2B29 FD 3E         mov [d], bl
6123   2B2B             ;; break; 
6124   2B2B 0A 5D 2B      jmp _switch102_exit ; case break
6125   2B2E             _switch102_case9:
6126   2B2E             ;; *s++ = '\''; 
6127   2B2E FA FF FF      lea d, [bp + -1] ; $s
6128   2B31 2A            mov b, [d]
6129   2B32 FD 79         mov g, b
6130   2B34 FD 77         inc b
6131   2B36 FA FF FF      lea d, [bp + -1] ; $s
6132   2B39 FD 43         mov [d], b
6133   2B3B FD 27         mov b, g
6134   2B3D D8            push b
6135   2B3E 26 27 00      mov b, $27
6136   2B41 E7            pop d
6137   2B42 FD 3E         mov [d], bl
6138   2B44             ;; break; 
6139   2B44 0A 5D 2B      jmp _switch102_exit ; case break
6140   2B47             _switch102_case10:
6141   2B47             ;; *s++ = '\"'; 
6142   2B47 FA FF FF      lea d, [bp + -1] ; $s
6143   2B4A 2A            mov b, [d]
6144   2B4B FD 79         mov g, b
6145   2B4D FD 77         inc b
6146   2B4F FA FF FF      lea d, [bp + -1] ; $s
6147   2B52 FD 43         mov [d], b
6148   2B54 FD 27         mov b, g
6149   2B56 D8            push b
6150   2B57 26 22 00      mov b, $22
6151   2B5A E7            pop d
6152   2B5B FD 3E         mov [d], bl
6153   2B5D             _switch102_exit:
6154   2B5D 0A 7B 2B      jmp _if101_exit
6155   2B60             _if101_else:
6156   2B60             ;; *s++ = *t; 
6157   2B60 FA FF FF      lea d, [bp + -1] ; $s
6158   2B63 2A            mov b, [d]
6159   2B64 FD 79         mov g, b
6160   2B66 FD 77         inc b
6161   2B68 FA FF FF      lea d, [bp + -1] ; $s
6162   2B6B FD 43         mov [d], b
6163   2B6D FD 27         mov b, g
6164   2B6F D8            push b
6165   2B70 FA FD FF      lea d, [bp + -3] ; $t
6166   2B73 2A            mov b, [d]
6167   2B74 74            mov d, b
6168   2B75 32            mov bl, [d]
6169   2B76 A7 00         mov bh, 0
6170   2B78 E7            pop d
6171   2B79 FD 3E         mov [d], bl
6172   2B7B             _if101_exit:
6173   2B7B 0A F0 2B      jmp _if100_exit
6174   2B7E             _if100_else:
6175   2B7E             ;; if(toktype == STRING_CONST){ 
6176   2B7E             _if103_cond:
6177   2B7E 3B 00 33      mov d, _toktype ; $toktype
6178   2B81 2A            mov b, [d]
6179   2B82             ; START RELATIONAL
6180   2B82 D7            push a
6181   2B83 11            mov a, b
6182   2B84 26 03 00      mov b, 3; STRING_CONST
6183   2B87 B0            cmp a, b
6184   2B88 FD 71         seq ; ==
6185   2B8A E4            pop a
6186   2B8B             ; END RELATIONAL
6187   2B8B C0 00 00      cmp b, 0
6188   2B8E C6 F0 2B      je _if103_exit
6189   2B91             _if103_true:
6190   2B91             ;; t++; 
6191   2B91 FA FD FF      lea d, [bp + -3] ; $t
6192   2B94 2A            mov b, [d]
6193   2B95 FD 79         mov g, b
6194   2B97 FD 77         inc b
6195   2B99 FA FD FF      lea d, [bp + -3] ; $t
6196   2B9C FD 43         mov [d], b
6197   2B9E FD 27         mov b, g
6198   2BA0             ;; while(*t != '\"' && *t){ 
6199   2BA0             _while104_cond:
6200   2BA0 FA FD FF      lea d, [bp + -3] ; $t
6201   2BA3 2A            mov b, [d]
6202   2BA4 74            mov d, b
6203   2BA5 32            mov bl, [d]
6204   2BA6 A7 00         mov bh, 0
6205   2BA8             ; START RELATIONAL
6206   2BA8 D7            push a
6207   2BA9 11            mov a, b
6208   2BAA 26 22 00      mov b, $22
6209   2BAD B0            cmp a, b
6210   2BAE FD 72         sneq ; !=
6211   2BB0 E4            pop a
6212   2BB1             ; END RELATIONAL
6213   2BB1 D7            push a
6214   2BB2 11            mov a, b
6215   2BB3 FA FD FF      lea d, [bp + -3] ; $t
6216   2BB6 2A            mov b, [d]
6217   2BB7 74            mov d, b
6218   2BB8 32            mov bl, [d]
6219   2BB9 A7 00         mov bh, 0
6220   2BBB FD A7         sand a, b ; &&
6221   2BBD E4            pop a
6222   2BBE C0 00 00      cmp b, 0
6223   2BC1 C6 ED 2B      je _while104_exit
6224   2BC4             _while104_block:
6225   2BC4             ;; *s++ = *t++; 
6226   2BC4 FA FF FF      lea d, [bp + -1] ; $s
6227   2BC7 2A            mov b, [d]
6228   2BC8 FD 79         mov g, b
6229   2BCA FD 77         inc b
6230   2BCC FA FF FF      lea d, [bp + -1] ; $s
6231   2BCF FD 43         mov [d], b
6232   2BD1 FD 27         mov b, g
6233   2BD3 D8            push b
6234   2BD4 FA FD FF      lea d, [bp + -3] ; $t
6235   2BD7 2A            mov b, [d]
6236   2BD8 FD 79         mov g, b
6237   2BDA FD 77         inc b
6238   2BDC FA FD FF      lea d, [bp + -3] ; $t
6239   2BDF FD 43         mov [d], b
6240   2BE1 FD 27         mov b, g
6241   2BE3 74            mov d, b
6242   2BE4 32            mov bl, [d]
6243   2BE5 A7 00         mov bh, 0
6244   2BE7 E7            pop d
6245   2BE8 FD 3E         mov [d], bl
6246   2BEA 0A A0 2B      jmp _while104_cond
6247   2BED             _while104_exit:
6248   2BED 0A F0 2B      jmp _if103_exit
6249   2BF0             _if103_exit:
6250   2BF0             _if100_exit:
6251   2BF0             ;; *s = '\0'; 
6252   2BF0 FA FF FF      lea d, [bp + -1] ; $s
6253   2BF3 2A            mov b, [d]
6254   2BF4 D8            push b
6255   2BF5 26 00 00      mov b, $0
6256   2BF8 E7            pop d
6257   2BF9 FD 3E         mov [d], bl
6258   2BFB F9            leave
6259   2BFC 09            ret
6260   2BFD             
6261   2BFD             error:
6262   2BFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
6263   2C00             ;; printf("\nError: "); 
6264   2C00 26 58 3C      mov b, __s15 ; "\nError: "
6265   2C03 FD AB         swp b
6266   2C05 D8            push b
6267   2C06 07 4F 0F      call printf
6268   2C09 51 02 00      add sp, 2
6269   2C0C             ;; printf(msg); 
6270   2C0C FA 05 00      lea d, [bp + 5] ; $msg
6271   2C0F 2A            mov b, [d]
6272   2C10 FD AB         swp b
6273   2C12 D8            push b
6274   2C13 07 4F 0F      call printf
6275   2C16 51 02 00      add sp, 2
6276   2C19             ;; printf("\n"); 
6277   2C19 26 61 3C      mov b, __s16 ; "\n"
6278   2C1C FD AB         swp b
6279   2C1E D8            push b
6280   2C1F 07 4F 0F      call printf
6281   2C22 51 02 00      add sp, 2
6282   2C25 F9            leave
6283   2C26 09            ret
6284   2C27             
6285   2C27             last_cmd_insert:
6286   2C27 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6287   2C2A             ;; if(last_cmd[0]){ 
6288   2C2A             _if105_cond:
6289   2C2A 3B 06 3A      mov d, _last_cmd_data ; $last_cmd
6290   2C2D D7            push a
6291   2C2E DA            push d
6292   2C2F 26 00 00      mov b, $0
6293   2C32 E7            pop d
6294   2C33 5A            add d, b
6295   2C34 E4            pop a
6296   2C35 32            mov bl, [d]
6297   2C36 A7 00         mov bh, 0
6298   2C38 C0 00 00      cmp b, 0
6299   2C3B C6 62 2C      je _if105_exit
6300   2C3E             _if105_true:
6301   2C3E             ;; strcpy(command, last_cmd); 
6302   2C3E 3B 06 35      mov d, _command_data ; $command
6303   2C41 2D            mov b, d
6304   2C42 FD AB         swp b
6305   2C44 D8            push b
6306   2C45 3B 06 3A      mov d, _last_cmd_data ; $last_cmd
6307   2C48 2D            mov b, d
6308   2C49 FD AB         swp b
6309   2C4B D8            push b
6310   2C4C 07 FA 0C      call strcpy
6311   2C4F 51 04 00      add sp, 4
6312   2C52             ;; printf(command); 
6313   2C52 3B 06 35      mov d, _command_data ; $command
6314   2C55 2D            mov b, d
6315   2C56 FD AB         swp b
6316   2C58 D8            push b
6317   2C59 07 4F 0F      call printf
6318   2C5C 51 02 00      add sp, 2
6319   2C5F 0A 62 2C      jmp _if105_exit
6320   2C62             _if105_exit:
6321   2C62 F9            leave
6322   2C63 09            ret
6323   2C64             
6324   2C64             set_string_var:
6325   2C64 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6326   2C67             ; $i 
6327   2C67 52 02 00      sub sp, 2
6328   2C6A             ;; for(i = 0; i < vars_tos; i++){ 
6329   2C6A             _for106_init:
6330   2C6A FA FF FF      lea d, [bp + -1] ; $i
6331   2C6D DA            push d
6332   2C6E 26 00 00      mov b, $0
6333   2C71 E7            pop d
6334   2C72 FD 43         mov [d], b
6335   2C74             _for106_cond:
6336   2C74 FA FF FF      lea d, [bp + -1] ; $i
6337   2C77 2A            mov b, [d]
6338   2C78             ; START RELATIONAL
6339   2C78 D7            push a
6340   2C79 11            mov a, b
6341   2C7A 3B 58 3B      mov d, _vars_tos ; $vars_tos
6342   2C7D 2A            mov b, [d]
6343   2C7E B0            cmp a, b
6344   2C7F FD 73         slt ; < 
6345   2C81 E4            pop a
6346   2C82             ; END RELATIONAL
6347   2C82 C0 00 00      cmp b, 0
6348   2C85 C6 F8 2C      je _for106_exit
6349   2C88             _for106_block:
6350   2C88             ;; if(!strcmp(variables[i].varname, varname)){ 
6351   2C88             _if107_cond:
6352   2C88 3B 86 3A      mov d, _variables_data ; $variables
6353   2C8B D7            push a
6354   2C8C DA            push d
6355   2C8D FA FF FF      lea d, [bp + -1] ; $i
6356   2C90 2A            mov b, [d]
6357   2C91 E7            pop d
6358   2C92 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6359   2C96 E4            pop a
6360   2C97 58 00 00      add d, 0
6361   2C9A FD 14         clb
6362   2C9C 2D            mov b, d
6363   2C9D FD AB         swp b
6364   2C9F D8            push b
6365   2CA0 FA 07 00      lea d, [bp + 7] ; $varname
6366   2CA3 2A            mov b, [d]
6367   2CA4 FD AB         swp b
6368   2CA6 D8            push b
6369   2CA7 07 5A 0D      call strcmp
6370   2CAA 51 04 00      add sp, 4
6371   2CAD C0 00 00      cmp b, 0
6372   2CB0 FD 71         seq ; !
6373   2CB2 C0 00 00      cmp b, 0
6374   2CB5 C6 E6 2C      je _if107_exit
6375   2CB8             _if107_true:
6376   2CB8             ;; strcpy(variables[vars_tos].as_string, strval); 
6377   2CB8 3B 86 3A      mov d, _variables_data ; $variables
6378   2CBB D7            push a
6379   2CBC DA            push d
6380   2CBD 3B 58 3B      mov d, _vars_tos ; $vars_tos
6381   2CC0 2A            mov b, [d]
6382   2CC1 E7            pop d
6383   2CC2 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6384   2CC6 E4            pop a
6385   2CC7 58 11 00      add d, 17
6386   2CCA FD 14         clb
6387   2CCC 2A            mov b, [d]
6388   2CCD FD AB         swp b
6389   2CCF D8            push b
6390   2CD0 FA 05 00      lea d, [bp + 5] ; $strval
6391   2CD3 2A            mov b, [d]
6392   2CD4 FD AB         swp b
6393   2CD6 D8            push b
6394   2CD7 07 FA 0C      call strcpy
6395   2CDA 51 04 00      add sp, 4
6396   2CDD             ;; return i; 
6397   2CDD FA FF FF      lea d, [bp + -1] ; $i
6398   2CE0 2A            mov b, [d]
6399   2CE1 F9            leave
6400   2CE2 09            ret
6401   2CE3 0A E6 2C      jmp _if107_exit
6402   2CE6             _if107_exit:
6403   2CE6             _for106_update:
6404   2CE6 FA FF FF      lea d, [bp + -1] ; $i
6405   2CE9 2A            mov b, [d]
6406   2CEA FD 79         mov g, b
6407   2CEC FD 77         inc b
6408   2CEE FA FF FF      lea d, [bp + -1] ; $i
6409   2CF1 FD 43         mov [d], b
6410   2CF3 FD 27         mov b, g
6411   2CF5 0A 74 2C      jmp _for106_cond
6412   2CF8             _for106_exit:
6413   2CF8             ;; variables[vars_tos].var_type = SHELL_VAR_TYP_STR; 
6414   2CF8 3B 86 3A      mov d, _variables_data ; $variables
6415   2CFB D7            push a
6416   2CFC DA            push d
6417   2CFD 3B 58 3B      mov d, _vars_tos ; $vars_tos
6418   2D00 2A            mov b, [d]
6419   2D01 E7            pop d
6420   2D02 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6421   2D06 E4            pop a
6422   2D07 58 10 00      add d, 16
6423   2D0A FD 14         clb
6424   2D0C DA            push d
6425   2D0D 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
6426   2D10 E7            pop d
6427   2D11 FD 3E         mov [d], bl
6428   2D13             ;; variables[vars_tos].as_string = alloc(strlen(strval) + 1); 
6429   2D13 3B 86 3A      mov d, _variables_data ; $variables
6430   2D16 D7            push a
6431   2D17 DA            push d
6432   2D18 3B 58 3B      mov d, _vars_tos ; $vars_tos
6433   2D1B 2A            mov b, [d]
6434   2D1C E7            pop d
6435   2D1D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6436   2D21 E4            pop a
6437   2D22 58 11 00      add d, 17
6438   2D25 FD 14         clb
6439   2D27 DA            push d
6440   2D28 FA 05 00      lea d, [bp + 5] ; $strval
6441   2D2B 2A            mov b, [d]
6442   2D2C FD AB         swp b
6443   2D2E D8            push b
6444   2D2F 07 74 0E      call strlen
6445   2D32 51 02 00      add sp, 2
6446   2D35             ; START TERMS
6447   2D35 D7            push a
6448   2D36 11            mov a, b
6449   2D37 26 01 00      mov b, $1
6450   2D3A 54            add a, b
6451   2D3B 27            mov b, a
6452   2D3C E4            pop a
6453   2D3D             ; END TERMS
6454   2D3D FD AB         swp b
6455   2D3F D8            push b
6456   2D40 07 C4 15      call alloc
6457   2D43 51 02 00      add sp, 2
6458   2D46 E7            pop d
6459   2D47 FD 43         mov [d], b
6460   2D49             ;; strcpy(variables[vars_tos].varname, varname); 
6461   2D49 3B 86 3A      mov d, _variables_data ; $variables
6462   2D4C D7            push a
6463   2D4D DA            push d
6464   2D4E 3B 58 3B      mov d, _vars_tos ; $vars_tos
6465   2D51 2A            mov b, [d]
6466   2D52 E7            pop d
6467   2D53 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6468   2D57 E4            pop a
6469   2D58 58 00 00      add d, 0
6470   2D5B FD 14         clb
6471   2D5D 2D            mov b, d
6472   2D5E FD AB         swp b
6473   2D60 D8            push b
6474   2D61 FA 07 00      lea d, [bp + 7] ; $varname
6475   2D64 2A            mov b, [d]
6476   2D65 FD AB         swp b
6477   2D67 D8            push b
6478   2D68 07 FA 0C      call strcpy
6479   2D6B 51 04 00      add sp, 4
6480   2D6E             ;; strcpy(variables[vars_tos].as_string, strval); 
6481   2D6E 3B 86 3A      mov d, _variables_data ; $variables
6482   2D71 D7            push a
6483   2D72 DA            push d
6484   2D73 3B 58 3B      mov d, _vars_tos ; $vars_tos
6485   2D76 2A            mov b, [d]
6486   2D77 E7            pop d
6487   2D78 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6488   2D7C E4            pop a
6489   2D7D 58 11 00      add d, 17
6490   2D80 FD 14         clb
6491   2D82 2A            mov b, [d]
6492   2D83 FD AB         swp b
6493   2D85 D8            push b
6494   2D86 FA 05 00      lea d, [bp + 5] ; $strval
6495   2D89 2A            mov b, [d]
6496   2D8A FD AB         swp b
6497   2D8C D8            push b
6498   2D8D 07 FA 0C      call strcpy
6499   2D90 51 04 00      add sp, 4
6500   2D93             ;; vars_tos++; 
6501   2D93 3B 58 3B      mov d, _vars_tos ; $vars_tos
6502   2D96 2A            mov b, [d]
6503   2D97 FD 79         mov g, b
6504   2D99 FD 77         inc b
6505   2D9B 3B 58 3B      mov d, _vars_tos ; $vars_tos
6506   2D9E FD 43         mov [d], b
6507   2DA0 FD 27         mov b, g
6508   2DA2             ;; return vars_tos - 1; 
6509   2DA2 3B 58 3B      mov d, _vars_tos ; $vars_tos
6510   2DA5 2A            mov b, [d]
6511   2DA6             ; START TERMS
6512   2DA6 D7            push a
6513   2DA7 11            mov a, b
6514   2DA8 26 01 00      mov b, $1
6515   2DAB 60            sub a, b
6516   2DAC 27            mov b, a
6517   2DAD E4            pop a
6518   2DAE             ; END TERMS
6519   2DAE F9            leave
6520   2DAF 09            ret
6521   2DB0             
6522   2DB0             set_int_var:
6523   2DB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6524   2DB3             ; $i 
6525   2DB3 52 02 00      sub sp, 2
6526   2DB6             ;; for(i = 0; i < vars_tos; i++){ 
6527   2DB6             _for108_init:
6528   2DB6 FA FF FF      lea d, [bp + -1] ; $i
6529   2DB9 DA            push d
6530   2DBA 26 00 00      mov b, $0
6531   2DBD E7            pop d
6532   2DBE FD 43         mov [d], b
6533   2DC0             _for108_cond:
6534   2DC0 FA FF FF      lea d, [bp + -1] ; $i
6535   2DC3 2A            mov b, [d]
6536   2DC4             ; START RELATIONAL
6537   2DC4 D7            push a
6538   2DC5 11            mov a, b
6539   2DC6 3B 58 3B      mov d, _vars_tos ; $vars_tos
6540   2DC9 2A            mov b, [d]
6541   2DCA B0            cmp a, b
6542   2DCB FD 73         slt ; < 
6543   2DCD E4            pop a
6544   2DCE             ; END RELATIONAL
6545   2DCE C0 00 00      cmp b, 0
6546   2DD1 C6 3B 2E      je _for108_exit
6547   2DD4             _for108_block:
6548   2DD4             ;; if(!strcmp(variables[i].varname, varname)){ 
6549   2DD4             _if109_cond:
6550   2DD4 3B 86 3A      mov d, _variables_data ; $variables
6551   2DD7 D7            push a
6552   2DD8 DA            push d
6553   2DD9 FA FF FF      lea d, [bp + -1] ; $i
6554   2DDC 2A            mov b, [d]
6555   2DDD E7            pop d
6556   2DDE FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6557   2DE2 E4            pop a
6558   2DE3 58 00 00      add d, 0
6559   2DE6 FD 14         clb
6560   2DE8 2D            mov b, d
6561   2DE9 FD AB         swp b
6562   2DEB D8            push b
6563   2DEC FA 07 00      lea d, [bp + 7] ; $varname
6564   2DEF 2A            mov b, [d]
6565   2DF0 FD AB         swp b
6566   2DF2 D8            push b
6567   2DF3 07 5A 0D      call strcmp
6568   2DF6 51 04 00      add sp, 4
6569   2DF9 C0 00 00      cmp b, 0
6570   2DFC FD 71         seq ; !
6571   2DFE C0 00 00      cmp b, 0
6572   2E01 C6 29 2E      je _if109_exit
6573   2E04             _if109_true:
6574   2E04             ;; variables[vars_tos].as_int = as_int; 
6575   2E04 3B 86 3A      mov d, _variables_data ; $variables
6576   2E07 D7            push a
6577   2E08 DA            push d
6578   2E09 3B 58 3B      mov d, _vars_tos ; $vars_tos
6579   2E0C 2A            mov b, [d]
6580   2E0D E7            pop d
6581   2E0E FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6582   2E12 E4            pop a
6583   2E13 58 13 00      add d, 19
6584   2E16 FD 14         clb
6585   2E18 DA            push d
6586   2E19 FA 05 00      lea d, [bp + 5] ; $as_int
6587   2E1C 2A            mov b, [d]
6588   2E1D E7            pop d
6589   2E1E FD 43         mov [d], b
6590   2E20             ;; return i; 
6591   2E20 FA FF FF      lea d, [bp + -1] ; $i
6592   2E23 2A            mov b, [d]
6593   2E24 F9            leave
6594   2E25 09            ret
6595   2E26 0A 29 2E      jmp _if109_exit
6596   2E29             _if109_exit:
6597   2E29             _for108_update:
6598   2E29 FA FF FF      lea d, [bp + -1] ; $i
6599   2E2C 2A            mov b, [d]
6600   2E2D FD 79         mov g, b
6601   2E2F FD 77         inc b
6602   2E31 FA FF FF      lea d, [bp + -1] ; $i
6603   2E34 FD 43         mov [d], b
6604   2E36 FD 27         mov b, g
6605   2E38 0A C0 2D      jmp _for108_cond
6606   2E3B             _for108_exit:
6607   2E3B             ;; variables[vars_tos].var_type = SHELL_VAR_TYP_INT; 
6608   2E3B 3B 86 3A      mov d, _variables_data ; $variables
6609   2E3E D7            push a
6610   2E3F DA            push d
6611   2E40 3B 58 3B      mov d, _vars_tos ; $vars_tos
6612   2E43 2A            mov b, [d]
6613   2E44 E7            pop d
6614   2E45 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6615   2E49 E4            pop a
6616   2E4A 58 10 00      add d, 16
6617   2E4D FD 14         clb
6618   2E4F DA            push d
6619   2E50 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
6620   2E53 E7            pop d
6621   2E54 FD 3E         mov [d], bl
6622   2E56             ;; strcpy(variables[vars_tos].varname, varname); 
6623   2E56 3B 86 3A      mov d, _variables_data ; $variables
6624   2E59 D7            push a
6625   2E5A DA            push d
6626   2E5B 3B 58 3B      mov d, _vars_tos ; $vars_tos
6627   2E5E 2A            mov b, [d]
6628   2E5F E7            pop d
6629   2E60 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6630   2E64 E4            pop a
6631   2E65 58 00 00      add d, 0
6632   2E68 FD 14         clb
6633   2E6A 2D            mov b, d
6634   2E6B FD AB         swp b
6635   2E6D D8            push b
6636   2E6E FA 07 00      lea d, [bp + 7] ; $varname
6637   2E71 2A            mov b, [d]
6638   2E72 FD AB         swp b
6639   2E74 D8            push b
6640   2E75 07 FA 0C      call strcpy
6641   2E78 51 04 00      add sp, 4
6642   2E7B             ;; variables[vars_tos].as_int = as_int; 
6643   2E7B 3B 86 3A      mov d, _variables_data ; $variables
6644   2E7E D7            push a
6645   2E7F DA            push d
6646   2E80 3B 58 3B      mov d, _vars_tos ; $vars_tos
6647   2E83 2A            mov b, [d]
6648   2E84 E7            pop d
6649   2E85 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6650   2E89 E4            pop a
6651   2E8A 58 13 00      add d, 19
6652   2E8D FD 14         clb
6653   2E8F DA            push d
6654   2E90 FA 05 00      lea d, [bp + 5] ; $as_int
6655   2E93 2A            mov b, [d]
6656   2E94 E7            pop d
6657   2E95 FD 43         mov [d], b
6658   2E97             ;; vars_tos++; 
6659   2E97 3B 58 3B      mov d, _vars_tos ; $vars_tos
6660   2E9A 2A            mov b, [d]
6661   2E9B FD 79         mov g, b
6662   2E9D FD 77         inc b
6663   2E9F 3B 58 3B      mov d, _vars_tos ; $vars_tos
6664   2EA2 FD 43         mov [d], b
6665   2EA4 FD 27         mov b, g
6666   2EA6             ;; return vars_tos - 1; 
6667   2EA6 3B 58 3B      mov d, _vars_tos ; $vars_tos
6668   2EA9 2A            mov b, [d]
6669   2EAA             ; START TERMS
6670   2EAA D7            push a
6671   2EAB 11            mov a, b
6672   2EAC 26 01 00      mov b, $1
6673   2EAF 60            sub a, b
6674   2EB0 27            mov b, a
6675   2EB1 E4            pop a
6676   2EB2             ; END TERMS
6677   2EB2 F9            leave
6678   2EB3 09            ret
6679   2EB4             
6680   2EB4             get_var_index:
6681   2EB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6682   2EB7             ; $i 
6683   2EB7 52 02 00      sub sp, 2
6684   2EBA             ;; for(i = 0; i < vars_tos; i++) 
6685   2EBA             _for110_init:
6686   2EBA FA FF FF      lea d, [bp + -1] ; $i
6687   2EBD DA            push d
6688   2EBE 26 00 00      mov b, $0
6689   2EC1 E7            pop d
6690   2EC2 FD 43         mov [d], b
6691   2EC4             _for110_cond:
6692   2EC4 FA FF FF      lea d, [bp + -1] ; $i
6693   2EC7 2A            mov b, [d]
6694   2EC8             ; START RELATIONAL
6695   2EC8 D7            push a
6696   2EC9 11            mov a, b
6697   2ECA 3B 58 3B      mov d, _vars_tos ; $vars_tos
6698   2ECD 2A            mov b, [d]
6699   2ECE B0            cmp a, b
6700   2ECF FD 73         slt ; < 
6701   2ED1 E4            pop a
6702   2ED2             ; END RELATIONAL
6703   2ED2 C0 00 00      cmp b, 0
6704   2ED5 C6 23 2F      je _for110_exit
6705   2ED8             _for110_block:
6706   2ED8             ;; if(!strcmp(variables[i].varname, varname)) return i; 
6707   2ED8             _if111_cond:
6708   2ED8 3B 86 3A      mov d, _variables_data ; $variables
6709   2EDB D7            push a
6710   2EDC DA            push d
6711   2EDD FA FF FF      lea d, [bp + -1] ; $i
6712   2EE0 2A            mov b, [d]
6713   2EE1 E7            pop d
6714   2EE2 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6715   2EE6 E4            pop a
6716   2EE7 58 00 00      add d, 0
6717   2EEA FD 14         clb
6718   2EEC 2D            mov b, d
6719   2EED FD AB         swp b
6720   2EEF D8            push b
6721   2EF0 FA 05 00      lea d, [bp + 5] ; $varname
6722   2EF3 2A            mov b, [d]
6723   2EF4 FD AB         swp b
6724   2EF6 D8            push b
6725   2EF7 07 5A 0D      call strcmp
6726   2EFA 51 04 00      add sp, 4
6727   2EFD C0 00 00      cmp b, 0
6728   2F00 FD 71         seq ; !
6729   2F02 C0 00 00      cmp b, 0
6730   2F05 C6 11 2F      je _if111_exit
6731   2F08             _if111_true:
6732   2F08             ;; return i; 
6733   2F08 FA FF FF      lea d, [bp + -1] ; $i
6734   2F0B 2A            mov b, [d]
6735   2F0C F9            leave
6736   2F0D 09            ret
6737   2F0E 0A 11 2F      jmp _if111_exit
6738   2F11             _if111_exit:
6739   2F11             _for110_update:
6740   2F11 FA FF FF      lea d, [bp + -1] ; $i
6741   2F14 2A            mov b, [d]
6742   2F15 FD 79         mov g, b
6743   2F17 FD 77         inc b
6744   2F19 FA FF FF      lea d, [bp + -1] ; $i
6745   2F1C FD 43         mov [d], b
6746   2F1E FD 27         mov b, g
6747   2F20 0A C4 2E      jmp _for110_cond
6748   2F23             _for110_exit:
6749   2F23             ;; return -1; 
6750   2F23 26 01 00      mov b, $1
6751   2F26 FD 97         neg b
6752   2F28 F9            leave
6753   2F29 09            ret
6754   2F2A             
6755   2F2A             get_var_type:
6756   2F2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
6757   2F2D             ; $i 
6758   2F2D 52 02 00      sub sp, 2
6759   2F30             ;; for(i = 0; i < vars_tos; i++) 
6760   2F30             _for112_init:
6761   2F30 FA FF FF      lea d, [bp + -1] ; $i
6762   2F33 DA            push d
6763   2F34 26 00 00      mov b, $0
6764   2F37 E7            pop d
6765   2F38 FD 43         mov [d], b
6766   2F3A             _for112_cond:
6767   2F3A FA FF FF      lea d, [bp + -1] ; $i
6768   2F3D 2A            mov b, [d]
6769   2F3E             ; START RELATIONAL
6770   2F3E D7            push a
6771   2F3F 11            mov a, b
6772   2F40 3B 58 3B      mov d, _vars_tos ; $vars_tos
6773   2F43 2A            mov b, [d]
6774   2F44 B0            cmp a, b
6775   2F45 FD 73         slt ; < 
6776   2F47 E4            pop a
6777   2F48             ; END RELATIONAL
6778   2F48 C0 00 00      cmp b, 0
6779   2F4B C6 AC 2F      je _for112_exit
6780   2F4E             _for112_block:
6781   2F4E             ;; if(!strcmp(variables[i].varname, varname)) return variables[i].var_type; 
6782   2F4E             _if113_cond:
6783   2F4E 3B 86 3A      mov d, _variables_data ; $variables
6784   2F51 D7            push a
6785   2F52 DA            push d
6786   2F53 FA FF FF      lea d, [bp + -1] ; $i
6787   2F56 2A            mov b, [d]
6788   2F57 E7            pop d
6789   2F58 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6790   2F5C E4            pop a
6791   2F5D 58 00 00      add d, 0
6792   2F60 FD 14         clb
6793   2F62 2D            mov b, d
6794   2F63 FD AB         swp b
6795   2F65 D8            push b
6796   2F66 FA 05 00      lea d, [bp + 5] ; $varname
6797   2F69 2A            mov b, [d]
6798   2F6A FD AB         swp b
6799   2F6C D8            push b
6800   2F6D 07 5A 0D      call strcmp
6801   2F70 51 04 00      add sp, 4
6802   2F73 C0 00 00      cmp b, 0
6803   2F76 FD 71         seq ; !
6804   2F78 C0 00 00      cmp b, 0
6805   2F7B C6 9A 2F      je _if113_exit
6806   2F7E             _if113_true:
6807   2F7E             ;; return variables[i].var_type; 
6808   2F7E 3B 86 3A      mov d, _variables_data ; $variables
6809   2F81 D7            push a
6810   2F82 DA            push d
6811   2F83 FA FF FF      lea d, [bp + -1] ; $i
6812   2F86 2A            mov b, [d]
6813   2F87 E7            pop d
6814   2F88 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6815   2F8C E4            pop a
6816   2F8D 58 10 00      add d, 16
6817   2F90 FD 14         clb
6818   2F92 32            mov bl, [d]
6819   2F93 A7 00         mov bh, 0
6820   2F95 F9            leave
6821   2F96 09            ret
6822   2F97 0A 9A 2F      jmp _if113_exit
6823   2F9A             _if113_exit:
6824   2F9A             _for112_update:
6825   2F9A FA FF FF      lea d, [bp + -1] ; $i
6826   2F9D 2A            mov b, [d]
6827   2F9E FD 79         mov g, b
6828   2FA0 FD 77         inc b
6829   2FA2 FA FF FF      lea d, [bp + -1] ; $i
6830   2FA5 FD 43         mov [d], b
6831   2FA7 FD 27         mov b, g
6832   2FA9 0A 3A 2F      jmp _for112_cond
6833   2FAC             _for112_exit:
6834   2FAC             ;; return -1; 
6835   2FAC 26 01 00      mov b, $1
6836   2FAF FD 97         neg b
6837   2FB1 F9            leave
6838   2FB2 09            ret
6839   2FB3             
6840   2FB3             show_var:
6841   2FB3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6842   2FB6             ; $i 
6843   2FB6 52 02 00      sub sp, 2
6844   2FB9             ;; for(i = 0; i < vars_tos; i++){ 
6845   2FB9             _for114_init:
6846   2FB9 FA FF FF      lea d, [bp + -1] ; $i
6847   2FBC DA            push d
6848   2FBD 26 00 00      mov b, $0
6849   2FC0 E7            pop d
6850   2FC1 FD 43         mov [d], b
6851   2FC3             _for114_cond:
6852   2FC3 FA FF FF      lea d, [bp + -1] ; $i
6853   2FC6 2A            mov b, [d]
6854   2FC7             ; START RELATIONAL
6855   2FC7 D7            push a
6856   2FC8 11            mov a, b
6857   2FC9 3B 58 3B      mov d, _vars_tos ; $vars_tos
6858   2FCC 2A            mov b, [d]
6859   2FCD B0            cmp a, b
6860   2FCE FD 73         slt ; < 
6861   2FD0 E4            pop a
6862   2FD1             ; END RELATIONAL
6863   2FD1 C0 00 00      cmp b, 0
6864   2FD4 C6 B0 30      je _for114_exit
6865   2FD7             _for114_block:
6866   2FD7             ;; if(!strcmp(variables[i].varname, varname)){ 
6867   2FD7             _if115_cond:
6868   2FD7 3B 86 3A      mov d, _variables_data ; $variables
6869   2FDA D7            push a
6870   2FDB DA            push d
6871   2FDC FA FF FF      lea d, [bp + -1] ; $i
6872   2FDF 2A            mov b, [d]
6873   2FE0 E7            pop d
6874   2FE1 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6875   2FE5 E4            pop a
6876   2FE6 58 00 00      add d, 0
6877   2FE9 FD 14         clb
6878   2FEB 2D            mov b, d
6879   2FEC FD AB         swp b
6880   2FEE D8            push b
6881   2FEF FA 05 00      lea d, [bp + 5] ; $varname
6882   2FF2 2A            mov b, [d]
6883   2FF3 FD AB         swp b
6884   2FF5 D8            push b
6885   2FF6 07 5A 0D      call strcmp
6886   2FF9 51 04 00      add sp, 4
6887   2FFC C0 00 00      cmp b, 0
6888   2FFF FD 71         seq ; !
6889   3001 C0 00 00      cmp b, 0
6890   3004 C6 9E 30      je _if115_exit
6891   3007             _if115_true:
6892   3007             ;; if(variables[i].var_type == SHELL_VAR_TYP_INT){ 
6893   3007             _if116_cond:
6894   3007 3B 86 3A      mov d, _variables_data ; $variables
6895   300A D7            push a
6896   300B DA            push d
6897   300C FA FF FF      lea d, [bp + -1] ; $i
6898   300F 2A            mov b, [d]
6899   3010 E7            pop d
6900   3011 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6901   3015 E4            pop a
6902   3016 58 10 00      add d, 16
6903   3019 FD 14         clb
6904   301B 32            mov bl, [d]
6905   301C A7 00         mov bh, 0
6906   301E             ; START RELATIONAL
6907   301E D7            push a
6908   301F 11            mov a, b
6909   3020 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
6910   3023 B0            cmp a, b
6911   3024 FD 71         seq ; ==
6912   3026 E4            pop a
6913   3027             ; END RELATIONAL
6914   3027 C0 00 00      cmp b, 0
6915   302A C6 4E 30      je _if116_else
6916   302D             _if116_true:
6917   302D             ;; printu(variables[i].as_int); 
6918   302D 3B 86 3A      mov d, _variables_data ; $variables
6919   3030 D7            push a
6920   3031 DA            push d
6921   3032 FA FF FF      lea d, [bp + -1] ; $i
6922   3035 2A            mov b, [d]
6923   3036 E7            pop d
6924   3037 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6925   303B E4            pop a
6926   303C 58 13 00      add d, 19
6927   303F FD 14         clb
6928   3041 2A            mov b, [d]
6929   3042 FD AB         swp b
6930   3044 D8            push b
6931   3045 07 55 14      call printu
6932   3048 51 02 00      add sp, 2
6933   304B 0A 95 30      jmp _if116_exit
6934   304E             _if116_else:
6935   304E             ;; if(variables[i].var_type == SHELL_VAR_TYP_STR){ 
6936   304E             _if117_cond:
6937   304E 3B 86 3A      mov d, _variables_data ; $variables
6938   3051 D7            push a
6939   3052 DA            push d
6940   3053 FA FF FF      lea d, [bp + -1] ; $i
6941   3056 2A            mov b, [d]
6942   3057 E7            pop d
6943   3058 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6944   305C E4            pop a
6945   305D 58 10 00      add d, 16
6946   3060 FD 14         clb
6947   3062 32            mov bl, [d]
6948   3063 A7 00         mov bh, 0
6949   3065             ; START RELATIONAL
6950   3065 D7            push a
6951   3066 11            mov a, b
6952   3067 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
6953   306A B0            cmp a, b
6954   306B FD 71         seq ; ==
6955   306D E4            pop a
6956   306E             ; END RELATIONAL
6957   306E C0 00 00      cmp b, 0
6958   3071 C6 95 30      je _if117_exit
6959   3074             _if117_true:
6960   3074             ;; printf(variables[i].as_string); 
6961   3074 3B 86 3A      mov d, _variables_data ; $variables
6962   3077 D7            push a
6963   3078 DA            push d
6964   3079 FA FF FF      lea d, [bp + -1] ; $i
6965   307C 2A            mov b, [d]
6966   307D E7            pop d
6967   307E FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6968   3082 E4            pop a
6969   3083 58 11 00      add d, 17
6970   3086 FD 14         clb
6971   3088 2A            mov b, [d]
6972   3089 FD AB         swp b
6973   308B D8            push b
6974   308C 07 4F 0F      call printf
6975   308F 51 02 00      add sp, 2
6976   3092 0A 95 30      jmp _if117_exit
6977   3095             _if117_exit:
6978   3095             _if116_exit:
6979   3095             ;; return i; 
6980   3095 FA FF FF      lea d, [bp + -1] ; $i
6981   3098 2A            mov b, [d]
6982   3099 F9            leave
6983   309A 09            ret
6984   309B 0A 9E 30      jmp _if115_exit
6985   309E             _if115_exit:
6986   309E             _for114_update:
6987   309E FA FF FF      lea d, [bp + -1] ; $i
6988   30A1 2A            mov b, [d]
6989   30A2 FD 79         mov g, b
6990   30A4 FD 77         inc b
6991   30A6 FA FF FF      lea d, [bp + -1] ; $i
6992   30A9 FD 43         mov [d], b
6993   30AB FD 27         mov b, g
6994   30AD 0A C3 2F      jmp _for114_cond
6995   30B0             _for114_exit:
6996   30B0             ;; error("Undeclared variable."); 
6997   30B0 26 63 3C      mov b, __s17 ; "Undeclared variable."
6998   30B3 FD AB         swp b
6999   30B5 D8            push b
7000   30B6 07 FD 2B      call error
7001   30B9 51 02 00      add sp, 2
7002   30BC F9            leave
7003   30BD 09            ret
7004   30BE             
7005   30BE             get_shell_var_strval:
7006   30BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
7007   30C1             ;; return variables[index].as_string; 
7008   30C1 3B 86 3A      mov d, _variables_data ; $variables
7009   30C4 D7            push a
7010   30C5 DA            push d
7011   30C6 FA 05 00      lea d, [bp + 5] ; $index
7012   30C9 2A            mov b, [d]
7013   30CA E7            pop d
7014   30CB FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7015   30CF E4            pop a
7016   30D0 58 11 00      add d, 17
7017   30D3 FD 14         clb
7018   30D5 2A            mov b, [d]
7019   30D6 F9            leave
7020   30D7 09            ret
7021   30D8             
7022   30D8             get_shell_var_intval:
7023   30D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7024   30DB             ;; return variables[index].as_int; 
7025   30DB 3B 86 3A      mov d, _variables_data ; $variables
7026   30DE D7            push a
7027   30DF DA            push d
7028   30E0 FA 05 00      lea d, [bp + 5] ; $index
7029   30E3 2A            mov b, [d]
7030   30E4 E7            pop d
7031   30E5 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7032   30E9 E4            pop a
7033   30EA 58 13 00      add d, 19
7034   30ED FD 14         clb
7035   30EF 2A            mov b, [d]
7036   30F0 F9            leave
7037   30F1 09            ret
7038   30F2             
7039   30F2             file_exists:
7040   30F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7041   30F5             ; $file_exists 
7042   30F5 52 02 00      sub sp, 2
7043   30F8             
7044   30F8             ; --- BEGIN INLINE ASM BLOCK
7045   30F8 FA 05 00      lea d, [bp + 5] ; $filename
7046   30FB FD 2A         mov d, [d]
7047   30FD 19 15         mov al, 21
7048   30FF 05 04         syscall sys_filesystem
7049   3101 FA FF FF      lea d, [bp + -1] ; $file_exists
7050   3104 43            mov [d], a
7051   3105             ; --- END INLINE ASM BLOCK
7052   3105             
7053   3105             ;; return file_exists; 
7054   3105 FA FF FF      lea d, [bp + -1] ; $file_exists
7055   3108 2A            mov b, [d]
7056   3109 F9            leave
7057   310A 09            ret
7058   310B             
7059   310B             command_cd:
7060   310B F8 00 00      enter 0 ; (push bp; mov bp, sp)
7061   310E             ; $dirID 
7062   310E 52 02 00      sub sp, 2
7063   3111             ;; *path = '\0'; 
7064   3111 3B 06 37      mov d, _path_data ; $path
7065   3114 2D            mov b, d
7066   3115 D8            push b
7067   3116 26 00 00      mov b, $0
7068   3119 E7            pop d
7069   311A FD 3E         mov [d], bl
7070   311C             ;; get(); 
7071   311C 07 D6 1B      call get
7072   311F             ;; if(toktype == END || tok == SEMICOLON || tok == BITWISE_NOT){ 
7073   311F             _if118_cond:
7074   311F 3B 00 33      mov d, _toktype ; $toktype
7075   3122 2A            mov b, [d]
7076   3123             ; START RELATIONAL
7077   3123 D7            push a
7078   3124 11            mov a, b
7079   3125 26 06 00      mov b, 6; END
7080   3128 B0            cmp a, b
7081   3129 FD 71         seq ; ==
7082   312B E4            pop a
7083   312C             ; END RELATIONAL
7084   312C D7            push a
7085   312D 11            mov a, b
7086   312E 3B FE 32      mov d, _tok ; $tok
7087   3131 2A            mov b, [d]
7088   3132             ; START RELATIONAL
7089   3132 D7            push a
7090   3133 11            mov a, b
7091   3134 26 23 00      mov b, 35; SEMICOLON
7092   3137 B0            cmp a, b
7093   3138 FD 71         seq ; ==
7094   313A E4            pop a
7095   313B             ; END RELATIONAL
7096   313B FD A8         sor a, b ; ||
7097   313D 11            mov a, b
7098   313E 3B FE 32      mov d, _tok ; $tok
7099   3141 2A            mov b, [d]
7100   3142             ; START RELATIONAL
7101   3142 D7            push a
7102   3143 11            mov a, b
7103   3144 26 19 00      mov b, 25; BITWISE_NOT
7104   3147 B0            cmp a, b
7105   3148 FD 71         seq ; ==
7106   314A E4            pop a
7107   314B             ; END RELATIONAL
7108   314B FD A8         sor a, b ; ||
7109   314D E4            pop a
7110   314E C0 00 00      cmp b, 0
7111   3151 C6 77 31      je _if118_else
7112   3154             _if118_true:
7113   3154             ;; back(); 
7114   3154 07 0A 1A      call back
7115   3157             ;; cd_to_dir(variables[1].as_string); 
7116   3157 3B 86 3A      mov d, _variables_data ; $variables
7117   315A D7            push a
7118   315B DA            push d
7119   315C 26 01 00      mov b, $1
7120   315F E7            pop d
7121   3160 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7122   3164 E4            pop a
7123   3165 58 11 00      add d, 17
7124   3168 FD 14         clb
7125   316A 2A            mov b, [d]
7126   316B FD AB         swp b
7127   316D D8            push b
7128   316E 07 D5 31      call cd_to_dir
7129   3171 51 02 00      add sp, 2
7130   3174 0A D3 31      jmp _if118_exit
7131   3177             _if118_else:
7132   3177             ;; for(;;){ 
7133   3177             _for119_init:
7134   3177             _for119_cond:
7135   3177             _for119_block:
7136   3177             ;; strcat(path, token); 
7137   3177 3B 06 37      mov d, _path_data ; $path
7138   317A 2D            mov b, d
7139   317B FD AB         swp b
7140   317D D8            push b
7141   317E 3B 04 33      mov d, _token_data ; $token
7142   3181 2D            mov b, d
7143   3182 FD AB         swp b
7144   3184 D8            push b
7145   3185 07 BE 0D      call strcat
7146   3188 51 04 00      add sp, 4
7147   318B             ;; get(); 
7148   318B 07 D6 1B      call get
7149   318E             ;; if(toktype == END) break; 
7150   318E             _if120_cond:
7151   318E 3B 00 33      mov d, _toktype ; $toktype
7152   3191 2A            mov b, [d]
7153   3192             ; START RELATIONAL
7154   3192 D7            push a
7155   3193 11            mov a, b
7156   3194 26 06 00      mov b, 6; END
7157   3197 B0            cmp a, b
7158   3198 FD 71         seq ; ==
7159   319A E4            pop a
7160   319B             ; END RELATIONAL
7161   319B C0 00 00      cmp b, 0
7162   319E C6 A7 31      je _if120_else
7163   31A1             _if120_true:
7164   31A1             ;; break; 
7165   31A1 0A C6 31      jmp _for119_exit ; for break
7166   31A4 0A C3 31      jmp _if120_exit
7167   31A7             _if120_else:
7168   31A7             ;; if(tok == SEMICOLON){ 
7169   31A7             _if121_cond:
7170   31A7 3B FE 32      mov d, _tok ; $tok
7171   31AA 2A            mov b, [d]
7172   31AB             ; START RELATIONAL
7173   31AB D7            push a
7174   31AC 11            mov a, b
7175   31AD 26 23 00      mov b, 35; SEMICOLON
7176   31B0 B0            cmp a, b
7177   31B1 FD 71         seq ; ==
7178   31B3 E4            pop a
7179   31B4             ; END RELATIONAL
7180   31B4 C0 00 00      cmp b, 0
7181   31B7 C6 C3 31      je _if121_exit
7182   31BA             _if121_true:
7183   31BA             ;; back(); 
7184   31BA 07 0A 1A      call back
7185   31BD             ;; break; 
7186   31BD 0A C6 31      jmp _for119_exit ; for break
7187   31C0 0A C3 31      jmp _if121_exit
7188   31C3             _if121_exit:
7189   31C3             _if120_exit:
7190   31C3             _for119_update:
7191   31C3 0A 77 31      jmp _for119_cond
7192   31C6             _for119_exit:
7193   31C6             ;; cd_to_dir(path); 
7194   31C6 3B 06 37      mov d, _path_data ; $path
7195   31C9 2D            mov b, d
7196   31CA FD AB         swp b
7197   31CC D8            push b
7198   31CD 07 D5 31      call cd_to_dir
7199   31D0 51 02 00      add sp, 2
7200   31D3             _if118_exit:
7201   31D3 F9            leave
7202   31D4 09            ret
7203   31D5             
7204   31D5             cd_to_dir:
7205   31D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7206   31D8             ; $dirID 
7207   31D8 52 02 00      sub sp, 2
7208   31DB             
7209   31DB             ; --- BEGIN INLINE ASM BLOCK
7210   31DB FA 05 00      lea d, [bp + 5] ; $dir
7211   31DE FD 2A         mov d, [d]
7212   31E0 19 13         mov al, 19
7213   31E2 05 04         syscall sys_filesystem 
7214   31E4 FA FF FF      lea d, [bp + -1] ; $dirID
7215   31E7 FD 2A         mov d, [d]
7216   31E9 43            mov [d], a 
7217   31EA D7            push a
7218   31EB             ; --- END INLINE ASM BLOCK
7219   31EB             
7220   31EB             ;; if(dirID != -1){ 
7221   31EB             _if122_cond:
7222   31EB FA FF FF      lea d, [bp + -1] ; $dirID
7223   31EE 2A            mov b, [d]
7224   31EF             ; START RELATIONAL
7225   31EF D7            push a
7226   31F0 11            mov a, b
7227   31F1 26 01 00      mov b, $1
7228   31F4 FD 97         neg b
7229   31F6 B0            cmp a, b
7230   31F7 FD 72         sneq ; !=
7231   31F9 E4            pop a
7232   31FA             ; END RELATIONAL
7233   31FA C0 00 00      cmp b, 0
7234   31FD C6 09 32      je _if122_else
7235   3200             _if122_true:
7236   3200             
7237   3200             ; --- BEGIN INLINE ASM BLOCK
7238   3200 E4            pop a
7239   3201 27            mov b, a
7240   3202 19 03         mov al, 3
7241   3204 05 04         syscall sys_filesystem
7242   3206             ; --- END INLINE ASM BLOCK
7243   3206             
7244   3206 0A 0A 32      jmp _if122_exit
7245   3209             _if122_else:
7246   3209             
7247   3209             ; --- BEGIN INLINE ASM BLOCK
7248   3209 E4            pop a
7249   320A             ; --- END INLINE ASM BLOCK
7250   320A             
7251   320A             _if122_exit:
7252   320A F9            leave
7253   320B 09            ret
7254   320C             
7255   320C             print_cwd:
7256   320C F8 00 00      enter 0 ; (push bp; mov bp, sp)
7257   320F             
7258   320F             ; --- BEGIN INLINE ASM BLOCK
7259   320F 19 12         mov al, 18
7260   3211 05 04         syscall sys_filesystem        
7261   3213             ; --- END INLINE ASM BLOCK
7262   3213             
7263   3213 F9            leave
7264   3214 09            ret
7265   3215             
7266   3215             spawn_new_proc:
7267   3215 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7268   3218             
7269   3218             ; --- BEGIN INLINE ASM BLOCK
7270   3218 FA 05 00      lea d, [bp + 5] ; $args
7271   321B 2A            mov b, [d]
7272   321C FA 07 00      lea d, [bp + 7] ; $executable_path
7273   321F FD 2A         mov d, [d]
7274   3221 05 05         syscall sys_spawn_proc
7275   3223             ; --- END INLINE ASM BLOCK
7276   3223             
7277   3223 F9            leave
7278   3224 09            ret
7279   3225             
7280   3225             command_shell:
7281   3225 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7282   3228 F9            leave
7283   3229 09            ret
7284   322A             
7285   322A             command_fg:
7286   322A F8 00 00      enter 0 ; (push bp; mov bp, sp)
7287   322D F9            leave
7288   322E 09            ret
7289   322F             
7290   322F             read_config:
7291   322F F8 00 00      enter 0 ; (push bp; mov bp, sp)
7292   3232             ;; transient_area = alloc(16385); 
7293   3232 3B 04 35      mov d, _transient_area ; $transient_area
7294   3235 DA            push d
7295   3236 26 01 40      mov b, $4001
7296   3239 FD AB         swp b
7297   323B D8            push b
7298   323C 07 C4 15      call alloc
7299   323F 51 02 00      add sp, 2
7300   3242 E7            pop d
7301   3243 FD 43         mov [d], b
7302   3245             ;; *value = '\0'; 
7303   3245 FA 05 00      lea d, [bp + 5] ; $value
7304   3248 2A            mov b, [d]
7305   3249 D8            push b
7306   324A 26 00 00      mov b, $0
7307   324D E7            pop d
7308   324E FD 3E         mov [d], bl
7309   3250             ;; loadfile(filename, transient_area); 
7310   3250 FA 09 00      lea d, [bp + 9] ; $filename
7311   3253 2A            mov b, [d]
7312   3254 FD AB         swp b
7313   3256 D8            push b
7314   3257 3B 04 35      mov d, _transient_area ; $transient_area
7315   325A 2A            mov b, [d]
7316   325B FD AB         swp b
7317   325D D8            push b
7318   325E 07 96 15      call loadfile
7319   3261 51 04 00      add sp, 4
7320   3264             ;; prog = transient_area; 
7321   3264 3B 02 33      mov d, _prog ; $prog
7322   3267 DA            push d
7323   3268 3B 04 35      mov d, _transient_area ; $transient_area
7324   326B 2A            mov b, [d]
7325   326C E7            pop d
7326   326D FD 43         mov [d], b
7327   326F             ;; for(;;){ 
7328   326F             _for123_init:
7329   326F             _for123_cond:
7330   326F             _for123_block:
7331   326F             ;; get(); 
7332   326F 07 D6 1B      call get
7333   3272             ;; if(toktype == END) break; 
7334   3272             _if124_cond:
7335   3272 3B 00 33      mov d, _toktype ; $toktype
7336   3275 2A            mov b, [d]
7337   3276             ; START RELATIONAL
7338   3276 D7            push a
7339   3277 11            mov a, b
7340   3278 26 06 00      mov b, 6; END
7341   327B B0            cmp a, b
7342   327C FD 71         seq ; ==
7343   327E E4            pop a
7344   327F             ; END RELATIONAL
7345   327F C0 00 00      cmp b, 0
7346   3282 C6 8B 32      je _if124_exit
7347   3285             _if124_true:
7348   3285             ;; break; 
7349   3285 0A F0 32      jmp _for123_exit ; for break
7350   3288 0A 8B 32      jmp _if124_exit
7351   328B             _if124_exit:
7352   328B             ;; if(!strcmp(entry_name, token)){ 
7353   328B             _if125_cond:
7354   328B FA 07 00      lea d, [bp + 7] ; $entry_name
7355   328E 2A            mov b, [d]
7356   328F FD AB         swp b
7357   3291 D8            push b
7358   3292 3B 04 33      mov d, _token_data ; $token
7359   3295 2D            mov b, d
7360   3296 FD AB         swp b
7361   3298 D8            push b
7362   3299 07 5A 0D      call strcmp
7363   329C 51 04 00      add sp, 4
7364   329F C0 00 00      cmp b, 0
7365   32A2 FD 71         seq ; !
7366   32A4 C0 00 00      cmp b, 0
7367   32A7 C6 ED 32      je _if125_exit
7368   32AA             _if125_true:
7369   32AA             ;; get(); // get '=' 
7370   32AA 07 D6 1B      call get
7371   32AD             ;; for(;;){ 
7372   32AD             _for126_init:
7373   32AD             _for126_cond:
7374   32AD             _for126_block:
7375   32AD             ;; get(); 
7376   32AD 07 D6 1B      call get
7377   32B0             ;; if(!strcmp(token, ";")) return; 
7378   32B0             _if127_cond:
7379   32B0 3B 04 33      mov d, _token_data ; $token
7380   32B3 2D            mov b, d
7381   32B4 FD AB         swp b
7382   32B6 D8            push b
7383   32B7 26 78 3C      mov b, __s18 ; ";"
7384   32BA FD AB         swp b
7385   32BC D8            push b
7386   32BD 07 5A 0D      call strcmp
7387   32C0 51 04 00      add sp, 4
7388   32C3 C0 00 00      cmp b, 0
7389   32C6 FD 71         seq ; !
7390   32C8 C0 00 00      cmp b, 0
7391   32CB C6 D3 32      je _if127_exit
7392   32CE             _if127_true:
7393   32CE             ;; return; 
7394   32CE F9            leave
7395   32CF 09            ret
7396   32D0 0A D3 32      jmp _if127_exit
7397   32D3             _if127_exit:
7398   32D3             ;; strcat(value, token); 
7399   32D3 FA 05 00      lea d, [bp + 5] ; $value
7400   32D6 2A            mov b, [d]
7401   32D7 FD AB         swp b
7402   32D9 D8            push b
7403   32DA 3B 04 33      mov d, _token_data ; $token
7404   32DD 2D            mov b, d
7405   32DE FD AB         swp b
7406   32E0 D8            push b
7407   32E1 07 BE 0D      call strcat
7408   32E4 51 04 00      add sp, 4
7409   32E7             _for126_update:
7410   32E7 0A AD 32      jmp _for126_cond
7411   32EA             _for126_exit:
7412   32EA 0A ED 32      jmp _if125_exit
7413   32ED             _if125_exit:
7414   32ED             _for123_update:
7415   32ED 0A 6F 32      jmp _for123_cond
7416   32F0             _for123_exit:
7417   32F0             ;; free(16385); 
7418   32F0 26 01 40      mov b, $4001
7419   32F3 FD AB         swp b
7420   32F5 D8            push b
7421   32F6 07 EA 15      call free
7422   32F9 51 02 00      add sp, 2
7423   32FC F9            leave
7424   32FD 09            ret
7425   32FE             ; --- END TEXT BLOCK
7426   32FE             
7427   32FE             ; --- BEGIN DATA BLOCK
7428   32FE 00 00       _tok: .fill 2, 0
7429   3300 00 00       _toktype: .fill 2, 0
7430   3302 00 00       _prog: .fill 2, 0
7431   3304 00 00 00 00 _token_data: .fill 256, 0
7431   3308 00 00 00 00 
7431   330C 00 00 00 00 
7431   3310 00 00 00 00 
7431   3314 00 00 00 00 
7431   3318 00 00 00 00 
7431   331C 00 00 00 00 
7431   3320 00 00 00 00 
7431   3324 00 00 00 00 
7431   3328 00 00 00 00 
7431   332C 00 00 00 00 
7431   3330 00 00 00 00 
7431   3334 00 00 00 00 
7431   3338 00 00 00 00 
7431   333C 00 00 00 00 
7431   3340 00 00 00 00 
7431   3344 00 00 00 00 
7431   3348 00 00 00 00 
7431   334C 00 00 00 00 
7431   3350 00 00 00 00 
7431   3354 00 00 00 00 
7431   3358 00 00 00 00 
7431   335C 00 00 00 00 
7431   3360 00 00 00 00 
7431   3364 00 00 00 00 
7431   3368 00 00 00 00 
7431   336C 00 00 00 00 
7431   3370 00 00 00 00 
7431   3374 00 00 00 00 
7431   3378 00 00 00 00 
7431   337C 00 00 00 00 
7431   3380 00 00 00 00 
7431   3384 00 00 00 00 
7431   3388 00 00 00 00 
7431   338C 00 00 00 00 
7431   3390 00 00 00 00 
7431   3394 00 00 00 00 
7431   3398 00 00 00 00 
7431   339C 00 00 00 00 
7431   33A0 00 00 00 00 
7431   33A4 00 00 00 00 
7431   33A8 00 00 00 00 
7431   33AC 00 00 00 00 
7431   33B0 00 00 00 00 
7431   33B4 00 00 00 00 
7431   33B8 00 00 00 00 
7431   33BC 00 00 00 00 
7431   33C0 00 00 00 00 
7431   33C4 00 00 00 00 
7431   33C8 00 00 00 00 
7431   33CC 00 00 00 00 
7431   33D0 00 00 00 00 
7431   33D4 00 00 00 00 
7431   33D8 00 00 00 00 
7431   33DC 00 00 00 00 
7431   33E0 00 00 00 00 
7431   33E4 00 00 00 00 
7431   33E8 00 00 00 00 
7431   33EC 00 00 00 00 
7431   33F0 00 00 00 00 
7431   33F4 00 00 00 00 
7431   33F8 00 00 00 00 
7431   33FC 00 00 00 00 
7431   3400 00 00 00 00 
7432   3404 00 00 00 00 _string_const_data: .fill 256, 0
7432   3408 00 00 00 00 
7432   340C 00 00 00 00 
7432   3410 00 00 00 00 
7432   3414 00 00 00 00 
7432   3418 00 00 00 00 
7432   341C 00 00 00 00 
7432   3420 00 00 00 00 
7432   3424 00 00 00 00 
7432   3428 00 00 00 00 
7432   342C 00 00 00 00 
7432   3430 00 00 00 00 
7432   3434 00 00 00 00 
7432   3438 00 00 00 00 
7432   343C 00 00 00 00 
7432   3440 00 00 00 00 
7432   3444 00 00 00 00 
7432   3448 00 00 00 00 
7432   344C 00 00 00 00 
7432   3450 00 00 00 00 
7432   3454 00 00 00 00 
7432   3458 00 00 00 00 
7432   345C 00 00 00 00 
7432   3460 00 00 00 00 
7432   3464 00 00 00 00 
7432   3468 00 00 00 00 
7432   346C 00 00 00 00 
7432   3470 00 00 00 00 
7432   3474 00 00 00 00 
7432   3478 00 00 00 00 
7432   347C 00 00 00 00 
7432   3480 00 00 00 00 
7432   3484 00 00 00 00 
7432   3488 00 00 00 00 
7432   348C 00 00 00 00 
7432   3490 00 00 00 00 
7432   3494 00 00 00 00 
7432   3498 00 00 00 00 
7432   349C 00 00 00 00 
7432   34A0 00 00 00 00 
7432   34A4 00 00 00 00 
7432   34A8 00 00 00 00 
7432   34AC 00 00 00 00 
7432   34B0 00 00 00 00 
7432   34B4 00 00 00 00 
7432   34B8 00 00 00 00 
7432   34BC 00 00 00 00 
7432   34C0 00 00 00 00 
7432   34C4 00 00 00 00 
7432   34C8 00 00 00 00 
7432   34CC 00 00 00 00 
7432   34D0 00 00 00 00 
7432   34D4 00 00 00 00 
7432   34D8 00 00 00 00 
7432   34DC 00 00 00 00 
7432   34E0 00 00 00 00 
7432   34E4 00 00 00 00 
7432   34E8 00 00 00 00 
7432   34EC 00 00 00 00 
7432   34F0 00 00 00 00 
7432   34F4 00 00 00 00 
7432   34F8 00 00 00 00 
7432   34FC 00 00 00 00 
7432   3500 00 00 00 00 
7433   3504 00 00       _transient_area: .fill 2, 0
7434   3506 00 00 00 00 _command_data: .fill 512, 0
7434   350A 00 00 00 00 
7434   350E 00 00 00 00 
7434   3512 00 00 00 00 
7434   3516 00 00 00 00 
7434   351A 00 00 00 00 
7434   351E 00 00 00 00 
7434   3522 00 00 00 00 
7434   3526 00 00 00 00 
7434   352A 00 00 00 00 
7434   352E 00 00 00 00 
7434   3532 00 00 00 00 
7434   3536 00 00 00 00 
7434   353A 00 00 00 00 
7434   353E 00 00 00 00 
7434   3542 00 00 00 00 
7434   3546 00 00 00 00 
7434   354A 00 00 00 00 
7434   354E 00 00 00 00 
7434   3552 00 00 00 00 
7434   3556 00 00 00 00 
7434   355A 00 00 00 00 
7434   355E 00 00 00 00 
7434   3562 00 00 00 00 
7434   3566 00 00 00 00 
7434   356A 00 00 00 00 
7434   356E 00 00 00 00 
7434   3572 00 00 00 00 
7434   3576 00 00 00 00 
7434   357A 00 00 00 00 
7434   357E 00 00 00 00 
7434   3582 00 00 00 00 
7434   3586 00 00 00 00 
7434   358A 00 00 00 00 
7434   358E 00 00 00 00 
7434   3592 00 00 00 00 
7434   3596 00 00 00 00 
7434   359A 00 00 00 00 
7434   359E 00 00 00 00 
7434   35A2 00 00 00 00 
7434   35A6 00 00 00 00 
7434   35AA 00 00 00 00 
7434   35AE 00 00 00 00 
7434   35B2 00 00 00 00 
7434   35B6 00 00 00 00 
7434   35BA 00 00 00 00 
7434   35BE 00 00 00 00 
7434   35C2 00 00 00 00 
7434   35C6 00 00 00 00 
7434   35CA 00 00 00 00 
7434   35CE 00 00 00 00 
7434   35D2 00 00 00 00 
7434   35D6 00 00 00 00 
7434   35DA 00 00 00 00 
7434   35DE 00 00 00 00 
7434   35E2 00 00 00 00 
7434   35E6 00 00 00 00 
7434   35EA 00 00 00 00 
7434   35EE 00 00 00 00 
7434   35F2 00 00 00 00 
7434   35F6 00 00 00 00 
7434   35FA 00 00 00 00 
7434   35FE 00 00 00 00 
7434   3602 00 00 00 00 
7434   3606 00 00 00 00 
7434   360A 00 00 00 00 
7434   360E 00 00 00 00 
7434   3612 00 00 00 00 
7434   3616 00 00 00 00 
7434   361A 00 00 00 00 
7434   361E 00 00 00 00 
7434   3622 00 00 00 00 
7434   3626 00 00 00 00 
7434   362A 00 00 00 00 
7434   362E 00 00 00 00 
7434   3632 00 00 00 00 
7434   3636 00 00 00 00 
7434   363A 00 00 00 00 
7434   363E 00 00 00 00 
7434   3642 00 00 00 00 
7434   3646 00 00 00 00 
7434   364A 00 00 00 00 
7434   364E 00 00 00 00 
7434   3652 00 00 00 00 
7434   3656 00 00 00 00 
7434   365A 00 00 00 00 
7434   365E 00 00 00 00 
7434   3662 00 00 00 00 
7434   3666 00 00 00 00 
7434   366A 00 00 00 00 
7434   366E 00 00 00 00 
7434   3672 00 00 00 00 
7434   3676 00 00 00 00 
7434   367A 00 00 00 00 
7434   367E 00 00 00 00 
7434   3682 00 00 00 00 
7434   3686 00 00 00 00 
7434   368A 00 00 00 00 
7434   368E 00 00 00 00 
7434   3692 00 00 00 00 
7434   3696 00 00 00 00 
7434   369A 00 00 00 00 
7434   369E 00 00 00 00 
7434   36A2 00 00 00 00 
7434   36A6 00 00 00 00 
7434   36AA 00 00 00 00 
7434   36AE 00 00 00 00 
7434   36B2 00 00 00 00 
7434   36B6 00 00 00 00 
7434   36BA 00 00 00 00 
7434   36BE 00 00 00 00 
7434   36C2 00 00 00 00 
7434   36C6 00 00 00 00 
7434   36CA 00 00 00 00 
7434   36CE 00 00 00 00 
7434   36D2 00 00 00 00 
7434   36D6 00 00 00 00 
7434   36DA 00 00 00 00 
7434   36DE 00 00 00 00 
7434   36E2 00 00 00 00 
7434   36E6 00 00 00 00 
7434   36EA 00 00 00 00 
7434   36EE 00 00 00 00 
7434   36F2 00 00 00 00 
7434   36F6 00 00 00 00 
7434   36FA 00 00 00 00 
7434   36FE 00 00 00 00 
7434   3702 00 00 00 00 
7435   3706 00 00 00 00 _path_data: .fill 256, 0
7435   370A 00 00 00 00 
7435   370E 00 00 00 00 
7435   3712 00 00 00 00 
7435   3716 00 00 00 00 
7435   371A 00 00 00 00 
7435   371E 00 00 00 00 
7435   3722 00 00 00 00 
7435   3726 00 00 00 00 
7435   372A 00 00 00 00 
7435   372E 00 00 00 00 
7435   3732 00 00 00 00 
7435   3736 00 00 00 00 
7435   373A 00 00 00 00 
7435   373E 00 00 00 00 
7435   3742 00 00 00 00 
7435   3746 00 00 00 00 
7435   374A 00 00 00 00 
7435   374E 00 00 00 00 
7435   3752 00 00 00 00 
7435   3756 00 00 00 00 
7435   375A 00 00 00 00 
7435   375E 00 00 00 00 
7435   3762 00 00 00 00 
7435   3766 00 00 00 00 
7435   376A 00 00 00 00 
7435   376E 00 00 00 00 
7435   3772 00 00 00 00 
7435   3776 00 00 00 00 
7435   377A 00 00 00 00 
7435   377E 00 00 00 00 
7435   3782 00 00 00 00 
7435   3786 00 00 00 00 
7435   378A 00 00 00 00 
7435   378E 00 00 00 00 
7435   3792 00 00 00 00 
7435   3796 00 00 00 00 
7435   379A 00 00 00 00 
7435   379E 00 00 00 00 
7435   37A2 00 00 00 00 
7435   37A6 00 00 00 00 
7435   37AA 00 00 00 00 
7435   37AE 00 00 00 00 
7435   37B2 00 00 00 00 
7435   37B6 00 00 00 00 
7435   37BA 00 00 00 00 
7435   37BE 00 00 00 00 
7435   37C2 00 00 00 00 
7435   37C6 00 00 00 00 
7435   37CA 00 00 00 00 
7435   37CE 00 00 00 00 
7435   37D2 00 00 00 00 
7435   37D6 00 00 00 00 
7435   37DA 00 00 00 00 
7435   37DE 00 00 00 00 
7435   37E2 00 00 00 00 
7435   37E6 00 00 00 00 
7435   37EA 00 00 00 00 
7435   37EE 00 00 00 00 
7435   37F2 00 00 00 00 
7435   37F6 00 00 00 00 
7435   37FA 00 00 00 00 
7435   37FE 00 00 00 00 
7435   3802 00 00 00 00 
7436   3806 00 00 00 00 _temp_data: .fill 256, 0
7436   380A 00 00 00 00 
7436   380E 00 00 00 00 
7436   3812 00 00 00 00 
7436   3816 00 00 00 00 
7436   381A 00 00 00 00 
7436   381E 00 00 00 00 
7436   3822 00 00 00 00 
7436   3826 00 00 00 00 
7436   382A 00 00 00 00 
7436   382E 00 00 00 00 
7436   3832 00 00 00 00 
7436   3836 00 00 00 00 
7436   383A 00 00 00 00 
7436   383E 00 00 00 00 
7436   3842 00 00 00 00 
7436   3846 00 00 00 00 
7436   384A 00 00 00 00 
7436   384E 00 00 00 00 
7436   3852 00 00 00 00 
7436   3856 00 00 00 00 
7436   385A 00 00 00 00 
7436   385E 00 00 00 00 
7436   3862 00 00 00 00 
7436   3866 00 00 00 00 
7436   386A 00 00 00 00 
7436   386E 00 00 00 00 
7436   3872 00 00 00 00 
7436   3876 00 00 00 00 
7436   387A 00 00 00 00 
7436   387E 00 00 00 00 
7436   3882 00 00 00 00 
7436   3886 00 00 00 00 
7436   388A 00 00 00 00 
7436   388E 00 00 00 00 
7436   3892 00 00 00 00 
7436   3896 00 00 00 00 
7436   389A 00 00 00 00 
7436   389E 00 00 00 00 
7436   38A2 00 00 00 00 
7436   38A6 00 00 00 00 
7436   38AA 00 00 00 00 
7436   38AE 00 00 00 00 
7436   38B2 00 00 00 00 
7436   38B6 00 00 00 00 
7436   38BA 00 00 00 00 
7436   38BE 00 00 00 00 
7436   38C2 00 00 00 00 
7436   38C6 00 00 00 00 
7436   38CA 00 00 00 00 
7436   38CE 00 00 00 00 
7436   38D2 00 00 00 00 
7436   38D6 00 00 00 00 
7436   38DA 00 00 00 00 
7436   38DE 00 00 00 00 
7436   38E2 00 00 00 00 
7436   38E6 00 00 00 00 
7436   38EA 00 00 00 00 
7436   38EE 00 00 00 00 
7436   38F2 00 00 00 00 
7436   38F6 00 00 00 00 
7436   38FA 00 00 00 00 
7436   38FE 00 00 00 00 
7436   3902 00 00 00 00 
7437   3906 00 00 00 00 _argument_data: .fill 256, 0
7437   390A 00 00 00 00 
7437   390E 00 00 00 00 
7437   3912 00 00 00 00 
7437   3916 00 00 00 00 
7437   391A 00 00 00 00 
7437   391E 00 00 00 00 
7437   3922 00 00 00 00 
7437   3926 00 00 00 00 
7437   392A 00 00 00 00 
7437   392E 00 00 00 00 
7437   3932 00 00 00 00 
7437   3936 00 00 00 00 
7437   393A 00 00 00 00 
7437   393E 00 00 00 00 
7437   3942 00 00 00 00 
7437   3946 00 00 00 00 
7437   394A 00 00 00 00 
7437   394E 00 00 00 00 
7437   3952 00 00 00 00 
7437   3956 00 00 00 00 
7437   395A 00 00 00 00 
7437   395E 00 00 00 00 
7437   3962 00 00 00 00 
7437   3966 00 00 00 00 
7437   396A 00 00 00 00 
7437   396E 00 00 00 00 
7437   3972 00 00 00 00 
7437   3976 00 00 00 00 
7437   397A 00 00 00 00 
7437   397E 00 00 00 00 
7437   3982 00 00 00 00 
7437   3986 00 00 00 00 
7437   398A 00 00 00 00 
7437   398E 00 00 00 00 
7437   3992 00 00 00 00 
7437   3996 00 00 00 00 
7437   399A 00 00 00 00 
7437   399E 00 00 00 00 
7437   39A2 00 00 00 00 
7437   39A6 00 00 00 00 
7437   39AA 00 00 00 00 
7437   39AE 00 00 00 00 
7437   39B2 00 00 00 00 
7437   39B6 00 00 00 00 
7437   39BA 00 00 00 00 
7437   39BE 00 00 00 00 
7437   39C2 00 00 00 00 
7437   39C6 00 00 00 00 
7437   39CA 00 00 00 00 
7437   39CE 00 00 00 00 
7437   39D2 00 00 00 00 
7437   39D6 00 00 00 00 
7437   39DA 00 00 00 00 
7437   39DE 00 00 00 00 
7437   39E2 00 00 00 00 
7437   39E6 00 00 00 00 
7437   39EA 00 00 00 00 
7437   39EE 00 00 00 00 
7437   39F2 00 00 00 00 
7437   39F6 00 00 00 00 
7437   39FA 00 00 00 00 
7437   39FE 00 00 00 00 
7437   3A02 00 00 00 00 
7438   3A06 00 00 00 00 _last_cmd_data: .fill 128, 0
7438   3A0A 00 00 00 00 
7438   3A0E 00 00 00 00 
7438   3A12 00 00 00 00 
7438   3A16 00 00 00 00 
7438   3A1A 00 00 00 00 
7438   3A1E 00 00 00 00 
7438   3A22 00 00 00 00 
7438   3A26 00 00 00 00 
7438   3A2A 00 00 00 00 
7438   3A2E 00 00 00 00 
7438   3A32 00 00 00 00 
7438   3A36 00 00 00 00 
7438   3A3A 00 00 00 00 
7438   3A3E 00 00 00 00 
7438   3A42 00 00 00 00 
7438   3A46 00 00 00 00 
7438   3A4A 00 00 00 00 
7438   3A4E 00 00 00 00 
7438   3A52 00 00 00 00 
7438   3A56 00 00 00 00 
7438   3A5A 00 00 00 00 
7438   3A5E 00 00 00 00 
7438   3A62 00 00 00 00 
7438   3A66 00 00 00 00 
7438   3A6A 00 00 00 00 
7438   3A6E 00 00 00 00 
7438   3A72 00 00 00 00 
7438   3A76 00 00 00 00 
7438   3A7A 00 00 00 00 
7438   3A7E 00 00 00 00 
7438   3A82 00 00 00 00 
7439   3A86 00 00 00 00 _variables_data: .fill 210, 0
7439   3A8A 00 00 00 00 
7439   3A8E 00 00 00 00 
7439   3A92 00 00 00 00 
7439   3A96 00 00 00 00 
7439   3A9A 00 00 00 00 
7439   3A9E 00 00 00 00 
7439   3AA2 00 00 00 00 
7439   3AA6 00 00 00 00 
7439   3AAA 00 00 00 00 
7439   3AAE 00 00 00 00 
7439   3AB2 00 00 00 00 
7439   3AB6 00 00 00 00 
7439   3ABA 00 00 00 00 
7439   3ABE 00 00 00 00 
7439   3AC2 00 00 00 00 
7439   3AC6 00 00 00 00 
7439   3ACA 00 00 00 00 
7439   3ACE 00 00 00 00 
7439   3AD2 00 00 00 00 
7439   3AD6 00 00 00 00 
7439   3ADA 00 00 00 00 
7439   3ADE 00 00 00 00 
7439   3AE2 00 00 00 00 
7439   3AE6 00 00 00 00 
7439   3AEA 00 00 00 00 
7439   3AEE 00 00 00 00 
7439   3AF2 00 00 00 00 
7439   3AF6 00 00 00 00 
7439   3AFA 00 00 00 00 
7439   3AFE 00 00 00 00 
7439   3B02 00 00 00 00 
7439   3B06 00 00 00 00 
7439   3B0A 00 00 00 00 
7439   3B0E 00 00 00 00 
7439   3B12 00 00 00 00 
7439   3B16 00 00 00 00 
7439   3B1A 00 00 00 00 
7439   3B1E 00 00 00 00 
7439   3B22 00 00 00 00 
7439   3B26 00 00 00 00 
7439   3B2A 00 00 00 00 
7439   3B2E 00 00 00 00 
7439   3B32 00 00 00 00 
7439   3B36 00 00 00 00 
7439   3B3A 00 00 00 00 
7439   3B3E 00 00 00 00 
7439   3B42 00 00 00 00 
7439   3B46 00 00 00 00 
7439   3B4A 00 00 00 00 
7439   3B4E 00 00 00 00 
7439   3B52 00 00 00 00 
7439   3B56 00 00 
7440   3B58 00 00       _vars_tos: .fill 2, 0
7441   3B5A 70 61 74 68 __s0: .db "path", 0
7441   3B5E 00 
7442   3B5F 20 20 20 20 __s1: .db "                                                                ", 0
7442   3B63 20 20 20 20 
7442   3B67 20 20 20 20 
7442   3B6B 20 20 20 20 
7442   3B6F 20 20 20 20 
7442   3B73 20 20 20 20 
7442   3B77 20 20 20 20 
7442   3B7B 20 20 20 20 
7442   3B7F 20 20 20 20 
7442   3B83 20 20 20 20 
7442   3B87 20 20 20 20 
7442   3B8B 20 20 20 20 
7442   3B8F 20 20 20 20 
7442   3B93 20 20 20 20 
7442   3B97 20 20 20 20 
7442   3B9B 20 20 20 20 
7442   3B9F 00 
7443   3BA0 68 6F 6D 65 __s2: .db "home", 0
7443   3BA4 00 
7444   3BA5 2F 65 74 63 __s3: .db "/etc/shell.cfg", 0
7444   3BA9 2F 73 68 65 
7444   3BAD 6C 6C 2E 63 
7444   3BB1 66 67 00 
7445   3BB4 72 6F 6F 74 __s4: .db "root@Sol-1:", 0
7445   3BB8 40 53 6F 6C 
7445   3BBC 2D 31 3A 00 
7446   3BC0 20 23 20 00 __s5: .db " # ", 0
7447   3BC4 0A 0D 00    __s6: .db "\n\r", 0
7448   3BC7 63 64 00    __s7: .db "cd", 0
7449   3BCA 73 68 65 6C __s8: .db "shell", 0
7449   3BCE 6C 00 
7450   3BD0 31 32 33 00 __s9: .db "123", 0
7451   3BD4 2F 00       __s10: .db "/", 0
7452   3BD6 55 6E 6B 6E __s11: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
7452   3BDA 6F 77 6E 20 
7452   3BDE 74 79 70 65 
7452   3BE2 20 73 69 7A 
7452   3BE6 65 20 69 6E 
7452   3BEA 20 76 61 5F 
7452   3BEE 61 72 67 28 
7452   3BF2 29 20 63 61 
7452   3BF6 6C 6C 2E 20 
7452   3BFA 53 69 7A 65 
7452   3BFE 20 6E 65 65 
7452   3C02 64 73 20 74 
7452   3C06 6F 20 62 65 
7452   3C0A 20 65 69 74 
7452   3C0E 68 65 72 20 
7452   3C12 31 20 6F 72 
7452   3C16 20 32 2E 00 
7453   3C1A 45 72 72 6F __s12: .db "Error: Unknown argument type.\n", 0
7453   3C1E 72 3A 20 55 
7453   3C22 6E 6B 6E 6F 
7453   3C26 77 6E 20 61 
7453   3C2A 72 67 75 6D 
7453   3C2E 65 6E 74 20 
7453   3C32 74 79 70 65 
7453   3C36 2E 0A 00 
7454   3C39 1B 5B 32 4A __s13: .db "\033[2J\033[H", 0
7454   3C3D 1B 5B 48 00 
7455   3C41 44 6F 75 62 __s14: .db "Double quotes expected", 0
7455   3C45 6C 65 20 71 
7455   3C49 75 6F 74 65 
7455   3C4D 73 20 65 78 
7455   3C51 70 65 63 74 
7455   3C55 65 64 00 
7456   3C58 0A 45 72 72 __s15: .db "\nError: ", 0
7456   3C5C 6F 72 3A 20 
7456   3C60 00 
7457   3C61 0A 00       __s16: .db "\n", 0
7458   3C63 55 6E 64 65 __s17: .db "Undeclared variable.", 0
7458   3C67 63 6C 61 72 
7458   3C6B 65 64 20 76 
7458   3C6F 61 72 69 61 
7458   3C73 62 6C 65 2E 
7458   3C77 00 
7459   3C78 3B 00       __s18: .db ";", 0
7460   3C7A             
7461   3C7A 7C 3C       _heap_top: .dw _heap
7462   3C7C 00          _heap: .db 0
7463   3C7D             ; --- END DATA BLOCK
7464   3C7D             
7465   3C7D             .end
tasm: Number of errors = 0
