0001   0000             ; --- FILENAME: ../solarium/usr/bin/shell.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char *p; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; char *t; 
0013   040B 52 02 00      sub sp, 2
0014   040E             ; char *temp_prog; 
0015   040E 52 02 00      sub sp, 2
0016   0411             ; char varname[ID_LEN]; 
0017   0411 52 01 00      sub sp, 1
0018   0414             ; char is_assignment; 
0019   0414 52 01 00      sub sp, 1
0020   0417             ; char variable_str[128]; 
0021   0417 52 80 00      sub sp, 128
0022   041A             ; int variable_int; 
0023   041A 52 02 00      sub sp, 2
0024   041D             ; int var_index; 
0025   041D 52 02 00      sub sp, 2
0026   0420             ; int i; 
0027   0420 52 02 00      sub sp, 2
0028   0423             ; new_str_var("path", "", 64); 
0029   0423             ; --- START FUNCTION CALL
0030   0423 FD 2E 40 00   mov32 cb, $00000040
0030   0427 00 00 
0031   0429 FD AB         swp b
0032   042B D8            push b
0033   042C 26 C3 53      mov b, _s1 ; ""
0034   042F FD AB         swp b
0035   0431 D8            push b
0036   0432 26 BE 53      mov b, _s0 ; "path"
0037   0435 FD AB         swp b
0038   0437 D8            push b
0039   0438 07 B9 43      call new_str_var
0040   043B 51 06 00      add sp, 6
0041   043E             ; --- END FUNCTION CALL
0042   043E             ; new_str_var("home", "", 64); 
0043   043E             ; --- START FUNCTION CALL
0044   043E FD 2E 40 00   mov32 cb, $00000040
0044   0442 00 00 
0045   0444 FD AB         swp b
0046   0446 D8            push b
0047   0447 26 C8 53      mov b, _s2 ; ""
0048   044A FD AB         swp b
0049   044C D8            push b
0050   044D 26 C3 53      mov b, _s1 ; "home"
0051   0450 FD AB         swp b
0052   0452 D8            push b
0053   0453 07 B9 43      call new_str_var
0054   0456 51 06 00      add sp, 6
0055   0459             ; --- END FUNCTION CALL
0056   0459             ; read_config("/etc/shell.cfg", "path", variables[0].as_string); 
0057   0459             ; --- START FUNCTION CALL
0058   0459 3B E8 52      mov d, _variables_data ; $variables
0059   045C D7            push a
0060   045D DA            push d
0061   045E FD 2E 00 00   mov32 cb, $00000000
0061   0462 00 00 
0062   0464 E7            pop d
0063   0465 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0064   0469 E4            pop a
0065   046A 58 11 00      add d, 17
0066   046D 2A            mov b, [d]
0067   046E 38 00 00      mov c, 0
0068   0471 FD AB         swp b
0069   0473 D8            push b
0070   0474 26 BE 53      mov b, _s0 ; "path"
0071   0477 FD AB         swp b
0072   0479 D8            push b
0073   047A 26 C8 53      mov b, _s2 ; "/etc/shell.cfg"
0074   047D FD AB         swp b
0075   047F D8            push b
0076   0480 07 71 4A      call read_config
0077   0483 51 06 00      add sp, 6
0078   0486             ; --- END FUNCTION CALL
0079   0486             ; read_config("/etc/shell.cfg", "home", variables[1].as_string); 
0080   0486             ; --- START FUNCTION CALL
0081   0486 3B E8 52      mov d, _variables_data ; $variables
0082   0489 D7            push a
0083   048A DA            push d
0084   048B FD 2E 01 00   mov32 cb, $00000001
0084   048F 00 00 
0085   0491 E7            pop d
0086   0492 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0087   0496 E4            pop a
0088   0497 58 11 00      add d, 17
0089   049A 2A            mov b, [d]
0090   049B 38 00 00      mov c, 0
0091   049E FD AB         swp b
0092   04A0 D8            push b
0093   04A1 26 C3 53      mov b, _s1 ; "home"
0094   04A4 FD AB         swp b
0095   04A6 D8            push b
0096   04A7 26 C8 53      mov b, _s2 ; "/etc/shell.cfg"
0097   04AA FD AB         swp b
0098   04AC D8            push b
0099   04AD 07 71 4A      call read_config
0100   04B0 51 06 00      add sp, 6
0101   04B3             ; --- END FUNCTION CALL
0102   04B3             ; for(;;){ 
0103   04B3             _for1_init:
0104   04B3             _for1_cond:
0105   04B3             _for1_block:
0106   04B3             ; printf("root@Sol-1:");  
0107   04B3             ; --- START FUNCTION CALL
0108   04B3 26 D7 53      mov b, _s3 ; "root@Sol-1:"
0109   04B6 FD AB         swp b
0110   04B8 D8            push b
0111   04B9 07 F0 14      call printf
0112   04BC 51 02 00      add sp, 2
0113   04BF             ; --- END FUNCTION CALL
0114   04BF             ; print_cwd();  
0115   04BF             ; --- START FUNCTION CALL
0116   04BF 07 4E 4A      call print_cwd
0117   04C2             ; printf(" # "); 
0118   04C2             ; --- START FUNCTION CALL
0119   04C2 26 E3 53      mov b, _s4 ; " # "
0120   04C5 FD AB         swp b
0121   04C7 D8            push b
0122   04C8 07 F0 14      call printf
0123   04CB 51 02 00      add sp, 2
0124   04CE             ; --- END FUNCTION CALL
0125   04CE             ; gets(command); 
0126   04CE             ; --- START FUNCTION CALL
0127   04CE 3B 68 4D      mov d, _command_data ; $command
0128   04D1 2D            mov b, d
0129   04D2 38 00 00      mov c, 0
0130   04D5 FD AB         swp b
0131   04D7 D8            push b
0132   04D8 07 48 20      call gets
0133   04DB 51 02 00      add sp, 2
0134   04DE             ; --- END FUNCTION CALL
0135   04DE             ; printf("\n\r"); 
0136   04DE             ; --- START FUNCTION CALL
0137   04DE 26 E7 53      mov b, _s5 ; "\n\r"
0138   04E1 FD AB         swp b
0139   04E3 D8            push b
0140   04E4 07 F0 14      call printf
0141   04E7 51 02 00      add sp, 2
0142   04EA             ; --- END FUNCTION CALL
0143   04EA             ; if(command[0]) strcpy(last_cmd, command); 
0144   04EA             _if2_cond:
0145   04EA 3B 68 4D      mov d, _command_data ; $command
0146   04ED D7            push a
0147   04EE DA            push d
0148   04EF FD 2E 00 00   mov32 cb, $00000000
0148   04F3 00 00 
0149   04F5 E7            pop d
0150   04F6 5A            add d, b
0151   04F7 E4            pop a
0152   04F8 32            mov bl, [d]
0153   04F9 A7 00         mov bh, 0
0154   04FB 38 00 00      mov c, 0
0155   04FE C0 00 00      cmp b, 0
0156   0501 C6 21 05      je _if2_exit
0157   0504             _if2_TRUE:
0158   0504             ; strcpy(last_cmd, command); 
0159   0504             ; --- START FUNCTION CALL
0160   0504 3B 68 4D      mov d, _command_data ; $command
0161   0507 2D            mov b, d
0162   0508 38 00 00      mov c, 0
0163   050B FD AB         swp b
0164   050D D8            push b
0165   050E 3B 68 52      mov d, _last_cmd_data ; $last_cmd
0166   0511 2D            mov b, d
0167   0512 38 00 00      mov c, 0
0168   0515 FD AB         swp b
0169   0517 D8            push b
0170   0518 07 BF 0F      call strcpy
0171   051B 51 04 00      add sp, 4
0172   051E             ; --- END FUNCTION CALL
0173   051E 0A 21 05      jmp _if2_exit
0174   0521             _if2_exit:
0175   0521             ; prog = command; 
0176   0521 3B 64 4B      mov d, _prog ; $prog
0177   0524 DA            push d
0178   0525 3B 68 4D      mov d, _command_data ; $command
0179   0528 2D            mov b, d
0180   0529 38 00 00      mov c, 0
0181   052C E7            pop d
0182   052D FD 43         mov [d], b
0183   052F             ; for(;;){ 
0184   052F             _for3_init:
0185   052F             _for3_cond:
0186   052F             _for3_block:
0187   052F             ; temp_prog = prog; 
0188   052F FA FB FF      lea d, [bp + -5] ; $temp_prog
0189   0532 DA            push d
0190   0533 3B 64 4B      mov d, _prog ; $prog
0191   0536 2A            mov b, [d]
0192   0537 38 00 00      mov c, 0
0193   053A E7            pop d
0194   053B FD 43         mov [d], b
0195   053D             ; get(); 
0196   053D             ; --- START FUNCTION CALL
0197   053D 07 58 2F      call get
0198   0540             ; if(tok == SEMICOLON) get(); 
0199   0540             _if4_cond:
0200   0540 3B 60 4B      mov d, _tok ; $tok
0201   0543 2A            mov b, [d]
0202   0544 38 00 00      mov c, 0
0203   0547             ; --- START RELATIONAL
0204   0547 D7            push a
0205   0548 11            mov a, b
0206   0549 FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
0206   054D 00 00 
0207   054F B0            cmp a, b
0208   0550 FD 71         seq ; ==
0209   0552 E4            pop a
0210   0553             ; --- END RELATIONAL
0211   0553 C0 00 00      cmp b, 0
0212   0556 C6 5F 05      je _if4_exit
0213   0559             _if4_TRUE:
0214   0559             ; get(); 
0215   0559             ; --- START FUNCTION CALL
0216   0559 07 58 2F      call get
0217   055C 0A 5F 05      jmp _if4_exit
0218   055F             _if4_exit:
0219   055F             ; if(toktype == END) break; // check for empty input 
0220   055F             _if5_cond:
0221   055F 3B 62 4B      mov d, _toktype ; $toktype
0222   0562 2A            mov b, [d]
0223   0563 38 00 00      mov c, 0
0224   0566             ; --- START RELATIONAL
0225   0566 D7            push a
0226   0567 11            mov a, b
0227   0568 FD 2E 06 00   mov32 cb, $6 ; enum element: END
0227   056C 00 00 
0228   056E B0            cmp a, b
0229   056F FD 71         seq ; ==
0230   0571 E4            pop a
0231   0572             ; --- END RELATIONAL
0232   0572 C0 00 00      cmp b, 0
0233   0575 C6 7E 05      je _if5_exit
0234   0578             _if5_TRUE:
0235   0578             ; break; // check for empty input 
0236   0578 0A BF 0A      jmp _for3_exit ; for break
0237   057B 0A 7E 05      jmp _if5_exit
0238   057E             _if5_exit:
0239   057E             ; is_assignment = 0; 
0240   057E FA F9 FF      lea d, [bp + -7] ; $is_assignment
0241   0581 DA            push d
0242   0582 FD 2E 00 00   mov32 cb, $00000000
0242   0586 00 00 
0243   0588 E7            pop d
0244   0589 FD 3E         mov [d], bl
0245   058B             ; if(toktype == IDENTIFIER){ 
0246   058B             _if6_cond:
0247   058B 3B 62 4B      mov d, _toktype ; $toktype
0248   058E 2A            mov b, [d]
0249   058F 38 00 00      mov c, 0
0250   0592             ; --- START RELATIONAL
0251   0592 D7            push a
0252   0593 11            mov a, b
0253   0594 FD 2E 05 00   mov32 cb, $5 ; enum element: IDENTIFIER
0253   0598 00 00 
0254   059A B0            cmp a, b
0255   059B FD 71         seq ; ==
0256   059D E4            pop a
0257   059E             ; --- END RELATIONAL
0258   059E C0 00 00      cmp b, 0
0259   05A1 C6 E0 05      je _if6_exit
0260   05A4             _if6_TRUE:
0261   05A4             ; strcpy(varname, token); 
0262   05A4             ; --- START FUNCTION CALL
0263   05A4 3B 66 4B      mov d, _token_data ; $token
0264   05A7 2D            mov b, d
0265   05A8 38 00 00      mov c, 0
0266   05AB FD AB         swp b
0267   05AD D8            push b
0268   05AE FA FA FF      lea d, [bp + -6] ; $varname
0269   05B1 32            mov bl, [d]
0270   05B2 A7 00         mov bh, 0
0271   05B4 38 00 00      mov c, 0
0272   05B7 FD AB         swp b
0273   05B9 D8            push b
0274   05BA 07 BF 0F      call strcpy
0275   05BD 51 04 00      add sp, 4
0276   05C0             ; --- END FUNCTION CALL
0277   05C0             ; get(); 
0278   05C0             ; --- START FUNCTION CALL
0279   05C0 07 58 2F      call get
0280   05C3             ; is_assignment = tok == ASSIGNMENT; 
0281   05C3 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0282   05C6 DA            push d
0283   05C7 3B 60 4B      mov d, _tok ; $tok
0284   05CA 2A            mov b, [d]
0285   05CB 38 00 00      mov c, 0
0286   05CE             ; --- START RELATIONAL
0287   05CE D7            push a
0288   05CF 11            mov a, b
0289   05D0 FD 2E 11 00   mov32 cb, $11 ; enum element: ASSIGNMENT
0289   05D4 00 00 
0290   05D6 B0            cmp a, b
0291   05D7 FD 71         seq ; ==
0292   05D9 E4            pop a
0293   05DA             ; --- END RELATIONAL
0294   05DA E7            pop d
0295   05DB FD 3E         mov [d], bl
0296   05DD 0A E0 05      jmp _if6_exit
0297   05E0             _if6_exit:
0298   05E0             ; if(is_assignment){ 
0299   05E0             _if7_cond:
0300   05E0 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0301   05E3 32            mov bl, [d]
0302   05E4 A7 00         mov bh, 0
0303   05E6 38 00 00      mov c, 0
0304   05E9 C0 00 00      cmp b, 0
0305   05EC C6 CC 06      je _if7_else
0306   05EF             _if7_TRUE:
0307   05EF             ; get(); 
0308   05EF             ; --- START FUNCTION CALL
0309   05EF 07 58 2F      call get
0310   05F2             ; if(toktype == INTEGER_CONST) set_int_var(varname, atoi(token)); 
0311   05F2             _if8_cond:
0312   05F2 3B 62 4B      mov d, _toktype ; $toktype
0313   05F5 2A            mov b, [d]
0314   05F6 38 00 00      mov c, 0
0315   05F9             ; --- START RELATIONAL
0316   05F9 D7            push a
0317   05FA 11            mov a, b
0318   05FB FD 2E 04 00   mov32 cb, $4 ; enum element: INTEGER_CONST
0318   05FF 00 00 
0319   0601 B0            cmp a, b
0320   0602 FD 71         seq ; ==
0321   0604 E4            pop a
0322   0605             ; --- END RELATIONAL
0323   0605 C0 00 00      cmp b, 0
0324   0608 C6 33 06      je _if8_else
0325   060B             _if8_TRUE:
0326   060B             ; set_int_var(varname, atoi(token)); 
0327   060B             ; --- START FUNCTION CALL
0328   060B             ; --- START FUNCTION CALL
0329   060B 3B 66 4B      mov d, _token_data ; $token
0330   060E 2D            mov b, d
0331   060F 38 00 00      mov c, 0
0332   0612 FD AB         swp b
0333   0614 D8            push b
0334   0615 07 6F 12      call atoi
0335   0618 51 02 00      add sp, 2
0336   061B             ; --- END FUNCTION CALL
0337   061B FD AB         swp b
0338   061D D8            push b
0339   061E FA FA FF      lea d, [bp + -6] ; $varname
0340   0621 32            mov bl, [d]
0341   0622 A7 00         mov bh, 0
0342   0624 38 00 00      mov c, 0
0343   0627 FD AB         swp b
0344   0629 D8            push b
0345   062A 07 37 45      call set_int_var
0346   062D 51 04 00      add sp, 4
0347   0630             ; --- END FUNCTION CALL
0348   0630 0A C9 06      jmp _if8_exit
0349   0633             _if8_else:
0350   0633             ; if(toktype == STRING_CONST) new_str_var(varname, string_const, strlen(string_const)); 
0351   0633             _if9_cond:
0352   0633 3B 62 4B      mov d, _toktype ; $toktype
0353   0636 2A            mov b, [d]
0354   0637 38 00 00      mov c, 0
0355   063A             ; --- START RELATIONAL
0356   063A D7            push a
0357   063B 11            mov a, b
0358   063C FD 2E 03 00   mov32 cb, $3 ; enum element: STRING_CONST
0358   0640 00 00 
0359   0642 B0            cmp a, b
0360   0643 FD 71         seq ; ==
0361   0645 E4            pop a
0362   0646             ; --- END RELATIONAL
0363   0646 C0 00 00      cmp b, 0
0364   0649 C6 7E 06      je _if9_else
0365   064C             _if9_TRUE:
0366   064C             ; new_str_var(varname, string_const, strlen(string_const)); 
0367   064C             ; --- START FUNCTION CALL
0368   064C             ; --- START FUNCTION CALL
0369   064C 3B 66 4C      mov d, _string_const_data ; $string_const
0370   064F 2D            mov b, d
0371   0650 38 00 00      mov c, 0
0372   0653 FD AB         swp b
0373   0655 D8            push b
0374   0656 07 A5 11      call strlen
0375   0659 51 02 00      add sp, 2
0376   065C             ; --- END FUNCTION CALL
0377   065C FD AB         swp b
0378   065E D8            push b
0379   065F 3B 66 4C      mov d, _string_const_data ; $string_const
0380   0662 2D            mov b, d
0381   0663 38 00 00      mov c, 0
0382   0666 FD AB         swp b
0383   0668 D8            push b
0384   0669 FA FA FF      lea d, [bp + -6] ; $varname
0385   066C 32            mov bl, [d]
0386   066D A7 00         mov bh, 0
0387   066F 38 00 00      mov c, 0
0388   0672 FD AB         swp b
0389   0674 D8            push b
0390   0675 07 B9 43      call new_str_var
0391   0678 51 06 00      add sp, 6
0392   067B             ; --- END FUNCTION CALL
0393   067B 0A C9 06      jmp _if9_exit
0394   067E             _if9_else:
0395   067E             ; if(toktype == IDENTIFIER) new_str_var(varname, token, strlen(token)); 
0396   067E             _if10_cond:
0397   067E 3B 62 4B      mov d, _toktype ; $toktype
0398   0681 2A            mov b, [d]
0399   0682 38 00 00      mov c, 0
0400   0685             ; --- START RELATIONAL
0401   0685 D7            push a
0402   0686 11            mov a, b
0403   0687 FD 2E 05 00   mov32 cb, $5 ; enum element: IDENTIFIER
0403   068B 00 00 
0404   068D B0            cmp a, b
0405   068E FD 71         seq ; ==
0406   0690 E4            pop a
0407   0691             ; --- END RELATIONAL
0408   0691 C0 00 00      cmp b, 0
0409   0694 C6 C9 06      je _if10_exit
0410   0697             _if10_TRUE:
0411   0697             ; new_str_var(varname, token, strlen(token)); 
0412   0697             ; --- START FUNCTION CALL
0413   0697             ; --- START FUNCTION CALL
0414   0697 3B 66 4B      mov d, _token_data ; $token
0415   069A 2D            mov b, d
0416   069B 38 00 00      mov c, 0
0417   069E FD AB         swp b
0418   06A0 D8            push b
0419   06A1 07 A5 11      call strlen
0420   06A4 51 02 00      add sp, 2
0421   06A7             ; --- END FUNCTION CALL
0422   06A7 FD AB         swp b
0423   06A9 D8            push b
0424   06AA 3B 66 4B      mov d, _token_data ; $token
0425   06AD 2D            mov b, d
0426   06AE 38 00 00      mov c, 0
0427   06B1 FD AB         swp b
0428   06B3 D8            push b
0429   06B4 FA FA FF      lea d, [bp + -6] ; $varname
0430   06B7 32            mov bl, [d]
0431   06B8 A7 00         mov bh, 0
0432   06BA 38 00 00      mov c, 0
0433   06BD FD AB         swp b
0434   06BF D8            push b
0435   06C0 07 B9 43      call new_str_var
0436   06C3 51 06 00      add sp, 6
0437   06C6             ; --- END FUNCTION CALL
0438   06C6 0A C9 06      jmp _if10_exit
0439   06C9             _if10_exit:
0440   06C9             _if9_exit:
0441   06C9             _if8_exit:
0442   06C9 0A BC 0A      jmp _if7_exit
0443   06CC             _if7_else:
0444   06CC             ; prog = temp_prog; 
0445   06CC 3B 64 4B      mov d, _prog ; $prog
0446   06CF DA            push d
0447   06D0 FA FB FF      lea d, [bp + -5] ; $temp_prog
0448   06D3 2A            mov b, [d]
0449   06D4 38 00 00      mov c, 0
0450   06D7 E7            pop d
0451   06D8 FD 43         mov [d], b
0452   06DA             ; get(); 
0453   06DA             ; --- START FUNCTION CALL
0454   06DA 07 58 2F      call get
0455   06DD             ; if(!strcmp(token, "cd")) command_cd(); 
0456   06DD             _if11_cond:
0457   06DD             ; --- START FUNCTION CALL
0458   06DD 26 EA 53      mov b, _s6 ; "cd"
0459   06E0 FD AB         swp b
0460   06E2 D8            push b
0461   06E3 3B 66 4B      mov d, _token_data ; $token
0462   06E6 2D            mov b, d
0463   06E7 38 00 00      mov c, 0
0464   06EA FD AB         swp b
0465   06EC D8            push b
0466   06ED 07 39 10      call strcmp
0467   06F0 51 04 00      add sp, 4
0468   06F3             ; --- END FUNCTION CALL
0469   06F3 C0 00 00      cmp b, 0
0470   06F6 C6 FF 06      je _if11_else
0471   06F9             _if11_TRUE:
0472   06F9             ; command_cd(); 
0473   06F9             ; --- START FUNCTION CALL
0474   06F9 07 16 49      call command_cd
0475   06FC 0A BC 0A      jmp _if11_exit
0476   06FF             _if11_else:
0477   06FF             ; if(!strcmp(token, "shell")) command_shell(); 
0478   06FF             _if12_cond:
0479   06FF             ; --- START FUNCTION CALL
0480   06FF 26 ED 53      mov b, _s7 ; "shell"
0481   0702 FD AB         swp b
0482   0704 D8            push b
0483   0705 3B 66 4B      mov d, _token_data ; $token
0484   0708 2D            mov b, d
0485   0709 38 00 00      mov c, 0
0486   070C FD AB         swp b
0487   070E D8            push b
0488   070F 07 39 10      call strcmp
0489   0712 51 04 00      add sp, 4
0490   0715             ; --- END FUNCTION CALL
0491   0715 C0 00 00      cmp b, 0
0492   0718 C6 21 07      je _if12_else
0493   071B             _if12_TRUE:
0494   071B             ; command_shell(); 
0495   071B             ; --- START FUNCTION CALL
0496   071B 07 67 4A      call command_shell
0497   071E 0A BC 0A      jmp _if12_exit
0498   0721             _if12_else:
0499   0721             ; back(); 
0500   0721             ; --- START FUNCTION CALL
0501   0721 07 FA 2C      call back
0502   0724             ; get_path(); 
0503   0724             ; --- START FUNCTION CALL
0504   0724 07 72 2D      call get_path
0505   0727             ; strcpy(path, token); // save file path 
0506   0727             ; --- START FUNCTION CALL
0507   0727 3B 66 4B      mov d, _token_data ; $token
0508   072A 2D            mov b, d
0509   072B 38 00 00      mov c, 0
0510   072E FD AB         swp b
0511   0730 D8            push b
0512   0731 3B 68 4F      mov d, _path_data ; $path
0513   0734 2D            mov b, d
0514   0735 38 00 00      mov c, 0
0515   0738 FD AB         swp b
0516   073A D8            push b
0517   073B 07 BF 0F      call strcpy
0518   073E 51 04 00      add sp, 4
0519   0741             ; --- END FUNCTION CALL
0520   0741             ; for(i = 0; i < 256; i++) argument[i] = 0; 
0521   0741             _for13_init:
0522   0741 FA 73 FF      lea d, [bp + -141] ; $i
0523   0744 DA            push d
0524   0745 FD 2E 00 00   mov32 cb, $00000000
0524   0749 00 00 
0525   074B E7            pop d
0526   074C FD 43         mov [d], b
0527   074E             _for13_cond:
0528   074E FA 73 FF      lea d, [bp + -141] ; $i
0529   0751 2A            mov b, [d]
0530   0752 38 00 00      mov c, 0
0531   0755             ; --- START RELATIONAL
0532   0755 D7            push a
0533   0756 11            mov a, b
0534   0757 FD 2E 00 01   mov32 cb, $00000100
0534   075B 00 00 
0535   075D B0            cmp a, b
0536   075E FD 73         slt ; < (signed)
0537   0760 E4            pop a
0538   0761             ; --- END RELATIONAL
0539   0761 C0 00 00      cmp b, 0
0540   0764 C6 93 07      je _for13_exit
0541   0767             _for13_block:
0542   0767             ; argument[i] = 0; 
0543   0767 3B 68 51      mov d, _argument_data ; $argument
0544   076A D7            push a
0545   076B DA            push d
0546   076C FA 73 FF      lea d, [bp + -141] ; $i
0547   076F 2A            mov b, [d]
0548   0770 38 00 00      mov c, 0
0549   0773 E7            pop d
0550   0774 5A            add d, b
0551   0775 E4            pop a
0552   0776 DA            push d
0553   0777 FD 2E 00 00   mov32 cb, $00000000
0553   077B 00 00 
0554   077D E7            pop d
0555   077E FD 3E         mov [d], bl
0556   0780             _for13_update:
0557   0780 FA 73 FF      lea d, [bp + -141] ; $i
0558   0783 2A            mov b, [d]
0559   0784 38 00 00      mov c, 0
0560   0787 11            mov a, b
0561   0788 FD 77         inc b
0562   078A FA 73 FF      lea d, [bp + -141] ; $i
0563   078D FD 43         mov [d], b
0564   078F 27            mov b, a
0565   0790 0A 4E 07      jmp _for13_cond
0566   0793             _for13_exit:
0567   0793             ; get(); 
0568   0793             ; --- START FUNCTION CALL
0569   0793 07 58 2F      call get
0570   0796             ; if(tok != SEMICOLON && toktype != END){ 
0571   0796             _if14_cond:
0572   0796 3B 60 4B      mov d, _tok ; $tok
0573   0799 2A            mov b, [d]
0574   079A 38 00 00      mov c, 0
0575   079D             ; --- START RELATIONAL
0576   079D D7            push a
0577   079E 11            mov a, b
0578   079F FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
0578   07A3 00 00 
0579   07A5 B0            cmp a, b
0580   07A6 FD 72         sneq ; !=
0581   07A8 E4            pop a
0582   07A9             ; --- END RELATIONAL
0583   07A9             ; --- START LOGICAL AND
0584   07A9 D7            push a
0585   07AA 11            mov a, b
0586   07AB 3B 62 4B      mov d, _toktype ; $toktype
0587   07AE 2A            mov b, [d]
0588   07AF 38 00 00      mov c, 0
0589   07B2             ; --- START RELATIONAL
0590   07B2 D7            push a
0591   07B3 11            mov a, b
0592   07B4 FD 2E 06 00   mov32 cb, $6 ; enum element: END
0592   07B8 00 00 
0593   07BA B0            cmp a, b
0594   07BB FD 72         sneq ; !=
0595   07BD E4            pop a
0596   07BE             ; --- END RELATIONAL
0597   07BE FD A7         sand a, b
0598   07C0 E4            pop a
0599   07C1             ; --- END LOGICAL AND
0600   07C1 C0 00 00      cmp b, 0
0601   07C4 C6 6B 09      je _if14_exit
0602   07C7             _if14_TRUE:
0603   07C7             ; back(); 
0604   07C7             ; --- START FUNCTION CALL
0605   07C7 07 FA 2C      call back
0606   07CA             ; p = argument; 
0607   07CA FA FF FF      lea d, [bp + -1] ; $p
0608   07CD DA            push d
0609   07CE 3B 68 51      mov d, _argument_data ; $argument
0610   07D1 2D            mov b, d
0611   07D2 38 00 00      mov c, 0
0612   07D5 E7            pop d
0613   07D6 FD 43         mov [d], b
0614   07D8             ; do{ 
0615   07D8             _do15_block:
0616   07D8             ; if(*prog == '$'){ 
0617   07D8             _if16_cond:
0618   07D8 3B 64 4B      mov d, _prog ; $prog
0619   07DB 2A            mov b, [d]
0620   07DC 38 00 00      mov c, 0
0621   07DF 74            mov d, b
0622   07E0 32            mov bl, [d]
0623   07E1 A7 00         mov bh, 0
0624   07E3 38 00 00      mov c, 0
0625   07E6             ; --- START RELATIONAL
0626   07E6 D7            push a
0627   07E7 11            mov a, b
0628   07E8 FD 2E 24 00   mov32 cb, $00000024
0628   07EC 00 00 
0629   07EE B0            cmp a, b
0630   07EF FD 71         seq ; ==
0631   07F1 E4            pop a
0632   07F2             ; --- END RELATIONAL
0633   07F2 C0 00 00      cmp b, 0
0634   07F5 C6 ED 08      je _if16_else
0635   07F8             _if16_TRUE:
0636   07F8             ; prog++; 
0637   07F8 3B 64 4B      mov d, _prog ; $prog
0638   07FB 2A            mov b, [d]
0639   07FC 38 00 00      mov c, 0
0640   07FF FD 77         inc b
0641   0801 3B 64 4B      mov d, _prog ; $prog
0642   0804 FD 43         mov [d], b
0643   0806 FD 7D         dec b
0644   0808             ; get(); // get variable name 
0645   0808             ; --- START FUNCTION CALL
0646   0808 07 58 2F      call get
0647   080B             ; var_index = get_var_index(token); 
0648   080B FA 75 FF      lea d, [bp + -139] ; $var_index
0649   080E DA            push d
0650   080F             ; --- START FUNCTION CALL
0651   080F 3B 66 4B      mov d, _token_data ; $token
0652   0812 2D            mov b, d
0653   0813 38 00 00      mov c, 0
0654   0816 FD AB         swp b
0655   0818 D8            push b
0656   0819 07 64 46      call get_var_index
0657   081C 51 02 00      add sp, 2
0658   081F             ; --- END FUNCTION CALL
0659   081F E7            pop d
0660   0820 FD 43         mov [d], b
0661   0822             ; if(var_index != -1){ 
0662   0822             _if17_cond:
0663   0822 FA 75 FF      lea d, [bp + -139] ; $var_index
0664   0825 2A            mov b, [d]
0665   0826 38 00 00      mov c, 0
0666   0829             ; --- START RELATIONAL
0667   0829 D7            push a
0668   082A 11            mov a, b
0669   082B FD 2E 01 00   mov32 cb, $00000001
0669   082F 00 00 
0670   0831 FD 97         neg b
0671   0833 B0            cmp a, b
0672   0834 FD 72         sneq ; !=
0673   0836 E4            pop a
0674   0837             ; --- END RELATIONAL
0675   0837 C0 00 00      cmp b, 0
0676   083A C6 EA 08      je _if17_exit
0677   083D             _if17_TRUE:
0678   083D             ; if(get_var_type(token) == SHELL_VAR_TYP_INT) strcat(argument, "123"); 
0679   083D             _if18_cond:
0680   083D             ; --- START FUNCTION CALL
0681   083D 3B 66 4B      mov d, _token_data ; $token
0682   0840 2D            mov b, d
0683   0841 38 00 00      mov c, 0
0684   0844 FD AB         swp b
0685   0846 D8            push b
0686   0847 07 EC 46      call get_var_type
0687   084A 51 02 00      add sp, 2
0688   084D             ; --- END FUNCTION CALL
0689   084D             ; --- START RELATIONAL
0690   084D D7            push a
0691   084E 11            mov a, b
0692   084F FD 2E 01 00   mov32 cb, $1 ; enum element: SHELL_VAR_TYP_INT
0692   0853 00 00 
0693   0855 B0            cmp a, b
0694   0856 FD 71         seq ; ==
0695   0858 E4            pop a
0696   0859             ; --- END RELATIONAL
0697   0859 C0 00 00      cmp b, 0
0698   085C C6 78 08      je _if18_else
0699   085F             _if18_TRUE:
0700   085F             ; strcat(argument, "123"); 
0701   085F             ; --- START FUNCTION CALL
0702   085F 26 F3 53      mov b, _s8 ; "123"
0703   0862 FD AB         swp b
0704   0864 D8            push b
0705   0865 3B 68 51      mov d, _argument_data ; $argument
0706   0868 2D            mov b, d
0707   0869 38 00 00      mov c, 0
0708   086C FD AB         swp b
0709   086E D8            push b
0710   086F 07 C2 10      call strcat
0711   0872 51 04 00      add sp, 4
0712   0875             ; --- END FUNCTION CALL
0713   0875 0A C0 08      jmp _if18_exit
0714   0878             _if18_else:
0715   0878             ; if(get_var_type(token) == SHELL_VAR_TYP_STR) strcat(argument, get_shell_var_strval(var_index)); 
0716   0878             _if19_cond:
0717   0878             ; --- START FUNCTION CALL
0718   0878 3B 66 4B      mov d, _token_data ; $token
0719   087B 2D            mov b, d
0720   087C 38 00 00      mov c, 0
0721   087F FD AB         swp b
0722   0881 D8            push b
0723   0882 07 EC 46      call get_var_type
0724   0885 51 02 00      add sp, 2
0725   0888             ; --- END FUNCTION CALL
0726   0888             ; --- START RELATIONAL
0727   0888 D7            push a
0728   0889 11            mov a, b
0729   088A FD 2E 00 00   mov32 cb, $0 ; enum element: SHELL_VAR_TYP_STR
0729   088E 00 00 
0730   0890 B0            cmp a, b
0731   0891 FD 71         seq ; ==
0732   0893 E4            pop a
0733   0894             ; --- END RELATIONAL
0734   0894 C0 00 00      cmp b, 0
0735   0897 C6 C0 08      je _if19_exit
0736   089A             _if19_TRUE:
0737   089A             ; strcat(argument, get_shell_var_strval(var_index)); 
0738   089A             ; --- START FUNCTION CALL
0739   089A             ; --- START FUNCTION CALL
0740   089A FA 75 FF      lea d, [bp + -139] ; $var_index
0741   089D 2A            mov b, [d]
0742   089E 38 00 00      mov c, 0
0743   08A1 FD AB         swp b
0744   08A3 D8            push b
0745   08A4 07 BE 48      call get_shell_var_strval
0746   08A7 51 02 00      add sp, 2
0747   08AA             ; --- END FUNCTION CALL
0748   08AA FD AB         swp b
0749   08AC D8            push b
0750   08AD 3B 68 51      mov d, _argument_data ; $argument
0751   08B0 2D            mov b, d
0752   08B1 38 00 00      mov c, 0
0753   08B4 FD AB         swp b
0754   08B6 D8            push b
0755   08B7 07 C2 10      call strcat
0756   08BA 51 04 00      add sp, 4
0757   08BD             ; --- END FUNCTION CALL
0758   08BD 0A C0 08      jmp _if19_exit
0759   08C0             _if19_exit:
0760   08C0             _if18_exit:
0761   08C0             ; while(*p) p++; 
0762   08C0             _while20_cond:
0763   08C0 FA FF FF      lea d, [bp + -1] ; $p
0764   08C3 2A            mov b, [d]
0765   08C4 38 00 00      mov c, 0
0766   08C7 74            mov d, b
0767   08C8 32            mov bl, [d]
0768   08C9 A7 00         mov bh, 0
0769   08CB 38 00 00      mov c, 0
0770   08CE C0 00 00      cmp b, 0
0771   08D1 C6 E7 08      je _while20_exit
0772   08D4             _while20_block:
0773   08D4             ; p++; 
0774   08D4 FA FF FF      lea d, [bp + -1] ; $p
0775   08D7 2A            mov b, [d]
0776   08D8 38 00 00      mov c, 0
0777   08DB FD 77         inc b
0778   08DD FA FF FF      lea d, [bp + -1] ; $p
0779   08E0 FD 43         mov [d], b
0780   08E2 FD 7D         dec b
0781   08E4 0A C0 08      jmp _while20_cond
0782   08E7             _while20_exit:
0783   08E7 0A EA 08      jmp _if17_exit
0784   08EA             _if17_exit:
0785   08EA 0A 18 09      jmp _if16_exit
0786   08ED             _if16_else:
0787   08ED             ; *p++ = *prog++; 
0788   08ED FA FF FF      lea d, [bp + -1] ; $p
0789   08F0 2A            mov b, [d]
0790   08F1 38 00 00      mov c, 0
0791   08F4 FD 77         inc b
0792   08F6 FA FF FF      lea d, [bp + -1] ; $p
0793   08F9 FD 43         mov [d], b
0794   08FB FD 7D         dec b
0795   08FD D8            push b
0796   08FE 3B 64 4B      mov d, _prog ; $prog
0797   0901 2A            mov b, [d]
0798   0902 38 00 00      mov c, 0
0799   0905 FD 77         inc b
0800   0907 3B 64 4B      mov d, _prog ; $prog
0801   090A FD 43         mov [d], b
0802   090C FD 7D         dec b
0803   090E 74            mov d, b
0804   090F 32            mov bl, [d]
0805   0910 A7 00         mov bh, 0
0806   0912 38 00 00      mov c, 0
0807   0915 E7            pop d
0808   0916 FD 3E         mov [d], bl
0809   0918             _if16_exit:
0810   0918             ; } while(*prog != '\0' && *prog != ';'); 
0811   0918             _do15_cond:
0812   0918 3B 64 4B      mov d, _prog ; $prog
0813   091B 2A            mov b, [d]
0814   091C 38 00 00      mov c, 0
0815   091F 74            mov d, b
0816   0920 32            mov bl, [d]
0817   0921 A7 00         mov bh, 0
0818   0923 38 00 00      mov c, 0
0819   0926             ; --- START RELATIONAL
0820   0926 D7            push a
0821   0927 11            mov a, b
0822   0928 FD 2E 00 00   mov32 cb, $00000000
0822   092C 00 00 
0823   092E B0            cmp a, b
0824   092F FD 72         sneq ; !=
0825   0931 E4            pop a
0826   0932             ; --- END RELATIONAL
0827   0932             ; --- START LOGICAL AND
0828   0932 D7            push a
0829   0933 11            mov a, b
0830   0934 3B 64 4B      mov d, _prog ; $prog
0831   0937 2A            mov b, [d]
0832   0938 38 00 00      mov c, 0
0833   093B 74            mov d, b
0834   093C 32            mov bl, [d]
0835   093D A7 00         mov bh, 0
0836   093F 38 00 00      mov c, 0
0837   0942             ; --- START RELATIONAL
0838   0942 D7            push a
0839   0943 11            mov a, b
0840   0944 FD 2E 3B 00   mov32 cb, $0000003b
0840   0948 00 00 
0841   094A B0            cmp a, b
0842   094B FD 72         sneq ; !=
0843   094D E4            pop a
0844   094E             ; --- END RELATIONAL
0845   094E FD A7         sand a, b
0846   0950 E4            pop a
0847   0951             ; --- END LOGICAL AND
0848   0951 C0 01 00      cmp b, 1
0849   0954 C6 D8 07      je _do15_block
0850   0957             _do15_exit:
0851   0957             ; *p = '\0'; 
0852   0957 FA FF FF      lea d, [bp + -1] ; $p
0853   095A 2A            mov b, [d]
0854   095B 38 00 00      mov c, 0
0855   095E D8            push b
0856   095F FD 2E 00 00   mov32 cb, $00000000
0856   0963 00 00 
0857   0965 E7            pop d
0858   0966 FD 3E         mov [d], bl
0859   0968 0A 6B 09      jmp _if14_exit
0860   096B             _if14_exit:
0861   096B             ; if(*path == '/' || *path == '.') spawn_new_proc(path, argument); 
0862   096B             _if21_cond:
0863   096B 3B 68 4F      mov d, _path_data ; $path
0864   096E 2D            mov b, d
0865   096F 38 00 00      mov c, 0
0866   0972 74            mov d, b
0867   0973 32            mov bl, [d]
0868   0974 A7 00         mov bh, 0
0869   0976 38 00 00      mov c, 0
0870   0979             ; --- START RELATIONAL
0871   0979 D7            push a
0872   097A 11            mov a, b
0873   097B FD 2E 2F 00   mov32 cb, $0000002f
0873   097F 00 00 
0874   0981 B0            cmp a, b
0875   0982 FD 71         seq ; ==
0876   0984 E4            pop a
0877   0985             ; --- END RELATIONAL
0878   0985             ; --- START LOGICAL OR
0879   0985 D7            push a
0880   0986 11            mov a, b
0881   0987 3B 68 4F      mov d, _path_data ; $path
0882   098A 2D            mov b, d
0883   098B 38 00 00      mov c, 0
0884   098E 74            mov d, b
0885   098F 32            mov bl, [d]
0886   0990 A7 00         mov bh, 0
0887   0992 38 00 00      mov c, 0
0888   0995             ; --- START RELATIONAL
0889   0995 D7            push a
0890   0996 11            mov a, b
0891   0997 FD 2E 2E 00   mov32 cb, $0000002e
0891   099B 00 00 
0892   099D B0            cmp a, b
0893   099E FD 71         seq ; ==
0894   09A0 E4            pop a
0895   09A1             ; --- END RELATIONAL
0896   09A1 FD A8         sor a, b ; ||
0897   09A3 E4            pop a
0898   09A4             ; --- END LOGICAL OR
0899   09A4 C0 00 00      cmp b, 0
0900   09A7 C6 C7 09      je _if21_else
0901   09AA             _if21_TRUE:
0902   09AA             ; spawn_new_proc(path, argument); 
0903   09AA             ; --- START FUNCTION CALL
0904   09AA 3B 68 51      mov d, _argument_data ; $argument
0905   09AD 2D            mov b, d
0906   09AE 38 00 00      mov c, 0
0907   09B1 FD AB         swp b
0908   09B3 D8            push b
0909   09B4 3B 68 4F      mov d, _path_data ; $path
0910   09B7 2D            mov b, d
0911   09B8 38 00 00      mov c, 0
0912   09BB FD AB         swp b
0913   09BD D8            push b
0914   09BE 07 57 4A      call spawn_new_proc
0915   09C1 51 04 00      add sp, 4
0916   09C4             ; --- END FUNCTION CALL
0917   09C4 0A BC 0A      jmp _if21_exit
0918   09C7             _if21_else:
0919   09C7             ; temp_prog = prog; 
0920   09C7 FA FB FF      lea d, [bp + -5] ; $temp_prog
0921   09CA DA            push d
0922   09CB 3B 64 4B      mov d, _prog ; $prog
0923   09CE 2A            mov b, [d]
0924   09CF 38 00 00      mov c, 0
0925   09D2 E7            pop d
0926   09D3 FD 43         mov [d], b
0927   09D5             ; prog = variables[0].as_string; 
0928   09D5 3B 64 4B      mov d, _prog ; $prog
0929   09D8 DA            push d
0930   09D9 3B E8 52      mov d, _variables_data ; $variables
0931   09DC D7            push a
0932   09DD DA            push d
0933   09DE FD 2E 00 00   mov32 cb, $00000000
0933   09E2 00 00 
0934   09E4 E7            pop d
0935   09E5 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0936   09E9 E4            pop a
0937   09EA 58 11 00      add d, 17
0938   09ED 2A            mov b, [d]
0939   09EE 38 00 00      mov c, 0
0940   09F1 E7            pop d
0941   09F2 FD 43         mov [d], b
0942   09F4             ; for(;;){ 
0943   09F4             _for22_init:
0944   09F4             _for22_cond:
0945   09F4             _for22_block:
0946   09F4             ; get(); 
0947   09F4             ; --- START FUNCTION CALL
0948   09F4 07 58 2F      call get
0949   09F7             ; if(toktype == END){ 
0950   09F7             _if23_cond:
0951   09F7 3B 62 4B      mov d, _toktype ; $toktype
0952   09FA 2A            mov b, [d]
0953   09FB 38 00 00      mov c, 0
0954   09FE             ; --- START RELATIONAL
0955   09FE D7            push a
0956   09FF 11            mov a, b
0957   0A00 FD 2E 06 00   mov32 cb, $6 ; enum element: END
0957   0A04 00 00 
0958   0A06 B0            cmp a, b
0959   0A07 FD 71         seq ; ==
0960   0A09 E4            pop a
0961   0A0A             ; --- END RELATIONAL
0962   0A0A C0 00 00      cmp b, 0
0963   0A0D C6 16 0A      je _if23_else
0964   0A10             _if23_TRUE:
0965   0A10             ; break; 
0966   0A10 0A AE 0A      jmp _for22_exit ; for break
0967   0A13 0A 19 0A      jmp _if23_exit
0968   0A16             _if23_else:
0969   0A16             ; back(); 
0970   0A16             ; --- START FUNCTION CALL
0971   0A16 07 FA 2C      call back
0972   0A19             _if23_exit:
0973   0A19             ; get_path(); 
0974   0A19             ; --- START FUNCTION CALL
0975   0A19 07 72 2D      call get_path
0976   0A1C             ; strcpy(temp, token); 
0977   0A1C             ; --- START FUNCTION CALL
0978   0A1C 3B 66 4B      mov d, _token_data ; $token
0979   0A1F 2D            mov b, d
0980   0A20 38 00 00      mov c, 0
0981   0A23 FD AB         swp b
0982   0A25 D8            push b
0983   0A26 3B 68 50      mov d, _temp_data ; $temp
0984   0A29 2D            mov b, d
0985   0A2A 38 00 00      mov c, 0
0986   0A2D FD AB         swp b
0987   0A2F D8            push b
0988   0A30 07 BF 0F      call strcpy
0989   0A33 51 04 00      add sp, 4
0990   0A36             ; --- END FUNCTION CALL
0991   0A36             ; strcat(temp, "/"); 
0992   0A36             ; --- START FUNCTION CALL
0993   0A36 26 F7 53      mov b, _s9 ; "/"
0994   0A39 FD AB         swp b
0995   0A3B D8            push b
0996   0A3C 3B 68 50      mov d, _temp_data ; $temp
0997   0A3F 2D            mov b, d
0998   0A40 38 00 00      mov c, 0
0999   0A43 FD AB         swp b
1000   0A45 D8            push b
1001   0A46 07 C2 10      call strcat
1002   0A49 51 04 00      add sp, 4
1003   0A4C             ; --- END FUNCTION CALL
1004   0A4C             ; strcat(temp, path); // form full filepath with ENV_PATH + given filename 
1005   0A4C             ; --- START FUNCTION CALL
1006   0A4C 3B 68 4F      mov d, _path_data ; $path
1007   0A4F 2D            mov b, d
1008   0A50 38 00 00      mov c, 0
1009   0A53 FD AB         swp b
1010   0A55 D8            push b
1011   0A56 3B 68 50      mov d, _temp_data ; $temp
1012   0A59 2D            mov b, d
1013   0A5A 38 00 00      mov c, 0
1014   0A5D FD AB         swp b
1015   0A5F D8            push b
1016   0A60 07 C2 10      call strcat
1017   0A63 51 04 00      add sp, 4
1018   0A66             ; --- END FUNCTION CALL
1019   0A66             ; if(file_exists(temp) != 0){ 
1020   0A66             _if24_cond:
1021   0A66             ; --- START FUNCTION CALL
1022   0A66 3B 68 50      mov d, _temp_data ; $temp
1023   0A69 2D            mov b, d
1024   0A6A 38 00 00      mov c, 0
1025   0A6D FD AB         swp b
1026   0A6F D8            push b
1027   0A70 07 FA 48      call file_exists
1028   0A73 51 02 00      add sp, 2
1029   0A76             ; --- END FUNCTION CALL
1030   0A76             ; --- START RELATIONAL
1031   0A76 D7            push a
1032   0A77 11            mov a, b
1033   0A78 FD 2E 00 00   mov32 cb, $00000000
1033   0A7C 00 00 
1034   0A7E B0            cmp a, b
1035   0A7F FD 72         sneq ; !=
1036   0A81 E4            pop a
1037   0A82             ; --- END RELATIONAL
1038   0A82 C0 00 00      cmp b, 0
1039   0A85 C6 A8 0A      je _if24_exit
1040   0A88             _if24_TRUE:
1041   0A88             ; spawn_new_proc(temp, argument); 
1042   0A88             ; --- START FUNCTION CALL
1043   0A88 3B 68 51      mov d, _argument_data ; $argument
1044   0A8B 2D            mov b, d
1045   0A8C 38 00 00      mov c, 0
1046   0A8F FD AB         swp b
1047   0A91 D8            push b
1048   0A92 3B 68 50      mov d, _temp_data ; $temp
1049   0A95 2D            mov b, d
1050   0A96 38 00 00      mov c, 0
1051   0A99 FD AB         swp b
1052   0A9B D8            push b
1053   0A9C 07 57 4A      call spawn_new_proc
1054   0A9F 51 04 00      add sp, 4
1055   0AA2             ; --- END FUNCTION CALL
1056   0AA2             ; break; 
1057   0AA2 0A AE 0A      jmp _for22_exit ; for break
1058   0AA5 0A A8 0A      jmp _if24_exit
1059   0AA8             _if24_exit:
1060   0AA8             ; get(); // get separator 
1061   0AA8             ; --- START FUNCTION CALL
1062   0AA8 07 58 2F      call get
1063   0AAB             _for22_update:
1064   0AAB 0A F4 09      jmp _for22_cond
1065   0AAE             _for22_exit:
1066   0AAE             ; prog = temp_prog; 
1067   0AAE 3B 64 4B      mov d, _prog ; $prog
1068   0AB1 DA            push d
1069   0AB2 FA FB FF      lea d, [bp + -5] ; $temp_prog
1070   0AB5 2A            mov b, [d]
1071   0AB6 38 00 00      mov c, 0
1072   0AB9 E7            pop d
1073   0ABA FD 43         mov [d], b
1074   0ABC             _if21_exit:
1075   0ABC             _if12_exit:
1076   0ABC             _if11_exit:
1077   0ABC             _if7_exit:
1078   0ABC             _for3_update:
1079   0ABC 0A 2F 05      jmp _for3_cond
1080   0ABF             _for3_exit:
1081   0ABF             _for1_update:
1082   0ABF 0A B3 04      jmp _for1_cond
1083   0AC2             _for1_exit:
1084   0AC2 05 0B         syscall sys_terminate_proc
1085   0AC4             
1086   0AC4             include_ctype_lib:
1087   0AC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1088   0AC7             
1089   0AC7             ; --- BEGIN INLINE ASM SEGMENT
1090   0AC7             .include "lib/asm/ctype.asm"
0001+  0AC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AC7             ; ctype.s
0003+  0AC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AC7             
0005+  0AC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AC7             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AC7             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AC7             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AC7             ;; characters are supported.
0010+  0AC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AC7             ;; _isalnum 
0012+  0AC7             ;; _isalpha 
0013+  0AC7             ;; islower 
0014+  0AC7             ;; isupper 
0015+  0AC7             ;; _isdigit 
0016+  0AC7             ;; isxdigit
0017+  0AC7             ;; iscntrl 
0018+  0AC7             ;; isgraph 
0019+  0AC7             ;; _isspace 
0020+  0AC7             ;; isblank 
0021+  0AC7             ;; isprint 
0022+  0AC7             ;; ispunct 
0023+  0AC7             ;; tolower 
0024+  0AC7             ;; toupper
0025+  0AC7             
0026+  0AC7             
0027+  0AC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AC7             ;; IS ALPHANUMERIC
0029+  0AC7             ;; sets ZF according with result
0030+  0AC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AC7             _isalnum:
0032+  0AC7 07 E4 0A    	call _isalpha
0033+  0ACA C6 D0 0A    	je _isalnum_exit
0034+  0ACD 07 D1 0A    	call _isdigit
0035+  0AD0             _isalnum_exit:
0036+  0AD0 09          	ret	
0037+  0AD1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AD1             ;; IS DIGIT
0039+  0AD1             ;; sets ZF according with result
0040+  0AD1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AD1             _isdigit:
0042+  0AD1 DB          	push al
0043+  0AD2 B9 30       	cmp al, '0'
0044+  0AD4 C8 E0 0A    	jlu _isdigit_false
0045+  0AD7 B9 39       	cmp al, '9'
0046+  0AD9 D1 E0 0A    	jgu _isdigit_false
0047+  0ADC 87 00       	and al, 0	; set ZF
0048+  0ADE E8          	pop al
0049+  0ADF 09          	ret
0050+  0AE0             _isdigit_false:
0051+  0AE0 8B 01       	or al, 1	; clear ZF
0052+  0AE2 E8          	pop al
0053+  0AE3 09          	ret	
0054+  0AE4             	
0055+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AE4             ;; IS ALPHA
0057+  0AE4             ;; sets ZF according with result
0058+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AE4             _isalpha:
0060+  0AE4 DB          	push al
0061+  0AE5 B9 5F       	cmp al, '_'
0062+  0AE7 C6 07 0B    	je _isalpha_true
0063+  0AEA B9 2E       	cmp al, '.'
0064+  0AEC C6 07 0B    	je _isalpha_true
0065+  0AEF B9 41       	cmp al, 'A'
0066+  0AF1 C8 03 0B    	jlu _isalpha_false
0067+  0AF4 B9 7A       	cmp al, 'z'
0068+  0AF6 D1 03 0B    	jgu _isalpha_false
0069+  0AF9 B9 5A       	cmp al, 'Z'
0070+  0AFB D0 07 0B    	jleu _isalpha_true
0071+  0AFE B9 61       	cmp al, 'a'
0072+  0B00 C9 07 0B    	jgeu _isalpha_true
0073+  0B03             _isalpha_false:
0074+  0B03 8B 01       	or al, 1	; clear ZF
0075+  0B05 E8          	pop al
0076+  0B06 09          	ret
0077+  0B07             _isalpha_true:
0078+  0B07 87 00       	and al, 0	; set ZF
0079+  0B09 E8          	pop al
0080+  0B0A 09          	ret
0081+  0B0B             
0082+  0B0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B0B             ;; IS PATH-ALPHA
0084+  0B0B             ;; sets ZF according with result
0085+  0B0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B0B             ispath:
0087+  0B0B DB          	push al
0088+  0B0C 07 D1 0A    	call _isdigit
0089+  0B0F C6 39 0B    	je ispath_true
0090+  0B12 B9 5F       	cmp al, '_'
0091+  0B14 C6 39 0B    	je ispath_true
0092+  0B17 B9 2F       	cmp al, '/'
0093+  0B19 C6 39 0B    	je ispath_true
0094+  0B1C B9 2E       	cmp al, '.'
0095+  0B1E C6 39 0B    	je ispath_true
0096+  0B21 B9 41       	cmp al, 'A'
0097+  0B23 C8 35 0B    	jlu ispath_false
0098+  0B26 B9 7A       	cmp al, 'z'
0099+  0B28 D1 35 0B    	jgu ispath_false
0100+  0B2B B9 5A       	cmp al, 'Z'
0101+  0B2D D0 39 0B    	jleu ispath_true
0102+  0B30 B9 61       	cmp al, 'a'
0103+  0B32 C9 39 0B    	jgeu ispath_true
0104+  0B35             ispath_false:
0105+  0B35 8B 01       	or al, 1	; clear ZF
0106+  0B37 E8          	pop al
0107+  0B38 09          	ret
0108+  0B39             ispath_true:
0109+  0B39 87 00       	and al, 0	; set ZF
0110+  0B3B E8          	pop al
0111+  0B3C 09          	ret
0112+  0B3D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B3D             ;; IS SPACE
0114+  0B3D             ;; sets ZF according with result
0115+  0B3D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B3D             _isspace:
0117+  0B3D B9 20       	cmp al, $20		; ' '
0118+  0B3F C6 53 0B    	je _isspace_exit
0119+  0B42 B9 09       	cmp al, $09		; '\t'
0120+  0B44 C6 53 0B    	je _isspace_exit
0121+  0B47 B9 0A       	cmp al, $0A		; '\n'
0122+  0B49 C6 53 0B    	je _isspace_exit
0123+  0B4C B9 0D       	cmp al, $0D		; '\r'
0124+  0B4E C6 53 0B    	je _isspace_exit
0125+  0B51 B9 0B       	cmp al, $0B		; '\v'
0126+  0B53             _isspace_exit:
0127+  0B53 09          	ret	
0128+  0B54             
0129+  0B54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B54             ; TO LOWER
0131+  0B54             ; input in AL
0132+  0B54             ; output in AL
0133+  0B54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B54             _to_lower:
0135+  0B54 B9 5A       	cmp al, 'Z'
0136+  0B56 D1 5B 0B    	jgu _to_lower_ret
0137+  0B59 6A 20       	add al, $20				; convert to lower case
0138+  0B5B             _to_lower_ret:
0139+  0B5B 09          	ret
0140+  0B5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B5C             ; TO UPPER
0142+  0B5C             ; input in AL
0143+  0B5C             ; output in AL
0144+  0B5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B5C             _to_upper:
0146+  0B5C B9 61       	cmp al, 'a'
0147+  0B5E C8 63 0B    	jlu _to_upper_ret
0148+  0B61 6F 20       	sub al, $20			; convert to upper case
0149+  0B63             _to_upper_ret:
0150+  0B63 09          	ret
0151+  0B64             
1091   0B64             ; --- END INLINE ASM SEGMENT
1092   0B64             
1093   0B64 F9            leave
1094   0B65 09            ret
1095   0B66             
1096   0B66             is_space:
1097   0B66 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1098   0B69             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
1099   0B69 FA 05 00      lea d, [bp + 5] ; $c
1100   0B6C 32            mov bl, [d]
1101   0B6D A7 00         mov bh, 0
1102   0B6F 38 00 00      mov c, 0
1103   0B72             ; --- START RELATIONAL
1104   0B72 D7            push a
1105   0B73 11            mov a, b
1106   0B74 FD 2E 20 00   mov32 cb, $00000020
1106   0B78 00 00 
1107   0B7A B0            cmp a, b
1108   0B7B FD 71         seq ; ==
1109   0B7D E4            pop a
1110   0B7E             ; --- END RELATIONAL
1111   0B7E             ; --- START LOGICAL OR
1112   0B7E D7            push a
1113   0B7F 11            mov a, b
1114   0B80 FA 05 00      lea d, [bp + 5] ; $c
1115   0B83 32            mov bl, [d]
1116   0B84 A7 00         mov bh, 0
1117   0B86 38 00 00      mov c, 0
1118   0B89             ; --- START RELATIONAL
1119   0B89 D7            push a
1120   0B8A 11            mov a, b
1121   0B8B FD 2E 09 00   mov32 cb, $00000009
1121   0B8F 00 00 
1122   0B91 B0            cmp a, b
1123   0B92 FD 71         seq ; ==
1124   0B94 E4            pop a
1125   0B95             ; --- END RELATIONAL
1126   0B95 FD A8         sor a, b ; ||
1127   0B97 11            mov a, b
1128   0B98 FA 05 00      lea d, [bp + 5] ; $c
1129   0B9B 32            mov bl, [d]
1130   0B9C A7 00         mov bh, 0
1131   0B9E 38 00 00      mov c, 0
1132   0BA1             ; --- START RELATIONAL
1133   0BA1 D7            push a
1134   0BA2 11            mov a, b
1135   0BA3 FD 2E 0A 00   mov32 cb, $0000000a
1135   0BA7 00 00 
1136   0BA9 B0            cmp a, b
1137   0BAA FD 71         seq ; ==
1138   0BAC E4            pop a
1139   0BAD             ; --- END RELATIONAL
1140   0BAD FD A8         sor a, b ; ||
1141   0BAF 11            mov a, b
1142   0BB0 FA 05 00      lea d, [bp + 5] ; $c
1143   0BB3 32            mov bl, [d]
1144   0BB4 A7 00         mov bh, 0
1145   0BB6 38 00 00      mov c, 0
1146   0BB9             ; --- START RELATIONAL
1147   0BB9 D7            push a
1148   0BBA 11            mov a, b
1149   0BBB FD 2E 0D 00   mov32 cb, $0000000d
1149   0BBF 00 00 
1150   0BC1 B0            cmp a, b
1151   0BC2 FD 71         seq ; ==
1152   0BC4 E4            pop a
1153   0BC5             ; --- END RELATIONAL
1154   0BC5 FD A8         sor a, b ; ||
1155   0BC7 E4            pop a
1156   0BC8             ; --- END LOGICAL OR
1157   0BC8 F9            leave
1158   0BC9 09            ret
1159   0BCA             
1160   0BCA             is_digit:
1161   0BCA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1162   0BCD             ; return c >= '0' && c <= '9'; 
1163   0BCD FA 05 00      lea d, [bp + 5] ; $c
1164   0BD0 32            mov bl, [d]
1165   0BD1 A7 00         mov bh, 0
1166   0BD3 38 00 00      mov c, 0
1167   0BD6             ; --- START RELATIONAL
1168   0BD6 D7            push a
1169   0BD7 11            mov a, b
1170   0BD8 FD 2E 30 00   mov32 cb, $00000030
1170   0BDC 00 00 
1171   0BDE B0            cmp a, b
1172   0BDF FD 80         sge ; >=
1173   0BE1 E4            pop a
1174   0BE2             ; --- END RELATIONAL
1175   0BE2             ; --- START LOGICAL AND
1176   0BE2 D7            push a
1177   0BE3 11            mov a, b
1178   0BE4 FA 05 00      lea d, [bp + 5] ; $c
1179   0BE7 32            mov bl, [d]
1180   0BE8 A7 00         mov bh, 0
1181   0BEA 38 00 00      mov c, 0
1182   0BED             ; --- START RELATIONAL
1183   0BED D7            push a
1184   0BEE 11            mov a, b
1185   0BEF FD 2E 39 00   mov32 cb, $00000039
1185   0BF3 00 00 
1186   0BF5 B0            cmp a, b
1187   0BF6 FD 74         sle ; <= (signed)
1188   0BF8 E4            pop a
1189   0BF9             ; --- END RELATIONAL
1190   0BF9 FD A7         sand a, b
1191   0BFB E4            pop a
1192   0BFC             ; --- END LOGICAL AND
1193   0BFC F9            leave
1194   0BFD 09            ret
1195   0BFE             
1196   0BFE             is_alpha:
1197   0BFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1198   0C01             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
1199   0C01 FA 05 00      lea d, [bp + 5] ; $c
1200   0C04 32            mov bl, [d]
1201   0C05 A7 00         mov bh, 0
1202   0C07 38 00 00      mov c, 0
1203   0C0A             ; --- START RELATIONAL
1204   0C0A D7            push a
1205   0C0B 11            mov a, b
1206   0C0C FD 2E 61 00   mov32 cb, $00000061
1206   0C10 00 00 
1207   0C12 B0            cmp a, b
1208   0C13 FD 80         sge ; >=
1209   0C15 E4            pop a
1210   0C16             ; --- END RELATIONAL
1211   0C16             ; --- START LOGICAL AND
1212   0C16 D7            push a
1213   0C17 11            mov a, b
1214   0C18 FA 05 00      lea d, [bp + 5] ; $c
1215   0C1B 32            mov bl, [d]
1216   0C1C A7 00         mov bh, 0
1217   0C1E 38 00 00      mov c, 0
1218   0C21             ; --- START RELATIONAL
1219   0C21 D7            push a
1220   0C22 11            mov a, b
1221   0C23 FD 2E 7A 00   mov32 cb, $0000007a
1221   0C27 00 00 
1222   0C29 B0            cmp a, b
1223   0C2A FD 74         sle ; <= (signed)
1224   0C2C E4            pop a
1225   0C2D             ; --- END RELATIONAL
1226   0C2D FD A7         sand a, b
1227   0C2F E4            pop a
1228   0C30             ; --- END LOGICAL AND
1229   0C30             ; --- START LOGICAL OR
1230   0C30 D7            push a
1231   0C31 11            mov a, b
1232   0C32 FA 05 00      lea d, [bp + 5] ; $c
1233   0C35 32            mov bl, [d]
1234   0C36 A7 00         mov bh, 0
1235   0C38 38 00 00      mov c, 0
1236   0C3B             ; --- START RELATIONAL
1237   0C3B D7            push a
1238   0C3C 11            mov a, b
1239   0C3D FD 2E 41 00   mov32 cb, $00000041
1239   0C41 00 00 
1240   0C43 B0            cmp a, b
1241   0C44 FD 80         sge ; >=
1242   0C46 E4            pop a
1243   0C47             ; --- END RELATIONAL
1244   0C47             ; --- START LOGICAL AND
1245   0C47 D7            push a
1246   0C48 11            mov a, b
1247   0C49 FA 05 00      lea d, [bp + 5] ; $c
1248   0C4C 32            mov bl, [d]
1249   0C4D A7 00         mov bh, 0
1250   0C4F 38 00 00      mov c, 0
1251   0C52             ; --- START RELATIONAL
1252   0C52 D7            push a
1253   0C53 11            mov a, b
1254   0C54 FD 2E 5A 00   mov32 cb, $0000005a
1254   0C58 00 00 
1255   0C5A B0            cmp a, b
1256   0C5B FD 74         sle ; <= (signed)
1257   0C5D E4            pop a
1258   0C5E             ; --- END RELATIONAL
1259   0C5E FD A7         sand a, b
1260   0C60 E4            pop a
1261   0C61             ; --- END LOGICAL AND
1262   0C61 FD A8         sor a, b ; ||
1263   0C63 11            mov a, b
1264   0C64 FA 05 00      lea d, [bp + 5] ; $c
1265   0C67 32            mov bl, [d]
1266   0C68 A7 00         mov bh, 0
1267   0C6A 38 00 00      mov c, 0
1268   0C6D             ; --- START RELATIONAL
1269   0C6D D7            push a
1270   0C6E 11            mov a, b
1271   0C6F FD 2E 5F 00   mov32 cb, $0000005f
1271   0C73 00 00 
1272   0C75 B0            cmp a, b
1273   0C76 FD 71         seq ; ==
1274   0C78 E4            pop a
1275   0C79             ; --- END RELATIONAL
1276   0C79 FD A8         sor a, b ; ||
1277   0C7B E4            pop a
1278   0C7C             ; --- END LOGICAL OR
1279   0C7C F9            leave
1280   0C7D 09            ret
1281   0C7E             
1282   0C7E             tolower:
1283   0C7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1284   0C81             ; if (ch >= 'A' && ch <= 'Z')  
1285   0C81             _if25_cond:
1286   0C81 FA 05 00      lea d, [bp + 5] ; $ch
1287   0C84 32            mov bl, [d]
1288   0C85 A7 00         mov bh, 0
1289   0C87 38 00 00      mov c, 0
1290   0C8A             ; --- START RELATIONAL
1291   0C8A D7            push a
1292   0C8B 11            mov a, b
1293   0C8C FD 2E 41 00   mov32 cb, $00000041
1293   0C90 00 00 
1294   0C92 B0            cmp a, b
1295   0C93 FD 80         sge ; >=
1296   0C95 E4            pop a
1297   0C96             ; --- END RELATIONAL
1298   0C96             ; --- START LOGICAL AND
1299   0C96 D7            push a
1300   0C97 11            mov a, b
1301   0C98 FA 05 00      lea d, [bp + 5] ; $ch
1302   0C9B 32            mov bl, [d]
1303   0C9C A7 00         mov bh, 0
1304   0C9E 38 00 00      mov c, 0
1305   0CA1             ; --- START RELATIONAL
1306   0CA1 D7            push a
1307   0CA2 11            mov a, b
1308   0CA3 FD 2E 5A 00   mov32 cb, $0000005a
1308   0CA7 00 00 
1309   0CA9 B0            cmp a, b
1310   0CAA FD 74         sle ; <= (signed)
1311   0CAC E4            pop a
1312   0CAD             ; --- END RELATIONAL
1313   0CAD FD A7         sand a, b
1314   0CAF E4            pop a
1315   0CB0             ; --- END LOGICAL AND
1316   0CB0 C0 00 00      cmp b, 0
1317   0CB3 C6 D7 0C      je _if25_else
1318   0CB6             _if25_TRUE:
1319   0CB6             ; return ch - 'A' + 'a'; 
1320   0CB6 FA 05 00      lea d, [bp + 5] ; $ch
1321   0CB9 32            mov bl, [d]
1322   0CBA A7 00         mov bh, 0
1323   0CBC 38 00 00      mov c, 0
1324   0CBF             ; --- START TERMS
1325   0CBF D7            push a
1326   0CC0 11            mov a, b
1327   0CC1 FD 2E 41 00   mov32 cb, $00000041
1327   0CC5 00 00 
1328   0CC7 60            sub a, b
1329   0CC8 27            mov b, a
1330   0CC9 11            mov a, b
1331   0CCA FD 2E 61 00   mov32 cb, $00000061
1331   0CCE 00 00 
1332   0CD0 56            add b, a
1333   0CD1 E4            pop a
1334   0CD2             ; --- END TERMS
1335   0CD2 F9            leave
1336   0CD3 09            ret
1337   0CD4 0A E2 0C      jmp _if25_exit
1338   0CD7             _if25_else:
1339   0CD7             ; return ch; 
1340   0CD7 FA 05 00      lea d, [bp + 5] ; $ch
1341   0CDA 32            mov bl, [d]
1342   0CDB A7 00         mov bh, 0
1343   0CDD 38 00 00      mov c, 0
1344   0CE0 F9            leave
1345   0CE1 09            ret
1346   0CE2             _if25_exit:
1347   0CE2 F9            leave
1348   0CE3 09            ret
1349   0CE4             
1350   0CE4             toupper:
1351   0CE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1352   0CE7             ; if (ch >= 'a' && ch <= 'z')  
1353   0CE7             _if26_cond:
1354   0CE7 FA 05 00      lea d, [bp + 5] ; $ch
1355   0CEA 32            mov bl, [d]
1356   0CEB A7 00         mov bh, 0
1357   0CED 38 00 00      mov c, 0
1358   0CF0             ; --- START RELATIONAL
1359   0CF0 D7            push a
1360   0CF1 11            mov a, b
1361   0CF2 FD 2E 61 00   mov32 cb, $00000061
1361   0CF6 00 00 
1362   0CF8 B0            cmp a, b
1363   0CF9 FD 80         sge ; >=
1364   0CFB E4            pop a
1365   0CFC             ; --- END RELATIONAL
1366   0CFC             ; --- START LOGICAL AND
1367   0CFC D7            push a
1368   0CFD 11            mov a, b
1369   0CFE FA 05 00      lea d, [bp + 5] ; $ch
1370   0D01 32            mov bl, [d]
1371   0D02 A7 00         mov bh, 0
1372   0D04 38 00 00      mov c, 0
1373   0D07             ; --- START RELATIONAL
1374   0D07 D7            push a
1375   0D08 11            mov a, b
1376   0D09 FD 2E 7A 00   mov32 cb, $0000007a
1376   0D0D 00 00 
1377   0D0F B0            cmp a, b
1378   0D10 FD 74         sle ; <= (signed)
1379   0D12 E4            pop a
1380   0D13             ; --- END RELATIONAL
1381   0D13 FD A7         sand a, b
1382   0D15 E4            pop a
1383   0D16             ; --- END LOGICAL AND
1384   0D16 C0 00 00      cmp b, 0
1385   0D19 C6 3D 0D      je _if26_else
1386   0D1C             _if26_TRUE:
1387   0D1C             ; return ch - 'a' + 'A'; 
1388   0D1C FA 05 00      lea d, [bp + 5] ; $ch
1389   0D1F 32            mov bl, [d]
1390   0D20 A7 00         mov bh, 0
1391   0D22 38 00 00      mov c, 0
1392   0D25             ; --- START TERMS
1393   0D25 D7            push a
1394   0D26 11            mov a, b
1395   0D27 FD 2E 61 00   mov32 cb, $00000061
1395   0D2B 00 00 
1396   0D2D 60            sub a, b
1397   0D2E 27            mov b, a
1398   0D2F 11            mov a, b
1399   0D30 FD 2E 41 00   mov32 cb, $00000041
1399   0D34 00 00 
1400   0D36 56            add b, a
1401   0D37 E4            pop a
1402   0D38             ; --- END TERMS
1403   0D38 F9            leave
1404   0D39 09            ret
1405   0D3A 0A 48 0D      jmp _if26_exit
1406   0D3D             _if26_else:
1407   0D3D             ; return ch; 
1408   0D3D FA 05 00      lea d, [bp + 5] ; $ch
1409   0D40 32            mov bl, [d]
1410   0D41 A7 00         mov bh, 0
1411   0D43 38 00 00      mov c, 0
1412   0D46 F9            leave
1413   0D47 09            ret
1414   0D48             _if26_exit:
1415   0D48 F9            leave
1416   0D49 09            ret
1417   0D4A             
1418   0D4A             is_delimiter:
1419   0D4A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1420   0D4D             ; if( 
1421   0D4D             _if27_cond:
1422   0D4D FA 05 00      lea d, [bp + 5] ; $c
1423   0D50 32            mov bl, [d]
1424   0D51 A7 00         mov bh, 0
1425   0D53 38 00 00      mov c, 0
1426   0D56             ; --- START RELATIONAL
1427   0D56 D7            push a
1428   0D57 11            mov a, b
1429   0D58 FD 2E 40 00   mov32 cb, $00000040
1429   0D5C 00 00 
1430   0D5E B0            cmp a, b
1431   0D5F FD 71         seq ; ==
1432   0D61 E4            pop a
1433   0D62             ; --- END RELATIONAL
1434   0D62             ; --- START LOGICAL OR
1435   0D62 D7            push a
1436   0D63 11            mov a, b
1437   0D64 FA 05 00      lea d, [bp + 5] ; $c
1438   0D67 32            mov bl, [d]
1439   0D68 A7 00         mov bh, 0
1440   0D6A 38 00 00      mov c, 0
1441   0D6D             ; --- START RELATIONAL
1442   0D6D D7            push a
1443   0D6E 11            mov a, b
1444   0D6F FD 2E 23 00   mov32 cb, $00000023
1444   0D73 00 00 
1445   0D75 B0            cmp a, b
1446   0D76 FD 71         seq ; ==
1447   0D78 E4            pop a
1448   0D79             ; --- END RELATIONAL
1449   0D79 FD A8         sor a, b ; ||
1450   0D7B 11            mov a, b
1451   0D7C FA 05 00      lea d, [bp + 5] ; $c
1452   0D7F 32            mov bl, [d]
1453   0D80 A7 00         mov bh, 0
1454   0D82 38 00 00      mov c, 0
1455   0D85             ; --- START RELATIONAL
1456   0D85 D7            push a
1457   0D86 11            mov a, b
1458   0D87 FD 2E 24 00   mov32 cb, $00000024
1458   0D8B 00 00 
1459   0D8D B0            cmp a, b
1460   0D8E FD 71         seq ; ==
1461   0D90 E4            pop a
1462   0D91             ; --- END RELATIONAL
1463   0D91 FD A8         sor a, b ; ||
1464   0D93 11            mov a, b
1465   0D94 FA 05 00      lea d, [bp + 5] ; $c
1466   0D97 32            mov bl, [d]
1467   0D98 A7 00         mov bh, 0
1468   0D9A 38 00 00      mov c, 0
1469   0D9D             ; --- START RELATIONAL
1470   0D9D D7            push a
1471   0D9E 11            mov a, b
1472   0D9F FD 2E 2B 00   mov32 cb, $0000002b
1472   0DA3 00 00 
1473   0DA5 B0            cmp a, b
1474   0DA6 FD 71         seq ; ==
1475   0DA8 E4            pop a
1476   0DA9             ; --- END RELATIONAL
1477   0DA9 FD A8         sor a, b ; ||
1478   0DAB 11            mov a, b
1479   0DAC FA 05 00      lea d, [bp + 5] ; $c
1480   0DAF 32            mov bl, [d]
1481   0DB0 A7 00         mov bh, 0
1482   0DB2 38 00 00      mov c, 0
1483   0DB5             ; --- START RELATIONAL
1484   0DB5 D7            push a
1485   0DB6 11            mov a, b
1486   0DB7 FD 2E 2D 00   mov32 cb, $0000002d
1486   0DBB 00 00 
1487   0DBD B0            cmp a, b
1488   0DBE FD 71         seq ; ==
1489   0DC0 E4            pop a
1490   0DC1             ; --- END RELATIONAL
1491   0DC1 FD A8         sor a, b ; ||
1492   0DC3 11            mov a, b
1493   0DC4 FA 05 00      lea d, [bp + 5] ; $c
1494   0DC7 32            mov bl, [d]
1495   0DC8 A7 00         mov bh, 0
1496   0DCA 38 00 00      mov c, 0
1497   0DCD             ; --- START RELATIONAL
1498   0DCD D7            push a
1499   0DCE 11            mov a, b
1500   0DCF FD 2E 2A 00   mov32 cb, $0000002a
1500   0DD3 00 00 
1501   0DD5 B0            cmp a, b
1502   0DD6 FD 71         seq ; ==
1503   0DD8 E4            pop a
1504   0DD9             ; --- END RELATIONAL
1505   0DD9 FD A8         sor a, b ; ||
1506   0DDB 11            mov a, b
1507   0DDC FA 05 00      lea d, [bp + 5] ; $c
1508   0DDF 32            mov bl, [d]
1509   0DE0 A7 00         mov bh, 0
1510   0DE2 38 00 00      mov c, 0
1511   0DE5             ; --- START RELATIONAL
1512   0DE5 D7            push a
1513   0DE6 11            mov a, b
1514   0DE7 FD 2E 2F 00   mov32 cb, $0000002f
1514   0DEB 00 00 
1515   0DED B0            cmp a, b
1516   0DEE FD 71         seq ; ==
1517   0DF0 E4            pop a
1518   0DF1             ; --- END RELATIONAL
1519   0DF1 FD A8         sor a, b ; ||
1520   0DF3 11            mov a, b
1521   0DF4 FA 05 00      lea d, [bp + 5] ; $c
1522   0DF7 32            mov bl, [d]
1523   0DF8 A7 00         mov bh, 0
1524   0DFA 38 00 00      mov c, 0
1525   0DFD             ; --- START RELATIONAL
1526   0DFD D7            push a
1527   0DFE 11            mov a, b
1528   0DFF FD 2E 25 00   mov32 cb, $00000025
1528   0E03 00 00 
1529   0E05 B0            cmp a, b
1530   0E06 FD 71         seq ; ==
1531   0E08 E4            pop a
1532   0E09             ; --- END RELATIONAL
1533   0E09 FD A8         sor a, b ; ||
1534   0E0B 11            mov a, b
1535   0E0C FA 05 00      lea d, [bp + 5] ; $c
1536   0E0F 32            mov bl, [d]
1537   0E10 A7 00         mov bh, 0
1538   0E12 38 00 00      mov c, 0
1539   0E15             ; --- START RELATIONAL
1540   0E15 D7            push a
1541   0E16 11            mov a, b
1542   0E17 FD 2E 5B 00   mov32 cb, $0000005b
1542   0E1B 00 00 
1543   0E1D B0            cmp a, b
1544   0E1E FD 71         seq ; ==
1545   0E20 E4            pop a
1546   0E21             ; --- END RELATIONAL
1547   0E21 FD A8         sor a, b ; ||
1548   0E23 11            mov a, b
1549   0E24 FA 05 00      lea d, [bp + 5] ; $c
1550   0E27 32            mov bl, [d]
1551   0E28 A7 00         mov bh, 0
1552   0E2A 38 00 00      mov c, 0
1553   0E2D             ; --- START RELATIONAL
1554   0E2D D7            push a
1555   0E2E 11            mov a, b
1556   0E2F FD 2E 5D 00   mov32 cb, $0000005d
1556   0E33 00 00 
1557   0E35 B0            cmp a, b
1558   0E36 FD 71         seq ; ==
1559   0E38 E4            pop a
1560   0E39             ; --- END RELATIONAL
1561   0E39 FD A8         sor a, b ; ||
1562   0E3B 11            mov a, b
1563   0E3C FA 05 00      lea d, [bp + 5] ; $c
1564   0E3F 32            mov bl, [d]
1565   0E40 A7 00         mov bh, 0
1566   0E42 38 00 00      mov c, 0
1567   0E45             ; --- START RELATIONAL
1568   0E45 D7            push a
1569   0E46 11            mov a, b
1570   0E47 FD 2E 28 00   mov32 cb, $00000028
1570   0E4B 00 00 
1571   0E4D B0            cmp a, b
1572   0E4E FD 71         seq ; ==
1573   0E50 E4            pop a
1574   0E51             ; --- END RELATIONAL
1575   0E51 FD A8         sor a, b ; ||
1576   0E53 11            mov a, b
1577   0E54 FA 05 00      lea d, [bp + 5] ; $c
1578   0E57 32            mov bl, [d]
1579   0E58 A7 00         mov bh, 0
1580   0E5A 38 00 00      mov c, 0
1581   0E5D             ; --- START RELATIONAL
1582   0E5D D7            push a
1583   0E5E 11            mov a, b
1584   0E5F FD 2E 29 00   mov32 cb, $00000029
1584   0E63 00 00 
1585   0E65 B0            cmp a, b
1586   0E66 FD 71         seq ; ==
1587   0E68 E4            pop a
1588   0E69             ; --- END RELATIONAL
1589   0E69 FD A8         sor a, b ; ||
1590   0E6B 11            mov a, b
1591   0E6C FA 05 00      lea d, [bp + 5] ; $c
1592   0E6F 32            mov bl, [d]
1593   0E70 A7 00         mov bh, 0
1594   0E72 38 00 00      mov c, 0
1595   0E75             ; --- START RELATIONAL
1596   0E75 D7            push a
1597   0E76 11            mov a, b
1598   0E77 FD 2E 7B 00   mov32 cb, $0000007b
1598   0E7B 00 00 
1599   0E7D B0            cmp a, b
1600   0E7E FD 71         seq ; ==
1601   0E80 E4            pop a
1602   0E81             ; --- END RELATIONAL
1603   0E81 FD A8         sor a, b ; ||
1604   0E83 11            mov a, b
1605   0E84 FA 05 00      lea d, [bp + 5] ; $c
1606   0E87 32            mov bl, [d]
1607   0E88 A7 00         mov bh, 0
1608   0E8A 38 00 00      mov c, 0
1609   0E8D             ; --- START RELATIONAL
1610   0E8D D7            push a
1611   0E8E 11            mov a, b
1612   0E8F FD 2E 7D 00   mov32 cb, $0000007d
1612   0E93 00 00 
1613   0E95 B0            cmp a, b
1614   0E96 FD 71         seq ; ==
1615   0E98 E4            pop a
1616   0E99             ; --- END RELATIONAL
1617   0E99 FD A8         sor a, b ; ||
1618   0E9B 11            mov a, b
1619   0E9C FA 05 00      lea d, [bp + 5] ; $c
1620   0E9F 32            mov bl, [d]
1621   0EA0 A7 00         mov bh, 0
1622   0EA2 38 00 00      mov c, 0
1623   0EA5             ; --- START RELATIONAL
1624   0EA5 D7            push a
1625   0EA6 11            mov a, b
1626   0EA7 FD 2E 3A 00   mov32 cb, $0000003a
1626   0EAB 00 00 
1627   0EAD B0            cmp a, b
1628   0EAE FD 71         seq ; ==
1629   0EB0 E4            pop a
1630   0EB1             ; --- END RELATIONAL
1631   0EB1 FD A8         sor a, b ; ||
1632   0EB3 11            mov a, b
1633   0EB4 FA 05 00      lea d, [bp + 5] ; $c
1634   0EB7 32            mov bl, [d]
1635   0EB8 A7 00         mov bh, 0
1636   0EBA 38 00 00      mov c, 0
1637   0EBD             ; --- START RELATIONAL
1638   0EBD D7            push a
1639   0EBE 11            mov a, b
1640   0EBF FD 2E 3B 00   mov32 cb, $0000003b
1640   0EC3 00 00 
1641   0EC5 B0            cmp a, b
1642   0EC6 FD 71         seq ; ==
1643   0EC8 E4            pop a
1644   0EC9             ; --- END RELATIONAL
1645   0EC9 FD A8         sor a, b ; ||
1646   0ECB 11            mov a, b
1647   0ECC FA 05 00      lea d, [bp + 5] ; $c
1648   0ECF 32            mov bl, [d]
1649   0ED0 A7 00         mov bh, 0
1650   0ED2 38 00 00      mov c, 0
1651   0ED5             ; --- START RELATIONAL
1652   0ED5 D7            push a
1653   0ED6 11            mov a, b
1654   0ED7 FD 2E 3C 00   mov32 cb, $0000003c
1654   0EDB 00 00 
1655   0EDD B0            cmp a, b
1656   0EDE FD 71         seq ; ==
1657   0EE0 E4            pop a
1658   0EE1             ; --- END RELATIONAL
1659   0EE1 FD A8         sor a, b ; ||
1660   0EE3 11            mov a, b
1661   0EE4 FA 05 00      lea d, [bp + 5] ; $c
1662   0EE7 32            mov bl, [d]
1663   0EE8 A7 00         mov bh, 0
1664   0EEA 38 00 00      mov c, 0
1665   0EED             ; --- START RELATIONAL
1666   0EED D7            push a
1667   0EEE 11            mov a, b
1668   0EEF FD 2E 3E 00   mov32 cb, $0000003e
1668   0EF3 00 00 
1669   0EF5 B0            cmp a, b
1670   0EF6 FD 71         seq ; ==
1671   0EF8 E4            pop a
1672   0EF9             ; --- END RELATIONAL
1673   0EF9 FD A8         sor a, b ; ||
1674   0EFB 11            mov a, b
1675   0EFC FA 05 00      lea d, [bp + 5] ; $c
1676   0EFF 32            mov bl, [d]
1677   0F00 A7 00         mov bh, 0
1678   0F02 38 00 00      mov c, 0
1679   0F05             ; --- START RELATIONAL
1680   0F05 D7            push a
1681   0F06 11            mov a, b
1682   0F07 FD 2E 3D 00   mov32 cb, $0000003d
1682   0F0B 00 00 
1683   0F0D B0            cmp a, b
1684   0F0E FD 71         seq ; ==
1685   0F10 E4            pop a
1686   0F11             ; --- END RELATIONAL
1687   0F11 FD A8         sor a, b ; ||
1688   0F13 11            mov a, b
1689   0F14 FA 05 00      lea d, [bp + 5] ; $c
1690   0F17 32            mov bl, [d]
1691   0F18 A7 00         mov bh, 0
1692   0F1A 38 00 00      mov c, 0
1693   0F1D             ; --- START RELATIONAL
1694   0F1D D7            push a
1695   0F1E 11            mov a, b
1696   0F1F FD 2E 21 00   mov32 cb, $00000021
1696   0F23 00 00 
1697   0F25 B0            cmp a, b
1698   0F26 FD 71         seq ; ==
1699   0F28 E4            pop a
1700   0F29             ; --- END RELATIONAL
1701   0F29 FD A8         sor a, b ; ||
1702   0F2B 11            mov a, b
1703   0F2C FA 05 00      lea d, [bp + 5] ; $c
1704   0F2F 32            mov bl, [d]
1705   0F30 A7 00         mov bh, 0
1706   0F32 38 00 00      mov c, 0
1707   0F35             ; --- START RELATIONAL
1708   0F35 D7            push a
1709   0F36 11            mov a, b
1710   0F37 FD 2E 5E 00   mov32 cb, $0000005e
1710   0F3B 00 00 
1711   0F3D B0            cmp a, b
1712   0F3E FD 71         seq ; ==
1713   0F40 E4            pop a
1714   0F41             ; --- END RELATIONAL
1715   0F41 FD A8         sor a, b ; ||
1716   0F43 11            mov a, b
1717   0F44 FA 05 00      lea d, [bp + 5] ; $c
1718   0F47 32            mov bl, [d]
1719   0F48 A7 00         mov bh, 0
1720   0F4A 38 00 00      mov c, 0
1721   0F4D             ; --- START RELATIONAL
1722   0F4D D7            push a
1723   0F4E 11            mov a, b
1724   0F4F FD 2E 26 00   mov32 cb, $00000026
1724   0F53 00 00 
1725   0F55 B0            cmp a, b
1726   0F56 FD 71         seq ; ==
1727   0F58 E4            pop a
1728   0F59             ; --- END RELATIONAL
1729   0F59 FD A8         sor a, b ; ||
1730   0F5B 11            mov a, b
1731   0F5C FA 05 00      lea d, [bp + 5] ; $c
1732   0F5F 32            mov bl, [d]
1733   0F60 A7 00         mov bh, 0
1734   0F62 38 00 00      mov c, 0
1735   0F65             ; --- START RELATIONAL
1736   0F65 D7            push a
1737   0F66 11            mov a, b
1738   0F67 FD 2E 7C 00   mov32 cb, $0000007c
1738   0F6B 00 00 
1739   0F6D B0            cmp a, b
1740   0F6E FD 71         seq ; ==
1741   0F70 E4            pop a
1742   0F71             ; --- END RELATIONAL
1743   0F71 FD A8         sor a, b ; ||
1744   0F73 11            mov a, b
1745   0F74 FA 05 00      lea d, [bp + 5] ; $c
1746   0F77 32            mov bl, [d]
1747   0F78 A7 00         mov bh, 0
1748   0F7A 38 00 00      mov c, 0
1749   0F7D             ; --- START RELATIONAL
1750   0F7D D7            push a
1751   0F7E 11            mov a, b
1752   0F7F FD 2E 7E 00   mov32 cb, $0000007e
1752   0F83 00 00 
1753   0F85 B0            cmp a, b
1754   0F86 FD 71         seq ; ==
1755   0F88 E4            pop a
1756   0F89             ; --- END RELATIONAL
1757   0F89 FD A8         sor a, b ; ||
1758   0F8B 11            mov a, b
1759   0F8C FA 05 00      lea d, [bp + 5] ; $c
1760   0F8F 32            mov bl, [d]
1761   0F90 A7 00         mov bh, 0
1762   0F92 38 00 00      mov c, 0
1763   0F95             ; --- START RELATIONAL
1764   0F95 D7            push a
1765   0F96 11            mov a, b
1766   0F97 FD 2E 2E 00   mov32 cb, $0000002e
1766   0F9B 00 00 
1767   0F9D B0            cmp a, b
1768   0F9E FD 71         seq ; ==
1769   0FA0 E4            pop a
1770   0FA1             ; --- END RELATIONAL
1771   0FA1 FD A8         sor a, b ; ||
1772   0FA3 E4            pop a
1773   0FA4             ; --- END LOGICAL OR
1774   0FA4 C0 00 00      cmp b, 0
1775   0FA7 C6 B5 0F      je _if27_else
1776   0FAA             _if27_TRUE:
1777   0FAA             ; return 1; 
1778   0FAA FD 2E 01 00   mov32 cb, $00000001
1778   0FAE 00 00 
1779   0FB0 F9            leave
1780   0FB1 09            ret
1781   0FB2 0A BD 0F      jmp _if27_exit
1782   0FB5             _if27_else:
1783   0FB5             ; return 0; 
1784   0FB5 FD 2E 00 00   mov32 cb, $00000000
1784   0FB9 00 00 
1785   0FBB F9            leave
1786   0FBC 09            ret
1787   0FBD             _if27_exit:
1788   0FBD F9            leave
1789   0FBE 09            ret
1790   0FBF             
1791   0FBF             strcpy:
1792   0FBF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1793   0FC2             ; char *psrc; 
1794   0FC2 52 02 00      sub sp, 2
1795   0FC5             ; char *pdest; 
1796   0FC5 52 02 00      sub sp, 2
1797   0FC8             ; psrc = src; 
1798   0FC8 FA FF FF      lea d, [bp + -1] ; $psrc
1799   0FCB DA            push d
1800   0FCC FA 07 00      lea d, [bp + 7] ; $src
1801   0FCF 2A            mov b, [d]
1802   0FD0 38 00 00      mov c, 0
1803   0FD3 E7            pop d
1804   0FD4 FD 43         mov [d], b
1805   0FD6             ; pdest = dest; 
1806   0FD6 FA FD FF      lea d, [bp + -3] ; $pdest
1807   0FD9 DA            push d
1808   0FDA FA 05 00      lea d, [bp + 5] ; $dest
1809   0FDD 2A            mov b, [d]
1810   0FDE 38 00 00      mov c, 0
1811   0FE1 E7            pop d
1812   0FE2 FD 43         mov [d], b
1813   0FE4             ; while(*psrc) *pdest++ = *psrc++; 
1814   0FE4             _while28_cond:
1815   0FE4 FA FF FF      lea d, [bp + -1] ; $psrc
1816   0FE7 2A            mov b, [d]
1817   0FE8 38 00 00      mov c, 0
1818   0FEB 74            mov d, b
1819   0FEC 32            mov bl, [d]
1820   0FED A7 00         mov bh, 0
1821   0FEF 38 00 00      mov c, 0
1822   0FF2 C0 00 00      cmp b, 0
1823   0FF5 C6 26 10      je _while28_exit
1824   0FF8             _while28_block:
1825   0FF8             ; *pdest++ = *psrc++; 
1826   0FF8 FA FD FF      lea d, [bp + -3] ; $pdest
1827   0FFB 2A            mov b, [d]
1828   0FFC 38 00 00      mov c, 0
1829   0FFF FD 77         inc b
1830   1001 FA FD FF      lea d, [bp + -3] ; $pdest
1831   1004 FD 43         mov [d], b
1832   1006 FD 7D         dec b
1833   1008 D8            push b
1834   1009 FA FF FF      lea d, [bp + -1] ; $psrc
1835   100C 2A            mov b, [d]
1836   100D 38 00 00      mov c, 0
1837   1010 FD 77         inc b
1838   1012 FA FF FF      lea d, [bp + -1] ; $psrc
1839   1015 FD 43         mov [d], b
1840   1017 FD 7D         dec b
1841   1019 74            mov d, b
1842   101A 32            mov bl, [d]
1843   101B A7 00         mov bh, 0
1844   101D 38 00 00      mov c, 0
1845   1020 E7            pop d
1846   1021 FD 3E         mov [d], bl
1847   1023 0A E4 0F      jmp _while28_cond
1848   1026             _while28_exit:
1849   1026             ; *pdest = '\0'; 
1850   1026 FA FD FF      lea d, [bp + -3] ; $pdest
1851   1029 2A            mov b, [d]
1852   102A 38 00 00      mov c, 0
1853   102D D8            push b
1854   102E FD 2E 00 00   mov32 cb, $00000000
1854   1032 00 00 
1855   1034 E7            pop d
1856   1035 FD 3E         mov [d], bl
1857   1037 F9            leave
1858   1038 09            ret
1859   1039             
1860   1039             strcmp:
1861   1039 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1862   103C             ; while (*s1 && (*s1 == *s2)) { 
1863   103C             _while29_cond:
1864   103C FA 05 00      lea d, [bp + 5] ; $s1
1865   103F 2A            mov b, [d]
1866   1040 38 00 00      mov c, 0
1867   1043 74            mov d, b
1868   1044 32            mov bl, [d]
1869   1045 A7 00         mov bh, 0
1870   1047 38 00 00      mov c, 0
1871   104A             ; --- START LOGICAL AND
1872   104A D7            push a
1873   104B 11            mov a, b
1874   104C FA 05 00      lea d, [bp + 5] ; $s1
1875   104F 2A            mov b, [d]
1876   1050 38 00 00      mov c, 0
1877   1053 74            mov d, b
1878   1054 32            mov bl, [d]
1879   1055 A7 00         mov bh, 0
1880   1057 38 00 00      mov c, 0
1881   105A             ; --- START RELATIONAL
1882   105A D7            push a
1883   105B 11            mov a, b
1884   105C FA 07 00      lea d, [bp + 7] ; $s2
1885   105F 2A            mov b, [d]
1886   1060 38 00 00      mov c, 0
1887   1063 74            mov d, b
1888   1064 32            mov bl, [d]
1889   1065 A7 00         mov bh, 0
1890   1067 38 00 00      mov c, 0
1891   106A B0            cmp a, b
1892   106B FD 71         seq ; ==
1893   106D E4            pop a
1894   106E             ; --- END RELATIONAL
1895   106E FD A7         sand a, b
1896   1070 E4            pop a
1897   1071             ; --- END LOGICAL AND
1898   1071 C0 00 00      cmp b, 0
1899   1074 C6 9A 10      je _while29_exit
1900   1077             _while29_block:
1901   1077             ; s1++; 
1902   1077 FA 05 00      lea d, [bp + 5] ; $s1
1903   107A 2A            mov b, [d]
1904   107B 38 00 00      mov c, 0
1905   107E FD 77         inc b
1906   1080 FA 05 00      lea d, [bp + 5] ; $s1
1907   1083 FD 43         mov [d], b
1908   1085 FD 7D         dec b
1909   1087             ; s2++; 
1910   1087 FA 07 00      lea d, [bp + 7] ; $s2
1911   108A 2A            mov b, [d]
1912   108B 38 00 00      mov c, 0
1913   108E FD 77         inc b
1914   1090 FA 07 00      lea d, [bp + 7] ; $s2
1915   1093 FD 43         mov [d], b
1916   1095 FD 7D         dec b
1917   1097 0A 3C 10      jmp _while29_cond
1918   109A             _while29_exit:
1919   109A             ; return *s1 - *s2; 
1920   109A FA 05 00      lea d, [bp + 5] ; $s1
1921   109D 2A            mov b, [d]
1922   109E 38 00 00      mov c, 0
1923   10A1 74            mov d, b
1924   10A2 32            mov bl, [d]
1925   10A3 A7 00         mov bh, 0
1926   10A5 38 00 00      mov c, 0
1927   10A8             ; --- START TERMS
1928   10A8 D7            push a
1929   10A9 11            mov a, b
1930   10AA FA 07 00      lea d, [bp + 7] ; $s2
1931   10AD 2A            mov b, [d]
1932   10AE 38 00 00      mov c, 0
1933   10B1 74            mov d, b
1934   10B2 32            mov bl, [d]
1935   10B3 A7 00         mov bh, 0
1936   10B5 38 00 00      mov c, 0
1937   10B8 60            sub a, b
1938   10B9 27            mov b, a
1939   10BA E4            pop a
1940   10BB             ; --- END TERMS
1941   10BB F9            leave
1942   10BC 09            ret
1943   10BD             
1944   10BD             strncmp:
1945   10BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1946   10C0 F9            leave
1947   10C1 09            ret
1948   10C2             
1949   10C2             strcat:
1950   10C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1951   10C5             ; int dest_len; 
1952   10C5 52 02 00      sub sp, 2
1953   10C8             ; int i; 
1954   10C8 52 02 00      sub sp, 2
1955   10CB             ; dest_len = strlen(dest); 
1956   10CB FA FF FF      lea d, [bp + -1] ; $dest_len
1957   10CE DA            push d
1958   10CF             ; --- START FUNCTION CALL
1959   10CF FA 05 00      lea d, [bp + 5] ; $dest
1960   10D2 2A            mov b, [d]
1961   10D3 38 00 00      mov c, 0
1962   10D6 FD AB         swp b
1963   10D8 D8            push b
1964   10D9 07 A5 11      call strlen
1965   10DC 51 02 00      add sp, 2
1966   10DF             ; --- END FUNCTION CALL
1967   10DF E7            pop d
1968   10E0 FD 43         mov [d], b
1969   10E2             ; for (i = 0; src[i] != 0; i=i+1) { 
1970   10E2             _for30_init:
1971   10E2 FA FD FF      lea d, [bp + -3] ; $i
1972   10E5 DA            push d
1973   10E6 FD 2E 00 00   mov32 cb, $00000000
1973   10EA 00 00 
1974   10EC E7            pop d
1975   10ED FD 43         mov [d], b
1976   10EF             _for30_cond:
1977   10EF FA 07 00      lea d, [bp + 7] ; $src
1978   10F2 FD 2A         mov d, [d]
1979   10F4 D7            push a
1980   10F5 DA            push d
1981   10F6 FA FD FF      lea d, [bp + -3] ; $i
1982   10F9 2A            mov b, [d]
1983   10FA 38 00 00      mov c, 0
1984   10FD E7            pop d
1985   10FE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1986   1102 E4            pop a
1987   1103 32            mov bl, [d]
1988   1104 A7 00         mov bh, 0
1989   1106 38 00 00      mov c, 0
1990   1109             ; --- START RELATIONAL
1991   1109 D7            push a
1992   110A 11            mov a, b
1993   110B FD 2E 00 00   mov32 cb, $00000000
1993   110F 00 00 
1994   1111 B0            cmp a, b
1995   1112 FD 72         sneq ; !=
1996   1114 E4            pop a
1997   1115             ; --- END RELATIONAL
1998   1115 C0 00 00      cmp b, 0
1999   1118 C6 73 11      je _for30_exit
2000   111B             _for30_block:
2001   111B             ; dest[dest_len + i] = src[i]; 
2002   111B FA 05 00      lea d, [bp + 5] ; $dest
2003   111E FD 2A         mov d, [d]
2004   1120 D7            push a
2005   1121 DA            push d
2006   1122 FA FF FF      lea d, [bp + -1] ; $dest_len
2007   1125 2A            mov b, [d]
2008   1126 38 00 00      mov c, 0
2009   1129             ; --- START TERMS
2010   1129 D7            push a
2011   112A 11            mov a, b
2012   112B FA FD FF      lea d, [bp + -3] ; $i
2013   112E 2A            mov b, [d]
2014   112F 38 00 00      mov c, 0
2015   1132 56            add b, a
2016   1133 E4            pop a
2017   1134             ; --- END TERMS
2018   1134 E7            pop d
2019   1135 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2020   1139 E4            pop a
2021   113A DA            push d
2022   113B FA 07 00      lea d, [bp + 7] ; $src
2023   113E FD 2A         mov d, [d]
2024   1140 D7            push a
2025   1141 DA            push d
2026   1142 FA FD FF      lea d, [bp + -3] ; $i
2027   1145 2A            mov b, [d]
2028   1146 38 00 00      mov c, 0
2029   1149 E7            pop d
2030   114A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2031   114E E4            pop a
2032   114F 32            mov bl, [d]
2033   1150 A7 00         mov bh, 0
2034   1152 38 00 00      mov c, 0
2035   1155 E7            pop d
2036   1156 FD 3E         mov [d], bl
2037   1158             _for30_update:
2038   1158 FA FD FF      lea d, [bp + -3] ; $i
2039   115B DA            push d
2040   115C FA FD FF      lea d, [bp + -3] ; $i
2041   115F 2A            mov b, [d]
2042   1160 38 00 00      mov c, 0
2043   1163             ; --- START TERMS
2044   1163 D7            push a
2045   1164 11            mov a, b
2046   1165 FD 2E 01 00   mov32 cb, $00000001
2046   1169 00 00 
2047   116B 56            add b, a
2048   116C E4            pop a
2049   116D             ; --- END TERMS
2050   116D E7            pop d
2051   116E FD 43         mov [d], b
2052   1170 0A EF 10      jmp _for30_cond
2053   1173             _for30_exit:
2054   1173             ; dest[dest_len + i] = 0; 
2055   1173 FA 05 00      lea d, [bp + 5] ; $dest
2056   1176 FD 2A         mov d, [d]
2057   1178 D7            push a
2058   1179 DA            push d
2059   117A FA FF FF      lea d, [bp + -1] ; $dest_len
2060   117D 2A            mov b, [d]
2061   117E 38 00 00      mov c, 0
2062   1181             ; --- START TERMS
2063   1181 D7            push a
2064   1182 11            mov a, b
2065   1183 FA FD FF      lea d, [bp + -3] ; $i
2066   1186 2A            mov b, [d]
2067   1187 38 00 00      mov c, 0
2068   118A 56            add b, a
2069   118B E4            pop a
2070   118C             ; --- END TERMS
2071   118C E7            pop d
2072   118D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2073   1191 E4            pop a
2074   1192 DA            push d
2075   1193 FD 2E 00 00   mov32 cb, $00000000
2075   1197 00 00 
2076   1199 E7            pop d
2077   119A FD 3E         mov [d], bl
2078   119C             ; return dest; 
2079   119C FA 05 00      lea d, [bp + 5] ; $dest
2080   119F 2A            mov b, [d]
2081   11A0 38 00 00      mov c, 0
2082   11A3 F9            leave
2083   11A4 09            ret
2084   11A5             
2085   11A5             strlen:
2086   11A5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2087   11A8             ; int length; 
2088   11A8 52 02 00      sub sp, 2
2089   11AB             ; length = 0; 
2090   11AB FA FF FF      lea d, [bp + -1] ; $length
2091   11AE DA            push d
2092   11AF FD 2E 00 00   mov32 cb, $00000000
2092   11B3 00 00 
2093   11B5 E7            pop d
2094   11B6 FD 43         mov [d], b
2095   11B8             ; while (str[length] != 0) { 
2096   11B8             _while31_cond:
2097   11B8 FA 05 00      lea d, [bp + 5] ; $str
2098   11BB FD 2A         mov d, [d]
2099   11BD D7            push a
2100   11BE DA            push d
2101   11BF FA FF FF      lea d, [bp + -1] ; $length
2102   11C2 2A            mov b, [d]
2103   11C3 38 00 00      mov c, 0
2104   11C6 E7            pop d
2105   11C7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2106   11CB E4            pop a
2107   11CC 32            mov bl, [d]
2108   11CD A7 00         mov bh, 0
2109   11CF 38 00 00      mov c, 0
2110   11D2             ; --- START RELATIONAL
2111   11D2 D7            push a
2112   11D3 11            mov a, b
2113   11D4 FD 2E 00 00   mov32 cb, $00000000
2113   11D8 00 00 
2114   11DA B0            cmp a, b
2115   11DB FD 72         sneq ; !=
2116   11DD E4            pop a
2117   11DE             ; --- END RELATIONAL
2118   11DE C0 00 00      cmp b, 0
2119   11E1 C6 F7 11      je _while31_exit
2120   11E4             _while31_block:
2121   11E4             ; length++; 
2122   11E4 FA FF FF      lea d, [bp + -1] ; $length
2123   11E7 2A            mov b, [d]
2124   11E8 38 00 00      mov c, 0
2125   11EB 11            mov a, b
2126   11EC FD 77         inc b
2127   11EE FA FF FF      lea d, [bp + -1] ; $length
2128   11F1 FD 43         mov [d], b
2129   11F3 27            mov b, a
2130   11F4 0A B8 11      jmp _while31_cond
2131   11F7             _while31_exit:
2132   11F7             ; return length; 
2133   11F7 FA FF FF      lea d, [bp + -1] ; $length
2134   11FA 2A            mov b, [d]
2135   11FB 38 00 00      mov c, 0
2136   11FE F9            leave
2137   11FF 09            ret
2138   1200             
2139   1200             exit:
2140   1200 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2141   1203             
2142   1203             ; --- BEGIN INLINE ASM SEGMENT
2143   1203 05 0B         syscall sys_terminate_proc
2144   1205             ; --- END INLINE ASM SEGMENT
2145   1205             
2146   1205 F9            leave
2147   1206 09            ret
2148   1207             
2149   1207             memset:
2150   1207 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2151   120A             ; int i; 
2152   120A 52 02 00      sub sp, 2
2153   120D             ; for(i = 0; i < size; i++){ 
2154   120D             _for32_init:
2155   120D FA FF FF      lea d, [bp + -1] ; $i
2156   1210 DA            push d
2157   1211 FD 2E 00 00   mov32 cb, $00000000
2157   1215 00 00 
2158   1217 E7            pop d
2159   1218 FD 43         mov [d], b
2160   121A             _for32_cond:
2161   121A FA FF FF      lea d, [bp + -1] ; $i
2162   121D 2A            mov b, [d]
2163   121E 38 00 00      mov c, 0
2164   1221             ; --- START RELATIONAL
2165   1221 D7            push a
2166   1222 11            mov a, b
2167   1223 FA 08 00      lea d, [bp + 8] ; $size
2168   1226 2A            mov b, [d]
2169   1227 38 00 00      mov c, 0
2170   122A B0            cmp a, b
2171   122B FD 73         slt ; < (signed)
2172   122D E4            pop a
2173   122E             ; --- END RELATIONAL
2174   122E C0 00 00      cmp b, 0
2175   1231 C6 66 12      je _for32_exit
2176   1234             _for32_block:
2177   1234             ; *(s+i) = c; 
2178   1234 FA 05 00      lea d, [bp + 5] ; $s
2179   1237 2A            mov b, [d]
2180   1238 38 00 00      mov c, 0
2181   123B             ; --- START TERMS
2182   123B D7            push a
2183   123C 11            mov a, b
2184   123D FA FF FF      lea d, [bp + -1] ; $i
2185   1240 2A            mov b, [d]
2186   1241 38 00 00      mov c, 0
2187   1244 56            add b, a
2188   1245 E4            pop a
2189   1246             ; --- END TERMS
2190   1246 D8            push b
2191   1247 FA 07 00      lea d, [bp + 7] ; $c
2192   124A 32            mov bl, [d]
2193   124B A7 00         mov bh, 0
2194   124D 38 00 00      mov c, 0
2195   1250 E7            pop d
2196   1251 FD 3E         mov [d], bl
2197   1253             _for32_update:
2198   1253 FA FF FF      lea d, [bp + -1] ; $i
2199   1256 2A            mov b, [d]
2200   1257 38 00 00      mov c, 0
2201   125A 11            mov a, b
2202   125B FD 77         inc b
2203   125D FA FF FF      lea d, [bp + -1] ; $i
2204   1260 FD 43         mov [d], b
2205   1262 27            mov b, a
2206   1263 0A 1A 12      jmp _for32_cond
2207   1266             _for32_exit:
2208   1266             ; return s; 
2209   1266 FA 05 00      lea d, [bp + 5] ; $s
2210   1269 2A            mov b, [d]
2211   126A 38 00 00      mov c, 0
2212   126D F9            leave
2213   126E 09            ret
2214   126F             
2215   126F             atoi:
2216   126F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2217   1272             ; int result = 0;  // Initialize result 
2218   1272 52 02 00      sub sp, 2
2219   1275             ; --- START LOCAL VAR INITIALIZATION
2220   1275 FA FF FF      lea d, [bp + -1] ; $result
2221   1278 DA            push d
2222   1279 FD 2E 00 00   mov32 cb, $00000000
2222   127D 00 00 
2223   127F E7            pop d
2224   1280 FD 43         mov [d], b
2225   1282             ; --- END LOCAL VAR INITIALIZATION
2226   1282             ; int sign = 1;    // Initialize sign as positive 
2227   1282 52 02 00      sub sp, 2
2228   1285             ; --- START LOCAL VAR INITIALIZATION
2229   1285 FA FD FF      lea d, [bp + -3] ; $sign
2230   1288 DA            push d
2231   1289 FD 2E 01 00   mov32 cb, $00000001
2231   128D 00 00 
2232   128F E7            pop d
2233   1290 FD 43         mov [d], b
2234   1292             ; --- END LOCAL VAR INITIALIZATION
2235   1292             ; while (*str == ' ') str++; 
2236   1292             _while33_cond:
2237   1292 FA 05 00      lea d, [bp + 5] ; $str
2238   1295 2A            mov b, [d]
2239   1296 38 00 00      mov c, 0
2240   1299 74            mov d, b
2241   129A 32            mov bl, [d]
2242   129B A7 00         mov bh, 0
2243   129D 38 00 00      mov c, 0
2244   12A0             ; --- START RELATIONAL
2245   12A0 D7            push a
2246   12A1 11            mov a, b
2247   12A2 FD 2E 20 00   mov32 cb, $00000020
2247   12A6 00 00 
2248   12A8 B0            cmp a, b
2249   12A9 FD 71         seq ; ==
2250   12AB E4            pop a
2251   12AC             ; --- END RELATIONAL
2252   12AC C0 00 00      cmp b, 0
2253   12AF C6 C5 12      je _while33_exit
2254   12B2             _while33_block:
2255   12B2             ; str++; 
2256   12B2 FA 05 00      lea d, [bp + 5] ; $str
2257   12B5 2A            mov b, [d]
2258   12B6 38 00 00      mov c, 0
2259   12B9 FD 77         inc b
2260   12BB FA 05 00      lea d, [bp + 5] ; $str
2261   12BE FD 43         mov [d], b
2262   12C0 FD 7D         dec b
2263   12C2 0A 92 12      jmp _while33_cond
2264   12C5             _while33_exit:
2265   12C5             ; if (*str == '-' || *str == '+') { 
2266   12C5             _if34_cond:
2267   12C5 FA 05 00      lea d, [bp + 5] ; $str
2268   12C8 2A            mov b, [d]
2269   12C9 38 00 00      mov c, 0
2270   12CC 74            mov d, b
2271   12CD 32            mov bl, [d]
2272   12CE A7 00         mov bh, 0
2273   12D0 38 00 00      mov c, 0
2274   12D3             ; --- START RELATIONAL
2275   12D3 D7            push a
2276   12D4 11            mov a, b
2277   12D5 FD 2E 2D 00   mov32 cb, $0000002d
2277   12D9 00 00 
2278   12DB B0            cmp a, b
2279   12DC FD 71         seq ; ==
2280   12DE E4            pop a
2281   12DF             ; --- END RELATIONAL
2282   12DF             ; --- START LOGICAL OR
2283   12DF D7            push a
2284   12E0 11            mov a, b
2285   12E1 FA 05 00      lea d, [bp + 5] ; $str
2286   12E4 2A            mov b, [d]
2287   12E5 38 00 00      mov c, 0
2288   12E8 74            mov d, b
2289   12E9 32            mov bl, [d]
2290   12EA A7 00         mov bh, 0
2291   12EC 38 00 00      mov c, 0
2292   12EF             ; --- START RELATIONAL
2293   12EF D7            push a
2294   12F0 11            mov a, b
2295   12F1 FD 2E 2B 00   mov32 cb, $0000002b
2295   12F5 00 00 
2296   12F7 B0            cmp a, b
2297   12F8 FD 71         seq ; ==
2298   12FA E4            pop a
2299   12FB             ; --- END RELATIONAL
2300   12FB FD A8         sor a, b ; ||
2301   12FD E4            pop a
2302   12FE             ; --- END LOGICAL OR
2303   12FE C0 00 00      cmp b, 0
2304   1301 C6 49 13      je _if34_exit
2305   1304             _if34_TRUE:
2306   1304             ; if (*str == '-') sign = -1; 
2307   1304             _if35_cond:
2308   1304 FA 05 00      lea d, [bp + 5] ; $str
2309   1307 2A            mov b, [d]
2310   1308 38 00 00      mov c, 0
2311   130B 74            mov d, b
2312   130C 32            mov bl, [d]
2313   130D A7 00         mov bh, 0
2314   130F 38 00 00      mov c, 0
2315   1312             ; --- START RELATIONAL
2316   1312 D7            push a
2317   1313 11            mov a, b
2318   1314 FD 2E 2D 00   mov32 cb, $0000002d
2318   1318 00 00 
2319   131A B0            cmp a, b
2320   131B FD 71         seq ; ==
2321   131D E4            pop a
2322   131E             ; --- END RELATIONAL
2323   131E C0 00 00      cmp b, 0
2324   1321 C6 36 13      je _if35_exit
2325   1324             _if35_TRUE:
2326   1324             ; sign = -1; 
2327   1324 FA FD FF      lea d, [bp + -3] ; $sign
2328   1327 DA            push d
2329   1328 FD 2E 01 00   mov32 cb, $00000001
2329   132C 00 00 
2330   132E FD 97         neg b
2331   1330 E7            pop d
2332   1331 FD 43         mov [d], b
2333   1333 0A 36 13      jmp _if35_exit
2334   1336             _if35_exit:
2335   1336             ; str++; 
2336   1336 FA 05 00      lea d, [bp + 5] ; $str
2337   1339 2A            mov b, [d]
2338   133A 38 00 00      mov c, 0
2339   133D FD 77         inc b
2340   133F FA 05 00      lea d, [bp + 5] ; $str
2341   1342 FD 43         mov [d], b
2342   1344 FD 7D         dec b
2343   1346 0A 49 13      jmp _if34_exit
2344   1349             _if34_exit:
2345   1349             ; while (*str >= '0' && *str <= '9') { 
2346   1349             _while36_cond:
2347   1349 FA 05 00      lea d, [bp + 5] ; $str
2348   134C 2A            mov b, [d]
2349   134D 38 00 00      mov c, 0
2350   1350 74            mov d, b
2351   1351 32            mov bl, [d]
2352   1352 A7 00         mov bh, 0
2353   1354 38 00 00      mov c, 0
2354   1357             ; --- START RELATIONAL
2355   1357 D7            push a
2356   1358 11            mov a, b
2357   1359 FD 2E 30 00   mov32 cb, $00000030
2357   135D 00 00 
2358   135F B0            cmp a, b
2359   1360 FD 82         sgeu ; >= (unsigned)
2360   1362 E4            pop a
2361   1363             ; --- END RELATIONAL
2362   1363             ; --- START LOGICAL AND
2363   1363 D7            push a
2364   1364 11            mov a, b
2365   1365 FA 05 00      lea d, [bp + 5] ; $str
2366   1368 2A            mov b, [d]
2367   1369 38 00 00      mov c, 0
2368   136C 74            mov d, b
2369   136D 32            mov bl, [d]
2370   136E A7 00         mov bh, 0
2371   1370 38 00 00      mov c, 0
2372   1373             ; --- START RELATIONAL
2373   1373 D7            push a
2374   1374 11            mov a, b
2375   1375 FD 2E 39 00   mov32 cb, $00000039
2375   1379 00 00 
2376   137B B0            cmp a, b
2377   137C FD 76         sleu ; <= (unsigned)
2378   137E E4            pop a
2379   137F             ; --- END RELATIONAL
2380   137F FD A7         sand a, b
2381   1381 E4            pop a
2382   1382             ; --- END LOGICAL AND
2383   1382 C0 00 00      cmp b, 0
2384   1385 C6 D2 13      je _while36_exit
2385   1388             _while36_block:
2386   1388             ; result = result * 10 + (*str - '0'); 
2387   1388 FA FF FF      lea d, [bp + -1] ; $result
2388   138B DA            push d
2389   138C FA FF FF      lea d, [bp + -1] ; $result
2390   138F 2A            mov b, [d]
2391   1390 38 00 00      mov c, 0
2392   1393             ; --- START FACTORS
2393   1393 D7            push a
2394   1394 11            mov a, b
2395   1395 FD 2E 0A 00   mov32 cb, $0000000a
2395   1399 00 00 
2396   139B AC            mul a, b ; *
2397   139C 11            mov a, b
2398   139D 27            mov b, a
2399   139E E4            pop a
2400   139F             ; --- END FACTORS
2401   139F             ; --- START TERMS
2402   139F D7            push a
2403   13A0 11            mov a, b
2404   13A1 FA 05 00      lea d, [bp + 5] ; $str
2405   13A4 2A            mov b, [d]
2406   13A5 38 00 00      mov c, 0
2407   13A8 74            mov d, b
2408   13A9 32            mov bl, [d]
2409   13AA A7 00         mov bh, 0
2410   13AC 38 00 00      mov c, 0
2411   13AF             ; --- START TERMS
2412   13AF D7            push a
2413   13B0 11            mov a, b
2414   13B1 FD 2E 30 00   mov32 cb, $00000030
2414   13B5 00 00 
2415   13B7 60            sub a, b
2416   13B8 27            mov b, a
2417   13B9 E4            pop a
2418   13BA             ; --- END TERMS
2419   13BA 56            add b, a
2420   13BB E4            pop a
2421   13BC             ; --- END TERMS
2422   13BC E7            pop d
2423   13BD FD 43         mov [d], b
2424   13BF             ; str++; 
2425   13BF FA 05 00      lea d, [bp + 5] ; $str
2426   13C2 2A            mov b, [d]
2427   13C3 38 00 00      mov c, 0
2428   13C6 FD 77         inc b
2429   13C8 FA 05 00      lea d, [bp + 5] ; $str
2430   13CB FD 43         mov [d], b
2431   13CD FD 7D         dec b
2432   13CF 0A 49 13      jmp _while36_cond
2433   13D2             _while36_exit:
2434   13D2             ; return sign * result; 
2435   13D2 FA FD FF      lea d, [bp + -3] ; $sign
2436   13D5 2A            mov b, [d]
2437   13D6 38 00 00      mov c, 0
2438   13D9             ; --- START FACTORS
2439   13D9 D7            push a
2440   13DA 11            mov a, b
2441   13DB FA FF FF      lea d, [bp + -1] ; $result
2442   13DE 2A            mov b, [d]
2443   13DF 38 00 00      mov c, 0
2444   13E2 AC            mul a, b ; *
2445   13E3 11            mov a, b
2446   13E4 27            mov b, a
2447   13E5 E4            pop a
2448   13E6             ; --- END FACTORS
2449   13E6 F9            leave
2450   13E7 09            ret
2451   13E8             
2452   13E8             rand:
2453   13E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2454   13EB             ; int  sec; 
2455   13EB 52 02 00      sub sp, 2
2456   13EE             
2457   13EE             ; --- BEGIN INLINE ASM SEGMENT
2458   13EE 19 00         mov al, 0
2459   13F0 05 01         syscall sys_rtc					
2460   13F2 1A            mov al, ah
2461   13F3 FA FF FF      lea d, [bp + -1] ; $sec
2462   13F6 1E            mov al, [d]
2463   13F7 22 00         mov ah, 0
2464   13F9             ; --- END INLINE ASM SEGMENT
2465   13F9             
2466   13F9             ; return sec; 
2467   13F9 FA FF FF      lea d, [bp + -1] ; $sec
2468   13FC 2A            mov b, [d]
2469   13FD 38 00 00      mov c, 0
2470   1400 F9            leave
2471   1401 09            ret
2472   1402             
2473   1402             alloc:
2474   1402 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2475   1405             ; heap_top = heap_top + bytes; 
2476   1405 3B 99 54      mov d, _heap_top ; $heap_top
2477   1408 DA            push d
2478   1409 3B 99 54      mov d, _heap_top ; $heap_top
2479   140C 2A            mov b, [d]
2480   140D 38 00 00      mov c, 0
2481   1410             ; --- START TERMS
2482   1410 D7            push a
2483   1411 11            mov a, b
2484   1412 FA 05 00      lea d, [bp + 5] ; $bytes
2485   1415 2A            mov b, [d]
2486   1416 38 00 00      mov c, 0
2487   1419 56            add b, a
2488   141A E4            pop a
2489   141B             ; --- END TERMS
2490   141B E7            pop d
2491   141C FD 43         mov [d], b
2492   141E             ; return heap_top - bytes; 
2493   141E 3B 99 54      mov d, _heap_top ; $heap_top
2494   1421 2A            mov b, [d]
2495   1422 38 00 00      mov c, 0
2496   1425             ; --- START TERMS
2497   1425 D7            push a
2498   1426 11            mov a, b
2499   1427 FA 05 00      lea d, [bp + 5] ; $bytes
2500   142A 2A            mov b, [d]
2501   142B 38 00 00      mov c, 0
2502   142E 60            sub a, b
2503   142F 27            mov b, a
2504   1430 E4            pop a
2505   1431             ; --- END TERMS
2506   1431 F9            leave
2507   1432 09            ret
2508   1433             
2509   1433             free:
2510   1433 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2511   1436             ; return heap_top = heap_top - bytes; 
2512   1436 3B 99 54      mov d, _heap_top ; $heap_top
2513   1439 DA            push d
2514   143A 3B 99 54      mov d, _heap_top ; $heap_top
2515   143D 2A            mov b, [d]
2516   143E 38 00 00      mov c, 0
2517   1441             ; --- START TERMS
2518   1441 D7            push a
2519   1442 11            mov a, b
2520   1443 FA 05 00      lea d, [bp + 5] ; $bytes
2521   1446 2A            mov b, [d]
2522   1447 38 00 00      mov c, 0
2523   144A 60            sub a, b
2524   144B 27            mov b, a
2525   144C E4            pop a
2526   144D             ; --- END TERMS
2527   144D E7            pop d
2528   144E FD 43         mov [d], b
2529   1450 F9            leave
2530   1451 09            ret
2531   1452             
2532   1452             fopen:
2533   1452 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2534   1455             ; FILE *fp; 
2535   1455 52 02 00      sub sp, 2
2536   1458             ; static int max_handle = 0; 
2537   1458 52 02 00      sub sp, 2
2538   145B             ; fp = alloc(sizeof(FILE)); 
2539   145B FA FF FF      lea d, [bp + -1] ; $fp
2540   145E DA            push d
2541   145F             ; --- START FUNCTION CALL
2542   145F FD 2E 04 01   mov32 cb, 260
2542   1463 00 00 
2543   1465 FD AB         swp b
2544   1467 D8            push b
2545   1468 07 02 14      call alloc
2546   146B 51 02 00      add sp, 2
2547   146E             ; --- END FUNCTION CALL
2548   146E E7            pop d
2549   146F FD 43         mov [d], b
2550   1471             ; strcpy(fp->filename, filename); 
2551   1471             ; --- START FUNCTION CALL
2552   1471 FA 05 00      lea d, [bp + 5] ; $filename
2553   1474 2A            mov b, [d]
2554   1475 38 00 00      mov c, 0
2555   1478 FD AB         swp b
2556   147A D8            push b
2557   147B FA FF FF      lea d, [bp + -1] ; $fp
2558   147E FD 2A         mov d, [d]
2559   1480 58 02 00      add d, 2
2560   1483 2D            mov b, d
2561   1484 38 00 00      mov c, 0
2562   1487 FD AB         swp b
2563   1489 D8            push b
2564   148A 07 BF 0F      call strcpy
2565   148D 51 04 00      add sp, 4
2566   1490             ; --- END FUNCTION CALL
2567   1490             ; fp->handle = max_handle; 
2568   1490 FA FF FF      lea d, [bp + -1] ; $fp
2569   1493 FD 2A         mov d, [d]
2570   1495 58 00 00      add d, 0
2571   1498 DA            push d
2572   1499 3B BC 53      mov d, st_fopen_max_handle ; static max_handle
2573   149C 2A            mov b, [d]
2574   149D 38 00 00      mov c, 0
2575   14A0 E7            pop d
2576   14A1 FD 43         mov [d], b
2577   14A3             ; fp->mode = mode; 
2578   14A3 FA FF FF      lea d, [bp + -1] ; $fp
2579   14A6 FD 2A         mov d, [d]
2580   14A8 58 02 01      add d, 258
2581   14AB DA            push d
2582   14AC FA 07 00      lea d, [bp + 7] ; $mode
2583   14AF 32            mov bl, [d]
2584   14B0 A7 00         mov bh, 0
2585   14B2 38 00 00      mov c, 0
2586   14B5 E7            pop d
2587   14B6 FD 3E         mov [d], bl
2588   14B8             ; fp->loc = 0; 
2589   14B8 FA FF FF      lea d, [bp + -1] ; $fp
2590   14BB FD 2A         mov d, [d]
2591   14BD 58 03 01      add d, 259
2592   14C0 DA            push d
2593   14C1 FD 2E 00 00   mov32 cb, $00000000
2593   14C5 00 00 
2594   14C7 E7            pop d
2595   14C8 FD 3E         mov [d], bl
2596   14CA             ; max_handle++; 
2597   14CA 3B BC 53      mov d, st_fopen_max_handle ; static max_handle
2598   14CD 2A            mov b, [d]
2599   14CE 38 00 00      mov c, 0
2600   14D1 11            mov a, b
2601   14D2 FD 77         inc b
2602   14D4 3B BC 53      mov d, st_fopen_max_handle ; static max_handle
2603   14D7 FD 43         mov [d], b
2604   14D9 27            mov b, a
2605   14DA F9            leave
2606   14DB 09            ret
2607   14DC             
2608   14DC             fclose:
2609   14DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2610   14DF             ; free(sizeof(FILE)); 
2611   14DF             ; --- START FUNCTION CALL
2612   14DF FD 2E 04 01   mov32 cb, 260
2612   14E3 00 00 
2613   14E5 FD AB         swp b
2614   14E7 D8            push b
2615   14E8 07 33 14      call free
2616   14EB 51 02 00      add sp, 2
2617   14EE             ; --- END FUNCTION CALL
2618   14EE F9            leave
2619   14EF 09            ret
2620   14F0             
2621   14F0             printf:
2622   14F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2623   14F3             ; char *p, *format_p; 
2624   14F3 52 02 00      sub sp, 2
2625   14F6 52 02 00      sub sp, 2
2626   14F9             ; format_p = format; 
2627   14F9 FA FD FF      lea d, [bp + -3] ; $format_p
2628   14FC DA            push d
2629   14FD FA 05 00      lea d, [bp + 5] ; $format
2630   1500 2A            mov b, [d]
2631   1501 38 00 00      mov c, 0
2632   1504 E7            pop d
2633   1505 FD 43         mov [d], b
2634   1507             ; p = &format + 2; 
2635   1507 FA FF FF      lea d, [bp + -1] ; $p
2636   150A DA            push d
2637   150B FA 05 00      lea d, [bp + 5] ; $format
2638   150E 2D            mov b, d
2639   150F             ; --- START TERMS
2640   150F D7            push a
2641   1510 11            mov a, b
2642   1511 FD 2E 02 00   mov32 cb, $00000002
2642   1515 00 00 
2643   1517 56            add b, a
2644   1518 E4            pop a
2645   1519             ; --- END TERMS
2646   1519 E7            pop d
2647   151A FD 43         mov [d], b
2648   151C             ; for(;;){ 
2649   151C             _for37_init:
2650   151C             _for37_cond:
2651   151C             _for37_block:
2652   151C             ; if(!*format_p) break; 
2653   151C             _if38_cond:
2654   151C FA FD FF      lea d, [bp + -3] ; $format_p
2655   151F 2A            mov b, [d]
2656   1520 38 00 00      mov c, 0
2657   1523 74            mov d, b
2658   1524 32            mov bl, [d]
2659   1525 A7 00         mov bh, 0
2660   1527 38 00 00      mov c, 0
2661   152A C0 00 00      cmp b, 0
2662   152D FD 71         seq ; !
2663   152F C0 00 00      cmp b, 0
2664   1532 C6 3B 15      je _if38_else
2665   1535             _if38_TRUE:
2666   1535             ; break; 
2667   1535 0A CC 17      jmp _for37_exit ; for break
2668   1538 0A C9 17      jmp _if38_exit
2669   153B             _if38_else:
2670   153B             ; if(*format_p == '%'){ 
2671   153B             _if39_cond:
2672   153B FA FD FF      lea d, [bp + -3] ; $format_p
2673   153E 2A            mov b, [d]
2674   153F 38 00 00      mov c, 0
2675   1542 74            mov d, b
2676   1543 32            mov bl, [d]
2677   1544 A7 00         mov bh, 0
2678   1546 38 00 00      mov c, 0
2679   1549             ; --- START RELATIONAL
2680   1549 D7            push a
2681   154A 11            mov a, b
2682   154B FD 2E 25 00   mov32 cb, $00000025
2682   154F 00 00 
2683   1551 B0            cmp a, b
2684   1552 FD 71         seq ; ==
2685   1554 E4            pop a
2686   1555             ; --- END RELATIONAL
2687   1555 C0 00 00      cmp b, 0
2688   1558 C6 A4 17      je _if39_else
2689   155B             _if39_TRUE:
2690   155B             ; format_p++; 
2691   155B FA FD FF      lea d, [bp + -3] ; $format_p
2692   155E 2A            mov b, [d]
2693   155F 38 00 00      mov c, 0
2694   1562 FD 77         inc b
2695   1564 FA FD FF      lea d, [bp + -3] ; $format_p
2696   1567 FD 43         mov [d], b
2697   1569 FD 7D         dec b
2698   156B             ; switch(*format_p){ 
2699   156B             _switch40_expr:
2700   156B FA FD FF      lea d, [bp + -3] ; $format_p
2701   156E 2A            mov b, [d]
2702   156F 38 00 00      mov c, 0
2703   1572 74            mov d, b
2704   1573 32            mov bl, [d]
2705   1574 A7 00         mov bh, 0
2706   1576 38 00 00      mov c, 0
2707   1579             _switch40_comparisons:
2708   1579 C1 6C         cmp bl, $6c
2709   157B C6 A7 15      je _switch40_case0
2710   157E C1 4C         cmp bl, $4c
2711   1580 C6 A7 15      je _switch40_case1
2712   1583 C1 64         cmp bl, $64
2713   1585 C6 B7 16      je _switch40_case2
2714   1588 C1 69         cmp bl, $69
2715   158A C6 B7 16      je _switch40_case3
2716   158D C1 75         cmp bl, $75
2717   158F C6 E7 16      je _switch40_case4
2718   1592 C1 78         cmp bl, $78
2719   1594 C6 17 17      je _switch40_case5
2720   1597 C1 63         cmp bl, $63
2721   1599 C6 3B 17      je _switch40_case6
2722   159C C1 73         cmp bl, $73
2723   159E C6 60 17      je _switch40_case7
2724   15A1 0A 85 17      jmp _switch40_default
2725   15A4 0A 91 17      jmp _switch40_exit
2726   15A7             _switch40_case0:
2727   15A7             _switch40_case1:
2728   15A7             ; format_p++; 
2729   15A7 FA FD FF      lea d, [bp + -3] ; $format_p
2730   15AA 2A            mov b, [d]
2731   15AB 38 00 00      mov c, 0
2732   15AE FD 77         inc b
2733   15B0 FA FD FF      lea d, [bp + -3] ; $format_p
2734   15B3 FD 43         mov [d], b
2735   15B5 FD 7D         dec b
2736   15B7             ; if(*format_p == 'd' || *format_p == 'i') 
2737   15B7             _if41_cond:
2738   15B7 FA FD FF      lea d, [bp + -3] ; $format_p
2739   15BA 2A            mov b, [d]
2740   15BB 38 00 00      mov c, 0
2741   15BE 74            mov d, b
2742   15BF 32            mov bl, [d]
2743   15C0 A7 00         mov bh, 0
2744   15C2 38 00 00      mov c, 0
2745   15C5             ; --- START RELATIONAL
2746   15C5 D7            push a
2747   15C6 11            mov a, b
2748   15C7 FD 2E 64 00   mov32 cb, $00000064
2748   15CB 00 00 
2749   15CD B0            cmp a, b
2750   15CE FD 71         seq ; ==
2751   15D0 E4            pop a
2752   15D1             ; --- END RELATIONAL
2753   15D1             ; --- START LOGICAL OR
2754   15D1 D7            push a
2755   15D2 11            mov a, b
2756   15D3 FA FD FF      lea d, [bp + -3] ; $format_p
2757   15D6 2A            mov b, [d]
2758   15D7 38 00 00      mov c, 0
2759   15DA 74            mov d, b
2760   15DB 32            mov bl, [d]
2761   15DC A7 00         mov bh, 0
2762   15DE 38 00 00      mov c, 0
2763   15E1             ; --- START RELATIONAL
2764   15E1 D7            push a
2765   15E2 11            mov a, b
2766   15E3 FD 2E 69 00   mov32 cb, $00000069
2766   15E7 00 00 
2767   15E9 B0            cmp a, b
2768   15EA FD 71         seq ; ==
2769   15EC E4            pop a
2770   15ED             ; --- END RELATIONAL
2771   15ED FD A8         sor a, b ; ||
2772   15EF E4            pop a
2773   15F0             ; --- END LOGICAL OR
2774   15F0 C0 00 00      cmp b, 0
2775   15F3 C6 14 16      je _if41_else
2776   15F6             _if41_TRUE:
2777   15F6             ; print_signed_long(*(long *)p); 
2778   15F6             ; --- START FUNCTION CALL
2779   15F6 FA FF FF      lea d, [bp + -1] ; $p
2780   15F9 2A            mov b, [d]
2781   15FA 38 00 00      mov c, 0
2782   15FD 74            mov d, b
2783   15FE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2784   1601 FD 39         mov c, b ; And place it into C
2785   1603 2A            mov b, [d] ; Lower Word in B
2786   1604 12            mov a, c
2787   1605 FD AA         swp a
2788   1607 D7            push a
2789   1608 FD AB         swp b
2790   160A D8            push b
2791   160B 07 9E 21      call print_signed_long
2792   160E 51 04 00      add sp, 4
2793   1611             ; --- END FUNCTION CALL
2794   1611 0A 9C 16      jmp _if41_exit
2795   1614             _if41_else:
2796   1614             ; if(*format_p == 'u') 
2797   1614             _if42_cond:
2798   1614 FA FD FF      lea d, [bp + -3] ; $format_p
2799   1617 2A            mov b, [d]
2800   1618 38 00 00      mov c, 0
2801   161B 74            mov d, b
2802   161C 32            mov bl, [d]
2803   161D A7 00         mov bh, 0
2804   161F 38 00 00      mov c, 0
2805   1622             ; --- START RELATIONAL
2806   1622 D7            push a
2807   1623 11            mov a, b
2808   1624 FD 2E 75 00   mov32 cb, $00000075
2808   1628 00 00 
2809   162A B0            cmp a, b
2810   162B FD 71         seq ; ==
2811   162D E4            pop a
2812   162E             ; --- END RELATIONAL
2813   162E C0 00 00      cmp b, 0
2814   1631 C6 52 16      je _if42_else
2815   1634             _if42_TRUE:
2816   1634             ; print_unsigned_long(*(unsigned long *)p); 
2817   1634             ; --- START FUNCTION CALL
2818   1634 FA FF FF      lea d, [bp + -1] ; $p
2819   1637 2A            mov b, [d]
2820   1638 38 00 00      mov c, 0
2821   163B 74            mov d, b
2822   163C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2823   163F FD 39         mov c, b ; And place it into C
2824   1641 2A            mov b, [d] ; Lower Word in B
2825   1642 12            mov a, c
2826   1643 FD AA         swp a
2827   1645 D7            push a
2828   1646 FD AB         swp b
2829   1648 D8            push b
2830   1649 07 0D 23      call print_unsigned_long
2831   164C 51 04 00      add sp, 4
2832   164F             ; --- END FUNCTION CALL
2833   164F 0A 9C 16      jmp _if42_exit
2834   1652             _if42_else:
2835   1652             ; if(*format_p == 'x') 
2836   1652             _if43_cond:
2837   1652 FA FD FF      lea d, [bp + -3] ; $format_p
2838   1655 2A            mov b, [d]
2839   1656 38 00 00      mov c, 0
2840   1659 74            mov d, b
2841   165A 32            mov bl, [d]
2842   165B A7 00         mov bh, 0
2843   165D 38 00 00      mov c, 0
2844   1660             ; --- START RELATIONAL
2845   1660 D7            push a
2846   1661 11            mov a, b
2847   1662 FD 2E 78 00   mov32 cb, $00000078
2847   1666 00 00 
2848   1668 B0            cmp a, b
2849   1669 FD 71         seq ; ==
2850   166B E4            pop a
2851   166C             ; --- END RELATIONAL
2852   166C C0 00 00      cmp b, 0
2853   166F C6 90 16      je _if43_else
2854   1672             _if43_TRUE:
2855   1672             ; printx32(*(long int *)p); 
2856   1672             ; --- START FUNCTION CALL
2857   1672 FA FF FF      lea d, [bp + -1] ; $p
2858   1675 2A            mov b, [d]
2859   1676 38 00 00      mov c, 0
2860   1679 74            mov d, b
2861   167A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2862   167D FD 39         mov c, b ; And place it into C
2863   167F 2A            mov b, [d] ; Lower Word in B
2864   1680 12            mov a, c
2865   1681 FD AA         swp a
2866   1683 D7            push a
2867   1684 FD AB         swp b
2868   1686 D8            push b
2869   1687 07 71 1E      call printx32
2870   168A 51 04 00      add sp, 4
2871   168D             ; --- END FUNCTION CALL
2872   168D 0A 9C 16      jmp _if43_exit
2873   1690             _if43_else:
2874   1690             ; err("Unexpected format in printf."); 
2875   1690             ; --- START FUNCTION CALL
2876   1690 26 F9 53      mov b, _s10 ; "Unexpected format in printf."
2877   1693 FD AB         swp b
2878   1695 D8            push b
2879   1696 07 5C 1E      call err
2880   1699 51 02 00      add sp, 2
2881   169C             ; --- END FUNCTION CALL
2882   169C             _if43_exit:
2883   169C             _if42_exit:
2884   169C             _if41_exit:
2885   169C             ; p = p + 4; 
2886   169C FA FF FF      lea d, [bp + -1] ; $p
2887   169F DA            push d
2888   16A0 FA FF FF      lea d, [bp + -1] ; $p
2889   16A3 2A            mov b, [d]
2890   16A4 38 00 00      mov c, 0
2891   16A7             ; --- START TERMS
2892   16A7 D7            push a
2893   16A8 11            mov a, b
2894   16A9 FD 2E 04 00   mov32 cb, $00000004
2894   16AD 00 00 
2895   16AF 56            add b, a
2896   16B0 E4            pop a
2897   16B1             ; --- END TERMS
2898   16B1 E7            pop d
2899   16B2 FD 43         mov [d], b
2900   16B4             ; break; 
2901   16B4 0A 91 17      jmp _switch40_exit ; case break
2902   16B7             _switch40_case2:
2903   16B7             _switch40_case3:
2904   16B7             ; print_signed(*(int*)p); 
2905   16B7             ; --- START FUNCTION CALL
2906   16B7 FA FF FF      lea d, [bp + -1] ; $p
2907   16BA 2A            mov b, [d]
2908   16BB 38 00 00      mov c, 0
2909   16BE 74            mov d, b
2910   16BF 2A            mov b, [d]
2911   16C0 38 00 00      mov c, 0
2912   16C3 FD AB         swp b
2913   16C5 D8            push b
2914   16C6 07 65 20      call print_signed
2915   16C9 51 02 00      add sp, 2
2916   16CC             ; --- END FUNCTION CALL
2917   16CC             ; p = p + 2; 
2918   16CC FA FF FF      lea d, [bp + -1] ; $p
2919   16CF DA            push d
2920   16D0 FA FF FF      lea d, [bp + -1] ; $p
2921   16D3 2A            mov b, [d]
2922   16D4 38 00 00      mov c, 0
2923   16D7             ; --- START TERMS
2924   16D7 D7            push a
2925   16D8 11            mov a, b
2926   16D9 FD 2E 02 00   mov32 cb, $00000002
2926   16DD 00 00 
2927   16DF 56            add b, a
2928   16E0 E4            pop a
2929   16E1             ; --- END TERMS
2930   16E1 E7            pop d
2931   16E2 FD 43         mov [d], b
2932   16E4             ; break; 
2933   16E4 0A 91 17      jmp _switch40_exit ; case break
2934   16E7             _switch40_case4:
2935   16E7             ; print_unsigned(*(unsigned int*)p); 
2936   16E7             ; --- START FUNCTION CALL
2937   16E7 FA FF FF      lea d, [bp + -1] ; $p
2938   16EA 2A            mov b, [d]
2939   16EB 38 00 00      mov c, 0
2940   16EE 74            mov d, b
2941   16EF 2A            mov b, [d]
2942   16F0 38 00 00      mov c, 0
2943   16F3 FD AB         swp b
2944   16F5 D8            push b
2945   16F6 07 81 25      call print_unsigned
2946   16F9 51 02 00      add sp, 2
2947   16FC             ; --- END FUNCTION CALL
2948   16FC             ; p = p + 2; 
2949   16FC FA FF FF      lea d, [bp + -1] ; $p
2950   16FF DA            push d
2951   1700 FA FF FF      lea d, [bp + -1] ; $p
2952   1703 2A            mov b, [d]
2953   1704 38 00 00      mov c, 0
2954   1707             ; --- START TERMS
2955   1707 D7            push a
2956   1708 11            mov a, b
2957   1709 FD 2E 02 00   mov32 cb, $00000002
2957   170D 00 00 
2958   170F 56            add b, a
2959   1710 E4            pop a
2960   1711             ; --- END TERMS
2961   1711 E7            pop d
2962   1712 FD 43         mov [d], b
2963   1714             ; break; 
2964   1714 0A 91 17      jmp _switch40_exit ; case break
2965   1717             _switch40_case5:
2966   1717             
2967   1717             ; --- BEGIN INLINE ASM SEGMENT
2968   1717 FA FF FF      lea d, [bp + -1] ; $p
2969   171A FD 2A         mov d, [d]
2970   171C 2A            mov b, [d]
2971   171D 07 FA 2B      call print_u16x
2972   1720             ; --- END INLINE ASM SEGMENT
2973   1720             
2974   1720             ; p = p + 2; 
2975   1720 FA FF FF      lea d, [bp + -1] ; $p
2976   1723 DA            push d
2977   1724 FA FF FF      lea d, [bp + -1] ; $p
2978   1727 2A            mov b, [d]
2979   1728 38 00 00      mov c, 0
2980   172B             ; --- START TERMS
2981   172B D7            push a
2982   172C 11            mov a, b
2983   172D FD 2E 02 00   mov32 cb, $00000002
2983   1731 00 00 
2984   1733 56            add b, a
2985   1734 E4            pop a
2986   1735             ; --- END TERMS
2987   1735 E7            pop d
2988   1736 FD 43         mov [d], b
2989   1738             ; break; 
2990   1738 0A 91 17      jmp _switch40_exit ; case break
2991   173B             _switch40_case6:
2992   173B             
2993   173B             ; --- BEGIN INLINE ASM SEGMENT
2994   173B FA FF FF      lea d, [bp + -1] ; $p
2995   173E FD 2A         mov d, [d]
2996   1740 1E            mov al, [d]
2997   1741 23            mov ah, al
2998   1742 07 58 2A      call _putchar
2999   1745             ; --- END INLINE ASM SEGMENT
3000   1745             
3001   1745             ; p = p + 1; 
3002   1745 FA FF FF      lea d, [bp + -1] ; $p
3003   1748 DA            push d
3004   1749 FA FF FF      lea d, [bp + -1] ; $p
3005   174C 2A            mov b, [d]
3006   174D 38 00 00      mov c, 0
3007   1750             ; --- START TERMS
3008   1750 D7            push a
3009   1751 11            mov a, b
3010   1752 FD 2E 01 00   mov32 cb, $00000001
3010   1756 00 00 
3011   1758 56            add b, a
3012   1759 E4            pop a
3013   175A             ; --- END TERMS
3014   175A E7            pop d
3015   175B FD 43         mov [d], b
3016   175D             ; break; 
3017   175D 0A 91 17      jmp _switch40_exit ; case break
3018   1760             _switch40_case7:
3019   1760             
3020   1760             ; --- BEGIN INLINE ASM SEGMENT
3021   1760 FA FF FF      lea d, [bp + -1] ; $p
3022   1763 FD 2A         mov d, [d]
3023   1765 FD 2A         mov d, [d]
3024   1767 07 A2 2B      call _puts
3025   176A             ; --- END INLINE ASM SEGMENT
3026   176A             
3027   176A             ; p = p + 2; 
3028   176A FA FF FF      lea d, [bp + -1] ; $p
3029   176D DA            push d
3030   176E FA FF FF      lea d, [bp + -1] ; $p
3031   1771 2A            mov b, [d]
3032   1772 38 00 00      mov c, 0
3033   1775             ; --- START TERMS
3034   1775 D7            push a
3035   1776 11            mov a, b
3036   1777 FD 2E 02 00   mov32 cb, $00000002
3036   177B 00 00 
3037   177D 56            add b, a
3038   177E E4            pop a
3039   177F             ; --- END TERMS
3040   177F E7            pop d
3041   1780 FD 43         mov [d], b
3042   1782             ; break; 
3043   1782 0A 91 17      jmp _switch40_exit ; case break
3044   1785             _switch40_default:
3045   1785             ; print("Error: Unknown argument type.\n"); 
3046   1785             ; --- START FUNCTION CALL
3047   1785 26 16 54      mov b, _s11 ; "Error: Unknown argument type.\n"
3048   1788 FD AB         swp b
3049   178A D8            push b
3050   178B 07 97 28      call print
3051   178E 51 02 00      add sp, 2
3052   1791             ; --- END FUNCTION CALL
3053   1791             _switch40_exit:
3054   1791             ; format_p++; 
3055   1791 FA FD FF      lea d, [bp + -3] ; $format_p
3056   1794 2A            mov b, [d]
3057   1795 38 00 00      mov c, 0
3058   1798 FD 77         inc b
3059   179A FA FD FF      lea d, [bp + -3] ; $format_p
3060   179D FD 43         mov [d], b
3061   179F FD 7D         dec b
3062   17A1 0A C9 17      jmp _if39_exit
3063   17A4             _if39_else:
3064   17A4             ; putchar(*format_p); 
3065   17A4             ; --- START FUNCTION CALL
3066   17A4 FA FD FF      lea d, [bp + -3] ; $format_p
3067   17A7 2A            mov b, [d]
3068   17A8 38 00 00      mov c, 0
3069   17AB 74            mov d, b
3070   17AC 32            mov bl, [d]
3071   17AD A7 00         mov bh, 0
3072   17AF 38 00 00      mov c, 0
3073   17B2 DD            push bl
3074   17B3 07 49 28      call putchar
3075   17B6 51 01 00      add sp, 1
3076   17B9             ; --- END FUNCTION CALL
3077   17B9             ; format_p++; 
3078   17B9 FA FD FF      lea d, [bp + -3] ; $format_p
3079   17BC 2A            mov b, [d]
3080   17BD 38 00 00      mov c, 0
3081   17C0 FD 77         inc b
3082   17C2 FA FD FF      lea d, [bp + -3] ; $format_p
3083   17C5 FD 43         mov [d], b
3084   17C7 FD 7D         dec b
3085   17C9             _if39_exit:
3086   17C9             _if38_exit:
3087   17C9             _for37_update:
3088   17C9 0A 1C 15      jmp _for37_cond
3089   17CC             _for37_exit:
3090   17CC F9            leave
3091   17CD 09            ret
3092   17CE             
3093   17CE             scanf:
3094   17CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3095   17D1             ; char *p, *format_p; 
3096   17D1 52 02 00      sub sp, 2
3097   17D4 52 02 00      sub sp, 2
3098   17D7             ; char c; 
3099   17D7 52 01 00      sub sp, 1
3100   17DA             ; int i; 
3101   17DA 52 02 00      sub sp, 2
3102   17DD             ; char input_string[  512                    ]; 
3103   17DD 52 00 02      sub sp, 512
3104   17E0             ; format_p = format; 
3105   17E0 FA FD FF      lea d, [bp + -3] ; $format_p
3106   17E3 DA            push d
3107   17E4 FA 05 00      lea d, [bp + 5] ; $format
3108   17E7 2A            mov b, [d]
3109   17E8 38 00 00      mov c, 0
3110   17EB E7            pop d
3111   17EC FD 43         mov [d], b
3112   17EE             ; p = &format + 2; 
3113   17EE FA FF FF      lea d, [bp + -1] ; $p
3114   17F1 DA            push d
3115   17F2 FA 05 00      lea d, [bp + 5] ; $format
3116   17F5 2D            mov b, d
3117   17F6             ; --- START TERMS
3118   17F6 D7            push a
3119   17F7 11            mov a, b
3120   17F8 FD 2E 02 00   mov32 cb, $00000002
3120   17FC 00 00 
3121   17FE 56            add b, a
3122   17FF E4            pop a
3123   1800             ; --- END TERMS
3124   1800 E7            pop d
3125   1801 FD 43         mov [d], b
3126   1803             ; for(;;){ 
3127   1803             _for44_init:
3128   1803             _for44_cond:
3129   1803             _for44_block:
3130   1803             ; if(!*format_p) break; 
3131   1803             _if45_cond:
3132   1803 FA FD FF      lea d, [bp + -3] ; $format_p
3133   1806 2A            mov b, [d]
3134   1807 38 00 00      mov c, 0
3135   180A 74            mov d, b
3136   180B 32            mov bl, [d]
3137   180C A7 00         mov bh, 0
3138   180E 38 00 00      mov c, 0
3139   1811 C0 00 00      cmp b, 0
3140   1814 FD 71         seq ; !
3141   1816 C0 00 00      cmp b, 0
3142   1819 C6 22 18      je _if45_else
3143   181C             _if45_TRUE:
3144   181C             ; break; 
3145   181C 0A AA 1A      jmp _for44_exit ; for break
3146   181F 0A A7 1A      jmp _if45_exit
3147   1822             _if45_else:
3148   1822             ; if(*format_p == '%'){ 
3149   1822             _if46_cond:
3150   1822 FA FD FF      lea d, [bp + -3] ; $format_p
3151   1825 2A            mov b, [d]
3152   1826 38 00 00      mov c, 0
3153   1829 74            mov d, b
3154   182A 32            mov bl, [d]
3155   182B A7 00         mov bh, 0
3156   182D 38 00 00      mov c, 0
3157   1830             ; --- START RELATIONAL
3158   1830 D7            push a
3159   1831 11            mov a, b
3160   1832 FD 2E 25 00   mov32 cb, $00000025
3160   1836 00 00 
3161   1838 B0            cmp a, b
3162   1839 FD 71         seq ; ==
3163   183B E4            pop a
3164   183C             ; --- END RELATIONAL
3165   183C C0 00 00      cmp b, 0
3166   183F C6 82 1A      je _if46_else
3167   1842             _if46_TRUE:
3168   1842             ; format_p++; 
3169   1842 FA FD FF      lea d, [bp + -3] ; $format_p
3170   1845 2A            mov b, [d]
3171   1846 38 00 00      mov c, 0
3172   1849 FD 77         inc b
3173   184B FA FD FF      lea d, [bp + -3] ; $format_p
3174   184E FD 43         mov [d], b
3175   1850 FD 7D         dec b
3176   1852             ; switch(*format_p){ 
3177   1852             _switch47_expr:
3178   1852 FA FD FF      lea d, [bp + -3] ; $format_p
3179   1855 2A            mov b, [d]
3180   1856 38 00 00      mov c, 0
3181   1859 74            mov d, b
3182   185A 32            mov bl, [d]
3183   185B A7 00         mov bh, 0
3184   185D 38 00 00      mov c, 0
3185   1860             _switch47_comparisons:
3186   1860 C1 6C         cmp bl, $6c
3187   1862 C6 8E 18      je _switch47_case0
3188   1865 C1 4C         cmp bl, $4c
3189   1867 C6 8E 18      je _switch47_case1
3190   186A C1 64         cmp bl, $64
3191   186C C6 4D 19      je _switch47_case2
3192   186F C1 69         cmp bl, $69
3193   1871 C6 4D 19      je _switch47_case3
3194   1874 C1 75         cmp bl, $75
3195   1876 C6 86 19      je _switch47_case4
3196   1879 C1 78         cmp bl, $78
3197   187B C6 BF 19      je _switch47_case5
3198   187E C1 63         cmp bl, $63
3199   1880 C6 DA 19      je _switch47_case6
3200   1883 C1 73         cmp bl, $73
3201   1885 C6 1C 1A      je _switch47_case7
3202   1888 0A 63 1A      jmp _switch47_default
3203   188B 0A 6F 1A      jmp _switch47_exit
3204   188E             _switch47_case0:
3205   188E             _switch47_case1:
3206   188E             ; format_p++; 
3207   188E FA FD FF      lea d, [bp + -3] ; $format_p
3208   1891 2A            mov b, [d]
3209   1892 38 00 00      mov c, 0
3210   1895 FD 77         inc b
3211   1897 FA FD FF      lea d, [bp + -3] ; $format_p
3212   189A FD 43         mov [d], b
3213   189C FD 7D         dec b
3214   189E             ; if(*format_p == 'd' || *format_p == 'i'); 
3215   189E             _if48_cond:
3216   189E FA FD FF      lea d, [bp + -3] ; $format_p
3217   18A1 2A            mov b, [d]
3218   18A2 38 00 00      mov c, 0
3219   18A5 74            mov d, b
3220   18A6 32            mov bl, [d]
3221   18A7 A7 00         mov bh, 0
3222   18A9 38 00 00      mov c, 0
3223   18AC             ; --- START RELATIONAL
3224   18AC D7            push a
3225   18AD 11            mov a, b
3226   18AE FD 2E 64 00   mov32 cb, $00000064
3226   18B2 00 00 
3227   18B4 B0            cmp a, b
3228   18B5 FD 71         seq ; ==
3229   18B7 E4            pop a
3230   18B8             ; --- END RELATIONAL
3231   18B8             ; --- START LOGICAL OR
3232   18B8 D7            push a
3233   18B9 11            mov a, b
3234   18BA FA FD FF      lea d, [bp + -3] ; $format_p
3235   18BD 2A            mov b, [d]
3236   18BE 38 00 00      mov c, 0
3237   18C1 74            mov d, b
3238   18C2 32            mov bl, [d]
3239   18C3 A7 00         mov bh, 0
3240   18C5 38 00 00      mov c, 0
3241   18C8             ; --- START RELATIONAL
3242   18C8 D7            push a
3243   18C9 11            mov a, b
3244   18CA FD 2E 69 00   mov32 cb, $00000069
3244   18CE 00 00 
3245   18D0 B0            cmp a, b
3246   18D1 FD 71         seq ; ==
3247   18D3 E4            pop a
3248   18D4             ; --- END RELATIONAL
3249   18D4 FD A8         sor a, b ; ||
3250   18D6 E4            pop a
3251   18D7             ; --- END LOGICAL OR
3252   18D7 C0 00 00      cmp b, 0
3253   18DA C6 E0 18      je _if48_else
3254   18DD             _if48_TRUE:
3255   18DD             ; ; 
3256   18DD 0A 32 19      jmp _if48_exit
3257   18E0             _if48_else:
3258   18E0             ; if(*format_p == 'u'); 
3259   18E0             _if49_cond:
3260   18E0 FA FD FF      lea d, [bp + -3] ; $format_p
3261   18E3 2A            mov b, [d]
3262   18E4 38 00 00      mov c, 0
3263   18E7 74            mov d, b
3264   18E8 32            mov bl, [d]
3265   18E9 A7 00         mov bh, 0
3266   18EB 38 00 00      mov c, 0
3267   18EE             ; --- START RELATIONAL
3268   18EE D7            push a
3269   18EF 11            mov a, b
3270   18F0 FD 2E 75 00   mov32 cb, $00000075
3270   18F4 00 00 
3271   18F6 B0            cmp a, b
3272   18F7 FD 71         seq ; ==
3273   18F9 E4            pop a
3274   18FA             ; --- END RELATIONAL
3275   18FA C0 00 00      cmp b, 0
3276   18FD C6 03 19      je _if49_else
3277   1900             _if49_TRUE:
3278   1900             ; ; 
3279   1900 0A 32 19      jmp _if49_exit
3280   1903             _if49_else:
3281   1903             ; if(*format_p == 'x'); 
3282   1903             _if50_cond:
3283   1903 FA FD FF      lea d, [bp + -3] ; $format_p
3284   1906 2A            mov b, [d]
3285   1907 38 00 00      mov c, 0
3286   190A 74            mov d, b
3287   190B 32            mov bl, [d]
3288   190C A7 00         mov bh, 0
3289   190E 38 00 00      mov c, 0
3290   1911             ; --- START RELATIONAL
3291   1911 D7            push a
3292   1912 11            mov a, b
3293   1913 FD 2E 78 00   mov32 cb, $00000078
3293   1917 00 00 
3294   1919 B0            cmp a, b
3295   191A FD 71         seq ; ==
3296   191C E4            pop a
3297   191D             ; --- END RELATIONAL
3298   191D C0 00 00      cmp b, 0
3299   1920 C6 26 19      je _if50_else
3300   1923             _if50_TRUE:
3301   1923             ; ; 
3302   1923 0A 32 19      jmp _if50_exit
3303   1926             _if50_else:
3304   1926             ; err("Unexpected format in printf."); 
3305   1926             ; --- START FUNCTION CALL
3306   1926 26 F9 53      mov b, _s10 ; "Unexpected format in printf."
3307   1929 FD AB         swp b
3308   192B D8            push b
3309   192C 07 5C 1E      call err
3310   192F 51 02 00      add sp, 2
3311   1932             ; --- END FUNCTION CALL
3312   1932             _if50_exit:
3313   1932             _if49_exit:
3314   1932             _if48_exit:
3315   1932             ; p = p + 4; 
3316   1932 FA FF FF      lea d, [bp + -1] ; $p
3317   1935 DA            push d
3318   1936 FA FF FF      lea d, [bp + -1] ; $p
3319   1939 2A            mov b, [d]
3320   193A 38 00 00      mov c, 0
3321   193D             ; --- START TERMS
3322   193D D7            push a
3323   193E 11            mov a, b
3324   193F FD 2E 04 00   mov32 cb, $00000004
3324   1943 00 00 
3325   1945 56            add b, a
3326   1946 E4            pop a
3327   1947             ; --- END TERMS
3328   1947 E7            pop d
3329   1948 FD 43         mov [d], b
3330   194A             ; break; 
3331   194A 0A 6F 1A      jmp _switch47_exit ; case break
3332   194D             _switch47_case2:
3333   194D             _switch47_case3:
3334   194D             ; i = scann(); 
3335   194D FA FA FF      lea d, [bp + -6] ; $i
3336   1950 DA            push d
3337   1951             ; --- START FUNCTION CALL
3338   1951 07 6F 28      call scann
3339   1954 E7            pop d
3340   1955 FD 43         mov [d], b
3341   1957             ; **(int **)p = i; 
3342   1957 FA FF FF      lea d, [bp + -1] ; $p
3343   195A 2A            mov b, [d]
3344   195B 38 00 00      mov c, 0
3345   195E 74            mov d, b
3346   195F 2A            mov b, [d]
3347   1960 D8            push b
3348   1961 FA FA FF      lea d, [bp + -6] ; $i
3349   1964 2A            mov b, [d]
3350   1965 38 00 00      mov c, 0
3351   1968 E7            pop d
3352   1969 FD 43         mov [d], b
3353   196B             ; p = p + 2; 
3354   196B FA FF FF      lea d, [bp + -1] ; $p
3355   196E DA            push d
3356   196F FA FF FF      lea d, [bp + -1] ; $p
3357   1972 2A            mov b, [d]
3358   1973 38 00 00      mov c, 0
3359   1976             ; --- START TERMS
3360   1976 D7            push a
3361   1977 11            mov a, b
3362   1978 FD 2E 02 00   mov32 cb, $00000002
3362   197C 00 00 
3363   197E 56            add b, a
3364   197F E4            pop a
3365   1980             ; --- END TERMS
3366   1980 E7            pop d
3367   1981 FD 43         mov [d], b
3368   1983             ; break; 
3369   1983 0A 6F 1A      jmp _switch47_exit ; case break
3370   1986             _switch47_case4:
3371   1986             ; i = scann(); 
3372   1986 FA FA FF      lea d, [bp + -6] ; $i
3373   1989 DA            push d
3374   198A             ; --- START FUNCTION CALL
3375   198A 07 6F 28      call scann
3376   198D E7            pop d
3377   198E FD 43         mov [d], b
3378   1990             ; **(int **)p = i; 
3379   1990 FA FF FF      lea d, [bp + -1] ; $p
3380   1993 2A            mov b, [d]
3381   1994 38 00 00      mov c, 0
3382   1997 74            mov d, b
3383   1998 2A            mov b, [d]
3384   1999 D8            push b
3385   199A FA FA FF      lea d, [bp + -6] ; $i
3386   199D 2A            mov b, [d]
3387   199E 38 00 00      mov c, 0
3388   19A1 E7            pop d
3389   19A2 FD 43         mov [d], b
3390   19A4             ; p = p + 2; 
3391   19A4 FA FF FF      lea d, [bp + -1] ; $p
3392   19A7 DA            push d
3393   19A8 FA FF FF      lea d, [bp + -1] ; $p
3394   19AB 2A            mov b, [d]
3395   19AC 38 00 00      mov c, 0
3396   19AF             ; --- START TERMS
3397   19AF D7            push a
3398   19B0 11            mov a, b
3399   19B1 FD 2E 02 00   mov32 cb, $00000002
3399   19B5 00 00 
3400   19B7 56            add b, a
3401   19B8 E4            pop a
3402   19B9             ; --- END TERMS
3403   19B9 E7            pop d
3404   19BA FD 43         mov [d], b
3405   19BC             ; break; 
3406   19BC 0A 6F 1A      jmp _switch47_exit ; case break
3407   19BF             _switch47_case5:
3408   19BF             ; p = p + 2; 
3409   19BF FA FF FF      lea d, [bp + -1] ; $p
3410   19C2 DA            push d
3411   19C3 FA FF FF      lea d, [bp + -1] ; $p
3412   19C6 2A            mov b, [d]
3413   19C7 38 00 00      mov c, 0
3414   19CA             ; --- START TERMS
3415   19CA D7            push a
3416   19CB 11            mov a, b
3417   19CC FD 2E 02 00   mov32 cb, $00000002
3417   19D0 00 00 
3418   19D2 56            add b, a
3419   19D3 E4            pop a
3420   19D4             ; --- END TERMS
3421   19D4 E7            pop d
3422   19D5 FD 43         mov [d], b
3423   19D7             ; break; 
3424   19D7 0A 6F 1A      jmp _switch47_exit ; case break
3425   19DA             _switch47_case6:
3426   19DA             ; c = getchar(); 
3427   19DA FA FC FF      lea d, [bp + -4] ; $c
3428   19DD DA            push d
3429   19DE             ; --- START FUNCTION CALL
3430   19DE 07 56 28      call getchar
3431   19E1 E7            pop d
3432   19E2 FD 3E         mov [d], bl
3433   19E4             ; **(char **)p = *(char *)c; 
3434   19E4 FA FF FF      lea d, [bp + -1] ; $p
3435   19E7 2A            mov b, [d]
3436   19E8 38 00 00      mov c, 0
3437   19EB 74            mov d, b
3438   19EC 2A            mov b, [d]
3439   19ED D8            push b
3440   19EE FA FC FF      lea d, [bp + -4] ; $c
3441   19F1 32            mov bl, [d]
3442   19F2 A7 00         mov bh, 0
3443   19F4 38 00 00      mov c, 0
3444   19F7 74            mov d, b
3445   19F8 32            mov bl, [d]
3446   19F9 A7 00         mov bh, 0
3447   19FB 38 00 00      mov c, 0
3448   19FE E7            pop d
3449   19FF FD 43         mov [d], b
3450   1A01             ; p = p + 1; 
3451   1A01 FA FF FF      lea d, [bp + -1] ; $p
3452   1A04 DA            push d
3453   1A05 FA FF FF      lea d, [bp + -1] ; $p
3454   1A08 2A            mov b, [d]
3455   1A09 38 00 00      mov c, 0
3456   1A0C             ; --- START TERMS
3457   1A0C D7            push a
3458   1A0D 11            mov a, b
3459   1A0E FD 2E 01 00   mov32 cb, $00000001
3459   1A12 00 00 
3460   1A14 56            add b, a
3461   1A15 E4            pop a
3462   1A16             ; --- END TERMS
3463   1A16 E7            pop d
3464   1A17 FD 43         mov [d], b
3465   1A19             ; break; 
3466   1A19 0A 6F 1A      jmp _switch47_exit ; case break
3467   1A1C             _switch47_case7:
3468   1A1C             ; gets(input_string); 
3469   1A1C             ; --- START FUNCTION CALL
3470   1A1C FA FA FD      lea d, [bp + -518] ; $input_string
3471   1A1F 2D            mov b, d
3472   1A20 38 00 00      mov c, 0
3473   1A23 FD AB         swp b
3474   1A25 D8            push b
3475   1A26 07 48 20      call gets
3476   1A29 51 02 00      add sp, 2
3477   1A2C             ; --- END FUNCTION CALL
3478   1A2C             ; strcpy(*(char **)p, input_string); 
3479   1A2C             ; --- START FUNCTION CALL
3480   1A2C FA FA FD      lea d, [bp + -518] ; $input_string
3481   1A2F 2D            mov b, d
3482   1A30 38 00 00      mov c, 0
3483   1A33 FD AB         swp b
3484   1A35 D8            push b
3485   1A36 FA FF FF      lea d, [bp + -1] ; $p
3486   1A39 2A            mov b, [d]
3487   1A3A 38 00 00      mov c, 0
3488   1A3D 74            mov d, b
3489   1A3E 2A            mov b, [d]
3490   1A3F FD AB         swp b
3491   1A41 D8            push b
3492   1A42 07 BF 0F      call strcpy
3493   1A45 51 04 00      add sp, 4
3494   1A48             ; --- END FUNCTION CALL
3495   1A48             ; p = p + 2; 
3496   1A48 FA FF FF      lea d, [bp + -1] ; $p
3497   1A4B DA            push d
3498   1A4C FA FF FF      lea d, [bp + -1] ; $p
3499   1A4F 2A            mov b, [d]
3500   1A50 38 00 00      mov c, 0
3501   1A53             ; --- START TERMS
3502   1A53 D7            push a
3503   1A54 11            mov a, b
3504   1A55 FD 2E 02 00   mov32 cb, $00000002
3504   1A59 00 00 
3505   1A5B 56            add b, a
3506   1A5C E4            pop a
3507   1A5D             ; --- END TERMS
3508   1A5D E7            pop d
3509   1A5E FD 43         mov [d], b
3510   1A60             ; break; 
3511   1A60 0A 6F 1A      jmp _switch47_exit ; case break
3512   1A63             _switch47_default:
3513   1A63             ; print("Error: Unknown argument type.\n"); 
3514   1A63             ; --- START FUNCTION CALL
3515   1A63 26 16 54      mov b, _s11 ; "Error: Unknown argument type.\n"
3516   1A66 FD AB         swp b
3517   1A68 D8            push b
3518   1A69 07 97 28      call print
3519   1A6C 51 02 00      add sp, 2
3520   1A6F             ; --- END FUNCTION CALL
3521   1A6F             _switch47_exit:
3522   1A6F             ; format_p++; 
3523   1A6F FA FD FF      lea d, [bp + -3] ; $format_p
3524   1A72 2A            mov b, [d]
3525   1A73 38 00 00      mov c, 0
3526   1A76 FD 77         inc b
3527   1A78 FA FD FF      lea d, [bp + -3] ; $format_p
3528   1A7B FD 43         mov [d], b
3529   1A7D FD 7D         dec b
3530   1A7F 0A A7 1A      jmp _if46_exit
3531   1A82             _if46_else:
3532   1A82             ; putchar(*format_p); 
3533   1A82             ; --- START FUNCTION CALL
3534   1A82 FA FD FF      lea d, [bp + -3] ; $format_p
3535   1A85 2A            mov b, [d]
3536   1A86 38 00 00      mov c, 0
3537   1A89 74            mov d, b
3538   1A8A 32            mov bl, [d]
3539   1A8B A7 00         mov bh, 0
3540   1A8D 38 00 00      mov c, 0
3541   1A90 DD            push bl
3542   1A91 07 49 28      call putchar
3543   1A94 51 01 00      add sp, 1
3544   1A97             ; --- END FUNCTION CALL
3545   1A97             ; format_p++; 
3546   1A97 FA FD FF      lea d, [bp + -3] ; $format_p
3547   1A9A 2A            mov b, [d]
3548   1A9B 38 00 00      mov c, 0
3549   1A9E FD 77         inc b
3550   1AA0 FA FD FF      lea d, [bp + -3] ; $format_p
3551   1AA3 FD 43         mov [d], b
3552   1AA5 FD 7D         dec b
3553   1AA7             _if46_exit:
3554   1AA7             _if45_exit:
3555   1AA7             _for44_update:
3556   1AA7 0A 03 18      jmp _for44_cond
3557   1AAA             _for44_exit:
3558   1AAA F9            leave
3559   1AAB 09            ret
3560   1AAC             
3561   1AAC             sprintf:
3562   1AAC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3563   1AAF             ; char *p, *format_p; 
3564   1AAF 52 02 00      sub sp, 2
3565   1AB2 52 02 00      sub sp, 2
3566   1AB5             ; char *sp; 
3567   1AB5 52 02 00      sub sp, 2
3568   1AB8             ; sp = dest; 
3569   1AB8 FA FB FF      lea d, [bp + -5] ; $sp
3570   1ABB DA            push d
3571   1ABC FA 05 00      lea d, [bp + 5] ; $dest
3572   1ABF 2A            mov b, [d]
3573   1AC0 38 00 00      mov c, 0
3574   1AC3 E7            pop d
3575   1AC4 FD 43         mov [d], b
3576   1AC6             ; format_p = format; 
3577   1AC6 FA FD FF      lea d, [bp + -3] ; $format_p
3578   1AC9 DA            push d
3579   1ACA FA 07 00      lea d, [bp + 7] ; $format
3580   1ACD 2A            mov b, [d]
3581   1ACE 38 00 00      mov c, 0
3582   1AD1 E7            pop d
3583   1AD2 FD 43         mov [d], b
3584   1AD4             ; p = &format + 2; 
3585   1AD4 FA FF FF      lea d, [bp + -1] ; $p
3586   1AD7 DA            push d
3587   1AD8 FA 07 00      lea d, [bp + 7] ; $format
3588   1ADB 2D            mov b, d
3589   1ADC             ; --- START TERMS
3590   1ADC D7            push a
3591   1ADD 11            mov a, b
3592   1ADE FD 2E 02 00   mov32 cb, $00000002
3592   1AE2 00 00 
3593   1AE4 56            add b, a
3594   1AE5 E4            pop a
3595   1AE6             ; --- END TERMS
3596   1AE6 E7            pop d
3597   1AE7 FD 43         mov [d], b
3598   1AE9             ; for(;;){ 
3599   1AE9             _for51_init:
3600   1AE9             _for51_cond:
3601   1AE9             _for51_block:
3602   1AE9             ; if(!*format_p) break; 
3603   1AE9             _if52_cond:
3604   1AE9 FA FD FF      lea d, [bp + -3] ; $format_p
3605   1AEC 2A            mov b, [d]
3606   1AED 38 00 00      mov c, 0
3607   1AF0 74            mov d, b
3608   1AF1 32            mov bl, [d]
3609   1AF2 A7 00         mov bh, 0
3610   1AF4 38 00 00      mov c, 0
3611   1AF7 C0 00 00      cmp b, 0
3612   1AFA FD 71         seq ; !
3613   1AFC C0 00 00      cmp b, 0
3614   1AFF C6 08 1B      je _if52_else
3615   1B02             _if52_TRUE:
3616   1B02             ; break; 
3617   1B02 0A 36 1E      jmp _for51_exit ; for break
3618   1B05 0A 33 1E      jmp _if52_exit
3619   1B08             _if52_else:
3620   1B08             ; if(*format_p == '%'){ 
3621   1B08             _if53_cond:
3622   1B08 FA FD FF      lea d, [bp + -3] ; $format_p
3623   1B0B 2A            mov b, [d]
3624   1B0C 38 00 00      mov c, 0
3625   1B0F 74            mov d, b
3626   1B10 32            mov bl, [d]
3627   1B11 A7 00         mov bh, 0
3628   1B13 38 00 00      mov c, 0
3629   1B16             ; --- START RELATIONAL
3630   1B16 D7            push a
3631   1B17 11            mov a, b
3632   1B18 FD 2E 25 00   mov32 cb, $00000025
3632   1B1C 00 00 
3633   1B1E B0            cmp a, b
3634   1B1F FD 71         seq ; ==
3635   1B21 E4            pop a
3636   1B22             ; --- END RELATIONAL
3637   1B22 C0 00 00      cmp b, 0
3638   1B25 C6 08 1E      je _if53_else
3639   1B28             _if53_TRUE:
3640   1B28             ; format_p++; 
3641   1B28 FA FD FF      lea d, [bp + -3] ; $format_p
3642   1B2B 2A            mov b, [d]
3643   1B2C 38 00 00      mov c, 0
3644   1B2F FD 77         inc b
3645   1B31 FA FD FF      lea d, [bp + -3] ; $format_p
3646   1B34 FD 43         mov [d], b
3647   1B36 FD 7D         dec b
3648   1B38             ; switch(*format_p){ 
3649   1B38             _switch54_expr:
3650   1B38 FA FD FF      lea d, [bp + -3] ; $format_p
3651   1B3B 2A            mov b, [d]
3652   1B3C 38 00 00      mov c, 0
3653   1B3F 74            mov d, b
3654   1B40 32            mov bl, [d]
3655   1B41 A7 00         mov bh, 0
3656   1B43 38 00 00      mov c, 0
3657   1B46             _switch54_comparisons:
3658   1B46 C1 6C         cmp bl, $6c
3659   1B48 C6 74 1B      je _switch54_case0
3660   1B4B C1 4C         cmp bl, $4c
3661   1B4D C6 74 1B      je _switch54_case1
3662   1B50 C1 64         cmp bl, $64
3663   1B52 C6 84 1C      je _switch54_case2
3664   1B55 C1 69         cmp bl, $69
3665   1B57 C6 84 1C      je _switch54_case3
3666   1B5A C1 75         cmp bl, $75
3667   1B5C C6 D0 1C      je _switch54_case4
3668   1B5F C1 78         cmp bl, $78
3669   1B61 C6 1C 1D      je _switch54_case5
3670   1B64 C1 63         cmp bl, $63
3671   1B66 C6 40 1D      je _switch54_case6
3672   1B69 C1 73         cmp bl, $73
3673   1B6B C6 7D 1D      je _switch54_case7
3674   1B6E 0A E9 1D      jmp _switch54_default
3675   1B71 0A F5 1D      jmp _switch54_exit
3676   1B74             _switch54_case0:
3677   1B74             _switch54_case1:
3678   1B74             ; format_p++; 
3679   1B74 FA FD FF      lea d, [bp + -3] ; $format_p
3680   1B77 2A            mov b, [d]
3681   1B78 38 00 00      mov c, 0
3682   1B7B FD 77         inc b
3683   1B7D FA FD FF      lea d, [bp + -3] ; $format_p
3684   1B80 FD 43         mov [d], b
3685   1B82 FD 7D         dec b
3686   1B84             ; if(*format_p == 'd' || *format_p == 'i') 
3687   1B84             _if55_cond:
3688   1B84 FA FD FF      lea d, [bp + -3] ; $format_p
3689   1B87 2A            mov b, [d]
3690   1B88 38 00 00      mov c, 0
3691   1B8B 74            mov d, b
3692   1B8C 32            mov bl, [d]
3693   1B8D A7 00         mov bh, 0
3694   1B8F 38 00 00      mov c, 0
3695   1B92             ; --- START RELATIONAL
3696   1B92 D7            push a
3697   1B93 11            mov a, b
3698   1B94 FD 2E 64 00   mov32 cb, $00000064
3698   1B98 00 00 
3699   1B9A B0            cmp a, b
3700   1B9B FD 71         seq ; ==
3701   1B9D E4            pop a
3702   1B9E             ; --- END RELATIONAL
3703   1B9E             ; --- START LOGICAL OR
3704   1B9E D7            push a
3705   1B9F 11            mov a, b
3706   1BA0 FA FD FF      lea d, [bp + -3] ; $format_p
3707   1BA3 2A            mov b, [d]
3708   1BA4 38 00 00      mov c, 0
3709   1BA7 74            mov d, b
3710   1BA8 32            mov bl, [d]
3711   1BA9 A7 00         mov bh, 0
3712   1BAB 38 00 00      mov c, 0
3713   1BAE             ; --- START RELATIONAL
3714   1BAE D7            push a
3715   1BAF 11            mov a, b
3716   1BB0 FD 2E 69 00   mov32 cb, $00000069
3716   1BB4 00 00 
3717   1BB6 B0            cmp a, b
3718   1BB7 FD 71         seq ; ==
3719   1BB9 E4            pop a
3720   1BBA             ; --- END RELATIONAL
3721   1BBA FD A8         sor a, b ; ||
3722   1BBC E4            pop a
3723   1BBD             ; --- END LOGICAL OR
3724   1BBD C0 00 00      cmp b, 0
3725   1BC0 C6 E1 1B      je _if55_else
3726   1BC3             _if55_TRUE:
3727   1BC3             ; print_signed_long(*(long *)p); 
3728   1BC3             ; --- START FUNCTION CALL
3729   1BC3 FA FF FF      lea d, [bp + -1] ; $p
3730   1BC6 2A            mov b, [d]
3731   1BC7 38 00 00      mov c, 0
3732   1BCA 74            mov d, b
3733   1BCB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3734   1BCE FD 39         mov c, b ; And place it into C
3735   1BD0 2A            mov b, [d] ; Lower Word in B
3736   1BD1 12            mov a, c
3737   1BD2 FD AA         swp a
3738   1BD4 D7            push a
3739   1BD5 FD AB         swp b
3740   1BD7 D8            push b
3741   1BD8 07 9E 21      call print_signed_long
3742   1BDB 51 04 00      add sp, 4
3743   1BDE             ; --- END FUNCTION CALL
3744   1BDE 0A 69 1C      jmp _if55_exit
3745   1BE1             _if55_else:
3746   1BE1             ; if(*format_p == 'u') 
3747   1BE1             _if56_cond:
3748   1BE1 FA FD FF      lea d, [bp + -3] ; $format_p
3749   1BE4 2A            mov b, [d]
3750   1BE5 38 00 00      mov c, 0
3751   1BE8 74            mov d, b
3752   1BE9 32            mov bl, [d]
3753   1BEA A7 00         mov bh, 0
3754   1BEC 38 00 00      mov c, 0
3755   1BEF             ; --- START RELATIONAL
3756   1BEF D7            push a
3757   1BF0 11            mov a, b
3758   1BF1 FD 2E 75 00   mov32 cb, $00000075
3758   1BF5 00 00 
3759   1BF7 B0            cmp a, b
3760   1BF8 FD 71         seq ; ==
3761   1BFA E4            pop a
3762   1BFB             ; --- END RELATIONAL
3763   1BFB C0 00 00      cmp b, 0
3764   1BFE C6 1F 1C      je _if56_else
3765   1C01             _if56_TRUE:
3766   1C01             ; print_unsigned_long(*(unsigned long *)p); 
3767   1C01             ; --- START FUNCTION CALL
3768   1C01 FA FF FF      lea d, [bp + -1] ; $p
3769   1C04 2A            mov b, [d]
3770   1C05 38 00 00      mov c, 0
3771   1C08 74            mov d, b
3772   1C09 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3773   1C0C FD 39         mov c, b ; And place it into C
3774   1C0E 2A            mov b, [d] ; Lower Word in B
3775   1C0F 12            mov a, c
3776   1C10 FD AA         swp a
3777   1C12 D7            push a
3778   1C13 FD AB         swp b
3779   1C15 D8            push b
3780   1C16 07 0D 23      call print_unsigned_long
3781   1C19 51 04 00      add sp, 4
3782   1C1C             ; --- END FUNCTION CALL
3783   1C1C 0A 69 1C      jmp _if56_exit
3784   1C1F             _if56_else:
3785   1C1F             ; if(*format_p == 'x') 
3786   1C1F             _if57_cond:
3787   1C1F FA FD FF      lea d, [bp + -3] ; $format_p
3788   1C22 2A            mov b, [d]
3789   1C23 38 00 00      mov c, 0
3790   1C26 74            mov d, b
3791   1C27 32            mov bl, [d]
3792   1C28 A7 00         mov bh, 0
3793   1C2A 38 00 00      mov c, 0
3794   1C2D             ; --- START RELATIONAL
3795   1C2D D7            push a
3796   1C2E 11            mov a, b
3797   1C2F FD 2E 78 00   mov32 cb, $00000078
3797   1C33 00 00 
3798   1C35 B0            cmp a, b
3799   1C36 FD 71         seq ; ==
3800   1C38 E4            pop a
3801   1C39             ; --- END RELATIONAL
3802   1C39 C0 00 00      cmp b, 0
3803   1C3C C6 5D 1C      je _if57_else
3804   1C3F             _if57_TRUE:
3805   1C3F             ; printx32(*(long int *)p); 
3806   1C3F             ; --- START FUNCTION CALL
3807   1C3F FA FF FF      lea d, [bp + -1] ; $p
3808   1C42 2A            mov b, [d]
3809   1C43 38 00 00      mov c, 0
3810   1C46 74            mov d, b
3811   1C47 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3812   1C4A FD 39         mov c, b ; And place it into C
3813   1C4C 2A            mov b, [d] ; Lower Word in B
3814   1C4D 12            mov a, c
3815   1C4E FD AA         swp a
3816   1C50 D7            push a
3817   1C51 FD AB         swp b
3818   1C53 D8            push b
3819   1C54 07 71 1E      call printx32
3820   1C57 51 04 00      add sp, 4
3821   1C5A             ; --- END FUNCTION CALL
3822   1C5A 0A 69 1C      jmp _if57_exit
3823   1C5D             _if57_else:
3824   1C5D             ; err("Unexpected format in printf."); 
3825   1C5D             ; --- START FUNCTION CALL
3826   1C5D 26 F9 53      mov b, _s10 ; "Unexpected format in printf."
3827   1C60 FD AB         swp b
3828   1C62 D8            push b
3829   1C63 07 5C 1E      call err
3830   1C66 51 02 00      add sp, 2
3831   1C69             ; --- END FUNCTION CALL
3832   1C69             _if57_exit:
3833   1C69             _if56_exit:
3834   1C69             _if55_exit:
3835   1C69             ; p = p + 4; 
3836   1C69 FA FF FF      lea d, [bp + -1] ; $p
3837   1C6C DA            push d
3838   1C6D FA FF FF      lea d, [bp + -1] ; $p
3839   1C70 2A            mov b, [d]
3840   1C71 38 00 00      mov c, 0
3841   1C74             ; --- START TERMS
3842   1C74 D7            push a
3843   1C75 11            mov a, b
3844   1C76 FD 2E 04 00   mov32 cb, $00000004
3844   1C7A 00 00 
3845   1C7C 56            add b, a
3846   1C7D E4            pop a
3847   1C7E             ; --- END TERMS
3848   1C7E E7            pop d
3849   1C7F FD 43         mov [d], b
3850   1C81             ; break; 
3851   1C81 0A F5 1D      jmp _switch54_exit ; case break
3852   1C84             _switch54_case2:
3853   1C84             _switch54_case3:
3854   1C84             ; sp = sp + sprint_signed(sp, *(int*)p); 
3855   1C84 FA FB FF      lea d, [bp + -5] ; $sp
3856   1C87 DA            push d
3857   1C88 FA FB FF      lea d, [bp + -5] ; $sp
3858   1C8B 2A            mov b, [d]
3859   1C8C 38 00 00      mov c, 0
3860   1C8F             ; --- START TERMS
3861   1C8F D7            push a
3862   1C90 11            mov a, b
3863   1C91             ; --- START FUNCTION CALL
3864   1C91 FA FF FF      lea d, [bp + -1] ; $p
3865   1C94 2A            mov b, [d]
3866   1C95 38 00 00      mov c, 0
3867   1C98 74            mov d, b
3868   1C99 2A            mov b, [d]
3869   1C9A 38 00 00      mov c, 0
3870   1C9D FD AB         swp b
3871   1C9F D8            push b
3872   1CA0 FA FB FF      lea d, [bp + -5] ; $sp
3873   1CA3 2A            mov b, [d]
3874   1CA4 38 00 00      mov c, 0
3875   1CA7 FD AB         swp b
3876   1CA9 D8            push b
3877   1CAA 07 81 26      call sprint_signed
3878   1CAD 51 04 00      add sp, 4
3879   1CB0             ; --- END FUNCTION CALL
3880   1CB0 56            add b, a
3881   1CB1 E4            pop a
3882   1CB2             ; --- END TERMS
3883   1CB2 E7            pop d
3884   1CB3 FD 43         mov [d], b
3885   1CB5             ; p = p + 2; 
3886   1CB5 FA FF FF      lea d, [bp + -1] ; $p
3887   1CB8 DA            push d
3888   1CB9 FA FF FF      lea d, [bp + -1] ; $p
3889   1CBC 2A            mov b, [d]
3890   1CBD 38 00 00      mov c, 0
3891   1CC0             ; --- START TERMS
3892   1CC0 D7            push a
3893   1CC1 11            mov a, b
3894   1CC2 FD 2E 02 00   mov32 cb, $00000002
3894   1CC6 00 00 
3895   1CC8 56            add b, a
3896   1CC9 E4            pop a
3897   1CCA             ; --- END TERMS
3898   1CCA E7            pop d
3899   1CCB FD 43         mov [d], b
3900   1CCD             ; break; 
3901   1CCD 0A F5 1D      jmp _switch54_exit ; case break
3902   1CD0             _switch54_case4:
3903   1CD0             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
3904   1CD0 FA FB FF      lea d, [bp + -5] ; $sp
3905   1CD3 DA            push d
3906   1CD4 FA FB FF      lea d, [bp + -5] ; $sp
3907   1CD7 2A            mov b, [d]
3908   1CD8 38 00 00      mov c, 0
3909   1CDB             ; --- START TERMS
3910   1CDB D7            push a
3911   1CDC 11            mov a, b
3912   1CDD             ; --- START FUNCTION CALL
3913   1CDD FA FF FF      lea d, [bp + -1] ; $p
3914   1CE0 2A            mov b, [d]
3915   1CE1 38 00 00      mov c, 0
3916   1CE4 74            mov d, b
3917   1CE5 2A            mov b, [d]
3918   1CE6 38 00 00      mov c, 0
3919   1CE9 FD AB         swp b
3920   1CEB D8            push b
3921   1CEC FA FB FF      lea d, [bp + -5] ; $sp
3922   1CEF 2A            mov b, [d]
3923   1CF0 38 00 00      mov c, 0
3924   1CF3 FD AB         swp b
3925   1CF5 D8            push b
3926   1CF6 07 29 24      call sprint_unsigned
3927   1CF9 51 04 00      add sp, 4
3928   1CFC             ; --- END FUNCTION CALL
3929   1CFC 56            add b, a
3930   1CFD E4            pop a
3931   1CFE             ; --- END TERMS
3932   1CFE E7            pop d
3933   1CFF FD 43         mov [d], b
3934   1D01             ; p = p + 2; 
3935   1D01 FA FF FF      lea d, [bp + -1] ; $p
3936   1D04 DA            push d
3937   1D05 FA FF FF      lea d, [bp + -1] ; $p
3938   1D08 2A            mov b, [d]
3939   1D09 38 00 00      mov c, 0
3940   1D0C             ; --- START TERMS
3941   1D0C D7            push a
3942   1D0D 11            mov a, b
3943   1D0E FD 2E 02 00   mov32 cb, $00000002
3943   1D12 00 00 
3944   1D14 56            add b, a
3945   1D15 E4            pop a
3946   1D16             ; --- END TERMS
3947   1D16 E7            pop d
3948   1D17 FD 43         mov [d], b
3949   1D19             ; break; 
3950   1D19 0A F5 1D      jmp _switch54_exit ; case break
3951   1D1C             _switch54_case5:
3952   1D1C             
3953   1D1C             ; --- BEGIN INLINE ASM SEGMENT
3954   1D1C FA FF FF      lea d, [bp + -1] ; $p
3955   1D1F FD 2A         mov d, [d]
3956   1D21 2A            mov b, [d]
3957   1D22 07 FA 2B      call print_u16x
3958   1D25             ; --- END INLINE ASM SEGMENT
3959   1D25             
3960   1D25             ; p = p + 2; 
3961   1D25 FA FF FF      lea d, [bp + -1] ; $p
3962   1D28 DA            push d
3963   1D29 FA FF FF      lea d, [bp + -1] ; $p
3964   1D2C 2A            mov b, [d]
3965   1D2D 38 00 00      mov c, 0
3966   1D30             ; --- START TERMS
3967   1D30 D7            push a
3968   1D31 11            mov a, b
3969   1D32 FD 2E 02 00   mov32 cb, $00000002
3969   1D36 00 00 
3970   1D38 56            add b, a
3971   1D39 E4            pop a
3972   1D3A             ; --- END TERMS
3973   1D3A E7            pop d
3974   1D3B FD 43         mov [d], b
3975   1D3D             ; break; 
3976   1D3D 0A F5 1D      jmp _switch54_exit ; case break
3977   1D40             _switch54_case6:
3978   1D40             ; *sp++ = *(char *)p; 
3979   1D40 FA FB FF      lea d, [bp + -5] ; $sp
3980   1D43 2A            mov b, [d]
3981   1D44 38 00 00      mov c, 0
3982   1D47 FD 77         inc b
3983   1D49 FA FB FF      lea d, [bp + -5] ; $sp
3984   1D4C FD 43         mov [d], b
3985   1D4E FD 7D         dec b
3986   1D50 D8            push b
3987   1D51 FA FF FF      lea d, [bp + -1] ; $p
3988   1D54 2A            mov b, [d]
3989   1D55 38 00 00      mov c, 0
3990   1D58 74            mov d, b
3991   1D59 32            mov bl, [d]
3992   1D5A A7 00         mov bh, 0
3993   1D5C 38 00 00      mov c, 0
3994   1D5F E7            pop d
3995   1D60 FD 3E         mov [d], bl
3996   1D62             ; p = p + 1; 
3997   1D62 FA FF FF      lea d, [bp + -1] ; $p
3998   1D65 DA            push d
3999   1D66 FA FF FF      lea d, [bp + -1] ; $p
4000   1D69 2A            mov b, [d]
4001   1D6A 38 00 00      mov c, 0
4002   1D6D             ; --- START TERMS
4003   1D6D D7            push a
4004   1D6E 11            mov a, b
4005   1D6F FD 2E 01 00   mov32 cb, $00000001
4005   1D73 00 00 
4006   1D75 56            add b, a
4007   1D76 E4            pop a
4008   1D77             ; --- END TERMS
4009   1D77 E7            pop d
4010   1D78 FD 43         mov [d], b
4011   1D7A             ; break; 
4012   1D7A 0A F5 1D      jmp _switch54_exit ; case break
4013   1D7D             _switch54_case7:
4014   1D7D             ; int len = strlen(*(char **)p); 
4015   1D7D 52 02 00      sub sp, 2
4016   1D80             ; --- START LOCAL VAR INITIALIZATION
4017   1D80 FA F9 FF      lea d, [bp + -7] ; $len
4018   1D83 DA            push d
4019   1D84             ; --- START FUNCTION CALL
4020   1D84 FA FF FF      lea d, [bp + -1] ; $p
4021   1D87 2A            mov b, [d]
4022   1D88 38 00 00      mov c, 0
4023   1D8B 74            mov d, b
4024   1D8C 2A            mov b, [d]
4025   1D8D FD AB         swp b
4026   1D8F D8            push b
4027   1D90 07 A5 11      call strlen
4028   1D93 51 02 00      add sp, 2
4029   1D96             ; --- END FUNCTION CALL
4030   1D96 E7            pop d
4031   1D97 FD 43         mov [d], b
4032   1D99             ; --- END LOCAL VAR INITIALIZATION
4033   1D99             ; strcpy(sp, *(char **)p); 
4034   1D99             ; --- START FUNCTION CALL
4035   1D99 FA FF FF      lea d, [bp + -1] ; $p
4036   1D9C 2A            mov b, [d]
4037   1D9D 38 00 00      mov c, 0
4038   1DA0 74            mov d, b
4039   1DA1 2A            mov b, [d]
4040   1DA2 FD AB         swp b
4041   1DA4 D8            push b
4042   1DA5 FA FB FF      lea d, [bp + -5] ; $sp
4043   1DA8 2A            mov b, [d]
4044   1DA9 38 00 00      mov c, 0
4045   1DAC FD AB         swp b
4046   1DAE D8            push b
4047   1DAF 07 BF 0F      call strcpy
4048   1DB2 51 04 00      add sp, 4
4049   1DB5             ; --- END FUNCTION CALL
4050   1DB5             ; sp = sp + len; 
4051   1DB5 FA FB FF      lea d, [bp + -5] ; $sp
4052   1DB8 DA            push d
4053   1DB9 FA FB FF      lea d, [bp + -5] ; $sp
4054   1DBC 2A            mov b, [d]
4055   1DBD 38 00 00      mov c, 0
4056   1DC0             ; --- START TERMS
4057   1DC0 D7            push a
4058   1DC1 11            mov a, b
4059   1DC2 FA F9 FF      lea d, [bp + -7] ; $len
4060   1DC5 2A            mov b, [d]
4061   1DC6 38 00 00      mov c, 0
4062   1DC9 56            add b, a
4063   1DCA E4            pop a
4064   1DCB             ; --- END TERMS
4065   1DCB E7            pop d
4066   1DCC FD 43         mov [d], b
4067   1DCE             ; p = p + 2; 
4068   1DCE FA FF FF      lea d, [bp + -1] ; $p
4069   1DD1 DA            push d
4070   1DD2 FA FF FF      lea d, [bp + -1] ; $p
4071   1DD5 2A            mov b, [d]
4072   1DD6 38 00 00      mov c, 0
4073   1DD9             ; --- START TERMS
4074   1DD9 D7            push a
4075   1DDA 11            mov a, b
4076   1DDB FD 2E 02 00   mov32 cb, $00000002
4076   1DDF 00 00 
4077   1DE1 56            add b, a
4078   1DE2 E4            pop a
4079   1DE3             ; --- END TERMS
4080   1DE3 E7            pop d
4081   1DE4 FD 43         mov [d], b
4082   1DE6             ; break; 
4083   1DE6 0A F5 1D      jmp _switch54_exit ; case break
4084   1DE9             _switch54_default:
4085   1DE9             ; print("Error: Unknown argument type.\n"); 
4086   1DE9             ; --- START FUNCTION CALL
4087   1DE9 26 16 54      mov b, _s11 ; "Error: Unknown argument type.\n"
4088   1DEC FD AB         swp b
4089   1DEE D8            push b
4090   1DEF 07 97 28      call print
4091   1DF2 51 02 00      add sp, 2
4092   1DF5             ; --- END FUNCTION CALL
4093   1DF5             _switch54_exit:
4094   1DF5             ; format_p++; 
4095   1DF5 FA FD FF      lea d, [bp + -3] ; $format_p
4096   1DF8 2A            mov b, [d]
4097   1DF9 38 00 00      mov c, 0
4098   1DFC FD 77         inc b
4099   1DFE FA FD FF      lea d, [bp + -3] ; $format_p
4100   1E01 FD 43         mov [d], b
4101   1E03 FD 7D         dec b
4102   1E05 0A 33 1E      jmp _if53_exit
4103   1E08             _if53_else:
4104   1E08             ; *sp++ = *format_p++; 
4105   1E08 FA FB FF      lea d, [bp + -5] ; $sp
4106   1E0B 2A            mov b, [d]
4107   1E0C 38 00 00      mov c, 0
4108   1E0F FD 77         inc b
4109   1E11 FA FB FF      lea d, [bp + -5] ; $sp
4110   1E14 FD 43         mov [d], b
4111   1E16 FD 7D         dec b
4112   1E18 D8            push b
4113   1E19 FA FD FF      lea d, [bp + -3] ; $format_p
4114   1E1C 2A            mov b, [d]
4115   1E1D 38 00 00      mov c, 0
4116   1E20 FD 77         inc b
4117   1E22 FA FD FF      lea d, [bp + -3] ; $format_p
4118   1E25 FD 43         mov [d], b
4119   1E27 FD 7D         dec b
4120   1E29 74            mov d, b
4121   1E2A 32            mov bl, [d]
4122   1E2B A7 00         mov bh, 0
4123   1E2D 38 00 00      mov c, 0
4124   1E30 E7            pop d
4125   1E31 FD 3E         mov [d], bl
4126   1E33             _if53_exit:
4127   1E33             _if52_exit:
4128   1E33             _for51_update:
4129   1E33 0A E9 1A      jmp _for51_cond
4130   1E36             _for51_exit:
4131   1E36             ; *sp = '\0'; 
4132   1E36 FA FB FF      lea d, [bp + -5] ; $sp
4133   1E39 2A            mov b, [d]
4134   1E3A 38 00 00      mov c, 0
4135   1E3D D8            push b
4136   1E3E FD 2E 00 00   mov32 cb, $00000000
4136   1E42 00 00 
4137   1E44 E7            pop d
4138   1E45 FD 3E         mov [d], bl
4139   1E47             ; return sp - dest; // return total number of chars written 
4140   1E47 FA FB FF      lea d, [bp + -5] ; $sp
4141   1E4A 2A            mov b, [d]
4142   1E4B 38 00 00      mov c, 0
4143   1E4E             ; --- START TERMS
4144   1E4E D7            push a
4145   1E4F 11            mov a, b
4146   1E50 FA 05 00      lea d, [bp + 5] ; $dest
4147   1E53 2A            mov b, [d]
4148   1E54 38 00 00      mov c, 0
4149   1E57 60            sub a, b
4150   1E58 27            mov b, a
4151   1E59 E4            pop a
4152   1E5A             ; --- END TERMS
4153   1E5A F9            leave
4154   1E5B 09            ret
4155   1E5C             
4156   1E5C             err:
4157   1E5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4158   1E5F             ; print(e); 
4159   1E5F             ; --- START FUNCTION CALL
4160   1E5F FA 05 00      lea d, [bp + 5] ; $e
4161   1E62 2A            mov b, [d]
4162   1E63 38 00 00      mov c, 0
4163   1E66 FD AB         swp b
4164   1E68 D8            push b
4165   1E69 07 97 28      call print
4166   1E6C 51 02 00      add sp, 2
4167   1E6F             ; --- END FUNCTION CALL
4168   1E6F F9            leave
4169   1E70 09            ret
4170   1E71             
4171   1E71             printx32:
4172   1E71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4173   1E74             
4174   1E74             ; --- BEGIN INLINE ASM SEGMENT
4175   1E74 FA 05 00      lea d, [bp + 5] ; $hex
4176   1E77 2B 02 00      mov b, [d+2]
4177   1E7A 07 FA 2B      call print_u16x
4178   1E7D 2A            mov b, [d]
4179   1E7E 07 FA 2B      call print_u16x
4180   1E81             ; --- END INLINE ASM SEGMENT
4181   1E81             
4182   1E81 F9            leave
4183   1E82 09            ret
4184   1E83             
4185   1E83             printx16:
4186   1E83 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4187   1E86             
4188   1E86             ; --- BEGIN INLINE ASM SEGMENT
4189   1E86 FA 05 00      lea d, [bp + 5] ; $hex
4190   1E89 2A            mov b, [d]
4191   1E8A 07 FA 2B      call print_u16x
4192   1E8D             ; --- END INLINE ASM SEGMENT
4193   1E8D             
4194   1E8D F9            leave
4195   1E8E 09            ret
4196   1E8F             
4197   1E8F             printx8:
4198   1E8F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4199   1E92             
4200   1E92             ; --- BEGIN INLINE ASM SEGMENT
4201   1E92 FA 05 00      lea d, [bp + 5] ; $hex
4202   1E95 32            mov bl, [d]
4203   1E96 07 3E 2C      call print_u8x
4204   1E99             ; --- END INLINE ASM SEGMENT
4205   1E99             
4206   1E99 F9            leave
4207   1E9A 09            ret
4208   1E9B             
4209   1E9B             hex_str_to_int:
4210   1E9B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4211   1E9E             ; int value = 0; 
4212   1E9E 52 02 00      sub sp, 2
4213   1EA1             ; --- START LOCAL VAR INITIALIZATION
4214   1EA1 FA FF FF      lea d, [bp + -1] ; $value
4215   1EA4 DA            push d
4216   1EA5 FD 2E 00 00   mov32 cb, $00000000
4216   1EA9 00 00 
4217   1EAB E7            pop d
4218   1EAC FD 43         mov [d], b
4219   1EAE             ; --- END LOCAL VAR INITIALIZATION
4220   1EAE             ; int i; 
4221   1EAE 52 02 00      sub sp, 2
4222   1EB1             ; char hex_char; 
4223   1EB1 52 01 00      sub sp, 1
4224   1EB4             ; int len; 
4225   1EB4 52 02 00      sub sp, 2
4226   1EB7             ; len = strlen(hex_string); 
4227   1EB7 FA FA FF      lea d, [bp + -6] ; $len
4228   1EBA DA            push d
4229   1EBB             ; --- START FUNCTION CALL
4230   1EBB FA 05 00      lea d, [bp + 5] ; $hex_string
4231   1EBE 2A            mov b, [d]
4232   1EBF 38 00 00      mov c, 0
4233   1EC2 FD AB         swp b
4234   1EC4 D8            push b
4235   1EC5 07 A5 11      call strlen
4236   1EC8 51 02 00      add sp, 2
4237   1ECB             ; --- END FUNCTION CALL
4238   1ECB E7            pop d
4239   1ECC FD 43         mov [d], b
4240   1ECE             ; for (i = 0; i < len; i++) { 
4241   1ECE             _for58_init:
4242   1ECE FA FD FF      lea d, [bp + -3] ; $i
4243   1ED1 DA            push d
4244   1ED2 FD 2E 00 00   mov32 cb, $00000000
4244   1ED6 00 00 
4245   1ED8 E7            pop d
4246   1ED9 FD 43         mov [d], b
4247   1EDB             _for58_cond:
4248   1EDB FA FD FF      lea d, [bp + -3] ; $i
4249   1EDE 2A            mov b, [d]
4250   1EDF 38 00 00      mov c, 0
4251   1EE2             ; --- START RELATIONAL
4252   1EE2 D7            push a
4253   1EE3 11            mov a, b
4254   1EE4 FA FA FF      lea d, [bp + -6] ; $len
4255   1EE7 2A            mov b, [d]
4256   1EE8 38 00 00      mov c, 0
4257   1EEB B0            cmp a, b
4258   1EEC FD 73         slt ; < (signed)
4259   1EEE E4            pop a
4260   1EEF             ; --- END RELATIONAL
4261   1EEF C0 00 00      cmp b, 0
4262   1EF2 C6 3F 20      je _for58_exit
4263   1EF5             _for58_block:
4264   1EF5             ; hex_char = hex_string[i]; 
4265   1EF5 FA FC FF      lea d, [bp + -4] ; $hex_char
4266   1EF8 DA            push d
4267   1EF9 FA 05 00      lea d, [bp + 5] ; $hex_string
4268   1EFC FD 2A         mov d, [d]
4269   1EFE D7            push a
4270   1EFF DA            push d
4271   1F00 FA FD FF      lea d, [bp + -3] ; $i
4272   1F03 2A            mov b, [d]
4273   1F04 38 00 00      mov c, 0
4274   1F07 E7            pop d
4275   1F08 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4276   1F0C E4            pop a
4277   1F0D 32            mov bl, [d]
4278   1F0E A7 00         mov bh, 0
4279   1F10 38 00 00      mov c, 0
4280   1F13 E7            pop d
4281   1F14 FD 3E         mov [d], bl
4282   1F16             ; if (hex_char >= 'a' && hex_char <= 'f')  
4283   1F16             _if59_cond:
4284   1F16 FA FC FF      lea d, [bp + -4] ; $hex_char
4285   1F19 32            mov bl, [d]
4286   1F1A A7 00         mov bh, 0
4287   1F1C 38 00 00      mov c, 0
4288   1F1F             ; --- START RELATIONAL
4289   1F1F D7            push a
4290   1F20 11            mov a, b
4291   1F21 FD 2E 61 00   mov32 cb, $00000061
4291   1F25 00 00 
4292   1F27 B0            cmp a, b
4293   1F28 FD 80         sge ; >=
4294   1F2A E4            pop a
4295   1F2B             ; --- END RELATIONAL
4296   1F2B             ; --- START LOGICAL AND
4297   1F2B D7            push a
4298   1F2C 11            mov a, b
4299   1F2D FA FC FF      lea d, [bp + -4] ; $hex_char
4300   1F30 32            mov bl, [d]
4301   1F31 A7 00         mov bh, 0
4302   1F33 38 00 00      mov c, 0
4303   1F36             ; --- START RELATIONAL
4304   1F36 D7            push a
4305   1F37 11            mov a, b
4306   1F38 FD 2E 66 00   mov32 cb, $00000066
4306   1F3C 00 00 
4307   1F3E B0            cmp a, b
4308   1F3F FD 74         sle ; <= (signed)
4309   1F41 E4            pop a
4310   1F42             ; --- END RELATIONAL
4311   1F42 FD A7         sand a, b
4312   1F44 E4            pop a
4313   1F45             ; --- END LOGICAL AND
4314   1F45 C0 00 00      cmp b, 0
4315   1F48 C6 88 1F      je _if59_else
4316   1F4B             _if59_TRUE:
4317   1F4B             ; value = (value * 16) + (hex_char - 'a' + 10); 
4318   1F4B FA FF FF      lea d, [bp + -1] ; $value
4319   1F4E DA            push d
4320   1F4F FA FF FF      lea d, [bp + -1] ; $value
4321   1F52 2A            mov b, [d]
4322   1F53 38 00 00      mov c, 0
4323   1F56             ; --- START FACTORS
4324   1F56 D7            push a
4325   1F57 11            mov a, b
4326   1F58 FD 2E 10 00   mov32 cb, $00000010
4326   1F5C 00 00 
4327   1F5E AC            mul a, b ; *
4328   1F5F 11            mov a, b
4329   1F60 27            mov b, a
4330   1F61 E4            pop a
4331   1F62             ; --- END FACTORS
4332   1F62             ; --- START TERMS
4333   1F62 D7            push a
4334   1F63 11            mov a, b
4335   1F64 FA FC FF      lea d, [bp + -4] ; $hex_char
4336   1F67 32            mov bl, [d]
4337   1F68 A7 00         mov bh, 0
4338   1F6A 38 00 00      mov c, 0
4339   1F6D             ; --- START TERMS
4340   1F6D D7            push a
4341   1F6E 11            mov a, b
4342   1F6F FD 2E 61 00   mov32 cb, $00000061
4342   1F73 00 00 
4343   1F75 60            sub a, b
4344   1F76 27            mov b, a
4345   1F77 11            mov a, b
4346   1F78 FD 2E 0A 00   mov32 cb, $0000000a
4346   1F7C 00 00 
4347   1F7E 56            add b, a
4348   1F7F E4            pop a
4349   1F80             ; --- END TERMS
4350   1F80 56            add b, a
4351   1F81 E4            pop a
4352   1F82             ; --- END TERMS
4353   1F82 E7            pop d
4354   1F83 FD 43         mov [d], b
4355   1F85 0A 2C 20      jmp _if59_exit
4356   1F88             _if59_else:
4357   1F88             ; if (hex_char >= 'A' && hex_char <= 'F')  
4358   1F88             _if60_cond:
4359   1F88 FA FC FF      lea d, [bp + -4] ; $hex_char
4360   1F8B 32            mov bl, [d]
4361   1F8C A7 00         mov bh, 0
4362   1F8E 38 00 00      mov c, 0
4363   1F91             ; --- START RELATIONAL
4364   1F91 D7            push a
4365   1F92 11            mov a, b
4366   1F93 FD 2E 41 00   mov32 cb, $00000041
4366   1F97 00 00 
4367   1F99 B0            cmp a, b
4368   1F9A FD 80         sge ; >=
4369   1F9C E4            pop a
4370   1F9D             ; --- END RELATIONAL
4371   1F9D             ; --- START LOGICAL AND
4372   1F9D D7            push a
4373   1F9E 11            mov a, b
4374   1F9F FA FC FF      lea d, [bp + -4] ; $hex_char
4375   1FA2 32            mov bl, [d]
4376   1FA3 A7 00         mov bh, 0
4377   1FA5 38 00 00      mov c, 0
4378   1FA8             ; --- START RELATIONAL
4379   1FA8 D7            push a
4380   1FA9 11            mov a, b
4381   1FAA FD 2E 46 00   mov32 cb, $00000046
4381   1FAE 00 00 
4382   1FB0 B0            cmp a, b
4383   1FB1 FD 74         sle ; <= (signed)
4384   1FB3 E4            pop a
4385   1FB4             ; --- END RELATIONAL
4386   1FB4 FD A7         sand a, b
4387   1FB6 E4            pop a
4388   1FB7             ; --- END LOGICAL AND
4389   1FB7 C0 00 00      cmp b, 0
4390   1FBA C6 FA 1F      je _if60_else
4391   1FBD             _if60_TRUE:
4392   1FBD             ; value = (value * 16) + (hex_char - 'A' + 10); 
4393   1FBD FA FF FF      lea d, [bp + -1] ; $value
4394   1FC0 DA            push d
4395   1FC1 FA FF FF      lea d, [bp + -1] ; $value
4396   1FC4 2A            mov b, [d]
4397   1FC5 38 00 00      mov c, 0
4398   1FC8             ; --- START FACTORS
4399   1FC8 D7            push a
4400   1FC9 11            mov a, b
4401   1FCA FD 2E 10 00   mov32 cb, $00000010
4401   1FCE 00 00 
4402   1FD0 AC            mul a, b ; *
4403   1FD1 11            mov a, b
4404   1FD2 27            mov b, a
4405   1FD3 E4            pop a
4406   1FD4             ; --- END FACTORS
4407   1FD4             ; --- START TERMS
4408   1FD4 D7            push a
4409   1FD5 11            mov a, b
4410   1FD6 FA FC FF      lea d, [bp + -4] ; $hex_char
4411   1FD9 32            mov bl, [d]
4412   1FDA A7 00         mov bh, 0
4413   1FDC 38 00 00      mov c, 0
4414   1FDF             ; --- START TERMS
4415   1FDF D7            push a
4416   1FE0 11            mov a, b
4417   1FE1 FD 2E 41 00   mov32 cb, $00000041
4417   1FE5 00 00 
4418   1FE7 60            sub a, b
4419   1FE8 27            mov b, a
4420   1FE9 11            mov a, b
4421   1FEA FD 2E 0A 00   mov32 cb, $0000000a
4421   1FEE 00 00 
4422   1FF0 56            add b, a
4423   1FF1 E4            pop a
4424   1FF2             ; --- END TERMS
4425   1FF2 56            add b, a
4426   1FF3 E4            pop a
4427   1FF4             ; --- END TERMS
4428   1FF4 E7            pop d
4429   1FF5 FD 43         mov [d], b
4430   1FF7 0A 2C 20      jmp _if60_exit
4431   1FFA             _if60_else:
4432   1FFA             ; value = (value * 16) + (hex_char - '0'); 
4433   1FFA FA FF FF      lea d, [bp + -1] ; $value
4434   1FFD DA            push d
4435   1FFE FA FF FF      lea d, [bp + -1] ; $value
4436   2001 2A            mov b, [d]
4437   2002 38 00 00      mov c, 0
4438   2005             ; --- START FACTORS
4439   2005 D7            push a
4440   2006 11            mov a, b
4441   2007 FD 2E 10 00   mov32 cb, $00000010
4441   200B 00 00 
4442   200D AC            mul a, b ; *
4443   200E 11            mov a, b
4444   200F 27            mov b, a
4445   2010 E4            pop a
4446   2011             ; --- END FACTORS
4447   2011             ; --- START TERMS
4448   2011 D7            push a
4449   2012 11            mov a, b
4450   2013 FA FC FF      lea d, [bp + -4] ; $hex_char
4451   2016 32            mov bl, [d]
4452   2017 A7 00         mov bh, 0
4453   2019 38 00 00      mov c, 0
4454   201C             ; --- START TERMS
4455   201C D7            push a
4456   201D 11            mov a, b
4457   201E FD 2E 30 00   mov32 cb, $00000030
4457   2022 00 00 
4458   2024 60            sub a, b
4459   2025 27            mov b, a
4460   2026 E4            pop a
4461   2027             ; --- END TERMS
4462   2027 56            add b, a
4463   2028 E4            pop a
4464   2029             ; --- END TERMS
4465   2029 E7            pop d
4466   202A FD 43         mov [d], b
4467   202C             _if60_exit:
4468   202C             _if59_exit:
4469   202C             _for58_update:
4470   202C FA FD FF      lea d, [bp + -3] ; $i
4471   202F 2A            mov b, [d]
4472   2030 38 00 00      mov c, 0
4473   2033 11            mov a, b
4474   2034 FD 77         inc b
4475   2036 FA FD FF      lea d, [bp + -3] ; $i
4476   2039 FD 43         mov [d], b
4477   203B 27            mov b, a
4478   203C 0A DB 1E      jmp _for58_cond
4479   203F             _for58_exit:
4480   203F             ; return value; 
4481   203F FA FF FF      lea d, [bp + -1] ; $value
4482   2042 2A            mov b, [d]
4483   2043 38 00 00      mov c, 0
4484   2046 F9            leave
4485   2047 09            ret
4486   2048             
4487   2048             gets:
4488   2048 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4489   204B             
4490   204B             ; --- BEGIN INLINE ASM SEGMENT
4491   204B FA 05 00      lea d, [bp + 5] ; $s
4492   204E 15            mov a, [d]
4493   204F 3C            mov d, a
4494   2050 07 5F 2A      call _gets
4495   2053             ; --- END INLINE ASM SEGMENT
4496   2053             
4497   2053             ; return strlen(s); 
4498   2053             ; --- START FUNCTION CALL
4499   2053 FA 05 00      lea d, [bp + 5] ; $s
4500   2056 2A            mov b, [d]
4501   2057 38 00 00      mov c, 0
4502   205A FD AB         swp b
4503   205C D8            push b
4504   205D 07 A5 11      call strlen
4505   2060 51 02 00      add sp, 2
4506   2063             ; --- END FUNCTION CALL
4507   2063 F9            leave
4508   2064 09            ret
4509   2065             
4510   2065             print_signed:
4511   2065 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4512   2068             ; char digits[5]; 
4513   2068 52 05 00      sub sp, 5
4514   206B             ; int i = 0; 
4515   206B 52 02 00      sub sp, 2
4516   206E             ; --- START LOCAL VAR INITIALIZATION
4517   206E FA FA FF      lea d, [bp + -6] ; $i
4518   2071 DA            push d
4519   2072 FD 2E 00 00   mov32 cb, $00000000
4519   2076 00 00 
4520   2078 E7            pop d
4521   2079 FD 43         mov [d], b
4522   207B             ; --- END LOCAL VAR INITIALIZATION
4523   207B             ; if (num < 0) { 
4524   207B             _if61_cond:
4525   207B FA 05 00      lea d, [bp + 5] ; $num
4526   207E 2A            mov b, [d]
4527   207F 38 00 00      mov c, 0
4528   2082             ; --- START RELATIONAL
4529   2082 D7            push a
4530   2083 11            mov a, b
4531   2084 FD 2E 00 00   mov32 cb, $00000000
4531   2088 00 00 
4532   208A B0            cmp a, b
4533   208B FD 73         slt ; < (signed)
4534   208D E4            pop a
4535   208E             ; --- END RELATIONAL
4536   208E C0 00 00      cmp b, 0
4537   2091 C6 B4 20      je _if61_else
4538   2094             _if61_TRUE:
4539   2094             ; putchar('-'); 
4540   2094             ; --- START FUNCTION CALL
4541   2094 FD 2E 2D 00   mov32 cb, $0000002d
4541   2098 00 00 
4542   209A DD            push bl
4543   209B 07 49 28      call putchar
4544   209E 51 01 00      add sp, 1
4545   20A1             ; --- END FUNCTION CALL
4546   20A1             ; num = -num; 
4547   20A1 FA 05 00      lea d, [bp + 5] ; $num
4548   20A4 DA            push d
4549   20A5 FA 05 00      lea d, [bp + 5] ; $num
4550   20A8 2A            mov b, [d]
4551   20A9 38 00 00      mov c, 0
4552   20AC FD 97         neg b
4553   20AE E7            pop d
4554   20AF FD 43         mov [d], b
4555   20B1 0A DF 20      jmp _if61_exit
4556   20B4             _if61_else:
4557   20B4             ; if (num == 0) { 
4558   20B4             _if62_cond:
4559   20B4 FA 05 00      lea d, [bp + 5] ; $num
4560   20B7 2A            mov b, [d]
4561   20B8 38 00 00      mov c, 0
4562   20BB             ; --- START RELATIONAL
4563   20BB D7            push a
4564   20BC 11            mov a, b
4565   20BD FD 2E 00 00   mov32 cb, $00000000
4565   20C1 00 00 
4566   20C3 B0            cmp a, b
4567   20C4 FD 71         seq ; ==
4568   20C6 E4            pop a
4569   20C7             ; --- END RELATIONAL
4570   20C7 C0 00 00      cmp b, 0
4571   20CA C6 DF 20      je _if62_exit
4572   20CD             _if62_TRUE:
4573   20CD             ; putchar('0'); 
4574   20CD             ; --- START FUNCTION CALL
4575   20CD FD 2E 30 00   mov32 cb, $00000030
4575   20D1 00 00 
4576   20D3 DD            push bl
4577   20D4 07 49 28      call putchar
4578   20D7 51 01 00      add sp, 1
4579   20DA             ; --- END FUNCTION CALL
4580   20DA             ; return; 
4581   20DA F9            leave
4582   20DB 09            ret
4583   20DC 0A DF 20      jmp _if62_exit
4584   20DF             _if62_exit:
4585   20DF             _if61_exit:
4586   20DF             ; while (num > 0) { 
4587   20DF             _while63_cond:
4588   20DF FA 05 00      lea d, [bp + 5] ; $num
4589   20E2 2A            mov b, [d]
4590   20E3 38 00 00      mov c, 0
4591   20E6             ; --- START RELATIONAL
4592   20E6 D7            push a
4593   20E7 11            mov a, b
4594   20E8 FD 2E 00 00   mov32 cb, $00000000
4594   20EC 00 00 
4595   20EE B0            cmp a, b
4596   20EF FD 7F         sgt ; >
4597   20F1 E4            pop a
4598   20F2             ; --- END RELATIONAL
4599   20F2 C0 00 00      cmp b, 0
4600   20F5 C6 54 21      je _while63_exit
4601   20F8             _while63_block:
4602   20F8             ; digits[i] = '0' + (num % 10); 
4603   20F8 FA FC FF      lea d, [bp + -4] ; $digits
4604   20FB D7            push a
4605   20FC DA            push d
4606   20FD FA FA FF      lea d, [bp + -6] ; $i
4607   2100 2A            mov b, [d]
4608   2101 38 00 00      mov c, 0
4609   2104 E7            pop d
4610   2105 5A            add d, b
4611   2106 E4            pop a
4612   2107 DA            push d
4613   2108 FD 2E 30 00   mov32 cb, $00000030
4613   210C 00 00 
4614   210E             ; --- START TERMS
4615   210E D7            push a
4616   210F 11            mov a, b
4617   2110 FA 05 00      lea d, [bp + 5] ; $num
4618   2113 2A            mov b, [d]
4619   2114 38 00 00      mov c, 0
4620   2117             ; --- START FACTORS
4621   2117 D7            push a
4622   2118 11            mov a, b
4623   2119 FD 2E 0A 00   mov32 cb, $0000000a
4623   211D 00 00 
4624   211F AE            div a, b ; 
4625   2120 11            mov a, b
4626   2121 27            mov b, a
4627   2122 E4            pop a
4628   2123             ; --- END FACTORS
4629   2123 56            add b, a
4630   2124 E4            pop a
4631   2125             ; --- END TERMS
4632   2125 E7            pop d
4633   2126 FD 3E         mov [d], bl
4634   2128             ; num = num / 10; 
4635   2128 FA 05 00      lea d, [bp + 5] ; $num
4636   212B DA            push d
4637   212C FA 05 00      lea d, [bp + 5] ; $num
4638   212F 2A            mov b, [d]
4639   2130 38 00 00      mov c, 0
4640   2133             ; --- START FACTORS
4641   2133 D7            push a
4642   2134 11            mov a, b
4643   2135 FD 2E 0A 00   mov32 cb, $0000000a
4643   2139 00 00 
4644   213B AE            div a, b
4645   213C 27            mov b, a
4646   213D E4            pop a
4647   213E             ; --- END FACTORS
4648   213E E7            pop d
4649   213F FD 43         mov [d], b
4650   2141             ; i++; 
4651   2141 FA FA FF      lea d, [bp + -6] ; $i
4652   2144 2A            mov b, [d]
4653   2145 38 00 00      mov c, 0
4654   2148 11            mov a, b
4655   2149 FD 77         inc b
4656   214B FA FA FF      lea d, [bp + -6] ; $i
4657   214E FD 43         mov [d], b
4658   2150 27            mov b, a
4659   2151 0A DF 20      jmp _while63_cond
4660   2154             _while63_exit:
4661   2154             ; while (i > 0) { 
4662   2154             _while64_cond:
4663   2154 FA FA FF      lea d, [bp + -6] ; $i
4664   2157 2A            mov b, [d]
4665   2158 38 00 00      mov c, 0
4666   215B             ; --- START RELATIONAL
4667   215B D7            push a
4668   215C 11            mov a, b
4669   215D FD 2E 00 00   mov32 cb, $00000000
4669   2161 00 00 
4670   2163 B0            cmp a, b
4671   2164 FD 7F         sgt ; >
4672   2166 E4            pop a
4673   2167             ; --- END RELATIONAL
4674   2167 C0 00 00      cmp b, 0
4675   216A C6 9C 21      je _while64_exit
4676   216D             _while64_block:
4677   216D             ; i--; 
4678   216D FA FA FF      lea d, [bp + -6] ; $i
4679   2170 2A            mov b, [d]
4680   2171 38 00 00      mov c, 0
4681   2174 11            mov a, b
4682   2175 FD 7D         dec b
4683   2177 FA FA FF      lea d, [bp + -6] ; $i
4684   217A FD 43         mov [d], b
4685   217C 27            mov b, a
4686   217D             ; putchar(digits[i]); 
4687   217D             ; --- START FUNCTION CALL
4688   217D FA FC FF      lea d, [bp + -4] ; $digits
4689   2180 D7            push a
4690   2181 DA            push d
4691   2182 FA FA FF      lea d, [bp + -6] ; $i
4692   2185 2A            mov b, [d]
4693   2186 38 00 00      mov c, 0
4694   2189 E7            pop d
4695   218A 5A            add d, b
4696   218B E4            pop a
4697   218C 32            mov bl, [d]
4698   218D A7 00         mov bh, 0
4699   218F 38 00 00      mov c, 0
4700   2192 DD            push bl
4701   2193 07 49 28      call putchar
4702   2196 51 01 00      add sp, 1
4703   2199             ; --- END FUNCTION CALL
4704   2199 0A 54 21      jmp _while64_cond
4705   219C             _while64_exit:
4706   219C F9            leave
4707   219D 09            ret
4708   219E             
4709   219E             print_signed_long:
4710   219E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4711   21A1             ; char digits[10]; 
4712   21A1 52 0A 00      sub sp, 10
4713   21A4             ; int i = 0; 
4714   21A4 52 02 00      sub sp, 2
4715   21A7             ; --- START LOCAL VAR INITIALIZATION
4716   21A7 FA F5 FF      lea d, [bp + -11] ; $i
4717   21AA DA            push d
4718   21AB FD 2E 00 00   mov32 cb, $00000000
4718   21AF 00 00 
4719   21B1 E7            pop d
4720   21B2 FD 43         mov [d], b
4721   21B4             ; --- END LOCAL VAR INITIALIZATION
4722   21B4             ; if (num < 0) { 
4723   21B4             _if65_cond:
4724   21B4 FA 05 00      lea d, [bp + 5] ; $num
4725   21B7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4726   21BA FD 39         mov c, b ; And place it into C
4727   21BC 2A            mov b, [d] ; Lower Word in B
4728   21BD             ; --- START RELATIONAL
4729   21BD D7            push a
4730   21BE FD D8         push g
4731   21C0 11            mov a, b
4732   21C1 FD 7A         mov g, c
4733   21C3 FD 2E 00 00   mov32 cb, $00000000
4733   21C7 00 00 
4734   21C9 FD AF         cmp32 ga, cb
4735   21CB FD 73         slt ; <
4736   21CD FD F1         pop g
4737   21CF E4            pop a
4738   21D0             ; --- END RELATIONAL
4739   21D0 C0 00 00      cmp b, 0
4740   21D3 C6 07 22      je _if65_else
4741   21D6             _if65_TRUE:
4742   21D6             ; putchar('-'); 
4743   21D6             ; --- START FUNCTION CALL
4744   21D6 FD 2E 2D 00   mov32 cb, $0000002d
4744   21DA 00 00 
4745   21DC DD            push bl
4746   21DD 07 49 28      call putchar
4747   21E0 51 01 00      add sp, 1
4748   21E3             ; --- END FUNCTION CALL
4749   21E3             ; num = -num; 
4750   21E3 FA 05 00      lea d, [bp + 5] ; $num
4751   21E6 DA            push d
4752   21E7 FA 05 00      lea d, [bp + 5] ; $num
4753   21EA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4754   21ED FD 39         mov c, b ; And place it into C
4755   21EF 2A            mov b, [d] ; Lower Word in B
4756   21F0 12            mov a, c
4757   21F1 95            not a
4758   21F2 97            not b
4759   21F3 55 01 00      add b, 1
4760   21F6 5B 00 00      adc a, 0
4761   21F9 39            mov c, a
4762   21FA E7            pop d
4763   21FB FD 43         mov [d], b
4764   21FD 26 00 00      mov b, 0
4765   2200 FD 44 02 00   mov [d + 2], b
4766   2204 0A 3B 22      jmp _if65_exit
4767   2207             _if65_else:
4768   2207             ; if (num == 0) { 
4769   2207             _if66_cond:
4770   2207 FA 05 00      lea d, [bp + 5] ; $num
4771   220A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4772   220D FD 39         mov c, b ; And place it into C
4773   220F 2A            mov b, [d] ; Lower Word in B
4774   2210             ; --- START RELATIONAL
4775   2210 D7            push a
4776   2211 FD D8         push g
4777   2213 11            mov a, b
4778   2214 FD 7A         mov g, c
4779   2216 FD 2E 00 00   mov32 cb, $00000000
4779   221A 00 00 
4780   221C FD AF         cmp32 ga, cb
4781   221E FD 71         seq ; ==
4782   2220 FD F1         pop g
4783   2222 E4            pop a
4784   2223             ; --- END RELATIONAL
4785   2223 C0 00 00      cmp b, 0
4786   2226 C6 3B 22      je _if66_exit
4787   2229             _if66_TRUE:
4788   2229             ; putchar('0'); 
4789   2229             ; --- START FUNCTION CALL
4790   2229 FD 2E 30 00   mov32 cb, $00000030
4790   222D 00 00 
4791   222F DD            push bl
4792   2230 07 49 28      call putchar
4793   2233 51 01 00      add sp, 1
4794   2236             ; --- END FUNCTION CALL
4795   2236             ; return; 
4796   2236 F9            leave
4797   2237 09            ret
4798   2238 0A 3B 22      jmp _if66_exit
4799   223B             _if66_exit:
4800   223B             _if65_exit:
4801   223B             ; while (num > 0) { 
4802   223B             _while67_cond:
4803   223B FA 05 00      lea d, [bp + 5] ; $num
4804   223E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4805   2241 FD 39         mov c, b ; And place it into C
4806   2243 2A            mov b, [d] ; Lower Word in B
4807   2244             ; --- START RELATIONAL
4808   2244 D7            push a
4809   2245 FD D8         push g
4810   2247 11            mov a, b
4811   2248 FD 7A         mov g, c
4812   224A FD 2E 00 00   mov32 cb, $00000000
4812   224E 00 00 
4813   2250 FD AF         cmp32 ga, cb
4814   2252 FD 7F         sgt
4815   2254 FD F1         pop g
4816   2256 E4            pop a
4817   2257             ; --- END RELATIONAL
4818   2257 C0 00 00      cmp b, 0
4819   225A C6 C3 22      je _while67_exit
4820   225D             _while67_block:
4821   225D             ; digits[i] = '0' + (num % 10); 
4822   225D FA F7 FF      lea d, [bp + -9] ; $digits
4823   2260 D7            push a
4824   2261 DA            push d
4825   2262 FA F5 FF      lea d, [bp + -11] ; $i
4826   2265 2A            mov b, [d]
4827   2266 38 00 00      mov c, 0
4828   2269 E7            pop d
4829   226A 5A            add d, b
4830   226B E4            pop a
4831   226C DA            push d
4832   226D FD 2E 30 00   mov32 cb, $00000030
4832   2271 00 00 
4833   2273             ; --- START TERMS
4834   2273 D7            push a
4835   2274 11            mov a, b
4836   2275 FA 05 00      lea d, [bp + 5] ; $num
4837   2278 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4838   227B FD 39         mov c, b ; And place it into C
4839   227D 2A            mov b, [d] ; Lower Word in B
4840   227E             ; --- START FACTORS
4841   227E D7            push a
4842   227F 11            mov a, b
4843   2280 FD 2E 0A 00   mov32 cb, $0000000a
4843   2284 00 00 
4844   2286 AE            div a, b ; 
4845   2287 11            mov a, b
4846   2288 27            mov b, a
4847   2289 E4            pop a
4848   228A             ; --- END FACTORS
4849   228A FD 15         add32 cb, ga
4850   228C E4            pop a
4851   228D             ; --- END TERMS
4852   228D E7            pop d
4853   228E FD 3E         mov [d], bl
4854   2290             ; num = num / 10; 
4855   2290 FA 05 00      lea d, [bp + 5] ; $num
4856   2293 DA            push d
4857   2294 FA 05 00      lea d, [bp + 5] ; $num
4858   2297 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4859   229A FD 39         mov c, b ; And place it into C
4860   229C 2A            mov b, [d] ; Lower Word in B
4861   229D             ; --- START FACTORS
4862   229D D7            push a
4863   229E 11            mov a, b
4864   229F FD 2E 0A 00   mov32 cb, $0000000a
4864   22A3 00 00 
4865   22A5 AE            div a, b
4866   22A6 27            mov b, a
4867   22A7 E4            pop a
4868   22A8             ; --- END FACTORS
4869   22A8 E7            pop d
4870   22A9 FD 43         mov [d], b
4871   22AB 28            mov b, c
4872   22AC FD 44 02 00   mov [d + 2], b
4873   22B0             ; i++; 
4874   22B0 FA F5 FF      lea d, [bp + -11] ; $i
4875   22B3 2A            mov b, [d]
4876   22B4 38 00 00      mov c, 0
4877   22B7 11            mov a, b
4878   22B8 FD 77         inc b
4879   22BA FA F5 FF      lea d, [bp + -11] ; $i
4880   22BD FD 43         mov [d], b
4881   22BF 27            mov b, a
4882   22C0 0A 3B 22      jmp _while67_cond
4883   22C3             _while67_exit:
4884   22C3             ; while (i > 0) { 
4885   22C3             _while68_cond:
4886   22C3 FA F5 FF      lea d, [bp + -11] ; $i
4887   22C6 2A            mov b, [d]
4888   22C7 38 00 00      mov c, 0
4889   22CA             ; --- START RELATIONAL
4890   22CA D7            push a
4891   22CB 11            mov a, b
4892   22CC FD 2E 00 00   mov32 cb, $00000000
4892   22D0 00 00 
4893   22D2 B0            cmp a, b
4894   22D3 FD 7F         sgt ; >
4895   22D5 E4            pop a
4896   22D6             ; --- END RELATIONAL
4897   22D6 C0 00 00      cmp b, 0
4898   22D9 C6 0B 23      je _while68_exit
4899   22DC             _while68_block:
4900   22DC             ; i--; 
4901   22DC FA F5 FF      lea d, [bp + -11] ; $i
4902   22DF 2A            mov b, [d]
4903   22E0 38 00 00      mov c, 0
4904   22E3 11            mov a, b
4905   22E4 FD 7D         dec b
4906   22E6 FA F5 FF      lea d, [bp + -11] ; $i
4907   22E9 FD 43         mov [d], b
4908   22EB 27            mov b, a
4909   22EC             ; putchar(digits[i]); 
4910   22EC             ; --- START FUNCTION CALL
4911   22EC FA F7 FF      lea d, [bp + -9] ; $digits
4912   22EF D7            push a
4913   22F0 DA            push d
4914   22F1 FA F5 FF      lea d, [bp + -11] ; $i
4915   22F4 2A            mov b, [d]
4916   22F5 38 00 00      mov c, 0
4917   22F8 E7            pop d
4918   22F9 5A            add d, b
4919   22FA E4            pop a
4920   22FB 32            mov bl, [d]
4921   22FC A7 00         mov bh, 0
4922   22FE 38 00 00      mov c, 0
4923   2301 DD            push bl
4924   2302 07 49 28      call putchar
4925   2305 51 01 00      add sp, 1
4926   2308             ; --- END FUNCTION CALL
4927   2308 0A C3 22      jmp _while68_cond
4928   230B             _while68_exit:
4929   230B F9            leave
4930   230C 09            ret
4931   230D             
4932   230D             print_unsigned_long:
4933   230D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4934   2310             ; char digits[10]; 
4935   2310 52 0A 00      sub sp, 10
4936   2313             ; int i; 
4937   2313 52 02 00      sub sp, 2
4938   2316             ; i = 0; 
4939   2316 FA F5 FF      lea d, [bp + -11] ; $i
4940   2319 DA            push d
4941   231A FD 2E 00 00   mov32 cb, $00000000
4941   231E 00 00 
4942   2320 E7            pop d
4943   2321 FD 43         mov [d], b
4944   2323             ; if(num == 0){ 
4945   2323             _if69_cond:
4946   2323 FA 05 00      lea d, [bp + 5] ; $num
4947   2326 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4948   2329 FD 39         mov c, b ; And place it into C
4949   232B 2A            mov b, [d] ; Lower Word in B
4950   232C             ; --- START RELATIONAL
4951   232C D7            push a
4952   232D FD D8         push g
4953   232F 11            mov a, b
4954   2330 FD 7A         mov g, c
4955   2332 FD 2E 00 00   mov32 cb, $00000000
4955   2336 00 00 
4956   2338 FD AF         cmp32 ga, cb
4957   233A FD 71         seq ; ==
4958   233C FD F1         pop g
4959   233E E4            pop a
4960   233F             ; --- END RELATIONAL
4961   233F C0 00 00      cmp b, 0
4962   2342 C6 57 23      je _if69_exit
4963   2345             _if69_TRUE:
4964   2345             ; putchar('0'); 
4965   2345             ; --- START FUNCTION CALL
4966   2345 FD 2E 30 00   mov32 cb, $00000030
4966   2349 00 00 
4967   234B DD            push bl
4968   234C 07 49 28      call putchar
4969   234F 51 01 00      add sp, 1
4970   2352             ; --- END FUNCTION CALL
4971   2352             ; return; 
4972   2352 F9            leave
4973   2353 09            ret
4974   2354 0A 57 23      jmp _if69_exit
4975   2357             _if69_exit:
4976   2357             ; while (num > 0) { 
4977   2357             _while70_cond:
4978   2357 FA 05 00      lea d, [bp + 5] ; $num
4979   235A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4980   235D FD 39         mov c, b ; And place it into C
4981   235F 2A            mov b, [d] ; Lower Word in B
4982   2360             ; --- START RELATIONAL
4983   2360 D7            push a
4984   2361 FD D8         push g
4985   2363 11            mov a, b
4986   2364 FD 7A         mov g, c
4987   2366 FD 2E 00 00   mov32 cb, $00000000
4987   236A 00 00 
4988   236C FD AF         cmp32 ga, cb
4989   236E FD 81         sgu
4990   2370 FD F1         pop g
4991   2372 E4            pop a
4992   2373             ; --- END RELATIONAL
4993   2373 C0 00 00      cmp b, 0
4994   2376 C6 DF 23      je _while70_exit
4995   2379             _while70_block:
4996   2379             ; digits[i] = '0' + (num % 10); 
4997   2379 FA F7 FF      lea d, [bp + -9] ; $digits
4998   237C D7            push a
4999   237D DA            push d
5000   237E FA F5 FF      lea d, [bp + -11] ; $i
5001   2381 2A            mov b, [d]
5002   2382 38 00 00      mov c, 0
5003   2385 E7            pop d
5004   2386 5A            add d, b
5005   2387 E4            pop a
5006   2388 DA            push d
5007   2389 FD 2E 30 00   mov32 cb, $00000030
5007   238D 00 00 
5008   238F             ; --- START TERMS
5009   238F D7            push a
5010   2390 11            mov a, b
5011   2391 FA 05 00      lea d, [bp + 5] ; $num
5012   2394 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5013   2397 FD 39         mov c, b ; And place it into C
5014   2399 2A            mov b, [d] ; Lower Word in B
5015   239A             ; --- START FACTORS
5016   239A D7            push a
5017   239B 11            mov a, b
5018   239C FD 2E 0A 00   mov32 cb, $0000000a
5018   23A0 00 00 
5019   23A2 AE            div a, b ; 
5020   23A3 11            mov a, b
5021   23A4 27            mov b, a
5022   23A5 E4            pop a
5023   23A6             ; --- END FACTORS
5024   23A6 FD 15         add32 cb, ga
5025   23A8 E4            pop a
5026   23A9             ; --- END TERMS
5027   23A9 E7            pop d
5028   23AA FD 3E         mov [d], bl
5029   23AC             ; num = num / 10; 
5030   23AC FA 05 00      lea d, [bp + 5] ; $num
5031   23AF DA            push d
5032   23B0 FA 05 00      lea d, [bp + 5] ; $num
5033   23B3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5034   23B6 FD 39         mov c, b ; And place it into C
5035   23B8 2A            mov b, [d] ; Lower Word in B
5036   23B9             ; --- START FACTORS
5037   23B9 D7            push a
5038   23BA 11            mov a, b
5039   23BB FD 2E 0A 00   mov32 cb, $0000000a
5039   23BF 00 00 
5040   23C1 AE            div a, b
5041   23C2 27            mov b, a
5042   23C3 E4            pop a
5043   23C4             ; --- END FACTORS
5044   23C4 E7            pop d
5045   23C5 FD 43         mov [d], b
5046   23C7 28            mov b, c
5047   23C8 FD 44 02 00   mov [d + 2], b
5048   23CC             ; i++; 
5049   23CC FA F5 FF      lea d, [bp + -11] ; $i
5050   23CF 2A            mov b, [d]
5051   23D0 38 00 00      mov c, 0
5052   23D3 11            mov a, b
5053   23D4 FD 77         inc b
5054   23D6 FA F5 FF      lea d, [bp + -11] ; $i
5055   23D9 FD 43         mov [d], b
5056   23DB 27            mov b, a
5057   23DC 0A 57 23      jmp _while70_cond
5058   23DF             _while70_exit:
5059   23DF             ; while (i > 0) { 
5060   23DF             _while71_cond:
5061   23DF FA F5 FF      lea d, [bp + -11] ; $i
5062   23E2 2A            mov b, [d]
5063   23E3 38 00 00      mov c, 0
5064   23E6             ; --- START RELATIONAL
5065   23E6 D7            push a
5066   23E7 11            mov a, b
5067   23E8 FD 2E 00 00   mov32 cb, $00000000
5067   23EC 00 00 
5068   23EE B0            cmp a, b
5069   23EF FD 7F         sgt ; >
5070   23F1 E4            pop a
5071   23F2             ; --- END RELATIONAL
5072   23F2 C0 00 00      cmp b, 0
5073   23F5 C6 27 24      je _while71_exit
5074   23F8             _while71_block:
5075   23F8             ; i--; 
5076   23F8 FA F5 FF      lea d, [bp + -11] ; $i
5077   23FB 2A            mov b, [d]
5078   23FC 38 00 00      mov c, 0
5079   23FF 11            mov a, b
5080   2400 FD 7D         dec b
5081   2402 FA F5 FF      lea d, [bp + -11] ; $i
5082   2405 FD 43         mov [d], b
5083   2407 27            mov b, a
5084   2408             ; putchar(digits[i]); 
5085   2408             ; --- START FUNCTION CALL
5086   2408 FA F7 FF      lea d, [bp + -9] ; $digits
5087   240B D7            push a
5088   240C DA            push d
5089   240D FA F5 FF      lea d, [bp + -11] ; $i
5090   2410 2A            mov b, [d]
5091   2411 38 00 00      mov c, 0
5092   2414 E7            pop d
5093   2415 5A            add d, b
5094   2416 E4            pop a
5095   2417 32            mov bl, [d]
5096   2418 A7 00         mov bh, 0
5097   241A 38 00 00      mov c, 0
5098   241D DD            push bl
5099   241E 07 49 28      call putchar
5100   2421 51 01 00      add sp, 1
5101   2424             ; --- END FUNCTION CALL
5102   2424 0A DF 23      jmp _while71_cond
5103   2427             _while71_exit:
5104   2427 F9            leave
5105   2428 09            ret
5106   2429             
5107   2429             sprint_unsigned:
5108   2429 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5109   242C             ; char digits[5]; 
5110   242C 52 05 00      sub sp, 5
5111   242F             ; int i; 
5112   242F 52 02 00      sub sp, 2
5113   2432             ; int len = 0; 
5114   2432 52 02 00      sub sp, 2
5115   2435             ; --- START LOCAL VAR INITIALIZATION
5116   2435 FA F8 FF      lea d, [bp + -8] ; $len
5117   2438 DA            push d
5118   2439 FD 2E 00 00   mov32 cb, $00000000
5118   243D 00 00 
5119   243F E7            pop d
5120   2440 FD 43         mov [d], b
5121   2442             ; --- END LOCAL VAR INITIALIZATION
5122   2442             ; i = 0; 
5123   2442 FA FA FF      lea d, [bp + -6] ; $i
5124   2445 DA            push d
5125   2446 FD 2E 00 00   mov32 cb, $00000000
5125   244A 00 00 
5126   244C E7            pop d
5127   244D FD 43         mov [d], b
5128   244F             ; if(num == 0){ 
5129   244F             _if72_cond:
5130   244F FA 07 00      lea d, [bp + 7] ; $num
5131   2452 2A            mov b, [d]
5132   2453 38 00 00      mov c, 0
5133   2456             ; --- START RELATIONAL
5134   2456 D7            push a
5135   2457 11            mov a, b
5136   2458 FD 2E 00 00   mov32 cb, $00000000
5136   245C 00 00 
5137   245E B0            cmp a, b
5138   245F FD 71         seq ; ==
5139   2461 E4            pop a
5140   2462             ; --- END RELATIONAL
5141   2462 C0 00 00      cmp b, 0
5142   2465 C6 8D 24      je _if72_exit
5143   2468             _if72_TRUE:
5144   2468             ; *dest++ = '0'; 
5145   2468 FA 05 00      lea d, [bp + 5] ; $dest
5146   246B 2A            mov b, [d]
5147   246C 38 00 00      mov c, 0
5148   246F FD 77         inc b
5149   2471 FA 05 00      lea d, [bp + 5] ; $dest
5150   2474 FD 43         mov [d], b
5151   2476 FD 7D         dec b
5152   2478 D8            push b
5153   2479 FD 2E 30 00   mov32 cb, $00000030
5153   247D 00 00 
5154   247F E7            pop d
5155   2480 FD 3E         mov [d], bl
5156   2482             ; return 1; 
5157   2482 FD 2E 01 00   mov32 cb, $00000001
5157   2486 00 00 
5158   2488 F9            leave
5159   2489 09            ret
5160   248A 0A 8D 24      jmp _if72_exit
5161   248D             _if72_exit:
5162   248D             ; while (num > 0) { 
5163   248D             _while73_cond:
5164   248D FA 07 00      lea d, [bp + 7] ; $num
5165   2490 2A            mov b, [d]
5166   2491 38 00 00      mov c, 0
5167   2494             ; --- START RELATIONAL
5168   2494 D7            push a
5169   2495 11            mov a, b
5170   2496 FD 2E 00 00   mov32 cb, $00000000
5170   249A 00 00 
5171   249C B0            cmp a, b
5172   249D FD 81         sgu ; > (unsigned)
5173   249F E4            pop a
5174   24A0             ; --- END RELATIONAL
5175   24A0 C0 00 00      cmp b, 0
5176   24A3 C6 02 25      je _while73_exit
5177   24A6             _while73_block:
5178   24A6             ; digits[i] = '0' + (num % 10); 
5179   24A6 FA FC FF      lea d, [bp + -4] ; $digits
5180   24A9 D7            push a
5181   24AA DA            push d
5182   24AB FA FA FF      lea d, [bp + -6] ; $i
5183   24AE 2A            mov b, [d]
5184   24AF 38 00 00      mov c, 0
5185   24B2 E7            pop d
5186   24B3 5A            add d, b
5187   24B4 E4            pop a
5188   24B5 DA            push d
5189   24B6 FD 2E 30 00   mov32 cb, $00000030
5189   24BA 00 00 
5190   24BC             ; --- START TERMS
5191   24BC D7            push a
5192   24BD 11            mov a, b
5193   24BE FA 07 00      lea d, [bp + 7] ; $num
5194   24C1 2A            mov b, [d]
5195   24C2 38 00 00      mov c, 0
5196   24C5             ; --- START FACTORS
5197   24C5 D7            push a
5198   24C6 11            mov a, b
5199   24C7 FD 2E 0A 00   mov32 cb, $0000000a
5199   24CB 00 00 
5200   24CD AE            div a, b ; 
5201   24CE 11            mov a, b
5202   24CF 27            mov b, a
5203   24D0 E4            pop a
5204   24D1             ; --- END FACTORS
5205   24D1 56            add b, a
5206   24D2 E4            pop a
5207   24D3             ; --- END TERMS
5208   24D3 E7            pop d
5209   24D4 FD 3E         mov [d], bl
5210   24D6             ; num = num / 10; 
5211   24D6 FA 07 00      lea d, [bp + 7] ; $num
5212   24D9 DA            push d
5213   24DA FA 07 00      lea d, [bp + 7] ; $num
5214   24DD 2A            mov b, [d]
5215   24DE 38 00 00      mov c, 0
5216   24E1             ; --- START FACTORS
5217   24E1 D7            push a
5218   24E2 11            mov a, b
5219   24E3 FD 2E 0A 00   mov32 cb, $0000000a
5219   24E7 00 00 
5220   24E9 AE            div a, b
5221   24EA 27            mov b, a
5222   24EB E4            pop a
5223   24EC             ; --- END FACTORS
5224   24EC E7            pop d
5225   24ED FD 43         mov [d], b
5226   24EF             ; i++; 
5227   24EF FA FA FF      lea d, [bp + -6] ; $i
5228   24F2 2A            mov b, [d]
5229   24F3 38 00 00      mov c, 0
5230   24F6 11            mov a, b
5231   24F7 FD 77         inc b
5232   24F9 FA FA FF      lea d, [bp + -6] ; $i
5233   24FC FD 43         mov [d], b
5234   24FE 27            mov b, a
5235   24FF 0A 8D 24      jmp _while73_cond
5236   2502             _while73_exit:
5237   2502             ; while (i > 0) { 
5238   2502             _while74_cond:
5239   2502 FA FA FF      lea d, [bp + -6] ; $i
5240   2505 2A            mov b, [d]
5241   2506 38 00 00      mov c, 0
5242   2509             ; --- START RELATIONAL
5243   2509 D7            push a
5244   250A 11            mov a, b
5245   250B FD 2E 00 00   mov32 cb, $00000000
5245   250F 00 00 
5246   2511 B0            cmp a, b
5247   2512 FD 7F         sgt ; >
5248   2514 E4            pop a
5249   2515             ; --- END RELATIONAL
5250   2515 C0 00 00      cmp b, 0
5251   2518 C6 67 25      je _while74_exit
5252   251B             _while74_block:
5253   251B             ; i--; 
5254   251B FA FA FF      lea d, [bp + -6] ; $i
5255   251E 2A            mov b, [d]
5256   251F 38 00 00      mov c, 0
5257   2522 11            mov a, b
5258   2523 FD 7D         dec b
5259   2525 FA FA FF      lea d, [bp + -6] ; $i
5260   2528 FD 43         mov [d], b
5261   252A 27            mov b, a
5262   252B             ; *dest++ = digits[i]; 
5263   252B FA 05 00      lea d, [bp + 5] ; $dest
5264   252E 2A            mov b, [d]
5265   252F 38 00 00      mov c, 0
5266   2532 FD 77         inc b
5267   2534 FA 05 00      lea d, [bp + 5] ; $dest
5268   2537 FD 43         mov [d], b
5269   2539 FD 7D         dec b
5270   253B D8            push b
5271   253C FA FC FF      lea d, [bp + -4] ; $digits
5272   253F D7            push a
5273   2540 DA            push d
5274   2541 FA FA FF      lea d, [bp + -6] ; $i
5275   2544 2A            mov b, [d]
5276   2545 38 00 00      mov c, 0
5277   2548 E7            pop d
5278   2549 5A            add d, b
5279   254A E4            pop a
5280   254B 32            mov bl, [d]
5281   254C A7 00         mov bh, 0
5282   254E 38 00 00      mov c, 0
5283   2551 E7            pop d
5284   2552 FD 3E         mov [d], bl
5285   2554             ; len++; 
5286   2554 FA F8 FF      lea d, [bp + -8] ; $len
5287   2557 2A            mov b, [d]
5288   2558 38 00 00      mov c, 0
5289   255B 11            mov a, b
5290   255C FD 77         inc b
5291   255E FA F8 FF      lea d, [bp + -8] ; $len
5292   2561 FD 43         mov [d], b
5293   2563 27            mov b, a
5294   2564 0A 02 25      jmp _while74_cond
5295   2567             _while74_exit:
5296   2567             ; *dest = '\0'; 
5297   2567 FA 05 00      lea d, [bp + 5] ; $dest
5298   256A 2A            mov b, [d]
5299   256B 38 00 00      mov c, 0
5300   256E D8            push b
5301   256F FD 2E 00 00   mov32 cb, $00000000
5301   2573 00 00 
5302   2575 E7            pop d
5303   2576 FD 3E         mov [d], bl
5304   2578             ; return len; 
5305   2578 FA F8 FF      lea d, [bp + -8] ; $len
5306   257B 2A            mov b, [d]
5307   257C 38 00 00      mov c, 0
5308   257F F9            leave
5309   2580 09            ret
5310   2581             
5311   2581             print_unsigned:
5312   2581 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5313   2584             ; char digits[5]; 
5314   2584 52 05 00      sub sp, 5
5315   2587             ; int i; 
5316   2587 52 02 00      sub sp, 2
5317   258A             ; i = 0; 
5318   258A FA FA FF      lea d, [bp + -6] ; $i
5319   258D DA            push d
5320   258E FD 2E 00 00   mov32 cb, $00000000
5320   2592 00 00 
5321   2594 E7            pop d
5322   2595 FD 43         mov [d], b
5323   2597             ; if(num == 0){ 
5324   2597             _if75_cond:
5325   2597 FA 05 00      lea d, [bp + 5] ; $num
5326   259A 2A            mov b, [d]
5327   259B 38 00 00      mov c, 0
5328   259E             ; --- START RELATIONAL
5329   259E D7            push a
5330   259F 11            mov a, b
5331   25A0 FD 2E 00 00   mov32 cb, $00000000
5331   25A4 00 00 
5332   25A6 B0            cmp a, b
5333   25A7 FD 71         seq ; ==
5334   25A9 E4            pop a
5335   25AA             ; --- END RELATIONAL
5336   25AA C0 00 00      cmp b, 0
5337   25AD C6 C2 25      je _if75_exit
5338   25B0             _if75_TRUE:
5339   25B0             ; putchar('0'); 
5340   25B0             ; --- START FUNCTION CALL
5341   25B0 FD 2E 30 00   mov32 cb, $00000030
5341   25B4 00 00 
5342   25B6 DD            push bl
5343   25B7 07 49 28      call putchar
5344   25BA 51 01 00      add sp, 1
5345   25BD             ; --- END FUNCTION CALL
5346   25BD             ; return; 
5347   25BD F9            leave
5348   25BE 09            ret
5349   25BF 0A C2 25      jmp _if75_exit
5350   25C2             _if75_exit:
5351   25C2             ; while (num > 0) { 
5352   25C2             _while76_cond:
5353   25C2 FA 05 00      lea d, [bp + 5] ; $num
5354   25C5 2A            mov b, [d]
5355   25C6 38 00 00      mov c, 0
5356   25C9             ; --- START RELATIONAL
5357   25C9 D7            push a
5358   25CA 11            mov a, b
5359   25CB FD 2E 00 00   mov32 cb, $00000000
5359   25CF 00 00 
5360   25D1 B0            cmp a, b
5361   25D2 FD 81         sgu ; > (unsigned)
5362   25D4 E4            pop a
5363   25D5             ; --- END RELATIONAL
5364   25D5 C0 00 00      cmp b, 0
5365   25D8 C6 37 26      je _while76_exit
5366   25DB             _while76_block:
5367   25DB             ; digits[i] = '0' + (num % 10); 
5368   25DB FA FC FF      lea d, [bp + -4] ; $digits
5369   25DE D7            push a
5370   25DF DA            push d
5371   25E0 FA FA FF      lea d, [bp + -6] ; $i
5372   25E3 2A            mov b, [d]
5373   25E4 38 00 00      mov c, 0
5374   25E7 E7            pop d
5375   25E8 5A            add d, b
5376   25E9 E4            pop a
5377   25EA DA            push d
5378   25EB FD 2E 30 00   mov32 cb, $00000030
5378   25EF 00 00 
5379   25F1             ; --- START TERMS
5380   25F1 D7            push a
5381   25F2 11            mov a, b
5382   25F3 FA 05 00      lea d, [bp + 5] ; $num
5383   25F6 2A            mov b, [d]
5384   25F7 38 00 00      mov c, 0
5385   25FA             ; --- START FACTORS
5386   25FA D7            push a
5387   25FB 11            mov a, b
5388   25FC FD 2E 0A 00   mov32 cb, $0000000a
5388   2600 00 00 
5389   2602 AE            div a, b ; 
5390   2603 11            mov a, b
5391   2604 27            mov b, a
5392   2605 E4            pop a
5393   2606             ; --- END FACTORS
5394   2606 56            add b, a
5395   2607 E4            pop a
5396   2608             ; --- END TERMS
5397   2608 E7            pop d
5398   2609 FD 3E         mov [d], bl
5399   260B             ; num = num / 10; 
5400   260B FA 05 00      lea d, [bp + 5] ; $num
5401   260E DA            push d
5402   260F FA 05 00      lea d, [bp + 5] ; $num
5403   2612 2A            mov b, [d]
5404   2613 38 00 00      mov c, 0
5405   2616             ; --- START FACTORS
5406   2616 D7            push a
5407   2617 11            mov a, b
5408   2618 FD 2E 0A 00   mov32 cb, $0000000a
5408   261C 00 00 
5409   261E AE            div a, b
5410   261F 27            mov b, a
5411   2620 E4            pop a
5412   2621             ; --- END FACTORS
5413   2621 E7            pop d
5414   2622 FD 43         mov [d], b
5415   2624             ; i++; 
5416   2624 FA FA FF      lea d, [bp + -6] ; $i
5417   2627 2A            mov b, [d]
5418   2628 38 00 00      mov c, 0
5419   262B 11            mov a, b
5420   262C FD 77         inc b
5421   262E FA FA FF      lea d, [bp + -6] ; $i
5422   2631 FD 43         mov [d], b
5423   2633 27            mov b, a
5424   2634 0A C2 25      jmp _while76_cond
5425   2637             _while76_exit:
5426   2637             ; while (i > 0) { 
5427   2637             _while77_cond:
5428   2637 FA FA FF      lea d, [bp + -6] ; $i
5429   263A 2A            mov b, [d]
5430   263B 38 00 00      mov c, 0
5431   263E             ; --- START RELATIONAL
5432   263E D7            push a
5433   263F 11            mov a, b
5434   2640 FD 2E 00 00   mov32 cb, $00000000
5434   2644 00 00 
5435   2646 B0            cmp a, b
5436   2647 FD 7F         sgt ; >
5437   2649 E4            pop a
5438   264A             ; --- END RELATIONAL
5439   264A C0 00 00      cmp b, 0
5440   264D C6 7F 26      je _while77_exit
5441   2650             _while77_block:
5442   2650             ; i--; 
5443   2650 FA FA FF      lea d, [bp + -6] ; $i
5444   2653 2A            mov b, [d]
5445   2654 38 00 00      mov c, 0
5446   2657 11            mov a, b
5447   2658 FD 7D         dec b
5448   265A FA FA FF      lea d, [bp + -6] ; $i
5449   265D FD 43         mov [d], b
5450   265F 27            mov b, a
5451   2660             ; putchar(digits[i]); 
5452   2660             ; --- START FUNCTION CALL
5453   2660 FA FC FF      lea d, [bp + -4] ; $digits
5454   2663 D7            push a
5455   2664 DA            push d
5456   2665 FA FA FF      lea d, [bp + -6] ; $i
5457   2668 2A            mov b, [d]
5458   2669 38 00 00      mov c, 0
5459   266C E7            pop d
5460   266D 5A            add d, b
5461   266E E4            pop a
5462   266F 32            mov bl, [d]
5463   2670 A7 00         mov bh, 0
5464   2672 38 00 00      mov c, 0
5465   2675 DD            push bl
5466   2676 07 49 28      call putchar
5467   2679 51 01 00      add sp, 1
5468   267C             ; --- END FUNCTION CALL
5469   267C 0A 37 26      jmp _while77_cond
5470   267F             _while77_exit:
5471   267F F9            leave
5472   2680 09            ret
5473   2681             
5474   2681             sprint_signed:
5475   2681 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5476   2684             ; char digits[5]; 
5477   2684 52 05 00      sub sp, 5
5478   2687             ; int i = 0; 
5479   2687 52 02 00      sub sp, 2
5480   268A             ; --- START LOCAL VAR INITIALIZATION
5481   268A FA FA FF      lea d, [bp + -6] ; $i
5482   268D DA            push d
5483   268E FD 2E 00 00   mov32 cb, $00000000
5483   2692 00 00 
5484   2694 E7            pop d
5485   2695 FD 43         mov [d], b
5486   2697             ; --- END LOCAL VAR INITIALIZATION
5487   2697             ; int len = 0; 
5488   2697 52 02 00      sub sp, 2
5489   269A             ; --- START LOCAL VAR INITIALIZATION
5490   269A FA F8 FF      lea d, [bp + -8] ; $len
5491   269D DA            push d
5492   269E FD 2E 00 00   mov32 cb, $00000000
5492   26A2 00 00 
5493   26A4 E7            pop d
5494   26A5 FD 43         mov [d], b
5495   26A7             ; --- END LOCAL VAR INITIALIZATION
5496   26A7             ; if (num < 0) { 
5497   26A7             _if78_cond:
5498   26A7 FA 07 00      lea d, [bp + 7] ; $num
5499   26AA 2A            mov b, [d]
5500   26AB 38 00 00      mov c, 0
5501   26AE             ; --- START RELATIONAL
5502   26AE D7            push a
5503   26AF 11            mov a, b
5504   26B0 FD 2E 00 00   mov32 cb, $00000000
5504   26B4 00 00 
5505   26B6 B0            cmp a, b
5506   26B7 FD 73         slt ; < (signed)
5507   26B9 E4            pop a
5508   26BA             ; --- END RELATIONAL
5509   26BA C0 00 00      cmp b, 0
5510   26BD C6 FD 26      je _if78_else
5511   26C0             _if78_TRUE:
5512   26C0             ; *dest++ = '-'; 
5513   26C0 FA 05 00      lea d, [bp + 5] ; $dest
5514   26C3 2A            mov b, [d]
5515   26C4 38 00 00      mov c, 0
5516   26C7 FD 77         inc b
5517   26C9 FA 05 00      lea d, [bp + 5] ; $dest
5518   26CC FD 43         mov [d], b
5519   26CE FD 7D         dec b
5520   26D0 D8            push b
5521   26D1 FD 2E 2D 00   mov32 cb, $0000002d
5521   26D5 00 00 
5522   26D7 E7            pop d
5523   26D8 FD 3E         mov [d], bl
5524   26DA             ; num = -num; 
5525   26DA FA 07 00      lea d, [bp + 7] ; $num
5526   26DD DA            push d
5527   26DE FA 07 00      lea d, [bp + 7] ; $num
5528   26E1 2A            mov b, [d]
5529   26E2 38 00 00      mov c, 0
5530   26E5 FD 97         neg b
5531   26E7 E7            pop d
5532   26E8 FD 43         mov [d], b
5533   26EA             ; len++; 
5534   26EA FA F8 FF      lea d, [bp + -8] ; $len
5535   26ED 2A            mov b, [d]
5536   26EE 38 00 00      mov c, 0
5537   26F1 11            mov a, b
5538   26F2 FD 77         inc b
5539   26F4 FA F8 FF      lea d, [bp + -8] ; $len
5540   26F7 FD 43         mov [d], b
5541   26F9 27            mov b, a
5542   26FA 0A 4C 27      jmp _if78_exit
5543   26FD             _if78_else:
5544   26FD             ; if (num == 0) { 
5545   26FD             _if79_cond:
5546   26FD FA 07 00      lea d, [bp + 7] ; $num
5547   2700 2A            mov b, [d]
5548   2701 38 00 00      mov c, 0
5549   2704             ; --- START RELATIONAL
5550   2704 D7            push a
5551   2705 11            mov a, b
5552   2706 FD 2E 00 00   mov32 cb, $00000000
5552   270A 00 00 
5553   270C B0            cmp a, b
5554   270D FD 71         seq ; ==
5555   270F E4            pop a
5556   2710             ; --- END RELATIONAL
5557   2710 C0 00 00      cmp b, 0
5558   2713 C6 4C 27      je _if79_exit
5559   2716             _if79_TRUE:
5560   2716             ; *dest++ = '0'; 
5561   2716 FA 05 00      lea d, [bp + 5] ; $dest
5562   2719 2A            mov b, [d]
5563   271A 38 00 00      mov c, 0
5564   271D FD 77         inc b
5565   271F FA 05 00      lea d, [bp + 5] ; $dest
5566   2722 FD 43         mov [d], b
5567   2724 FD 7D         dec b
5568   2726 D8            push b
5569   2727 FD 2E 30 00   mov32 cb, $00000030
5569   272B 00 00 
5570   272D E7            pop d
5571   272E FD 3E         mov [d], bl
5572   2730             ; *dest = '\0'; 
5573   2730 FA 05 00      lea d, [bp + 5] ; $dest
5574   2733 2A            mov b, [d]
5575   2734 38 00 00      mov c, 0
5576   2737 D8            push b
5577   2738 FD 2E 00 00   mov32 cb, $00000000
5577   273C 00 00 
5578   273E E7            pop d
5579   273F FD 3E         mov [d], bl
5580   2741             ; return 1; 
5581   2741 FD 2E 01 00   mov32 cb, $00000001
5581   2745 00 00 
5582   2747 F9            leave
5583   2748 09            ret
5584   2749 0A 4C 27      jmp _if79_exit
5585   274C             _if79_exit:
5586   274C             _if78_exit:
5587   274C             ; while (num > 0) { 
5588   274C             _while80_cond:
5589   274C FA 07 00      lea d, [bp + 7] ; $num
5590   274F 2A            mov b, [d]
5591   2750 38 00 00      mov c, 0
5592   2753             ; --- START RELATIONAL
5593   2753 D7            push a
5594   2754 11            mov a, b
5595   2755 FD 2E 00 00   mov32 cb, $00000000
5595   2759 00 00 
5596   275B B0            cmp a, b
5597   275C FD 7F         sgt ; >
5598   275E E4            pop a
5599   275F             ; --- END RELATIONAL
5600   275F C0 00 00      cmp b, 0
5601   2762 C6 C1 27      je _while80_exit
5602   2765             _while80_block:
5603   2765             ; digits[i] = '0' + (num % 10); 
5604   2765 FA FC FF      lea d, [bp + -4] ; $digits
5605   2768 D7            push a
5606   2769 DA            push d
5607   276A FA FA FF      lea d, [bp + -6] ; $i
5608   276D 2A            mov b, [d]
5609   276E 38 00 00      mov c, 0
5610   2771 E7            pop d
5611   2772 5A            add d, b
5612   2773 E4            pop a
5613   2774 DA            push d
5614   2775 FD 2E 30 00   mov32 cb, $00000030
5614   2779 00 00 
5615   277B             ; --- START TERMS
5616   277B D7            push a
5617   277C 11            mov a, b
5618   277D FA 07 00      lea d, [bp + 7] ; $num
5619   2780 2A            mov b, [d]
5620   2781 38 00 00      mov c, 0
5621   2784             ; --- START FACTORS
5622   2784 D7            push a
5623   2785 11            mov a, b
5624   2786 FD 2E 0A 00   mov32 cb, $0000000a
5624   278A 00 00 
5625   278C AE            div a, b ; 
5626   278D 11            mov a, b
5627   278E 27            mov b, a
5628   278F E4            pop a
5629   2790             ; --- END FACTORS
5630   2790 56            add b, a
5631   2791 E4            pop a
5632   2792             ; --- END TERMS
5633   2792 E7            pop d
5634   2793 FD 3E         mov [d], bl
5635   2795             ; num = num / 10; 
5636   2795 FA 07 00      lea d, [bp + 7] ; $num
5637   2798 DA            push d
5638   2799 FA 07 00      lea d, [bp + 7] ; $num
5639   279C 2A            mov b, [d]
5640   279D 38 00 00      mov c, 0
5641   27A0             ; --- START FACTORS
5642   27A0 D7            push a
5643   27A1 11            mov a, b
5644   27A2 FD 2E 0A 00   mov32 cb, $0000000a
5644   27A6 00 00 
5645   27A8 AE            div a, b
5646   27A9 27            mov b, a
5647   27AA E4            pop a
5648   27AB             ; --- END FACTORS
5649   27AB E7            pop d
5650   27AC FD 43         mov [d], b
5651   27AE             ; i++; 
5652   27AE FA FA FF      lea d, [bp + -6] ; $i
5653   27B1 2A            mov b, [d]
5654   27B2 38 00 00      mov c, 0
5655   27B5 11            mov a, b
5656   27B6 FD 77         inc b
5657   27B8 FA FA FF      lea d, [bp + -6] ; $i
5658   27BB FD 43         mov [d], b
5659   27BD 27            mov b, a
5660   27BE 0A 4C 27      jmp _while80_cond
5661   27C1             _while80_exit:
5662   27C1             ; while (i > 0) { 
5663   27C1             _while81_cond:
5664   27C1 FA FA FF      lea d, [bp + -6] ; $i
5665   27C4 2A            mov b, [d]
5666   27C5 38 00 00      mov c, 0
5667   27C8             ; --- START RELATIONAL
5668   27C8 D7            push a
5669   27C9 11            mov a, b
5670   27CA FD 2E 00 00   mov32 cb, $00000000
5670   27CE 00 00 
5671   27D0 B0            cmp a, b
5672   27D1 FD 7F         sgt ; >
5673   27D3 E4            pop a
5674   27D4             ; --- END RELATIONAL
5675   27D4 C0 00 00      cmp b, 0
5676   27D7 C6 26 28      je _while81_exit
5677   27DA             _while81_block:
5678   27DA             ; i--; 
5679   27DA FA FA FF      lea d, [bp + -6] ; $i
5680   27DD 2A            mov b, [d]
5681   27DE 38 00 00      mov c, 0
5682   27E1 11            mov a, b
5683   27E2 FD 7D         dec b
5684   27E4 FA FA FF      lea d, [bp + -6] ; $i
5685   27E7 FD 43         mov [d], b
5686   27E9 27            mov b, a
5687   27EA             ; *dest++ = digits[i]; 
5688   27EA FA 05 00      lea d, [bp + 5] ; $dest
5689   27ED 2A            mov b, [d]
5690   27EE 38 00 00      mov c, 0
5691   27F1 FD 77         inc b
5692   27F3 FA 05 00      lea d, [bp + 5] ; $dest
5693   27F6 FD 43         mov [d], b
5694   27F8 FD 7D         dec b
5695   27FA D8            push b
5696   27FB FA FC FF      lea d, [bp + -4] ; $digits
5697   27FE D7            push a
5698   27FF DA            push d
5699   2800 FA FA FF      lea d, [bp + -6] ; $i
5700   2803 2A            mov b, [d]
5701   2804 38 00 00      mov c, 0
5702   2807 E7            pop d
5703   2808 5A            add d, b
5704   2809 E4            pop a
5705   280A 32            mov bl, [d]
5706   280B A7 00         mov bh, 0
5707   280D 38 00 00      mov c, 0
5708   2810 E7            pop d
5709   2811 FD 3E         mov [d], bl
5710   2813             ; len++; 
5711   2813 FA F8 FF      lea d, [bp + -8] ; $len
5712   2816 2A            mov b, [d]
5713   2817 38 00 00      mov c, 0
5714   281A 11            mov a, b
5715   281B FD 77         inc b
5716   281D FA F8 FF      lea d, [bp + -8] ; $len
5717   2820 FD 43         mov [d], b
5718   2822 27            mov b, a
5719   2823 0A C1 27      jmp _while81_cond
5720   2826             _while81_exit:
5721   2826             ; *dest = '\0'; 
5722   2826 FA 05 00      lea d, [bp + 5] ; $dest
5723   2829 2A            mov b, [d]
5724   282A 38 00 00      mov c, 0
5725   282D D8            push b
5726   282E FD 2E 00 00   mov32 cb, $00000000
5726   2832 00 00 
5727   2834 E7            pop d
5728   2835 FD 3E         mov [d], bl
5729   2837             ; return len; 
5730   2837 FA F8 FF      lea d, [bp + -8] ; $len
5731   283A 2A            mov b, [d]
5732   283B 38 00 00      mov c, 0
5733   283E F9            leave
5734   283F 09            ret
5735   2840             
5736   2840             date:
5737   2840 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5738   2843             
5739   2843             ; --- BEGIN INLINE ASM SEGMENT
5740   2843 19 00         mov al, 0 
5741   2845 05 07         syscall sys_datetime
5742   2847             ; --- END INLINE ASM SEGMENT
5743   2847             
5744   2847 F9            leave
5745   2848 09            ret
5746   2849             
5747   2849             putchar:
5748   2849 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5749   284C             
5750   284C             ; --- BEGIN INLINE ASM SEGMENT
5751   284C FA 05 00      lea d, [bp + 5] ; $c
5752   284F 1E            mov al, [d]
5753   2850 23            mov ah, al
5754   2851 07 58 2A      call _putchar
5755   2854             ; --- END INLINE ASM SEGMENT
5756   2854             
5757   2854 F9            leave
5758   2855 09            ret
5759   2856             
5760   2856             getchar:
5761   2856 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5762   2859             ; char c; 
5763   2859 52 01 00      sub sp, 1
5764   285C             
5765   285C             ; --- BEGIN INLINE ASM SEGMENT
5766   285C 07 51 2A      call getch
5767   285F 1A            mov al, ah
5768   2860 FA 00 00      lea d, [bp + 0] ; $c
5769   2863 3E            mov [d], al
5770   2864             ; --- END INLINE ASM SEGMENT
5771   2864             
5772   2864             ; return c; 
5773   2864 FA 00 00      lea d, [bp + 0] ; $c
5774   2867 32            mov bl, [d]
5775   2868 A7 00         mov bh, 0
5776   286A 38 00 00      mov c, 0
5777   286D F9            leave
5778   286E 09            ret
5779   286F             
5780   286F             scann:
5781   286F F8 00 00      enter 0 ; (push bp; mov bp, sp)
5782   2872             ; int m; 
5783   2872 52 02 00      sub sp, 2
5784   2875             
5785   2875             ; --- BEGIN INLINE ASM SEGMENT
5786   2875 07 9C 2C      call scan_u16d
5787   2878 FA FF FF      lea d, [bp + -1] ; $m
5788   287B 43            mov [d], a
5789   287C             ; --- END INLINE ASM SEGMENT
5790   287C             
5791   287C             ; return m; 
5792   287C FA FF FF      lea d, [bp + -1] ; $m
5793   287F 2A            mov b, [d]
5794   2880 38 00 00      mov c, 0
5795   2883 F9            leave
5796   2884 09            ret
5797   2885             
5798   2885             puts:
5799   2885 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5800   2888             
5801   2888             ; --- BEGIN INLINE ASM SEGMENT
5802   2888 FA 05 00      lea d, [bp + 5] ; $s
5803   288B 15            mov a, [d]
5804   288C 3C            mov d, a
5805   288D 07 A2 2B      call _puts
5806   2890 10 00 0A      mov a, $0A00
5807   2893 05 03         syscall sys_io
5808   2895             ; --- END INLINE ASM SEGMENT
5809   2895             
5810   2895 F9            leave
5811   2896 09            ret
5812   2897             
5813   2897             print:
5814   2897 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5815   289A             
5816   289A             ; --- BEGIN INLINE ASM SEGMENT
5817   289A FA 05 00      lea d, [bp + 5] ; $s
5818   289D FD 2A         mov d, [d]
5819   289F 07 A2 2B      call _puts
5820   28A2             ; --- END INLINE ASM SEGMENT
5821   28A2             
5822   28A2 F9            leave
5823   28A3 09            ret
5824   28A4             
5825   28A4             getparam:
5826   28A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5827   28A7             ; char data; 
5828   28A7 52 01 00      sub sp, 1
5829   28AA             
5830   28AA             ; --- BEGIN INLINE ASM SEGMENT
5831   28AA 19 04         mov al, 4
5832   28AC FA 05 00      lea d, [bp + 5] ; $address
5833   28AF FD 2A         mov d, [d]
5834   28B1 05 0C         syscall sys_system
5835   28B3 FA 00 00      lea d, [bp + 0] ; $data
5836   28B6 FD 3E         mov [d], bl
5837   28B8             ; --- END INLINE ASM SEGMENT
5838   28B8             
5839   28B8             ; return data; 
5840   28B8 FA 00 00      lea d, [bp + 0] ; $data
5841   28BB 32            mov bl, [d]
5842   28BC A7 00         mov bh, 0
5843   28BE 38 00 00      mov c, 0
5844   28C1 F9            leave
5845   28C2 09            ret
5846   28C3             
5847   28C3             clear:
5848   28C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5849   28C6             ; print("\033[2J\033[H"); 
5850   28C6             ; --- START FUNCTION CALL
5851   28C6 26 35 54      mov b, _s12 ; "\033[2J\033[H"
5852   28C9 FD AB         swp b
5853   28CB D8            push b
5854   28CC 07 97 28      call print
5855   28CF 51 02 00      add sp, 2
5856   28D2             ; --- END FUNCTION CALL
5857   28D2 F9            leave
5858   28D3 09            ret
5859   28D4             
5860   28D4             abs:
5861   28D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5862   28D7             ; return i < 0 ? -i : i; 
5863   28D7             _ternary82_cond:
5864   28D7 FA 05 00      lea d, [bp + 5] ; $i
5865   28DA 2A            mov b, [d]
5866   28DB 38 00 00      mov c, 0
5867   28DE             ; --- START RELATIONAL
5868   28DE D7            push a
5869   28DF 11            mov a, b
5870   28E0 FD 2E 00 00   mov32 cb, $00000000
5870   28E4 00 00 
5871   28E6 B0            cmp a, b
5872   28E7 FD 73         slt ; < (signed)
5873   28E9 E4            pop a
5874   28EA             ; --- END RELATIONAL
5875   28EA C0 00 00      cmp b, 0
5876   28ED C6 FC 28      je _ternary82_FALSE
5877   28F0             _ternary82_TRUE:
5878   28F0 FA 05 00      lea d, [bp + 5] ; $i
5879   28F3 2A            mov b, [d]
5880   28F4 38 00 00      mov c, 0
5881   28F7 FD 97         neg b
5882   28F9 0A 03 29      jmp _ternary82_exit
5883   28FC             _ternary82_FALSE:
5884   28FC FA 05 00      lea d, [bp + 5] ; $i
5885   28FF 2A            mov b, [d]
5886   2900 38 00 00      mov c, 0
5887   2903             _ternary82_exit:
5888   2903 F9            leave
5889   2904 09            ret
5890   2905             
5891   2905             loadfile:
5892   2905 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5893   2908             
5894   2908             ; --- BEGIN INLINE ASM SEGMENT
5895   2908 FA 07 00      lea d, [bp + 7] ; $destination
5896   290B 15            mov a, [d]
5897   290C 4F            mov di, a
5898   290D FA 05 00      lea d, [bp + 5] ; $filename
5899   2910 FD 2A         mov d, [d]
5900   2912 19 14         mov al, 20
5901   2914 05 04         syscall sys_filesystem
5902   2916             ; --- END INLINE ASM SEGMENT
5903   2916             
5904   2916 F9            leave
5905   2917 09            ret
5906   2918             
5907   2918             create_file:
5908   2918 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5909   291B F9            leave
5910   291C 09            ret
5911   291D             
5912   291D             delete_file:
5913   291D F8 00 00      enter 0 ; (push bp; mov bp, sp)
5914   2920             
5915   2920             ; --- BEGIN INLINE ASM SEGMENT
5916   2920 FA 05 00      lea d, [bp + 5] ; $filename
5917   2923 19 0A         mov al, 10
5918   2925 05 04         syscall sys_filesystem
5919   2927             ; --- END INLINE ASM SEGMENT
5920   2927             
5921   2927 F9            leave
5922   2928 09            ret
5923   2929             
5924   2929             load_hex:
5925   2929 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5926   292C             ; char *temp; 
5927   292C 52 02 00      sub sp, 2
5928   292F             ; temp = alloc(32768); 
5929   292F FA FF FF      lea d, [bp + -1] ; $temp
5930   2932 DA            push d
5931   2933             ; --- START FUNCTION CALL
5932   2933 FD 2E 00 80   mov32 cb, $00008000
5932   2937 00 00 
5933   2939 FD AB         swp b
5934   293B D8            push b
5935   293C 07 02 14      call alloc
5936   293F 51 02 00      add sp, 2
5937   2942             ; --- END FUNCTION CALL
5938   2942 E7            pop d
5939   2943 FD 43         mov [d], b
5940   2945             
5941   2945             ; --- BEGIN INLINE ASM SEGMENT
5942   2945               
5943   2945               
5944   2945               
5945   2945             _load_hex:
5946   2945 FA 05 00      lea d, [bp + 5] ; $destination
5947   2948 FD 2A         mov d, [d]
5948   294A FD 50         mov di, d
5949   294C FA FF FF      lea d, [bp + -1] ; $temp
5950   294F FD 2A         mov d, [d]
5951   2951 38 00 00      mov c, 0
5952   2954 48            mov a, sp
5953   2955 77            inc a
5954   2956 3C            mov d, a          
5955   2957 07 5F 2A      call _gets        
5956   295A 4D            mov si, a
5957   295B             __load_hex_loop:
5958   295B F6            lodsb             
5959   295C B9 00         cmp al, 0         
5960   295E C6 6C 29      jz __load_hex_ret
5961   2961 36            mov bh, al
5962   2962 F6            lodsb
5963   2963 2F            mov bl, al
5964   2964 07 16 2A      call _atoi        
5965   2967 F7            stosb             
5966   2968 78            inc c
5967   2969 0A 5B 29      jmp __load_hex_loop
5968   296C             __load_hex_ret:
5969   296C             ; --- END INLINE ASM SEGMENT
5970   296C             
5971   296C F9            leave
5972   296D 09            ret
5973   296E             
5974   296E             include_stdio_asm:
5975   296E F8 00 00      enter 0 ; (push bp; mov bp, sp)
5976   2971             
5977   2971             ; --- BEGIN INLINE ASM SEGMENT
5978   2971             .include "lib/asm/stdio.asm"
0001+  2971             ;-----------------------------------------------------------------------------
0002+  2971             ; stdio.s
0003+  2971             ;-----------------------------------------------------------------------------
0004+  2971             .include "lib/asm/string.asm"
0001++ 2971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 2971             ; string.s
0003++ 2971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 2971             
0005++ 2971             
0006++ 2971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 2971             ; _strrev
0008++ 2971             ; reverse a string
0009++ 2971             ; D = string address
0010++ 2971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 2971             ; 01234
0012++ 2971             _strrev:
0013++ 2971 4B          	pusha
0014++ 2972 07 B8 29    	call _strlen	; length in C
0015++ 2975 12          	mov a, c
0016++ 2976 AF 01 00    	cmp a, 1
0017++ 2979 D0 93 29    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 297C 7D          	dec a
0019++ 297D FD 4E       	mov si, d	; beginning of string
0020++ 297F FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 2981 59          	add d, a	; end of string
0022++ 2982 12          	mov a, c
0023++ 2983 FD 9B       	shr a		; divide by 2
0024++ 2985 39          	mov c, a	; C now counts the steps
0025++ 2986             _strrev_L0:
0026++ 2986 32          	mov bl, [d]	; save load right-side char into BL
0027++ 2987 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 2988 3E          	mov [d], al	; store left char into right side
0029++ 2989 1B          	mov al, bl
0030++ 298A F7          	stosb		; store right-side char into left-side; increase DI
0031++ 298B 7E          	dec c
0032++ 298C 7F          	dec d
0033++ 298D C2 00 00    	cmp c, 0
0034++ 2990 C7 86 29    	jne _strrev_L0
0035++ 2993             _strrev_end:
0036++ 2993 4C          	popa
0037++ 2994 09          	ret
0038++ 2995             	
0039++ 2995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 2995             ; _strchr
0041++ 2995             ; search string in D for char in AL
0042++ 2995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 2995             _strchr:
0044++ 2995             _strchr_L0:
0045++ 2995 32          	mov bl, [d]
0046++ 2996 C1 00       	cmp bl, 0
0047++ 2998 C6 A3 29    	je _strchr_end
0048++ 299B BA          	cmp al, bl
0049++ 299C C6 A3 29    	je _strchr_end
0050++ 299F 79          	inc d
0051++ 29A0 0A 95 29    	jmp _strchr_L0
0052++ 29A3             _strchr_end:
0053++ 29A3 1B          	mov al, bl
0054++ 29A4 09          	ret
0055++ 29A5             
0056++ 29A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 29A5             ; _strstr
0058++ 29A5             ; find sub-string
0059++ 29A5             ; str1 in SI
0060++ 29A5             ; str2 in DI
0061++ 29A5             ; SI points to end of source string
0062++ 29A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 29A5             _strstr:
0064++ 29A5 DB          	push al
0065++ 29A6 DA          	push d
0066++ 29A7 E3          	push di
0067++ 29A8             _strstr_loop:
0068++ 29A8 F3          	cmpsb					; compare a byte of the strings
0069++ 29A9 C7 B4 29    	jne _strstr_ret
0070++ 29AC FC 00 00    	lea d, [di + 0]
0071++ 29AF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 29B1 C7 A8 29    	jne _strstr_loop				; equal chars but not at end
0073++ 29B4             _strstr_ret:
0074++ 29B4 F0          	pop di
0075++ 29B5 E7          	pop d
0076++ 29B6 E8          	pop al
0077++ 29B7 09          	ret
0078++ 29B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 29B8             ; length of null terminated string
0080++ 29B8             ; result in C
0081++ 29B8             ; pointer in D
0082++ 29B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 29B8             _strlen:
0084++ 29B8 DA          	push d
0085++ 29B9 38 00 00    	mov c, 0
0086++ 29BC             _strlen_L1:
0087++ 29BC BD 00       	cmp byte [d], 0
0088++ 29BE C6 C6 29    	je _strlen_ret
0089++ 29C1 79          	inc d
0090++ 29C2 78          	inc c
0091++ 29C3 0A BC 29    	jmp _strlen_L1
0092++ 29C6             _strlen_ret:
0093++ 29C6 E7          	pop d
0094++ 29C7 09          	ret
0095++ 29C8             
0096++ 29C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 29C8             ; STRCMP
0098++ 29C8             ; compare two strings
0099++ 29C8             ; str1 in SI
0100++ 29C8             ; str2 in DI
0101++ 29C8             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 29C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 29C8             _strcmp:
0104++ 29C8 DB          	push al
0105++ 29C9 DA          	push d
0106++ 29CA E3          	push di
0107++ 29CB E2          	push si
0108++ 29CC             _strcmp_loop:
0109++ 29CC F3          	cmpsb					; compare a byte of the strings
0110++ 29CD C7 D8 29    	jne _strcmp_ret
0111++ 29D0 FB FF FF    	lea d, [si +- 1]
0112++ 29D3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 29D5 C7 CC 29    	jne _strcmp_loop				; equal chars but not at end
0114++ 29D8             _strcmp_ret:
0115++ 29D8 EF          	pop si
0116++ 29D9 F0          	pop di
0117++ 29DA E7          	pop d
0118++ 29DB E8          	pop al
0119++ 29DC 09          	ret
0120++ 29DD             
0121++ 29DD             
0122++ 29DD             ; STRCPY
0123++ 29DD             ; copy null terminated string from SI to DI
0124++ 29DD             ; source in SI
0125++ 29DD             ; destination in DI
0126++ 29DD             _strcpy:
0127++ 29DD E2          	push si
0128++ 29DE E3          	push di
0129++ 29DF DB          	push al
0130++ 29E0             _strcpy_L1:
0131++ 29E0 F6          	lodsb
0132++ 29E1 F7          	stosb
0133++ 29E2 B9 00       	cmp al, 0
0134++ 29E4 C7 E0 29    	jne _strcpy_L1
0135++ 29E7             _strcpy_end:
0136++ 29E7 E8          	pop al
0137++ 29E8 F0          	pop di
0138++ 29E9 EF          	pop si
0139++ 29EA 09          	ret
0140++ 29EB             
0141++ 29EB             ; STRCAT
0142++ 29EB             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 29EB             ; source in SI
0144++ 29EB             ; destination in DI
0145++ 29EB             _strcat:
0146++ 29EB E2          	push si
0147++ 29EC E3          	push di
0148++ 29ED D7          	push a
0149++ 29EE DA          	push d
0150++ 29EF 50          	mov a, di
0151++ 29F0 3C          	mov d, a
0152++ 29F1             _strcat_goto_end_L1:
0153++ 29F1 BD 00       	cmp byte[d], 0
0154++ 29F3 C6 FA 29    	je _strcat_start
0155++ 29F6 79          	inc d
0156++ 29F7 0A F1 29    	jmp _strcat_goto_end_L1
0157++ 29FA             _strcat_start:
0158++ 29FA FD 50       	mov di, d
0159++ 29FC             _strcat_L1:
0160++ 29FC F6          	lodsb
0161++ 29FD F7          	stosb
0162++ 29FE B9 00       	cmp al, 0
0163++ 2A00 C7 FC 29    	jne _strcat_L1
0164++ 2A03             _strcat_end:
0165++ 2A03 E7          	pop d
0166++ 2A04 E4          	pop a
0167++ 2A05 F0          	pop di
0168++ 2A06 EF          	pop si
0169++ 2A07 09          	ret
0170++ 2A08             
0171++ 2A08             
0005+  2A08             
0006+  2A08             ;-----------------------------------------------------------------------------
0007+  2A08             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  2A08             ; ASCII in BL
0009+  2A08             ; result in AL
0010+  2A08             ; ascii for F = 0100 0110
0011+  2A08             ; ascii for 9 = 0011 1001
0012+  2A08             ;-----------------------------------------------------------------------------
0013+  2A08             hex_ascii_encode:
0014+  2A08 1B            mov al, bl
0015+  2A09 93 40         test al, $40        ; test if letter or number
0016+  2A0B C7 11 2A      jnz hex_letter
0017+  2A0E 87 0F         and al, $0F        ; get number
0018+  2A10 09            ret
0019+  2A11             hex_letter:
0020+  2A11 87 0F         and al, $0F        ; get letter
0021+  2A13 6A 09         add al, 9
0022+  2A15 09            ret
0023+  2A16             
0024+  2A16             ;-----------------------------------------------------------------------------
0025+  2A16             ; ATOI
0026+  2A16             ; 2 letter hex string in B
0027+  2A16             ; 8bit integer returned in AL
0028+  2A16             ;-----------------------------------------------------------------------------
0029+  2A16             _atoi:
0030+  2A16 D8            push b
0031+  2A17 07 08 2A      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  2A1A 30            mov bl, bh
0033+  2A1B DB            push al          ; save a
0034+  2A1C 07 08 2A      call hex_ascii_encode
0035+  2A1F EA            pop bl  
0036+  2A20 FD 9E 04      shl al, 4
0037+  2A23 8C            or al, bl
0038+  2A24 E5            pop b
0039+  2A25 09            ret  
0040+  2A26             
0041+  2A26             
0042+  2A26             ;-----------------------------------------------------------------------------
0043+  2A26             ; ITOA
0044+  2A26             ; 8bit value in BL
0045+  2A26             ; 2 byte ASCII result in A
0046+  2A26             ;-----------------------------------------------------------------------------
0047+  2A26             _itoa:
0048+  2A26 DA            push d
0049+  2A27 D8            push b
0050+  2A28 A7 00         mov bh, 0
0051+  2A2A FD A4 04      shr bl, 4  
0052+  2A2D 74            mov d, b
0053+  2A2E 1F D6 2C      mov al, [d + s_hex_digits]
0054+  2A31 23            mov ah, al
0055+  2A32               
0056+  2A32 E5            pop b
0057+  2A33 D8            push b
0058+  2A34 A7 00         mov bh, 0
0059+  2A36 FD 87 0F      and bl, $0F
0060+  2A39 74            mov d, b
0061+  2A3A 1F D6 2C      mov al, [d + s_hex_digits]
0062+  2A3D E5            pop b
0063+  2A3E E7            pop d
0064+  2A3F 09            ret
0065+  2A40             
0066+  2A40             ;-----------------------------------------------------------------------------
0067+  2A40             ; HEX STRING TO BINARY
0068+  2A40             ; di = destination address
0069+  2A40             ; si = source
0070+  2A40             ;-----------------------------------------------------------------------------
0071+  2A40             _hex_to_int:
0072+  2A40             _hex_to_int_L1:
0073+  2A40 F6            lodsb          ; load from [SI] to AL
0074+  2A41 B9 00         cmp al, 0        ; check if ASCII 0
0075+  2A43 C6 50 2A      jz _hex_to_int_ret
0076+  2A46 36            mov bh, al
0077+  2A47 F6            lodsb
0078+  2A48 2F            mov bl, al
0079+  2A49 07 16 2A      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  2A4C F7            stosb          ; store AL to [DI]
0081+  2A4D 0A 40 2A      jmp _hex_to_int_L1
0082+  2A50             _hex_to_int_ret:
0083+  2A50 09            ret    
0084+  2A51             
0085+  2A51             ;-----------------------------------------------------------------------------
0086+  2A51             ; GETCHAR
0087+  2A51             ; char in ah
0088+  2A51             ;-----------------------------------------------------------------------------
0089+  2A51             getch:
0090+  2A51 DB            push al
0091+  2A52             getch_retry:
0092+  2A52 19 01         mov al, 1
0093+  2A54 05 03         syscall sys_io      ; receive in AH
0094+  2A56 E8            pop al
0095+  2A57 09            ret
0096+  2A58             
0097+  2A58             ;-----------------------------------------------------------------------------
0098+  2A58             ; PUTCHAR
0099+  2A58             ; char in ah
0100+  2A58             ;-----------------------------------------------------------------------------
0101+  2A58             _putchar:
0102+  2A58 D7            push a
0103+  2A59 19 00         mov al, 0
0104+  2A5B 05 03         syscall sys_io      ; char in AH
0105+  2A5D E4            pop a
0106+  2A5E 09            ret
0107+  2A5F             
0108+  2A5F             ;-----------------------------------------------------------------------------
0109+  2A5F             ;; INPUT A STRING
0110+  2A5F             ;; terminates with null
0111+  2A5F             ;; pointer in D
0112+  2A5F             ;-----------------------------------------------------------------------------
0113+  2A5F             _gets:
0114+  2A5F D7            push a
0115+  2A60 DA            push d
0116+  2A61             _gets_loop:
0117+  2A61 19 01         mov al, 1
0118+  2A63 05 03         syscall sys_io      ; receive in AH
0119+  2A65 B9 00         cmp al, 0        ; check error code (AL)
0120+  2A67 C6 61 2A      je _gets_loop      ; if no char received, retry
0121+  2A6A             
0122+  2A6A 76 1B         cmp ah, 27
0123+  2A6C C6 8D 2A      je _gets_ansi_esc
0124+  2A6F 76 0A         cmp ah, $0A        ; LF
0125+  2A71 C6 F8 2A      je _gets_end
0126+  2A74 76 0D         cmp ah, $0D        ; CR
0127+  2A76 C6 F8 2A      je _gets_end
0128+  2A79 76 5C         cmp ah, $5C        ; '\\'
0129+  2A7B C6 B9 2A      je _gets_escape
0130+  2A7E               
0131+  2A7E 76 08         cmp ah, $08      ; check for backspace
0132+  2A80 C6 89 2A      je _gets_backspace
0133+  2A83             
0134+  2A83 1A            mov al, ah
0135+  2A84 3E            mov [d], al
0136+  2A85 79            inc d
0137+  2A86 0A 61 2A      jmp _gets_loop
0138+  2A89             _gets_backspace:
0139+  2A89 7F            dec d
0140+  2A8A 0A 61 2A      jmp _gets_loop
0141+  2A8D             _gets_ansi_esc:
0142+  2A8D 19 01         mov al, 1
0143+  2A8F 05 03         syscall sys_io        ; receive in AH without echo
0144+  2A91 B9 00         cmp al, 0          ; check error code (AL)
0145+  2A93 C6 8D 2A      je _gets_ansi_esc    ; if no char received, retry
0146+  2A96 76 5B         cmp ah, '['
0147+  2A98 C7 61 2A      jne _gets_loop
0148+  2A9B             _gets_ansi_esc_2:
0149+  2A9B 19 01         mov al, 1
0150+  2A9D 05 03         syscall sys_io          ; receive in AH without echo
0151+  2A9F B9 00         cmp al, 0            ; check error code (AL)
0152+  2AA1 C6 9B 2A      je _gets_ansi_esc_2  ; if no char received, retry
0153+  2AA4 76 44         cmp ah, 'D'
0154+  2AA6 C6 B1 2A      je _gets_left_arrow
0155+  2AA9 76 43         cmp ah, 'C'
0156+  2AAB C6 B5 2A      je _gets_right_arrow
0157+  2AAE 0A 61 2A      jmp _gets_loop
0158+  2AB1             _gets_left_arrow:
0159+  2AB1 7F            dec d
0160+  2AB2 0A 61 2A      jmp _gets_loop
0161+  2AB5             _gets_right_arrow:
0162+  2AB5 79            inc d
0163+  2AB6 0A 61 2A      jmp _gets_loop
0164+  2AB9             _gets_escape:
0165+  2AB9 19 01         mov al, 1
0166+  2ABB 05 03         syscall sys_io      ; receive in AH
0167+  2ABD B9 00         cmp al, 0        ; check error code (AL)
0168+  2ABF C6 B9 2A      je _gets_escape      ; if no char received, retry
0169+  2AC2 76 6E         cmp ah, 'n'
0170+  2AC4 C6 E3 2A      je _gets_LF
0171+  2AC7 76 72         cmp ah, 'r'
0172+  2AC9 C6 EA 2A      je _gets_CR
0173+  2ACC 76 30         cmp ah, '0'
0174+  2ACE C6 F1 2A      je _gets_NULL
0175+  2AD1 76 5C         cmp ah, $5C  ; '\'
0176+  2AD3 C6 DC 2A      je _gets_slash
0177+  2AD6 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  2AD7 3E            mov [d], al
0179+  2AD8 79            inc d
0180+  2AD9 0A 61 2A      jmp _gets_loop
0181+  2ADC             _gets_slash:
0182+  2ADC 19 5C         mov al, $5C
0183+  2ADE 3E            mov [d], al
0184+  2ADF 79            inc d
0185+  2AE0 0A 61 2A      jmp _gets_loop
0186+  2AE3             _gets_LF:
0187+  2AE3 19 0A         mov al, $0A
0188+  2AE5 3E            mov [d], al
0189+  2AE6 79            inc d
0190+  2AE7 0A 61 2A      jmp _gets_loop
0191+  2AEA             _gets_CR:
0192+  2AEA 19 0D         mov al, $0D
0193+  2AEC 3E            mov [d], al
0194+  2AED 79            inc d
0195+  2AEE 0A 61 2A      jmp _gets_loop
0196+  2AF1             _gets_NULL:
0197+  2AF1 19 00         mov al, $00
0198+  2AF3 3E            mov [d], al
0199+  2AF4 79            inc d
0200+  2AF5 0A 61 2A      jmp _gets_loop
0201+  2AF8             _gets_end:
0202+  2AF8 19 00         mov al, 0
0203+  2AFA 3E            mov [d], al        ; terminate string
0204+  2AFB E7            pop d
0205+  2AFC E4            pop a
0206+  2AFD 09            ret
0207+  2AFE             
0208+  2AFE             ;-----------------------------------------------------------------------------
0209+  2AFE             ;; INPUT TEXT
0210+  2AFE             ;; terminated with CTRL+D
0211+  2AFE             ;; pointer in D
0212+  2AFE             ;-----------------------------------------------------------------------------
0213+  2AFE             _gettxt:
0214+  2AFE D7            push a
0215+  2AFF DA            push d
0216+  2B00             _gettxt_loop:
0217+  2B00 19 01         mov al, 1
0218+  2B02 05 03         syscall sys_io      ; receive in AH
0219+  2B04 B9 00         cmp al, 0        ; check error code (AL)
0220+  2B06 C6 00 2B      je _gettxt_loop    ; if no char received, retry
0221+  2B09 76 04         cmp ah, 4      ; EOT
0222+  2B0B C6 49 2B      je _gettxt_end
0223+  2B0E 76 08         cmp ah, $08      ; check for backspace
0224+  2B10 C6 45 2B      je _gettxt_backspace
0225+  2B13 76 5C         cmp ah, $5C        ; '\'
0226+  2B15 C6 1E 2B      je _gettxt_escape
0227+  2B18 1A            mov al, ah
0228+  2B19 3E            mov [d], al
0229+  2B1A 79            inc d
0230+  2B1B 0A 00 2B      jmp _gettxt_loop
0231+  2B1E             _gettxt_escape:
0232+  2B1E 19 01         mov al, 1
0233+  2B20 05 03         syscall sys_io      ; receive in AH
0234+  2B22 B9 00         cmp al, 0        ; check error code (AL)
0235+  2B24 C6 1E 2B      je _gettxt_escape    ; if no char received, retry
0236+  2B27 76 6E         cmp ah, 'n'
0237+  2B29 C6 37 2B      je _gettxt_LF
0238+  2B2C 76 72         cmp ah, 'r'
0239+  2B2E C6 3E 2B      je _gettxt_CR
0240+  2B31 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  2B32 3E            mov [d], al
0242+  2B33 79            inc d
0243+  2B34 0A 00 2B      jmp _gettxt_loop
0244+  2B37             _gettxt_LF:
0245+  2B37 19 0A         mov al, $0A
0246+  2B39 3E            mov [d], al
0247+  2B3A 79            inc d
0248+  2B3B 0A 00 2B      jmp _gettxt_loop
0249+  2B3E             _gettxt_CR:
0250+  2B3E 19 0D         mov al, $0D
0251+  2B40 3E            mov [d], al
0252+  2B41 79            inc d
0253+  2B42 0A 00 2B      jmp _gettxt_loop
0254+  2B45             _gettxt_backspace:
0255+  2B45 7F            dec d
0256+  2B46 0A 00 2B      jmp _gettxt_loop
0257+  2B49             _gettxt_end:
0258+  2B49 19 00         mov al, 0
0259+  2B4B 3E            mov [d], al        ; terminate string
0260+  2B4C E7            pop d
0261+  2B4D E4            pop a
0262+  2B4E 09            ret
0263+  2B4F             
0264+  2B4F             ;-----------------------------------------------------------------------------
0265+  2B4F             ; PRINT NEW LINE
0266+  2B4F             ;-----------------------------------------------------------------------------
0267+  2B4F             printnl:
0268+  2B4F D7            push a
0269+  2B50 10 00 0A      mov a, $0A00
0270+  2B53 05 03         syscall sys_io
0271+  2B55 10 00 0D      mov a, $0D00
0272+  2B58 05 03         syscall sys_io
0273+  2B5A E4            pop a
0274+  2B5B 09            ret
0275+  2B5C             
0276+  2B5C             ;-----------------------------------------------------------------------------
0277+  2B5C             ; _strtoint
0278+  2B5C             ; 4 digit hex string number in d
0279+  2B5C             ; integer returned in A
0280+  2B5C             ;-----------------------------------------------------------------------------
0281+  2B5C             _strtointx:
0282+  2B5C D8            push b
0283+  2B5D 32            mov bl, [d]
0284+  2B5E 37            mov bh, bl
0285+  2B5F 33 01 00      mov bl, [d + 1]
0286+  2B62 07 16 2A      call _atoi        ; convert to int in AL
0287+  2B65 23            mov ah, al        ; move to AH
0288+  2B66 33 02 00      mov bl, [d + 2]
0289+  2B69 37            mov bh, bl
0290+  2B6A 33 03 00      mov bl, [d + 3]
0291+  2B6D 07 16 2A      call _atoi        ; convert to int in AL
0292+  2B70 E5            pop b
0293+  2B71 09            ret
0294+  2B72             
0295+  2B72             ;-----------------------------------------------------------------------------
0296+  2B72             ; _strtoint
0297+  2B72             ; 5 digit base10 string number in d
0298+  2B72             ; integer returned in A
0299+  2B72             ;-----------------------------------------------------------------------------
0300+  2B72             _strtoint:
0301+  2B72 E2            push si
0302+  2B73 D8            push b
0303+  2B74 D9            push c
0304+  2B75 DA            push d
0305+  2B76 07 B8 29      call _strlen      ; get string length in C
0306+  2B79 7E            dec c
0307+  2B7A FD 4E         mov si, d
0308+  2B7C 12            mov a, c
0309+  2B7D FD 99         shl a
0310+  2B7F 3B EE 2C      mov d, table_power
0311+  2B82 59            add d, a
0312+  2B83 38 00 00      mov c, 0
0313+  2B86             _strtoint_L0:
0314+  2B86 F6            lodsb      ; load ASCII to al
0315+  2B87 B9 00         cmp al, 0
0316+  2B89 C6 9C 2B      je _strtoint_end
0317+  2B8C 6F 30         sub al, $30    ; make into integer
0318+  2B8E 22 00         mov ah, 0
0319+  2B90 2A            mov b, [d]
0320+  2B91 AC            mul a, b      ; result in B since it fits in 16bits
0321+  2B92 11            mov a, b
0322+  2B93 28            mov b, c
0323+  2B94 54            add a, b
0324+  2B95 39            mov c, a
0325+  2B96 63 02 00      sub d, 2
0326+  2B99 0A 86 2B      jmp _strtoint_L0
0327+  2B9C             _strtoint_end:
0328+  2B9C 12            mov a, c
0329+  2B9D E7            pop d
0330+  2B9E E6            pop c
0331+  2B9F E5            pop b
0332+  2BA0 EF            pop si
0333+  2BA1 09            ret
0334+  2BA2             
0335+  2BA2             ;-----------------------------------------------------------------------------
0336+  2BA2             ; PRINT NULL TERMINATED STRING
0337+  2BA2             ; pointer in D
0338+  2BA2             ;-----------------------------------------------------------------------------
0339+  2BA2             _puts:
0340+  2BA2 D7            push a
0341+  2BA3 DA            push d
0342+  2BA4             _puts_L1:
0343+  2BA4 1E            mov al, [d]
0344+  2BA5 B9 00         cmp al, 0
0345+  2BA7 C6 B3 2B      jz _puts_END
0346+  2BAA 23            mov ah, al
0347+  2BAB 19 00         mov al, 0
0348+  2BAD 05 03         syscall sys_io
0349+  2BAF 79            inc d
0350+  2BB0 0A A4 2B      jmp _puts_L1
0351+  2BB3             _puts_END:
0352+  2BB3 E7            pop d
0353+  2BB4 E4            pop a
0354+  2BB5 09            ret
0355+  2BB6             
0356+  2BB6             ;-----------------------------------------------------------------------------
0357+  2BB6             ; PRINT N SIZE STRING
0358+  2BB6             ; pointer in D
0359+  2BB6             ; size in C
0360+  2BB6             ;-----------------------------------------------------------------------------
0361+  2BB6             _putsn:
0362+  2BB6 DB            push al
0363+  2BB7 DA            push d
0364+  2BB8 D9            push c
0365+  2BB9             _putsn_L0:
0366+  2BB9 1E            mov al, [d]
0367+  2BBA 23            mov ah, al
0368+  2BBB 19 00         mov al, 0
0369+  2BBD 05 03         syscall sys_io
0370+  2BBF 79            inc d
0371+  2BC0 7E            dec c  
0372+  2BC1 C2 00 00      cmp c, 0
0373+  2BC4 C7 B9 2B      jne _putsn_L0
0374+  2BC7             _putsn_end:
0375+  2BC7 E6            pop c
0376+  2BC8 E7            pop d
0377+  2BC9 E8            pop al
0378+  2BCA 09            ret
0379+  2BCB             
0380+  2BCB             ;-----------------------------------------------------------------------------
0381+  2BCB             ; print 16bit decimal number
0382+  2BCB             ; input number in A
0383+  2BCB             ;-----------------------------------------------------------------------------
0384+  2BCB             print_u16d:
0385+  2BCB D7            push a
0386+  2BCC D8            push b
0387+  2BCD 26 10 27      mov b, 10000
0388+  2BD0 AE            div a, b      ; get 10000's coeff.
0389+  2BD1 07 F3 2B      call print_number
0390+  2BD4 11            mov a, b
0391+  2BD5 26 E8 03      mov b, 1000
0392+  2BD8 AE            div a, b      ; get 1000's coeff.
0393+  2BD9 07 F3 2B      call print_number
0394+  2BDC 11            mov a, b
0395+  2BDD 26 64 00      mov b, 100
0396+  2BE0 AE            div a, b
0397+  2BE1 07 F3 2B      call print_number
0398+  2BE4 11            mov a, b
0399+  2BE5 26 0A 00      mov b, 10
0400+  2BE8 AE            div a, b
0401+  2BE9 07 F3 2B      call print_number
0402+  2BEC 1B            mov al, bl      ; 1's coeff in bl
0403+  2BED 07 F3 2B      call print_number
0404+  2BF0 E5            pop b
0405+  2BF1 E4            pop a
0406+  2BF2 09            ret
0407+  2BF3             
0408+  2BF3             ;-----------------------------------------------------------------------------
0409+  2BF3             ; print AL
0410+  2BF3             ;-----------------------------------------------------------------------------
0411+  2BF3             print_number:
0412+  2BF3 6A 30         add al, $30
0413+  2BF5 23            mov ah, al
0414+  2BF6 07 58 2A      call _putchar
0415+  2BF9 09            ret
0416+  2BFA             
0417+  2BFA             ;-----------------------------------------------------------------------------
0418+  2BFA             ; PRINT 16BIT HEX INTEGER
0419+  2BFA             ; integer value in reg B
0420+  2BFA             ;-----------------------------------------------------------------------------
0421+  2BFA             print_u16x:
0422+  2BFA D7            push a
0423+  2BFB D8            push b
0424+  2BFC DD            push bl
0425+  2BFD 30            mov bl, bh
0426+  2BFE 07 26 2A      call _itoa        ; convert bh to char in A
0427+  2C01 2F            mov bl, al        ; save al
0428+  2C02 19 00         mov al, 0
0429+  2C04 05 03         syscall sys_io        ; display AH
0430+  2C06 24            mov ah, bl        ; retrieve al
0431+  2C07 19 00         mov al, 0
0432+  2C09 05 03         syscall sys_io        ; display AL
0433+  2C0B             
0434+  2C0B EA            pop bl
0435+  2C0C 07 26 2A      call _itoa        ; convert bh to char in A
0436+  2C0F 2F            mov bl, al        ; save al
0437+  2C10 19 00         mov al, 0
0438+  2C12 05 03         syscall sys_io        ; display AH
0439+  2C14 24            mov ah, bl        ; retrieve al
0440+  2C15 19 00         mov al, 0
0441+  2C17 05 03         syscall sys_io        ; display AL
0442+  2C19             
0443+  2C19 E5            pop b
0444+  2C1A E4            pop a
0445+  2C1B 09            ret
0446+  2C1C             
0447+  2C1C             ;-----------------------------------------------------------------------------
0448+  2C1C             ; INPUT 16BIT HEX INTEGER
0449+  2C1C             ; read 16bit integer into A
0450+  2C1C             ;-----------------------------------------------------------------------------
0451+  2C1C             scan_u16x:
0452+  2C1C F8 10 00      enter 16
0453+  2C1F D8            push b
0454+  2C20 DA            push d
0455+  2C21             
0456+  2C21 FA F1 FF      lea d, [bp + -15]
0457+  2C24 07 5F 2A      call _gets        ; get number
0458+  2C27             
0459+  2C27 32            mov bl, [d]
0460+  2C28 37            mov bh, bl
0461+  2C29 33 01 00      mov bl, [d + 1]
0462+  2C2C 07 16 2A      call _atoi        ; convert to int in AL
0463+  2C2F 23            mov ah, al        ; move to AH
0464+  2C30             
0465+  2C30 33 02 00      mov bl, [d + 2]
0466+  2C33 37            mov bh, bl
0467+  2C34 33 03 00      mov bl, [d + 3]
0468+  2C37 07 16 2A      call _atoi        ; convert to int in AL
0469+  2C3A             
0470+  2C3A E7            pop d
0471+  2C3B E5            pop b
0472+  2C3C F9            leave
0473+  2C3D 09            ret
0474+  2C3E             
0475+  2C3E             ;-----------------------------------------------------------------------------
0476+  2C3E             ; PRINT 8bit HEX INTEGER
0477+  2C3E             ; integer value in reg bl
0478+  2C3E             ;-----------------------------------------------------------------------------
0479+  2C3E             print_u8x:
0480+  2C3E D7            push a
0481+  2C3F DD            push bl
0482+  2C40             
0483+  2C40 07 26 2A      call _itoa        ; convert bl to char in A
0484+  2C43 2F            mov bl, al        ; save al
0485+  2C44 19 00         mov al, 0
0486+  2C46 05 03         syscall sys_io        ; display AH
0487+  2C48 24            mov ah, bl        ; retrieve al
0488+  2C49 19 00         mov al, 0
0489+  2C4B 05 03         syscall sys_io        ; display AL
0490+  2C4D             
0491+  2C4D EA            pop bl
0492+  2C4E E4            pop a
0493+  2C4F 09            ret
0494+  2C50             
0495+  2C50             ;-----------------------------------------------------------------------------
0496+  2C50             ; print 8bit decimal unsigned number
0497+  2C50             ; input number in AL
0498+  2C50             ;-----------------------------------------------------------------------------
0499+  2C50             print_u8d:
0500+  2C50 D7            push a
0501+  2C51 D8            push b
0502+  2C52             
0503+  2C52 22 00         mov ah, 0
0504+  2C54 26 64 00      mov b, 100
0505+  2C57 AE            div a, b
0506+  2C58 D8            push b      ; save remainder
0507+  2C59 B9 00         cmp al, 0
0508+  2C5B C6 65 2C      je skip100
0509+  2C5E 6A 30         add al, $30
0510+  2C60 23            mov ah, al
0511+  2C61 19 00         mov al, 0
0512+  2C63 05 03         syscall sys_io  ; print coeff
0513+  2C65             skip100:
0514+  2C65 E4            pop a
0515+  2C66 22 00         mov ah, 0
0516+  2C68 26 0A 00      mov b, 10
0517+  2C6B AE            div a, b
0518+  2C6C D8            push b      ; save remainder
0519+  2C6D B9 00         cmp al, 0
0520+  2C6F C6 79 2C      je skip10
0521+  2C72 6A 30         add al, $30
0522+  2C74 23            mov ah, al
0523+  2C75 19 00         mov al, 0
0524+  2C77 05 03         syscall sys_io  ; print coeff
0525+  2C79             skip10:
0526+  2C79 E4            pop a
0527+  2C7A 1B            mov al, bl
0528+  2C7B 6A 30         add al, $30
0529+  2C7D 23            mov ah, al
0530+  2C7E 19 00         mov al, 0
0531+  2C80 05 03         syscall sys_io  ; print coeff
0532+  2C82 E5            pop b
0533+  2C83 E4            pop a
0534+  2C84 09            ret
0535+  2C85             
0536+  2C85             ;-----------------------------------------------------------------------------
0537+  2C85             ; INPUT 8BIT HEX INTEGER
0538+  2C85             ; read 8bit integer into AL
0539+  2C85             ;-----------------------------------------------------------------------------
0540+  2C85             scan_u8x:
0541+  2C85 F8 04 00      enter 4
0542+  2C88 D8            push b
0543+  2C89 DA            push d
0544+  2C8A             
0545+  2C8A FA FD FF      lea d, [bp + -3]
0546+  2C8D 07 5F 2A      call _gets        ; get number
0547+  2C90             
0548+  2C90 32            mov bl, [d]
0549+  2C91 37            mov bh, bl
0550+  2C92 33 01 00      mov bl, [d + 1]
0551+  2C95 07 16 2A      call _atoi        ; convert to int in AL
0552+  2C98             
0553+  2C98 E7            pop d
0554+  2C99 E5            pop b
0555+  2C9A F9            leave
0556+  2C9B 09            ret
0557+  2C9C             
0558+  2C9C             ;-----------------------------------------------------------------------------
0559+  2C9C             ; input decimal number
0560+  2C9C             ; result in A
0561+  2C9C             ; 655'\0'
0562+  2C9C             ; low--------high
0563+  2C9C             ;-----------------------------------------------------------------------------
0564+  2C9C             scan_u16d:
0565+  2C9C F8 08 00      enter 8
0566+  2C9F E2            push si
0567+  2CA0 D8            push b
0568+  2CA1 D9            push c
0569+  2CA2 DA            push d
0570+  2CA3 FA F9 FF      lea d, [bp +- 7]
0571+  2CA6 07 5F 2A      call _gets
0572+  2CA9 07 B8 29      call _strlen      ; get string length in C
0573+  2CAC 7E            dec c
0574+  2CAD FD 4E         mov si, d
0575+  2CAF 12            mov a, c
0576+  2CB0 FD 99         shl a
0577+  2CB2 3B EE 2C      mov d, table_power
0578+  2CB5 59            add d, a
0579+  2CB6 38 00 00      mov c, 0
0580+  2CB9             mul_loop:
0581+  2CB9 F6            lodsb      ; load ASCII to al
0582+  2CBA B9 00         cmp al, 0
0583+  2CBC C6 CF 2C      je mul_exit
0584+  2CBF 6F 30         sub al, $30    ; make into integer
0585+  2CC1 22 00         mov ah, 0
0586+  2CC3 2A            mov b, [d]
0587+  2CC4 AC            mul a, b      ; result in B since it fits in 16bits
0588+  2CC5 11            mov a, b
0589+  2CC6 28            mov b, c
0590+  2CC7 54            add a, b
0591+  2CC8 39            mov c, a
0592+  2CC9 63 02 00      sub d, 2
0593+  2CCC 0A B9 2C      jmp mul_loop
0594+  2CCF             mul_exit:
0595+  2CCF 12            mov a, c
0596+  2CD0 E7            pop d
0597+  2CD1 E6            pop c
0598+  2CD2 E5            pop b
0599+  2CD3 EF            pop si
0600+  2CD4 F9            leave
0601+  2CD5 09            ret
0602+  2CD6             
0603+  2CD6 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  2CDA 34 35 36 37 
0603+  2CDE 38 39 41 42 
0603+  2CE2 43 44 45 46 
0604+  2CE6 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  2CEA 1B 5B 48 00 
0605+  2CEE             
0606+  2CEE             table_power:
0607+  2CEE 01 00         .dw 1
0608+  2CF0 0A 00         .dw 10
0609+  2CF2 64 00         .dw 100
0610+  2CF4 E8 03         .dw 1000
0611+  2CF6 10 27         .dw 100005979   2CF8             ; --- END INLINE ASM SEGMENT
5980   2CF8             
5981   2CF8 F9            leave
5982   2CF9 09            ret
5983   2CFA             
5984   2CFA             back:
5985   2CFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
5986   2CFD             ; char *t; 
5987   2CFD 52 02 00      sub sp, 2
5988   2D00             ; t = token; 
5989   2D00 FA FF FF      lea d, [bp + -1] ; $t
5990   2D03 DA            push d
5991   2D04 3B 66 4B      mov d, _token_data ; $token
5992   2D07 2D            mov b, d
5993   2D08 38 00 00      mov c, 0
5994   2D0B E7            pop d
5995   2D0C FD 43         mov [d], b
5996   2D0E             ; while(*t++) prog--; 
5997   2D0E             _while83_cond:
5998   2D0E FA FF FF      lea d, [bp + -1] ; $t
5999   2D11 2A            mov b, [d]
6000   2D12 38 00 00      mov c, 0
6001   2D15 FD 77         inc b
6002   2D17 FA FF FF      lea d, [bp + -1] ; $t
6003   2D1A FD 43         mov [d], b
6004   2D1C FD 7D         dec b
6005   2D1E 74            mov d, b
6006   2D1F 32            mov bl, [d]
6007   2D20 A7 00         mov bh, 0
6008   2D22 38 00 00      mov c, 0
6009   2D25 C0 00 00      cmp b, 0
6010   2D28 C6 3E 2D      je _while83_exit
6011   2D2B             _while83_block:
6012   2D2B             ; prog--; 
6013   2D2B 3B 64 4B      mov d, _prog ; $prog
6014   2D2E 2A            mov b, [d]
6015   2D2F 38 00 00      mov c, 0
6016   2D32 FD 7D         dec b
6017   2D34 3B 64 4B      mov d, _prog ; $prog
6018   2D37 FD 43         mov [d], b
6019   2D39 FD 77         inc b
6020   2D3B 0A 0E 2D      jmp _while83_cond
6021   2D3E             _while83_exit:
6022   2D3E             ; tok = TOK_UNDEF; 
6023   2D3E 3B 60 4B      mov d, _tok ; $tok
6024   2D41 DA            push d
6025   2D42 FD 2E 00 00   mov32 cb, $0 ; enum element: TOK_UNDEF
6025   2D46 00 00 
6026   2D48 E7            pop d
6027   2D49 FD 43         mov [d], b
6028   2D4B             ; toktype = TYPE_UNDEF; 
6029   2D4B 3B 62 4B      mov d, _toktype ; $toktype
6030   2D4E DA            push d
6031   2D4F FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
6031   2D53 00 00 
6032   2D55 E7            pop d
6033   2D56 FD 43         mov [d], b
6034   2D58             ; token[0] = '\0'; 
6035   2D58 3B 66 4B      mov d, _token_data ; $token
6036   2D5B D7            push a
6037   2D5C DA            push d
6038   2D5D FD 2E 00 00   mov32 cb, $00000000
6038   2D61 00 00 
6039   2D63 E7            pop d
6040   2D64 5A            add d, b
6041   2D65 E4            pop a
6042   2D66 DA            push d
6043   2D67 FD 2E 00 00   mov32 cb, $00000000
6043   2D6B 00 00 
6044   2D6D E7            pop d
6045   2D6E FD 3E         mov [d], bl
6046   2D70 F9            leave
6047   2D71 09            ret
6048   2D72             
6049   2D72             get_path:
6050   2D72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6051   2D75             ; char *t; 
6052   2D75 52 02 00      sub sp, 2
6053   2D78             ; *token = '\0'; 
6054   2D78 3B 66 4B      mov d, _token_data ; $token
6055   2D7B 2D            mov b, d
6056   2D7C 38 00 00      mov c, 0
6057   2D7F D8            push b
6058   2D80 FD 2E 00 00   mov32 cb, $00000000
6058   2D84 00 00 
6059   2D86 E7            pop d
6060   2D87 FD 3E         mov [d], bl
6061   2D89             ; t = token; 
6062   2D89 FA FF FF      lea d, [bp + -1] ; $t
6063   2D8C DA            push d
6064   2D8D 3B 66 4B      mov d, _token_data ; $token
6065   2D90 2D            mov b, d
6066   2D91 38 00 00      mov c, 0
6067   2D94 E7            pop d
6068   2D95 FD 43         mov [d], b
6069   2D97             ; while(is_space(*prog)) prog++; 
6070   2D97             _while84_cond:
6071   2D97             ; --- START FUNCTION CALL
6072   2D97 3B 64 4B      mov d, _prog ; $prog
6073   2D9A 2A            mov b, [d]
6074   2D9B 38 00 00      mov c, 0
6075   2D9E 74            mov d, b
6076   2D9F 32            mov bl, [d]
6077   2DA0 A7 00         mov bh, 0
6078   2DA2 38 00 00      mov c, 0
6079   2DA5 DD            push bl
6080   2DA6 07 66 0B      call is_space
6081   2DA9 51 01 00      add sp, 1
6082   2DAC             ; --- END FUNCTION CALL
6083   2DAC C0 00 00      cmp b, 0
6084   2DAF C6 C5 2D      je _while84_exit
6085   2DB2             _while84_block:
6086   2DB2             ; prog++; 
6087   2DB2 3B 64 4B      mov d, _prog ; $prog
6088   2DB5 2A            mov b, [d]
6089   2DB6 38 00 00      mov c, 0
6090   2DB9 FD 77         inc b
6091   2DBB 3B 64 4B      mov d, _prog ; $prog
6092   2DBE FD 43         mov [d], b
6093   2DC0 FD 7D         dec b
6094   2DC2 0A 97 2D      jmp _while84_cond
6095   2DC5             _while84_exit:
6096   2DC5             ; if(*prog == '\0'){ 
6097   2DC5             _if85_cond:
6098   2DC5 3B 64 4B      mov d, _prog ; $prog
6099   2DC8 2A            mov b, [d]
6100   2DC9 38 00 00      mov c, 0
6101   2DCC 74            mov d, b
6102   2DCD 32            mov bl, [d]
6103   2DCE A7 00         mov bh, 0
6104   2DD0 38 00 00      mov c, 0
6105   2DD3             ; --- START RELATIONAL
6106   2DD3 D7            push a
6107   2DD4 11            mov a, b
6108   2DD5 FD 2E 00 00   mov32 cb, $00000000
6108   2DD9 00 00 
6109   2DDB B0            cmp a, b
6110   2DDC FD 71         seq ; ==
6111   2DDE E4            pop a
6112   2DDF             ; --- END RELATIONAL
6113   2DDF C0 00 00      cmp b, 0
6114   2DE2 C6 EA 2D      je _if85_exit
6115   2DE5             _if85_TRUE:
6116   2DE5             ; return; 
6117   2DE5 F9            leave
6118   2DE6 09            ret
6119   2DE7 0A EA 2D      jmp _if85_exit
6120   2DEA             _if85_exit:
6121   2DEA             ; while( 
6122   2DEA             _while86_cond:
6123   2DEA 3B 64 4B      mov d, _prog ; $prog
6124   2DED 2A            mov b, [d]
6125   2DEE 38 00 00      mov c, 0
6126   2DF1 74            mov d, b
6127   2DF2 32            mov bl, [d]
6128   2DF3 A7 00         mov bh, 0
6129   2DF5 38 00 00      mov c, 0
6130   2DF8             ; --- START RELATIONAL
6131   2DF8 D7            push a
6132   2DF9 11            mov a, b
6133   2DFA FD 2E 61 00   mov32 cb, $00000061
6133   2DFE 00 00 
6134   2E00 B0            cmp a, b
6135   2E01 FD 82         sgeu ; >= (unsigned)
6136   2E03 E4            pop a
6137   2E04             ; --- END RELATIONAL
6138   2E04             ; --- START LOGICAL AND
6139   2E04 D7            push a
6140   2E05 11            mov a, b
6141   2E06 3B 64 4B      mov d, _prog ; $prog
6142   2E09 2A            mov b, [d]
6143   2E0A 38 00 00      mov c, 0
6144   2E0D 74            mov d, b
6145   2E0E 32            mov bl, [d]
6146   2E0F A7 00         mov bh, 0
6147   2E11 38 00 00      mov c, 0
6148   2E14             ; --- START RELATIONAL
6149   2E14 D7            push a
6150   2E15 11            mov a, b
6151   2E16 FD 2E 7A 00   mov32 cb, $0000007a
6151   2E1A 00 00 
6152   2E1C B0            cmp a, b
6153   2E1D FD 76         sleu ; <= (unsigned)
6154   2E1F E4            pop a
6155   2E20             ; --- END RELATIONAL
6156   2E20 FD A7         sand a, b
6157   2E22 E4            pop a
6158   2E23             ; --- END LOGICAL AND
6159   2E23             ; --- START LOGICAL OR
6160   2E23 D7            push a
6161   2E24 11            mov a, b
6162   2E25 3B 64 4B      mov d, _prog ; $prog
6163   2E28 2A            mov b, [d]
6164   2E29 38 00 00      mov c, 0
6165   2E2C 74            mov d, b
6166   2E2D 32            mov bl, [d]
6167   2E2E A7 00         mov bh, 0
6168   2E30 38 00 00      mov c, 0
6169   2E33             ; --- START RELATIONAL
6170   2E33 D7            push a
6171   2E34 11            mov a, b
6172   2E35 FD 2E 41 00   mov32 cb, $00000041
6172   2E39 00 00 
6173   2E3B B0            cmp a, b
6174   2E3C FD 82         sgeu ; >= (unsigned)
6175   2E3E E4            pop a
6176   2E3F             ; --- END RELATIONAL
6177   2E3F             ; --- START LOGICAL AND
6178   2E3F D7            push a
6179   2E40 11            mov a, b
6180   2E41 3B 64 4B      mov d, _prog ; $prog
6181   2E44 2A            mov b, [d]
6182   2E45 38 00 00      mov c, 0
6183   2E48 74            mov d, b
6184   2E49 32            mov bl, [d]
6185   2E4A A7 00         mov bh, 0
6186   2E4C 38 00 00      mov c, 0
6187   2E4F             ; --- START RELATIONAL
6188   2E4F D7            push a
6189   2E50 11            mov a, b
6190   2E51 FD 2E 5A 00   mov32 cb, $0000005a
6190   2E55 00 00 
6191   2E57 B0            cmp a, b
6192   2E58 FD 76         sleu ; <= (unsigned)
6193   2E5A E4            pop a
6194   2E5B             ; --- END RELATIONAL
6195   2E5B FD A7         sand a, b
6196   2E5D E4            pop a
6197   2E5E             ; --- END LOGICAL AND
6198   2E5E FD A8         sor a, b ; ||
6199   2E60 11            mov a, b
6200   2E61 3B 64 4B      mov d, _prog ; $prog
6201   2E64 2A            mov b, [d]
6202   2E65 38 00 00      mov c, 0
6203   2E68 74            mov d, b
6204   2E69 32            mov bl, [d]
6205   2E6A A7 00         mov bh, 0
6206   2E6C 38 00 00      mov c, 0
6207   2E6F             ; --- START RELATIONAL
6208   2E6F D7            push a
6209   2E70 11            mov a, b
6210   2E71 FD 2E 30 00   mov32 cb, $00000030
6210   2E75 00 00 
6211   2E77 B0            cmp a, b
6212   2E78 FD 82         sgeu ; >= (unsigned)
6213   2E7A E4            pop a
6214   2E7B             ; --- END RELATIONAL
6215   2E7B             ; --- START LOGICAL AND
6216   2E7B D7            push a
6217   2E7C 11            mov a, b
6218   2E7D 3B 64 4B      mov d, _prog ; $prog
6219   2E80 2A            mov b, [d]
6220   2E81 38 00 00      mov c, 0
6221   2E84 74            mov d, b
6222   2E85 32            mov bl, [d]
6223   2E86 A7 00         mov bh, 0
6224   2E88 38 00 00      mov c, 0
6225   2E8B             ; --- START RELATIONAL
6226   2E8B D7            push a
6227   2E8C 11            mov a, b
6228   2E8D FD 2E 39 00   mov32 cb, $00000039
6228   2E91 00 00 
6229   2E93 B0            cmp a, b
6230   2E94 FD 76         sleu ; <= (unsigned)
6231   2E96 E4            pop a
6232   2E97             ; --- END RELATIONAL
6233   2E97 FD A7         sand a, b
6234   2E99 E4            pop a
6235   2E9A             ; --- END LOGICAL AND
6236   2E9A FD A8         sor a, b ; ||
6237   2E9C 11            mov a, b
6238   2E9D 3B 64 4B      mov d, _prog ; $prog
6239   2EA0 2A            mov b, [d]
6240   2EA1 38 00 00      mov c, 0
6241   2EA4 74            mov d, b
6242   2EA5 32            mov bl, [d]
6243   2EA6 A7 00         mov bh, 0
6244   2EA8 38 00 00      mov c, 0
6245   2EAB             ; --- START RELATIONAL
6246   2EAB D7            push a
6247   2EAC 11            mov a, b
6248   2EAD FD 2E 2F 00   mov32 cb, $0000002f
6248   2EB1 00 00 
6249   2EB3 B0            cmp a, b
6250   2EB4 FD 71         seq ; ==
6251   2EB6 E4            pop a
6252   2EB7             ; --- END RELATIONAL
6253   2EB7 FD A8         sor a, b ; ||
6254   2EB9 11            mov a, b
6255   2EBA 3B 64 4B      mov d, _prog ; $prog
6256   2EBD 2A            mov b, [d]
6257   2EBE 38 00 00      mov c, 0
6258   2EC1 74            mov d, b
6259   2EC2 32            mov bl, [d]
6260   2EC3 A7 00         mov bh, 0
6261   2EC5 38 00 00      mov c, 0
6262   2EC8             ; --- START RELATIONAL
6263   2EC8 D7            push a
6264   2EC9 11            mov a, b
6265   2ECA FD 2E 5F 00   mov32 cb, $0000005f
6265   2ECE 00 00 
6266   2ED0 B0            cmp a, b
6267   2ED1 FD 71         seq ; ==
6268   2ED3 E4            pop a
6269   2ED4             ; --- END RELATIONAL
6270   2ED4 FD A8         sor a, b ; ||
6271   2ED6 11            mov a, b
6272   2ED7 3B 64 4B      mov d, _prog ; $prog
6273   2EDA 2A            mov b, [d]
6274   2EDB 38 00 00      mov c, 0
6275   2EDE 74            mov d, b
6276   2EDF 32            mov bl, [d]
6277   2EE0 A7 00         mov bh, 0
6278   2EE2 38 00 00      mov c, 0
6279   2EE5             ; --- START RELATIONAL
6280   2EE5 D7            push a
6281   2EE6 11            mov a, b
6282   2EE7 FD 2E 2D 00   mov32 cb, $0000002d
6282   2EEB 00 00 
6283   2EED B0            cmp a, b
6284   2EEE FD 71         seq ; ==
6285   2EF0 E4            pop a
6286   2EF1             ; --- END RELATIONAL
6287   2EF1 FD A8         sor a, b ; ||
6288   2EF3 11            mov a, b
6289   2EF4 3B 64 4B      mov d, _prog ; $prog
6290   2EF7 2A            mov b, [d]
6291   2EF8 38 00 00      mov c, 0
6292   2EFB 74            mov d, b
6293   2EFC 32            mov bl, [d]
6294   2EFD A7 00         mov bh, 0
6295   2EFF 38 00 00      mov c, 0
6296   2F02             ; --- START RELATIONAL
6297   2F02 D7            push a
6298   2F03 11            mov a, b
6299   2F04 FD 2E 2E 00   mov32 cb, $0000002e
6299   2F08 00 00 
6300   2F0A B0            cmp a, b
6301   2F0B FD 71         seq ; ==
6302   2F0D E4            pop a
6303   2F0E             ; --- END RELATIONAL
6304   2F0E FD A8         sor a, b ; ||
6305   2F10 E4            pop a
6306   2F11             ; --- END LOGICAL OR
6307   2F11 C0 00 00      cmp b, 0
6308   2F14 C6 45 2F      je _while86_exit
6309   2F17             _while86_block:
6310   2F17             ; *t++ = *prog++; 
6311   2F17 FA FF FF      lea d, [bp + -1] ; $t
6312   2F1A 2A            mov b, [d]
6313   2F1B 38 00 00      mov c, 0
6314   2F1E FD 77         inc b
6315   2F20 FA FF FF      lea d, [bp + -1] ; $t
6316   2F23 FD 43         mov [d], b
6317   2F25 FD 7D         dec b
6318   2F27 D8            push b
6319   2F28 3B 64 4B      mov d, _prog ; $prog
6320   2F2B 2A            mov b, [d]
6321   2F2C 38 00 00      mov c, 0
6322   2F2F FD 77         inc b
6323   2F31 3B 64 4B      mov d, _prog ; $prog
6324   2F34 FD 43         mov [d], b
6325   2F36 FD 7D         dec b
6326   2F38 74            mov d, b
6327   2F39 32            mov bl, [d]
6328   2F3A A7 00         mov bh, 0
6329   2F3C 38 00 00      mov c, 0
6330   2F3F E7            pop d
6331   2F40 FD 3E         mov [d], bl
6332   2F42 0A EA 2D      jmp _while86_cond
6333   2F45             _while86_exit:
6334   2F45             ; *t = '\0'; 
6335   2F45 FA FF FF      lea d, [bp + -1] ; $t
6336   2F48 2A            mov b, [d]
6337   2F49 38 00 00      mov c, 0
6338   2F4C D8            push b
6339   2F4D FD 2E 00 00   mov32 cb, $00000000
6339   2F51 00 00 
6340   2F53 E7            pop d
6341   2F54 FD 3E         mov [d], bl
6342   2F56 F9            leave
6343   2F57 09            ret
6344   2F58             
6345   2F58             get:
6346   2F58 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6347   2F5B             ; char *t; 
6348   2F5B 52 02 00      sub sp, 2
6349   2F5E             ; *token = '\0'; 
6350   2F5E 3B 66 4B      mov d, _token_data ; $token
6351   2F61 2D            mov b, d
6352   2F62 38 00 00      mov c, 0
6353   2F65 D8            push b
6354   2F66 FD 2E 00 00   mov32 cb, $00000000
6354   2F6A 00 00 
6355   2F6C E7            pop d
6356   2F6D FD 3E         mov [d], bl
6357   2F6F             ; tok = 0; 
6358   2F6F 3B 60 4B      mov d, _tok ; $tok
6359   2F72 DA            push d
6360   2F73 FD 2E 00 00   mov32 cb, $00000000
6360   2F77 00 00 
6361   2F79 E7            pop d
6362   2F7A FD 43         mov [d], b
6363   2F7C             ; toktype = 0; 
6364   2F7C 3B 62 4B      mov d, _toktype ; $toktype
6365   2F7F DA            push d
6366   2F80 FD 2E 00 00   mov32 cb, $00000000
6366   2F84 00 00 
6367   2F86 E7            pop d
6368   2F87 FD 43         mov [d], b
6369   2F89             ; t = token; 
6370   2F89 FA FF FF      lea d, [bp + -1] ; $t
6371   2F8C DA            push d
6372   2F8D 3B 66 4B      mov d, _token_data ; $token
6373   2F90 2D            mov b, d
6374   2F91 38 00 00      mov c, 0
6375   2F94 E7            pop d
6376   2F95 FD 43         mov [d], b
6377   2F97             ; while(is_space(*prog)) prog++; 
6378   2F97             _while87_cond:
6379   2F97             ; --- START FUNCTION CALL
6380   2F97 3B 64 4B      mov d, _prog ; $prog
6381   2F9A 2A            mov b, [d]
6382   2F9B 38 00 00      mov c, 0
6383   2F9E 74            mov d, b
6384   2F9F 32            mov bl, [d]
6385   2FA0 A7 00         mov bh, 0
6386   2FA2 38 00 00      mov c, 0
6387   2FA5 DD            push bl
6388   2FA6 07 66 0B      call is_space
6389   2FA9 51 01 00      add sp, 1
6390   2FAC             ; --- END FUNCTION CALL
6391   2FAC C0 00 00      cmp b, 0
6392   2FAF C6 C5 2F      je _while87_exit
6393   2FB2             _while87_block:
6394   2FB2             ; prog++; 
6395   2FB2 3B 64 4B      mov d, _prog ; $prog
6396   2FB5 2A            mov b, [d]
6397   2FB6 38 00 00      mov c, 0
6398   2FB9 FD 77         inc b
6399   2FBB 3B 64 4B      mov d, _prog ; $prog
6400   2FBE FD 43         mov [d], b
6401   2FC0 FD 7D         dec b
6402   2FC2 0A 97 2F      jmp _while87_cond
6403   2FC5             _while87_exit:
6404   2FC5             ; if(*prog == '\0'){ 
6405   2FC5             _if88_cond:
6406   2FC5 3B 64 4B      mov d, _prog ; $prog
6407   2FC8 2A            mov b, [d]
6408   2FC9 38 00 00      mov c, 0
6409   2FCC 74            mov d, b
6410   2FCD 32            mov bl, [d]
6411   2FCE A7 00         mov bh, 0
6412   2FD0 38 00 00      mov c, 0
6413   2FD3             ; --- START RELATIONAL
6414   2FD3 D7            push a
6415   2FD4 11            mov a, b
6416   2FD5 FD 2E 00 00   mov32 cb, $00000000
6416   2FD9 00 00 
6417   2FDB B0            cmp a, b
6418   2FDC FD 71         seq ; ==
6419   2FDE E4            pop a
6420   2FDF             ; --- END RELATIONAL
6421   2FDF C0 00 00      cmp b, 0
6422   2FE2 C6 F7 2F      je _if88_exit
6423   2FE5             _if88_TRUE:
6424   2FE5             ; toktype = END; 
6425   2FE5 3B 62 4B      mov d, _toktype ; $toktype
6426   2FE8 DA            push d
6427   2FE9 FD 2E 06 00   mov32 cb, $6 ; enum element: END
6427   2FED 00 00 
6428   2FEF E7            pop d
6429   2FF0 FD 43         mov [d], b
6430   2FF2             ; return; 
6431   2FF2 F9            leave
6432   2FF3 09            ret
6433   2FF4 0A F7 2F      jmp _if88_exit
6434   2FF7             _if88_exit:
6435   2FF7             ; if(is_digit(*prog)){ 
6436   2FF7             _if89_cond:
6437   2FF7             ; --- START FUNCTION CALL
6438   2FF7 3B 64 4B      mov d, _prog ; $prog
6439   2FFA 2A            mov b, [d]
6440   2FFB 38 00 00      mov c, 0
6441   2FFE 74            mov d, b
6442   2FFF 32            mov bl, [d]
6443   3000 A7 00         mov bh, 0
6444   3002 38 00 00      mov c, 0
6445   3005 DD            push bl
6446   3006 07 CA 0B      call is_digit
6447   3009 51 01 00      add sp, 1
6448   300C             ; --- END FUNCTION CALL
6449   300C C0 00 00      cmp b, 0
6450   300F C6 7E 30      je _if89_else
6451   3012             _if89_TRUE:
6452   3012             ; while(is_digit(*prog)){ 
6453   3012             _while90_cond:
6454   3012             ; --- START FUNCTION CALL
6455   3012 3B 64 4B      mov d, _prog ; $prog
6456   3015 2A            mov b, [d]
6457   3016 38 00 00      mov c, 0
6458   3019 74            mov d, b
6459   301A 32            mov bl, [d]
6460   301B A7 00         mov bh, 0
6461   301D 38 00 00      mov c, 0
6462   3020 DD            push bl
6463   3021 07 CA 0B      call is_digit
6464   3024 51 01 00      add sp, 1
6465   3027             ; --- END FUNCTION CALL
6466   3027 C0 00 00      cmp b, 0
6467   302A C6 5B 30      je _while90_exit
6468   302D             _while90_block:
6469   302D             ; *t++ = *prog++; 
6470   302D FA FF FF      lea d, [bp + -1] ; $t
6471   3030 2A            mov b, [d]
6472   3031 38 00 00      mov c, 0
6473   3034 FD 77         inc b
6474   3036 FA FF FF      lea d, [bp + -1] ; $t
6475   3039 FD 43         mov [d], b
6476   303B FD 7D         dec b
6477   303D D8            push b
6478   303E 3B 64 4B      mov d, _prog ; $prog
6479   3041 2A            mov b, [d]
6480   3042 38 00 00      mov c, 0
6481   3045 FD 77         inc b
6482   3047 3B 64 4B      mov d, _prog ; $prog
6483   304A FD 43         mov [d], b
6484   304C FD 7D         dec b
6485   304E 74            mov d, b
6486   304F 32            mov bl, [d]
6487   3050 A7 00         mov bh, 0
6488   3052 38 00 00      mov c, 0
6489   3055 E7            pop d
6490   3056 FD 3E         mov [d], bl
6491   3058 0A 12 30      jmp _while90_cond
6492   305B             _while90_exit:
6493   305B             ; *t = '\0'; 
6494   305B FA FF FF      lea d, [bp + -1] ; $t
6495   305E 2A            mov b, [d]
6496   305F 38 00 00      mov c, 0
6497   3062 D8            push b
6498   3063 FD 2E 00 00   mov32 cb, $00000000
6498   3067 00 00 
6499   3069 E7            pop d
6500   306A FD 3E         mov [d], bl
6501   306C             ; toktype = INTEGER_CONST; 
6502   306C 3B 62 4B      mov d, _toktype ; $toktype
6503   306F DA            push d
6504   3070 FD 2E 04 00   mov32 cb, $4 ; enum element: INTEGER_CONST
6504   3074 00 00 
6505   3076 E7            pop d
6506   3077 FD 43         mov [d], b
6507   3079             ; return; // return to avoid *t = '\0' line at the end of function 
6508   3079 F9            leave
6509   307A 09            ret
6510   307B 0A 63 40      jmp _if89_exit
6511   307E             _if89_else:
6512   307E             ; if(is_alpha(*prog)){ 
6513   307E             _if91_cond:
6514   307E             ; --- START FUNCTION CALL
6515   307E 3B 64 4B      mov d, _prog ; $prog
6516   3081 2A            mov b, [d]
6517   3082 38 00 00      mov c, 0
6518   3085 74            mov d, b
6519   3086 32            mov bl, [d]
6520   3087 A7 00         mov bh, 0
6521   3089 38 00 00      mov c, 0
6522   308C DD            push bl
6523   308D 07 FE 0B      call is_alpha
6524   3090 51 01 00      add sp, 1
6525   3093             ; --- END FUNCTION CALL
6526   3093 C0 00 00      cmp b, 0
6527   3096 C6 1D 31      je _if91_else
6528   3099             _if91_TRUE:
6529   3099             ; while(is_alpha(*prog) || is_digit(*prog)){ 
6530   3099             _while92_cond:
6531   3099             ; --- START FUNCTION CALL
6532   3099 3B 64 4B      mov d, _prog ; $prog
6533   309C 2A            mov b, [d]
6534   309D 38 00 00      mov c, 0
6535   30A0 74            mov d, b
6536   30A1 32            mov bl, [d]
6537   30A2 A7 00         mov bh, 0
6538   30A4 38 00 00      mov c, 0
6539   30A7 DD            push bl
6540   30A8 07 FE 0B      call is_alpha
6541   30AB 51 01 00      add sp, 1
6542   30AE             ; --- END FUNCTION CALL
6543   30AE             ; --- START LOGICAL OR
6544   30AE D7            push a
6545   30AF 11            mov a, b
6546   30B0             ; --- START FUNCTION CALL
6547   30B0 3B 64 4B      mov d, _prog ; $prog
6548   30B3 2A            mov b, [d]
6549   30B4 38 00 00      mov c, 0
6550   30B7 74            mov d, b
6551   30B8 32            mov bl, [d]
6552   30B9 A7 00         mov bh, 0
6553   30BB 38 00 00      mov c, 0
6554   30BE DD            push bl
6555   30BF 07 CA 0B      call is_digit
6556   30C2 51 01 00      add sp, 1
6557   30C5             ; --- END FUNCTION CALL
6558   30C5 FD A8         sor a, b ; ||
6559   30C7 E4            pop a
6560   30C8             ; --- END LOGICAL OR
6561   30C8 C0 00 00      cmp b, 0
6562   30CB C6 FC 30      je _while92_exit
6563   30CE             _while92_block:
6564   30CE             ; *t++ = *prog++; 
6565   30CE FA FF FF      lea d, [bp + -1] ; $t
6566   30D1 2A            mov b, [d]
6567   30D2 38 00 00      mov c, 0
6568   30D5 FD 77         inc b
6569   30D7 FA FF FF      lea d, [bp + -1] ; $t
6570   30DA FD 43         mov [d], b
6571   30DC FD 7D         dec b
6572   30DE D8            push b
6573   30DF 3B 64 4B      mov d, _prog ; $prog
6574   30E2 2A            mov b, [d]
6575   30E3 38 00 00      mov c, 0
6576   30E6 FD 77         inc b
6577   30E8 3B 64 4B      mov d, _prog ; $prog
6578   30EB FD 43         mov [d], b
6579   30ED FD 7D         dec b
6580   30EF 74            mov d, b
6581   30F0 32            mov bl, [d]
6582   30F1 A7 00         mov bh, 0
6583   30F3 38 00 00      mov c, 0
6584   30F6 E7            pop d
6585   30F7 FD 3E         mov [d], bl
6586   30F9 0A 99 30      jmp _while92_cond
6587   30FC             _while92_exit:
6588   30FC             ; *t = '\0'; 
6589   30FC FA FF FF      lea d, [bp + -1] ; $t
6590   30FF 2A            mov b, [d]
6591   3100 38 00 00      mov c, 0
6592   3103 D8            push b
6593   3104 FD 2E 00 00   mov32 cb, $00000000
6593   3108 00 00 
6594   310A E7            pop d
6595   310B FD 3E         mov [d], bl
6596   310D             ; toktype = IDENTIFIER; 
6597   310D 3B 62 4B      mov d, _toktype ; $toktype
6598   3110 DA            push d
6599   3111 FD 2E 05 00   mov32 cb, $5 ; enum element: IDENTIFIER
6599   3115 00 00 
6600   3117 E7            pop d
6601   3118 FD 43         mov [d], b
6602   311A 0A 63 40      jmp _if91_exit
6603   311D             _if91_else:
6604   311D             ; if(*prog == '\"'){ 
6605   311D             _if93_cond:
6606   311D 3B 64 4B      mov d, _prog ; $prog
6607   3120 2A            mov b, [d]
6608   3121 38 00 00      mov c, 0
6609   3124 74            mov d, b
6610   3125 32            mov bl, [d]
6611   3126 A7 00         mov bh, 0
6612   3128 38 00 00      mov c, 0
6613   312B             ; --- START RELATIONAL
6614   312B D7            push a
6615   312C 11            mov a, b
6616   312D FD 2E 22 00   mov32 cb, $00000022
6616   3131 00 00 
6617   3133 B0            cmp a, b
6618   3134 FD 71         seq ; ==
6619   3136 E4            pop a
6620   3137             ; --- END RELATIONAL
6621   3137 C0 00 00      cmp b, 0
6622   313A C6 45 32      je _if93_else
6623   313D             _if93_TRUE:
6624   313D             ; *t++ = '\"'; 
6625   313D FA FF FF      lea d, [bp + -1] ; $t
6626   3140 2A            mov b, [d]
6627   3141 38 00 00      mov c, 0
6628   3144 FD 77         inc b
6629   3146 FA FF FF      lea d, [bp + -1] ; $t
6630   3149 FD 43         mov [d], b
6631   314B FD 7D         dec b
6632   314D D8            push b
6633   314E FD 2E 22 00   mov32 cb, $00000022
6633   3152 00 00 
6634   3154 E7            pop d
6635   3155 FD 3E         mov [d], bl
6636   3157             ; prog++; 
6637   3157 3B 64 4B      mov d, _prog ; $prog
6638   315A 2A            mov b, [d]
6639   315B 38 00 00      mov c, 0
6640   315E FD 77         inc b
6641   3160 3B 64 4B      mov d, _prog ; $prog
6642   3163 FD 43         mov [d], b
6643   3165 FD 7D         dec b
6644   3167             ; while(*prog != '\"' && *prog){ 
6645   3167             _while94_cond:
6646   3167 3B 64 4B      mov d, _prog ; $prog
6647   316A 2A            mov b, [d]
6648   316B 38 00 00      mov c, 0
6649   316E 74            mov d, b
6650   316F 32            mov bl, [d]
6651   3170 A7 00         mov bh, 0
6652   3172 38 00 00      mov c, 0
6653   3175             ; --- START RELATIONAL
6654   3175 D7            push a
6655   3176 11            mov a, b
6656   3177 FD 2E 22 00   mov32 cb, $00000022
6656   317B 00 00 
6657   317D B0            cmp a, b
6658   317E FD 72         sneq ; !=
6659   3180 E4            pop a
6660   3181             ; --- END RELATIONAL
6661   3181             ; --- START LOGICAL AND
6662   3181 D7            push a
6663   3182 11            mov a, b
6664   3183 3B 64 4B      mov d, _prog ; $prog
6665   3186 2A            mov b, [d]
6666   3187 38 00 00      mov c, 0
6667   318A 74            mov d, b
6668   318B 32            mov bl, [d]
6669   318C A7 00         mov bh, 0
6670   318E 38 00 00      mov c, 0
6671   3191 FD A7         sand a, b
6672   3193 E4            pop a
6673   3194             ; --- END LOGICAL AND
6674   3194 C0 00 00      cmp b, 0
6675   3197 C6 C8 31      je _while94_exit
6676   319A             _while94_block:
6677   319A             ; *t++ = *prog++; 
6678   319A FA FF FF      lea d, [bp + -1] ; $t
6679   319D 2A            mov b, [d]
6680   319E 38 00 00      mov c, 0
6681   31A1 FD 77         inc b
6682   31A3 FA FF FF      lea d, [bp + -1] ; $t
6683   31A6 FD 43         mov [d], b
6684   31A8 FD 7D         dec b
6685   31AA D8            push b
6686   31AB 3B 64 4B      mov d, _prog ; $prog
6687   31AE 2A            mov b, [d]
6688   31AF 38 00 00      mov c, 0
6689   31B2 FD 77         inc b
6690   31B4 3B 64 4B      mov d, _prog ; $prog
6691   31B7 FD 43         mov [d], b
6692   31B9 FD 7D         dec b
6693   31BB 74            mov d, b
6694   31BC 32            mov bl, [d]
6695   31BD A7 00         mov bh, 0
6696   31BF 38 00 00      mov c, 0
6697   31C2 E7            pop d
6698   31C3 FD 3E         mov [d], bl
6699   31C5 0A 67 31      jmp _while94_cond
6700   31C8             _while94_exit:
6701   31C8             ; if(*prog != '\"') error("Double quotes expected"); 
6702   31C8             _if95_cond:
6703   31C8 3B 64 4B      mov d, _prog ; $prog
6704   31CB 2A            mov b, [d]
6705   31CC 38 00 00      mov c, 0
6706   31CF 74            mov d, b
6707   31D0 32            mov bl, [d]
6708   31D1 A7 00         mov bh, 0
6709   31D3 38 00 00      mov c, 0
6710   31D6             ; --- START RELATIONAL
6711   31D6 D7            push a
6712   31D7 11            mov a, b
6713   31D8 FD 2E 22 00   mov32 cb, $00000022
6713   31DC 00 00 
6714   31DE B0            cmp a, b
6715   31DF FD 72         sneq ; !=
6716   31E1 E4            pop a
6717   31E2             ; --- END RELATIONAL
6718   31E2 C0 00 00      cmp b, 0
6719   31E5 C6 F7 31      je _if95_exit
6720   31E8             _if95_TRUE:
6721   31E8             ; error("Double quotes expected"); 
6722   31E8             ; --- START FUNCTION CALL
6723   31E8 26 3D 54      mov b, _s13 ; "Double quotes expected"
6724   31EB FD AB         swp b
6725   31ED D8            push b
6726   31EE 07 40 43      call error
6727   31F1 51 02 00      add sp, 2
6728   31F4             ; --- END FUNCTION CALL
6729   31F4 0A F7 31      jmp _if95_exit
6730   31F7             _if95_exit:
6731   31F7             ; *t++ = '\"'; 
6732   31F7 FA FF FF      lea d, [bp + -1] ; $t
6733   31FA 2A            mov b, [d]
6734   31FB 38 00 00      mov c, 0
6735   31FE FD 77         inc b
6736   3200 FA FF FF      lea d, [bp + -1] ; $t
6737   3203 FD 43         mov [d], b
6738   3205 FD 7D         dec b
6739   3207 D8            push b
6740   3208 FD 2E 22 00   mov32 cb, $00000022
6740   320C 00 00 
6741   320E E7            pop d
6742   320F FD 3E         mov [d], bl
6743   3211             ; prog++; 
6744   3211 3B 64 4B      mov d, _prog ; $prog
6745   3214 2A            mov b, [d]
6746   3215 38 00 00      mov c, 0
6747   3218 FD 77         inc b
6748   321A 3B 64 4B      mov d, _prog ; $prog
6749   321D FD 43         mov [d], b
6750   321F FD 7D         dec b
6751   3221             ; toktype = STRING_CONST; 
6752   3221 3B 62 4B      mov d, _toktype ; $toktype
6753   3224 DA            push d
6754   3225 FD 2E 03 00   mov32 cb, $3 ; enum element: STRING_CONST
6754   3229 00 00 
6755   322B E7            pop d
6756   322C FD 43         mov [d], b
6757   322E             ; *t = '\0'; 
6758   322E FA FF FF      lea d, [bp + -1] ; $t
6759   3231 2A            mov b, [d]
6760   3232 38 00 00      mov c, 0
6761   3235 D8            push b
6762   3236 FD 2E 00 00   mov32 cb, $00000000
6762   323A 00 00 
6763   323C E7            pop d
6764   323D FD 3E         mov [d], bl
6765   323F             ; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
6766   323F             ; --- START FUNCTION CALL
6767   323F 07 76 40      call convert_constant
6768   3242 0A 63 40      jmp _if93_exit
6769   3245             _if93_else:
6770   3245             ; if(*prog == '#'){ 
6771   3245             _if96_cond:
6772   3245 3B 64 4B      mov d, _prog ; $prog
6773   3248 2A            mov b, [d]
6774   3249 38 00 00      mov c, 0
6775   324C 74            mov d, b
6776   324D 32            mov bl, [d]
6777   324E A7 00         mov bh, 0
6778   3250 38 00 00      mov c, 0
6779   3253             ; --- START RELATIONAL
6780   3253 D7            push a
6781   3254 11            mov a, b
6782   3255 FD 2E 23 00   mov32 cb, $00000023
6782   3259 00 00 
6783   325B B0            cmp a, b
6784   325C FD 71         seq ; ==
6785   325E E4            pop a
6786   325F             ; --- END RELATIONAL
6787   325F C0 00 00      cmp b, 0
6788   3262 C6 AD 32      je _if96_else
6789   3265             _if96_TRUE:
6790   3265             ; *t++ = *prog++; 
6791   3265 FA FF FF      lea d, [bp + -1] ; $t
6792   3268 2A            mov b, [d]
6793   3269 38 00 00      mov c, 0
6794   326C FD 77         inc b
6795   326E FA FF FF      lea d, [bp + -1] ; $t
6796   3271 FD 43         mov [d], b
6797   3273 FD 7D         dec b
6798   3275 D8            push b
6799   3276 3B 64 4B      mov d, _prog ; $prog
6800   3279 2A            mov b, [d]
6801   327A 38 00 00      mov c, 0
6802   327D FD 77         inc b
6803   327F 3B 64 4B      mov d, _prog ; $prog
6804   3282 FD 43         mov [d], b
6805   3284 FD 7D         dec b
6806   3286 74            mov d, b
6807   3287 32            mov bl, [d]
6808   3288 A7 00         mov bh, 0
6809   328A 38 00 00      mov c, 0
6810   328D E7            pop d
6811   328E FD 3E         mov [d], bl
6812   3290             ; tok = HASH; 
6813   3290 3B 60 4B      mov d, _tok ; $tok
6814   3293 DA            push d
6815   3294 FD 2E 15 00   mov32 cb, $15 ; enum element: HASH
6815   3298 00 00 
6816   329A E7            pop d
6817   329B FD 43         mov [d], b
6818   329D             ; toktype = DELIMITER;   
6819   329D 3B 62 4B      mov d, _toktype ; $toktype
6820   32A0 DA            push d
6821   32A1 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
6821   32A5 00 00 
6822   32A7 E7            pop d
6823   32A8 FD 43         mov [d], b
6824   32AA 0A 63 40      jmp _if96_exit
6825   32AD             _if96_else:
6826   32AD             ; if(*prog == '{'){ 
6827   32AD             _if97_cond:
6828   32AD 3B 64 4B      mov d, _prog ; $prog
6829   32B0 2A            mov b, [d]
6830   32B1 38 00 00      mov c, 0
6831   32B4 74            mov d, b
6832   32B5 32            mov bl, [d]
6833   32B6 A7 00         mov bh, 0
6834   32B8 38 00 00      mov c, 0
6835   32BB             ; --- START RELATIONAL
6836   32BB D7            push a
6837   32BC 11            mov a, b
6838   32BD FD 2E 7B 00   mov32 cb, $0000007b
6838   32C1 00 00 
6839   32C3 B0            cmp a, b
6840   32C4 FD 71         seq ; ==
6841   32C6 E4            pop a
6842   32C7             ; --- END RELATIONAL
6843   32C7 C0 00 00      cmp b, 0
6844   32CA C6 15 33      je _if97_else
6845   32CD             _if97_TRUE:
6846   32CD             ; *t++ = *prog++; 
6847   32CD FA FF FF      lea d, [bp + -1] ; $t
6848   32D0 2A            mov b, [d]
6849   32D1 38 00 00      mov c, 0
6850   32D4 FD 77         inc b
6851   32D6 FA FF FF      lea d, [bp + -1] ; $t
6852   32D9 FD 43         mov [d], b
6853   32DB FD 7D         dec b
6854   32DD D8            push b
6855   32DE 3B 64 4B      mov d, _prog ; $prog
6856   32E1 2A            mov b, [d]
6857   32E2 38 00 00      mov c, 0
6858   32E5 FD 77         inc b
6859   32E7 3B 64 4B      mov d, _prog ; $prog
6860   32EA FD 43         mov [d], b
6861   32EC FD 7D         dec b
6862   32EE 74            mov d, b
6863   32EF 32            mov bl, [d]
6864   32F0 A7 00         mov bh, 0
6865   32F2 38 00 00      mov c, 0
6866   32F5 E7            pop d
6867   32F6 FD 3E         mov [d], bl
6868   32F8             ; tok = OPENING_BRACE; 
6869   32F8 3B 60 4B      mov d, _tok ; $tok
6870   32FB DA            push d
6871   32FC FD 2E 1E 00   mov32 cb, $1e ; enum element: OPENING_BRACE
6871   3300 00 00 
6872   3302 E7            pop d
6873   3303 FD 43         mov [d], b
6874   3305             ; toktype = DELIMITER;   
6875   3305 3B 62 4B      mov d, _toktype ; $toktype
6876   3308 DA            push d
6877   3309 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
6877   330D 00 00 
6878   330F E7            pop d
6879   3310 FD 43         mov [d], b
6880   3312 0A 63 40      jmp _if97_exit
6881   3315             _if97_else:
6882   3315             ; if(*prog == '}'){ 
6883   3315             _if98_cond:
6884   3315 3B 64 4B      mov d, _prog ; $prog
6885   3318 2A            mov b, [d]
6886   3319 38 00 00      mov c, 0
6887   331C 74            mov d, b
6888   331D 32            mov bl, [d]
6889   331E A7 00         mov bh, 0
6890   3320 38 00 00      mov c, 0
6891   3323             ; --- START RELATIONAL
6892   3323 D7            push a
6893   3324 11            mov a, b
6894   3325 FD 2E 7D 00   mov32 cb, $0000007d
6894   3329 00 00 
6895   332B B0            cmp a, b
6896   332C FD 71         seq ; ==
6897   332E E4            pop a
6898   332F             ; --- END RELATIONAL
6899   332F C0 00 00      cmp b, 0
6900   3332 C6 7D 33      je _if98_else
6901   3335             _if98_TRUE:
6902   3335             ; *t++ = *prog++; 
6903   3335 FA FF FF      lea d, [bp + -1] ; $t
6904   3338 2A            mov b, [d]
6905   3339 38 00 00      mov c, 0
6906   333C FD 77         inc b
6907   333E FA FF FF      lea d, [bp + -1] ; $t
6908   3341 FD 43         mov [d], b
6909   3343 FD 7D         dec b
6910   3345 D8            push b
6911   3346 3B 64 4B      mov d, _prog ; $prog
6912   3349 2A            mov b, [d]
6913   334A 38 00 00      mov c, 0
6914   334D FD 77         inc b
6915   334F 3B 64 4B      mov d, _prog ; $prog
6916   3352 FD 43         mov [d], b
6917   3354 FD 7D         dec b
6918   3356 74            mov d, b
6919   3357 32            mov bl, [d]
6920   3358 A7 00         mov bh, 0
6921   335A 38 00 00      mov c, 0
6922   335D E7            pop d
6923   335E FD 3E         mov [d], bl
6924   3360             ; tok = CLOSING_BRACE; 
6925   3360 3B 60 4B      mov d, _tok ; $tok
6926   3363 DA            push d
6927   3364 FD 2E 1F 00   mov32 cb, $1f ; enum element: CLOSING_BRACE
6927   3368 00 00 
6928   336A E7            pop d
6929   336B FD 43         mov [d], b
6930   336D             ; toktype = DELIMITER;   
6931   336D 3B 62 4B      mov d, _toktype ; $toktype
6932   3370 DA            push d
6933   3371 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
6933   3375 00 00 
6934   3377 E7            pop d
6935   3378 FD 43         mov [d], b
6936   337A 0A 63 40      jmp _if98_exit
6937   337D             _if98_else:
6938   337D             ; if(*prog == '['){ 
6939   337D             _if99_cond:
6940   337D 3B 64 4B      mov d, _prog ; $prog
6941   3380 2A            mov b, [d]
6942   3381 38 00 00      mov c, 0
6943   3384 74            mov d, b
6944   3385 32            mov bl, [d]
6945   3386 A7 00         mov bh, 0
6946   3388 38 00 00      mov c, 0
6947   338B             ; --- START RELATIONAL
6948   338B D7            push a
6949   338C 11            mov a, b
6950   338D FD 2E 5B 00   mov32 cb, $0000005b
6950   3391 00 00 
6951   3393 B0            cmp a, b
6952   3394 FD 71         seq ; ==
6953   3396 E4            pop a
6954   3397             ; --- END RELATIONAL
6955   3397 C0 00 00      cmp b, 0
6956   339A C6 E5 33      je _if99_else
6957   339D             _if99_TRUE:
6958   339D             ; *t++ = *prog++; 
6959   339D FA FF FF      lea d, [bp + -1] ; $t
6960   33A0 2A            mov b, [d]
6961   33A1 38 00 00      mov c, 0
6962   33A4 FD 77         inc b
6963   33A6 FA FF FF      lea d, [bp + -1] ; $t
6964   33A9 FD 43         mov [d], b
6965   33AB FD 7D         dec b
6966   33AD D8            push b
6967   33AE 3B 64 4B      mov d, _prog ; $prog
6968   33B1 2A            mov b, [d]
6969   33B2 38 00 00      mov c, 0
6970   33B5 FD 77         inc b
6971   33B7 3B 64 4B      mov d, _prog ; $prog
6972   33BA FD 43         mov [d], b
6973   33BC FD 7D         dec b
6974   33BE 74            mov d, b
6975   33BF 32            mov bl, [d]
6976   33C0 A7 00         mov bh, 0
6977   33C2 38 00 00      mov c, 0
6978   33C5 E7            pop d
6979   33C6 FD 3E         mov [d], bl
6980   33C8             ; tok = OPENING_BRACKET; 
6981   33C8 3B 60 4B      mov d, _tok ; $tok
6982   33CB DA            push d
6983   33CC FD 2E 20 00   mov32 cb, $20 ; enum element: OPENING_BRACKET
6983   33D0 00 00 
6984   33D2 E7            pop d
6985   33D3 FD 43         mov [d], b
6986   33D5             ; toktype = DELIMITER;   
6987   33D5 3B 62 4B      mov d, _toktype ; $toktype
6988   33D8 DA            push d
6989   33D9 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
6989   33DD 00 00 
6990   33DF E7            pop d
6991   33E0 FD 43         mov [d], b
6992   33E2 0A 63 40      jmp _if99_exit
6993   33E5             _if99_else:
6994   33E5             ; if(*prog == ']'){ 
6995   33E5             _if100_cond:
6996   33E5 3B 64 4B      mov d, _prog ; $prog
6997   33E8 2A            mov b, [d]
6998   33E9 38 00 00      mov c, 0
6999   33EC 74            mov d, b
7000   33ED 32            mov bl, [d]
7001   33EE A7 00         mov bh, 0
7002   33F0 38 00 00      mov c, 0
7003   33F3             ; --- START RELATIONAL
7004   33F3 D7            push a
7005   33F4 11            mov a, b
7006   33F5 FD 2E 5D 00   mov32 cb, $0000005d
7006   33F9 00 00 
7007   33FB B0            cmp a, b
7008   33FC FD 71         seq ; ==
7009   33FE E4            pop a
7010   33FF             ; --- END RELATIONAL
7011   33FF C0 00 00      cmp b, 0
7012   3402 C6 4D 34      je _if100_else
7013   3405             _if100_TRUE:
7014   3405             ; *t++ = *prog++; 
7015   3405 FA FF FF      lea d, [bp + -1] ; $t
7016   3408 2A            mov b, [d]
7017   3409 38 00 00      mov c, 0
7018   340C FD 77         inc b
7019   340E FA FF FF      lea d, [bp + -1] ; $t
7020   3411 FD 43         mov [d], b
7021   3413 FD 7D         dec b
7022   3415 D8            push b
7023   3416 3B 64 4B      mov d, _prog ; $prog
7024   3419 2A            mov b, [d]
7025   341A 38 00 00      mov c, 0
7026   341D FD 77         inc b
7027   341F 3B 64 4B      mov d, _prog ; $prog
7028   3422 FD 43         mov [d], b
7029   3424 FD 7D         dec b
7030   3426 74            mov d, b
7031   3427 32            mov bl, [d]
7032   3428 A7 00         mov bh, 0
7033   342A 38 00 00      mov c, 0
7034   342D E7            pop d
7035   342E FD 3E         mov [d], bl
7036   3430             ; tok = CLOSING_BRACKET; 
7037   3430 3B 60 4B      mov d, _tok ; $tok
7038   3433 DA            push d
7039   3434 FD 2E 21 00   mov32 cb, $21 ; enum element: CLOSING_BRACKET
7039   3438 00 00 
7040   343A E7            pop d
7041   343B FD 43         mov [d], b
7042   343D             ; toktype = DELIMITER;   
7043   343D 3B 62 4B      mov d, _toktype ; $toktype
7044   3440 DA            push d
7045   3441 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
7045   3445 00 00 
7046   3447 E7            pop d
7047   3448 FD 43         mov [d], b
7048   344A 0A 63 40      jmp _if100_exit
7049   344D             _if100_else:
7050   344D             ; if(*prog == '='){ 
7051   344D             _if101_cond:
7052   344D 3B 64 4B      mov d, _prog ; $prog
7053   3450 2A            mov b, [d]
7054   3451 38 00 00      mov c, 0
7055   3454 74            mov d, b
7056   3455 32            mov bl, [d]
7057   3456 A7 00         mov bh, 0
7058   3458 38 00 00      mov c, 0
7059   345B             ; --- START RELATIONAL
7060   345B D7            push a
7061   345C 11            mov a, b
7062   345D FD 2E 3D 00   mov32 cb, $0000003d
7062   3461 00 00 
7063   3463 B0            cmp a, b
7064   3464 FD 71         seq ; ==
7065   3466 E4            pop a
7066   3467             ; --- END RELATIONAL
7067   3467 C0 00 00      cmp b, 0
7068   346A C6 10 35      je _if101_else
7069   346D             _if101_TRUE:
7070   346D             ; *t++ = *prog++; 
7071   346D FA FF FF      lea d, [bp + -1] ; $t
7072   3470 2A            mov b, [d]
7073   3471 38 00 00      mov c, 0
7074   3474 FD 77         inc b
7075   3476 FA FF FF      lea d, [bp + -1] ; $t
7076   3479 FD 43         mov [d], b
7077   347B FD 7D         dec b
7078   347D D8            push b
7079   347E 3B 64 4B      mov d, _prog ; $prog
7080   3481 2A            mov b, [d]
7081   3482 38 00 00      mov c, 0
7082   3485 FD 77         inc b
7083   3487 3B 64 4B      mov d, _prog ; $prog
7084   348A FD 43         mov [d], b
7085   348C FD 7D         dec b
7086   348E 74            mov d, b
7087   348F 32            mov bl, [d]
7088   3490 A7 00         mov bh, 0
7089   3492 38 00 00      mov c, 0
7090   3495 E7            pop d
7091   3496 FD 3E         mov [d], bl
7092   3498             ; if (*prog == '='){ 
7093   3498             _if102_cond:
7094   3498 3B 64 4B      mov d, _prog ; $prog
7095   349B 2A            mov b, [d]
7096   349C 38 00 00      mov c, 0
7097   349F 74            mov d, b
7098   34A0 32            mov bl, [d]
7099   34A1 A7 00         mov bh, 0
7100   34A3 38 00 00      mov c, 0
7101   34A6             ; --- START RELATIONAL
7102   34A6 D7            push a
7103   34A7 11            mov a, b
7104   34A8 FD 2E 3D 00   mov32 cb, $0000003d
7104   34AC 00 00 
7105   34AE B0            cmp a, b
7106   34AF FD 71         seq ; ==
7107   34B1 E4            pop a
7108   34B2             ; --- END RELATIONAL
7109   34B2 C0 00 00      cmp b, 0
7110   34B5 C6 F3 34      je _if102_else
7111   34B8             _if102_TRUE:
7112   34B8             ; *t++ = *prog++; 
7113   34B8 FA FF FF      lea d, [bp + -1] ; $t
7114   34BB 2A            mov b, [d]
7115   34BC 38 00 00      mov c, 0
7116   34BF FD 77         inc b
7117   34C1 FA FF FF      lea d, [bp + -1] ; $t
7118   34C4 FD 43         mov [d], b
7119   34C6 FD 7D         dec b
7120   34C8 D8            push b
7121   34C9 3B 64 4B      mov d, _prog ; $prog
7122   34CC 2A            mov b, [d]
7123   34CD 38 00 00      mov c, 0
7124   34D0 FD 77         inc b
7125   34D2 3B 64 4B      mov d, _prog ; $prog
7126   34D5 FD 43         mov [d], b
7127   34D7 FD 7D         dec b
7128   34D9 74            mov d, b
7129   34DA 32            mov bl, [d]
7130   34DB A7 00         mov bh, 0
7131   34DD 38 00 00      mov c, 0
7132   34E0 E7            pop d
7133   34E1 FD 3E         mov [d], bl
7134   34E3             ; tok = EQUAL; 
7135   34E3 3B 60 4B      mov d, _tok ; $tok
7136   34E6 DA            push d
7137   34E7 FD 2E 08 00   mov32 cb, $8 ; enum element: EQUAL
7137   34EB 00 00 
7138   34ED E7            pop d
7139   34EE FD 43         mov [d], b
7140   34F0 0A 00 35      jmp _if102_exit
7141   34F3             _if102_else:
7142   34F3             ; tok = ASSIGNMENT; 
7143   34F3 3B 60 4B      mov d, _tok ; $tok
7144   34F6 DA            push d
7145   34F7 FD 2E 11 00   mov32 cb, $11 ; enum element: ASSIGNMENT
7145   34FB 00 00 
7146   34FD E7            pop d
7147   34FE FD 43         mov [d], b
7148   3500             _if102_exit:
7149   3500             ; toktype = DELIMITER;   
7150   3500 3B 62 4B      mov d, _toktype ; $toktype
7151   3503 DA            push d
7152   3504 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
7152   3508 00 00 
7153   350A E7            pop d
7154   350B FD 43         mov [d], b
7155   350D 0A 63 40      jmp _if101_exit
7156   3510             _if101_else:
7157   3510             ; if(*prog == '&'){ 
7158   3510             _if103_cond:
7159   3510 3B 64 4B      mov d, _prog ; $prog
7160   3513 2A            mov b, [d]
7161   3514 38 00 00      mov c, 0
7162   3517 74            mov d, b
7163   3518 32            mov bl, [d]
7164   3519 A7 00         mov bh, 0
7165   351B 38 00 00      mov c, 0
7166   351E             ; --- START RELATIONAL
7167   351E D7            push a
7168   351F 11            mov a, b
7169   3520 FD 2E 26 00   mov32 cb, $00000026
7169   3524 00 00 
7170   3526 B0            cmp a, b
7171   3527 FD 71         seq ; ==
7172   3529 E4            pop a
7173   352A             ; --- END RELATIONAL
7174   352A C0 00 00      cmp b, 0
7175   352D C6 D3 35      je _if103_else
7176   3530             _if103_TRUE:
7177   3530             ; *t++ = *prog++; 
7178   3530 FA FF FF      lea d, [bp + -1] ; $t
7179   3533 2A            mov b, [d]
7180   3534 38 00 00      mov c, 0
7181   3537 FD 77         inc b
7182   3539 FA FF FF      lea d, [bp + -1] ; $t
7183   353C FD 43         mov [d], b
7184   353E FD 7D         dec b
7185   3540 D8            push b
7186   3541 3B 64 4B      mov d, _prog ; $prog
7187   3544 2A            mov b, [d]
7188   3545 38 00 00      mov c, 0
7189   3548 FD 77         inc b
7190   354A 3B 64 4B      mov d, _prog ; $prog
7191   354D FD 43         mov [d], b
7192   354F FD 7D         dec b
7193   3551 74            mov d, b
7194   3552 32            mov bl, [d]
7195   3553 A7 00         mov bh, 0
7196   3555 38 00 00      mov c, 0
7197   3558 E7            pop d
7198   3559 FD 3E         mov [d], bl
7199   355B             ; if(*prog == '&'){ 
7200   355B             _if104_cond:
7201   355B 3B 64 4B      mov d, _prog ; $prog
7202   355E 2A            mov b, [d]
7203   355F 38 00 00      mov c, 0
7204   3562 74            mov d, b
7205   3563 32            mov bl, [d]
7206   3564 A7 00         mov bh, 0
7207   3566 38 00 00      mov c, 0
7208   3569             ; --- START RELATIONAL
7209   3569 D7            push a
7210   356A 11            mov a, b
7211   356B FD 2E 26 00   mov32 cb, $00000026
7211   356F 00 00 
7212   3571 B0            cmp a, b
7213   3572 FD 71         seq ; ==
7214   3574 E4            pop a
7215   3575             ; --- END RELATIONAL
7216   3575 C0 00 00      cmp b, 0
7217   3578 C6 B6 35      je _if104_else
7218   357B             _if104_TRUE:
7219   357B             ; *t++ = *prog++; 
7220   357B FA FF FF      lea d, [bp + -1] ; $t
7221   357E 2A            mov b, [d]
7222   357F 38 00 00      mov c, 0
7223   3582 FD 77         inc b
7224   3584 FA FF FF      lea d, [bp + -1] ; $t
7225   3587 FD 43         mov [d], b
7226   3589 FD 7D         dec b
7227   358B D8            push b
7228   358C 3B 64 4B      mov d, _prog ; $prog
7229   358F 2A            mov b, [d]
7230   3590 38 00 00      mov c, 0
7231   3593 FD 77         inc b
7232   3595 3B 64 4B      mov d, _prog ; $prog
7233   3598 FD 43         mov [d], b
7234   359A FD 7D         dec b
7235   359C 74            mov d, b
7236   359D 32            mov bl, [d]
7237   359E A7 00         mov bh, 0
7238   35A0 38 00 00      mov c, 0
7239   35A3 E7            pop d
7240   35A4 FD 3E         mov [d], bl
7241   35A6             ; tok = LOGICAL_AND; 
7242   35A6 3B 60 4B      mov d, _tok ; $tok
7243   35A9 DA            push d
7244   35AA FD 2E 0E 00   mov32 cb, $e ; enum element: LOGICAL_AND
7244   35AE 00 00 
7245   35B0 E7            pop d
7246   35B1 FD 43         mov [d], b
7247   35B3 0A C3 35      jmp _if104_exit
7248   35B6             _if104_else:
7249   35B6             ; tok = AMPERSAND; 
7250   35B6 3B 60 4B      mov d, _tok ; $tok
7251   35B9 DA            push d
7252   35BA FD 2E 16 00   mov32 cb, $16 ; enum element: AMPERSAND
7252   35BE 00 00 
7253   35C0 E7            pop d
7254   35C1 FD 43         mov [d], b
7255   35C3             _if104_exit:
7256   35C3             ; toktype = DELIMITER;   
7257   35C3 3B 62 4B      mov d, _toktype ; $toktype
7258   35C6 DA            push d
7259   35C7 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
7259   35CB 00 00 
7260   35CD E7            pop d
7261   35CE FD 43         mov [d], b
7262   35D0 0A 63 40      jmp _if103_exit
7263   35D3             _if103_else:
7264   35D3             ; if(*prog == '|'){ 
7265   35D3             _if105_cond:
7266   35D3 3B 64 4B      mov d, _prog ; $prog
7267   35D6 2A            mov b, [d]
7268   35D7 38 00 00      mov c, 0
7269   35DA 74            mov d, b
7270   35DB 32            mov bl, [d]
7271   35DC A7 00         mov bh, 0
7272   35DE 38 00 00      mov c, 0
7273   35E1             ; --- START RELATIONAL
7274   35E1 D7            push a
7275   35E2 11            mov a, b
7276   35E3 FD 2E 7C 00   mov32 cb, $0000007c
7276   35E7 00 00 
7277   35E9 B0            cmp a, b
7278   35EA FD 71         seq ; ==
7279   35EC E4            pop a
7280   35ED             ; --- END RELATIONAL
7281   35ED C0 00 00      cmp b, 0
7282   35F0 C6 96 36      je _if105_else
7283   35F3             _if105_TRUE:
7284   35F3             ; *t++ = *prog++; 
7285   35F3 FA FF FF      lea d, [bp + -1] ; $t
7286   35F6 2A            mov b, [d]
7287   35F7 38 00 00      mov c, 0
7288   35FA FD 77         inc b
7289   35FC FA FF FF      lea d, [bp + -1] ; $t
7290   35FF FD 43         mov [d], b
7291   3601 FD 7D         dec b
7292   3603 D8            push b
7293   3604 3B 64 4B      mov d, _prog ; $prog
7294   3607 2A            mov b, [d]
7295   3608 38 00 00      mov c, 0
7296   360B FD 77         inc b
7297   360D 3B 64 4B      mov d, _prog ; $prog
7298   3610 FD 43         mov [d], b
7299   3612 FD 7D         dec b
7300   3614 74            mov d, b
7301   3615 32            mov bl, [d]
7302   3616 A7 00         mov bh, 0
7303   3618 38 00 00      mov c, 0
7304   361B E7            pop d
7305   361C FD 3E         mov [d], bl
7306   361E             ; if (*prog == '|'){ 
7307   361E             _if106_cond:
7308   361E 3B 64 4B      mov d, _prog ; $prog
7309   3621 2A            mov b, [d]
7310   3622 38 00 00      mov c, 0
7311   3625 74            mov d, b
7312   3626 32            mov bl, [d]
7313   3627 A7 00         mov bh, 0
7314   3629 38 00 00      mov c, 0
7315   362C             ; --- START RELATIONAL
7316   362C D7            push a
7317   362D 11            mov a, b
7318   362E FD 2E 7C 00   mov32 cb, $0000007c
7318   3632 00 00 
7319   3634 B0            cmp a, b
7320   3635 FD 71         seq ; ==
7321   3637 E4            pop a
7322   3638             ; --- END RELATIONAL
7323   3638 C0 00 00      cmp b, 0
7324   363B C6 79 36      je _if106_else
7325   363E             _if106_TRUE:
7326   363E             ; *t++ = *prog++; 
7327   363E FA FF FF      lea d, [bp + -1] ; $t
7328   3641 2A            mov b, [d]
7329   3642 38 00 00      mov c, 0
7330   3645 FD 77         inc b
7331   3647 FA FF FF      lea d, [bp + -1] ; $t
7332   364A FD 43         mov [d], b
7333   364C FD 7D         dec b
7334   364E D8            push b
7335   364F 3B 64 4B      mov d, _prog ; $prog
7336   3652 2A            mov b, [d]
7337   3653 38 00 00      mov c, 0
7338   3656 FD 77         inc b
7339   3658 3B 64 4B      mov d, _prog ; $prog
7340   365B FD 43         mov [d], b
7341   365D FD 7D         dec b
7342   365F 74            mov d, b
7343   3660 32            mov bl, [d]
7344   3661 A7 00         mov bh, 0
7345   3663 38 00 00      mov c, 0
7346   3666 E7            pop d
7347   3667 FD 3E         mov [d], bl
7348   3669             ; tok = LOGICAL_OR; 
7349   3669 3B 60 4B      mov d, _tok ; $tok
7350   366C DA            push d
7351   366D FD 2E 0F 00   mov32 cb, $f ; enum element: LOGICAL_OR
7351   3671 00 00 
7352   3673 E7            pop d
7353   3674 FD 43         mov [d], b
7354   3676 0A 86 36      jmp _if106_exit
7355   3679             _if106_else:
7356   3679             ; tok = BITWISE_OR; 
7357   3679 3B 60 4B      mov d, _tok ; $tok
7358   367C DA            push d
7359   367D FD 2E 18 00   mov32 cb, $18 ; enum element: BITWISE_OR
7359   3681 00 00 
7360   3683 E7            pop d
7361   3684 FD 43         mov [d], b
7362   3686             _if106_exit:
7363   3686             ; toktype = DELIMITER;   
7364   3686 3B 62 4B      mov d, _toktype ; $toktype
7365   3689 DA            push d
7366   368A FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
7366   368E 00 00 
7367   3690 E7            pop d
7368   3691 FD 43         mov [d], b
7369   3693 0A 63 40      jmp _if105_exit
7370   3696             _if105_else:
7371   3696             ; if(*prog == '~'){ 
7372   3696             _if107_cond:
7373   3696 3B 64 4B      mov d, _prog ; $prog
7374   3699 2A            mov b, [d]
7375   369A 38 00 00      mov c, 0
7376   369D 74            mov d, b
7377   369E 32            mov bl, [d]
7378   369F A7 00         mov bh, 0
7379   36A1 38 00 00      mov c, 0
7380   36A4             ; --- START RELATIONAL
7381   36A4 D7            push a
7382   36A5 11            mov a, b
7383   36A6 FD 2E 7E 00   mov32 cb, $0000007e
7383   36AA 00 00 
7384   36AC B0            cmp a, b
7385   36AD FD 71         seq ; ==
7386   36AF E4            pop a
7387   36B0             ; --- END RELATIONAL
7388   36B0 C0 00 00      cmp b, 0
7389   36B3 C6 FE 36      je _if107_else
7390   36B6             _if107_TRUE:
7391   36B6             ; *t++ = *prog++; 
7392   36B6 FA FF FF      lea d, [bp + -1] ; $t
7393   36B9 2A            mov b, [d]
7394   36BA 38 00 00      mov c, 0
7395   36BD FD 77         inc b
7396   36BF FA FF FF      lea d, [bp + -1] ; $t
7397   36C2 FD 43         mov [d], b
7398   36C4 FD 7D         dec b
7399   36C6 D8            push b
7400   36C7 3B 64 4B      mov d, _prog ; $prog
7401   36CA 2A            mov b, [d]
7402   36CB 38 00 00      mov c, 0
7403   36CE FD 77         inc b
7404   36D0 3B 64 4B      mov d, _prog ; $prog
7405   36D3 FD 43         mov [d], b
7406   36D5 FD 7D         dec b
7407   36D7 74            mov d, b
7408   36D8 32            mov bl, [d]
7409   36D9 A7 00         mov bh, 0
7410   36DB 38 00 00      mov c, 0
7411   36DE E7            pop d
7412   36DF FD 3E         mov [d], bl
7413   36E1             ; tok = BITWISE_NOT; 
7414   36E1 3B 60 4B      mov d, _tok ; $tok
7415   36E4 DA            push d
7416   36E5 FD 2E 19 00   mov32 cb, $19 ; enum element: BITWISE_NOT
7416   36E9 00 00 
7417   36EB E7            pop d
7418   36EC FD 43         mov [d], b
7419   36EE             ; toktype = DELIMITER;   
7420   36EE 3B 62 4B      mov d, _toktype ; $toktype
7421   36F1 DA            push d
7422   36F2 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
7422   36F6 00 00 
7423   36F8 E7            pop d
7424   36F9 FD 43         mov [d], b
7425   36FB 0A 63 40      jmp _if107_exit
7426   36FE             _if107_else:
7427   36FE             ; if(*prog == '<'){ 
7428   36FE             _if108_cond:
7429   36FE 3B 64 4B      mov d, _prog ; $prog
7430   3701 2A            mov b, [d]
7431   3702 38 00 00      mov c, 0
7432   3705 74            mov d, b
7433   3706 32            mov bl, [d]
7434   3707 A7 00         mov bh, 0
7435   3709 38 00 00      mov c, 0
7436   370C             ; --- START RELATIONAL
7437   370C D7            push a
7438   370D 11            mov a, b
7439   370E FD 2E 3C 00   mov32 cb, $0000003c
7439   3712 00 00 
7440   3714 B0            cmp a, b
7441   3715 FD 71         seq ; ==
7442   3717 E4            pop a
7443   3718             ; --- END RELATIONAL
7444   3718 C0 00 00      cmp b, 0
7445   371B C6 1C 38      je _if108_else
7446   371E             _if108_TRUE:
7447   371E             ; *t++ = *prog++; 
7448   371E FA FF FF      lea d, [bp + -1] ; $t
7449   3721 2A            mov b, [d]
7450   3722 38 00 00      mov c, 0
7451   3725 FD 77         inc b
7452   3727 FA FF FF      lea d, [bp + -1] ; $t
7453   372A FD 43         mov [d], b
7454   372C FD 7D         dec b
7455   372E D8            push b
7456   372F 3B 64 4B      mov d, _prog ; $prog
7457   3732 2A            mov b, [d]
7458   3733 38 00 00      mov c, 0
7459   3736 FD 77         inc b
7460   3738 3B 64 4B      mov d, _prog ; $prog
7461   373B FD 43         mov [d], b
7462   373D FD 7D         dec b
7463   373F 74            mov d, b
7464   3740 32            mov bl, [d]
7465   3741 A7 00         mov bh, 0
7466   3743 38 00 00      mov c, 0
7467   3746 E7            pop d
7468   3747 FD 3E         mov [d], bl
7469   3749             ; if (*prog == '='){ 
7470   3749             _if109_cond:
7471   3749 3B 64 4B      mov d, _prog ; $prog
7472   374C 2A            mov b, [d]
7473   374D 38 00 00      mov c, 0
7474   3750 74            mov d, b
7475   3751 32            mov bl, [d]
7476   3752 A7 00         mov bh, 0
7477   3754 38 00 00      mov c, 0
7478   3757             ; --- START RELATIONAL
7479   3757 D7            push a
7480   3758 11            mov a, b
7481   3759 FD 2E 3D 00   mov32 cb, $0000003d
7481   375D 00 00 
7482   375F B0            cmp a, b
7483   3760 FD 71         seq ; ==
7484   3762 E4            pop a
7485   3763             ; --- END RELATIONAL
7486   3763 C0 00 00      cmp b, 0
7487   3766 C6 A4 37      je _if109_else
7488   3769             _if109_TRUE:
7489   3769             ; *t++ = *prog++; 
7490   3769 FA FF FF      lea d, [bp + -1] ; $t
7491   376C 2A            mov b, [d]
7492   376D 38 00 00      mov c, 0
7493   3770 FD 77         inc b
7494   3772 FA FF FF      lea d, [bp + -1] ; $t
7495   3775 FD 43         mov [d], b
7496   3777 FD 7D         dec b
7497   3779 D8            push b
7498   377A 3B 64 4B      mov d, _prog ; $prog
7499   377D 2A            mov b, [d]
7500   377E 38 00 00      mov c, 0
7501   3781 FD 77         inc b
7502   3783 3B 64 4B      mov d, _prog ; $prog
7503   3786 FD 43         mov [d], b
7504   3788 FD 7D         dec b
7505   378A 74            mov d, b
7506   378B 32            mov bl, [d]
7507   378C A7 00         mov bh, 0
7508   378E 38 00 00      mov c, 0
7509   3791 E7            pop d
7510   3792 FD 3E         mov [d], bl
7511   3794             ; tok = LESS_THAN_OR_EQUAL; 
7512   3794 3B 60 4B      mov d, _tok ; $tok
7513   3797 DA            push d
7514   3798 FD 2E 0B 00   mov32 cb, $b ; enum element: LESS_THAN_OR_EQUAL
7514   379C 00 00 
7515   379E E7            pop d
7516   379F FD 43         mov [d], b
7517   37A1 0A 0C 38      jmp _if109_exit
7518   37A4             _if109_else:
7519   37A4             ; if (*prog == '<'){ 
7520   37A4             _if110_cond:
7521   37A4 3B 64 4B      mov d, _prog ; $prog
7522   37A7 2A            mov b, [d]
7523   37A8 38 00 00      mov c, 0
7524   37AB 74            mov d, b
7525   37AC 32            mov bl, [d]
7526   37AD A7 00         mov bh, 0
7527   37AF 38 00 00      mov c, 0
7528   37B2             ; --- START RELATIONAL
7529   37B2 D7            push a
7530   37B3 11            mov a, b
7531   37B4 FD 2E 3C 00   mov32 cb, $0000003c
7531   37B8 00 00 
7532   37BA B0            cmp a, b
7533   37BB FD 71         seq ; ==
7534   37BD E4            pop a
7535   37BE             ; --- END RELATIONAL
7536   37BE C0 00 00      cmp b, 0
7537   37C1 C6 FF 37      je _if110_else
7538   37C4             _if110_TRUE:
7539   37C4             ; *t++ = *prog++; 
7540   37C4 FA FF FF      lea d, [bp + -1] ; $t
7541   37C7 2A            mov b, [d]
7542   37C8 38 00 00      mov c, 0
7543   37CB FD 77         inc b
7544   37CD FA FF FF      lea d, [bp + -1] ; $t
7545   37D0 FD 43         mov [d], b
7546   37D2 FD 7D         dec b
7547   37D4 D8            push b
7548   37D5 3B 64 4B      mov d, _prog ; $prog
7549   37D8 2A            mov b, [d]
7550   37D9 38 00 00      mov c, 0
7551   37DC FD 77         inc b
7552   37DE 3B 64 4B      mov d, _prog ; $prog
7553   37E1 FD 43         mov [d], b
7554   37E3 FD 7D         dec b
7555   37E5 74            mov d, b
7556   37E6 32            mov bl, [d]
7557   37E7 A7 00         mov bh, 0
7558   37E9 38 00 00      mov c, 0
7559   37EC E7            pop d
7560   37ED FD 3E         mov [d], bl
7561   37EF             ; tok = BITWISE_SHL; 
7562   37EF 3B 60 4B      mov d, _tok ; $tok
7563   37F2 DA            push d
7564   37F3 FD 2E 1A 00   mov32 cb, $1a ; enum element: BITWISE_SHL
7564   37F7 00 00 
7565   37F9 E7            pop d
7566   37FA FD 43         mov [d], b
7567   37FC 0A 0C 38      jmp _if110_exit
7568   37FF             _if110_else:
7569   37FF             ; tok = LESS_THAN; 
7570   37FF 3B 60 4B      mov d, _tok ; $tok
7571   3802 DA            push d
7572   3803 FD 2E 0A 00   mov32 cb, $a ; enum element: LESS_THAN
7572   3807 00 00 
7573   3809 E7            pop d
7574   380A FD 43         mov [d], b
7575   380C             _if110_exit:
7576   380C             _if109_exit:
7577   380C             ; toktype = DELIMITER;   
7578   380C 3B 62 4B      mov d, _toktype ; $toktype
7579   380F DA            push d
7580   3810 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
7580   3814 00 00 
7581   3816 E7            pop d
7582   3817 FD 43         mov [d], b
7583   3819 0A 63 40      jmp _if108_exit
7584   381C             _if108_else:
7585   381C             ; if(*prog == '>'){ 
7586   381C             _if111_cond:
7587   381C 3B 64 4B      mov d, _prog ; $prog
7588   381F 2A            mov b, [d]
7589   3820 38 00 00      mov c, 0
7590   3823 74            mov d, b
7591   3824 32            mov bl, [d]
7592   3825 A7 00         mov bh, 0
7593   3827 38 00 00      mov c, 0
7594   382A             ; --- START RELATIONAL
7595   382A D7            push a
7596   382B 11            mov a, b
7597   382C FD 2E 3E 00   mov32 cb, $0000003e
7597   3830 00 00 
7598   3832 B0            cmp a, b
7599   3833 FD 71         seq ; ==
7600   3835 E4            pop a
7601   3836             ; --- END RELATIONAL
7602   3836 C0 00 00      cmp b, 0
7603   3839 C6 3A 39      je _if111_else
7604   383C             _if111_TRUE:
7605   383C             ; *t++ = *prog++; 
7606   383C FA FF FF      lea d, [bp + -1] ; $t
7607   383F 2A            mov b, [d]
7608   3840 38 00 00      mov c, 0
7609   3843 FD 77         inc b
7610   3845 FA FF FF      lea d, [bp + -1] ; $t
7611   3848 FD 43         mov [d], b
7612   384A FD 7D         dec b
7613   384C D8            push b
7614   384D 3B 64 4B      mov d, _prog ; $prog
7615   3850 2A            mov b, [d]
7616   3851 38 00 00      mov c, 0
7617   3854 FD 77         inc b
7618   3856 3B 64 4B      mov d, _prog ; $prog
7619   3859 FD 43         mov [d], b
7620   385B FD 7D         dec b
7621   385D 74            mov d, b
7622   385E 32            mov bl, [d]
7623   385F A7 00         mov bh, 0
7624   3861 38 00 00      mov c, 0
7625   3864 E7            pop d
7626   3865 FD 3E         mov [d], bl
7627   3867             ; if (*prog == '='){ 
7628   3867             _if112_cond:
7629   3867 3B 64 4B      mov d, _prog ; $prog
7630   386A 2A            mov b, [d]
7631   386B 38 00 00      mov c, 0
7632   386E 74            mov d, b
7633   386F 32            mov bl, [d]
7634   3870 A7 00         mov bh, 0
7635   3872 38 00 00      mov c, 0
7636   3875             ; --- START RELATIONAL
7637   3875 D7            push a
7638   3876 11            mov a, b
7639   3877 FD 2E 3D 00   mov32 cb, $0000003d
7639   387B 00 00 
7640   387D B0            cmp a, b
7641   387E FD 71         seq ; ==
7642   3880 E4            pop a
7643   3881             ; --- END RELATIONAL
7644   3881 C0 00 00      cmp b, 0
7645   3884 C6 C2 38      je _if112_else
7646   3887             _if112_TRUE:
7647   3887             ; *t++ = *prog++; 
7648   3887 FA FF FF      lea d, [bp + -1] ; $t
7649   388A 2A            mov b, [d]
7650   388B 38 00 00      mov c, 0
7651   388E FD 77         inc b
7652   3890 FA FF FF      lea d, [bp + -1] ; $t
7653   3893 FD 43         mov [d], b
7654   3895 FD 7D         dec b
7655   3897 D8            push b
7656   3898 3B 64 4B      mov d, _prog ; $prog
7657   389B 2A            mov b, [d]
7658   389C 38 00 00      mov c, 0
7659   389F FD 77         inc b
7660   38A1 3B 64 4B      mov d, _prog ; $prog
7661   38A4 FD 43         mov [d], b
7662   38A6 FD 7D         dec b
7663   38A8 74            mov d, b
7664   38A9 32            mov bl, [d]
7665   38AA A7 00         mov bh, 0
7666   38AC 38 00 00      mov c, 0
7667   38AF E7            pop d
7668   38B0 FD 3E         mov [d], bl
7669   38B2             ; tok = GREATER_THAN_OR_EQUAL; 
7670   38B2 3B 60 4B      mov d, _tok ; $tok
7671   38B5 DA            push d
7672   38B6 FD 2E 0D 00   mov32 cb, $d ; enum element: GREATER_THAN_OR_EQUAL
7672   38BA 00 00 
7673   38BC E7            pop d
7674   38BD FD 43         mov [d], b
7675   38BF 0A 2A 39      jmp _if112_exit
7676   38C2             _if112_else:
7677   38C2             ; if (*prog == '>'){ 
7678   38C2             _if113_cond:
7679   38C2 3B 64 4B      mov d, _prog ; $prog
7680   38C5 2A            mov b, [d]
7681   38C6 38 00 00      mov c, 0
7682   38C9 74            mov d, b
7683   38CA 32            mov bl, [d]
7684   38CB A7 00         mov bh, 0
7685   38CD 38 00 00      mov c, 0
7686   38D0             ; --- START RELATIONAL
7687   38D0 D7            push a
7688   38D1 11            mov a, b
7689   38D2 FD 2E 3E 00   mov32 cb, $0000003e
7689   38D6 00 00 
7690   38D8 B0            cmp a, b
7691   38D9 FD 71         seq ; ==
7692   38DB E4            pop a
7693   38DC             ; --- END RELATIONAL
7694   38DC C0 00 00      cmp b, 0
7695   38DF C6 1D 39      je _if113_else
7696   38E2             _if113_TRUE:
7697   38E2             ; *t++ = *prog++; 
7698   38E2 FA FF FF      lea d, [bp + -1] ; $t
7699   38E5 2A            mov b, [d]
7700   38E6 38 00 00      mov c, 0
7701   38E9 FD 77         inc b
7702   38EB FA FF FF      lea d, [bp + -1] ; $t
7703   38EE FD 43         mov [d], b
7704   38F0 FD 7D         dec b
7705   38F2 D8            push b
7706   38F3 3B 64 4B      mov d, _prog ; $prog
7707   38F6 2A            mov b, [d]
7708   38F7 38 00 00      mov c, 0
7709   38FA FD 77         inc b
7710   38FC 3B 64 4B      mov d, _prog ; $prog
7711   38FF FD 43         mov [d], b
7712   3901 FD 7D         dec b
7713   3903 74            mov d, b
7714   3904 32            mov bl, [d]
7715   3905 A7 00         mov bh, 0
7716   3907 38 00 00      mov c, 0
7717   390A E7            pop d
7718   390B FD 3E         mov [d], bl
7719   390D             ; tok = BITWISE_SHR; 
7720   390D 3B 60 4B      mov d, _tok ; $tok
7721   3910 DA            push d
7722   3911 FD 2E 1B 00   mov32 cb, $1b ; enum element: BITWISE_SHR
7722   3915 00 00 
7723   3917 E7            pop d
7724   3918 FD 43         mov [d], b
7725   391A 0A 2A 39      jmp _if113_exit
7726   391D             _if113_else:
7727   391D             ; tok = GREATER_THAN; 
7728   391D 3B 60 4B      mov d, _tok ; $tok
7729   3920 DA            push d
7730   3921 FD 2E 0C 00   mov32 cb, $c ; enum element: GREATER_THAN
7730   3925 00 00 
7731   3927 E7            pop d
7732   3928 FD 43         mov [d], b
7733   392A             _if113_exit:
7734   392A             _if112_exit:
7735   392A             ; toktype = DELIMITER;   
7736   392A 3B 62 4B      mov d, _toktype ; $toktype
7737   392D DA            push d
7738   392E FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
7738   3932 00 00 
7739   3934 E7            pop d
7740   3935 FD 43         mov [d], b
7741   3937 0A 63 40      jmp _if111_exit
7742   393A             _if111_else:
7743   393A             ; if(*prog == '!'){ 
7744   393A             _if114_cond:
7745   393A 3B 64 4B      mov d, _prog ; $prog
7746   393D 2A            mov b, [d]
7747   393E 38 00 00      mov c, 0
7748   3941 74            mov d, b
7749   3942 32            mov bl, [d]
7750   3943 A7 00         mov bh, 0
7751   3945 38 00 00      mov c, 0
7752   3948             ; --- START RELATIONAL
7753   3948 D7            push a
7754   3949 11            mov a, b
7755   394A FD 2E 21 00   mov32 cb, $00000021
7755   394E 00 00 
7756   3950 B0            cmp a, b
7757   3951 FD 71         seq ; ==
7758   3953 E4            pop a
7759   3954             ; --- END RELATIONAL
7760   3954 C0 00 00      cmp b, 0
7761   3957 C6 FD 39      je _if114_else
7762   395A             _if114_TRUE:
7763   395A             ; *t++ = *prog++; 
7764   395A FA FF FF      lea d, [bp + -1] ; $t
7765   395D 2A            mov b, [d]
7766   395E 38 00 00      mov c, 0
7767   3961 FD 77         inc b
7768   3963 FA FF FF      lea d, [bp + -1] ; $t
7769   3966 FD 43         mov [d], b
7770   3968 FD 7D         dec b
7771   396A D8            push b
7772   396B 3B 64 4B      mov d, _prog ; $prog
7773   396E 2A            mov b, [d]
7774   396F 38 00 00      mov c, 0
7775   3972 FD 77         inc b
7776   3974 3B 64 4B      mov d, _prog ; $prog
7777   3977 FD 43         mov [d], b
7778   3979 FD 7D         dec b
7779   397B 74            mov d, b
7780   397C 32            mov bl, [d]
7781   397D A7 00         mov bh, 0
7782   397F 38 00 00      mov c, 0
7783   3982 E7            pop d
7784   3983 FD 3E         mov [d], bl
7785   3985             ; if(*prog == '='){ 
7786   3985             _if115_cond:
7787   3985 3B 64 4B      mov d, _prog ; $prog
7788   3988 2A            mov b, [d]
7789   3989 38 00 00      mov c, 0
7790   398C 74            mov d, b
7791   398D 32            mov bl, [d]
7792   398E A7 00         mov bh, 0
7793   3990 38 00 00      mov c, 0
7794   3993             ; --- START RELATIONAL
7795   3993 D7            push a
7796   3994 11            mov a, b
7797   3995 FD 2E 3D 00   mov32 cb, $0000003d
7797   3999 00 00 
7798   399B B0            cmp a, b
7799   399C FD 71         seq ; ==
7800   399E E4            pop a
7801   399F             ; --- END RELATIONAL
7802   399F C0 00 00      cmp b, 0
7803   39A2 C6 E0 39      je _if115_else
7804   39A5             _if115_TRUE:
7805   39A5             ; *t++ = *prog++; 
7806   39A5 FA FF FF      lea d, [bp + -1] ; $t
7807   39A8 2A            mov b, [d]
7808   39A9 38 00 00      mov c, 0
7809   39AC FD 77         inc b
7810   39AE FA FF FF      lea d, [bp + -1] ; $t
7811   39B1 FD 43         mov [d], b
7812   39B3 FD 7D         dec b
7813   39B5 D8            push b
7814   39B6 3B 64 4B      mov d, _prog ; $prog
7815   39B9 2A            mov b, [d]
7816   39BA 38 00 00      mov c, 0
7817   39BD FD 77         inc b
7818   39BF 3B 64 4B      mov d, _prog ; $prog
7819   39C2 FD 43         mov [d], b
7820   39C4 FD 7D         dec b
7821   39C6 74            mov d, b
7822   39C7 32            mov bl, [d]
7823   39C8 A7 00         mov bh, 0
7824   39CA 38 00 00      mov c, 0
7825   39CD E7            pop d
7826   39CE FD 3E         mov [d], bl
7827   39D0             ; tok = NOT_EQUAL; 
7828   39D0 3B 60 4B      mov d, _tok ; $tok
7829   39D3 DA            push d
7830   39D4 FD 2E 09 00   mov32 cb, $9 ; enum element: NOT_EQUAL
7830   39D8 00 00 
7831   39DA E7            pop d
7832   39DB FD 43         mov [d], b
7833   39DD 0A ED 39      jmp _if115_exit
7834   39E0             _if115_else:
7835   39E0             ; tok = LOGICAL_NOT; 
7836   39E0 3B 60 4B      mov d, _tok ; $tok
7837   39E3 DA            push d
7838   39E4 FD 2E 10 00   mov32 cb, $10 ; enum element: LOGICAL_NOT
7838   39E8 00 00 
7839   39EA E7            pop d
7840   39EB FD 43         mov [d], b
7841   39ED             _if115_exit:
7842   39ED             ; toktype = DELIMITER;   
7843   39ED 3B 62 4B      mov d, _toktype ; $toktype
7844   39F0 DA            push d
7845   39F1 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
7845   39F5 00 00 
7846   39F7 E7            pop d
7847   39F8 FD 43         mov [d], b
7848   39FA 0A 63 40      jmp _if114_exit
7849   39FD             _if114_else:
7850   39FD             ; if(*prog == '+'){ 
7851   39FD             _if116_cond:
7852   39FD 3B 64 4B      mov d, _prog ; $prog
7853   3A00 2A            mov b, [d]
7854   3A01 38 00 00      mov c, 0
7855   3A04 74            mov d, b
7856   3A05 32            mov bl, [d]
7857   3A06 A7 00         mov bh, 0
7858   3A08 38 00 00      mov c, 0
7859   3A0B             ; --- START RELATIONAL
7860   3A0B D7            push a
7861   3A0C 11            mov a, b
7862   3A0D FD 2E 2B 00   mov32 cb, $0000002b
7862   3A11 00 00 
7863   3A13 B0            cmp a, b
7864   3A14 FD 71         seq ; ==
7865   3A16 E4            pop a
7866   3A17             ; --- END RELATIONAL
7867   3A17 C0 00 00      cmp b, 0
7868   3A1A C6 C0 3A      je _if116_else
7869   3A1D             _if116_TRUE:
7870   3A1D             ; *t++ = *prog++; 
7871   3A1D FA FF FF      lea d, [bp + -1] ; $t
7872   3A20 2A            mov b, [d]
7873   3A21 38 00 00      mov c, 0
7874   3A24 FD 77         inc b
7875   3A26 FA FF FF      lea d, [bp + -1] ; $t
7876   3A29 FD 43         mov [d], b
7877   3A2B FD 7D         dec b
7878   3A2D D8            push b
7879   3A2E 3B 64 4B      mov d, _prog ; $prog
7880   3A31 2A            mov b, [d]
7881   3A32 38 00 00      mov c, 0
7882   3A35 FD 77         inc b
7883   3A37 3B 64 4B      mov d, _prog ; $prog
7884   3A3A FD 43         mov [d], b
7885   3A3C FD 7D         dec b
7886   3A3E 74            mov d, b
7887   3A3F 32            mov bl, [d]
7888   3A40 A7 00         mov bh, 0
7889   3A42 38 00 00      mov c, 0
7890   3A45 E7            pop d
7891   3A46 FD 3E         mov [d], bl
7892   3A48             ; if(*prog == '+'){ 
7893   3A48             _if117_cond:
7894   3A48 3B 64 4B      mov d, _prog ; $prog
7895   3A4B 2A            mov b, [d]
7896   3A4C 38 00 00      mov c, 0
7897   3A4F 74            mov d, b
7898   3A50 32            mov bl, [d]
7899   3A51 A7 00         mov bh, 0
7900   3A53 38 00 00      mov c, 0
7901   3A56             ; --- START RELATIONAL
7902   3A56 D7            push a
7903   3A57 11            mov a, b
7904   3A58 FD 2E 2B 00   mov32 cb, $0000002b
7904   3A5C 00 00 
7905   3A5E B0            cmp a, b
7906   3A5F FD 71         seq ; ==
7907   3A61 E4            pop a
7908   3A62             ; --- END RELATIONAL
7909   3A62 C0 00 00      cmp b, 0
7910   3A65 C6 A3 3A      je _if117_else
7911   3A68             _if117_TRUE:
7912   3A68             ; *t++ = *prog++; 
7913   3A68 FA FF FF      lea d, [bp + -1] ; $t
7914   3A6B 2A            mov b, [d]
7915   3A6C 38 00 00      mov c, 0
7916   3A6F FD 77         inc b
7917   3A71 FA FF FF      lea d, [bp + -1] ; $t
7918   3A74 FD 43         mov [d], b
7919   3A76 FD 7D         dec b
7920   3A78 D8            push b
7921   3A79 3B 64 4B      mov d, _prog ; $prog
7922   3A7C 2A            mov b, [d]
7923   3A7D 38 00 00      mov c, 0
7924   3A80 FD 77         inc b
7925   3A82 3B 64 4B      mov d, _prog ; $prog
7926   3A85 FD 43         mov [d], b
7927   3A87 FD 7D         dec b
7928   3A89 74            mov d, b
7929   3A8A 32            mov bl, [d]
7930   3A8B A7 00         mov bh, 0
7931   3A8D 38 00 00      mov c, 0
7932   3A90 E7            pop d
7933   3A91 FD 3E         mov [d], bl
7934   3A93             ; tok = INCREMENT; 
7935   3A93 3B 60 4B      mov d, _tok ; $tok
7936   3A96 DA            push d
7937   3A97 FD 2E 05 00   mov32 cb, $5 ; enum element: INCREMENT
7937   3A9B 00 00 
7938   3A9D E7            pop d
7939   3A9E FD 43         mov [d], b
7940   3AA0 0A B0 3A      jmp _if117_exit
7941   3AA3             _if117_else:
7942   3AA3             ; tok = PLUS; 
7943   3AA3 3B 60 4B      mov d, _tok ; $tok
7944   3AA6 DA            push d
7945   3AA7 FD 2E 01 00   mov32 cb, $1 ; enum element: PLUS
7945   3AAB 00 00 
7946   3AAD E7            pop d
7947   3AAE FD 43         mov [d], b
7948   3AB0             _if117_exit:
7949   3AB0             ; toktype = DELIMITER;   
7950   3AB0 3B 62 4B      mov d, _toktype ; $toktype
7951   3AB3 DA            push d
7952   3AB4 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
7952   3AB8 00 00 
7953   3ABA E7            pop d
7954   3ABB FD 43         mov [d], b
7955   3ABD 0A 63 40      jmp _if116_exit
7956   3AC0             _if116_else:
7957   3AC0             ; if(*prog == '-'){ 
7958   3AC0             _if118_cond:
7959   3AC0 3B 64 4B      mov d, _prog ; $prog
7960   3AC3 2A            mov b, [d]
7961   3AC4 38 00 00      mov c, 0
7962   3AC7 74            mov d, b
7963   3AC8 32            mov bl, [d]
7964   3AC9 A7 00         mov bh, 0
7965   3ACB 38 00 00      mov c, 0
7966   3ACE             ; --- START RELATIONAL
7967   3ACE D7            push a
7968   3ACF 11            mov a, b
7969   3AD0 FD 2E 2D 00   mov32 cb, $0000002d
7969   3AD4 00 00 
7970   3AD6 B0            cmp a, b
7971   3AD7 FD 71         seq ; ==
7972   3AD9 E4            pop a
7973   3ADA             ; --- END RELATIONAL
7974   3ADA C0 00 00      cmp b, 0
7975   3ADD C6 83 3B      je _if118_else
7976   3AE0             _if118_TRUE:
7977   3AE0             ; *t++ = *prog++; 
7978   3AE0 FA FF FF      lea d, [bp + -1] ; $t
7979   3AE3 2A            mov b, [d]
7980   3AE4 38 00 00      mov c, 0
7981   3AE7 FD 77         inc b
7982   3AE9 FA FF FF      lea d, [bp + -1] ; $t
7983   3AEC FD 43         mov [d], b
7984   3AEE FD 7D         dec b
7985   3AF0 D8            push b
7986   3AF1 3B 64 4B      mov d, _prog ; $prog
7987   3AF4 2A            mov b, [d]
7988   3AF5 38 00 00      mov c, 0
7989   3AF8 FD 77         inc b
7990   3AFA 3B 64 4B      mov d, _prog ; $prog
7991   3AFD FD 43         mov [d], b
7992   3AFF FD 7D         dec b
7993   3B01 74            mov d, b
7994   3B02 32            mov bl, [d]
7995   3B03 A7 00         mov bh, 0
7996   3B05 38 00 00      mov c, 0
7997   3B08 E7            pop d
7998   3B09 FD 3E         mov [d], bl
7999   3B0B             ; if(*prog == '-'){ 
8000   3B0B             _if119_cond:
8001   3B0B 3B 64 4B      mov d, _prog ; $prog
8002   3B0E 2A            mov b, [d]
8003   3B0F 38 00 00      mov c, 0
8004   3B12 74            mov d, b
8005   3B13 32            mov bl, [d]
8006   3B14 A7 00         mov bh, 0
8007   3B16 38 00 00      mov c, 0
8008   3B19             ; --- START RELATIONAL
8009   3B19 D7            push a
8010   3B1A 11            mov a, b
8011   3B1B FD 2E 2D 00   mov32 cb, $0000002d
8011   3B1F 00 00 
8012   3B21 B0            cmp a, b
8013   3B22 FD 71         seq ; ==
8014   3B24 E4            pop a
8015   3B25             ; --- END RELATIONAL
8016   3B25 C0 00 00      cmp b, 0
8017   3B28 C6 66 3B      je _if119_else
8018   3B2B             _if119_TRUE:
8019   3B2B             ; *t++ = *prog++; 
8020   3B2B FA FF FF      lea d, [bp + -1] ; $t
8021   3B2E 2A            mov b, [d]
8022   3B2F 38 00 00      mov c, 0
8023   3B32 FD 77         inc b
8024   3B34 FA FF FF      lea d, [bp + -1] ; $t
8025   3B37 FD 43         mov [d], b
8026   3B39 FD 7D         dec b
8027   3B3B D8            push b
8028   3B3C 3B 64 4B      mov d, _prog ; $prog
8029   3B3F 2A            mov b, [d]
8030   3B40 38 00 00      mov c, 0
8031   3B43 FD 77         inc b
8032   3B45 3B 64 4B      mov d, _prog ; $prog
8033   3B48 FD 43         mov [d], b
8034   3B4A FD 7D         dec b
8035   3B4C 74            mov d, b
8036   3B4D 32            mov bl, [d]
8037   3B4E A7 00         mov bh, 0
8038   3B50 38 00 00      mov c, 0
8039   3B53 E7            pop d
8040   3B54 FD 3E         mov [d], bl
8041   3B56             ; tok = DECREMENT; 
8042   3B56 3B 60 4B      mov d, _tok ; $tok
8043   3B59 DA            push d
8044   3B5A FD 2E 06 00   mov32 cb, $6 ; enum element: DECREMENT
8044   3B5E 00 00 
8045   3B60 E7            pop d
8046   3B61 FD 43         mov [d], b
8047   3B63 0A 73 3B      jmp _if119_exit
8048   3B66             _if119_else:
8049   3B66             ; tok = MINUS; 
8050   3B66 3B 60 4B      mov d, _tok ; $tok
8051   3B69 DA            push d
8052   3B6A FD 2E 02 00   mov32 cb, $2 ; enum element: MINUS
8052   3B6E 00 00 
8053   3B70 E7            pop d
8054   3B71 FD 43         mov [d], b
8055   3B73             _if119_exit:
8056   3B73             ; toktype = DELIMITER;   
8057   3B73 3B 62 4B      mov d, _toktype ; $toktype
8058   3B76 DA            push d
8059   3B77 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8059   3B7B 00 00 
8060   3B7D E7            pop d
8061   3B7E FD 43         mov [d], b
8062   3B80 0A 63 40      jmp _if118_exit
8063   3B83             _if118_else:
8064   3B83             ; if(*prog == '$'){ 
8065   3B83             _if120_cond:
8066   3B83 3B 64 4B      mov d, _prog ; $prog
8067   3B86 2A            mov b, [d]
8068   3B87 38 00 00      mov c, 0
8069   3B8A 74            mov d, b
8070   3B8B 32            mov bl, [d]
8071   3B8C A7 00         mov bh, 0
8072   3B8E 38 00 00      mov c, 0
8073   3B91             ; --- START RELATIONAL
8074   3B91 D7            push a
8075   3B92 11            mov a, b
8076   3B93 FD 2E 24 00   mov32 cb, $00000024
8076   3B97 00 00 
8077   3B99 B0            cmp a, b
8078   3B9A FD 71         seq ; ==
8079   3B9C E4            pop a
8080   3B9D             ; --- END RELATIONAL
8081   3B9D C0 00 00      cmp b, 0
8082   3BA0 C6 EB 3B      je _if120_else
8083   3BA3             _if120_TRUE:
8084   3BA3             ; *t++ = *prog++; 
8085   3BA3 FA FF FF      lea d, [bp + -1] ; $t
8086   3BA6 2A            mov b, [d]
8087   3BA7 38 00 00      mov c, 0
8088   3BAA FD 77         inc b
8089   3BAC FA FF FF      lea d, [bp + -1] ; $t
8090   3BAF FD 43         mov [d], b
8091   3BB1 FD 7D         dec b
8092   3BB3 D8            push b
8093   3BB4 3B 64 4B      mov d, _prog ; $prog
8094   3BB7 2A            mov b, [d]
8095   3BB8 38 00 00      mov c, 0
8096   3BBB FD 77         inc b
8097   3BBD 3B 64 4B      mov d, _prog ; $prog
8098   3BC0 FD 43         mov [d], b
8099   3BC2 FD 7D         dec b
8100   3BC4 74            mov d, b
8101   3BC5 32            mov bl, [d]
8102   3BC6 A7 00         mov bh, 0
8103   3BC8 38 00 00      mov c, 0
8104   3BCB E7            pop d
8105   3BCC FD 3E         mov [d], bl
8106   3BCE             ; tok = DOLLAR; 
8107   3BCE 3B 60 4B      mov d, _tok ; $tok
8108   3BD1 DA            push d
8109   3BD2 FD 2E 12 00   mov32 cb, $12 ; enum element: DOLLAR
8109   3BD6 00 00 
8110   3BD8 E7            pop d
8111   3BD9 FD 43         mov [d], b
8112   3BDB             ; toktype = DELIMITER;   
8113   3BDB 3B 62 4B      mov d, _toktype ; $toktype
8114   3BDE DA            push d
8115   3BDF FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8115   3BE3 00 00 
8116   3BE5 E7            pop d
8117   3BE6 FD 43         mov [d], b
8118   3BE8 0A 63 40      jmp _if120_exit
8119   3BEB             _if120_else:
8120   3BEB             ; if(*prog == '^'){ 
8121   3BEB             _if121_cond:
8122   3BEB 3B 64 4B      mov d, _prog ; $prog
8123   3BEE 2A            mov b, [d]
8124   3BEF 38 00 00      mov c, 0
8125   3BF2 74            mov d, b
8126   3BF3 32            mov bl, [d]
8127   3BF4 A7 00         mov bh, 0
8128   3BF6 38 00 00      mov c, 0
8129   3BF9             ; --- START RELATIONAL
8130   3BF9 D7            push a
8131   3BFA 11            mov a, b
8132   3BFB FD 2E 5E 00   mov32 cb, $0000005e
8132   3BFF 00 00 
8133   3C01 B0            cmp a, b
8134   3C02 FD 71         seq ; ==
8135   3C04 E4            pop a
8136   3C05             ; --- END RELATIONAL
8137   3C05 C0 00 00      cmp b, 0
8138   3C08 C6 53 3C      je _if121_else
8139   3C0B             _if121_TRUE:
8140   3C0B             ; *t++ = *prog++; 
8141   3C0B FA FF FF      lea d, [bp + -1] ; $t
8142   3C0E 2A            mov b, [d]
8143   3C0F 38 00 00      mov c, 0
8144   3C12 FD 77         inc b
8145   3C14 FA FF FF      lea d, [bp + -1] ; $t
8146   3C17 FD 43         mov [d], b
8147   3C19 FD 7D         dec b
8148   3C1B D8            push b
8149   3C1C 3B 64 4B      mov d, _prog ; $prog
8150   3C1F 2A            mov b, [d]
8151   3C20 38 00 00      mov c, 0
8152   3C23 FD 77         inc b
8153   3C25 3B 64 4B      mov d, _prog ; $prog
8154   3C28 FD 43         mov [d], b
8155   3C2A FD 7D         dec b
8156   3C2C 74            mov d, b
8157   3C2D 32            mov bl, [d]
8158   3C2E A7 00         mov bh, 0
8159   3C30 38 00 00      mov c, 0
8160   3C33 E7            pop d
8161   3C34 FD 3E         mov [d], bl
8162   3C36             ; tok = BITWISE_XOR; 
8163   3C36 3B 60 4B      mov d, _tok ; $tok
8164   3C39 DA            push d
8165   3C3A FD 2E 17 00   mov32 cb, $17 ; enum element: BITWISE_XOR
8165   3C3E 00 00 
8166   3C40 E7            pop d
8167   3C41 FD 43         mov [d], b
8168   3C43             ; toktype = DELIMITER;   
8169   3C43 3B 62 4B      mov d, _toktype ; $toktype
8170   3C46 DA            push d
8171   3C47 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8171   3C4B 00 00 
8172   3C4D E7            pop d
8173   3C4E FD 43         mov [d], b
8174   3C50 0A 63 40      jmp _if121_exit
8175   3C53             _if121_else:
8176   3C53             ; if(*prog == '@'){ 
8177   3C53             _if122_cond:
8178   3C53 3B 64 4B      mov d, _prog ; $prog
8179   3C56 2A            mov b, [d]
8180   3C57 38 00 00      mov c, 0
8181   3C5A 74            mov d, b
8182   3C5B 32            mov bl, [d]
8183   3C5C A7 00         mov bh, 0
8184   3C5E 38 00 00      mov c, 0
8185   3C61             ; --- START RELATIONAL
8186   3C61 D7            push a
8187   3C62 11            mov a, b
8188   3C63 FD 2E 40 00   mov32 cb, $00000040
8188   3C67 00 00 
8189   3C69 B0            cmp a, b
8190   3C6A FD 71         seq ; ==
8191   3C6C E4            pop a
8192   3C6D             ; --- END RELATIONAL
8193   3C6D C0 00 00      cmp b, 0
8194   3C70 C6 BB 3C      je _if122_else
8195   3C73             _if122_TRUE:
8196   3C73             ; *t++ = *prog++; 
8197   3C73 FA FF FF      lea d, [bp + -1] ; $t
8198   3C76 2A            mov b, [d]
8199   3C77 38 00 00      mov c, 0
8200   3C7A FD 77         inc b
8201   3C7C FA FF FF      lea d, [bp + -1] ; $t
8202   3C7F FD 43         mov [d], b
8203   3C81 FD 7D         dec b
8204   3C83 D8            push b
8205   3C84 3B 64 4B      mov d, _prog ; $prog
8206   3C87 2A            mov b, [d]
8207   3C88 38 00 00      mov c, 0
8208   3C8B FD 77         inc b
8209   3C8D 3B 64 4B      mov d, _prog ; $prog
8210   3C90 FD 43         mov [d], b
8211   3C92 FD 7D         dec b
8212   3C94 74            mov d, b
8213   3C95 32            mov bl, [d]
8214   3C96 A7 00         mov bh, 0
8215   3C98 38 00 00      mov c, 0
8216   3C9B E7            pop d
8217   3C9C FD 3E         mov [d], bl
8218   3C9E             ; tok = AT; 
8219   3C9E 3B 60 4B      mov d, _tok ; $tok
8220   3CA1 DA            push d
8221   3CA2 FD 2E 14 00   mov32 cb, $14 ; enum element: AT
8221   3CA6 00 00 
8222   3CA8 E7            pop d
8223   3CA9 FD 43         mov [d], b
8224   3CAB             ; toktype = DELIMITER;   
8225   3CAB 3B 62 4B      mov d, _toktype ; $toktype
8226   3CAE DA            push d
8227   3CAF FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8227   3CB3 00 00 
8228   3CB5 E7            pop d
8229   3CB6 FD 43         mov [d], b
8230   3CB8 0A 63 40      jmp _if122_exit
8231   3CBB             _if122_else:
8232   3CBB             ; if(*prog == '*'){ 
8233   3CBB             _if123_cond:
8234   3CBB 3B 64 4B      mov d, _prog ; $prog
8235   3CBE 2A            mov b, [d]
8236   3CBF 38 00 00      mov c, 0
8237   3CC2 74            mov d, b
8238   3CC3 32            mov bl, [d]
8239   3CC4 A7 00         mov bh, 0
8240   3CC6 38 00 00      mov c, 0
8241   3CC9             ; --- START RELATIONAL
8242   3CC9 D7            push a
8243   3CCA 11            mov a, b
8244   3CCB FD 2E 2A 00   mov32 cb, $0000002a
8244   3CCF 00 00 
8245   3CD1 B0            cmp a, b
8246   3CD2 FD 71         seq ; ==
8247   3CD4 E4            pop a
8248   3CD5             ; --- END RELATIONAL
8249   3CD5 C0 00 00      cmp b, 0
8250   3CD8 C6 23 3D      je _if123_else
8251   3CDB             _if123_TRUE:
8252   3CDB             ; *t++ = *prog++; 
8253   3CDB FA FF FF      lea d, [bp + -1] ; $t
8254   3CDE 2A            mov b, [d]
8255   3CDF 38 00 00      mov c, 0
8256   3CE2 FD 77         inc b
8257   3CE4 FA FF FF      lea d, [bp + -1] ; $t
8258   3CE7 FD 43         mov [d], b
8259   3CE9 FD 7D         dec b
8260   3CEB D8            push b
8261   3CEC 3B 64 4B      mov d, _prog ; $prog
8262   3CEF 2A            mov b, [d]
8263   3CF0 38 00 00      mov c, 0
8264   3CF3 FD 77         inc b
8265   3CF5 3B 64 4B      mov d, _prog ; $prog
8266   3CF8 FD 43         mov [d], b
8267   3CFA FD 7D         dec b
8268   3CFC 74            mov d, b
8269   3CFD 32            mov bl, [d]
8270   3CFE A7 00         mov bh, 0
8271   3D00 38 00 00      mov c, 0
8272   3D03 E7            pop d
8273   3D04 FD 3E         mov [d], bl
8274   3D06             ; tok = STAR; 
8275   3D06 3B 60 4B      mov d, _tok ; $tok
8276   3D09 DA            push d
8277   3D0A FD 2E 03 00   mov32 cb, $3 ; enum element: STAR
8277   3D0E 00 00 
8278   3D10 E7            pop d
8279   3D11 FD 43         mov [d], b
8280   3D13             ; toktype = DELIMITER;   
8281   3D13 3B 62 4B      mov d, _toktype ; $toktype
8282   3D16 DA            push d
8283   3D17 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8283   3D1B 00 00 
8284   3D1D E7            pop d
8285   3D1E FD 43         mov [d], b
8286   3D20 0A 63 40      jmp _if123_exit
8287   3D23             _if123_else:
8288   3D23             ; if(*prog == '/'){ 
8289   3D23             _if124_cond:
8290   3D23 3B 64 4B      mov d, _prog ; $prog
8291   3D26 2A            mov b, [d]
8292   3D27 38 00 00      mov c, 0
8293   3D2A 74            mov d, b
8294   3D2B 32            mov bl, [d]
8295   3D2C A7 00         mov bh, 0
8296   3D2E 38 00 00      mov c, 0
8297   3D31             ; --- START RELATIONAL
8298   3D31 D7            push a
8299   3D32 11            mov a, b
8300   3D33 FD 2E 2F 00   mov32 cb, $0000002f
8300   3D37 00 00 
8301   3D39 B0            cmp a, b
8302   3D3A FD 71         seq ; ==
8303   3D3C E4            pop a
8304   3D3D             ; --- END RELATIONAL
8305   3D3D C0 00 00      cmp b, 0
8306   3D40 C6 8B 3D      je _if124_else
8307   3D43             _if124_TRUE:
8308   3D43             ; *t++ = *prog++; 
8309   3D43 FA FF FF      lea d, [bp + -1] ; $t
8310   3D46 2A            mov b, [d]
8311   3D47 38 00 00      mov c, 0
8312   3D4A FD 77         inc b
8313   3D4C FA FF FF      lea d, [bp + -1] ; $t
8314   3D4F FD 43         mov [d], b
8315   3D51 FD 7D         dec b
8316   3D53 D8            push b
8317   3D54 3B 64 4B      mov d, _prog ; $prog
8318   3D57 2A            mov b, [d]
8319   3D58 38 00 00      mov c, 0
8320   3D5B FD 77         inc b
8321   3D5D 3B 64 4B      mov d, _prog ; $prog
8322   3D60 FD 43         mov [d], b
8323   3D62 FD 7D         dec b
8324   3D64 74            mov d, b
8325   3D65 32            mov bl, [d]
8326   3D66 A7 00         mov bh, 0
8327   3D68 38 00 00      mov c, 0
8328   3D6B E7            pop d
8329   3D6C FD 3E         mov [d], bl
8330   3D6E             ; tok = FSLASH; 
8331   3D6E 3B 60 4B      mov d, _tok ; $tok
8332   3D71 DA            push d
8333   3D72 FD 2E 04 00   mov32 cb, $4 ; enum element: FSLASH
8333   3D76 00 00 
8334   3D78 E7            pop d
8335   3D79 FD 43         mov [d], b
8336   3D7B             ; toktype = DELIMITER;   
8337   3D7B 3B 62 4B      mov d, _toktype ; $toktype
8338   3D7E DA            push d
8339   3D7F FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8339   3D83 00 00 
8340   3D85 E7            pop d
8341   3D86 FD 43         mov [d], b
8342   3D88 0A 63 40      jmp _if124_exit
8343   3D8B             _if124_else:
8344   3D8B             ; if(*prog == '%'){ 
8345   3D8B             _if125_cond:
8346   3D8B 3B 64 4B      mov d, _prog ; $prog
8347   3D8E 2A            mov b, [d]
8348   3D8F 38 00 00      mov c, 0
8349   3D92 74            mov d, b
8350   3D93 32            mov bl, [d]
8351   3D94 A7 00         mov bh, 0
8352   3D96 38 00 00      mov c, 0
8353   3D99             ; --- START RELATIONAL
8354   3D99 D7            push a
8355   3D9A 11            mov a, b
8356   3D9B FD 2E 25 00   mov32 cb, $00000025
8356   3D9F 00 00 
8357   3DA1 B0            cmp a, b
8358   3DA2 FD 71         seq ; ==
8359   3DA4 E4            pop a
8360   3DA5             ; --- END RELATIONAL
8361   3DA5 C0 00 00      cmp b, 0
8362   3DA8 C6 F3 3D      je _if125_else
8363   3DAB             _if125_TRUE:
8364   3DAB             ; *t++ = *prog++; 
8365   3DAB FA FF FF      lea d, [bp + -1] ; $t
8366   3DAE 2A            mov b, [d]
8367   3DAF 38 00 00      mov c, 0
8368   3DB2 FD 77         inc b
8369   3DB4 FA FF FF      lea d, [bp + -1] ; $t
8370   3DB7 FD 43         mov [d], b
8371   3DB9 FD 7D         dec b
8372   3DBB D8            push b
8373   3DBC 3B 64 4B      mov d, _prog ; $prog
8374   3DBF 2A            mov b, [d]
8375   3DC0 38 00 00      mov c, 0
8376   3DC3 FD 77         inc b
8377   3DC5 3B 64 4B      mov d, _prog ; $prog
8378   3DC8 FD 43         mov [d], b
8379   3DCA FD 7D         dec b
8380   3DCC 74            mov d, b
8381   3DCD 32            mov bl, [d]
8382   3DCE A7 00         mov bh, 0
8383   3DD0 38 00 00      mov c, 0
8384   3DD3 E7            pop d
8385   3DD4 FD 3E         mov [d], bl
8386   3DD6             ; tok = MOD; 
8387   3DD6 3B 60 4B      mov d, _tok ; $tok
8388   3DD9 DA            push d
8389   3DDA FD 2E 07 00   mov32 cb, $7 ; enum element: MOD
8389   3DDE 00 00 
8390   3DE0 E7            pop d
8391   3DE1 FD 43         mov [d], b
8392   3DE3             ; toktype = DELIMITER;   
8393   3DE3 3B 62 4B      mov d, _toktype ; $toktype
8394   3DE6 DA            push d
8395   3DE7 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8395   3DEB 00 00 
8396   3DED E7            pop d
8397   3DEE FD 43         mov [d], b
8398   3DF0 0A 63 40      jmp _if125_exit
8399   3DF3             _if125_else:
8400   3DF3             ; if(*prog == '('){ 
8401   3DF3             _if126_cond:
8402   3DF3 3B 64 4B      mov d, _prog ; $prog
8403   3DF6 2A            mov b, [d]
8404   3DF7 38 00 00      mov c, 0
8405   3DFA 74            mov d, b
8406   3DFB 32            mov bl, [d]
8407   3DFC A7 00         mov bh, 0
8408   3DFE 38 00 00      mov c, 0
8409   3E01             ; --- START RELATIONAL
8410   3E01 D7            push a
8411   3E02 11            mov a, b
8412   3E03 FD 2E 28 00   mov32 cb, $00000028
8412   3E07 00 00 
8413   3E09 B0            cmp a, b
8414   3E0A FD 71         seq ; ==
8415   3E0C E4            pop a
8416   3E0D             ; --- END RELATIONAL
8417   3E0D C0 00 00      cmp b, 0
8418   3E10 C6 5B 3E      je _if126_else
8419   3E13             _if126_TRUE:
8420   3E13             ; *t++ = *prog++; 
8421   3E13 FA FF FF      lea d, [bp + -1] ; $t
8422   3E16 2A            mov b, [d]
8423   3E17 38 00 00      mov c, 0
8424   3E1A FD 77         inc b
8425   3E1C FA FF FF      lea d, [bp + -1] ; $t
8426   3E1F FD 43         mov [d], b
8427   3E21 FD 7D         dec b
8428   3E23 D8            push b
8429   3E24 3B 64 4B      mov d, _prog ; $prog
8430   3E27 2A            mov b, [d]
8431   3E28 38 00 00      mov c, 0
8432   3E2B FD 77         inc b
8433   3E2D 3B 64 4B      mov d, _prog ; $prog
8434   3E30 FD 43         mov [d], b
8435   3E32 FD 7D         dec b
8436   3E34 74            mov d, b
8437   3E35 32            mov bl, [d]
8438   3E36 A7 00         mov bh, 0
8439   3E38 38 00 00      mov c, 0
8440   3E3B E7            pop d
8441   3E3C FD 3E         mov [d], bl
8442   3E3E             ; tok = OPENING_PAREN; 
8443   3E3E 3B 60 4B      mov d, _tok ; $tok
8444   3E41 DA            push d
8445   3E42 FD 2E 1C 00   mov32 cb, $1c ; enum element: OPENING_PAREN
8445   3E46 00 00 
8446   3E48 E7            pop d
8447   3E49 FD 43         mov [d], b
8448   3E4B             ; toktype = DELIMITER;   
8449   3E4B 3B 62 4B      mov d, _toktype ; $toktype
8450   3E4E DA            push d
8451   3E4F FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8451   3E53 00 00 
8452   3E55 E7            pop d
8453   3E56 FD 43         mov [d], b
8454   3E58 0A 63 40      jmp _if126_exit
8455   3E5B             _if126_else:
8456   3E5B             ; if(*prog == ')'){ 
8457   3E5B             _if127_cond:
8458   3E5B 3B 64 4B      mov d, _prog ; $prog
8459   3E5E 2A            mov b, [d]
8460   3E5F 38 00 00      mov c, 0
8461   3E62 74            mov d, b
8462   3E63 32            mov bl, [d]
8463   3E64 A7 00         mov bh, 0
8464   3E66 38 00 00      mov c, 0
8465   3E69             ; --- START RELATIONAL
8466   3E69 D7            push a
8467   3E6A 11            mov a, b
8468   3E6B FD 2E 29 00   mov32 cb, $00000029
8468   3E6F 00 00 
8469   3E71 B0            cmp a, b
8470   3E72 FD 71         seq ; ==
8471   3E74 E4            pop a
8472   3E75             ; --- END RELATIONAL
8473   3E75 C0 00 00      cmp b, 0
8474   3E78 C6 C3 3E      je _if127_else
8475   3E7B             _if127_TRUE:
8476   3E7B             ; *t++ = *prog++; 
8477   3E7B FA FF FF      lea d, [bp + -1] ; $t
8478   3E7E 2A            mov b, [d]
8479   3E7F 38 00 00      mov c, 0
8480   3E82 FD 77         inc b
8481   3E84 FA FF FF      lea d, [bp + -1] ; $t
8482   3E87 FD 43         mov [d], b
8483   3E89 FD 7D         dec b
8484   3E8B D8            push b
8485   3E8C 3B 64 4B      mov d, _prog ; $prog
8486   3E8F 2A            mov b, [d]
8487   3E90 38 00 00      mov c, 0
8488   3E93 FD 77         inc b
8489   3E95 3B 64 4B      mov d, _prog ; $prog
8490   3E98 FD 43         mov [d], b
8491   3E9A FD 7D         dec b
8492   3E9C 74            mov d, b
8493   3E9D 32            mov bl, [d]
8494   3E9E A7 00         mov bh, 0
8495   3EA0 38 00 00      mov c, 0
8496   3EA3 E7            pop d
8497   3EA4 FD 3E         mov [d], bl
8498   3EA6             ; tok = CLOSING_PAREN; 
8499   3EA6 3B 60 4B      mov d, _tok ; $tok
8500   3EA9 DA            push d
8501   3EAA FD 2E 1D 00   mov32 cb, $1d ; enum element: CLOSING_PAREN
8501   3EAE 00 00 
8502   3EB0 E7            pop d
8503   3EB1 FD 43         mov [d], b
8504   3EB3             ; toktype = DELIMITER;   
8505   3EB3 3B 62 4B      mov d, _toktype ; $toktype
8506   3EB6 DA            push d
8507   3EB7 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8507   3EBB 00 00 
8508   3EBD E7            pop d
8509   3EBE FD 43         mov [d], b
8510   3EC0 0A 63 40      jmp _if127_exit
8511   3EC3             _if127_else:
8512   3EC3             ; if(*prog == ';'){ 
8513   3EC3             _if128_cond:
8514   3EC3 3B 64 4B      mov d, _prog ; $prog
8515   3EC6 2A            mov b, [d]
8516   3EC7 38 00 00      mov c, 0
8517   3ECA 74            mov d, b
8518   3ECB 32            mov bl, [d]
8519   3ECC A7 00         mov bh, 0
8520   3ECE 38 00 00      mov c, 0
8521   3ED1             ; --- START RELATIONAL
8522   3ED1 D7            push a
8523   3ED2 11            mov a, b
8524   3ED3 FD 2E 3B 00   mov32 cb, $0000003b
8524   3ED7 00 00 
8525   3ED9 B0            cmp a, b
8526   3EDA FD 71         seq ; ==
8527   3EDC E4            pop a
8528   3EDD             ; --- END RELATIONAL
8529   3EDD C0 00 00      cmp b, 0
8530   3EE0 C6 2B 3F      je _if128_else
8531   3EE3             _if128_TRUE:
8532   3EE3             ; *t++ = *prog++; 
8533   3EE3 FA FF FF      lea d, [bp + -1] ; $t
8534   3EE6 2A            mov b, [d]
8535   3EE7 38 00 00      mov c, 0
8536   3EEA FD 77         inc b
8537   3EEC FA FF FF      lea d, [bp + -1] ; $t
8538   3EEF FD 43         mov [d], b
8539   3EF1 FD 7D         dec b
8540   3EF3 D8            push b
8541   3EF4 3B 64 4B      mov d, _prog ; $prog
8542   3EF7 2A            mov b, [d]
8543   3EF8 38 00 00      mov c, 0
8544   3EFB FD 77         inc b
8545   3EFD 3B 64 4B      mov d, _prog ; $prog
8546   3F00 FD 43         mov [d], b
8547   3F02 FD 7D         dec b
8548   3F04 74            mov d, b
8549   3F05 32            mov bl, [d]
8550   3F06 A7 00         mov bh, 0
8551   3F08 38 00 00      mov c, 0
8552   3F0B E7            pop d
8553   3F0C FD 3E         mov [d], bl
8554   3F0E             ; tok = SEMICOLON; 
8555   3F0E 3B 60 4B      mov d, _tok ; $tok
8556   3F11 DA            push d
8557   3F12 FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
8557   3F16 00 00 
8558   3F18 E7            pop d
8559   3F19 FD 43         mov [d], b
8560   3F1B             ; toktype = DELIMITER;   
8561   3F1B 3B 62 4B      mov d, _toktype ; $toktype
8562   3F1E DA            push d
8563   3F1F FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8563   3F23 00 00 
8564   3F25 E7            pop d
8565   3F26 FD 43         mov [d], b
8566   3F28 0A 63 40      jmp _if128_exit
8567   3F2B             _if128_else:
8568   3F2B             ; if(*prog == ':'){ 
8569   3F2B             _if129_cond:
8570   3F2B 3B 64 4B      mov d, _prog ; $prog
8571   3F2E 2A            mov b, [d]
8572   3F2F 38 00 00      mov c, 0
8573   3F32 74            mov d, b
8574   3F33 32            mov bl, [d]
8575   3F34 A7 00         mov bh, 0
8576   3F36 38 00 00      mov c, 0
8577   3F39             ; --- START RELATIONAL
8578   3F39 D7            push a
8579   3F3A 11            mov a, b
8580   3F3B FD 2E 3A 00   mov32 cb, $0000003a
8580   3F3F 00 00 
8581   3F41 B0            cmp a, b
8582   3F42 FD 71         seq ; ==
8583   3F44 E4            pop a
8584   3F45             ; --- END RELATIONAL
8585   3F45 C0 00 00      cmp b, 0
8586   3F48 C6 93 3F      je _if129_else
8587   3F4B             _if129_TRUE:
8588   3F4B             ; *t++ = *prog++; 
8589   3F4B FA FF FF      lea d, [bp + -1] ; $t
8590   3F4E 2A            mov b, [d]
8591   3F4F 38 00 00      mov c, 0
8592   3F52 FD 77         inc b
8593   3F54 FA FF FF      lea d, [bp + -1] ; $t
8594   3F57 FD 43         mov [d], b
8595   3F59 FD 7D         dec b
8596   3F5B D8            push b
8597   3F5C 3B 64 4B      mov d, _prog ; $prog
8598   3F5F 2A            mov b, [d]
8599   3F60 38 00 00      mov c, 0
8600   3F63 FD 77         inc b
8601   3F65 3B 64 4B      mov d, _prog ; $prog
8602   3F68 FD 43         mov [d], b
8603   3F6A FD 7D         dec b
8604   3F6C 74            mov d, b
8605   3F6D 32            mov bl, [d]
8606   3F6E A7 00         mov bh, 0
8607   3F70 38 00 00      mov c, 0
8608   3F73 E7            pop d
8609   3F74 FD 3E         mov [d], bl
8610   3F76             ; tok = COLON; 
8611   3F76 3B 60 4B      mov d, _tok ; $tok
8612   3F79 DA            push d
8613   3F7A FD 2E 22 00   mov32 cb, $22 ; enum element: COLON
8613   3F7E 00 00 
8614   3F80 E7            pop d
8615   3F81 FD 43         mov [d], b
8616   3F83             ; toktype = DELIMITER;   
8617   3F83 3B 62 4B      mov d, _toktype ; $toktype
8618   3F86 DA            push d
8619   3F87 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8619   3F8B 00 00 
8620   3F8D E7            pop d
8621   3F8E FD 43         mov [d], b
8622   3F90 0A 63 40      jmp _if129_exit
8623   3F93             _if129_else:
8624   3F93             ; if(*prog == ','){ 
8625   3F93             _if130_cond:
8626   3F93 3B 64 4B      mov d, _prog ; $prog
8627   3F96 2A            mov b, [d]
8628   3F97 38 00 00      mov c, 0
8629   3F9A 74            mov d, b
8630   3F9B 32            mov bl, [d]
8631   3F9C A7 00         mov bh, 0
8632   3F9E 38 00 00      mov c, 0
8633   3FA1             ; --- START RELATIONAL
8634   3FA1 D7            push a
8635   3FA2 11            mov a, b
8636   3FA3 FD 2E 2C 00   mov32 cb, $0000002c
8636   3FA7 00 00 
8637   3FA9 B0            cmp a, b
8638   3FAA FD 71         seq ; ==
8639   3FAC E4            pop a
8640   3FAD             ; --- END RELATIONAL
8641   3FAD C0 00 00      cmp b, 0
8642   3FB0 C6 FB 3F      je _if130_else
8643   3FB3             _if130_TRUE:
8644   3FB3             ; *t++ = *prog++; 
8645   3FB3 FA FF FF      lea d, [bp + -1] ; $t
8646   3FB6 2A            mov b, [d]
8647   3FB7 38 00 00      mov c, 0
8648   3FBA FD 77         inc b
8649   3FBC FA FF FF      lea d, [bp + -1] ; $t
8650   3FBF FD 43         mov [d], b
8651   3FC1 FD 7D         dec b
8652   3FC3 D8            push b
8653   3FC4 3B 64 4B      mov d, _prog ; $prog
8654   3FC7 2A            mov b, [d]
8655   3FC8 38 00 00      mov c, 0
8656   3FCB FD 77         inc b
8657   3FCD 3B 64 4B      mov d, _prog ; $prog
8658   3FD0 FD 43         mov [d], b
8659   3FD2 FD 7D         dec b
8660   3FD4 74            mov d, b
8661   3FD5 32            mov bl, [d]
8662   3FD6 A7 00         mov bh, 0
8663   3FD8 38 00 00      mov c, 0
8664   3FDB E7            pop d
8665   3FDC FD 3E         mov [d], bl
8666   3FDE             ; tok = COMMA; 
8667   3FDE 3B 60 4B      mov d, _tok ; $tok
8668   3FE1 DA            push d
8669   3FE2 FD 2E 24 00   mov32 cb, $24 ; enum element: COMMA
8669   3FE6 00 00 
8670   3FE8 E7            pop d
8671   3FE9 FD 43         mov [d], b
8672   3FEB             ; toktype = DELIMITER;   
8673   3FEB 3B 62 4B      mov d, _toktype ; $toktype
8674   3FEE DA            push d
8675   3FEF FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8675   3FF3 00 00 
8676   3FF5 E7            pop d
8677   3FF6 FD 43         mov [d], b
8678   3FF8 0A 63 40      jmp _if130_exit
8679   3FFB             _if130_else:
8680   3FFB             ; if(*prog == '.'){ 
8681   3FFB             _if131_cond:
8682   3FFB 3B 64 4B      mov d, _prog ; $prog
8683   3FFE 2A            mov b, [d]
8684   3FFF 38 00 00      mov c, 0
8685   4002 74            mov d, b
8686   4003 32            mov bl, [d]
8687   4004 A7 00         mov bh, 0
8688   4006 38 00 00      mov c, 0
8689   4009             ; --- START RELATIONAL
8690   4009 D7            push a
8691   400A 11            mov a, b
8692   400B FD 2E 2E 00   mov32 cb, $0000002e
8692   400F 00 00 
8693   4011 B0            cmp a, b
8694   4012 FD 71         seq ; ==
8695   4014 E4            pop a
8696   4015             ; --- END RELATIONAL
8697   4015 C0 00 00      cmp b, 0
8698   4018 C6 63 40      je _if131_exit
8699   401B             _if131_TRUE:
8700   401B             ; *t++ = *prog++; 
8701   401B FA FF FF      lea d, [bp + -1] ; $t
8702   401E 2A            mov b, [d]
8703   401F 38 00 00      mov c, 0
8704   4022 FD 77         inc b
8705   4024 FA FF FF      lea d, [bp + -1] ; $t
8706   4027 FD 43         mov [d], b
8707   4029 FD 7D         dec b
8708   402B D8            push b
8709   402C 3B 64 4B      mov d, _prog ; $prog
8710   402F 2A            mov b, [d]
8711   4030 38 00 00      mov c, 0
8712   4033 FD 77         inc b
8713   4035 3B 64 4B      mov d, _prog ; $prog
8714   4038 FD 43         mov [d], b
8715   403A FD 7D         dec b
8716   403C 74            mov d, b
8717   403D 32            mov bl, [d]
8718   403E A7 00         mov bh, 0
8719   4040 38 00 00      mov c, 0
8720   4043 E7            pop d
8721   4044 FD 3E         mov [d], bl
8722   4046             ; tok = DOT; 
8723   4046 3B 60 4B      mov d, _tok ; $tok
8724   4049 DA            push d
8725   404A FD 2E 25 00   mov32 cb, $25 ; enum element: DOT
8725   404E 00 00 
8726   4050 E7            pop d
8727   4051 FD 43         mov [d], b
8728   4053             ; toktype = DELIMITER;   
8729   4053 3B 62 4B      mov d, _toktype ; $toktype
8730   4056 DA            push d
8731   4057 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
8731   405B 00 00 
8732   405D E7            pop d
8733   405E FD 43         mov [d], b
8734   4060 0A 63 40      jmp _if131_exit
8735   4063             _if131_exit:
8736   4063             _if130_exit:
8737   4063             _if129_exit:
8738   4063             _if128_exit:
8739   4063             _if127_exit:
8740   4063             _if126_exit:
8741   4063             _if125_exit:
8742   4063             _if124_exit:
8743   4063             _if123_exit:
8744   4063             _if122_exit:
8745   4063             _if121_exit:
8746   4063             _if120_exit:
8747   4063             _if118_exit:
8748   4063             _if116_exit:
8749   4063             _if114_exit:
8750   4063             _if111_exit:
8751   4063             _if108_exit:
8752   4063             _if107_exit:
8753   4063             _if105_exit:
8754   4063             _if103_exit:
8755   4063             _if101_exit:
8756   4063             _if100_exit:
8757   4063             _if99_exit:
8758   4063             _if98_exit:
8759   4063             _if97_exit:
8760   4063             _if96_exit:
8761   4063             _if93_exit:
8762   4063             _if91_exit:
8763   4063             _if89_exit:
8764   4063             ; *t = '\0'; 
8765   4063 FA FF FF      lea d, [bp + -1] ; $t
8766   4066 2A            mov b, [d]
8767   4067 38 00 00      mov c, 0
8768   406A D8            push b
8769   406B FD 2E 00 00   mov32 cb, $00000000
8769   406F 00 00 
8770   4071 E7            pop d
8771   4072 FD 3E         mov [d], bl
8772   4074 F9            leave
8773   4075 09            ret
8774   4076             
8775   4076             convert_constant:
8776   4076 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8777   4079             ; char *s; 
8778   4079 52 02 00      sub sp, 2
8779   407C             ; char *t; 
8780   407C 52 02 00      sub sp, 2
8781   407F             ; t = token; 
8782   407F FA FD FF      lea d, [bp + -3] ; $t
8783   4082 DA            push d
8784   4083 3B 66 4B      mov d, _token_data ; $token
8785   4086 2D            mov b, d
8786   4087 38 00 00      mov c, 0
8787   408A E7            pop d
8788   408B FD 43         mov [d], b
8789   408D             ; s = string_const; 
8790   408D FA FF FF      lea d, [bp + -1] ; $s
8791   4090 DA            push d
8792   4091 3B 66 4C      mov d, _string_const_data ; $string_const
8793   4094 2D            mov b, d
8794   4095 38 00 00      mov c, 0
8795   4098 E7            pop d
8796   4099 FD 43         mov [d], b
8797   409B             ; if(toktype == CHAR_CONST){ 
8798   409B             _if132_cond:
8799   409B 3B 62 4B      mov d, _toktype ; $toktype
8800   409E 2A            mov b, [d]
8801   409F 38 00 00      mov c, 0
8802   40A2             ; --- START RELATIONAL
8803   40A2 D7            push a
8804   40A3 11            mov a, b
8805   40A4 FD 2E 02 00   mov32 cb, $2 ; enum element: CHAR_CONST
8805   40A8 00 00 
8806   40AA B0            cmp a, b
8807   40AB FD 71         seq ; ==
8808   40AD E4            pop a
8809   40AE             ; --- END RELATIONAL
8810   40AE C0 00 00      cmp b, 0
8811   40B1 C6 A0 42      je _if132_else
8812   40B4             _if132_TRUE:
8813   40B4             ; t++; 
8814   40B4 FA FD FF      lea d, [bp + -3] ; $t
8815   40B7 2A            mov b, [d]
8816   40B8 38 00 00      mov c, 0
8817   40BB FD 77         inc b
8818   40BD FA FD FF      lea d, [bp + -3] ; $t
8819   40C0 FD 43         mov [d], b
8820   40C2 FD 7D         dec b
8821   40C4             ; if(*t == '\\'){ 
8822   40C4             _if133_cond:
8823   40C4 FA FD FF      lea d, [bp + -3] ; $t
8824   40C7 2A            mov b, [d]
8825   40C8 38 00 00      mov c, 0
8826   40CB 74            mov d, b
8827   40CC 32            mov bl, [d]
8828   40CD A7 00         mov bh, 0
8829   40CF 38 00 00      mov c, 0
8830   40D2             ; --- START RELATIONAL
8831   40D2 D7            push a
8832   40D3 11            mov a, b
8833   40D4 FD 2E 5C 00   mov32 cb, $0000005c
8833   40D8 00 00 
8834   40DA B0            cmp a, b
8835   40DB FD 71         seq ; ==
8836   40DD E4            pop a
8837   40DE             ; --- END RELATIONAL
8838   40DE C0 00 00      cmp b, 0
8839   40E1 C6 7B 42      je _if133_else
8840   40E4             _if133_TRUE:
8841   40E4             ; t++; 
8842   40E4 FA FD FF      lea d, [bp + -3] ; $t
8843   40E7 2A            mov b, [d]
8844   40E8 38 00 00      mov c, 0
8845   40EB FD 77         inc b
8846   40ED FA FD FF      lea d, [bp + -3] ; $t
8847   40F0 FD 43         mov [d], b
8848   40F2 FD 7D         dec b
8849   40F4             ; switch(*t){ 
8850   40F4             _switch134_expr:
8851   40F4 FA FD FF      lea d, [bp + -3] ; $t
8852   40F7 2A            mov b, [d]
8853   40F8 38 00 00      mov c, 0
8854   40FB 74            mov d, b
8855   40FC 32            mov bl, [d]
8856   40FD A7 00         mov bh, 0
8857   40FF 38 00 00      mov c, 0
8858   4102             _switch134_comparisons:
8859   4102 C1 30         cmp bl, $30
8860   4104 C6 3C 41      je _switch134_case0
8861   4107 C1 61         cmp bl, $61
8862   4109 C6 59 41      je _switch134_case1
8863   410C C1 62         cmp bl, $62
8864   410E C6 76 41      je _switch134_case2
8865   4111 C1 66         cmp bl, $66
8866   4113 C6 93 41      je _switch134_case3
8867   4116 C1 6E         cmp bl, $6e
8868   4118 C6 B0 41      je _switch134_case4
8869   411B C1 72         cmp bl, $72
8870   411D C6 CD 41      je _switch134_case5
8871   4120 C1 74         cmp bl, $74
8872   4122 C6 EA 41      je _switch134_case6
8873   4125 C1 76         cmp bl, $76
8874   4127 C6 07 42      je _switch134_case7
8875   412A C1 5C         cmp bl, $5c
8876   412C C6 24 42      je _switch134_case8
8877   412F C1 27         cmp bl, $27
8878   4131 C6 41 42      je _switch134_case9
8879   4134 C1 22         cmp bl, $22
8880   4136 C6 5E 42      je _switch134_case10
8881   4139 0A 78 42      jmp _switch134_exit
8882   413C             _switch134_case0:
8883   413C             ; *s++ = '\0'; 
8884   413C FA FF FF      lea d, [bp + -1] ; $s
8885   413F 2A            mov b, [d]
8886   4140 38 00 00      mov c, 0
8887   4143 FD 77         inc b
8888   4145 FA FF FF      lea d, [bp + -1] ; $s
8889   4148 FD 43         mov [d], b
8890   414A FD 7D         dec b
8891   414C D8            push b
8892   414D FD 2E 00 00   mov32 cb, $00000000
8892   4151 00 00 
8893   4153 E7            pop d
8894   4154 FD 3E         mov [d], bl
8895   4156             ; break; 
8896   4156 0A 78 42      jmp _switch134_exit ; case break
8897   4159             _switch134_case1:
8898   4159             ; *s++ = '\a'; 
8899   4159 FA FF FF      lea d, [bp + -1] ; $s
8900   415C 2A            mov b, [d]
8901   415D 38 00 00      mov c, 0
8902   4160 FD 77         inc b
8903   4162 FA FF FF      lea d, [bp + -1] ; $s
8904   4165 FD 43         mov [d], b
8905   4167 FD 7D         dec b
8906   4169 D8            push b
8907   416A FD 2E 07 00   mov32 cb, $00000007
8907   416E 00 00 
8908   4170 E7            pop d
8909   4171 FD 3E         mov [d], bl
8910   4173             ; break; 
8911   4173 0A 78 42      jmp _switch134_exit ; case break
8912   4176             _switch134_case2:
8913   4176             ; *s++ = '\b'; 
8914   4176 FA FF FF      lea d, [bp + -1] ; $s
8915   4179 2A            mov b, [d]
8916   417A 38 00 00      mov c, 0
8917   417D FD 77         inc b
8918   417F FA FF FF      lea d, [bp + -1] ; $s
8919   4182 FD 43         mov [d], b
8920   4184 FD 7D         dec b
8921   4186 D8            push b
8922   4187 FD 2E 08 00   mov32 cb, $00000008
8922   418B 00 00 
8923   418D E7            pop d
8924   418E FD 3E         mov [d], bl
8925   4190             ; break;   
8926   4190 0A 78 42      jmp _switch134_exit ; case break
8927   4193             _switch134_case3:
8928   4193             ; *s++ = '\f'; 
8929   4193 FA FF FF      lea d, [bp + -1] ; $s
8930   4196 2A            mov b, [d]
8931   4197 38 00 00      mov c, 0
8932   419A FD 77         inc b
8933   419C FA FF FF      lea d, [bp + -1] ; $s
8934   419F FD 43         mov [d], b
8935   41A1 FD 7D         dec b
8936   41A3 D8            push b
8937   41A4 FD 2E 0C 00   mov32 cb, $0000000c
8937   41A8 00 00 
8938   41AA E7            pop d
8939   41AB FD 3E         mov [d], bl
8940   41AD             ; break; 
8941   41AD 0A 78 42      jmp _switch134_exit ; case break
8942   41B0             _switch134_case4:
8943   41B0             ; *s++ = '\n'; 
8944   41B0 FA FF FF      lea d, [bp + -1] ; $s
8945   41B3 2A            mov b, [d]
8946   41B4 38 00 00      mov c, 0
8947   41B7 FD 77         inc b
8948   41B9 FA FF FF      lea d, [bp + -1] ; $s
8949   41BC FD 43         mov [d], b
8950   41BE FD 7D         dec b
8951   41C0 D8            push b
8952   41C1 FD 2E 0A 00   mov32 cb, $0000000a
8952   41C5 00 00 
8953   41C7 E7            pop d
8954   41C8 FD 3E         mov [d], bl
8955   41CA             ; break; 
8956   41CA 0A 78 42      jmp _switch134_exit ; case break
8957   41CD             _switch134_case5:
8958   41CD             ; *s++ = '\r'; 
8959   41CD FA FF FF      lea d, [bp + -1] ; $s
8960   41D0 2A            mov b, [d]
8961   41D1 38 00 00      mov c, 0
8962   41D4 FD 77         inc b
8963   41D6 FA FF FF      lea d, [bp + -1] ; $s
8964   41D9 FD 43         mov [d], b
8965   41DB FD 7D         dec b
8966   41DD D8            push b
8967   41DE FD 2E 0D 00   mov32 cb, $0000000d
8967   41E2 00 00 
8968   41E4 E7            pop d
8969   41E5 FD 3E         mov [d], bl
8970   41E7             ; break; 
8971   41E7 0A 78 42      jmp _switch134_exit ; case break
8972   41EA             _switch134_case6:
8973   41EA             ; *s++ = '\t'; 
8974   41EA FA FF FF      lea d, [bp + -1] ; $s
8975   41ED 2A            mov b, [d]
8976   41EE 38 00 00      mov c, 0
8977   41F1 FD 77         inc b
8978   41F3 FA FF FF      lea d, [bp + -1] ; $s
8979   41F6 FD 43         mov [d], b
8980   41F8 FD 7D         dec b
8981   41FA D8            push b
8982   41FB FD 2E 09 00   mov32 cb, $00000009
8982   41FF 00 00 
8983   4201 E7            pop d
8984   4202 FD 3E         mov [d], bl
8985   4204             ; break; 
8986   4204 0A 78 42      jmp _switch134_exit ; case break
8987   4207             _switch134_case7:
8988   4207             ; *s++ = '\v'; 
8989   4207 FA FF FF      lea d, [bp + -1] ; $s
8990   420A 2A            mov b, [d]
8991   420B 38 00 00      mov c, 0
8992   420E FD 77         inc b
8993   4210 FA FF FF      lea d, [bp + -1] ; $s
8994   4213 FD 43         mov [d], b
8995   4215 FD 7D         dec b
8996   4217 D8            push b
8997   4218 FD 2E 0B 00   mov32 cb, $0000000b
8997   421C 00 00 
8998   421E E7            pop d
8999   421F FD 3E         mov [d], bl
9000   4221             ; break; 
9001   4221 0A 78 42      jmp _switch134_exit ; case break
9002   4224             _switch134_case8:
9003   4224             ; *s++ = '\\'; 
9004   4224 FA FF FF      lea d, [bp + -1] ; $s
9005   4227 2A            mov b, [d]
9006   4228 38 00 00      mov c, 0
9007   422B FD 77         inc b
9008   422D FA FF FF      lea d, [bp + -1] ; $s
9009   4230 FD 43         mov [d], b
9010   4232 FD 7D         dec b
9011   4234 D8            push b
9012   4235 FD 2E 5C 00   mov32 cb, $0000005c
9012   4239 00 00 
9013   423B E7            pop d
9014   423C FD 3E         mov [d], bl
9015   423E             ; break; 
9016   423E 0A 78 42      jmp _switch134_exit ; case break
9017   4241             _switch134_case9:
9018   4241             ; *s++ = '\''; 
9019   4241 FA FF FF      lea d, [bp + -1] ; $s
9020   4244 2A            mov b, [d]
9021   4245 38 00 00      mov c, 0
9022   4248 FD 77         inc b
9023   424A FA FF FF      lea d, [bp + -1] ; $s
9024   424D FD 43         mov [d], b
9025   424F FD 7D         dec b
9026   4251 D8            push b
9027   4252 FD 2E 27 00   mov32 cb, $00000027
9027   4256 00 00 
9028   4258 E7            pop d
9029   4259 FD 3E         mov [d], bl
9030   425B             ; break; 
9031   425B 0A 78 42      jmp _switch134_exit ; case break
9032   425E             _switch134_case10:
9033   425E             ; *s++ = '\"'; 
9034   425E FA FF FF      lea d, [bp + -1] ; $s
9035   4261 2A            mov b, [d]
9036   4262 38 00 00      mov c, 0
9037   4265 FD 77         inc b
9038   4267 FA FF FF      lea d, [bp + -1] ; $s
9039   426A FD 43         mov [d], b
9040   426C FD 7D         dec b
9041   426E D8            push b
9042   426F FD 2E 22 00   mov32 cb, $00000022
9042   4273 00 00 
9043   4275 E7            pop d
9044   4276 FD 3E         mov [d], bl
9045   4278             _switch134_exit:
9046   4278 0A 9D 42      jmp _if133_exit
9047   427B             _if133_else:
9048   427B             ; *s++ = *t; 
9049   427B FA FF FF      lea d, [bp + -1] ; $s
9050   427E 2A            mov b, [d]
9051   427F 38 00 00      mov c, 0
9052   4282 FD 77         inc b
9053   4284 FA FF FF      lea d, [bp + -1] ; $s
9054   4287 FD 43         mov [d], b
9055   4289 FD 7D         dec b
9056   428B D8            push b
9057   428C FA FD FF      lea d, [bp + -3] ; $t
9058   428F 2A            mov b, [d]
9059   4290 38 00 00      mov c, 0
9060   4293 74            mov d, b
9061   4294 32            mov bl, [d]
9062   4295 A7 00         mov bh, 0
9063   4297 38 00 00      mov c, 0
9064   429A E7            pop d
9065   429B FD 3E         mov [d], bl
9066   429D             _if133_exit:
9067   429D 0A 2D 43      jmp _if132_exit
9068   42A0             _if132_else:
9069   42A0             ; if(toktype == STRING_CONST){ 
9070   42A0             _if135_cond:
9071   42A0 3B 62 4B      mov d, _toktype ; $toktype
9072   42A3 2A            mov b, [d]
9073   42A4 38 00 00      mov c, 0
9074   42A7             ; --- START RELATIONAL
9075   42A7 D7            push a
9076   42A8 11            mov a, b
9077   42A9 FD 2E 03 00   mov32 cb, $3 ; enum element: STRING_CONST
9077   42AD 00 00 
9078   42AF B0            cmp a, b
9079   42B0 FD 71         seq ; ==
9080   42B2 E4            pop a
9081   42B3             ; --- END RELATIONAL
9082   42B3 C0 00 00      cmp b, 0
9083   42B6 C6 2D 43      je _if135_exit
9084   42B9             _if135_TRUE:
9085   42B9             ; t++; 
9086   42B9 FA FD FF      lea d, [bp + -3] ; $t
9087   42BC 2A            mov b, [d]
9088   42BD 38 00 00      mov c, 0
9089   42C0 FD 77         inc b
9090   42C2 FA FD FF      lea d, [bp + -3] ; $t
9091   42C5 FD 43         mov [d], b
9092   42C7 FD 7D         dec b
9093   42C9             ; while(*t != '\"' && *t){ 
9094   42C9             _while136_cond:
9095   42C9 FA FD FF      lea d, [bp + -3] ; $t
9096   42CC 2A            mov b, [d]
9097   42CD 38 00 00      mov c, 0
9098   42D0 74            mov d, b
9099   42D1 32            mov bl, [d]
9100   42D2 A7 00         mov bh, 0
9101   42D4 38 00 00      mov c, 0
9102   42D7             ; --- START RELATIONAL
9103   42D7 D7            push a
9104   42D8 11            mov a, b
9105   42D9 FD 2E 22 00   mov32 cb, $00000022
9105   42DD 00 00 
9106   42DF B0            cmp a, b
9107   42E0 FD 72         sneq ; !=
9108   42E2 E4            pop a
9109   42E3             ; --- END RELATIONAL
9110   42E3             ; --- START LOGICAL AND
9111   42E3 D7            push a
9112   42E4 11            mov a, b
9113   42E5 FA FD FF      lea d, [bp + -3] ; $t
9114   42E8 2A            mov b, [d]
9115   42E9 38 00 00      mov c, 0
9116   42EC 74            mov d, b
9117   42ED 32            mov bl, [d]
9118   42EE A7 00         mov bh, 0
9119   42F0 38 00 00      mov c, 0
9120   42F3 FD A7         sand a, b
9121   42F5 E4            pop a
9122   42F6             ; --- END LOGICAL AND
9123   42F6 C0 00 00      cmp b, 0
9124   42F9 C6 2A 43      je _while136_exit
9125   42FC             _while136_block:
9126   42FC             ; *s++ = *t++; 
9127   42FC FA FF FF      lea d, [bp + -1] ; $s
9128   42FF 2A            mov b, [d]
9129   4300 38 00 00      mov c, 0
9130   4303 FD 77         inc b
9131   4305 FA FF FF      lea d, [bp + -1] ; $s
9132   4308 FD 43         mov [d], b
9133   430A FD 7D         dec b
9134   430C D8            push b
9135   430D FA FD FF      lea d, [bp + -3] ; $t
9136   4310 2A            mov b, [d]
9137   4311 38 00 00      mov c, 0
9138   4314 FD 77         inc b
9139   4316 FA FD FF      lea d, [bp + -3] ; $t
9140   4319 FD 43         mov [d], b
9141   431B FD 7D         dec b
9142   431D 74            mov d, b
9143   431E 32            mov bl, [d]
9144   431F A7 00         mov bh, 0
9145   4321 38 00 00      mov c, 0
9146   4324 E7            pop d
9147   4325 FD 3E         mov [d], bl
9148   4327 0A C9 42      jmp _while136_cond
9149   432A             _while136_exit:
9150   432A 0A 2D 43      jmp _if135_exit
9151   432D             _if135_exit:
9152   432D             _if132_exit:
9153   432D             ; *s = '\0'; 
9154   432D FA FF FF      lea d, [bp + -1] ; $s
9155   4330 2A            mov b, [d]
9156   4331 38 00 00      mov c, 0
9157   4334 D8            push b
9158   4335 FD 2E 00 00   mov32 cb, $00000000
9158   4339 00 00 
9159   433B E7            pop d
9160   433C FD 3E         mov [d], bl
9161   433E F9            leave
9162   433F 09            ret
9163   4340             
9164   4340             error:
9165   4340 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9166   4343             ; printf("\nError: "); 
9167   4343             ; --- START FUNCTION CALL
9168   4343 26 54 54      mov b, _s14 ; "\nError: "
9169   4346 FD AB         swp b
9170   4348 D8            push b
9171   4349 07 F0 14      call printf
9172   434C 51 02 00      add sp, 2
9173   434F             ; --- END FUNCTION CALL
9174   434F             ; printf(msg); 
9175   434F             ; --- START FUNCTION CALL
9176   434F FA 05 00      lea d, [bp + 5] ; $msg
9177   4352 2A            mov b, [d]
9178   4353 38 00 00      mov c, 0
9179   4356 FD AB         swp b
9180   4358 D8            push b
9181   4359 07 F0 14      call printf
9182   435C 51 02 00      add sp, 2
9183   435F             ; --- END FUNCTION CALL
9184   435F             ; printf("\n"); 
9185   435F             ; --- START FUNCTION CALL
9186   435F 26 5D 54      mov b, _s15 ; "\n"
9187   4362 FD AB         swp b
9188   4364 D8            push b
9189   4365 07 F0 14      call printf
9190   4368 51 02 00      add sp, 2
9191   436B             ; --- END FUNCTION CALL
9192   436B F9            leave
9193   436C 09            ret
9194   436D             
9195   436D             last_cmd_insert:
9196   436D F8 00 00      enter 0 ; (push bp; mov bp, sp)
9197   4370             ; if(last_cmd[0]){ 
9198   4370             _if137_cond:
9199   4370 3B 68 52      mov d, _last_cmd_data ; $last_cmd
9200   4373 D7            push a
9201   4374 DA            push d
9202   4375 FD 2E 00 00   mov32 cb, $00000000
9202   4379 00 00 
9203   437B E7            pop d
9204   437C 5A            add d, b
9205   437D E4            pop a
9206   437E 32            mov bl, [d]
9207   437F A7 00         mov bh, 0
9208   4381 38 00 00      mov c, 0
9209   4384 C0 00 00      cmp b, 0
9210   4387 C6 B7 43      je _if137_exit
9211   438A             _if137_TRUE:
9212   438A             ; strcpy(command, last_cmd); 
9213   438A             ; --- START FUNCTION CALL
9214   438A 3B 68 52      mov d, _last_cmd_data ; $last_cmd
9215   438D 2D            mov b, d
9216   438E 38 00 00      mov c, 0
9217   4391 FD AB         swp b
9218   4393 D8            push b
9219   4394 3B 68 4D      mov d, _command_data ; $command
9220   4397 2D            mov b, d
9221   4398 38 00 00      mov c, 0
9222   439B FD AB         swp b
9223   439D D8            push b
9224   439E 07 BF 0F      call strcpy
9225   43A1 51 04 00      add sp, 4
9226   43A4             ; --- END FUNCTION CALL
9227   43A4             ; printf(command); 
9228   43A4             ; --- START FUNCTION CALL
9229   43A4 3B 68 4D      mov d, _command_data ; $command
9230   43A7 2D            mov b, d
9231   43A8 38 00 00      mov c, 0
9232   43AB FD AB         swp b
9233   43AD D8            push b
9234   43AE 07 F0 14      call printf
9235   43B1 51 02 00      add sp, 2
9236   43B4             ; --- END FUNCTION CALL
9237   43B4 0A B7 43      jmp _if137_exit
9238   43B7             _if137_exit:
9239   43B7 F9            leave
9240   43B8 09            ret
9241   43B9             
9242   43B9             new_str_var:
9243   43B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9244   43BC             ; variables[vars_tos].var_type = SHELL_VAR_TYP_STR; 
9245   43BC 3B E8 52      mov d, _variables_data ; $variables
9246   43BF D7            push a
9247   43C0 DA            push d
9248   43C1 3B BA 53      mov d, _vars_tos ; $vars_tos
9249   43C4 2A            mov b, [d]
9250   43C5 38 00 00      mov c, 0
9251   43C8 E7            pop d
9252   43C9 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9253   43CD E4            pop a
9254   43CE 58 10 00      add d, 16
9255   43D1 DA            push d
9256   43D2 FD 2E 00 00   mov32 cb, $0 ; enum element: SHELL_VAR_TYP_STR
9256   43D6 00 00 
9257   43D8 E7            pop d
9258   43D9 FD 3E         mov [d], bl
9259   43DB             ; variables[vars_tos].as_string = alloc(64); 
9260   43DB 3B E8 52      mov d, _variables_data ; $variables
9261   43DE D7            push a
9262   43DF DA            push d
9263   43E0 3B BA 53      mov d, _vars_tos ; $vars_tos
9264   43E3 2A            mov b, [d]
9265   43E4 38 00 00      mov c, 0
9266   43E7 E7            pop d
9267   43E8 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9268   43EC E4            pop a
9269   43ED 58 11 00      add d, 17
9270   43F0 DA            push d
9271   43F1             ; --- START FUNCTION CALL
9272   43F1 FD 2E 40 00   mov32 cb, $00000040
9272   43F5 00 00 
9273   43F7 FD AB         swp b
9274   43F9 D8            push b
9275   43FA 07 02 14      call alloc
9276   43FD 51 02 00      add sp, 2
9277   4400             ; --- END FUNCTION CALL
9278   4400 E7            pop d
9279   4401 FD 43         mov [d], b
9280   4403             ; strcpy(variables[vars_tos].varname, varname); 
9281   4403             ; --- START FUNCTION CALL
9282   4403 FA 05 00      lea d, [bp + 5] ; $varname
9283   4406 2A            mov b, [d]
9284   4407 38 00 00      mov c, 0
9285   440A FD AB         swp b
9286   440C D8            push b
9287   440D 3B E8 52      mov d, _variables_data ; $variables
9288   4410 D7            push a
9289   4411 DA            push d
9290   4412 3B BA 53      mov d, _vars_tos ; $vars_tos
9291   4415 2A            mov b, [d]
9292   4416 38 00 00      mov c, 0
9293   4419 E7            pop d
9294   441A FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9295   441E E4            pop a
9296   441F 58 00 00      add d, 0
9297   4422 2D            mov b, d
9298   4423 38 00 00      mov c, 0
9299   4426 FD AB         swp b
9300   4428 D8            push b
9301   4429 07 BF 0F      call strcpy
9302   442C 51 04 00      add sp, 4
9303   442F             ; --- END FUNCTION CALL
9304   442F             ; strcpy(variables[vars_tos].as_string, strval); 
9305   442F             ; --- START FUNCTION CALL
9306   442F FA 07 00      lea d, [bp + 7] ; $strval
9307   4432 2A            mov b, [d]
9308   4433 38 00 00      mov c, 0
9309   4436 FD AB         swp b
9310   4438 D8            push b
9311   4439 3B E8 52      mov d, _variables_data ; $variables
9312   443C D7            push a
9313   443D DA            push d
9314   443E 3B BA 53      mov d, _vars_tos ; $vars_tos
9315   4441 2A            mov b, [d]
9316   4442 38 00 00      mov c, 0
9317   4445 E7            pop d
9318   4446 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9319   444A E4            pop a
9320   444B 58 11 00      add d, 17
9321   444E 2A            mov b, [d]
9322   444F 38 00 00      mov c, 0
9323   4452 FD AB         swp b
9324   4454 D8            push b
9325   4455 07 BF 0F      call strcpy
9326   4458 51 04 00      add sp, 4
9327   445B             ; --- END FUNCTION CALL
9328   445B             ; vars_tos++; 
9329   445B 3B BA 53      mov d, _vars_tos ; $vars_tos
9330   445E 2A            mov b, [d]
9331   445F 38 00 00      mov c, 0
9332   4462 11            mov a, b
9333   4463 FD 77         inc b
9334   4465 3B BA 53      mov d, _vars_tos ; $vars_tos
9335   4468 FD 43         mov [d], b
9336   446A 27            mov b, a
9337   446B             ; return vars_tos - 1; 
9338   446B 3B BA 53      mov d, _vars_tos ; $vars_tos
9339   446E 2A            mov b, [d]
9340   446F 38 00 00      mov c, 0
9341   4472             ; --- START TERMS
9342   4472 D7            push a
9343   4473 11            mov a, b
9344   4474 FD 2E 01 00   mov32 cb, $00000001
9344   4478 00 00 
9345   447A 60            sub a, b
9346   447B 27            mov b, a
9347   447C E4            pop a
9348   447D             ; --- END TERMS
9349   447D F9            leave
9350   447E 09            ret
9351   447F             
9352   447F             set_str_var:
9353   447F F8 00 00      enter 0 ; (push bp; mov bp, sp)
9354   4482             ; int var_index; 
9355   4482 52 02 00      sub sp, 2
9356   4485             ; for(var_index = 0; var_index < vars_tos; var_index++){ 
9357   4485             _for138_init:
9358   4485 FA FF FF      lea d, [bp + -1] ; $var_index
9359   4488 DA            push d
9360   4489 FD 2E 00 00   mov32 cb, $00000000
9360   448D 00 00 
9361   448F E7            pop d
9362   4490 FD 43         mov [d], b
9363   4492             _for138_cond:
9364   4492 FA FF FF      lea d, [bp + -1] ; $var_index
9365   4495 2A            mov b, [d]
9366   4496 38 00 00      mov c, 0
9367   4499             ; --- START RELATIONAL
9368   4499 D7            push a
9369   449A 11            mov a, b
9370   449B 3B BA 53      mov d, _vars_tos ; $vars_tos
9371   449E 2A            mov b, [d]
9372   449F 38 00 00      mov c, 0
9373   44A2 B0            cmp a, b
9374   44A3 FD 73         slt ; < (signed)
9375   44A5 E4            pop a
9376   44A6             ; --- END RELATIONAL
9377   44A6 C0 00 00      cmp b, 0
9378   44A9 C6 29 45      je _for138_exit
9379   44AC             _for138_block:
9380   44AC             ; if(!strcmp(variables[var_index].varname, varname)){ 
9381   44AC             _if139_cond:
9382   44AC             ; --- START FUNCTION CALL
9383   44AC FA 05 00      lea d, [bp + 5] ; $varname
9384   44AF 2A            mov b, [d]
9385   44B0 38 00 00      mov c, 0
9386   44B3 FD AB         swp b
9387   44B5 D8            push b
9388   44B6 3B E8 52      mov d, _variables_data ; $variables
9389   44B9 D7            push a
9390   44BA DA            push d
9391   44BB FA FF FF      lea d, [bp + -1] ; $var_index
9392   44BE 2A            mov b, [d]
9393   44BF 38 00 00      mov c, 0
9394   44C2 E7            pop d
9395   44C3 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9396   44C7 E4            pop a
9397   44C8 58 00 00      add d, 0
9398   44CB 2D            mov b, d
9399   44CC 38 00 00      mov c, 0
9400   44CF FD AB         swp b
9401   44D1 D8            push b
9402   44D2 07 39 10      call strcmp
9403   44D5 51 04 00      add sp, 4
9404   44D8             ; --- END FUNCTION CALL
9405   44D8 C0 00 00      cmp b, 0
9406   44DB C6 16 45      je _if139_exit
9407   44DE             _if139_TRUE:
9408   44DE             ; strcpy(variables[var_index].as_string, strval); 
9409   44DE             ; --- START FUNCTION CALL
9410   44DE FA 07 00      lea d, [bp + 7] ; $strval
9411   44E1 2A            mov b, [d]
9412   44E2 38 00 00      mov c, 0
9413   44E5 FD AB         swp b
9414   44E7 D8            push b
9415   44E8 3B E8 52      mov d, _variables_data ; $variables
9416   44EB D7            push a
9417   44EC DA            push d
9418   44ED FA FF FF      lea d, [bp + -1] ; $var_index
9419   44F0 2A            mov b, [d]
9420   44F1 38 00 00      mov c, 0
9421   44F4 E7            pop d
9422   44F5 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9423   44F9 E4            pop a
9424   44FA 58 11 00      add d, 17
9425   44FD 2A            mov b, [d]
9426   44FE 38 00 00      mov c, 0
9427   4501 FD AB         swp b
9428   4503 D8            push b
9429   4504 07 BF 0F      call strcpy
9430   4507 51 04 00      add sp, 4
9431   450A             ; --- END FUNCTION CALL
9432   450A             ; return var_index; 
9433   450A FA FF FF      lea d, [bp + -1] ; $var_index
9434   450D 2A            mov b, [d]
9435   450E 38 00 00      mov c, 0
9436   4511 F9            leave
9437   4512 09            ret
9438   4513 0A 16 45      jmp _if139_exit
9439   4516             _if139_exit:
9440   4516             _for138_update:
9441   4516 FA FF FF      lea d, [bp + -1] ; $var_index
9442   4519 2A            mov b, [d]
9443   451A 38 00 00      mov c, 0
9444   451D 11            mov a, b
9445   451E FD 77         inc b
9446   4520 FA FF FF      lea d, [bp + -1] ; $var_index
9447   4523 FD 43         mov [d], b
9448   4525 27            mov b, a
9449   4526 0A 92 44      jmp _for138_cond
9450   4529             _for138_exit:
9451   4529             ; printf("Error: Variable does not exist."); 
9452   4529             ; --- START FUNCTION CALL
9453   4529 26 5F 54      mov b, _s16 ; "Error: Variable does not exist."
9454   452C FD AB         swp b
9455   452E D8            push b
9456   452F 07 F0 14      call printf
9457   4532 51 02 00      add sp, 2
9458   4535             ; --- END FUNCTION CALL
9459   4535 F9            leave
9460   4536 09            ret
9461   4537             
9462   4537             set_int_var:
9463   4537 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9464   453A             ; int i; 
9465   453A 52 02 00      sub sp, 2
9466   453D             ; for(i = 0; i < vars_tos; i++){ 
9467   453D             _for140_init:
9468   453D FA FF FF      lea d, [bp + -1] ; $i
9469   4540 DA            push d
9470   4541 FD 2E 00 00   mov32 cb, $00000000
9470   4545 00 00 
9471   4547 E7            pop d
9472   4548 FD 43         mov [d], b
9473   454A             _for140_cond:
9474   454A FA FF FF      lea d, [bp + -1] ; $i
9475   454D 2A            mov b, [d]
9476   454E 38 00 00      mov c, 0
9477   4551             ; --- START RELATIONAL
9478   4551 D7            push a
9479   4552 11            mov a, b
9480   4553 3B BA 53      mov d, _vars_tos ; $vars_tos
9481   4556 2A            mov b, [d]
9482   4557 38 00 00      mov c, 0
9483   455A B0            cmp a, b
9484   455B FD 73         slt ; < (signed)
9485   455D E4            pop a
9486   455E             ; --- END RELATIONAL
9487   455E C0 00 00      cmp b, 0
9488   4561 C6 D5 45      je _for140_exit
9489   4564             _for140_block:
9490   4564             ; if(!strcmp(variables[i].varname, varname)){ 
9491   4564             _if141_cond:
9492   4564             ; --- START FUNCTION CALL
9493   4564 FA 05 00      lea d, [bp + 5] ; $varname
9494   4567 2A            mov b, [d]
9495   4568 38 00 00      mov c, 0
9496   456B FD AB         swp b
9497   456D D8            push b
9498   456E 3B E8 52      mov d, _variables_data ; $variables
9499   4571 D7            push a
9500   4572 DA            push d
9501   4573 FA FF FF      lea d, [bp + -1] ; $i
9502   4576 2A            mov b, [d]
9503   4577 38 00 00      mov c, 0
9504   457A E7            pop d
9505   457B FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9506   457F E4            pop a
9507   4580 58 00 00      add d, 0
9508   4583 2D            mov b, d
9509   4584 38 00 00      mov c, 0
9510   4587 FD AB         swp b
9511   4589 D8            push b
9512   458A 07 39 10      call strcmp
9513   458D 51 04 00      add sp, 4
9514   4590             ; --- END FUNCTION CALL
9515   4590 C0 00 00      cmp b, 0
9516   4593 C6 C2 45      je _if141_exit
9517   4596             _if141_TRUE:
9518   4596             ; variables[vars_tos].as_int = as_int; 
9519   4596 3B E8 52      mov d, _variables_data ; $variables
9520   4599 D7            push a
9521   459A DA            push d
9522   459B 3B BA 53      mov d, _vars_tos ; $vars_tos
9523   459E 2A            mov b, [d]
9524   459F 38 00 00      mov c, 0
9525   45A2 E7            pop d
9526   45A3 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9527   45A7 E4            pop a
9528   45A8 58 13 00      add d, 19
9529   45AB DA            push d
9530   45AC FA 07 00      lea d, [bp + 7] ; $as_int
9531   45AF 2A            mov b, [d]
9532   45B0 38 00 00      mov c, 0
9533   45B3 E7            pop d
9534   45B4 FD 43         mov [d], b
9535   45B6             ; return i; 
9536   45B6 FA FF FF      lea d, [bp + -1] ; $i
9537   45B9 2A            mov b, [d]
9538   45BA 38 00 00      mov c, 0
9539   45BD F9            leave
9540   45BE 09            ret
9541   45BF 0A C2 45      jmp _if141_exit
9542   45C2             _if141_exit:
9543   45C2             _for140_update:
9544   45C2 FA FF FF      lea d, [bp + -1] ; $i
9545   45C5 2A            mov b, [d]
9546   45C6 38 00 00      mov c, 0
9547   45C9 11            mov a, b
9548   45CA FD 77         inc b
9549   45CC FA FF FF      lea d, [bp + -1] ; $i
9550   45CF FD 43         mov [d], b
9551   45D1 27            mov b, a
9552   45D2 0A 4A 45      jmp _for140_cond
9553   45D5             _for140_exit:
9554   45D5             ; variables[vars_tos].var_type = SHELL_VAR_TYP_INT; 
9555   45D5 3B E8 52      mov d, _variables_data ; $variables
9556   45D8 D7            push a
9557   45D9 DA            push d
9558   45DA 3B BA 53      mov d, _vars_tos ; $vars_tos
9559   45DD 2A            mov b, [d]
9560   45DE 38 00 00      mov c, 0
9561   45E1 E7            pop d
9562   45E2 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9563   45E6 E4            pop a
9564   45E7 58 10 00      add d, 16
9565   45EA DA            push d
9566   45EB FD 2E 01 00   mov32 cb, $1 ; enum element: SHELL_VAR_TYP_INT
9566   45EF 00 00 
9567   45F1 E7            pop d
9568   45F2 FD 3E         mov [d], bl
9569   45F4             ; strcpy(variables[vars_tos].varname, varname); 
9570   45F4             ; --- START FUNCTION CALL
9571   45F4 FA 05 00      lea d, [bp + 5] ; $varname
9572   45F7 2A            mov b, [d]
9573   45F8 38 00 00      mov c, 0
9574   45FB FD AB         swp b
9575   45FD D8            push b
9576   45FE 3B E8 52      mov d, _variables_data ; $variables
9577   4601 D7            push a
9578   4602 DA            push d
9579   4603 3B BA 53      mov d, _vars_tos ; $vars_tos
9580   4606 2A            mov b, [d]
9581   4607 38 00 00      mov c, 0
9582   460A E7            pop d
9583   460B FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9584   460F E4            pop a
9585   4610 58 00 00      add d, 0
9586   4613 2D            mov b, d
9587   4614 38 00 00      mov c, 0
9588   4617 FD AB         swp b
9589   4619 D8            push b
9590   461A 07 BF 0F      call strcpy
9591   461D 51 04 00      add sp, 4
9592   4620             ; --- END FUNCTION CALL
9593   4620             ; variables[vars_tos].as_int = as_int; 
9594   4620 3B E8 52      mov d, _variables_data ; $variables
9595   4623 D7            push a
9596   4624 DA            push d
9597   4625 3B BA 53      mov d, _vars_tos ; $vars_tos
9598   4628 2A            mov b, [d]
9599   4629 38 00 00      mov c, 0
9600   462C E7            pop d
9601   462D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9602   4631 E4            pop a
9603   4632 58 13 00      add d, 19
9604   4635 DA            push d
9605   4636 FA 07 00      lea d, [bp + 7] ; $as_int
9606   4639 2A            mov b, [d]
9607   463A 38 00 00      mov c, 0
9608   463D E7            pop d
9609   463E FD 43         mov [d], b
9610   4640             ; vars_tos++; 
9611   4640 3B BA 53      mov d, _vars_tos ; $vars_tos
9612   4643 2A            mov b, [d]
9613   4644 38 00 00      mov c, 0
9614   4647 11            mov a, b
9615   4648 FD 77         inc b
9616   464A 3B BA 53      mov d, _vars_tos ; $vars_tos
9617   464D FD 43         mov [d], b
9618   464F 27            mov b, a
9619   4650             ; return vars_tos - 1; 
9620   4650 3B BA 53      mov d, _vars_tos ; $vars_tos
9621   4653 2A            mov b, [d]
9622   4654 38 00 00      mov c, 0
9623   4657             ; --- START TERMS
9624   4657 D7            push a
9625   4658 11            mov a, b
9626   4659 FD 2E 01 00   mov32 cb, $00000001
9626   465D 00 00 
9627   465F 60            sub a, b
9628   4660 27            mov b, a
9629   4661 E4            pop a
9630   4662             ; --- END TERMS
9631   4662 F9            leave
9632   4663 09            ret
9633   4664             
9634   4664             get_var_index:
9635   4664 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9636   4667             ; int i; 
9637   4667 52 02 00      sub sp, 2
9638   466A             ; for(i = 0; i < vars_tos; i++) 
9639   466A             _for142_init:
9640   466A FA FF FF      lea d, [bp + -1] ; $i
9641   466D DA            push d
9642   466E FD 2E 00 00   mov32 cb, $00000000
9642   4672 00 00 
9643   4674 E7            pop d
9644   4675 FD 43         mov [d], b
9645   4677             _for142_cond:
9646   4677 FA FF FF      lea d, [bp + -1] ; $i
9647   467A 2A            mov b, [d]
9648   467B 38 00 00      mov c, 0
9649   467E             ; --- START RELATIONAL
9650   467E D7            push a
9651   467F 11            mov a, b
9652   4680 3B BA 53      mov d, _vars_tos ; $vars_tos
9653   4683 2A            mov b, [d]
9654   4684 38 00 00      mov c, 0
9655   4687 B0            cmp a, b
9656   4688 FD 73         slt ; < (signed)
9657   468A E4            pop a
9658   468B             ; --- END RELATIONAL
9659   468B C0 00 00      cmp b, 0
9660   468E C6 E2 46      je _for142_exit
9661   4691             _for142_block:
9662   4691             ; if(!strcmp(variables[i].varname, varname)) return i; 
9663   4691             _if143_cond:
9664   4691             ; --- START FUNCTION CALL
9665   4691 FA 05 00      lea d, [bp + 5] ; $varname
9666   4694 2A            mov b, [d]
9667   4695 38 00 00      mov c, 0
9668   4698 FD AB         swp b
9669   469A D8            push b
9670   469B 3B E8 52      mov d, _variables_data ; $variables
9671   469E D7            push a
9672   469F DA            push d
9673   46A0 FA FF FF      lea d, [bp + -1] ; $i
9674   46A3 2A            mov b, [d]
9675   46A4 38 00 00      mov c, 0
9676   46A7 E7            pop d
9677   46A8 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9678   46AC E4            pop a
9679   46AD 58 00 00      add d, 0
9680   46B0 2D            mov b, d
9681   46B1 38 00 00      mov c, 0
9682   46B4 FD AB         swp b
9683   46B6 D8            push b
9684   46B7 07 39 10      call strcmp
9685   46BA 51 04 00      add sp, 4
9686   46BD             ; --- END FUNCTION CALL
9687   46BD C0 00 00      cmp b, 0
9688   46C0 C6 CF 46      je _if143_exit
9689   46C3             _if143_TRUE:
9690   46C3             ; return i; 
9691   46C3 FA FF FF      lea d, [bp + -1] ; $i
9692   46C6 2A            mov b, [d]
9693   46C7 38 00 00      mov c, 0
9694   46CA F9            leave
9695   46CB 09            ret
9696   46CC 0A CF 46      jmp _if143_exit
9697   46CF             _if143_exit:
9698   46CF             _for142_update:
9699   46CF FA FF FF      lea d, [bp + -1] ; $i
9700   46D2 2A            mov b, [d]
9701   46D3 38 00 00      mov c, 0
9702   46D6 11            mov a, b
9703   46D7 FD 77         inc b
9704   46D9 FA FF FF      lea d, [bp + -1] ; $i
9705   46DC FD 43         mov [d], b
9706   46DE 27            mov b, a
9707   46DF 0A 77 46      jmp _for142_cond
9708   46E2             _for142_exit:
9709   46E2             ; return -1; 
9710   46E2 FD 2E 01 00   mov32 cb, $00000001
9710   46E6 00 00 
9711   46E8 FD 97         neg b
9712   46EA F9            leave
9713   46EB 09            ret
9714   46EC             
9715   46EC             get_var_type:
9716   46EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
9717   46EF             ; int i; 
9718   46EF 52 02 00      sub sp, 2
9719   46F2             ; for(i = 0; i < vars_tos; i++) 
9720   46F2             _for144_init:
9721   46F2 FA FF FF      lea d, [bp + -1] ; $i
9722   46F5 DA            push d
9723   46F6 FD 2E 00 00   mov32 cb, $00000000
9723   46FA 00 00 
9724   46FC E7            pop d
9725   46FD FD 43         mov [d], b
9726   46FF             _for144_cond:
9727   46FF FA FF FF      lea d, [bp + -1] ; $i
9728   4702 2A            mov b, [d]
9729   4703 38 00 00      mov c, 0
9730   4706             ; --- START RELATIONAL
9731   4706 D7            push a
9732   4707 11            mov a, b
9733   4708 3B BA 53      mov d, _vars_tos ; $vars_tos
9734   470B 2A            mov b, [d]
9735   470C 38 00 00      mov c, 0
9736   470F B0            cmp a, b
9737   4710 FD 73         slt ; < (signed)
9738   4712 E4            pop a
9739   4713             ; --- END RELATIONAL
9740   4713 C0 00 00      cmp b, 0
9741   4716 C6 7E 47      je _for144_exit
9742   4719             _for144_block:
9743   4719             ; if(!strcmp(variables[i].varname, varname)) return variables[i].var_type; 
9744   4719             _if145_cond:
9745   4719             ; --- START FUNCTION CALL
9746   4719 FA 05 00      lea d, [bp + 5] ; $varname
9747   471C 2A            mov b, [d]
9748   471D 38 00 00      mov c, 0
9749   4720 FD AB         swp b
9750   4722 D8            push b
9751   4723 3B E8 52      mov d, _variables_data ; $variables
9752   4726 D7            push a
9753   4727 DA            push d
9754   4728 FA FF FF      lea d, [bp + -1] ; $i
9755   472B 2A            mov b, [d]
9756   472C 38 00 00      mov c, 0
9757   472F E7            pop d
9758   4730 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9759   4734 E4            pop a
9760   4735 58 00 00      add d, 0
9761   4738 2D            mov b, d
9762   4739 38 00 00      mov c, 0
9763   473C FD AB         swp b
9764   473E D8            push b
9765   473F 07 39 10      call strcmp
9766   4742 51 04 00      add sp, 4
9767   4745             ; --- END FUNCTION CALL
9768   4745 C0 00 00      cmp b, 0
9769   4748 C6 6B 47      je _if145_exit
9770   474B             _if145_TRUE:
9771   474B             ; return variables[i].var_type; 
9772   474B 3B E8 52      mov d, _variables_data ; $variables
9773   474E D7            push a
9774   474F DA            push d
9775   4750 FA FF FF      lea d, [bp + -1] ; $i
9776   4753 2A            mov b, [d]
9777   4754 38 00 00      mov c, 0
9778   4757 E7            pop d
9779   4758 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9780   475C E4            pop a
9781   475D 58 10 00      add d, 16
9782   4760 32            mov bl, [d]
9783   4761 A7 00         mov bh, 0
9784   4763 38 00 00      mov c, 0
9785   4766 F9            leave
9786   4767 09            ret
9787   4768 0A 6B 47      jmp _if145_exit
9788   476B             _if145_exit:
9789   476B             _for144_update:
9790   476B FA FF FF      lea d, [bp + -1] ; $i
9791   476E 2A            mov b, [d]
9792   476F 38 00 00      mov c, 0
9793   4772 11            mov a, b
9794   4773 FD 77         inc b
9795   4775 FA FF FF      lea d, [bp + -1] ; $i
9796   4778 FD 43         mov [d], b
9797   477A 27            mov b, a
9798   477B 0A FF 46      jmp _for144_cond
9799   477E             _for144_exit:
9800   477E             ; return -1; 
9801   477E FD 2E 01 00   mov32 cb, $00000001
9801   4782 00 00 
9802   4784 FD 97         neg b
9803   4786 F9            leave
9804   4787 09            ret
9805   4788             
9806   4788             show_var:
9807   4788 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9808   478B             ; int i; 
9809   478B 52 02 00      sub sp, 2
9810   478E             ; for(i = 0; i < vars_tos; i++){ 
9811   478E             _for146_init:
9812   478E FA FF FF      lea d, [bp + -1] ; $i
9813   4791 DA            push d
9814   4792 FD 2E 00 00   mov32 cb, $00000000
9814   4796 00 00 
9815   4798 E7            pop d
9816   4799 FD 43         mov [d], b
9817   479B             _for146_cond:
9818   479B FA FF FF      lea d, [bp + -1] ; $i
9819   479E 2A            mov b, [d]
9820   479F 38 00 00      mov c, 0
9821   47A2             ; --- START RELATIONAL
9822   47A2 D7            push a
9823   47A3 11            mov a, b
9824   47A4 3B BA 53      mov d, _vars_tos ; $vars_tos
9825   47A7 2A            mov b, [d]
9826   47A8 38 00 00      mov c, 0
9827   47AB B0            cmp a, b
9828   47AC FD 73         slt ; < (signed)
9829   47AE E4            pop a
9830   47AF             ; --- END RELATIONAL
9831   47AF C0 00 00      cmp b, 0
9832   47B2 C6 B0 48      je _for146_exit
9833   47B5             _for146_block:
9834   47B5             ; if(!strcmp(variables[i].varname, varname)){ 
9835   47B5             _if147_cond:
9836   47B5             ; --- START FUNCTION CALL
9837   47B5 FA 05 00      lea d, [bp + 5] ; $varname
9838   47B8 2A            mov b, [d]
9839   47B9 38 00 00      mov c, 0
9840   47BC FD AB         swp b
9841   47BE D8            push b
9842   47BF 3B E8 52      mov d, _variables_data ; $variables
9843   47C2 D7            push a
9844   47C3 DA            push d
9845   47C4 FA FF FF      lea d, [bp + -1] ; $i
9846   47C7 2A            mov b, [d]
9847   47C8 38 00 00      mov c, 0
9848   47CB E7            pop d
9849   47CC FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9850   47D0 E4            pop a
9851   47D1 58 00 00      add d, 0
9852   47D4 2D            mov b, d
9853   47D5 38 00 00      mov c, 0
9854   47D8 FD AB         swp b
9855   47DA D8            push b
9856   47DB 07 39 10      call strcmp
9857   47DE 51 04 00      add sp, 4
9858   47E1             ; --- END FUNCTION CALL
9859   47E1 C0 00 00      cmp b, 0
9860   47E4 C6 9D 48      je _if147_exit
9861   47E7             _if147_TRUE:
9862   47E7             ; if(variables[i].var_type == SHELL_VAR_TYP_INT){ 
9863   47E7             _if148_cond:
9864   47E7 3B E8 52      mov d, _variables_data ; $variables
9865   47EA D7            push a
9866   47EB DA            push d
9867   47EC FA FF FF      lea d, [bp + -1] ; $i
9868   47EF 2A            mov b, [d]
9869   47F0 38 00 00      mov c, 0
9870   47F3 E7            pop d
9871   47F4 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9872   47F8 E4            pop a
9873   47F9 58 10 00      add d, 16
9874   47FC 32            mov bl, [d]
9875   47FD A7 00         mov bh, 0
9876   47FF 38 00 00      mov c, 0
9877   4802             ; --- START RELATIONAL
9878   4802 D7            push a
9879   4803 11            mov a, b
9880   4804 FD 2E 01 00   mov32 cb, $1 ; enum element: SHELL_VAR_TYP_INT
9880   4808 00 00 
9881   480A B0            cmp a, b
9882   480B FD 71         seq ; ==
9883   480D E4            pop a
9884   480E             ; --- END RELATIONAL
9885   480E C0 00 00      cmp b, 0
9886   4811 C6 3F 48      je _if148_else
9887   4814             _if148_TRUE:
9888   4814             ; printf("%d", variables[i].as_int); 
9889   4814             ; --- START FUNCTION CALL
9890   4814 3B E8 52      mov d, _variables_data ; $variables
9891   4817 D7            push a
9892   4818 DA            push d
9893   4819 FA FF FF      lea d, [bp + -1] ; $i
9894   481C 2A            mov b, [d]
9895   481D 38 00 00      mov c, 0
9896   4820 E7            pop d
9897   4821 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9898   4825 E4            pop a
9899   4826 58 13 00      add d, 19
9900   4829 2A            mov b, [d]
9901   482A 38 00 00      mov c, 0
9902   482D FD AB         swp b
9903   482F D8            push b
9904   4830 26 7F 54      mov b, _s17 ; "%d"
9905   4833 FD AB         swp b
9906   4835 D8            push b
9907   4836 07 F0 14      call printf
9908   4839 51 04 00      add sp, 4
9909   483C             ; --- END FUNCTION CALL
9910   483C 0A 91 48      jmp _if148_exit
9911   483F             _if148_else:
9912   483F             ; if(variables[i].var_type == SHELL_VAR_TYP_STR){ 
9913   483F             _if149_cond:
9914   483F 3B E8 52      mov d, _variables_data ; $variables
9915   4842 D7            push a
9916   4843 DA            push d
9917   4844 FA FF FF      lea d, [bp + -1] ; $i
9918   4847 2A            mov b, [d]
9919   4848 38 00 00      mov c, 0
9920   484B E7            pop d
9921   484C FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9922   4850 E4            pop a
9923   4851 58 10 00      add d, 16
9924   4854 32            mov bl, [d]
9925   4855 A7 00         mov bh, 0
9926   4857 38 00 00      mov c, 0
9927   485A             ; --- START RELATIONAL
9928   485A D7            push a
9929   485B 11            mov a, b
9930   485C FD 2E 00 00   mov32 cb, $0 ; enum element: SHELL_VAR_TYP_STR
9930   4860 00 00 
9931   4862 B0            cmp a, b
9932   4863 FD 71         seq ; ==
9933   4865 E4            pop a
9934   4866             ; --- END RELATIONAL
9935   4866 C0 00 00      cmp b, 0
9936   4869 C6 91 48      je _if149_exit
9937   486C             _if149_TRUE:
9938   486C             ; printf(variables[i].as_string); 
9939   486C             ; --- START FUNCTION CALL
9940   486C 3B E8 52      mov d, _variables_data ; $variables
9941   486F D7            push a
9942   4870 DA            push d
9943   4871 FA FF FF      lea d, [bp + -1] ; $i
9944   4874 2A            mov b, [d]
9945   4875 38 00 00      mov c, 0
9946   4878 E7            pop d
9947   4879 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
9948   487D E4            pop a
9949   487E 58 11 00      add d, 17
9950   4881 2A            mov b, [d]
9951   4882 38 00 00      mov c, 0
9952   4885 FD AB         swp b
9953   4887 D8            push b
9954   4888 07 F0 14      call printf
9955   488B 51 02 00      add sp, 2
9956   488E             ; --- END FUNCTION CALL
9957   488E 0A 91 48      jmp _if149_exit
9958   4891             _if149_exit:
9959   4891             _if148_exit:
9960   4891             ; return i; 
9961   4891 FA FF FF      lea d, [bp + -1] ; $i
9962   4894 2A            mov b, [d]
9963   4895 38 00 00      mov c, 0
9964   4898 F9            leave
9965   4899 09            ret
9966   489A 0A 9D 48      jmp _if147_exit
9967   489D             _if147_exit:
9968   489D             _for146_update:
9969   489D FA FF FF      lea d, [bp + -1] ; $i
9970   48A0 2A            mov b, [d]
9971   48A1 38 00 00      mov c, 0
9972   48A4 11            mov a, b
9973   48A5 FD 77         inc b
9974   48A7 FA FF FF      lea d, [bp + -1] ; $i
9975   48AA FD 43         mov [d], b
9976   48AC 27            mov b, a
9977   48AD 0A 9B 47      jmp _for146_cond
9978   48B0             _for146_exit:
9979   48B0             ; error("Undeclared variable."); 
9980   48B0             ; --- START FUNCTION CALL
9981   48B0 26 82 54      mov b, _s18 ; "Undeclared variable."
9982   48B3 FD AB         swp b
9983   48B5 D8            push b
9984   48B6 07 40 43      call error
9985   48B9 51 02 00      add sp, 2
9986   48BC             ; --- END FUNCTION CALL
9987   48BC F9            leave
9988   48BD 09            ret
9989   48BE             
9990   48BE             get_shell_var_strval:
9991   48BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
9992   48C1             ; return variables[index].as_string; 
9993   48C1 3B E8 52      mov d, _variables_data ; $variables
9994   48C4 D7            push a
9995   48C5 DA            push d
9996   48C6 FA 05 00      lea d, [bp + 5] ; $index
9997   48C9 2A            mov b, [d]
9998   48CA 38 00 00      mov c, 0
9999   48CD E7            pop d
10000  48CE FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
10001  48D2 E4            pop a
10002  48D3 58 11 00      add d, 17
10003  48D6 2A            mov b, [d]
10004  48D7 38 00 00      mov c, 0
10005  48DA F9            leave
10006  48DB 09            ret
10007  48DC             
10008  48DC             get_shell_var_intval:
10009  48DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
10010  48DF             ; return variables[index].as_int; 
10011  48DF 3B E8 52      mov d, _variables_data ; $variables
10012  48E2 D7            push a
10013  48E3 DA            push d
10014  48E4 FA 05 00      lea d, [bp + 5] ; $index
10015  48E7 2A            mov b, [d]
10016  48E8 38 00 00      mov c, 0
10017  48EB E7            pop d
10018  48EC FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
10019  48F0 E4            pop a
10020  48F1 58 13 00      add d, 19
10021  48F4 2A            mov b, [d]
10022  48F5 38 00 00      mov c, 0
10023  48F8 F9            leave
10024  48F9 09            ret
10025  48FA             
10026  48FA             file_exists:
10027  48FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
10028  48FD             ; int file_exists; 
10029  48FD 52 02 00      sub sp, 2
10030  4900             
10031  4900             ; --- BEGIN INLINE ASM SEGMENT
10032  4900 FA 05 00      lea d, [bp + 5] ; $filename
10033  4903 FD 2A         mov d, [d]
10034  4905 19 15         mov al, 21
10035  4907 05 04         syscall sys_filesystem
10036  4909 FA FF FF      lea d, [bp + -1] ; $file_exists
10037  490C 43            mov [d], a
10038  490D             ; --- END INLINE ASM SEGMENT
10039  490D             
10040  490D             ; return file_exists; 
10041  490D FA FF FF      lea d, [bp + -1] ; $file_exists
10042  4910 2A            mov b, [d]
10043  4911 38 00 00      mov c, 0
10044  4914 F9            leave
10045  4915 09            ret
10046  4916             
10047  4916             command_cd:
10048  4916 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10049  4919             ; int dirID; 
10050  4919 52 02 00      sub sp, 2
10051  491C             ; *path = '\0'; 
10052  491C 3B 68 4F      mov d, _path_data ; $path
10053  491F 2D            mov b, d
10054  4920 38 00 00      mov c, 0
10055  4923 D8            push b
10056  4924 FD 2E 00 00   mov32 cb, $00000000
10056  4928 00 00 
10057  492A E7            pop d
10058  492B FD 3E         mov [d], bl
10059  492D             ; get(); 
10060  492D             ; --- START FUNCTION CALL
10061  492D 07 58 2F      call get
10062  4930             ; if(toktype == END || tok == SEMICOLON || tok == BITWISE_NOT){ 
10063  4930             _if150_cond:
10064  4930 3B 62 4B      mov d, _toktype ; $toktype
10065  4933 2A            mov b, [d]
10066  4934 38 00 00      mov c, 0
10067  4937             ; --- START RELATIONAL
10068  4937 D7            push a
10069  4938 11            mov a, b
10070  4939 FD 2E 06 00   mov32 cb, $6 ; enum element: END
10070  493D 00 00 
10071  493F B0            cmp a, b
10072  4940 FD 71         seq ; ==
10073  4942 E4            pop a
10074  4943             ; --- END RELATIONAL
10075  4943             ; --- START LOGICAL OR
10076  4943 D7            push a
10077  4944 11            mov a, b
10078  4945 3B 60 4B      mov d, _tok ; $tok
10079  4948 2A            mov b, [d]
10080  4949 38 00 00      mov c, 0
10081  494C             ; --- START RELATIONAL
10082  494C D7            push a
10083  494D 11            mov a, b
10084  494E FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
10084  4952 00 00 
10085  4954 B0            cmp a, b
10086  4955 FD 71         seq ; ==
10087  4957 E4            pop a
10088  4958             ; --- END RELATIONAL
10089  4958 FD A8         sor a, b ; ||
10090  495A 11            mov a, b
10091  495B 3B 60 4B      mov d, _tok ; $tok
10092  495E 2A            mov b, [d]
10093  495F 38 00 00      mov c, 0
10094  4962             ; --- START RELATIONAL
10095  4962 D7            push a
10096  4963 11            mov a, b
10097  4964 FD 2E 19 00   mov32 cb, $19 ; enum element: BITWISE_NOT
10097  4968 00 00 
10098  496A B0            cmp a, b
10099  496B FD 71         seq ; ==
10100  496D E4            pop a
10101  496E             ; --- END RELATIONAL
10102  496E FD A8         sor a, b ; ||
10103  4970 E4            pop a
10104  4971             ; --- END LOGICAL OR
10105  4971 C0 00 00      cmp b, 0
10106  4974 C6 9E 49      je _if150_else
10107  4977             _if150_TRUE:
10108  4977             ; back(); 
10109  4977             ; --- START FUNCTION CALL
10110  4977 07 FA 2C      call back
10111  497A             ; cd_to_dir(variables[1].as_string); 
10112  497A             ; --- START FUNCTION CALL
10113  497A 3B E8 52      mov d, _variables_data ; $variables
10114  497D D7            push a
10115  497E DA            push d
10116  497F FD 2E 01 00   mov32 cb, $00000001
10116  4983 00 00 
10117  4985 E7            pop d
10118  4986 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
10119  498A E4            pop a
10120  498B 58 11 00      add d, 17
10121  498E 2A            mov b, [d]
10122  498F 38 00 00      mov c, 0
10123  4992 FD AB         swp b
10124  4994 D8            push b
10125  4995 07 11 4A      call cd_to_dir
10126  4998 51 02 00      add sp, 2
10127  499B             ; --- END FUNCTION CALL
10128  499B 0A 0F 4A      jmp _if150_exit
10129  499E             _if150_else:
10130  499E             ; for(;;){ 
10131  499E             _for151_init:
10132  499E             _for151_cond:
10133  499E             _for151_block:
10134  499E             ; strcat(path, token); 
10135  499E             ; --- START FUNCTION CALL
10136  499E 3B 66 4B      mov d, _token_data ; $token
10137  49A1 2D            mov b, d
10138  49A2 38 00 00      mov c, 0
10139  49A5 FD AB         swp b
10140  49A7 D8            push b
10141  49A8 3B 68 4F      mov d, _path_data ; $path
10142  49AB 2D            mov b, d
10143  49AC 38 00 00      mov c, 0
10144  49AF FD AB         swp b
10145  49B1 D8            push b
10146  49B2 07 C2 10      call strcat
10147  49B5 51 04 00      add sp, 4
10148  49B8             ; --- END FUNCTION CALL
10149  49B8             ; get(); 
10150  49B8             ; --- START FUNCTION CALL
10151  49B8 07 58 2F      call get
10152  49BB             ; if(toktype == END) break; 
10153  49BB             _if152_cond:
10154  49BB 3B 62 4B      mov d, _toktype ; $toktype
10155  49BE 2A            mov b, [d]
10156  49BF 38 00 00      mov c, 0
10157  49C2             ; --- START RELATIONAL
10158  49C2 D7            push a
10159  49C3 11            mov a, b
10160  49C4 FD 2E 06 00   mov32 cb, $6 ; enum element: END
10160  49C8 00 00 
10161  49CA B0            cmp a, b
10162  49CB FD 71         seq ; ==
10163  49CD E4            pop a
10164  49CE             ; --- END RELATIONAL
10165  49CE C0 00 00      cmp b, 0
10166  49D1 C6 DA 49      je _if152_else
10167  49D4             _if152_TRUE:
10168  49D4             ; break; 
10169  49D4 0A FF 49      jmp _for151_exit ; for break
10170  49D7 0A FC 49      jmp _if152_exit
10171  49DA             _if152_else:
10172  49DA             ; if(tok == SEMICOLON){ 
10173  49DA             _if153_cond:
10174  49DA 3B 60 4B      mov d, _tok ; $tok
10175  49DD 2A            mov b, [d]
10176  49DE 38 00 00      mov c, 0
10177  49E1             ; --- START RELATIONAL
10178  49E1 D7            push a
10179  49E2 11            mov a, b
10180  49E3 FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
10180  49E7 00 00 
10181  49E9 B0            cmp a, b
10182  49EA FD 71         seq ; ==
10183  49EC E4            pop a
10184  49ED             ; --- END RELATIONAL
10185  49ED C0 00 00      cmp b, 0
10186  49F0 C6 FC 49      je _if153_exit
10187  49F3             _if153_TRUE:
10188  49F3             ; back(); 
10189  49F3             ; --- START FUNCTION CALL
10190  49F3 07 FA 2C      call back
10191  49F6             ; break; 
10192  49F6 0A FF 49      jmp _for151_exit ; for break
10193  49F9 0A FC 49      jmp _if153_exit
10194  49FC             _if153_exit:
10195  49FC             _if152_exit:
10196  49FC             _for151_update:
10197  49FC 0A 9E 49      jmp _for151_cond
10198  49FF             _for151_exit:
10199  49FF             ; cd_to_dir(path); 
10200  49FF             ; --- START FUNCTION CALL
10201  49FF 3B 68 4F      mov d, _path_data ; $path
10202  4A02 2D            mov b, d
10203  4A03 38 00 00      mov c, 0
10204  4A06 FD AB         swp b
10205  4A08 D8            push b
10206  4A09 07 11 4A      call cd_to_dir
10207  4A0C 51 02 00      add sp, 2
10208  4A0F             ; --- END FUNCTION CALL
10209  4A0F             _if150_exit:
10210  4A0F F9            leave
10211  4A10 09            ret
10212  4A11             
10213  4A11             cd_to_dir:
10214  4A11 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10215  4A14             ; int dirID; 
10216  4A14 52 02 00      sub sp, 2
10217  4A17             
10218  4A17             ; --- BEGIN INLINE ASM SEGMENT
10219  4A17 FA 05 00      lea d, [bp + 5] ; $dir
10220  4A1A FD 2A         mov d, [d]
10221  4A1C 19 13         mov al, 19
10222  4A1E 05 04         syscall sys_filesystem 
10223  4A20 FA FF FF      lea d, [bp + -1] ; $dirID
10224  4A23 FD 2A         mov d, [d]
10225  4A25 43            mov [d], a 
10226  4A26 D7            push a
10227  4A27             ; --- END INLINE ASM SEGMENT
10228  4A27             
10229  4A27             ; if(dirID != -1){ 
10230  4A27             _if154_cond:
10231  4A27 FA FF FF      lea d, [bp + -1] ; $dirID
10232  4A2A 2A            mov b, [d]
10233  4A2B 38 00 00      mov c, 0
10234  4A2E             ; --- START RELATIONAL
10235  4A2E D7            push a
10236  4A2F 11            mov a, b
10237  4A30 FD 2E 01 00   mov32 cb, $00000001
10237  4A34 00 00 
10238  4A36 FD 97         neg b
10239  4A38 B0            cmp a, b
10240  4A39 FD 72         sneq ; !=
10241  4A3B E4            pop a
10242  4A3C             ; --- END RELATIONAL
10243  4A3C C0 00 00      cmp b, 0
10244  4A3F C6 4B 4A      je _if154_else
10245  4A42             _if154_TRUE:
10246  4A42             
10247  4A42             ; --- BEGIN INLINE ASM SEGMENT
10248  4A42 E4            pop a
10249  4A43 27            mov b, a
10250  4A44 19 03         mov al, 3
10251  4A46 05 04         syscall sys_filesystem
10252  4A48             ; --- END INLINE ASM SEGMENT
10253  4A48             
10254  4A48 0A 4C 4A      jmp _if154_exit
10255  4A4B             _if154_else:
10256  4A4B             
10257  4A4B             ; --- BEGIN INLINE ASM SEGMENT
10258  4A4B E4            pop a
10259  4A4C             ; --- END INLINE ASM SEGMENT
10260  4A4C             
10261  4A4C             _if154_exit:
10262  4A4C F9            leave
10263  4A4D 09            ret
10264  4A4E             
10265  4A4E             print_cwd:
10266  4A4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
10267  4A51             
10268  4A51             ; --- BEGIN INLINE ASM SEGMENT
10269  4A51 19 12         mov al, 18
10270  4A53 05 04         syscall sys_filesystem        
10271  4A55             ; --- END INLINE ASM SEGMENT
10272  4A55             
10273  4A55 F9            leave
10274  4A56 09            ret
10275  4A57             
10276  4A57             spawn_new_proc:
10277  4A57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10278  4A5A             
10279  4A5A             ; --- BEGIN INLINE ASM SEGMENT
10280  4A5A FA 07 00      lea d, [bp + 7] ; $args
10281  4A5D 2A            mov b, [d]
10282  4A5E FA 05 00      lea d, [bp + 5] ; $executable_path
10283  4A61 FD 2A         mov d, [d]
10284  4A63 05 05         syscall sys_spawn_proc
10285  4A65             ; --- END INLINE ASM SEGMENT
10286  4A65             
10287  4A65 F9            leave
10288  4A66 09            ret
10289  4A67             
10290  4A67             command_shell:
10291  4A67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10292  4A6A F9            leave
10293  4A6B 09            ret
10294  4A6C             
10295  4A6C             command_fg:
10296  4A6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
10297  4A6F F9            leave
10298  4A70 09            ret
10299  4A71             
10300  4A71             read_config:
10301  4A71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10302  4A74             ; transient_area = alloc(16385); 
10303  4A74 3B 66 4D      mov d, _transient_area ; $transient_area
10304  4A77 DA            push d
10305  4A78             ; --- START FUNCTION CALL
10306  4A78 FD 2E 01 40   mov32 cb, $00004001
10306  4A7C 00 00 
10307  4A7E FD AB         swp b
10308  4A80 D8            push b
10309  4A81 07 02 14      call alloc
10310  4A84 51 02 00      add sp, 2
10311  4A87             ; --- END FUNCTION CALL
10312  4A87 E7            pop d
10313  4A88 FD 43         mov [d], b
10314  4A8A             ; *value = '\0'; 
10315  4A8A FA 09 00      lea d, [bp + 9] ; $value
10316  4A8D 2A            mov b, [d]
10317  4A8E 38 00 00      mov c, 0
10318  4A91 D8            push b
10319  4A92 FD 2E 00 00   mov32 cb, $00000000
10319  4A96 00 00 
10320  4A98 E7            pop d
10321  4A99 FD 3E         mov [d], bl
10322  4A9B             ; loadfile(filename, transient_area); 
10323  4A9B             ; --- START FUNCTION CALL
10324  4A9B 3B 66 4D      mov d, _transient_area ; $transient_area
10325  4A9E 2A            mov b, [d]
10326  4A9F 38 00 00      mov c, 0
10327  4AA2 FD AB         swp b
10328  4AA4 D8            push b
10329  4AA5 FA 05 00      lea d, [bp + 5] ; $filename
10330  4AA8 2A            mov b, [d]
10331  4AA9 38 00 00      mov c, 0
10332  4AAC FD AB         swp b
10333  4AAE D8            push b
10334  4AAF 07 05 29      call loadfile
10335  4AB2 51 04 00      add sp, 4
10336  4AB5             ; --- END FUNCTION CALL
10337  4AB5             ; prog = transient_area; 
10338  4AB5 3B 64 4B      mov d, _prog ; $prog
10339  4AB8 DA            push d
10340  4AB9 3B 66 4D      mov d, _transient_area ; $transient_area
10341  4ABC 2A            mov b, [d]
10342  4ABD 38 00 00      mov c, 0
10343  4AC0 E7            pop d
10344  4AC1 FD 43         mov [d], b
10345  4AC3             ; for(;;){ 
10346  4AC3             _for155_init:
10347  4AC3             _for155_cond:
10348  4AC3             _for155_block:
10349  4AC3             ; get(); 
10350  4AC3             ; --- START FUNCTION CALL
10351  4AC3 07 58 2F      call get
10352  4AC6             ; if(toktype == END) break; 
10353  4AC6             _if156_cond:
10354  4AC6 3B 62 4B      mov d, _toktype ; $toktype
10355  4AC9 2A            mov b, [d]
10356  4ACA 38 00 00      mov c, 0
10357  4ACD             ; --- START RELATIONAL
10358  4ACD D7            push a
10359  4ACE 11            mov a, b
10360  4ACF FD 2E 06 00   mov32 cb, $6 ; enum element: END
10360  4AD3 00 00 
10361  4AD5 B0            cmp a, b
10362  4AD6 FD 71         seq ; ==
10363  4AD8 E4            pop a
10364  4AD9             ; --- END RELATIONAL
10365  4AD9 C0 00 00      cmp b, 0
10366  4ADC C6 E5 4A      je _if156_exit
10367  4ADF             _if156_TRUE:
10368  4ADF             ; break; 
10369  4ADF 0A 4F 4B      jmp _for155_exit ; for break
10370  4AE2 0A E5 4A      jmp _if156_exit
10371  4AE5             _if156_exit:
10372  4AE5             ; if(!strcmp(entry_name, token)){ 
10373  4AE5             _if157_cond:
10374  4AE5             ; --- START FUNCTION CALL
10375  4AE5 3B 66 4B      mov d, _token_data ; $token
10376  4AE8 2D            mov b, d
10377  4AE9 38 00 00      mov c, 0
10378  4AEC FD AB         swp b
10379  4AEE D8            push b
10380  4AEF FA 07 00      lea d, [bp + 7] ; $entry_name
10381  4AF2 2A            mov b, [d]
10382  4AF3 38 00 00      mov c, 0
10383  4AF6 FD AB         swp b
10384  4AF8 D8            push b
10385  4AF9 07 39 10      call strcmp
10386  4AFC 51 04 00      add sp, 4
10387  4AFF             ; --- END FUNCTION CALL
10388  4AFF C0 00 00      cmp b, 0
10389  4B02 C6 4C 4B      je _if157_exit
10390  4B05             _if157_TRUE:
10391  4B05             ; get(); // get '=' 
10392  4B05             ; --- START FUNCTION CALL
10393  4B05 07 58 2F      call get
10394  4B08             ; for(;;){ 
10395  4B08             _for158_init:
10396  4B08             _for158_cond:
10397  4B08             _for158_block:
10398  4B08             ; get(); 
10399  4B08             ; --- START FUNCTION CALL
10400  4B08 07 58 2F      call get
10401  4B0B             ; if(!strcmp(token, ";")) return; 
10402  4B0B             _if159_cond:
10403  4B0B             ; --- START FUNCTION CALL
10404  4B0B 26 97 54      mov b, _s19 ; ";"
10405  4B0E FD AB         swp b
10406  4B10 D8            push b
10407  4B11 3B 66 4B      mov d, _token_data ; $token
10408  4B14 2D            mov b, d
10409  4B15 38 00 00      mov c, 0
10410  4B18 FD AB         swp b
10411  4B1A D8            push b
10412  4B1B 07 39 10      call strcmp
10413  4B1E 51 04 00      add sp, 4
10414  4B21             ; --- END FUNCTION CALL
10415  4B21 C0 00 00      cmp b, 0
10416  4B24 C6 2C 4B      je _if159_exit
10417  4B27             _if159_TRUE:
10418  4B27             ; return; 
10419  4B27 F9            leave
10420  4B28 09            ret
10421  4B29 0A 2C 4B      jmp _if159_exit
10422  4B2C             _if159_exit:
10423  4B2C             ; strcat(value, token); 
10424  4B2C             ; --- START FUNCTION CALL
10425  4B2C 3B 66 4B      mov d, _token_data ; $token
10426  4B2F 2D            mov b, d
10427  4B30 38 00 00      mov c, 0
10428  4B33 FD AB         swp b
10429  4B35 D8            push b
10430  4B36 FA 09 00      lea d, [bp + 9] ; $value
10431  4B39 2A            mov b, [d]
10432  4B3A 38 00 00      mov c, 0
10433  4B3D FD AB         swp b
10434  4B3F D8            push b
10435  4B40 07 C2 10      call strcat
10436  4B43 51 04 00      add sp, 4
10437  4B46             ; --- END FUNCTION CALL
10438  4B46             _for158_update:
10439  4B46 0A 08 4B      jmp _for158_cond
10440  4B49             _for158_exit:
10441  4B49 0A 4C 4B      jmp _if157_exit
10442  4B4C             _if157_exit:
10443  4B4C             _for155_update:
10444  4B4C 0A C3 4A      jmp _for155_cond
10445  4B4F             _for155_exit:
10446  4B4F             ; free(16385); 
10447  4B4F             ; --- START FUNCTION CALL
10448  4B4F FD 2E 01 40   mov32 cb, $00004001
10448  4B53 00 00 
10449  4B55 FD AB         swp b
10450  4B57 D8            push b
10451  4B58 07 33 14      call free
10452  4B5B 51 02 00      add sp, 2
10453  4B5E             ; --- END FUNCTION CALL
10454  4B5E F9            leave
10455  4B5F 09            ret
10456  4B60             ; --- END TEXT SEGMENT
10457  4B60             
10458  4B60             ; --- BEGIN DATA SEGMENT
10459  4B60 00 00       _tok: .fill 2, 0
10460  4B62 00 00       _toktype: .fill 2, 0
10461  4B64 00 00       _prog: .fill 2, 0
10462  4B66 00 00 00 00 _token_data: .fill 256, 0
10462  4B6A 00 00 00 00 
10462  4B6E 00 00 00 00 
10462  4B72 00 00 00 00 
10462  4B76 00 00 00 00 
10462  4B7A 00 00 00 00 
10462  4B7E 00 00 00 00 
10462  4B82 00 00 00 00 
10462  4B86 00 00 00 00 
10462  4B8A 00 00 00 00 
10462  4B8E 00 00 00 00 
10462  4B92 00 00 00 00 
10462  4B96 00 00 00 00 
10462  4B9A 00 00 00 00 
10462  4B9E 00 00 00 00 
10462  4BA2 00 00 00 00 
10462  4BA6 00 00 00 00 
10462  4BAA 00 00 00 00 
10462  4BAE 00 00 00 00 
10462  4BB2 00 00 00 00 
10462  4BB6 00 00 00 00 
10462  4BBA 00 00 00 00 
10462  4BBE 00 00 00 00 
10462  4BC2 00 00 00 00 
10462  4BC6 00 00 00 00 
10462  4BCA 00 00 00 00 
10462  4BCE 00 00 00 00 
10462  4BD2 00 00 00 00 
10462  4BD6 00 00 00 00 
10462  4BDA 00 00 00 00 
10462  4BDE 00 00 00 00 
10462  4BE2 00 00 00 00 
10462  4BE6 00 00 00 00 
10462  4BEA 00 00 00 00 
10462  4BEE 00 00 00 00 
10462  4BF2 00 00 00 00 
10462  4BF6 00 00 00 00 
10462  4BFA 00 00 00 00 
10462  4BFE 00 00 00 00 
10462  4C02 00 00 00 00 
10462  4C06 00 00 00 00 
10462  4C0A 00 00 00 00 
10462  4C0E 00 00 00 00 
10462  4C12 00 00 00 00 
10462  4C16 00 00 00 00 
10462  4C1A 00 00 00 00 
10462  4C1E 00 00 00 00 
10462  4C22 00 00 00 00 
10462  4C26 00 00 00 00 
10462  4C2A 00 00 00 00 
10462  4C2E 00 00 00 00 
10462  4C32 00 00 00 00 
10462  4C36 00 00 00 00 
10462  4C3A 00 00 00 00 
10462  4C3E 00 00 00 00 
10462  4C42 00 00 00 00 
10462  4C46 00 00 00 00 
10462  4C4A 00 00 00 00 
10462  4C4E 00 00 00 00 
10462  4C52 00 00 00 00 
10462  4C56 00 00 00 00 
10462  4C5A 00 00 00 00 
10462  4C5E 00 00 00 00 
10462  4C62 00 00 00 00 
10463  4C66 00 00 00 00 _string_const_data: .fill 256, 0
10463  4C6A 00 00 00 00 
10463  4C6E 00 00 00 00 
10463  4C72 00 00 00 00 
10463  4C76 00 00 00 00 
10463  4C7A 00 00 00 00 
10463  4C7E 00 00 00 00 
10463  4C82 00 00 00 00 
10463  4C86 00 00 00 00 
10463  4C8A 00 00 00 00 
10463  4C8E 00 00 00 00 
10463  4C92 00 00 00 00 
10463  4C96 00 00 00 00 
10463  4C9A 00 00 00 00 
10463  4C9E 00 00 00 00 
10463  4CA2 00 00 00 00 
10463  4CA6 00 00 00 00 
10463  4CAA 00 00 00 00 
10463  4CAE 00 00 00 00 
10463  4CB2 00 00 00 00 
10463  4CB6 00 00 00 00 
10463  4CBA 00 00 00 00 
10463  4CBE 00 00 00 00 
10463  4CC2 00 00 00 00 
10463  4CC6 00 00 00 00 
10463  4CCA 00 00 00 00 
10463  4CCE 00 00 00 00 
10463  4CD2 00 00 00 00 
10463  4CD6 00 00 00 00 
10463  4CDA 00 00 00 00 
10463  4CDE 00 00 00 00 
10463  4CE2 00 00 00 00 
10463  4CE6 00 00 00 00 
10463  4CEA 00 00 00 00 
10463  4CEE 00 00 00 00 
10463  4CF2 00 00 00 00 
10463  4CF6 00 00 00 00 
10463  4CFA 00 00 00 00 
10463  4CFE 00 00 00 00 
10463  4D02 00 00 00 00 
10463  4D06 00 00 00 00 
10463  4D0A 00 00 00 00 
10463  4D0E 00 00 00 00 
10463  4D12 00 00 00 00 
10463  4D16 00 00 00 00 
10463  4D1A 00 00 00 00 
10463  4D1E 00 00 00 00 
10463  4D22 00 00 00 00 
10463  4D26 00 00 00 00 
10463  4D2A 00 00 00 00 
10463  4D2E 00 00 00 00 
10463  4D32 00 00 00 00 
10463  4D36 00 00 00 00 
10463  4D3A 00 00 00 00 
10463  4D3E 00 00 00 00 
10463  4D42 00 00 00 00 
10463  4D46 00 00 00 00 
10463  4D4A 00 00 00 00 
10463  4D4E 00 00 00 00 
10463  4D52 00 00 00 00 
10463  4D56 00 00 00 00 
10463  4D5A 00 00 00 00 
10463  4D5E 00 00 00 00 
10463  4D62 00 00 00 00 
10464  4D66 00 00       _transient_area: .fill 2, 0
10465  4D68 00 00 00 00 _command_data: .fill 512, 0
10465  4D6C 00 00 00 00 
10465  4D70 00 00 00 00 
10465  4D74 00 00 00 00 
10465  4D78 00 00 00 00 
10465  4D7C 00 00 00 00 
10465  4D80 00 00 00 00 
10465  4D84 00 00 00 00 
10465  4D88 00 00 00 00 
10465  4D8C 00 00 00 00 
10465  4D90 00 00 00 00 
10465  4D94 00 00 00 00 
10465  4D98 00 00 00 00 
10465  4D9C 00 00 00 00 
10465  4DA0 00 00 00 00 
10465  4DA4 00 00 00 00 
10465  4DA8 00 00 00 00 
10465  4DAC 00 00 00 00 
10465  4DB0 00 00 00 00 
10465  4DB4 00 00 00 00 
10465  4DB8 00 00 00 00 
10465  4DBC 00 00 00 00 
10465  4DC0 00 00 00 00 
10465  4DC4 00 00 00 00 
10465  4DC8 00 00 00 00 
10465  4DCC 00 00 00 00 
10465  4DD0 00 00 00 00 
10465  4DD4 00 00 00 00 
10465  4DD8 00 00 00 00 
10465  4DDC 00 00 00 00 
10465  4DE0 00 00 00 00 
10465  4DE4 00 00 00 00 
10465  4DE8 00 00 00 00 
10465  4DEC 00 00 00 00 
10465  4DF0 00 00 00 00 
10465  4DF4 00 00 00 00 
10465  4DF8 00 00 00 00 
10465  4DFC 00 00 00 00 
10465  4E00 00 00 00 00 
10465  4E04 00 00 00 00 
10465  4E08 00 00 00 00 
10465  4E0C 00 00 00 00 
10465  4E10 00 00 00 00 
10465  4E14 00 00 00 00 
10465  4E18 00 00 00 00 
10465  4E1C 00 00 00 00 
10465  4E20 00 00 00 00 
10465  4E24 00 00 00 00 
10465  4E28 00 00 00 00 
10465  4E2C 00 00 00 00 
10465  4E30 00 00 00 00 
10465  4E34 00 00 00 00 
10465  4E38 00 00 00 00 
10465  4E3C 00 00 00 00 
10465  4E40 00 00 00 00 
10465  4E44 00 00 00 00 
10465  4E48 00 00 00 00 
10465  4E4C 00 00 00 00 
10465  4E50 00 00 00 00 
10465  4E54 00 00 00 00 
10465  4E58 00 00 00 00 
10465  4E5C 00 00 00 00 
10465  4E60 00 00 00 00 
10465  4E64 00 00 00 00 
10465  4E68 00 00 00 00 
10465  4E6C 00 00 00 00 
10465  4E70 00 00 00 00 
10465  4E74 00 00 00 00 
10465  4E78 00 00 00 00 
10465  4E7C 00 00 00 00 
10465  4E80 00 00 00 00 
10465  4E84 00 00 00 00 
10465  4E88 00 00 00 00 
10465  4E8C 00 00 00 00 
10465  4E90 00 00 00 00 
10465  4E94 00 00 00 00 
10465  4E98 00 00 00 00 
10465  4E9C 00 00 00 00 
10465  4EA0 00 00 00 00 
10465  4EA4 00 00 00 00 
10465  4EA8 00 00 00 00 
10465  4EAC 00 00 00 00 
10465  4EB0 00 00 00 00 
10465  4EB4 00 00 00 00 
10465  4EB8 00 00 00 00 
10465  4EBC 00 00 00 00 
10465  4EC0 00 00 00 00 
10465  4EC4 00 00 00 00 
10465  4EC8 00 00 00 00 
10465  4ECC 00 00 00 00 
10465  4ED0 00 00 00 00 
10465  4ED4 00 00 00 00 
10465  4ED8 00 00 00 00 
10465  4EDC 00 00 00 00 
10465  4EE0 00 00 00 00 
10465  4EE4 00 00 00 00 
10465  4EE8 00 00 00 00 
10465  4EEC 00 00 00 00 
10465  4EF0 00 00 00 00 
10465  4EF4 00 00 00 00 
10465  4EF8 00 00 00 00 
10465  4EFC 00 00 00 00 
10465  4F00 00 00 00 00 
10465  4F04 00 00 00 00 
10465  4F08 00 00 00 00 
10465  4F0C 00 00 00 00 
10465  4F10 00 00 00 00 
10465  4F14 00 00 00 00 
10465  4F18 00 00 00 00 
10465  4F1C 00 00 00 00 
10465  4F20 00 00 00 00 
10465  4F24 00 00 00 00 
10465  4F28 00 00 00 00 
10465  4F2C 00 00 00 00 
10465  4F30 00 00 00 00 
10465  4F34 00 00 00 00 
10465  4F38 00 00 00 00 
10465  4F3C 00 00 00 00 
10465  4F40 00 00 00 00 
10465  4F44 00 00 00 00 
10465  4F48 00 00 00 00 
10465  4F4C 00 00 00 00 
10465  4F50 00 00 00 00 
10465  4F54 00 00 00 00 
10465  4F58 00 00 00 00 
10465  4F5C 00 00 00 00 
10465  4F60 00 00 00 00 
10465  4F64 00 00 00 00 
10466  4F68 00 00 00 00 _path_data: .fill 256, 0
10466  4F6C 00 00 00 00 
10466  4F70 00 00 00 00 
10466  4F74 00 00 00 00 
10466  4F78 00 00 00 00 
10466  4F7C 00 00 00 00 
10466  4F80 00 00 00 00 
10466  4F84 00 00 00 00 
10466  4F88 00 00 00 00 
10466  4F8C 00 00 00 00 
10466  4F90 00 00 00 00 
10466  4F94 00 00 00 00 
10466  4F98 00 00 00 00 
10466  4F9C 00 00 00 00 
10466  4FA0 00 00 00 00 
10466  4FA4 00 00 00 00 
10466  4FA8 00 00 00 00 
10466  4FAC 00 00 00 00 
10466  4FB0 00 00 00 00 
10466  4FB4 00 00 00 00 
10466  4FB8 00 00 00 00 
10466  4FBC 00 00 00 00 
10466  4FC0 00 00 00 00 
10466  4FC4 00 00 00 00 
10466  4FC8 00 00 00 00 
10466  4FCC 00 00 00 00 
10466  4FD0 00 00 00 00 
10466  4FD4 00 00 00 00 
10466  4FD8 00 00 00 00 
10466  4FDC 00 00 00 00 
10466  4FE0 00 00 00 00 
10466  4FE4 00 00 00 00 
10466  4FE8 00 00 00 00 
10466  4FEC 00 00 00 00 
10466  4FF0 00 00 00 00 
10466  4FF4 00 00 00 00 
10466  4FF8 00 00 00 00 
10466  4FFC 00 00 00 00 
10466  5000 00 00 00 00 
10466  5004 00 00 00 00 
10466  5008 00 00 00 00 
10466  500C 00 00 00 00 
10466  5010 00 00 00 00 
10466  5014 00 00 00 00 
10466  5018 00 00 00 00 
10466  501C 00 00 00 00 
10466  5020 00 00 00 00 
10466  5024 00 00 00 00 
10466  5028 00 00 00 00 
10466  502C 00 00 00 00 
10466  5030 00 00 00 00 
10466  5034 00 00 00 00 
10466  5038 00 00 00 00 
10466  503C 00 00 00 00 
10466  5040 00 00 00 00 
10466  5044 00 00 00 00 
10466  5048 00 00 00 00 
10466  504C 00 00 00 00 
10466  5050 00 00 00 00 
10466  5054 00 00 00 00 
10466  5058 00 00 00 00 
10466  505C 00 00 00 00 
10466  5060 00 00 00 00 
10466  5064 00 00 00 00 
10467  5068 00 00 00 00 _temp_data: .fill 256, 0
10467  506C 00 00 00 00 
10467  5070 00 00 00 00 
10467  5074 00 00 00 00 
10467  5078 00 00 00 00 
10467  507C 00 00 00 00 
10467  5080 00 00 00 00 
10467  5084 00 00 00 00 
10467  5088 00 00 00 00 
10467  508C 00 00 00 00 
10467  5090 00 00 00 00 
10467  5094 00 00 00 00 
10467  5098 00 00 00 00 
10467  509C 00 00 00 00 
10467  50A0 00 00 00 00 
10467  50A4 00 00 00 00 
10467  50A8 00 00 00 00 
10467  50AC 00 00 00 00 
10467  50B0 00 00 00 00 
10467  50B4 00 00 00 00 
10467  50B8 00 00 00 00 
10467  50BC 00 00 00 00 
10467  50C0 00 00 00 00 
10467  50C4 00 00 00 00 
10467  50C8 00 00 00 00 
10467  50CC 00 00 00 00 
10467  50D0 00 00 00 00 
10467  50D4 00 00 00 00 
10467  50D8 00 00 00 00 
10467  50DC 00 00 00 00 
10467  50E0 00 00 00 00 
10467  50E4 00 00 00 00 
10467  50E8 00 00 00 00 
10467  50EC 00 00 00 00 
10467  50F0 00 00 00 00 
10467  50F4 00 00 00 00 
10467  50F8 00 00 00 00 
10467  50FC 00 00 00 00 
10467  5100 00 00 00 00 
10467  5104 00 00 00 00 
10467  5108 00 00 00 00 
10467  510C 00 00 00 00 
10467  5110 00 00 00 00 
10467  5114 00 00 00 00 
10467  5118 00 00 00 00 
10467  511C 00 00 00 00 
10467  5120 00 00 00 00 
10467  5124 00 00 00 00 
10467  5128 00 00 00 00 
10467  512C 00 00 00 00 
10467  5130 00 00 00 00 
10467  5134 00 00 00 00 
10467  5138 00 00 00 00 
10467  513C 00 00 00 00 
10467  5140 00 00 00 00 
10467  5144 00 00 00 00 
10467  5148 00 00 00 00 
10467  514C 00 00 00 00 
10467  5150 00 00 00 00 
10467  5154 00 00 00 00 
10467  5158 00 00 00 00 
10467  515C 00 00 00 00 
10467  5160 00 00 00 00 
10467  5164 00 00 00 00 
10468  5168 00 00 00 00 _argument_data: .fill 256, 0
10468  516C 00 00 00 00 
10468  5170 00 00 00 00 
10468  5174 00 00 00 00 
10468  5178 00 00 00 00 
10468  517C 00 00 00 00 
10468  5180 00 00 00 00 
10468  5184 00 00 00 00 
10468  5188 00 00 00 00 
10468  518C 00 00 00 00 
10468  5190 00 00 00 00 
10468  5194 00 00 00 00 
10468  5198 00 00 00 00 
10468  519C 00 00 00 00 
10468  51A0 00 00 00 00 
10468  51A4 00 00 00 00 
10468  51A8 00 00 00 00 
10468  51AC 00 00 00 00 
10468  51B0 00 00 00 00 
10468  51B4 00 00 00 00 
10468  51B8 00 00 00 00 
10468  51BC 00 00 00 00 
10468  51C0 00 00 00 00 
10468  51C4 00 00 00 00 
10468  51C8 00 00 00 00 
10468  51CC 00 00 00 00 
10468  51D0 00 00 00 00 
10468  51D4 00 00 00 00 
10468  51D8 00 00 00 00 
10468  51DC 00 00 00 00 
10468  51E0 00 00 00 00 
10468  51E4 00 00 00 00 
10468  51E8 00 00 00 00 
10468  51EC 00 00 00 00 
10468  51F0 00 00 00 00 
10468  51F4 00 00 00 00 
10468  51F8 00 00 00 00 
10468  51FC 00 00 00 00 
10468  5200 00 00 00 00 
10468  5204 00 00 00 00 
10468  5208 00 00 00 00 
10468  520C 00 00 00 00 
10468  5210 00 00 00 00 
10468  5214 00 00 00 00 
10468  5218 00 00 00 00 
10468  521C 00 00 00 00 
10468  5220 00 00 00 00 
10468  5224 00 00 00 00 
10468  5228 00 00 00 00 
10468  522C 00 00 00 00 
10468  5230 00 00 00 00 
10468  5234 00 00 00 00 
10468  5238 00 00 00 00 
10468  523C 00 00 00 00 
10468  5240 00 00 00 00 
10468  5244 00 00 00 00 
10468  5248 00 00 00 00 
10468  524C 00 00 00 00 
10468  5250 00 00 00 00 
10468  5254 00 00 00 00 
10468  5258 00 00 00 00 
10468  525C 00 00 00 00 
10468  5260 00 00 00 00 
10468  5264 00 00 00 00 
10469  5268 00 00 00 00 _last_cmd_data: .fill 128, 0
10469  526C 00 00 00 00 
10469  5270 00 00 00 00 
10469  5274 00 00 00 00 
10469  5278 00 00 00 00 
10469  527C 00 00 00 00 
10469  5280 00 00 00 00 
10469  5284 00 00 00 00 
10469  5288 00 00 00 00 
10469  528C 00 00 00 00 
10469  5290 00 00 00 00 
10469  5294 00 00 00 00 
10469  5298 00 00 00 00 
10469  529C 00 00 00 00 
10469  52A0 00 00 00 00 
10469  52A4 00 00 00 00 
10469  52A8 00 00 00 00 
10469  52AC 00 00 00 00 
10469  52B0 00 00 00 00 
10469  52B4 00 00 00 00 
10469  52B8 00 00 00 00 
10469  52BC 00 00 00 00 
10469  52C0 00 00 00 00 
10469  52C4 00 00 00 00 
10469  52C8 00 00 00 00 
10469  52CC 00 00 00 00 
10469  52D0 00 00 00 00 
10469  52D4 00 00 00 00 
10469  52D8 00 00 00 00 
10469  52DC 00 00 00 00 
10469  52E0 00 00 00 00 
10469  52E4 00 00 00 00 
10470  52E8 00 00 00 00 _variables_data: .fill 210, 0
10470  52EC 00 00 00 00 
10470  52F0 00 00 00 00 
10470  52F4 00 00 00 00 
10470  52F8 00 00 00 00 
10470  52FC 00 00 00 00 
10470  5300 00 00 00 00 
10470  5304 00 00 00 00 
10470  5308 00 00 00 00 
10470  530C 00 00 00 00 
10470  5310 00 00 00 00 
10470  5314 00 00 00 00 
10470  5318 00 00 00 00 
10470  531C 00 00 00 00 
10470  5320 00 00 00 00 
10470  5324 00 00 00 00 
10470  5328 00 00 00 00 
10470  532C 00 00 00 00 
10470  5330 00 00 00 00 
10470  5334 00 00 00 00 
10470  5338 00 00 00 00 
10470  533C 00 00 00 00 
10470  5340 00 00 00 00 
10470  5344 00 00 00 00 
10470  5348 00 00 00 00 
10470  534C 00 00 00 00 
10470  5350 00 00 00 00 
10470  5354 00 00 00 00 
10470  5358 00 00 00 00 
10470  535C 00 00 00 00 
10470  5360 00 00 00 00 
10470  5364 00 00 00 00 
10470  5368 00 00 00 00 
10470  536C 00 00 00 00 
10470  5370 00 00 00 00 
10470  5374 00 00 00 00 
10470  5378 00 00 00 00 
10470  537C 00 00 00 00 
10470  5380 00 00 00 00 
10470  5384 00 00 00 00 
10470  5388 00 00 00 00 
10470  538C 00 00 00 00 
10470  5390 00 00 00 00 
10470  5394 00 00 00 00 
10470  5398 00 00 00 00 
10470  539C 00 00 00 00 
10470  53A0 00 00 00 00 
10470  53A4 00 00 00 00 
10470  53A8 00 00 00 00 
10470  53AC 00 00 00 00 
10470  53B0 00 00 00 00 
10470  53B4 00 00 00 00 
10470  53B8 00 00 
10471  53BA 00 00       _vars_tos: .fill 2, 0
10472  53BC 00 00       st_fopen_max_handle: .dw 0
10473  53BE 70 61 74 68 _s0: .db "path", 0
10473  53C2 00 
10474  53C3 68 6F 6D 65 _s1: .db "home", 0
10474  53C7 00 
10475  53C8 2F 65 74 63 _s2: .db "/etc/shell.cfg", 0
10475  53CC 2F 73 68 65 
10475  53D0 6C 6C 2E 63 
10475  53D4 66 67 00 
10476  53D7 72 6F 6F 74 _s3: .db "root@Sol-1:", 0
10476  53DB 40 53 6F 6C 
10476  53DF 2D 31 3A 00 
10477  53E3 20 23 20 00 _s4: .db " # ", 0
10478  53E7 0A 0D 00    _s5: .db "\n\r", 0
10479  53EA 63 64 00    _s6: .db "cd", 0
10480  53ED 73 68 65 6C _s7: .db "shell", 0
10480  53F1 6C 00 
10481  53F3 31 32 33 00 _s8: .db "123", 0
10482  53F7 2F 00       _s9: .db "/", 0
10483  53F9 55 6E 65 78 _s10: .db "Unexpected format in printf.", 0
10483  53FD 70 65 63 74 
10483  5401 65 64 20 66 
10483  5405 6F 72 6D 61 
10483  5409 74 20 69 6E 
10483  540D 20 70 72 69 
10483  5411 6E 74 66 2E 
10483  5415 00 
10484  5416 45 72 72 6F _s11: .db "Error: Unknown argument type.\n", 0
10484  541A 72 3A 20 55 
10484  541E 6E 6B 6E 6F 
10484  5422 77 6E 20 61 
10484  5426 72 67 75 6D 
10484  542A 65 6E 74 20 
10484  542E 74 79 70 65 
10484  5432 2E 0A 00 
10485  5435 1B 5B 32 4A _s12: .db "\033[2J\033[H", 0
10485  5439 1B 5B 48 00 
10486  543D 44 6F 75 62 _s13: .db "Double quotes expected", 0
10486  5441 6C 65 20 71 
10486  5445 75 6F 74 65 
10486  5449 73 20 65 78 
10486  544D 70 65 63 74 
10486  5451 65 64 00 
10487  5454 0A 45 72 72 _s14: .db "\nError: ", 0
10487  5458 6F 72 3A 20 
10487  545C 00 
10488  545D 0A 00       _s15: .db "\n", 0
10489  545F 45 72 72 6F _s16: .db "Error: Variable does not exist.", 0
10489  5463 72 3A 20 56 
10489  5467 61 72 69 61 
10489  546B 62 6C 65 20 
10489  546F 64 6F 65 73 
10489  5473 20 6E 6F 74 
10489  5477 20 65 78 69 
10489  547B 73 74 2E 00 
10490  547F 25 64 00    _s17: .db "%d", 0
10491  5482 55 6E 64 65 _s18: .db "Undeclared variable.", 0
10491  5486 63 6C 61 72 
10491  548A 65 64 20 76 
10491  548E 61 72 69 61 
10491  5492 62 6C 65 2E 
10491  5496 00 
10492  5497 3B 00       _s19: .db ";", 0
10493  5499             
10494  5499 9B 54       _heap_top: .dw _heap
10495  549B 00          _heap: .db 0
10496  549C             ; --- END DATA SEGMENT
10497  549C             
10498  549C             .end
tasm: Number of errors = 0
