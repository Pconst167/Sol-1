0001   0000             ; --- FILENAME: ../solarium/usr/bin/shell
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $p 
0011   0408             ; $t 
0012   0408             ; $temp_prog 
0013   0408             ; $varname 
0014   0408             ; $is_assignment 
0015   0408             ; $variable_str 
0016   0408             ; $variable_int 
0017   0408             ; $var_index 
0018   0408             ; $i 
0019   0408 52 8E 00      sub sp, 142
0020   040B             ;; set_string_var("path", "                                                                "); // 64 
0021   040B 26 DB 37      mov b, __s0 ; "path"
0022   040E FD AB         swp b
0023   0410 D8            push b
0024   0411 26 E0 37      mov b, __s1 ; "                                                                "
0025   0414 FD AB         swp b
0026   0416 D8            push b
0027   0417 07 76 29      call set_string_var
0028   041A 51 04 00      add sp, 4
0029   041D             ;; set_string_var("home", "                                                                "); // 64 
0030   041D 26 21 38      mov b, __s2 ; "home"
0031   0420 FD AB         swp b
0032   0422 D8            push b
0033   0423 26 E0 37      mov b, __s1 ; "                                                                "
0034   0426 FD AB         swp b
0035   0428 D8            push b
0036   0429 07 76 29      call set_string_var
0037   042C 51 04 00      add sp, 4
0038   042F             ;; read_config("/etc/shell.cfg", "path", variables[0].as_string); 
0039   042F 26 26 38      mov b, __s3 ; "/etc/shell.cfg"
0040   0432 FD AB         swp b
0041   0434 D8            push b
0042   0435 26 DB 37      mov b, __s0 ; "path"
0043   0438 FD AB         swp b
0044   043A D8            push b
0045   043B 3B 07 37      mov d, _variables_data ; $variables
0046   043E D7            push a         
0047   043F 26 00 00      mov b, $0        
0048   0442 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0049   0446 E4            pop a
0050   0447 58 11 00      add d, 17
0051   044A FD 14         clb
0052   044C 2A            mov b, [d]
0053   044D FD AB         swp b
0054   044F D8            push b
0055   0450 07 BC 2E      call read_config
0056   0453 51 06 00      add sp, 6
0057   0456             ;; read_config("/etc/shell.cfg", "home", variables[1].as_string); 
0058   0456 26 26 38      mov b, __s3 ; "/etc/shell.cfg"
0059   0459 FD AB         swp b
0060   045B D8            push b
0061   045C 26 21 38      mov b, __s2 ; "home"
0062   045F FD AB         swp b
0063   0461 D8            push b
0064   0462 3B 07 37      mov d, _variables_data ; $variables
0065   0465 D7            push a         
0066   0466 26 01 00      mov b, $1        
0067   0469 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0068   046D E4            pop a
0069   046E 58 11 00      add d, 17
0070   0471 FD 14         clb
0071   0473 2A            mov b, [d]
0072   0474 FD AB         swp b
0073   0476 D8            push b
0074   0477 07 BC 2E      call read_config
0075   047A 51 06 00      add sp, 6
0076   047D             ;; for(;;){ 
0077   047D             _for1_init:
0078   047D             _for1_cond:
0079   047D             _for1_block:
0080   047D             ;; printf("root@Sol-1:");  
0081   047D 26 35 38      mov b, __s4 ; "root@Sol-1:"
0082   0480 FD AB         swp b
0083   0482 D8            push b
0084   0483 07 4E 0E      call printf
0085   0486 51 02 00      add sp, 2
0086   0489             ;; print_cwd();  
0087   0489 07 9A 2E      call print_cwd
0088   048C             ;; printf(" # "); 
0089   048C 26 41 38      mov b, __s5 ; " # "
0090   048F FD AB         swp b
0091   0491 D8            push b
0092   0492 07 4E 0E      call printf
0093   0495 51 02 00      add sp, 2
0094   0498             ;; gets(command); 
0095   0498 26 87 31      mov b, _command_data ; $command           
0096   049B FD AB         swp b
0097   049D D8            push b
0098   049E 07 FD 11      call gets
0099   04A1 51 02 00      add sp, 2
0100   04A4             ;; print("\n\r"); 
0101   04A4 26 45 38      mov b, __s6 ; "\n\r"
0102   04A7 FD AB         swp b
0103   04A9 D8            push b
0104   04AA 07 11 14      call print
0105   04AD 51 02 00      add sp, 2
0106   04B0             ;; if(command[0]) strcpy(last_cmd, command); 
0107   04B0             _if2_cond:
0108   04B0 3B 87 31      mov d, _command_data ; $command
0109   04B3 D7            push a         
0110   04B4 26 00 00      mov b, $0        
0111   04B7 5A            add d, b
0112   04B8 E4            pop a
0113   04B9 32            mov bl, [d]
0114   04BA A7 00         mov bh, 0
0115   04BC C0 00 00      cmp b, 0
0116   04BF C6 D7 04      je _if2_exit
0117   04C2             _if2_true:
0118   04C2             ;; strcpy(last_cmd, command); 
0119   04C2 26 87 36      mov b, _last_cmd_data ; $last_cmd           
0120   04C5 FD AB         swp b
0121   04C7 D8            push b
0122   04C8 26 87 31      mov b, _command_data ; $command           
0123   04CB FD AB         swp b
0124   04CD D8            push b
0125   04CE 07 2C 0C      call strcpy
0126   04D1 51 04 00      add sp, 4
0127   04D4 0A D7 04      jmp _if2_exit
0128   04D7             _if2_exit:
0129   04D7             ;; prog = command; 
0130   04D7 3B 83 2F      mov d, _prog ; $prog         
0131   04DA 26 87 31      mov b, _command_data ; $command                   
0132   04DD FD 43         mov [d], b
0133   04DF             ;; for(;;){ 
0134   04DF             _for3_init:
0135   04DF             _for3_cond:
0136   04DF             _for3_block:
0137   04DF             ;; temp_prog = prog; 
0138   04DF FA FB FF      lea d, [bp + -5] ; $temp_prog         
0139   04E2 29 83 2F      mov b, [_prog] ; $prog                   
0140   04E5 FD 43         mov [d], b
0141   04E7             ;; get(); 
0142   04E7 07 1F 1A      call get
0143   04EA             ;; if(tok == SEMICOLON) get(); 
0144   04EA             _if4_cond:
0145   04EA 29 7F 2F      mov b, [_tok] ; $tok           
0146   04ED             ; START RELATIONAL
0147   04ED D7            push a
0148   04EE 11            mov a, b
0149   04EF 26 23 00      mov b, 35; SEMICOLON
0150   04F2 B0            cmp a, b
0151   04F3 FD 71         seq ; ==
0152   04F5 E4            pop a
0153   04F6             ; END RELATIONAL
0154   04F6 C0 00 00      cmp b, 0
0155   04F9 C6 02 05      je _if4_exit
0156   04FC             _if4_true:
0157   04FC             ;; get(); 
0158   04FC 07 1F 1A      call get
0159   04FF 0A 02 05      jmp _if4_exit
0160   0502             _if4_exit:
0161   0502             ;; if(toktype == END) break; // check for empty input 
0162   0502             _if5_cond:
0163   0502 29 81 2F      mov b, [_toktype] ; $toktype           
0164   0505             ; START RELATIONAL
0165   0505 D7            push a
0166   0506 11            mov a, b
0167   0507 26 06 00      mov b, 6; END
0168   050A B0            cmp a, b
0169   050B FD 71         seq ; ==
0170   050D E4            pop a
0171   050E             ; END RELATIONAL
0172   050E C0 00 00      cmp b, 0
0173   0511 C6 1A 05      je _if5_exit
0174   0514             _if5_true:
0175   0514             ;; break; // check for empty input 
0176   0514 0A FA 08      jmp _for3_exit ; for break
0177   0517 0A 1A 05      jmp _if5_exit
0178   051A             _if5_exit:
0179   051A             ;; is_assignment = 0; 
0180   051A FA F9 FF      lea d, [bp + -7] ; $is_assignment         
0181   051D 26 00 00      mov b, $0        
0182   0520 FD 3E         mov [d], bl
0183   0522             ;; if(toktype == IDENTIFIER){ 
0184   0522             _if6_cond:
0185   0522 29 81 2F      mov b, [_toktype] ; $toktype           
0186   0525             ; START RELATIONAL
0187   0525 D7            push a
0188   0526 11            mov a, b
0189   0527 26 05 00      mov b, 5; IDENTIFIER
0190   052A B0            cmp a, b
0191   052B FD 71         seq ; ==
0192   052D E4            pop a
0193   052E             ; END RELATIONAL
0194   052E C0 00 00      cmp b, 0
0195   0531 C6 5F 05      je _if6_exit
0196   0534             _if6_true:
0197   0534             ;; strcpy(varname, token); 
0198   0534 34 FA FF      mov bl, [bp + -6] ; $varname
0199   0537 A7 00         mov bh, 0             
0200   0539 FD AB         swp b
0201   053B D8            push b
0202   053C 26 85 2F      mov b, _token_data ; $token           
0203   053F FD AB         swp b
0204   0541 D8            push b
0205   0542 07 2C 0C      call strcpy
0206   0545 51 04 00      add sp, 4
0207   0548             ;; get(); 
0208   0548 07 1F 1A      call get
0209   054B             ;; is_assignment = tok == ASSIGNMENT; 
0210   054B FA F9 FF      lea d, [bp + -7] ; $is_assignment         
0211   054E 29 7F 2F      mov b, [_tok] ; $tok           
0212   0551             ; START RELATIONAL
0213   0551 D7            push a
0214   0552 11            mov a, b
0215   0553 26 11 00      mov b, 17; ASSIGNMENT
0216   0556 B0            cmp a, b
0217   0557 FD 71         seq ; ==
0218   0559 E4            pop a
0219   055A             ; END RELATIONAL        
0220   055A FD 3E         mov [d], bl
0221   055C 0A 5F 05      jmp _if6_exit
0222   055F             _if6_exit:
0223   055F             ;; if(is_assignment){ 
0224   055F             _if7_cond:
0225   055F 34 F9 FF      mov bl, [bp + -7] ; $is_assignment
0226   0562 A7 00         mov bh, 0             
0227   0564 C0 00 00      cmp b, 0
0228   0567 C6 F4 05      je _if7_else
0229   056A             _if7_true:
0230   056A             ;; get(); 
0231   056A 07 1F 1A      call get
0232   056D             ;; if(toktype == INTEGER_CONST) set_int_var(varname, atoi(token)); 
0233   056D             _if8_cond:
0234   056D 29 81 2F      mov b, [_toktype] ; $toktype           
0235   0570             ; START RELATIONAL
0236   0570 D7            push a
0237   0571 11            mov a, b
0238   0572 26 04 00      mov b, 4; INTEGER_CONST
0239   0575 B0            cmp a, b
0240   0576 FD 71         seq ; ==
0241   0578 E4            pop a
0242   0579             ; END RELATIONAL
0243   0579 C0 00 00      cmp b, 0
0244   057C C6 9F 05      je _if8_else
0245   057F             _if8_true:
0246   057F             ;; set_int_var(varname, atoi(token)); 
0247   057F 34 FA FF      mov bl, [bp + -6] ; $varname
0248   0582 A7 00         mov bh, 0             
0249   0584 FD AB         swp b
0250   0586 D8            push b
0251   0587 26 85 2F      mov b, _token_data ; $token           
0252   058A FD AB         swp b
0253   058C D8            push b
0254   058D 07 F4 10      call atoi
0255   0590 51 02 00      add sp, 2
0256   0593 FD AB         swp b
0257   0595 D8            push b
0258   0596 07 A1 2A      call set_int_var
0259   0599 51 04 00      add sp, 4
0260   059C 0A F1 05      jmp _if8_exit
0261   059F             _if8_else:
0262   059F             ;; if(toktype == STRING_CONST) set_string_var(varname, string_const); 
0263   059F             _if9_cond:
0264   059F 29 81 2F      mov b, [_toktype] ; $toktype           
0265   05A2             ; START RELATIONAL
0266   05A2 D7            push a
0267   05A3 11            mov a, b
0268   05A4 26 03 00      mov b, 3; STRING_CONST
0269   05A7 B0            cmp a, b
0270   05A8 FD 71         seq ; ==
0271   05AA E4            pop a
0272   05AB             ; END RELATIONAL
0273   05AB C0 00 00      cmp b, 0
0274   05AE C6 C8 05      je _if9_else
0275   05B1             _if9_true:
0276   05B1             ;; set_string_var(varname, string_const); 
0277   05B1 34 FA FF      mov bl, [bp + -6] ; $varname
0278   05B4 A7 00         mov bh, 0             
0279   05B6 FD AB         swp b
0280   05B8 D8            push b
0281   05B9 26 85 30      mov b, _string_const_data ; $string_const           
0282   05BC FD AB         swp b
0283   05BE D8            push b
0284   05BF 07 76 29      call set_string_var
0285   05C2 51 04 00      add sp, 4
0286   05C5 0A F1 05      jmp _if9_exit
0287   05C8             _if9_else:
0288   05C8             ;; if(toktype == IDENTIFIER) set_string_var(varname, token); 
0289   05C8             _if10_cond:
0290   05C8 29 81 2F      mov b, [_toktype] ; $toktype           
0291   05CB             ; START RELATIONAL
0292   05CB D7            push a
0293   05CC 11            mov a, b
0294   05CD 26 05 00      mov b, 5; IDENTIFIER
0295   05D0 B0            cmp a, b
0296   05D1 FD 71         seq ; ==
0297   05D3 E4            pop a
0298   05D4             ; END RELATIONAL
0299   05D4 C0 00 00      cmp b, 0
0300   05D7 C6 F1 05      je _if10_exit
0301   05DA             _if10_true:
0302   05DA             ;; set_string_var(varname, token); 
0303   05DA 34 FA FF      mov bl, [bp + -6] ; $varname
0304   05DD A7 00         mov bh, 0             
0305   05DF FD AB         swp b
0306   05E1 D8            push b
0307   05E2 26 85 2F      mov b, _token_data ; $token           
0308   05E5 FD AB         swp b
0309   05E7 D8            push b
0310   05E8 07 76 29      call set_string_var
0311   05EB 51 04 00      add sp, 4
0312   05EE 0A F1 05      jmp _if10_exit
0313   05F1             _if10_exit:
0314   05F1             _if9_exit:
0315   05F1             _if8_exit:
0316   05F1 0A F7 08      jmp _if7_exit
0317   05F4             _if7_else:
0318   05F4             ;; prog = temp_prog; 
0319   05F4 3B 83 2F      mov d, _prog ; $prog         
0320   05F7 2C FB FF      mov b, [bp + -5] ; $temp_prog                     
0321   05FA FD 43         mov [d], b
0322   05FC             ;; get(); 
0323   05FC 07 1F 1A      call get
0324   05FF             ;; if(!strcmp(token, "cd")) command_cd(); 
0325   05FF             _if11_cond:
0326   05FF 26 85 2F      mov b, _token_data ; $token           
0327   0602 FD AB         swp b
0328   0604 D8            push b
0329   0605 26 48 38      mov b, __s7 ; "cd"
0330   0608 FD AB         swp b
0331   060A D8            push b
0332   060B 07 82 0C      call strcmp
0333   060E 51 04 00      add sp, 4
0334   0611 C0 00 00      cmp b, 0
0335   0614 FD 71         seq ; !
0336   0616 C0 00 00      cmp b, 0
0337   0619 C6 22 06      je _if11_else
0338   061C             _if11_true:
0339   061C             ;; command_cd(); 
0340   061C 07 A8 2D      call command_cd
0341   061F 0A F7 08      jmp _if11_exit
0342   0622             _if11_else:
0343   0622             ;; if(!strcmp(token, "shell")) command_shell(); 
0344   0622             _if12_cond:
0345   0622 26 85 2F      mov b, _token_data ; $token           
0346   0625 FD AB         swp b
0347   0627 D8            push b
0348   0628 26 4B 38      mov b, __s8 ; "shell"
0349   062B FD AB         swp b
0350   062D D8            push b
0351   062E 07 82 0C      call strcmp
0352   0631 51 04 00      add sp, 4
0353   0634 C0 00 00      cmp b, 0
0354   0637 FD 71         seq ; !
0355   0639 C0 00 00      cmp b, 0
0356   063C C6 45 06      je _if12_else
0357   063F             _if12_true:
0358   063F             ;; command_shell(); 
0359   063F 07 B2 2E      call command_shell
0360   0642 0A F7 08      jmp _if12_exit
0361   0645             _if12_else:
0362   0645             ;; back(); 
0363   0645 07 74 18      call back
0364   0648             ;; get_path(); 
0365   0648 07 CB 18      call get_path
0366   064B             ;; strcpy(path, token); // save file path 
0367   064B 26 87 33      mov b, _path_data ; $path           
0368   064E FD AB         swp b
0369   0650 D8            push b
0370   0651 26 85 2F      mov b, _token_data ; $token           
0371   0654 FD AB         swp b
0372   0656 D8            push b
0373   0657 07 2C 0C      call strcpy
0374   065A 51 04 00      add sp, 4
0375   065D             ;; for(i = 0; i < 256; i++) argument[i] = 0; 
0376   065D             _for13_init:
0377   065D FA 73 FF      lea d, [bp + -141] ; $i         
0378   0660 26 00 00      mov b, $0        
0379   0663 FD 43         mov [d], b
0380   0665             _for13_cond:
0381   0665 2C 73 FF      mov b, [bp + -141] ; $i             
0382   0668             ; START RELATIONAL
0383   0668 D7            push a
0384   0669 11            mov a, b
0385   066A 26 00 01      mov b, $100
0386   066D B0            cmp a, b
0387   066E FD 73         slt ; < 
0388   0670 E4            pop a
0389   0671             ; END RELATIONAL
0390   0671 C0 00 00      cmp b, 0
0391   0674 C6 96 06      je _for13_exit
0392   0677             _for13_block:
0393   0677             ;; argument[i] = 0; 
0394   0677 3B 87 35      mov d, _argument_data ; $argument
0395   067A D7            push a         
0396   067B 2C 73 FF      mov b, [bp + -141] ; $i                     
0397   067E 5A            add d, b
0398   067F E4            pop a         
0399   0680 26 00 00      mov b, $0        
0400   0683 FD 3E         mov [d], bl
0401   0685             _for13_update:
0402   0685 2C 73 FF      mov b, [bp + -141] ; $i             
0403   0688 FD 79         mov g, b
0404   068A FD 77         inc b
0405   068C FA 73 FF      lea d, [bp + -141] ; $i
0406   068F FD 43         mov [d], b
0407   0691 FD 27         mov b, g
0408   0693 0A 65 06      jmp _for13_cond
0409   0696             _for13_exit:
0410   0696             ;; get(); 
0411   0696 07 1F 1A      call get
0412   0699             ;; if(tok != SEMICOLON && toktype != END){ 
0413   0699             _if14_cond:
0414   0699 29 7F 2F      mov b, [_tok] ; $tok           
0415   069C             ; START RELATIONAL
0416   069C D7            push a
0417   069D 11            mov a, b
0418   069E 26 23 00      mov b, 35; SEMICOLON
0419   06A1 B0            cmp a, b
0420   06A2 FD 72         sneq ; !=
0421   06A4 E4            pop a
0422   06A5             ; END RELATIONAL
0423   06A5 D7            push a
0424   06A6 11            mov a, b
0425   06A7 29 81 2F      mov b, [_toktype] ; $toktype           
0426   06AA             ; START RELATIONAL
0427   06AA D7            push a
0428   06AB 11            mov a, b
0429   06AC 26 06 00      mov b, 6; END
0430   06AF B0            cmp a, b
0431   06B0 FD 72         sneq ; !=
0432   06B2 E4            pop a
0433   06B3             ; END RELATIONAL
0434   06B3 FD A7         sand a, b ; &&
0435   06B5 E4            pop a
0436   06B6 C0 00 00      cmp b, 0
0437   06B9 C6 FE 07      je _if14_exit
0438   06BC             _if14_true:
0439   06BC             ;; back(); 
0440   06BC 07 74 18      call back
0441   06BF             ;; p = argument; 
0442   06BF FA FF FF      lea d, [bp + -1] ; $p         
0443   06C2 26 87 35      mov b, _argument_data ; $argument                   
0444   06C5 FD 43         mov [d], b
0445   06C7             ;; do{ 
0446   06C7             _do15_block:
0447   06C7             ;; if(*prog == '$'){ 
0448   06C7             _if16_cond:
0449   06C7 29 83 2F      mov b, [_prog] ; $prog           
0450   06CA 74            mov d, b
0451   06CB 32            mov bl, [d]
0452   06CC A7 00         mov bh, 0
0453   06CE             ; START RELATIONAL
0454   06CE D7            push a
0455   06CF 11            mov a, b
0456   06D0 26 24 00      mov b, $24
0457   06D3 B0            cmp a, b
0458   06D4 FD 71         seq ; ==
0459   06D6 E4            pop a
0460   06D7             ; END RELATIONAL
0461   06D7 C0 00 00      cmp b, 0
0462   06DA C6 A2 07      je _if16_else
0463   06DD             _if16_true:
0464   06DD             ;; prog++; 
0465   06DD 29 83 2F      mov b, [_prog] ; $prog           
0466   06E0 FD 79         mov g, b
0467   06E2 FD 77         inc b
0468   06E4 3B 83 2F      mov d, _prog ; $prog
0469   06E7 FD 43         mov [d], b
0470   06E9 FD 27         mov b, g
0471   06EB             ;; get(); // get variable name 
0472   06EB 07 1F 1A      call get
0473   06EE             ;; var_index = get_var_index(token); 
0474   06EE FA 75 FF      lea d, [bp + -139] ; $var_index
0475   06F1 DA            push d
0476   06F2 26 85 2F      mov b, _token_data ; $token           
0477   06F5 FD AB         swp b
0478   06F7 D8            push b
0479   06F8 07 84 2B      call get_var_index
0480   06FB 51 02 00      add sp, 2
0481   06FE E7            pop d
0482   06FF FD 43         mov [d], b
0483   0701             ;; if(var_index != -1){ 
0484   0701             _if17_cond:
0485   0701 2C 75 FF      mov b, [bp + -139] ; $var_index             
0486   0704             ; START RELATIONAL
0487   0704 D7            push a
0488   0705 11            mov a, b
0489   0706 26 01 00      mov b, $1
0490   0709 FD 97         neg b
0491   070B B0            cmp a, b
0492   070C FD 72         sneq ; !=
0493   070E E4            pop a
0494   070F             ; END RELATIONAL
0495   070F C0 00 00      cmp b, 0
0496   0712 C6 9F 07      je _if17_exit
0497   0715             _if17_true:
0498   0715             ;; if(get_var_type(token) == SHELL_VAR_TYP_INT) strcat(argument, "123"); 
0499   0715             _if18_cond:
0500   0715 26 85 2F      mov b, _token_data ; $token           
0501   0718 FD AB         swp b
0502   071A D8            push b
0503   071B 07 F0 2B      call get_var_type
0504   071E 51 02 00      add sp, 2
0505   0721             ; START RELATIONAL
0506   0721 D7            push a
0507   0722 11            mov a, b
0508   0723 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
0509   0726 B0            cmp a, b
0510   0727 FD 71         seq ; ==
0511   0729 E4            pop a
0512   072A             ; END RELATIONAL
0513   072A C0 00 00      cmp b, 0
0514   072D C6 45 07      je _if18_else
0515   0730             _if18_true:
0516   0730             ;; strcat(argument, "123"); 
0517   0730 26 87 35      mov b, _argument_data ; $argument           
0518   0733 FD AB         swp b
0519   0735 D8            push b
0520   0736 26 51 38      mov b, __s9 ; "123"
0521   0739 FD AB         swp b
0522   073B D8            push b
0523   073C 07 DF 0C      call strcat
0524   073F 51 04 00      add sp, 4
0525   0742 0A 7E 07      jmp _if18_exit
0526   0745             _if18_else:
0527   0745             ;; if(get_var_type(token) == SHELL_VAR_TYP_STR) strcat(argument, get_shell_var_strval(var_index)); 
0528   0745             _if19_cond:
0529   0745 26 85 2F      mov b, _token_data ; $token           
0530   0748 FD AB         swp b
0531   074A D8            push b
0532   074B 07 F0 2B      call get_var_type
0533   074E 51 02 00      add sp, 2
0534   0751             ; START RELATIONAL
0535   0751 D7            push a
0536   0752 11            mov a, b
0537   0753 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
0538   0756 B0            cmp a, b
0539   0757 FD 71         seq ; ==
0540   0759 E4            pop a
0541   075A             ; END RELATIONAL
0542   075A C0 00 00      cmp b, 0
0543   075D C6 7E 07      je _if19_exit
0544   0760             _if19_true:
0545   0760             ;; strcat(argument, get_shell_var_strval(var_index)); 
0546   0760 26 87 35      mov b, _argument_data ; $argument           
0547   0763 FD AB         swp b
0548   0765 D8            push b
0549   0766 2C 75 FF      mov b, [bp + -139] ; $var_index             
0550   0769 FD AB         swp b
0551   076B D8            push b
0552   076C 07 62 2D      call get_shell_var_strval
0553   076F 51 02 00      add sp, 2
0554   0772 FD AB         swp b
0555   0774 D8            push b
0556   0775 07 DF 0C      call strcat
0557   0778 51 04 00      add sp, 4
0558   077B 0A 7E 07      jmp _if19_exit
0559   077E             _if19_exit:
0560   077E             _if18_exit:
0561   077E             ;; while(*p) p++; 
0562   077E             _while20_cond:
0563   077E 2C FF FF      mov b, [bp + -1] ; $p             
0564   0781 74            mov d, b
0565   0782 32            mov bl, [d]
0566   0783 A7 00         mov bh, 0
0567   0785 C0 00 00      cmp b, 0
0568   0788 C6 9C 07      je _while20_exit
0569   078B             _while20_block:
0570   078B             ;; p++; 
0571   078B 2C FF FF      mov b, [bp + -1] ; $p             
0572   078E FD 79         mov g, b
0573   0790 FD 77         inc b
0574   0792 FA FF FF      lea d, [bp + -1] ; $p
0575   0795 FD 43         mov [d], b
0576   0797 FD 27         mov b, g
0577   0799 0A 7E 07      jmp _while20_cond
0578   079C             _while20_exit:
0579   079C 0A 9F 07      jmp _if17_exit
0580   079F             _if17_exit:
0581   079F 0A C6 07      jmp _if16_exit
0582   07A2             _if16_else:
0583   07A2             ;; *p++ = *prog++; 
0584   07A2 2C FF FF      mov b, [bp + -1] ; $p             
0585   07A5 FD 79         mov g, b
0586   07A7 FD 77         inc b
0587   07A9 FA FF FF      lea d, [bp + -1] ; $p
0588   07AC FD 43         mov [d], b
0589   07AE FD 27         mov b, g
0590   07B0 D8            push b
0591   07B1 29 83 2F      mov b, [_prog] ; $prog           
0592   07B4 FD 79         mov g, b
0593   07B6 FD 77         inc b
0594   07B8 3B 83 2F      mov d, _prog ; $prog
0595   07BB FD 43         mov [d], b
0596   07BD FD 27         mov b, g
0597   07BF 74            mov d, b
0598   07C0 32            mov bl, [d]
0599   07C1 A7 00         mov bh, 0
0600   07C3 E7            pop d
0601   07C4 FD 3E         mov [d], bl
0602   07C6             _if16_exit:
0603   07C6             ;; } while(*prog != '\0' && *prog != ';'); 
0604   07C6             _do15_cond:
0605   07C6 29 83 2F      mov b, [_prog] ; $prog           
0606   07C9 74            mov d, b
0607   07CA 32            mov bl, [d]
0608   07CB A7 00         mov bh, 0
0609   07CD             ; START RELATIONAL
0610   07CD D7            push a
0611   07CE 11            mov a, b
0612   07CF 26 00 00      mov b, $0
0613   07D2 B0            cmp a, b
0614   07D3 FD 72         sneq ; !=
0615   07D5 E4            pop a
0616   07D6             ; END RELATIONAL
0617   07D6 D7            push a
0618   07D7 11            mov a, b
0619   07D8 29 83 2F      mov b, [_prog] ; $prog           
0620   07DB 74            mov d, b
0621   07DC 32            mov bl, [d]
0622   07DD A7 00         mov bh, 0
0623   07DF             ; START RELATIONAL
0624   07DF D7            push a
0625   07E0 11            mov a, b
0626   07E1 26 3B 00      mov b, $3b
0627   07E4 B0            cmp a, b
0628   07E5 FD 72         sneq ; !=
0629   07E7 E4            pop a
0630   07E8             ; END RELATIONAL
0631   07E8 FD A7         sand a, b ; &&
0632   07EA E4            pop a
0633   07EB C0 01 00      cmp b, 1
0634   07EE C6 C7 06      je _do15_block
0635   07F1             _do15_exit:
0636   07F1             ;; *p = '\0'; 
0637   07F1 2C FF FF      mov b, [bp + -1] ; $p             
0638   07F4 D8            push b
0639   07F5 26 00 00      mov b, $0
0640   07F8 E7            pop d
0641   07F9 FD 3E         mov [d], bl
0642   07FB 0A FE 07      jmp _if14_exit
0643   07FE             _if14_exit:
0644   07FE             ;; if(*path == '/' || *path == '.') spawn_new_proc(path, argument); 
0645   07FE             _if21_cond:
0646   07FE 26 87 33      mov b, _path_data ; $path           
0647   0801 74            mov d, b
0648   0802 32            mov bl, [d]
0649   0803 A7 00         mov bh, 0
0650   0805             ; START RELATIONAL
0651   0805 D7            push a
0652   0806 11            mov a, b
0653   0807 26 2F 00      mov b, $2f
0654   080A B0            cmp a, b
0655   080B FD 71         seq ; ==
0656   080D E4            pop a
0657   080E             ; END RELATIONAL
0658   080E D7            push a
0659   080F 11            mov a, b
0660   0810 26 87 33      mov b, _path_data ; $path           
0661   0813 74            mov d, b
0662   0814 32            mov bl, [d]
0663   0815 A7 00         mov bh, 0
0664   0817             ; START RELATIONAL
0665   0817 D7            push a
0666   0818 11            mov a, b
0667   0819 26 2E 00      mov b, $2e
0668   081C B0            cmp a, b
0669   081D FD 71         seq ; ==
0670   081F E4            pop a
0671   0820             ; END RELATIONAL
0672   0820 FD A8         sor a, b ; ||
0673   0822 E4            pop a
0674   0823 C0 00 00      cmp b, 0
0675   0826 C6 3E 08      je _if21_else
0676   0829             _if21_true:
0677   0829             ;; spawn_new_proc(path, argument); 
0678   0829 26 87 33      mov b, _path_data ; $path           
0679   082C FD AB         swp b
0680   082E D8            push b
0681   082F 26 87 35      mov b, _argument_data ; $argument           
0682   0832 FD AB         swp b
0683   0834 D8            push b
0684   0835 07 A3 2E      call spawn_new_proc
0685   0838 51 04 00      add sp, 4
0686   083B 0A F7 08      jmp _if21_exit
0687   083E             _if21_else:
0688   083E             ;; temp_prog = prog; 
0689   083E FA FB FF      lea d, [bp + -5] ; $temp_prog         
0690   0841 29 83 2F      mov b, [_prog] ; $prog                   
0691   0844 FD 43         mov [d], b
0692   0846             ;; prog = variables[0].as_string; 
0693   0846 3B 83 2F      mov d, _prog ; $prog
0694   0849 DA            push d
0695   084A 3B 07 37      mov d, _variables_data ; $variables
0696   084D D7            push a         
0697   084E 26 00 00      mov b, $0        
0698   0851 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0699   0855 E4            pop a
0700   0856 58 11 00      add d, 17
0701   0859 FD 14         clb
0702   085B 2A            mov b, [d]
0703   085C E7            pop d
0704   085D FD 43         mov [d], b
0705   085F             ;; for(;;){ 
0706   085F             _for22_init:
0707   085F             _for22_cond:
0708   085F             _for22_block:
0709   085F             ;; get(); 
0710   085F 07 1F 1A      call get
0711   0862             ;; if(toktype == END){ 
0712   0862             _if23_cond:
0713   0862 29 81 2F      mov b, [_toktype] ; $toktype           
0714   0865             ; START RELATIONAL
0715   0865 D7            push a
0716   0866 11            mov a, b
0717   0867 26 06 00      mov b, 6; END
0718   086A B0            cmp a, b
0719   086B FD 71         seq ; ==
0720   086D E4            pop a
0721   086E             ; END RELATIONAL
0722   086E C0 00 00      cmp b, 0
0723   0871 C6 7A 08      je _if23_else
0724   0874             _if23_true:
0725   0874             ;; break; 
0726   0874 0A EF 08      jmp _for22_exit ; for break
0727   0877 0A 7D 08      jmp _if23_exit
0728   087A             _if23_else:
0729   087A             ;; back(); 
0730   087A 07 74 18      call back
0731   087D             _if23_exit:
0732   087D             ;; get_path(); 
0733   087D 07 CB 18      call get_path
0734   0880             ;; strcpy(temp, token); 
0735   0880 26 87 34      mov b, _temp_data ; $temp           
0736   0883 FD AB         swp b
0737   0885 D8            push b
0738   0886 26 85 2F      mov b, _token_data ; $token           
0739   0889 FD AB         swp b
0740   088B D8            push b
0741   088C 07 2C 0C      call strcpy
0742   088F 51 04 00      add sp, 4
0743   0892             ;; strcat(temp, "/"); 
0744   0892 26 87 34      mov b, _temp_data ; $temp           
0745   0895 FD AB         swp b
0746   0897 D8            push b
0747   0898 26 55 38      mov b, __s10 ; "/"
0748   089B FD AB         swp b
0749   089D D8            push b
0750   089E 07 DF 0C      call strcat
0751   08A1 51 04 00      add sp, 4
0752   08A4             ;; strcat(temp, path); // form full filepath with ENV_PATH + given filename 
0753   08A4 26 87 34      mov b, _temp_data ; $temp           
0754   08A7 FD AB         swp b
0755   08A9 D8            push b
0756   08AA 26 87 33      mov b, _path_data ; $path           
0757   08AD FD AB         swp b
0758   08AF D8            push b
0759   08B0 07 DF 0C      call strcat
0760   08B3 51 04 00      add sp, 4
0761   08B6             ;; if(file_exists(temp) != 0){ 
0762   08B6             _if24_cond:
0763   08B6 26 87 34      mov b, _temp_data ; $temp           
0764   08B9 FD AB         swp b
0765   08BB D8            push b
0766   08BC 07 90 2D      call file_exists
0767   08BF 51 02 00      add sp, 2
0768   08C2             ; START RELATIONAL
0769   08C2 D7            push a
0770   08C3 11            mov a, b
0771   08C4 26 00 00      mov b, $0
0772   08C7 B0            cmp a, b
0773   08C8 FD 72         sneq ; !=
0774   08CA E4            pop a
0775   08CB             ; END RELATIONAL
0776   08CB C0 00 00      cmp b, 0
0777   08CE C6 E9 08      je _if24_exit
0778   08D1             _if24_true:
0779   08D1             ;; spawn_new_proc(temp, argument); 
0780   08D1 26 87 34      mov b, _temp_data ; $temp           
0781   08D4 FD AB         swp b
0782   08D6 D8            push b
0783   08D7 26 87 35      mov b, _argument_data ; $argument           
0784   08DA FD AB         swp b
0785   08DC D8            push b
0786   08DD 07 A3 2E      call spawn_new_proc
0787   08E0 51 04 00      add sp, 4
0788   08E3             ;; break; 
0789   08E3 0A EF 08      jmp _for22_exit ; for break
0790   08E6 0A E9 08      jmp _if24_exit
0791   08E9             _if24_exit:
0792   08E9             ;; get(); // get separator 
0793   08E9 07 1F 1A      call get
0794   08EC             _for22_update:
0795   08EC 0A 5F 08      jmp _for22_cond
0796   08EF             _for22_exit:
0797   08EF             ;; prog = temp_prog; 
0798   08EF 3B 83 2F      mov d, _prog ; $prog         
0799   08F2 2C FB FF      mov b, [bp + -5] ; $temp_prog                     
0800   08F5 FD 43         mov [d], b
0801   08F7             _if21_exit:
0802   08F7             _if12_exit:
0803   08F7             _if11_exit:
0804   08F7             _if7_exit:
0805   08F7             _for3_update:
0806   08F7 0A DF 04      jmp _for3_cond
0807   08FA             _for3_exit:
0808   08FA             _for1_update:
0809   08FA 0A 7D 04      jmp _for1_cond
0810   08FD             _for1_exit:
0811   08FD 05 0B         syscall sys_terminate_proc
0812   08FF             
0813   08FF             include_ctype_lib:
0814   08FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0815   0902             
0816   0902             ; --- BEGIN INLINE ASM BLOCK
0817   0902             .include "lib/ctype.asm"
0001+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0902             ; ctype.s
0003+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0902             
0005+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0902             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0902             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0902             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0902             ;; characters are supported.
0010+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0902             ;; _isalnum 
0012+  0902             ;; _isalpha 
0013+  0902             ;; islower 
0014+  0902             ;; isupper 
0015+  0902             ;; _isdigit 
0016+  0902             ;; isxdigit
0017+  0902             ;; iscntrl 
0018+  0902             ;; isgraph 
0019+  0902             ;; _isspace 
0020+  0902             ;; isblank 
0021+  0902             ;; isprint 
0022+  0902             ;; ispunct 
0023+  0902             ;; tolower 
0024+  0902             ;; toupper
0025+  0902             
0026+  0902             
0027+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0902             ;; IS ALPHANUMERIC
0029+  0902             ;; sets ZF according with result
0030+  0902             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0902             _isalnum:
0032+  0902 07 1F 09    	call _isalpha
0033+  0905 C6 0B 09    	je _isalnum_exit
0034+  0908 07 0C 09    	call _isdigit
0035+  090B             _isalnum_exit:
0036+  090B 09          	ret	
0037+  090C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  090C             ;; IS DIGIT
0039+  090C             ;; sets ZF according with result
0040+  090C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  090C             _isdigit:
0042+  090C DB          	push al
0043+  090D B9 30       	cmp al, '0'
0044+  090F C8 1B 09    	jlu _isdigit_false
0045+  0912 B9 39       	cmp al, '9'
0046+  0914 D1 1B 09    	jgu _isdigit_false
0047+  0917 87 00       	and al, 0	; set ZF
0048+  0919 E8          	pop al
0049+  091A 09          	ret
0050+  091B             _isdigit_false:
0051+  091B 8B 01       	or al, 1	; clear ZF
0052+  091D E8          	pop al
0053+  091E 09          	ret	
0054+  091F             	
0055+  091F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  091F             ;; IS ALPHA
0057+  091F             ;; sets ZF according with result
0058+  091F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  091F             _isalpha:
0060+  091F DB          	push al
0061+  0920 B9 5F       	cmp al, '_'
0062+  0922 C6 42 09    	je _isalpha_true
0063+  0925 B9 2E       	cmp al, '.'
0064+  0927 C6 42 09    	je _isalpha_true
0065+  092A B9 41       	cmp al, 'A'
0066+  092C C8 3E 09    	jlu _isalpha_false
0067+  092F B9 7A       	cmp al, 'z'
0068+  0931 D1 3E 09    	jgu _isalpha_false
0069+  0934 B9 5A       	cmp al, 'Z'
0070+  0936 D0 42 09    	jleu _isalpha_true
0071+  0939 B9 61       	cmp al, 'a'
0072+  093B C9 42 09    	jgeu _isalpha_true
0073+  093E             _isalpha_false:
0074+  093E 8B 01       	or al, 1	; clear ZF
0075+  0940 E8          	pop al
0076+  0941 09          	ret
0077+  0942             _isalpha_true:
0078+  0942 87 00       	and al, 0	; set ZF
0079+  0944 E8          	pop al
0080+  0945 09          	ret
0081+  0946             
0082+  0946             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0946             ;; IS PATH-ALPHA
0084+  0946             ;; sets ZF according with result
0085+  0946             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0946             ispath:
0087+  0946 DB          	push al
0088+  0947 07 0C 09    	call _isdigit
0089+  094A C6 74 09    	je ispath_true
0090+  094D B9 5F       	cmp al, '_'
0091+  094F C6 74 09    	je ispath_true
0092+  0952 B9 2F       	cmp al, '/'
0093+  0954 C6 74 09    	je ispath_true
0094+  0957 B9 2E       	cmp al, '.'
0095+  0959 C6 74 09    	je ispath_true
0096+  095C B9 41       	cmp al, 'A'
0097+  095E C8 70 09    	jlu ispath_false
0098+  0961 B9 7A       	cmp al, 'z'
0099+  0963 D1 70 09    	jgu ispath_false
0100+  0966 B9 5A       	cmp al, 'Z'
0101+  0968 D0 74 09    	jleu ispath_true
0102+  096B B9 61       	cmp al, 'a'
0103+  096D C9 74 09    	jgeu ispath_true
0104+  0970             ispath_false:
0105+  0970 8B 01       	or al, 1	; clear ZF
0106+  0972 E8          	pop al
0107+  0973 09          	ret
0108+  0974             ispath_true:
0109+  0974 87 00       	and al, 0	; set ZF
0110+  0976 E8          	pop al
0111+  0977 09          	ret
0112+  0978             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0978             ;; IS SPACE
0114+  0978             ;; sets ZF according with result
0115+  0978             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0978             _isspace:
0117+  0978 B9 20       	cmp al, $20		; ' '
0118+  097A C6 8E 09    	je _isspace_exit
0119+  097D B9 09       	cmp al, $09		; '\t'
0120+  097F C6 8E 09    	je _isspace_exit
0121+  0982 B9 0A       	cmp al, $0A		; '\n'
0122+  0984 C6 8E 09    	je _isspace_exit
0123+  0987 B9 0D       	cmp al, $0D		; '\r'
0124+  0989 C6 8E 09    	je _isspace_exit
0125+  098C B9 0B       	cmp al, $0B		; '\v'
0126+  098E             _isspace_exit:
0127+  098E 09          	ret	
0128+  098F             
0129+  098F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  098F             ; TO LOWER
0131+  098F             ; input in AL
0132+  098F             ; output in AL
0133+  098F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  098F             _to_lower:
0135+  098F B9 5A       	cmp al, 'Z'
0136+  0991 D1 96 09    	jgu _to_lower_ret
0137+  0994 6A 20       	add al, $20				; convert to lower case
0138+  0996             _to_lower_ret:
0139+  0996 09          	ret
0140+  0997             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0997             ; TO UPPER
0142+  0997             ; input in AL
0143+  0997             ; output in AL
0144+  0997             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0997             _to_upper:
0146+  0997 B9 61       	cmp al, 'a'
0147+  0999 C8 9E 09    	jlu _to_upper_ret
0148+  099C 6F 20       	sub al, $20			; convert to upper case
0149+  099E             _to_upper_ret:
0150+  099E 09          	ret
0151+  099F             
0818   099F             ; --- END INLINE ASM BLOCK
0819   099F             
0820   099F F9            leave
0821   09A0 09            ret
0822   09A1             
0823   09A1             is_space:
0824   09A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0825   09A4             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0826   09A4 34 05 00      mov bl, [bp + 5] ; $c
0827   09A7 A7 00         mov bh, 0             
0828   09A9             ; START RELATIONAL
0829   09A9 D7            push a
0830   09AA 11            mov a, b
0831   09AB 26 20 00      mov b, $20
0832   09AE B0            cmp a, b
0833   09AF FD 71         seq ; ==
0834   09B1 E4            pop a
0835   09B2             ; END RELATIONAL
0836   09B2 D7            push a
0837   09B3 11            mov a, b
0838   09B4 34 05 00      mov bl, [bp + 5] ; $c
0839   09B7 A7 00         mov bh, 0             
0840   09B9             ; START RELATIONAL
0841   09B9 D7            push a
0842   09BA 11            mov a, b
0843   09BB 26 09 00      mov b, $9
0844   09BE B0            cmp a, b
0845   09BF FD 71         seq ; ==
0846   09C1 E4            pop a
0847   09C2             ; END RELATIONAL
0848   09C2 FD A8         sor a, b ; ||
0849   09C4 11            mov a, b
0850   09C5 34 05 00      mov bl, [bp + 5] ; $c
0851   09C8 A7 00         mov bh, 0             
0852   09CA             ; START RELATIONAL
0853   09CA D7            push a
0854   09CB 11            mov a, b
0855   09CC 26 0A 00      mov b, $a
0856   09CF B0            cmp a, b
0857   09D0 FD 71         seq ; ==
0858   09D2 E4            pop a
0859   09D3             ; END RELATIONAL
0860   09D3 FD A8         sor a, b ; ||
0861   09D5 11            mov a, b
0862   09D6 34 05 00      mov bl, [bp + 5] ; $c
0863   09D9 A7 00         mov bh, 0             
0864   09DB             ; START RELATIONAL
0865   09DB D7            push a
0866   09DC 11            mov a, b
0867   09DD 26 0D 00      mov b, $d
0868   09E0 B0            cmp a, b
0869   09E1 FD 71         seq ; ==
0870   09E3 E4            pop a
0871   09E4             ; END RELATIONAL
0872   09E4 FD A8         sor a, b ; ||
0873   09E6 E4            pop a
0874   09E7 F9            leave
0875   09E8 09            ret
0876   09E9             
0877   09E9             is_digit:
0878   09E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0879   09EC             ;; return c >= '0' && c <= '9'; 
0880   09EC 34 05 00      mov bl, [bp + 5] ; $c
0881   09EF A7 00         mov bh, 0             
0882   09F1             ; START RELATIONAL
0883   09F1 D7            push a
0884   09F2 11            mov a, b
0885   09F3 26 30 00      mov b, $30
0886   09F6 B0            cmp a, b
0887   09F7 FD 80         sge ; >=
0888   09F9 E4            pop a
0889   09FA             ; END RELATIONAL
0890   09FA D7            push a
0891   09FB 11            mov a, b
0892   09FC 34 05 00      mov bl, [bp + 5] ; $c
0893   09FF A7 00         mov bh, 0             
0894   0A01             ; START RELATIONAL
0895   0A01 D7            push a
0896   0A02 11            mov a, b
0897   0A03 26 39 00      mov b, $39
0898   0A06 B0            cmp a, b
0899   0A07 FD 74         sle ; <=
0900   0A09 E4            pop a
0901   0A0A             ; END RELATIONAL
0902   0A0A FD A7         sand a, b ; &&
0903   0A0C E4            pop a
0904   0A0D F9            leave
0905   0A0E 09            ret
0906   0A0F             
0907   0A0F             is_alpha:
0908   0A0F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0909   0A12             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0910   0A12 34 05 00      mov bl, [bp + 5] ; $c
0911   0A15 A7 00         mov bh, 0             
0912   0A17             ; START RELATIONAL
0913   0A17 D7            push a
0914   0A18 11            mov a, b
0915   0A19 26 61 00      mov b, $61
0916   0A1C B0            cmp a, b
0917   0A1D FD 80         sge ; >=
0918   0A1F E4            pop a
0919   0A20             ; END RELATIONAL
0920   0A20 D7            push a
0921   0A21 11            mov a, b
0922   0A22 34 05 00      mov bl, [bp + 5] ; $c
0923   0A25 A7 00         mov bh, 0             
0924   0A27             ; START RELATIONAL
0925   0A27 D7            push a
0926   0A28 11            mov a, b
0927   0A29 26 7A 00      mov b, $7a
0928   0A2C B0            cmp a, b
0929   0A2D FD 74         sle ; <=
0930   0A2F E4            pop a
0931   0A30             ; END RELATIONAL
0932   0A30 FD A7         sand a, b ; &&
0933   0A32 E4            pop a
0934   0A33 D7            push a
0935   0A34 11            mov a, b
0936   0A35 34 05 00      mov bl, [bp + 5] ; $c
0937   0A38 A7 00         mov bh, 0             
0938   0A3A             ; START RELATIONAL
0939   0A3A D7            push a
0940   0A3B 11            mov a, b
0941   0A3C 26 41 00      mov b, $41
0942   0A3F B0            cmp a, b
0943   0A40 FD 80         sge ; >=
0944   0A42 E4            pop a
0945   0A43             ; END RELATIONAL
0946   0A43 D7            push a
0947   0A44 11            mov a, b
0948   0A45 34 05 00      mov bl, [bp + 5] ; $c
0949   0A48 A7 00         mov bh, 0             
0950   0A4A             ; START RELATIONAL
0951   0A4A D7            push a
0952   0A4B 11            mov a, b
0953   0A4C 26 5A 00      mov b, $5a
0954   0A4F B0            cmp a, b
0955   0A50 FD 74         sle ; <=
0956   0A52 E4            pop a
0957   0A53             ; END RELATIONAL
0958   0A53 FD A7         sand a, b ; &&
0959   0A55 E4            pop a
0960   0A56 FD A8         sor a, b ; ||
0961   0A58 11            mov a, b
0962   0A59 34 05 00      mov bl, [bp + 5] ; $c
0963   0A5C A7 00         mov bh, 0             
0964   0A5E             ; START RELATIONAL
0965   0A5E D7            push a
0966   0A5F 11            mov a, b
0967   0A60 26 5F 00      mov b, $5f
0968   0A63 B0            cmp a, b
0969   0A64 FD 71         seq ; ==
0970   0A66 E4            pop a
0971   0A67             ; END RELATIONAL
0972   0A67 FD A8         sor a, b ; ||
0973   0A69 E4            pop a
0974   0A6A F9            leave
0975   0A6B 09            ret
0976   0A6C             
0977   0A6C             is_delimiter:
0978   0A6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0979   0A6F             ;; if( 
0980   0A6F             _if25_cond:
0981   0A6F 34 05 00      mov bl, [bp + 5] ; $c
0982   0A72 A7 00         mov bh, 0             
0983   0A74             ; START RELATIONAL
0984   0A74 D7            push a
0985   0A75 11            mov a, b
0986   0A76 26 40 00      mov b, $40
0987   0A79 B0            cmp a, b
0988   0A7A FD 71         seq ; ==
0989   0A7C E4            pop a
0990   0A7D             ; END RELATIONAL
0991   0A7D D7            push a
0992   0A7E 11            mov a, b
0993   0A7F 34 05 00      mov bl, [bp + 5] ; $c
0994   0A82 A7 00         mov bh, 0             
0995   0A84             ; START RELATIONAL
0996   0A84 D7            push a
0997   0A85 11            mov a, b
0998   0A86 26 23 00      mov b, $23
0999   0A89 B0            cmp a, b
1000   0A8A FD 71         seq ; ==
1001   0A8C E4            pop a
1002   0A8D             ; END RELATIONAL
1003   0A8D FD A8         sor a, b ; ||
1004   0A8F 11            mov a, b
1005   0A90 34 05 00      mov bl, [bp + 5] ; $c
1006   0A93 A7 00         mov bh, 0             
1007   0A95             ; START RELATIONAL
1008   0A95 D7            push a
1009   0A96 11            mov a, b
1010   0A97 26 24 00      mov b, $24
1011   0A9A B0            cmp a, b
1012   0A9B FD 71         seq ; ==
1013   0A9D E4            pop a
1014   0A9E             ; END RELATIONAL
1015   0A9E FD A8         sor a, b ; ||
1016   0AA0 11            mov a, b
1017   0AA1 34 05 00      mov bl, [bp + 5] ; $c
1018   0AA4 A7 00         mov bh, 0             
1019   0AA6             ; START RELATIONAL
1020   0AA6 D7            push a
1021   0AA7 11            mov a, b
1022   0AA8 26 2B 00      mov b, $2b
1023   0AAB B0            cmp a, b
1024   0AAC FD 71         seq ; ==
1025   0AAE E4            pop a
1026   0AAF             ; END RELATIONAL
1027   0AAF FD A8         sor a, b ; ||
1028   0AB1 11            mov a, b
1029   0AB2 34 05 00      mov bl, [bp + 5] ; $c
1030   0AB5 A7 00         mov bh, 0             
1031   0AB7             ; START RELATIONAL
1032   0AB7 D7            push a
1033   0AB8 11            mov a, b
1034   0AB9 26 2D 00      mov b, $2d
1035   0ABC B0            cmp a, b
1036   0ABD FD 71         seq ; ==
1037   0ABF E4            pop a
1038   0AC0             ; END RELATIONAL
1039   0AC0 FD A8         sor a, b ; ||
1040   0AC2 11            mov a, b
1041   0AC3 34 05 00      mov bl, [bp + 5] ; $c
1042   0AC6 A7 00         mov bh, 0             
1043   0AC8             ; START RELATIONAL
1044   0AC8 D7            push a
1045   0AC9 11            mov a, b
1046   0ACA 26 2A 00      mov b, $2a
1047   0ACD B0            cmp a, b
1048   0ACE FD 71         seq ; ==
1049   0AD0 E4            pop a
1050   0AD1             ; END RELATIONAL
1051   0AD1 FD A8         sor a, b ; ||
1052   0AD3 11            mov a, b
1053   0AD4 34 05 00      mov bl, [bp + 5] ; $c
1054   0AD7 A7 00         mov bh, 0             
1055   0AD9             ; START RELATIONAL
1056   0AD9 D7            push a
1057   0ADA 11            mov a, b
1058   0ADB 26 2F 00      mov b, $2f
1059   0ADE B0            cmp a, b
1060   0ADF FD 71         seq ; ==
1061   0AE1 E4            pop a
1062   0AE2             ; END RELATIONAL
1063   0AE2 FD A8         sor a, b ; ||
1064   0AE4 11            mov a, b
1065   0AE5 34 05 00      mov bl, [bp + 5] ; $c
1066   0AE8 A7 00         mov bh, 0             
1067   0AEA             ; START RELATIONAL
1068   0AEA D7            push a
1069   0AEB 11            mov a, b
1070   0AEC 26 25 00      mov b, $25
1071   0AEF B0            cmp a, b
1072   0AF0 FD 71         seq ; ==
1073   0AF2 E4            pop a
1074   0AF3             ; END RELATIONAL
1075   0AF3 FD A8         sor a, b ; ||
1076   0AF5 11            mov a, b
1077   0AF6 34 05 00      mov bl, [bp + 5] ; $c
1078   0AF9 A7 00         mov bh, 0             
1079   0AFB             ; START RELATIONAL
1080   0AFB D7            push a
1081   0AFC 11            mov a, b
1082   0AFD 26 5B 00      mov b, $5b
1083   0B00 B0            cmp a, b
1084   0B01 FD 71         seq ; ==
1085   0B03 E4            pop a
1086   0B04             ; END RELATIONAL
1087   0B04 FD A8         sor a, b ; ||
1088   0B06 11            mov a, b
1089   0B07 34 05 00      mov bl, [bp + 5] ; $c
1090   0B0A A7 00         mov bh, 0             
1091   0B0C             ; START RELATIONAL
1092   0B0C D7            push a
1093   0B0D 11            mov a, b
1094   0B0E 26 5D 00      mov b, $5d
1095   0B11 B0            cmp a, b
1096   0B12 FD 71         seq ; ==
1097   0B14 E4            pop a
1098   0B15             ; END RELATIONAL
1099   0B15 FD A8         sor a, b ; ||
1100   0B17 11            mov a, b
1101   0B18 34 05 00      mov bl, [bp + 5] ; $c
1102   0B1B A7 00         mov bh, 0             
1103   0B1D             ; START RELATIONAL
1104   0B1D D7            push a
1105   0B1E 11            mov a, b
1106   0B1F 26 28 00      mov b, $28
1107   0B22 B0            cmp a, b
1108   0B23 FD 71         seq ; ==
1109   0B25 E4            pop a
1110   0B26             ; END RELATIONAL
1111   0B26 FD A8         sor a, b ; ||
1112   0B28 11            mov a, b
1113   0B29 34 05 00      mov bl, [bp + 5] ; $c
1114   0B2C A7 00         mov bh, 0             
1115   0B2E             ; START RELATIONAL
1116   0B2E D7            push a
1117   0B2F 11            mov a, b
1118   0B30 26 29 00      mov b, $29
1119   0B33 B0            cmp a, b
1120   0B34 FD 71         seq ; ==
1121   0B36 E4            pop a
1122   0B37             ; END RELATIONAL
1123   0B37 FD A8         sor a, b ; ||
1124   0B39 11            mov a, b
1125   0B3A 34 05 00      mov bl, [bp + 5] ; $c
1126   0B3D A7 00         mov bh, 0             
1127   0B3F             ; START RELATIONAL
1128   0B3F D7            push a
1129   0B40 11            mov a, b
1130   0B41 26 7B 00      mov b, $7b
1131   0B44 B0            cmp a, b
1132   0B45 FD 71         seq ; ==
1133   0B47 E4            pop a
1134   0B48             ; END RELATIONAL
1135   0B48 FD A8         sor a, b ; ||
1136   0B4A 11            mov a, b
1137   0B4B 34 05 00      mov bl, [bp + 5] ; $c
1138   0B4E A7 00         mov bh, 0             
1139   0B50             ; START RELATIONAL
1140   0B50 D7            push a
1141   0B51 11            mov a, b
1142   0B52 26 7D 00      mov b, $7d
1143   0B55 B0            cmp a, b
1144   0B56 FD 71         seq ; ==
1145   0B58 E4            pop a
1146   0B59             ; END RELATIONAL
1147   0B59 FD A8         sor a, b ; ||
1148   0B5B 11            mov a, b
1149   0B5C 34 05 00      mov bl, [bp + 5] ; $c
1150   0B5F A7 00         mov bh, 0             
1151   0B61             ; START RELATIONAL
1152   0B61 D7            push a
1153   0B62 11            mov a, b
1154   0B63 26 3A 00      mov b, $3a
1155   0B66 B0            cmp a, b
1156   0B67 FD 71         seq ; ==
1157   0B69 E4            pop a
1158   0B6A             ; END RELATIONAL
1159   0B6A FD A8         sor a, b ; ||
1160   0B6C 11            mov a, b
1161   0B6D 34 05 00      mov bl, [bp + 5] ; $c
1162   0B70 A7 00         mov bh, 0             
1163   0B72             ; START RELATIONAL
1164   0B72 D7            push a
1165   0B73 11            mov a, b
1166   0B74 26 3B 00      mov b, $3b
1167   0B77 B0            cmp a, b
1168   0B78 FD 71         seq ; ==
1169   0B7A E4            pop a
1170   0B7B             ; END RELATIONAL
1171   0B7B FD A8         sor a, b ; ||
1172   0B7D 11            mov a, b
1173   0B7E 34 05 00      mov bl, [bp + 5] ; $c
1174   0B81 A7 00         mov bh, 0             
1175   0B83             ; START RELATIONAL
1176   0B83 D7            push a
1177   0B84 11            mov a, b
1178   0B85 26 3C 00      mov b, $3c
1179   0B88 B0            cmp a, b
1180   0B89 FD 71         seq ; ==
1181   0B8B E4            pop a
1182   0B8C             ; END RELATIONAL
1183   0B8C FD A8         sor a, b ; ||
1184   0B8E 11            mov a, b
1185   0B8F 34 05 00      mov bl, [bp + 5] ; $c
1186   0B92 A7 00         mov bh, 0             
1187   0B94             ; START RELATIONAL
1188   0B94 D7            push a
1189   0B95 11            mov a, b
1190   0B96 26 3E 00      mov b, $3e
1191   0B99 B0            cmp a, b
1192   0B9A FD 71         seq ; ==
1193   0B9C E4            pop a
1194   0B9D             ; END RELATIONAL
1195   0B9D FD A8         sor a, b ; ||
1196   0B9F 11            mov a, b
1197   0BA0 34 05 00      mov bl, [bp + 5] ; $c
1198   0BA3 A7 00         mov bh, 0             
1199   0BA5             ; START RELATIONAL
1200   0BA5 D7            push a
1201   0BA6 11            mov a, b
1202   0BA7 26 3D 00      mov b, $3d
1203   0BAA B0            cmp a, b
1204   0BAB FD 71         seq ; ==
1205   0BAD E4            pop a
1206   0BAE             ; END RELATIONAL
1207   0BAE FD A8         sor a, b ; ||
1208   0BB0 11            mov a, b
1209   0BB1 34 05 00      mov bl, [bp + 5] ; $c
1210   0BB4 A7 00         mov bh, 0             
1211   0BB6             ; START RELATIONAL
1212   0BB6 D7            push a
1213   0BB7 11            mov a, b
1214   0BB8 26 21 00      mov b, $21
1215   0BBB B0            cmp a, b
1216   0BBC FD 71         seq ; ==
1217   0BBE E4            pop a
1218   0BBF             ; END RELATIONAL
1219   0BBF FD A8         sor a, b ; ||
1220   0BC1 11            mov a, b
1221   0BC2 34 05 00      mov bl, [bp + 5] ; $c
1222   0BC5 A7 00         mov bh, 0             
1223   0BC7             ; START RELATIONAL
1224   0BC7 D7            push a
1225   0BC8 11            mov a, b
1226   0BC9 26 5E 00      mov b, $5e
1227   0BCC B0            cmp a, b
1228   0BCD FD 71         seq ; ==
1229   0BCF E4            pop a
1230   0BD0             ; END RELATIONAL
1231   0BD0 FD A8         sor a, b ; ||
1232   0BD2 11            mov a, b
1233   0BD3 34 05 00      mov bl, [bp + 5] ; $c
1234   0BD6 A7 00         mov bh, 0             
1235   0BD8             ; START RELATIONAL
1236   0BD8 D7            push a
1237   0BD9 11            mov a, b
1238   0BDA 26 26 00      mov b, $26
1239   0BDD B0            cmp a, b
1240   0BDE FD 71         seq ; ==
1241   0BE0 E4            pop a
1242   0BE1             ; END RELATIONAL
1243   0BE1 FD A8         sor a, b ; ||
1244   0BE3 11            mov a, b
1245   0BE4 34 05 00      mov bl, [bp + 5] ; $c
1246   0BE7 A7 00         mov bh, 0             
1247   0BE9             ; START RELATIONAL
1248   0BE9 D7            push a
1249   0BEA 11            mov a, b
1250   0BEB 26 7C 00      mov b, $7c
1251   0BEE B0            cmp a, b
1252   0BEF FD 71         seq ; ==
1253   0BF1 E4            pop a
1254   0BF2             ; END RELATIONAL
1255   0BF2 FD A8         sor a, b ; ||
1256   0BF4 11            mov a, b
1257   0BF5 34 05 00      mov bl, [bp + 5] ; $c
1258   0BF8 A7 00         mov bh, 0             
1259   0BFA             ; START RELATIONAL
1260   0BFA D7            push a
1261   0BFB 11            mov a, b
1262   0BFC 26 7E 00      mov b, $7e
1263   0BFF B0            cmp a, b
1264   0C00 FD 71         seq ; ==
1265   0C02 E4            pop a
1266   0C03             ; END RELATIONAL
1267   0C03 FD A8         sor a, b ; ||
1268   0C05 11            mov a, b
1269   0C06 34 05 00      mov bl, [bp + 5] ; $c
1270   0C09 A7 00         mov bh, 0             
1271   0C0B             ; START RELATIONAL
1272   0C0B D7            push a
1273   0C0C 11            mov a, b
1274   0C0D 26 2E 00      mov b, $2e
1275   0C10 B0            cmp a, b
1276   0C11 FD 71         seq ; ==
1277   0C13 E4            pop a
1278   0C14             ; END RELATIONAL
1279   0C14 FD A8         sor a, b ; ||
1280   0C16 E4            pop a
1281   0C17 C0 00 00      cmp b, 0
1282   0C1A C6 25 0C      je _if25_else
1283   0C1D             _if25_true:
1284   0C1D             ;; return 1; 
1285   0C1D 26 01 00      mov b, $1
1286   0C20 F9            leave
1287   0C21 09            ret
1288   0C22 0A 2A 0C      jmp _if25_exit
1289   0C25             _if25_else:
1290   0C25             ;; return 0; 
1291   0C25 26 00 00      mov b, $0
1292   0C28 F9            leave
1293   0C29 09            ret
1294   0C2A             _if25_exit:
1295   0C2A F9            leave
1296   0C2B 09            ret
1297   0C2C             
1298   0C2C             strcpy:
1299   0C2C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1300   0C2F             ; $psrc 
1301   0C2F             ; $pdest 
1302   0C2F 52 04 00      sub sp, 4
1303   0C32             ;; psrc = src; 
1304   0C32 FA FF FF      lea d, [bp + -1] ; $psrc         
1305   0C35 2C 05 00      mov b, [bp + 5] ; $src                     
1306   0C38 FD 43         mov [d], b
1307   0C3A             ;; pdest = dest; 
1308   0C3A FA FD FF      lea d, [bp + -3] ; $pdest         
1309   0C3D 2C 07 00      mov b, [bp + 7] ; $dest                     
1310   0C40 FD 43         mov [d], b
1311   0C42             ;; while(*psrc) *pdest++ = *psrc++; 
1312   0C42             _while26_cond:
1313   0C42 2C FF FF      mov b, [bp + -1] ; $psrc             
1314   0C45 74            mov d, b
1315   0C46 32            mov bl, [d]
1316   0C47 A7 00         mov bh, 0
1317   0C49 C0 00 00      cmp b, 0
1318   0C4C C6 76 0C      je _while26_exit
1319   0C4F             _while26_block:
1320   0C4F             ;; *pdest++ = *psrc++; 
1321   0C4F 2C FD FF      mov b, [bp + -3] ; $pdest             
1322   0C52 FD 79         mov g, b
1323   0C54 FD 77         inc b
1324   0C56 FA FD FF      lea d, [bp + -3] ; $pdest
1325   0C59 FD 43         mov [d], b
1326   0C5B FD 27         mov b, g
1327   0C5D D8            push b
1328   0C5E 2C FF FF      mov b, [bp + -1] ; $psrc             
1329   0C61 FD 79         mov g, b
1330   0C63 FD 77         inc b
1331   0C65 FA FF FF      lea d, [bp + -1] ; $psrc
1332   0C68 FD 43         mov [d], b
1333   0C6A FD 27         mov b, g
1334   0C6C 74            mov d, b
1335   0C6D 32            mov bl, [d]
1336   0C6E A7 00         mov bh, 0
1337   0C70 E7            pop d
1338   0C71 FD 3E         mov [d], bl
1339   0C73 0A 42 0C      jmp _while26_cond
1340   0C76             _while26_exit:
1341   0C76             ;; *pdest = '\0'; 
1342   0C76 2C FD FF      mov b, [bp + -3] ; $pdest             
1343   0C79 D8            push b
1344   0C7A 26 00 00      mov b, $0
1345   0C7D E7            pop d
1346   0C7E FD 3E         mov [d], bl
1347   0C80 F9            leave
1348   0C81 09            ret
1349   0C82             
1350   0C82             strcmp:
1351   0C82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1352   0C85             ;; while (*s1 && (*s1 == *s2)) { 
1353   0C85             _while27_cond:
1354   0C85 2C 07 00      mov b, [bp + 7] ; $s1             
1355   0C88 74            mov d, b
1356   0C89 32            mov bl, [d]
1357   0C8A A7 00         mov bh, 0
1358   0C8C D7            push a
1359   0C8D 11            mov a, b
1360   0C8E 2C 07 00      mov b, [bp + 7] ; $s1             
1361   0C91 74            mov d, b
1362   0C92 32            mov bl, [d]
1363   0C93 A7 00         mov bh, 0
1364   0C95             ; START RELATIONAL
1365   0C95 D7            push a
1366   0C96 11            mov a, b
1367   0C97 2C 05 00      mov b, [bp + 5] ; $s2             
1368   0C9A 74            mov d, b
1369   0C9B 32            mov bl, [d]
1370   0C9C A7 00         mov bh, 0
1371   0C9E B0            cmp a, b
1372   0C9F FD 71         seq ; ==
1373   0CA1 E4            pop a
1374   0CA2             ; END RELATIONAL
1375   0CA2 FD A7         sand a, b ; &&
1376   0CA4 E4            pop a
1377   0CA5 C0 00 00      cmp b, 0
1378   0CA8 C6 CA 0C      je _while27_exit
1379   0CAB             _while27_block:
1380   0CAB             ;; s1++; 
1381   0CAB 2C 07 00      mov b, [bp + 7] ; $s1             
1382   0CAE FD 79         mov g, b
1383   0CB0 FD 77         inc b
1384   0CB2 FA 07 00      lea d, [bp + 7] ; $s1
1385   0CB5 FD 43         mov [d], b
1386   0CB7 FD 27         mov b, g
1387   0CB9             ;; s2++; 
1388   0CB9 2C 05 00      mov b, [bp + 5] ; $s2             
1389   0CBC FD 79         mov g, b
1390   0CBE FD 77         inc b
1391   0CC0 FA 05 00      lea d, [bp + 5] ; $s2
1392   0CC3 FD 43         mov [d], b
1393   0CC5 FD 27         mov b, g
1394   0CC7 0A 85 0C      jmp _while27_cond
1395   0CCA             _while27_exit:
1396   0CCA             ;; return *s1 - *s2; 
1397   0CCA 2C 07 00      mov b, [bp + 7] ; $s1             
1398   0CCD 74            mov d, b
1399   0CCE 32            mov bl, [d]
1400   0CCF A7 00         mov bh, 0
1401   0CD1             ; START TERMS
1402   0CD1 D7            push a
1403   0CD2 11            mov a, b
1404   0CD3 2C 05 00      mov b, [bp + 5] ; $s2             
1405   0CD6 74            mov d, b
1406   0CD7 32            mov bl, [d]
1407   0CD8 A7 00         mov bh, 0
1408   0CDA 60            sub a, b
1409   0CDB 27            mov b, a
1410   0CDC E4            pop a
1411   0CDD             ; END TERMS
1412   0CDD F9            leave
1413   0CDE 09            ret
1414   0CDF             
1415   0CDF             strcat:
1416   0CDF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1417   0CE2             ; $dest_len 
1418   0CE2             ; $i 
1419   0CE2 52 04 00      sub sp, 4
1420   0CE5             ;; dest_len = strlen(dest); 
1421   0CE5 FA FF FF      lea d, [bp + -1] ; $dest_len
1422   0CE8 DA            push d
1423   0CE9 2C 07 00      mov b, [bp + 7] ; $dest             
1424   0CEC FD AB         swp b
1425   0CEE D8            push b
1426   0CEF 07 7E 0D      call strlen
1427   0CF2 51 02 00      add sp, 2
1428   0CF5 E7            pop d
1429   0CF6 FD 43         mov [d], b
1430   0CF8             ;; for (i = 0; src[i] != 0; i=i+1) { 
1431   0CF8             _for28_init:
1432   0CF8 FA FD FF      lea d, [bp + -3] ; $i         
1433   0CFB 26 00 00      mov b, $0        
1434   0CFE FD 43         mov [d], b
1435   0D00             _for28_cond:
1436   0D00 FA 05 00      lea d, [bp + 5] ; $src
1437   0D03 FD 2A         mov d, [d]
1438   0D05 D7            push a         
1439   0D06 2C FD FF      mov b, [bp + -3] ; $i                     
1440   0D09 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1441   0D0D E4            pop a
1442   0D0E 32            mov bl, [d]
1443   0D0F A7 00         mov bh, 0
1444   0D11             ; START RELATIONAL
1445   0D11 D7            push a
1446   0D12 11            mov a, b
1447   0D13 26 00 00      mov b, $0
1448   0D16 B0            cmp a, b
1449   0D17 FD 72         sneq ; !=
1450   0D19 E4            pop a
1451   0D1A             ; END RELATIONAL
1452   0D1A C0 00 00      cmp b, 0
1453   0D1D C6 5E 0D      je _for28_exit
1454   0D20             _for28_block:
1455   0D20             ;; dest[dest_len + i] = src[i]; 
1456   0D20 FA 07 00      lea d, [bp + 7] ; $dest
1457   0D23 FD 2A         mov d, [d]
1458   0D25 D7            push a         
1459   0D26 2C FF FF      mov b, [bp + -1] ; $dest_len             
1460   0D29             ; START TERMS
1461   0D29 D7            push a
1462   0D2A 11            mov a, b
1463   0D2B 2C FD FF      mov b, [bp + -3] ; $i             
1464   0D2E 54            add a, b
1465   0D2F 27            mov b, a
1466   0D30 E4            pop a
1467   0D31             ; END TERMS        
1468   0D31 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1469   0D35 E4            pop a
1470   0D36 DA            push d
1471   0D37 FA 05 00      lea d, [bp + 5] ; $src
1472   0D3A FD 2A         mov d, [d]
1473   0D3C D7            push a         
1474   0D3D 2C FD FF      mov b, [bp + -3] ; $i                     
1475   0D40 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1476   0D44 E4            pop a
1477   0D45 32            mov bl, [d]
1478   0D46 A7 00         mov bh, 0
1479   0D48 E7            pop d
1480   0D49 FD 3E         mov [d], bl
1481   0D4B             _for28_update:
1482   0D4B FA FD FF      lea d, [bp + -3] ; $i         
1483   0D4E 2C FD FF      mov b, [bp + -3] ; $i             
1484   0D51             ; START TERMS
1485   0D51 D7            push a
1486   0D52 11            mov a, b
1487   0D53 26 01 00      mov b, $1
1488   0D56 54            add a, b
1489   0D57 27            mov b, a
1490   0D58 E4            pop a
1491   0D59             ; END TERMS        
1492   0D59 FD 43         mov [d], b
1493   0D5B 0A 00 0D      jmp _for28_cond
1494   0D5E             _for28_exit:
1495   0D5E             ;; dest[dest_len + i] = 0; 
1496   0D5E FA 07 00      lea d, [bp + 7] ; $dest
1497   0D61 FD 2A         mov d, [d]
1498   0D63 D7            push a         
1499   0D64 2C FF FF      mov b, [bp + -1] ; $dest_len             
1500   0D67             ; START TERMS
1501   0D67 D7            push a
1502   0D68 11            mov a, b
1503   0D69 2C FD FF      mov b, [bp + -3] ; $i             
1504   0D6C 54            add a, b
1505   0D6D 27            mov b, a
1506   0D6E E4            pop a
1507   0D6F             ; END TERMS        
1508   0D6F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1509   0D73 E4            pop a         
1510   0D74 26 00 00      mov b, $0        
1511   0D77 FD 3E         mov [d], bl
1512   0D79             ;; return dest; 
1513   0D79 2C 07 00      mov b, [bp + 7] ; $dest             
1514   0D7C F9            leave
1515   0D7D 09            ret
1516   0D7E             
1517   0D7E             strlen:
1518   0D7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1519   0D81             ; $length 
1520   0D81 52 02 00      sub sp, 2
1521   0D84             ;; length = 0; 
1522   0D84 FA FF FF      lea d, [bp + -1] ; $length         
1523   0D87 26 00 00      mov b, $0        
1524   0D8A FD 43         mov [d], b
1525   0D8C             ;; while (str[length] != 0) { 
1526   0D8C             _while29_cond:
1527   0D8C FA 05 00      lea d, [bp + 5] ; $str
1528   0D8F FD 2A         mov d, [d]
1529   0D91 D7            push a         
1530   0D92 2C FF FF      mov b, [bp + -1] ; $length                     
1531   0D95 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1532   0D99 E4            pop a
1533   0D9A 32            mov bl, [d]
1534   0D9B A7 00         mov bh, 0
1535   0D9D             ; START RELATIONAL
1536   0D9D D7            push a
1537   0D9E 11            mov a, b
1538   0D9F 26 00 00      mov b, $0
1539   0DA2 B0            cmp a, b
1540   0DA3 FD 72         sneq ; !=
1541   0DA5 E4            pop a
1542   0DA6             ; END RELATIONAL
1543   0DA6 C0 00 00      cmp b, 0
1544   0DA9 C6 BD 0D      je _while29_exit
1545   0DAC             _while29_block:
1546   0DAC             ;; length++; 
1547   0DAC 2C FF FF      mov b, [bp + -1] ; $length             
1548   0DAF FD 79         mov g, b
1549   0DB1 FD 77         inc b
1550   0DB3 FA FF FF      lea d, [bp + -1] ; $length
1551   0DB6 FD 43         mov [d], b
1552   0DB8 FD 27         mov b, g
1553   0DBA 0A 8C 0D      jmp _while29_cond
1554   0DBD             _while29_exit:
1555   0DBD             ;; return length; 
1556   0DBD 2C FF FF      mov b, [bp + -1] ; $length             
1557   0DC0 F9            leave
1558   0DC1 09            ret
1559   0DC2             
1560   0DC2             va_arg:
1561   0DC2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1562   0DC5             ; $val 
1563   0DC5 52 02 00      sub sp, 2
1564   0DC8             ;; if(size == 1){ 
1565   0DC8             _if30_cond:
1566   0DC8 2C 05 00      mov b, [bp + 5] ; $size             
1567   0DCB             ; START RELATIONAL
1568   0DCB D7            push a
1569   0DCC 11            mov a, b
1570   0DCD 26 01 00      mov b, $1
1571   0DD0 B0            cmp a, b
1572   0DD1 FD 71         seq ; ==
1573   0DD3 E4            pop a
1574   0DD4             ; END RELATIONAL
1575   0DD4 C0 00 00      cmp b, 0
1576   0DD7 C6 F3 0D      je _if30_else
1577   0DDA             _if30_true:
1578   0DDA             ;; val = *(char*)arg->p; 
1579   0DDA FA FF FF      lea d, [bp + -1] ; $val
1580   0DDD DA            push d
1581   0DDE FA 07 00      lea d, [bp + 7] ; $arg
1582   0DE1 FD 2A         mov d, [d]
1583   0DE3 58 00 00      add d, 0
1584   0DE6 FD 14         clb
1585   0DE8 2A            mov b, [d]
1586   0DE9 74            mov d, b
1587   0DEA 32            mov bl, [d]
1588   0DEB A7 00         mov bh, 0
1589   0DED E7            pop d
1590   0DEE FD 43         mov [d], b
1591   0DF0 0A 28 0E      jmp _if30_exit
1592   0DF3             _if30_else:
1593   0DF3             ;; if(size == 2){ 
1594   0DF3             _if31_cond:
1595   0DF3 2C 05 00      mov b, [bp + 5] ; $size             
1596   0DF6             ; START RELATIONAL
1597   0DF6 D7            push a
1598   0DF7 11            mov a, b
1599   0DF8 26 02 00      mov b, $2
1600   0DFB B0            cmp a, b
1601   0DFC FD 71         seq ; ==
1602   0DFE E4            pop a
1603   0DFF             ; END RELATIONAL
1604   0DFF C0 00 00      cmp b, 0
1605   0E02 C6 1C 0E      je _if31_else
1606   0E05             _if31_true:
1607   0E05             ;; val = *(int*)arg->p; 
1608   0E05 FA FF FF      lea d, [bp + -1] ; $val
1609   0E08 DA            push d
1610   0E09 FA 07 00      lea d, [bp + 7] ; $arg
1611   0E0C FD 2A         mov d, [d]
1612   0E0E 58 00 00      add d, 0
1613   0E11 FD 14         clb
1614   0E13 2A            mov b, [d]
1615   0E14 74            mov d, b
1616   0E15 2A            mov b, [d]
1617   0E16 E7            pop d
1618   0E17 FD 43         mov [d], b
1619   0E19 0A 28 0E      jmp _if31_exit
1620   0E1C             _if31_else:
1621   0E1C             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
1622   0E1C 26 57 38      mov b, __s11 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
1623   0E1F FD AB         swp b
1624   0E21 D8            push b
1625   0E22 07 11 14      call print
1626   0E25 51 02 00      add sp, 2
1627   0E28             _if31_exit:
1628   0E28             _if30_exit:
1629   0E28             ;; arg->p = arg->p + size; 
1630   0E28 FA 07 00      lea d, [bp + 7] ; $arg
1631   0E2B FD 2A         mov d, [d]
1632   0E2D 58 00 00      add d, 0
1633   0E30 FD 14         clb
1634   0E32 DA            push d
1635   0E33 FA 07 00      lea d, [bp + 7] ; $arg
1636   0E36 FD 2A         mov d, [d]
1637   0E38 58 00 00      add d, 0
1638   0E3B FD 14         clb
1639   0E3D 2A            mov b, [d]
1640   0E3E             ; START TERMS
1641   0E3E D7            push a
1642   0E3F 11            mov a, b
1643   0E40 2C 05 00      mov b, [bp + 5] ; $size             
1644   0E43 54            add a, b
1645   0E44 27            mov b, a
1646   0E45 E4            pop a
1647   0E46             ; END TERMS
1648   0E46 E7            pop d
1649   0E47 FD 43         mov [d], b
1650   0E49             ;; return val; 
1651   0E49 2C FF FF      mov b, [bp + -1] ; $val             
1652   0E4C F9            leave
1653   0E4D 09            ret
1654   0E4E             
1655   0E4E             printf:
1656   0E4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1657   0E51             ; $p 
1658   0E51             ; $fp 
1659   0E51             ; $i 
1660   0E51 52 06 00      sub sp, 6
1661   0E54             ;; fp = format; 
1662   0E54 FA FD FF      lea d, [bp + -3] ; $fp         
1663   0E57 2C 05 00      mov b, [bp + 5] ; $format                     
1664   0E5A FD 43         mov [d], b
1665   0E5C             ;; p = &format; 
1666   0E5C FA FF FF      lea d, [bp + -1] ; $p
1667   0E5F DA            push d
1668   0E60 FA 05 00      lea d, [bp + 5] ; $format
1669   0E63 2D            mov b, d
1670   0E64 E7            pop d
1671   0E65 FD 43         mov [d], b
1672   0E67             ;; for(;;){ 
1673   0E67             _for32_init:
1674   0E67             _for32_cond:
1675   0E67             _for32_block:
1676   0E67             ;; if(!*fp) break; 
1677   0E67             _if33_cond:
1678   0E67 2C FD FF      mov b, [bp + -3] ; $fp             
1679   0E6A 74            mov d, b
1680   0E6B 32            mov bl, [d]
1681   0E6C A7 00         mov bh, 0
1682   0E6E C0 00 00      cmp b, 0
1683   0E71 FD 71         seq ; !
1684   0E73 C0 00 00      cmp b, 0
1685   0E76 C6 7F 0E      je _if33_exit
1686   0E79             _if33_true:
1687   0E79             ;; break; 
1688   0E79 0A AF 0F      jmp _for32_exit ; for break
1689   0E7C 0A 7F 0E      jmp _if33_exit
1690   0E7F             _if33_exit:
1691   0E7F             ;; if(*fp == '%'){ 
1692   0E7F             _if34_cond:
1693   0E7F 2C FD FF      mov b, [bp + -3] ; $fp             
1694   0E82 74            mov d, b
1695   0E83 32            mov bl, [d]
1696   0E84 A7 00         mov bh, 0
1697   0E86             ; START RELATIONAL
1698   0E86 D7            push a
1699   0E87 11            mov a, b
1700   0E88 26 25 00      mov b, $25
1701   0E8B B0            cmp a, b
1702   0E8C FD 71         seq ; ==
1703   0E8E E4            pop a
1704   0E8F             ; END RELATIONAL
1705   0E8F C0 00 00      cmp b, 0
1706   0E92 C6 90 0F      je _if34_else
1707   0E95             _if34_true:
1708   0E95             ;; fp++; 
1709   0E95 2C FD FF      mov b, [bp + -3] ; $fp             
1710   0E98 FD 79         mov g, b
1711   0E9A FD 77         inc b
1712   0E9C FA FD FF      lea d, [bp + -3] ; $fp
1713   0E9F FD 43         mov [d], b
1714   0EA1 FD 27         mov b, g
1715   0EA3             ;; switch(*fp){ 
1716   0EA3             _switch35_expr:
1717   0EA3 2C FD FF      mov b, [bp + -3] ; $fp             
1718   0EA6 74            mov d, b
1719   0EA7 32            mov bl, [d]
1720   0EA8 A7 00         mov bh, 0
1721   0EAA             _switch35_comparisons:
1722   0EAA C1 64         cmp bl, $64
1723   0EAC C6 CE 0E      je _switch35_case0
1724   0EAF C1 69         cmp bl, $69
1725   0EB1 C6 CE 0E      je _switch35_case1
1726   0EB4 C1 75         cmp bl, $75
1727   0EB6 C6 EF 0E      je _switch35_case2
1728   0EB9 C1 78         cmp bl, $78
1729   0EBB C6 10 0F      je _switch35_case3
1730   0EBE C1 63         cmp bl, $63
1731   0EC0 C6 31 0F      je _switch35_case4
1732   0EC3 C1 73         cmp bl, $73
1733   0EC5 C6 52 0F      je _switch35_case5
1734   0EC8 0A 73 0F      jmp _switch35_default
1735   0ECB 0A 7F 0F      jmp _switch35_exit
1736   0ECE             _switch35_case0:
1737   0ECE             _switch35_case1:
1738   0ECE             ;; p = p - 2; 
1739   0ECE FA FF FF      lea d, [bp + -1] ; $p         
1740   0ED1 2C FF FF      mov b, [bp + -1] ; $p             
1741   0ED4             ; START TERMS
1742   0ED4 D7            push a
1743   0ED5 11            mov a, b
1744   0ED6 26 02 00      mov b, $2
1745   0ED9 60            sub a, b
1746   0EDA 27            mov b, a
1747   0EDB E4            pop a
1748   0EDC             ; END TERMS        
1749   0EDC FD 43         mov [d], b
1750   0EDE             ;; prints(*(int*)p); 
1751   0EDE 2C FF FF      mov b, [bp + -1] ; $p             
1752   0EE1 74            mov d, b
1753   0EE2 2A            mov b, [d]
1754   0EE3 FD AB         swp b
1755   0EE5 D8            push b
1756   0EE6 07 15 12      call prints
1757   0EE9 51 02 00      add sp, 2
1758   0EEC             ;; break; 
1759   0EEC 0A 7F 0F      jmp _switch35_exit ; case break
1760   0EEF             _switch35_case2:
1761   0EEF             ;; p = p - 2; 
1762   0EEF FA FF FF      lea d, [bp + -1] ; $p         
1763   0EF2 2C FF FF      mov b, [bp + -1] ; $p             
1764   0EF5             ; START TERMS
1765   0EF5 D7            push a
1766   0EF6 11            mov a, b
1767   0EF7 26 02 00      mov b, $2
1768   0EFA 60            sub a, b
1769   0EFB 27            mov b, a
1770   0EFC E4            pop a
1771   0EFD             ; END TERMS        
1772   0EFD FD 43         mov [d], b
1773   0EFF             ;; printu(*(unsigned int*)p); 
1774   0EFF 2C FF FF      mov b, [bp + -1] ; $p             
1775   0F02 74            mov d, b
1776   0F03 2A            mov b, [d]
1777   0F04 FD AB         swp b
1778   0F06 D8            push b
1779   0F07 07 F5 12      call printu
1780   0F0A 51 02 00      add sp, 2
1781   0F0D             ;; break; 
1782   0F0D 0A 7F 0F      jmp _switch35_exit ; case break
1783   0F10             _switch35_case3:
1784   0F10             ;; p = p - 2; 
1785   0F10 FA FF FF      lea d, [bp + -1] ; $p         
1786   0F13 2C FF FF      mov b, [bp + -1] ; $p             
1787   0F16             ; START TERMS
1788   0F16 D7            push a
1789   0F17 11            mov a, b
1790   0F18 26 02 00      mov b, $2
1791   0F1B 60            sub a, b
1792   0F1C 27            mov b, a
1793   0F1D E4            pop a
1794   0F1E             ; END TERMS        
1795   0F1E FD 43         mov [d], b
1796   0F20             ;; printx16(*(unsigned int*)p); 
1797   0F20 2C FF FF      mov b, [bp + -1] ; $p             
1798   0F23 74            mov d, b
1799   0F24 2A            mov b, [d]
1800   0F25 FD AB         swp b
1801   0F27 D8            push b
1802   0F28 07 B1 0F      call printx16
1803   0F2B 51 02 00      add sp, 2
1804   0F2E             ;; break; 
1805   0F2E 0A 7F 0F      jmp _switch35_exit ; case break
1806   0F31             _switch35_case4:
1807   0F31             ;; p = p - 2; 
1808   0F31 FA FF FF      lea d, [bp + -1] ; $p         
1809   0F34 2C FF FF      mov b, [bp + -1] ; $p             
1810   0F37             ; START TERMS
1811   0F37 D7            push a
1812   0F38 11            mov a, b
1813   0F39 26 02 00      mov b, $2
1814   0F3C 60            sub a, b
1815   0F3D 27            mov b, a
1816   0F3E E4            pop a
1817   0F3F             ; END TERMS        
1818   0F3F FD 43         mov [d], b
1819   0F41             ;; putchar(*(char*)p); 
1820   0F41 2C FF FF      mov b, [bp + -1] ; $p             
1821   0F44 74            mov d, b
1822   0F45 32            mov bl, [d]
1823   0F46 A7 00         mov bh, 0
1824   0F48 DD            push bl
1825   0F49 07 CC 13      call putchar
1826   0F4C 51 01 00      add sp, 1
1827   0F4F             ;; break; 
1828   0F4F 0A 7F 0F      jmp _switch35_exit ; case break
1829   0F52             _switch35_case5:
1830   0F52             ;; p = p - 2; 
1831   0F52 FA FF FF      lea d, [bp + -1] ; $p         
1832   0F55 2C FF FF      mov b, [bp + -1] ; $p             
1833   0F58             ; START TERMS
1834   0F58 D7            push a
1835   0F59 11            mov a, b
1836   0F5A 26 02 00      mov b, $2
1837   0F5D 60            sub a, b
1838   0F5E 27            mov b, a
1839   0F5F E4            pop a
1840   0F60             ; END TERMS        
1841   0F60 FD 43         mov [d], b
1842   0F62             ;; print(*(char**)p); 
1843   0F62 2C FF FF      mov b, [bp + -1] ; $p             
1844   0F65 74            mov d, b
1845   0F66 2A            mov b, [d]
1846   0F67 FD AB         swp b
1847   0F69 D8            push b
1848   0F6A 07 11 14      call print
1849   0F6D 51 02 00      add sp, 2
1850   0F70             ;; break; 
1851   0F70 0A 7F 0F      jmp _switch35_exit ; case break
1852   0F73             _switch35_default:
1853   0F73             ;; print("Error: Unknown argument type.\n"); 
1854   0F73 26 9B 38      mov b, __s12 ; "Error: Unknown argument type.\n"
1855   0F76 FD AB         swp b
1856   0F78 D8            push b
1857   0F79 07 11 14      call print
1858   0F7C 51 02 00      add sp, 2
1859   0F7F             _switch35_exit:
1860   0F7F             ;; fp++; 
1861   0F7F 2C FD FF      mov b, [bp + -3] ; $fp             
1862   0F82 FD 79         mov g, b
1863   0F84 FD 77         inc b
1864   0F86 FA FD FF      lea d, [bp + -3] ; $fp
1865   0F89 FD 43         mov [d], b
1866   0F8B FD 27         mov b, g
1867   0F8D 0A AC 0F      jmp _if34_exit
1868   0F90             _if34_else:
1869   0F90             ;; putchar(*fp); 
1870   0F90 2C FD FF      mov b, [bp + -3] ; $fp             
1871   0F93 74            mov d, b
1872   0F94 32            mov bl, [d]
1873   0F95 A7 00         mov bh, 0
1874   0F97 DD            push bl
1875   0F98 07 CC 13      call putchar
1876   0F9B 51 01 00      add sp, 1
1877   0F9E             ;; fp++; 
1878   0F9E 2C FD FF      mov b, [bp + -3] ; $fp             
1879   0FA1 FD 79         mov g, b
1880   0FA3 FD 77         inc b
1881   0FA5 FA FD FF      lea d, [bp + -3] ; $fp
1882   0FA8 FD 43         mov [d], b
1883   0FAA FD 27         mov b, g
1884   0FAC             _if34_exit:
1885   0FAC             _for32_update:
1886   0FAC 0A 67 0E      jmp _for32_cond
1887   0FAF             _for32_exit:
1888   0FAF F9            leave
1889   0FB0 09            ret
1890   0FB1             
1891   0FB1             printx16:
1892   0FB1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1893   0FB4             
1894   0FB4             ; --- BEGIN INLINE ASM BLOCK
1895   0FB4 2C 05 00      mov b, [bp + 5] ; $hex             
1896   0FB7 07 74 17      call print_u16x
1897   0FBA             ; --- END INLINE ASM BLOCK
1898   0FBA             
1899   0FBA F9            leave
1900   0FBB 09            ret
1901   0FBC             
1902   0FBC             printx8:
1903   0FBC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1904   0FBF             
1905   0FBF             ; --- BEGIN INLINE ASM BLOCK
1906   0FBF FA 05 00      lea d, [bp + 5] ; $hex
1907   0FC2 32            mov bl, [d]
1908   0FC3 07 B8 17      call print_u8x
1909   0FC6             ; --- END INLINE ASM BLOCK
1910   0FC6             
1911   0FC6 F9            leave
1912   0FC7 09            ret
1913   0FC8             
1914   0FC8             hex_to_int:
1915   0FC8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1916   0FCB             ; $value 
1917   0FCB 10 00 00      mov a, $0
1918   0FCE 45 FF FF      mov [bp + -1], a
1919   0FD1             ; $i 
1920   0FD1             ; $hex_char 
1921   0FD1             ; $len 
1922   0FD1 52 07 00      sub sp, 7
1923   0FD4             ;; len = strlen(hex_string); 
1924   0FD4 FA FA FF      lea d, [bp + -6] ; $len
1925   0FD7 DA            push d
1926   0FD8 2C 05 00      mov b, [bp + 5] ; $hex_string             
1927   0FDB FD AB         swp b
1928   0FDD D8            push b
1929   0FDE 07 7E 0D      call strlen
1930   0FE1 51 02 00      add sp, 2
1931   0FE4 E7            pop d
1932   0FE5 FD 43         mov [d], b
1933   0FE7             ;; for (i = 0; i < len; i++) { 
1934   0FE7             _for36_init:
1935   0FE7 FA FD FF      lea d, [bp + -3] ; $i         
1936   0FEA 26 00 00      mov b, $0        
1937   0FED FD 43         mov [d], b
1938   0FEF             _for36_cond:
1939   0FEF 2C FD FF      mov b, [bp + -3] ; $i             
1940   0FF2             ; START RELATIONAL
1941   0FF2 D7            push a
1942   0FF3 11            mov a, b
1943   0FF4 2C FA FF      mov b, [bp + -6] ; $len             
1944   0FF7 B0            cmp a, b
1945   0FF8 FD 73         slt ; < 
1946   0FFA E4            pop a
1947   0FFB             ; END RELATIONAL
1948   0FFB C0 00 00      cmp b, 0
1949   0FFE C6 EF 10      je _for36_exit
1950   1001             _for36_block:
1951   1001             ;; hex_char = hex_string[i]; 
1952   1001 FA FC FF      lea d, [bp + -4] ; $hex_char
1953   1004 DA            push d
1954   1005 FA 05 00      lea d, [bp + 5] ; $hex_string
1955   1008 FD 2A         mov d, [d]
1956   100A D7            push a         
1957   100B 2C FD FF      mov b, [bp + -3] ; $i                     
1958   100E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1959   1012 E4            pop a
1960   1013 32            mov bl, [d]
1961   1014 A7 00         mov bh, 0
1962   1016 E7            pop d
1963   1017 FD 3E         mov [d], bl
1964   1019             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1965   1019             _if37_cond:
1966   1019 34 FC FF      mov bl, [bp + -4] ; $hex_char
1967   101C A7 00         mov bh, 0             
1968   101E             ; START RELATIONAL
1969   101E D7            push a
1970   101F 11            mov a, b
1971   1020 26 61 00      mov b, $61
1972   1023 B0            cmp a, b
1973   1024 FD 80         sge ; >=
1974   1026 E4            pop a
1975   1027             ; END RELATIONAL
1976   1027 D7            push a
1977   1028 11            mov a, b
1978   1029 34 FC FF      mov bl, [bp + -4] ; $hex_char
1979   102C A7 00         mov bh, 0             
1980   102E             ; START RELATIONAL
1981   102E D7            push a
1982   102F 11            mov a, b
1983   1030 26 66 00      mov b, $66
1984   1033 B0            cmp a, b
1985   1034 FD 74         sle ; <=
1986   1036 E4            pop a
1987   1037             ; END RELATIONAL
1988   1037 FD A7         sand a, b ; &&
1989   1039 E4            pop a
1990   103A C0 00 00      cmp b, 0
1991   103D C6 6A 10      je _if37_else
1992   1040             _if37_true:
1993   1040             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1994   1040 FA FF FF      lea d, [bp + -1] ; $value         
1995   1043 2C FF FF      mov b, [bp + -1] ; $value             
1996   1046             ; START FACTORS
1997   1046 D7            push a
1998   1047 11            mov a, b
1999   1048 26 10 00      mov b, $10
2000   104B AC            mul a, b ; *
2001   104C 11            mov a, b
2002   104D 27            mov b, a
2003   104E E4            pop a
2004   104F             ; END FACTORS
2005   104F             ; START TERMS
2006   104F D7            push a
2007   1050 11            mov a, b
2008   1051 34 FC FF      mov bl, [bp + -4] ; $hex_char
2009   1054 A7 00         mov bh, 0             
2010   1056             ; START TERMS
2011   1056 D7            push a
2012   1057 11            mov a, b
2013   1058 26 61 00      mov b, $61
2014   105B 60            sub a, b
2015   105C 26 0A 00      mov b, $a
2016   105F 54            add a, b
2017   1060 27            mov b, a
2018   1061 E4            pop a
2019   1062             ; END TERMS
2020   1062 54            add a, b
2021   1063 27            mov b, a
2022   1064 E4            pop a
2023   1065             ; END TERMS        
2024   1065 FD 43         mov [d], b
2025   1067 0A DE 10      jmp _if37_exit
2026   106A             _if37_else:
2027   106A             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2028   106A             _if38_cond:
2029   106A 34 FC FF      mov bl, [bp + -4] ; $hex_char
2030   106D A7 00         mov bh, 0             
2031   106F             ; START RELATIONAL
2032   106F D7            push a
2033   1070 11            mov a, b
2034   1071 26 41 00      mov b, $41
2035   1074 B0            cmp a, b
2036   1075 FD 80         sge ; >=
2037   1077 E4            pop a
2038   1078             ; END RELATIONAL
2039   1078 D7            push a
2040   1079 11            mov a, b
2041   107A 34 FC FF      mov bl, [bp + -4] ; $hex_char
2042   107D A7 00         mov bh, 0             
2043   107F             ; START RELATIONAL
2044   107F D7            push a
2045   1080 11            mov a, b
2046   1081 26 46 00      mov b, $46
2047   1084 B0            cmp a, b
2048   1085 FD 74         sle ; <=
2049   1087 E4            pop a
2050   1088             ; END RELATIONAL
2051   1088 FD A7         sand a, b ; &&
2052   108A E4            pop a
2053   108B C0 00 00      cmp b, 0
2054   108E C6 BB 10      je _if38_else
2055   1091             _if38_true:
2056   1091             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2057   1091 FA FF FF      lea d, [bp + -1] ; $value         
2058   1094 2C FF FF      mov b, [bp + -1] ; $value             
2059   1097             ; START FACTORS
2060   1097 D7            push a
2061   1098 11            mov a, b
2062   1099 26 10 00      mov b, $10
2063   109C AC            mul a, b ; *
2064   109D 11            mov a, b
2065   109E 27            mov b, a
2066   109F E4            pop a
2067   10A0             ; END FACTORS
2068   10A0             ; START TERMS
2069   10A0 D7            push a
2070   10A1 11            mov a, b
2071   10A2 34 FC FF      mov bl, [bp + -4] ; $hex_char
2072   10A5 A7 00         mov bh, 0             
2073   10A7             ; START TERMS
2074   10A7 D7            push a
2075   10A8 11            mov a, b
2076   10A9 26 41 00      mov b, $41
2077   10AC 60            sub a, b
2078   10AD 26 0A 00      mov b, $a
2079   10B0 54            add a, b
2080   10B1 27            mov b, a
2081   10B2 E4            pop a
2082   10B3             ; END TERMS
2083   10B3 54            add a, b
2084   10B4 27            mov b, a
2085   10B5 E4            pop a
2086   10B6             ; END TERMS        
2087   10B6 FD 43         mov [d], b
2088   10B8 0A DE 10      jmp _if38_exit
2089   10BB             _if38_else:
2090   10BB             ;; value = (value * 16) + (hex_char - '0'); 
2091   10BB FA FF FF      lea d, [bp + -1] ; $value         
2092   10BE 2C FF FF      mov b, [bp + -1] ; $value             
2093   10C1             ; START FACTORS
2094   10C1 D7            push a
2095   10C2 11            mov a, b
2096   10C3 26 10 00      mov b, $10
2097   10C6 AC            mul a, b ; *
2098   10C7 11            mov a, b
2099   10C8 27            mov b, a
2100   10C9 E4            pop a
2101   10CA             ; END FACTORS
2102   10CA             ; START TERMS
2103   10CA D7            push a
2104   10CB 11            mov a, b
2105   10CC 34 FC FF      mov bl, [bp + -4] ; $hex_char
2106   10CF A7 00         mov bh, 0             
2107   10D1             ; START TERMS
2108   10D1 D7            push a
2109   10D2 11            mov a, b
2110   10D3 26 30 00      mov b, $30
2111   10D6 60            sub a, b
2112   10D7 27            mov b, a
2113   10D8 E4            pop a
2114   10D9             ; END TERMS
2115   10D9 54            add a, b
2116   10DA 27            mov b, a
2117   10DB E4            pop a
2118   10DC             ; END TERMS        
2119   10DC FD 43         mov [d], b
2120   10DE             _if38_exit:
2121   10DE             _if37_exit:
2122   10DE             _for36_update:
2123   10DE 2C FD FF      mov b, [bp + -3] ; $i             
2124   10E1 FD 79         mov g, b
2125   10E3 FD 77         inc b
2126   10E5 FA FD FF      lea d, [bp + -3] ; $i
2127   10E8 FD 43         mov [d], b
2128   10EA FD 27         mov b, g
2129   10EC 0A EF 0F      jmp _for36_cond
2130   10EF             _for36_exit:
2131   10EF             ;; return value; 
2132   10EF 2C FF FF      mov b, [bp + -1] ; $value             
2133   10F2 F9            leave
2134   10F3 09            ret
2135   10F4             
2136   10F4             atoi:
2137   10F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2138   10F7             ; $result 
2139   10F7 10 00 00      mov a, $0
2140   10FA 45 FF FF      mov [bp + -1], a
2141   10FD             ; $sign 
2142   10FD 10 01 00      mov a, $1
2143   1100 45 FD FF      mov [bp + -3], a
2144   1103 52 04 00      sub sp, 4
2145   1106             ;; while (*str == ' ') str++; 
2146   1106             _while39_cond:
2147   1106 2C 05 00      mov b, [bp + 5] ; $str             
2148   1109 74            mov d, b
2149   110A 32            mov bl, [d]
2150   110B A7 00         mov bh, 0
2151   110D             ; START RELATIONAL
2152   110D D7            push a
2153   110E 11            mov a, b
2154   110F 26 20 00      mov b, $20
2155   1112 B0            cmp a, b
2156   1113 FD 71         seq ; ==
2157   1115 E4            pop a
2158   1116             ; END RELATIONAL
2159   1116 C0 00 00      cmp b, 0
2160   1119 C6 2D 11      je _while39_exit
2161   111C             _while39_block:
2162   111C             ;; str++; 
2163   111C 2C 05 00      mov b, [bp + 5] ; $str             
2164   111F FD 79         mov g, b
2165   1121 FD 77         inc b
2166   1123 FA 05 00      lea d, [bp + 5] ; $str
2167   1126 FD 43         mov [d], b
2168   1128 FD 27         mov b, g
2169   112A 0A 06 11      jmp _while39_cond
2170   112D             _while39_exit:
2171   112D             ;; if (*str == '-' || *str == '+') { 
2172   112D             _if40_cond:
2173   112D 2C 05 00      mov b, [bp + 5] ; $str             
2174   1130 74            mov d, b
2175   1131 32            mov bl, [d]
2176   1132 A7 00         mov bh, 0
2177   1134             ; START RELATIONAL
2178   1134 D7            push a
2179   1135 11            mov a, b
2180   1136 26 2D 00      mov b, $2d
2181   1139 B0            cmp a, b
2182   113A FD 71         seq ; ==
2183   113C E4            pop a
2184   113D             ; END RELATIONAL
2185   113D D7            push a
2186   113E 11            mov a, b
2187   113F 2C 05 00      mov b, [bp + 5] ; $str             
2188   1142 74            mov d, b
2189   1143 32            mov bl, [d]
2190   1144 A7 00         mov bh, 0
2191   1146             ; START RELATIONAL
2192   1146 D7            push a
2193   1147 11            mov a, b
2194   1148 26 2B 00      mov b, $2b
2195   114B B0            cmp a, b
2196   114C FD 71         seq ; ==
2197   114E E4            pop a
2198   114F             ; END RELATIONAL
2199   114F FD A8         sor a, b ; ||
2200   1151 E4            pop a
2201   1152 C0 00 00      cmp b, 0
2202   1155 C6 8C 11      je _if40_exit
2203   1158             _if40_true:
2204   1158             ;; if (*str == '-') sign = -1; 
2205   1158             _if41_cond:
2206   1158 2C 05 00      mov b, [bp + 5] ; $str             
2207   115B 74            mov d, b
2208   115C 32            mov bl, [d]
2209   115D A7 00         mov bh, 0
2210   115F             ; START RELATIONAL
2211   115F D7            push a
2212   1160 11            mov a, b
2213   1161 26 2D 00      mov b, $2d
2214   1164 B0            cmp a, b
2215   1165 FD 71         seq ; ==
2216   1167 E4            pop a
2217   1168             ; END RELATIONAL
2218   1168 C0 00 00      cmp b, 0
2219   116B C6 7B 11      je _if41_exit
2220   116E             _if41_true:
2221   116E             ;; sign = -1; 
2222   116E FA FD FF      lea d, [bp + -3] ; $sign         
2223   1171 26 01 00      mov b, $1
2224   1174 FD 97         neg b        
2225   1176 FD 43         mov [d], b
2226   1178 0A 7B 11      jmp _if41_exit
2227   117B             _if41_exit:
2228   117B             ;; str++; 
2229   117B 2C 05 00      mov b, [bp + 5] ; $str             
2230   117E FD 79         mov g, b
2231   1180 FD 77         inc b
2232   1182 FA 05 00      lea d, [bp + 5] ; $str
2233   1185 FD 43         mov [d], b
2234   1187 FD 27         mov b, g
2235   1189 0A 8C 11      jmp _if40_exit
2236   118C             _if40_exit:
2237   118C             ;; while (*str >= '0' && *str <= '9') { 
2238   118C             _while42_cond:
2239   118C 2C 05 00      mov b, [bp + 5] ; $str             
2240   118F 74            mov d, b
2241   1190 32            mov bl, [d]
2242   1191 A7 00         mov bh, 0
2243   1193             ; START RELATIONAL
2244   1193 D7            push a
2245   1194 11            mov a, b
2246   1195 26 30 00      mov b, $30
2247   1198 B0            cmp a, b
2248   1199 FD 80         sge ; >=
2249   119B E4            pop a
2250   119C             ; END RELATIONAL
2251   119C D7            push a
2252   119D 11            mov a, b
2253   119E 2C 05 00      mov b, [bp + 5] ; $str             
2254   11A1 74            mov d, b
2255   11A2 32            mov bl, [d]
2256   11A3 A7 00         mov bh, 0
2257   11A5             ; START RELATIONAL
2258   11A5 D7            push a
2259   11A6 11            mov a, b
2260   11A7 26 39 00      mov b, $39
2261   11AA B0            cmp a, b
2262   11AB FD 74         sle ; <=
2263   11AD E4            pop a
2264   11AE             ; END RELATIONAL
2265   11AE FD A7         sand a, b ; &&
2266   11B0 E4            pop a
2267   11B1 C0 00 00      cmp b, 0
2268   11B4 C6 EF 11      je _while42_exit
2269   11B7             _while42_block:
2270   11B7             ;; result = result * 10 + (*str - '0'); 
2271   11B7 FA FF FF      lea d, [bp + -1] ; $result
2272   11BA DA            push d
2273   11BB 2C FF FF      mov b, [bp + -1] ; $result             
2274   11BE             ; START FACTORS
2275   11BE D7            push a
2276   11BF 11            mov a, b
2277   11C0 26 0A 00      mov b, $a
2278   11C3 AC            mul a, b ; *
2279   11C4 11            mov a, b
2280   11C5 27            mov b, a
2281   11C6 E4            pop a
2282   11C7             ; END FACTORS
2283   11C7             ; START TERMS
2284   11C7 D7            push a
2285   11C8 11            mov a, b
2286   11C9 2C 05 00      mov b, [bp + 5] ; $str             
2287   11CC 74            mov d, b
2288   11CD 32            mov bl, [d]
2289   11CE A7 00         mov bh, 0
2290   11D0             ; START TERMS
2291   11D0 D7            push a
2292   11D1 11            mov a, b
2293   11D2 26 30 00      mov b, $30
2294   11D5 60            sub a, b
2295   11D6 27            mov b, a
2296   11D7 E4            pop a
2297   11D8             ; END TERMS
2298   11D8 54            add a, b
2299   11D9 27            mov b, a
2300   11DA E4            pop a
2301   11DB             ; END TERMS
2302   11DB E7            pop d
2303   11DC FD 43         mov [d], b
2304   11DE             ;; str++; 
2305   11DE 2C 05 00      mov b, [bp + 5] ; $str             
2306   11E1 FD 79         mov g, b
2307   11E3 FD 77         inc b
2308   11E5 FA 05 00      lea d, [bp + 5] ; $str
2309   11E8 FD 43         mov [d], b
2310   11EA FD 27         mov b, g
2311   11EC 0A 8C 11      jmp _while42_cond
2312   11EF             _while42_exit:
2313   11EF             ;; return sign * result; 
2314   11EF 2C FD FF      mov b, [bp + -3] ; $sign             
2315   11F2             ; START FACTORS
2316   11F2 D7            push a
2317   11F3 11            mov a, b
2318   11F4 2C FF FF      mov b, [bp + -1] ; $result             
2319   11F7 AC            mul a, b ; *
2320   11F8 11            mov a, b
2321   11F9 27            mov b, a
2322   11FA E4            pop a
2323   11FB             ; END FACTORS
2324   11FB F9            leave
2325   11FC 09            ret
2326   11FD             
2327   11FD             gets:
2328   11FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2329   1200             
2330   1200             ; --- BEGIN INLINE ASM BLOCK
2331   1200 17 05 00      mov a, [bp + 5] ; $s             
2332   1203 3C            mov d, a
2333   1204 07 D9 15      call _gets
2334   1207             ; --- END INLINE ASM BLOCK
2335   1207             
2336   1207             ;; return strlen(s); 
2337   1207 2C 05 00      mov b, [bp + 5] ; $s             
2338   120A FD AB         swp b
2339   120C D8            push b
2340   120D 07 7E 0D      call strlen
2341   1210 51 02 00      add sp, 2
2342   1213 F9            leave
2343   1214 09            ret
2344   1215             
2345   1215             prints:
2346   1215 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2347   1218             ; $digits 
2348   1218             ; $i 
2349   1218 10 00 00      mov a, $0
2350   121B 45 FA FF      mov [bp + -6], a
2351   121E 52 07 00      sub sp, 7
2352   1221             ;; if (num < 0) { 
2353   1221             _if43_cond:
2354   1221 2C 05 00      mov b, [bp + 5] ; $num             
2355   1224             ; START RELATIONAL
2356   1224 D7            push a
2357   1225 11            mov a, b
2358   1226 26 00 00      mov b, $0
2359   1229 B0            cmp a, b
2360   122A FD 73         slt ; < 
2361   122C E4            pop a
2362   122D             ; END RELATIONAL
2363   122D C0 00 00      cmp b, 0
2364   1230 C6 4A 12      je _if43_else
2365   1233             _if43_true:
2366   1233             ;; putchar('-'); 
2367   1233 26 2D 00      mov b, $2d
2368   1236 DD            push bl
2369   1237 07 CC 13      call putchar
2370   123A 51 01 00      add sp, 1
2371   123D             ;; num = -num; 
2372   123D FA 05 00      lea d, [bp + 5] ; $num         
2373   1240 2C 05 00      mov b, [bp + 5] ; $num             
2374   1243 FD 97         neg b        
2375   1245 FD 43         mov [d], b
2376   1247 0A 6B 12      jmp _if43_exit
2377   124A             _if43_else:
2378   124A             ;; if (num == 0) { 
2379   124A             _if44_cond:
2380   124A 2C 05 00      mov b, [bp + 5] ; $num             
2381   124D             ; START RELATIONAL
2382   124D D7            push a
2383   124E 11            mov a, b
2384   124F 26 00 00      mov b, $0
2385   1252 B0            cmp a, b
2386   1253 FD 71         seq ; ==
2387   1255 E4            pop a
2388   1256             ; END RELATIONAL
2389   1256 C0 00 00      cmp b, 0
2390   1259 C6 6B 12      je _if44_exit
2391   125C             _if44_true:
2392   125C             ;; putchar('0'); 
2393   125C 26 30 00      mov b, $30
2394   125F DD            push bl
2395   1260 07 CC 13      call putchar
2396   1263 51 01 00      add sp, 1
2397   1266             ;; return; 
2398   1266 F9            leave
2399   1267 09            ret
2400   1268 0A 6B 12      jmp _if44_exit
2401   126B             _if44_exit:
2402   126B             _if43_exit:
2403   126B             ;; while (num > 0) { 
2404   126B             _while45_cond:
2405   126B 2C 05 00      mov b, [bp + 5] ; $num             
2406   126E             ; START RELATIONAL
2407   126E D7            push a
2408   126F 11            mov a, b
2409   1270 26 00 00      mov b, $0
2410   1273 B0            cmp a, b
2411   1274 FD 7F         sgt ; >
2412   1276 E4            pop a
2413   1277             ; END RELATIONAL
2414   1277 C0 00 00      cmp b, 0
2415   127A C6 BD 12      je _while45_exit
2416   127D             _while45_block:
2417   127D             ;; digits[i] = '0' + (num % 10); 
2418   127D FA FC FF      lea d, [bp + -4] ; $digits
2419   1280 D7            push a         
2420   1281 2C FA FF      mov b, [bp + -6] ; $i                     
2421   1284 5A            add d, b
2422   1285 E4            pop a         
2423   1286 26 30 00      mov b, $30
2424   1289             ; START TERMS
2425   1289 D7            push a
2426   128A 11            mov a, b
2427   128B 2C 05 00      mov b, [bp + 5] ; $num             
2428   128E             ; START FACTORS
2429   128E D7            push a
2430   128F 11            mov a, b
2431   1290 26 0A 00      mov b, $a
2432   1293 AE            div a, b ; 
2433   1294 11            mov a, b
2434   1295 27            mov b, a
2435   1296 E4            pop a
2436   1297             ; END FACTORS
2437   1297 54            add a, b
2438   1298 27            mov b, a
2439   1299 E4            pop a
2440   129A             ; END TERMS        
2441   129A FD 3E         mov [d], bl
2442   129C             ;; num = num / 10; 
2443   129C FA 05 00      lea d, [bp + 5] ; $num         
2444   129F 2C 05 00      mov b, [bp + 5] ; $num             
2445   12A2             ; START FACTORS
2446   12A2 D7            push a
2447   12A3 11            mov a, b
2448   12A4 26 0A 00      mov b, $a
2449   12A7 AE            div a, b
2450   12A8 27            mov b, a
2451   12A9 E4            pop a
2452   12AA             ; END FACTORS        
2453   12AA FD 43         mov [d], b
2454   12AC             ;; i++; 
2455   12AC 2C FA FF      mov b, [bp + -6] ; $i             
2456   12AF FD 79         mov g, b
2457   12B1 FD 77         inc b
2458   12B3 FA FA FF      lea d, [bp + -6] ; $i
2459   12B6 FD 43         mov [d], b
2460   12B8 FD 27         mov b, g
2461   12BA 0A 6B 12      jmp _while45_cond
2462   12BD             _while45_exit:
2463   12BD             ;; while (i > 0) { 
2464   12BD             _while46_cond:
2465   12BD 2C FA FF      mov b, [bp + -6] ; $i             
2466   12C0             ; START RELATIONAL
2467   12C0 D7            push a
2468   12C1 11            mov a, b
2469   12C2 26 00 00      mov b, $0
2470   12C5 B0            cmp a, b
2471   12C6 FD 7F         sgt ; >
2472   12C8 E4            pop a
2473   12C9             ; END RELATIONAL
2474   12C9 C0 00 00      cmp b, 0
2475   12CC C6 F3 12      je _while46_exit
2476   12CF             _while46_block:
2477   12CF             ;; i--; 
2478   12CF 2C FA FF      mov b, [bp + -6] ; $i             
2479   12D2 FD 79         mov g, b
2480   12D4 FD 7D         dec b
2481   12D6 FA FA FF      lea d, [bp + -6] ; $i
2482   12D9 FD 43         mov [d], b
2483   12DB FD 27         mov b, g
2484   12DD             ;; putchar(digits[i]); 
2485   12DD FA FC FF      lea d, [bp + -4] ; $digits
2486   12E0 D7            push a         
2487   12E1 2C FA FF      mov b, [bp + -6] ; $i                     
2488   12E4 5A            add d, b
2489   12E5 E4            pop a
2490   12E6 32            mov bl, [d]
2491   12E7 A7 00         mov bh, 0
2492   12E9 DD            push bl
2493   12EA 07 CC 13      call putchar
2494   12ED 51 01 00      add sp, 1
2495   12F0 0A BD 12      jmp _while46_cond
2496   12F3             _while46_exit:
2497   12F3 F9            leave
2498   12F4 09            ret
2499   12F5             
2500   12F5             printu:
2501   12F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2502   12F8             ; $digits 
2503   12F8             ; $i 
2504   12F8 52 07 00      sub sp, 7
2505   12FB             ;; i = 0; 
2506   12FB FA FA FF      lea d, [bp + -6] ; $i         
2507   12FE 26 00 00      mov b, $0        
2508   1301 FD 43         mov [d], b
2509   1303             ;; if(num == 0){ 
2510   1303             _if47_cond:
2511   1303 2C 05 00      mov b, [bp + 5] ; $num             
2512   1306             ; START RELATIONAL
2513   1306 D7            push a
2514   1307 11            mov a, b
2515   1308 26 00 00      mov b, $0
2516   130B B0            cmp a, b
2517   130C FD 71         seq ; ==
2518   130E E4            pop a
2519   130F             ; END RELATIONAL
2520   130F C0 00 00      cmp b, 0
2521   1312 C6 24 13      je _if47_exit
2522   1315             _if47_true:
2523   1315             ;; putchar('0'); 
2524   1315 26 30 00      mov b, $30
2525   1318 DD            push bl
2526   1319 07 CC 13      call putchar
2527   131C 51 01 00      add sp, 1
2528   131F             ;; return; 
2529   131F F9            leave
2530   1320 09            ret
2531   1321 0A 24 13      jmp _if47_exit
2532   1324             _if47_exit:
2533   1324             ;; while (num > 0) { 
2534   1324             _while48_cond:
2535   1324 2C 05 00      mov b, [bp + 5] ; $num             
2536   1327             ; START RELATIONAL
2537   1327 D7            push a
2538   1328 11            mov a, b
2539   1329 26 00 00      mov b, $0
2540   132C B0            cmp a, b
2541   132D FD 81         sgu ; > (unsigned)
2542   132F E4            pop a
2543   1330             ; END RELATIONAL
2544   1330 C0 00 00      cmp b, 0
2545   1333 C6 76 13      je _while48_exit
2546   1336             _while48_block:
2547   1336             ;; digits[i] = '0' + (num % 10); 
2548   1336 FA FC FF      lea d, [bp + -4] ; $digits
2549   1339 D7            push a         
2550   133A 2C FA FF      mov b, [bp + -6] ; $i                     
2551   133D 5A            add d, b
2552   133E E4            pop a         
2553   133F 26 30 00      mov b, $30
2554   1342             ; START TERMS
2555   1342 D7            push a
2556   1343 11            mov a, b
2557   1344 2C 05 00      mov b, [bp + 5] ; $num             
2558   1347             ; START FACTORS
2559   1347 D7            push a
2560   1348 11            mov a, b
2561   1349 26 0A 00      mov b, $a
2562   134C AE            div a, b ; 
2563   134D 11            mov a, b
2564   134E 27            mov b, a
2565   134F E4            pop a
2566   1350             ; END FACTORS
2567   1350 54            add a, b
2568   1351 27            mov b, a
2569   1352 E4            pop a
2570   1353             ; END TERMS        
2571   1353 FD 3E         mov [d], bl
2572   1355             ;; num = num / 10; 
2573   1355 FA 05 00      lea d, [bp + 5] ; $num         
2574   1358 2C 05 00      mov b, [bp + 5] ; $num             
2575   135B             ; START FACTORS
2576   135B D7            push a
2577   135C 11            mov a, b
2578   135D 26 0A 00      mov b, $a
2579   1360 AE            div a, b
2580   1361 27            mov b, a
2581   1362 E4            pop a
2582   1363             ; END FACTORS        
2583   1363 FD 43         mov [d], b
2584   1365             ;; i++; 
2585   1365 2C FA FF      mov b, [bp + -6] ; $i             
2586   1368 FD 79         mov g, b
2587   136A FD 77         inc b
2588   136C FA FA FF      lea d, [bp + -6] ; $i
2589   136F FD 43         mov [d], b
2590   1371 FD 27         mov b, g
2591   1373 0A 24 13      jmp _while48_cond
2592   1376             _while48_exit:
2593   1376             ;; while (i > 0) { 
2594   1376             _while49_cond:
2595   1376 2C FA FF      mov b, [bp + -6] ; $i             
2596   1379             ; START RELATIONAL
2597   1379 D7            push a
2598   137A 11            mov a, b
2599   137B 26 00 00      mov b, $0
2600   137E B0            cmp a, b
2601   137F FD 7F         sgt ; >
2602   1381 E4            pop a
2603   1382             ; END RELATIONAL
2604   1382 C0 00 00      cmp b, 0
2605   1385 C6 AC 13      je _while49_exit
2606   1388             _while49_block:
2607   1388             ;; i--; 
2608   1388 2C FA FF      mov b, [bp + -6] ; $i             
2609   138B FD 79         mov g, b
2610   138D FD 7D         dec b
2611   138F FA FA FF      lea d, [bp + -6] ; $i
2612   1392 FD 43         mov [d], b
2613   1394 FD 27         mov b, g
2614   1396             ;; putchar(digits[i]); 
2615   1396 FA FC FF      lea d, [bp + -4] ; $digits
2616   1399 D7            push a         
2617   139A 2C FA FF      mov b, [bp + -6] ; $i                     
2618   139D 5A            add d, b
2619   139E E4            pop a
2620   139F 32            mov bl, [d]
2621   13A0 A7 00         mov bh, 0
2622   13A2 DD            push bl
2623   13A3 07 CC 13      call putchar
2624   13A6 51 01 00      add sp, 1
2625   13A9 0A 76 13      jmp _while49_cond
2626   13AC             _while49_exit:
2627   13AC F9            leave
2628   13AD 09            ret
2629   13AE             
2630   13AE             rand:
2631   13AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2632   13B1             ; $sec 
2633   13B1 52 01 00      sub sp, 1
2634   13B4             
2635   13B4             ; --- BEGIN INLINE ASM BLOCK
2636   13B4 19 00         mov al, 0
2637   13B6 05 01         syscall sys_rtc					
2638   13B8 1A            mov al, ah
2639   13B9 20 00 00      mov al, [bp + 0] ; $sec
2640   13BC                         
2641   13BC             ; --- END INLINE ASM BLOCK
2642   13BC             
2643   13BC             ;; return sec; 
2644   13BC 34 00 00      mov bl, [bp + 0] ; $sec
2645   13BF A7 00         mov bh, 0             
2646   13C1 F9            leave
2647   13C2 09            ret
2648   13C3             
2649   13C3             date:
2650   13C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2651   13C6             
2652   13C6             ; --- BEGIN INLINE ASM BLOCK
2653   13C6 19 00         mov al, 0 
2654   13C8 05 07         syscall sys_datetime
2655   13CA             ; --- END INLINE ASM BLOCK
2656   13CA             
2657   13CA F9            leave
2658   13CB 09            ret
2659   13CC             
2660   13CC             putchar:
2661   13CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2662   13CF             
2663   13CF             ; --- BEGIN INLINE ASM BLOCK
2664   13CF 20 05 00      mov al, [bp + 5] ; $c
2665   13D2                         
2666   13D2 23            mov ah, al
2667   13D3 07 D2 15      call _putchar
2668   13D6             ; --- END INLINE ASM BLOCK
2669   13D6             
2670   13D6 F9            leave
2671   13D7 09            ret
2672   13D8             
2673   13D8             getchar:
2674   13D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2675   13DB             ; $c 
2676   13DB 52 01 00      sub sp, 1
2677   13DE             
2678   13DE             ; --- BEGIN INLINE ASM BLOCK
2679   13DE 07 CB 15      call getch
2680   13E1 1A            mov al, ah
2681   13E2 FA 00 00      lea d, [bp + 0] ; $c
2682   13E5 3E            mov [d], al
2683   13E6             ; --- END INLINE ASM BLOCK
2684   13E6             
2685   13E6             ;; return c; 
2686   13E6 34 00 00      mov bl, [bp + 0] ; $c
2687   13E9 A7 00         mov bh, 0             
2688   13EB F9            leave
2689   13EC 09            ret
2690   13ED             
2691   13ED             scann:
2692   13ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
2693   13F0             ; $m 
2694   13F0 52 02 00      sub sp, 2
2695   13F3             
2696   13F3             ; --- BEGIN INLINE ASM BLOCK
2697   13F3 07 16 18      call scan_u16d
2698   13F6 FA FF FF      lea d, [bp + -1] ; $m
2699   13F9 43            mov [d], a
2700   13FA             ; --- END INLINE ASM BLOCK
2701   13FA             
2702   13FA             ;; return m; 
2703   13FA 2C FF FF      mov b, [bp + -1] ; $m             
2704   13FD F9            leave
2705   13FE 09            ret
2706   13FF             
2707   13FF             puts:
2708   13FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2709   1402             
2710   1402             ; --- BEGIN INLINE ASM BLOCK
2711   1402 17 05 00      mov a, [bp + 5] ; $s             
2712   1405 3C            mov d, a
2713   1406 07 1C 17      call _puts
2714   1409 22 0A         mov ah, $0A
2715   140B 19 00         mov al, 0
2716   140D 05 03         syscall sys_io
2717   140F             ; --- END INLINE ASM BLOCK
2718   140F             
2719   140F F9            leave
2720   1410 09            ret
2721   1411             
2722   1411             print:
2723   1411 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2724   1414             
2725   1414             ; --- BEGIN INLINE ASM BLOCK
2726   1414 17 05 00      mov a, [bp + 5] ; $s             
2727   1417 3C            mov d, a
2728   1418 07 1C 17      call _puts
2729   141B             ; --- END INLINE ASM BLOCK
2730   141B             
2731   141B F9            leave
2732   141C 09            ret
2733   141D             
2734   141D             loadfile:
2735   141D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2736   1420             
2737   1420             ; --- BEGIN INLINE ASM BLOCK
2738   1420 17 05 00      mov a, [bp + 5] ; $destination             
2739   1423 4F            mov di, a
2740   1424 FA 07 00      lea d, [bp + 7] ; $filename
2741   1427 FD 2A         mov d, [d]
2742   1429 19 14         mov al, 20
2743   142B 05 04         syscall sys_filesystem
2744   142D             ; --- END INLINE ASM BLOCK
2745   142D             
2746   142D F9            leave
2747   142E 09            ret
2748   142F             
2749   142F             create_file:
2750   142F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2751   1432 F9            leave
2752   1433 09            ret
2753   1434             
2754   1434             delete_file:
2755   1434 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2756   1437             
2757   1437             ; --- BEGIN INLINE ASM BLOCK
2758   1437 FA 05 00      lea d, [bp + 5] ; $filename
2759   143A 19 0A         mov al, 10
2760   143C 05 04         syscall sys_filesystem
2761   143E             ; --- END INLINE ASM BLOCK
2762   143E             
2763   143E F9            leave
2764   143F 09            ret
2765   1440             
2766   1440             fopen:
2767   1440 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2768   1443 F9            leave
2769   1444 09            ret
2770   1445             
2771   1445             fclose:
2772   1445 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2773   1448 F9            leave
2774   1449 09            ret
2775   144A             
2776   144A             alloc:
2777   144A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2778   144D             ;; heap_top = heap_top + bytes; 
2779   144D 3B F3 38      mov d, _heap_top ; $heap_top         
2780   1450 29 F3 38      mov b, [_heap_top] ; $heap_top           
2781   1453             ; START TERMS
2782   1453 D7            push a
2783   1454 11            mov a, b
2784   1455 2C 05 00      mov b, [bp + 5] ; $bytes             
2785   1458 54            add a, b
2786   1459 27            mov b, a
2787   145A E4            pop a
2788   145B             ; END TERMS        
2789   145B FD 43         mov [d], b
2790   145D             ;; return heap_top - bytes; 
2791   145D 29 F3 38      mov b, [_heap_top] ; $heap_top           
2792   1460             ; START TERMS
2793   1460 D7            push a
2794   1461 11            mov a, b
2795   1462 2C 05 00      mov b, [bp + 5] ; $bytes             
2796   1465 60            sub a, b
2797   1466 27            mov b, a
2798   1467 E4            pop a
2799   1468             ; END TERMS
2800   1468 F9            leave
2801   1469 09            ret
2802   146A             
2803   146A             free:
2804   146A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2805   146D             ;; return heap_top = heap_top - bytes; 
2806   146D 3B F3 38      mov d, _heap_top ; $heap_top         
2807   1470 29 F3 38      mov b, [_heap_top] ; $heap_top           
2808   1473             ; START TERMS
2809   1473 D7            push a
2810   1474 11            mov a, b
2811   1475 2C 05 00      mov b, [bp + 5] ; $bytes             
2812   1478 60            sub a, b
2813   1479 27            mov b, a
2814   147A E4            pop a
2815   147B             ; END TERMS        
2816   147B FD 43         mov [d], b
2817   147D F9            leave
2818   147E 09            ret
2819   147F             
2820   147F             exit:
2821   147F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2822   1482             
2823   1482             ; --- BEGIN INLINE ASM BLOCK
2824   1482 05 0B         syscall sys_terminate_proc
2825   1484             ; --- END INLINE ASM BLOCK
2826   1484             
2827   1484 F9            leave
2828   1485 09            ret
2829   1486             
2830   1486             load_hex:
2831   1486 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2832   1489             ; $temp 
2833   1489 52 02 00      sub sp, 2
2834   148C             ;; temp = alloc(32768); 
2835   148C FA FF FF      lea d, [bp + -1] ; $temp
2836   148F DA            push d
2837   1490 26 00 80      mov b, $8000
2838   1493 FD AB         swp b
2839   1495 D8            push b
2840   1496 07 4A 14      call alloc
2841   1499 51 02 00      add sp, 2
2842   149C E7            pop d
2843   149D FD 43         mov [d], b
2844   149F             
2845   149F             ; --- BEGIN INLINE ASM BLOCK
2846   149F               
2847   149F               
2848   149F               
2849   149F               
2850   149F               
2851   149F             _load_hex:
2852   149F D7            push a
2853   14A0 D8            push b
2854   14A1 DA            push d
2855   14A2 E2            push si
2856   14A3 E3            push di
2857   14A4 52 00 80      sub sp, $8000      
2858   14A7 38 00 00      mov c, 0
2859   14AA 48            mov a, sp
2860   14AB 77            inc a
2861   14AC 3C            mov d, a          
2862   14AD 07 D9 15      call _gets        
2863   14B0 4D            mov si, a
2864   14B1             __load_hex_loop:
2865   14B1 F6            lodsb             
2866   14B2 B9 00         cmp al, 0         
2867   14B4 C6 C2 14      jz __load_hex_ret
2868   14B7 36            mov bh, al
2869   14B8 F6            lodsb
2870   14B9 2F            mov bl, al
2871   14BA 07 8F 15      call _atoi        
2872   14BD F7            stosb             
2873   14BE 78            inc c
2874   14BF 0A B1 14      jmp __load_hex_loop
2875   14C2             __load_hex_ret:
2876   14C2 51 00 80      add sp, $8000
2877   14C5 F0            pop di
2878   14C6 EF            pop si
2879   14C7 E7            pop d
2880   14C8 E5            pop b
2881   14C9 E4            pop a
2882   14CA             ; --- END INLINE ASM BLOCK
2883   14CA             
2884   14CA F9            leave
2885   14CB 09            ret
2886   14CC             
2887   14CC             getparam:
2888   14CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2889   14CF             ; $data 
2890   14CF 52 01 00      sub sp, 1
2891   14D2             
2892   14D2             ; --- BEGIN INLINE ASM BLOCK
2893   14D2 19 04         mov al, 4
2894   14D4 FA 05 00      lea d, [bp + 5] ; $address
2895   14D7 FD 2A         mov d, [d]
2896   14D9 05 0C         syscall sys_system
2897   14DB FA 00 00      lea d, [bp + 0] ; $data
2898   14DE FD 3E         mov [d], bl
2899   14E0             ; --- END INLINE ASM BLOCK
2900   14E0             
2901   14E0             ;; return data; 
2902   14E0 34 00 00      mov bl, [bp + 0] ; $data
2903   14E3 A7 00         mov bh, 0             
2904   14E5 F9            leave
2905   14E6 09            ret
2906   14E7             
2907   14E7             include_stdio_asm:
2908   14E7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2909   14EA             
2910   14EA             ; --- BEGIN INLINE ASM BLOCK
2911   14EA             .include "lib/stdio.asm"
0001+  14EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  14EA             ; stdio.s
0003+  14EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  14EA             .include "lib/string.asm"
0001++ 14EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 14EA             ; string.s
0003++ 14EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 14EA             
0005++ 14EA             
0006++ 14EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 14EA             ; _strrev
0008++ 14EA             ; reverse a string
0009++ 14EA             ; D = string address
0010++ 14EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 14EA             ; 01234
0012++ 14EA             _strrev:
0013++ 14EA 4B          	pusha
0014++ 14EB 07 31 15    	call _strlen	; length in C
0015++ 14EE 12          	mov a, c
0016++ 14EF AF 01 00    	cmp a, 1
0017++ 14F2 D0 0C 15    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 14F5 7D          	dec a
0019++ 14F6 FD 4E       	mov si, d	; beginning of string
0020++ 14F8 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 14FA 59          	add d, a	; end of string
0022++ 14FB 12          	mov a, c
0023++ 14FC FD 9B       	shr a		; divide by 2
0024++ 14FE 39          	mov c, a	; C now counts the steps
0025++ 14FF             _strrev_L0:
0026++ 14FF 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1500 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1501 3E          	mov [d], al	; store left char into right side
0029++ 1502 1B          	mov al, bl
0030++ 1503 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1504 7E          	dec c
0032++ 1505 7F          	dec d
0033++ 1506 C2 00 00    	cmp c, 0
0034++ 1509 C7 FF 14    	jne _strrev_L0
0035++ 150C             _strrev_end:
0036++ 150C 4C          	popa
0037++ 150D 09          	ret
0038++ 150E             	
0039++ 150E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 150E             ; _strchr
0041++ 150E             ; search string in D for char in AL
0042++ 150E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 150E             _strchr:
0044++ 150E             _strchr_L0:
0045++ 150E 32          	mov bl, [d]
0046++ 150F C1 00       	cmp bl, 0
0047++ 1511 C6 1C 15    	je _strchr_end
0048++ 1514 BA          	cmp al, bl
0049++ 1515 C6 1C 15    	je _strchr_end
0050++ 1518 79          	inc d
0051++ 1519 0A 0E 15    	jmp _strchr_L0
0052++ 151C             _strchr_end:
0053++ 151C 1B          	mov al, bl
0054++ 151D 09          	ret
0055++ 151E             
0056++ 151E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 151E             ; _strstr
0058++ 151E             ; find sub-string
0059++ 151E             ; str1 in SI
0060++ 151E             ; str2 in DI
0061++ 151E             ; SI points to end of source string
0062++ 151E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 151E             _strstr:
0064++ 151E DB          	push al
0065++ 151F DA          	push d
0066++ 1520 E3          	push di
0067++ 1521             _strstr_loop:
0068++ 1521 F3          	cmpsb					; compare a byte of the strings
0069++ 1522 C7 2D 15    	jne _strstr_ret
0070++ 1525 FC 00 00    	lea d, [di + 0]
0071++ 1528 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 152A C7 21 15    	jne _strstr_loop				; equal chars but not at end
0073++ 152D             _strstr_ret:
0074++ 152D F0          	pop di
0075++ 152E E7          	pop d
0076++ 152F E8          	pop al
0077++ 1530 09          	ret
0078++ 1531             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1531             ; length of null terminated string
0080++ 1531             ; result in C
0081++ 1531             ; pointer in D
0082++ 1531             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1531             _strlen:
0084++ 1531 DA          	push d
0085++ 1532 38 00 00    	mov c, 0
0086++ 1535             _strlen_L1:
0087++ 1535 BD 00       	cmp byte [d], 0
0088++ 1537 C6 3F 15    	je _strlen_ret
0089++ 153A 79          	inc d
0090++ 153B 78          	inc c
0091++ 153C 0A 35 15    	jmp _strlen_L1
0092++ 153F             _strlen_ret:
0093++ 153F E7          	pop d
0094++ 1540 09          	ret
0095++ 1541             
0096++ 1541             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1541             ; STRCMP
0098++ 1541             ; compare two strings
0099++ 1541             ; str1 in SI
0100++ 1541             ; str2 in DI
0101++ 1541             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1541             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1541             _strcmp:
0104++ 1541 DB          	push al
0105++ 1542 DA          	push d
0106++ 1543 E3          	push di
0107++ 1544 E2          	push si
0108++ 1545             _strcmp_loop:
0109++ 1545 F3          	cmpsb					; compare a byte of the strings
0110++ 1546 C7 51 15    	jne _strcmp_ret
0111++ 1549 FB FF FF    	lea d, [si +- 1]
0112++ 154C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 154E C7 45 15    	jne _strcmp_loop				; equal chars but not at end
0114++ 1551             _strcmp_ret:
0115++ 1551 EF          	pop si
0116++ 1552 F0          	pop di
0117++ 1553 E7          	pop d
0118++ 1554 E8          	pop al
0119++ 1555 09          	ret
0120++ 1556             
0121++ 1556             
0122++ 1556             ; STRCPY
0123++ 1556             ; copy null terminated string from SI to DI
0124++ 1556             ; source in SI
0125++ 1556             ; destination in DI
0126++ 1556             _strcpy:
0127++ 1556 E2          	push si
0128++ 1557 E3          	push di
0129++ 1558 DB          	push al
0130++ 1559             _strcpy_L1:
0131++ 1559 F6          	lodsb
0132++ 155A F7          	stosb
0133++ 155B B9 00       	cmp al, 0
0134++ 155D C7 59 15    	jne _strcpy_L1
0135++ 1560             _strcpy_end:
0136++ 1560 E8          	pop al
0137++ 1561 F0          	pop di
0138++ 1562 EF          	pop si
0139++ 1563 09          	ret
0140++ 1564             
0141++ 1564             ; STRCAT
0142++ 1564             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1564             ; source in SI
0144++ 1564             ; destination in DI
0145++ 1564             _strcat:
0146++ 1564 E2          	push si
0147++ 1565 E3          	push di
0148++ 1566 D7          	push a
0149++ 1567 DA          	push d
0150++ 1568 50          	mov a, di
0151++ 1569 3C          	mov d, a
0152++ 156A             _strcat_goto_end_L1:
0153++ 156A BD 00       	cmp byte[d], 0
0154++ 156C C6 73 15    	je _strcat_start
0155++ 156F 79          	inc d
0156++ 1570 0A 6A 15    	jmp _strcat_goto_end_L1
0157++ 1573             _strcat_start:
0158++ 1573 FD 50       	mov di, d
0159++ 1575             _strcat_L1:
0160++ 1575 F6          	lodsb
0161++ 1576 F7          	stosb
0162++ 1577 B9 00       	cmp al, 0
0163++ 1579 C7 75 15    	jne _strcat_L1
0164++ 157C             _strcat_end:
0165++ 157C E7          	pop d
0166++ 157D E4          	pop a
0167++ 157E F0          	pop di
0168++ 157F EF          	pop si
0169++ 1580 09          	ret
0170++ 1581             
0171++ 1581             
0005+  1581             
0006+  1581             
0007+  1581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1581             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1581             ; ASCII in BL
0010+  1581             ; result in AL
0011+  1581             ; ascii for F = 0100 0110
0012+  1581             ; ascii for 9 = 0011 1001
0013+  1581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1581             hex_ascii_encode:
0015+  1581 1B            mov al, bl
0016+  1582 93 40         test al, $40        ; test if letter or number
0017+  1584 C7 8A 15      jnz hex_letter
0018+  1587 87 0F         and al, $0F        ; get number
0019+  1589 09            ret
0020+  158A             hex_letter:
0021+  158A 87 0F         and al, $0F        ; get letter
0022+  158C 6A 09         add al, 9
0023+  158E 09            ret
0024+  158F             
0025+  158F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  158F             ; ATOI
0027+  158F             ; 2 letter hex string in B
0028+  158F             ; 8bit integer returned in AL
0029+  158F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  158F             _atoi:
0031+  158F D8            push b
0032+  1590 07 81 15      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  1593 30            mov bl, bh
0034+  1594 DB            push al          ; save a
0035+  1595 07 81 15      call hex_ascii_encode
0036+  1598 EA            pop bl  
0037+  1599 FD 9E 04      shl al, 4
0038+  159C 8C            or al, bl
0039+  159D E5            pop b
0040+  159E 09            ret  
0041+  159F             
0042+  159F             
0043+  159F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  159F             ; scanf
0045+  159F             ; no need for explanations!
0046+  159F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  159F             scanf:
0048+  159F 09            ret
0049+  15A0             
0050+  15A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  15A0             ; ITOA
0052+  15A0             ; 8bit value in BL
0053+  15A0             ; 2 byte ASCII result in A
0054+  15A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  15A0             _itoa:
0056+  15A0 DA            push d
0057+  15A1 D8            push b
0058+  15A2 A7 00         mov bh, 0
0059+  15A4 FD A4 04      shr bl, 4  
0060+  15A7 74            mov d, b
0061+  15A8 1F 50 18      mov al, [d + s_hex_digits]
0062+  15AB 23            mov ah, al
0063+  15AC               
0064+  15AC E5            pop b
0065+  15AD D8            push b
0066+  15AE A7 00         mov bh, 0
0067+  15B0 FD 87 0F      and bl, $0F
0068+  15B3 74            mov d, b
0069+  15B4 1F 50 18      mov al, [d + s_hex_digits]
0070+  15B7 E5            pop b
0071+  15B8 E7            pop d
0072+  15B9 09            ret
0073+  15BA             
0074+  15BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  15BA             ; HEX STRING TO BINARY
0076+  15BA             ; di = destination address
0077+  15BA             ; si = source
0078+  15BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  15BA             _hex_to_int:
0080+  15BA             _hex_to_int_L1:
0081+  15BA F6            lodsb          ; load from [SI] to AL
0082+  15BB B9 00         cmp al, 0        ; check if ASCII 0
0083+  15BD C6 CA 15      jz _hex_to_int_ret
0084+  15C0 36            mov bh, al
0085+  15C1 F6            lodsb
0086+  15C2 2F            mov bl, al
0087+  15C3 07 8F 15      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  15C6 F7            stosb          ; store AL to [DI]
0089+  15C7 0A BA 15      jmp _hex_to_int_L1
0090+  15CA             _hex_to_int_ret:
0091+  15CA 09            ret    
0092+  15CB             
0093+  15CB             
0094+  15CB             
0095+  15CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  15CB             ; GETCHAR
0097+  15CB             ; char in ah
0098+  15CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  15CB             getch:
0100+  15CB DB            push al
0101+  15CC             getch_retry:
0102+  15CC 19 01         mov al, 1
0103+  15CE 05 03         syscall sys_io      ; receive in AH
0104+  15D0 E8            pop al
0105+  15D1 09            ret
0106+  15D2             
0107+  15D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  15D2             ; PUTCHAR
0109+  15D2             ; char in ah
0110+  15D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  15D2             _putchar:
0112+  15D2 D7            push a
0113+  15D3 19 00         mov al, 0
0114+  15D5 05 03         syscall sys_io      ; char in AH
0115+  15D7 E4            pop a
0116+  15D8 09            ret
0117+  15D9             
0118+  15D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  15D9             ;; INPUT A STRING
0120+  15D9             ;; terminates with null
0121+  15D9             ;; pointer in D
0122+  15D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  15D9             _gets:
0124+  15D9 D7            push a
0125+  15DA DA            push d
0126+  15DB             _gets_loop:
0127+  15DB 19 01         mov al, 1
0128+  15DD 05 03         syscall sys_io      ; receive in AH
0129+  15DF B9 00         cmp al, 0        ; check error code (AL)
0130+  15E1 C6 DB 15      je _gets_loop      ; if no char received, retry
0131+  15E4             
0132+  15E4 76 1B         cmp ah, 27
0133+  15E6 C6 07 16      je _gets_ansi_esc
0134+  15E9 76 0A         cmp ah, $0A        ; LF
0135+  15EB C6 72 16      je _gets_end
0136+  15EE 76 0D         cmp ah, $0D        ; CR
0137+  15F0 C6 72 16      je _gets_end
0138+  15F3 76 5C         cmp ah, $5C        ; '\\'
0139+  15F5 C6 33 16      je _gets_escape
0140+  15F8               
0141+  15F8 76 08         cmp ah, $08      ; check for backspace
0142+  15FA C6 03 16      je _gets_backspace
0143+  15FD             
0144+  15FD 1A            mov al, ah
0145+  15FE 3E            mov [d], al
0146+  15FF 79            inc d
0147+  1600 0A DB 15      jmp _gets_loop
0148+  1603             _gets_backspace:
0149+  1603 7F            dec d
0150+  1604 0A DB 15      jmp _gets_loop
0151+  1607             _gets_ansi_esc:
0152+  1607 19 01         mov al, 1
0153+  1609 05 03         syscall sys_io        ; receive in AH without echo
0154+  160B B9 00         cmp al, 0          ; check error code (AL)
0155+  160D C6 07 16      je _gets_ansi_esc    ; if no char received, retry
0156+  1610 76 5B         cmp ah, '['
0157+  1612 C7 DB 15      jne _gets_loop
0158+  1615             _gets_ansi_esc_2:
0159+  1615 19 01         mov al, 1
0160+  1617 05 03         syscall sys_io          ; receive in AH without echo
0161+  1619 B9 00         cmp al, 0            ; check error code (AL)
0162+  161B C6 15 16      je _gets_ansi_esc_2  ; if no char received, retry
0163+  161E 76 44         cmp ah, 'D'
0164+  1620 C6 2B 16      je _gets_left_arrow
0165+  1623 76 43         cmp ah, 'C'
0166+  1625 C6 2F 16      je _gets_right_arrow
0167+  1628 0A DB 15      jmp _gets_loop
0168+  162B             _gets_left_arrow:
0169+  162B 7F            dec d
0170+  162C 0A DB 15      jmp _gets_loop
0171+  162F             _gets_right_arrow:
0172+  162F 79            inc d
0173+  1630 0A DB 15      jmp _gets_loop
0174+  1633             _gets_escape:
0175+  1633 19 01         mov al, 1
0176+  1635 05 03         syscall sys_io      ; receive in AH
0177+  1637 B9 00         cmp al, 0        ; check error code (AL)
0178+  1639 C6 33 16      je _gets_escape      ; if no char received, retry
0179+  163C 76 6E         cmp ah, 'n'
0180+  163E C6 5D 16      je _gets_LF
0181+  1641 76 72         cmp ah, 'r'
0182+  1643 C6 64 16      je _gets_CR
0183+  1646 76 30         cmp ah, '0'
0184+  1648 C6 6B 16      je _gets_NULL
0185+  164B 76 5C         cmp ah, $5C  ; '\'
0186+  164D C6 56 16      je _gets_slash
0187+  1650 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1651 3E            mov [d], al
0189+  1652 79            inc d
0190+  1653 0A DB 15      jmp _gets_loop
0191+  1656             _gets_slash:
0192+  1656 19 5C         mov al, $5C
0193+  1658 3E            mov [d], al
0194+  1659 79            inc d
0195+  165A 0A DB 15      jmp _gets_loop
0196+  165D             _gets_LF:
0197+  165D 19 0A         mov al, $0A
0198+  165F 3E            mov [d], al
0199+  1660 79            inc d
0200+  1661 0A DB 15      jmp _gets_loop
0201+  1664             _gets_CR:
0202+  1664 19 0D         mov al, $0D
0203+  1666 3E            mov [d], al
0204+  1667 79            inc d
0205+  1668 0A DB 15      jmp _gets_loop
0206+  166B             _gets_NULL:
0207+  166B 19 00         mov al, $00
0208+  166D 3E            mov [d], al
0209+  166E 79            inc d
0210+  166F 0A DB 15      jmp _gets_loop
0211+  1672             _gets_end:
0212+  1672 19 00         mov al, 0
0213+  1674 3E            mov [d], al        ; terminate string
0214+  1675 E7            pop d
0215+  1676 E4            pop a
0216+  1677 09            ret
0217+  1678             
0218+  1678             
0219+  1678             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  1678             ;; INPUT TEXT
0221+  1678             ;; terminated with CTRL+D
0222+  1678             ;; pointer in D
0223+  1678             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  1678             _gettxt:
0225+  1678 D7            push a
0226+  1679 DA            push d
0227+  167A             _gettxt_loop:
0228+  167A 19 01         mov al, 1
0229+  167C 05 03         syscall sys_io      ; receive in AH
0230+  167E B9 00         cmp al, 0        ; check error code (AL)
0231+  1680 C6 7A 16      je _gettxt_loop    ; if no char received, retry
0232+  1683 76 04         cmp ah, 4      ; EOT
0233+  1685 C6 C3 16      je _gettxt_end
0234+  1688 76 08         cmp ah, $08      ; check for backspace
0235+  168A C6 BF 16      je _gettxt_backspace
0236+  168D 76 5C         cmp ah, $5C        ; '\'
0237+  168F C6 98 16      je _gettxt_escape
0238+  1692 1A            mov al, ah
0239+  1693 3E            mov [d], al
0240+  1694 79            inc d
0241+  1695 0A 7A 16      jmp _gettxt_loop
0242+  1698             _gettxt_escape:
0243+  1698 19 01         mov al, 1
0244+  169A 05 03         syscall sys_io      ; receive in AH
0245+  169C B9 00         cmp al, 0        ; check error code (AL)
0246+  169E C6 98 16      je _gettxt_escape    ; if no char received, retry
0247+  16A1 76 6E         cmp ah, 'n'
0248+  16A3 C6 B1 16      je _gettxt_LF
0249+  16A6 76 72         cmp ah, 'r'
0250+  16A8 C6 B8 16      je _gettxt_CR
0251+  16AB 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  16AC 3E            mov [d], al
0253+  16AD 79            inc d
0254+  16AE 0A 7A 16      jmp _gettxt_loop
0255+  16B1             _gettxt_LF:
0256+  16B1 19 0A         mov al, $0A
0257+  16B3 3E            mov [d], al
0258+  16B4 79            inc d
0259+  16B5 0A 7A 16      jmp _gettxt_loop
0260+  16B8             _gettxt_CR:
0261+  16B8 19 0D         mov al, $0D
0262+  16BA 3E            mov [d], al
0263+  16BB 79            inc d
0264+  16BC 0A 7A 16      jmp _gettxt_loop
0265+  16BF             _gettxt_backspace:
0266+  16BF 7F            dec d
0267+  16C0 0A 7A 16      jmp _gettxt_loop
0268+  16C3             _gettxt_end:
0269+  16C3 19 00         mov al, 0
0270+  16C5 3E            mov [d], al        ; terminate string
0271+  16C6 E7            pop d
0272+  16C7 E4            pop a
0273+  16C8 09            ret
0274+  16C9             
0275+  16C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  16C9             ; PRINT NEW LINE
0277+  16C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  16C9             printnl:
0279+  16C9 D7            push a
0280+  16CA 10 00 0A      mov a, $0A00
0281+  16CD 05 03         syscall sys_io
0282+  16CF 10 00 0D      mov a, $0D00
0283+  16D2 05 03         syscall sys_io
0284+  16D4 E4            pop a
0285+  16D5 09            ret
0286+  16D6             
0287+  16D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  16D6             ; _strtoint
0289+  16D6             ; 4 digit hex string number in d
0290+  16D6             ; integer returned in A
0291+  16D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  16D6             _strtointx:
0293+  16D6 D8            push b
0294+  16D7 32            mov bl, [d]
0295+  16D8 37            mov bh, bl
0296+  16D9 33 01 00      mov bl, [d + 1]
0297+  16DC 07 8F 15      call _atoi        ; convert to int in AL
0298+  16DF 23            mov ah, al        ; move to AH
0299+  16E0 33 02 00      mov bl, [d + 2]
0300+  16E3 37            mov bh, bl
0301+  16E4 33 03 00      mov bl, [d + 3]
0302+  16E7 07 8F 15      call _atoi        ; convert to int in AL
0303+  16EA E5            pop b
0304+  16EB 09            ret
0305+  16EC             
0306+  16EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  16EC             ; _strtoint
0308+  16EC             ; 5 digit base10 string number in d
0309+  16EC             ; integer returned in A
0310+  16EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  16EC             _strtoint:
0312+  16EC E2            push si
0313+  16ED D8            push b
0314+  16EE D9            push c
0315+  16EF DA            push d
0316+  16F0 07 31 15      call _strlen      ; get string length in C
0317+  16F3 7E            dec c
0318+  16F4 FD 4E         mov si, d
0319+  16F6 12            mov a, c
0320+  16F7 FD 99         shl a
0321+  16F9 3B 68 18      mov d, table_power
0322+  16FC 59            add d, a
0323+  16FD 38 00 00      mov c, 0
0324+  1700             _strtoint_L0:
0325+  1700 F6            lodsb      ; load ASCII to al
0326+  1701 B9 00         cmp al, 0
0327+  1703 C6 16 17      je _strtoint_end
0328+  1706 6F 30         sub al, $30    ; make into integer
0329+  1708 22 00         mov ah, 0
0330+  170A 2A            mov b, [d]
0331+  170B AC            mul a, b      ; result in B since it fits in 16bits
0332+  170C 11            mov a, b
0333+  170D 28            mov b, c
0334+  170E 54            add a, b
0335+  170F 39            mov c, a
0336+  1710 63 02 00      sub d, 2
0337+  1713 0A 00 17      jmp _strtoint_L0
0338+  1716             _strtoint_end:
0339+  1716 12            mov a, c
0340+  1717 E7            pop d
0341+  1718 E6            pop c
0342+  1719 E5            pop b
0343+  171A EF            pop si
0344+  171B 09            ret
0345+  171C             
0346+  171C             
0347+  171C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  171C             ; PRINT NULL TERMINATED STRING
0349+  171C             ; pointer in D
0350+  171C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  171C             _puts:
0352+  171C D7            push a
0353+  171D DA            push d
0354+  171E             _puts_L1:
0355+  171E 1E            mov al, [d]
0356+  171F B9 00         cmp al, 0
0357+  1721 C6 2D 17      jz _puts_END
0358+  1724 23            mov ah, al
0359+  1725 19 00         mov al, 0
0360+  1727 05 03         syscall sys_io
0361+  1729 79            inc d
0362+  172A 0A 1E 17      jmp _puts_L1
0363+  172D             _puts_END:
0364+  172D E7            pop d
0365+  172E E4            pop a
0366+  172F 09            ret
0367+  1730             
0368+  1730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1730             ; PRINT N SIZE STRING
0370+  1730             ; pointer in D
0371+  1730             ; size in C
0372+  1730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1730             _putsn:
0374+  1730 DB            push al
0375+  1731 DA            push d
0376+  1732 D9            push c
0377+  1733             _putsn_L0:
0378+  1733 1E            mov al, [d]
0379+  1734 23            mov ah, al
0380+  1735 19 00         mov al, 0
0381+  1737 05 03         syscall sys_io
0382+  1739 79            inc d
0383+  173A 7E            dec c  
0384+  173B C2 00 00      cmp c, 0
0385+  173E C7 33 17      jne _putsn_L0
0386+  1741             _putsn_end:
0387+  1741 E6            pop c
0388+  1742 E7            pop d
0389+  1743 E8            pop al
0390+  1744 09            ret
0391+  1745             
0392+  1745             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  1745             ; print 16bit decimal number
0394+  1745             ; input number in A
0395+  1745             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  1745             print_u16d:
0397+  1745 D7            push a
0398+  1746 D8            push b
0399+  1747 26 10 27      mov b, 10000
0400+  174A AE            div a, b      ; get 10000's coeff.
0401+  174B 07 6D 17      call print_number
0402+  174E 11            mov a, b
0403+  174F 26 E8 03      mov b, 1000
0404+  1752 AE            div a, b      ; get 1000's coeff.
0405+  1753 07 6D 17      call print_number
0406+  1756 11            mov a, b
0407+  1757 26 64 00      mov b, 100
0408+  175A AE            div a, b
0409+  175B 07 6D 17      call print_number
0410+  175E 11            mov a, b
0411+  175F 26 0A 00      mov b, 10
0412+  1762 AE            div a, b
0413+  1763 07 6D 17      call print_number
0414+  1766 1B            mov al, bl      ; 1's coeff in bl
0415+  1767 07 6D 17      call print_number
0416+  176A E5            pop b
0417+  176B E4            pop a
0418+  176C 09            ret
0419+  176D             
0420+  176D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  176D             ; print AL
0422+  176D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  176D             print_number:
0424+  176D 6A 30         add al, $30
0425+  176F 23            mov ah, al
0426+  1770 07 D2 15      call _putchar
0427+  1773 09            ret
0428+  1774             
0429+  1774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  1774             ; PRINT 16BIT HEX INTEGER
0431+  1774             ; integer value in reg B
0432+  1774             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  1774             print_u16x:
0434+  1774 D7            push a
0435+  1775 D8            push b
0436+  1776 DD            push bl
0437+  1777 30            mov bl, bh
0438+  1778 07 A0 15      call _itoa        ; convert bh to char in A
0439+  177B 2F            mov bl, al        ; save al
0440+  177C 19 00         mov al, 0
0441+  177E 05 03         syscall sys_io        ; display AH
0442+  1780 24            mov ah, bl        ; retrieve al
0443+  1781 19 00         mov al, 0
0444+  1783 05 03         syscall sys_io        ; display AL
0445+  1785             
0446+  1785 EA            pop bl
0447+  1786 07 A0 15      call _itoa        ; convert bh to char in A
0448+  1789 2F            mov bl, al        ; save al
0449+  178A 19 00         mov al, 0
0450+  178C 05 03         syscall sys_io        ; display AH
0451+  178E 24            mov ah, bl        ; retrieve al
0452+  178F 19 00         mov al, 0
0453+  1791 05 03         syscall sys_io        ; display AL
0454+  1793             
0455+  1793 E5            pop b
0456+  1794 E4            pop a
0457+  1795 09            ret
0458+  1796             
0459+  1796             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  1796             ; INPUT 16BIT HEX INTEGER
0461+  1796             ; read 16bit integer into A
0462+  1796             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  1796             scan_u16x:
0464+  1796 F8 10 00      enter 16
0465+  1799 D8            push b
0466+  179A DA            push d
0467+  179B             
0468+  179B FA F1 FF      lea d, [bp + -15]
0469+  179E 07 D9 15      call _gets        ; get number
0470+  17A1             
0471+  17A1 32            mov bl, [d]
0472+  17A2 37            mov bh, bl
0473+  17A3 33 01 00      mov bl, [d + 1]
0474+  17A6 07 8F 15      call _atoi        ; convert to int in AL
0475+  17A9 23            mov ah, al        ; move to AH
0476+  17AA             
0477+  17AA 33 02 00      mov bl, [d + 2]
0478+  17AD 37            mov bh, bl
0479+  17AE 33 03 00      mov bl, [d + 3]
0480+  17B1 07 8F 15      call _atoi        ; convert to int in AL
0481+  17B4             
0482+  17B4 E7            pop d
0483+  17B5 E5            pop b
0484+  17B6 F9            leave
0485+  17B7 09            ret
0486+  17B8             
0487+  17B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  17B8             ; PRINT 8bit HEX INTEGER
0489+  17B8             ; integer value in reg bl
0490+  17B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  17B8             print_u8x:
0492+  17B8 D7            push a
0493+  17B9 DD            push bl
0494+  17BA             
0495+  17BA 07 A0 15      call _itoa        ; convert bl to char in A
0496+  17BD 2F            mov bl, al        ; save al
0497+  17BE 19 00         mov al, 0
0498+  17C0 05 03         syscall sys_io        ; display AH
0499+  17C2 24            mov ah, bl        ; retrieve al
0500+  17C3 19 00         mov al, 0
0501+  17C5 05 03         syscall sys_io        ; display AL
0502+  17C7             
0503+  17C7 EA            pop bl
0504+  17C8 E4            pop a
0505+  17C9 09            ret
0506+  17CA             
0507+  17CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  17CA             ; print 8bit decimal unsigned number
0509+  17CA             ; input number in AL
0510+  17CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  17CA             print_u8d:
0512+  17CA D7            push a
0513+  17CB D8            push b
0514+  17CC             
0515+  17CC 22 00         mov ah, 0
0516+  17CE 26 64 00      mov b, 100
0517+  17D1 AE            div a, b
0518+  17D2 D8            push b      ; save remainder
0519+  17D3 B9 00         cmp al, 0
0520+  17D5 C6 DF 17      je skip100
0521+  17D8 6A 30         add al, $30
0522+  17DA 23            mov ah, al
0523+  17DB 19 00         mov al, 0
0524+  17DD 05 03         syscall sys_io  ; print coeff
0525+  17DF             skip100:
0526+  17DF E4            pop a
0527+  17E0 22 00         mov ah, 0
0528+  17E2 26 0A 00      mov b, 10
0529+  17E5 AE            div a, b
0530+  17E6 D8            push b      ; save remainder
0531+  17E7 B9 00         cmp al, 0
0532+  17E9 C6 F3 17      je skip10
0533+  17EC 6A 30         add al, $30
0534+  17EE 23            mov ah, al
0535+  17EF 19 00         mov al, 0
0536+  17F1 05 03         syscall sys_io  ; print coeff
0537+  17F3             skip10:
0538+  17F3 E4            pop a
0539+  17F4 1B            mov al, bl
0540+  17F5 6A 30         add al, $30
0541+  17F7 23            mov ah, al
0542+  17F8 19 00         mov al, 0
0543+  17FA 05 03         syscall sys_io  ; print coeff
0544+  17FC E5            pop b
0545+  17FD E4            pop a
0546+  17FE 09            ret
0547+  17FF             
0548+  17FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  17FF             ; INPUT 8BIT HEX INTEGER
0550+  17FF             ; read 8bit integer into AL
0551+  17FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  17FF             scan_u8x:
0553+  17FF F8 04 00      enter 4
0554+  1802 D8            push b
0555+  1803 DA            push d
0556+  1804             
0557+  1804 FA FD FF      lea d, [bp + -3]
0558+  1807 07 D9 15      call _gets        ; get number
0559+  180A             
0560+  180A 32            mov bl, [d]
0561+  180B 37            mov bh, bl
0562+  180C 33 01 00      mov bl, [d + 1]
0563+  180F 07 8F 15      call _atoi        ; convert to int in AL
0564+  1812             
0565+  1812 E7            pop d
0566+  1813 E5            pop b
0567+  1814 F9            leave
0568+  1815 09            ret
0569+  1816             
0570+  1816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  1816             ; input decimal number
0572+  1816             ; result in A
0573+  1816             ; 655'\0'
0574+  1816             ; low--------high
0575+  1816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  1816             scan_u16d:
0577+  1816 F8 08 00      enter 8
0578+  1819 E2            push si
0579+  181A D8            push b
0580+  181B D9            push c
0581+  181C DA            push d
0582+  181D FA F9 FF      lea d, [bp +- 7]
0583+  1820 07 D9 15      call _gets
0584+  1823 07 31 15      call _strlen      ; get string length in C
0585+  1826 7E            dec c
0586+  1827 FD 4E         mov si, d
0587+  1829 12            mov a, c
0588+  182A FD 99         shl a
0589+  182C 3B 68 18      mov d, table_power
0590+  182F 59            add d, a
0591+  1830 38 00 00      mov c, 0
0592+  1833             mul_loop:
0593+  1833 F6            lodsb      ; load ASCII to al
0594+  1834 B9 00         cmp al, 0
0595+  1836 C6 49 18      je mul_exit
0596+  1839 6F 30         sub al, $30    ; make into integer
0597+  183B 22 00         mov ah, 0
0598+  183D 2A            mov b, [d]
0599+  183E AC            mul a, b      ; result in B since it fits in 16bits
0600+  183F 11            mov a, b
0601+  1840 28            mov b, c
0602+  1841 54            add a, b
0603+  1842 39            mov c, a
0604+  1843 63 02 00      sub d, 2
0605+  1846 0A 33 18      jmp mul_loop
0606+  1849             mul_exit:
0607+  1849 12            mov a, c
0608+  184A E7            pop d
0609+  184B E6            pop c
0610+  184C E5            pop b
0611+  184D EF            pop si
0612+  184E F9            leave
0613+  184F 09            ret
0614+  1850             
0615+  1850             
0616+  1850 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  1854 34 35 36 37 
0616+  1858 38 39 41 42 
0616+  185C 43 44 45 46 
0617+  1860 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  1864 1B 5B 48 00 
0618+  1868             
0619+  1868             table_power:
0620+  1868 01 00         .dw 1
0621+  186A 0A 00         .dw 10
0622+  186C 64 00         .dw 100
0623+  186E E8 03         .dw 1000
0624+  1870 10 27         .dw 100002912   1872             ; --- END INLINE ASM BLOCK
2913   1872             
2914   1872 F9            leave
2915   1873 09            ret
2916   1874             
2917   1874             back:
2918   1874 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2919   1877             ; $t 
2920   1877 52 02 00      sub sp, 2
2921   187A             ;; t = token; 
2922   187A FA FF FF      lea d, [bp + -1] ; $t         
2923   187D 26 85 2F      mov b, _token_data ; $token                   
2924   1880 FD 43         mov [d], b
2925   1882             ;; while(*t++) prog--; 
2926   1882             _while50_cond:
2927   1882 2C FF FF      mov b, [bp + -1] ; $t             
2928   1885 FD 79         mov g, b
2929   1887 FD 77         inc b
2930   1889 FA FF FF      lea d, [bp + -1] ; $t
2931   188C FD 43         mov [d], b
2932   188E FD 27         mov b, g
2933   1890 74            mov d, b
2934   1891 32            mov bl, [d]
2935   1892 A7 00         mov bh, 0
2936   1894 C0 00 00      cmp b, 0
2937   1897 C6 AB 18      je _while50_exit
2938   189A             _while50_block:
2939   189A             ;; prog--; 
2940   189A 29 83 2F      mov b, [_prog] ; $prog           
2941   189D FD 79         mov g, b
2942   189F FD 7D         dec b
2943   18A1 3B 83 2F      mov d, _prog ; $prog
2944   18A4 FD 43         mov [d], b
2945   18A6 FD 27         mov b, g
2946   18A8 0A 82 18      jmp _while50_cond
2947   18AB             _while50_exit:
2948   18AB             ;; tok = TOK_UNDEF; 
2949   18AB 3B 7F 2F      mov d, _tok ; $tok         
2950   18AE 26 00 00      mov b, 0; TOK_UNDEF        
2951   18B1 FD 43         mov [d], b
2952   18B3             ;; toktype = TYPE_UNDEF; 
2953   18B3 3B 81 2F      mov d, _toktype ; $toktype         
2954   18B6 26 00 00      mov b, 0; TYPE_UNDEF        
2955   18B9 FD 43         mov [d], b
2956   18BB             ;; token[0] = '\0'; 
2957   18BB 3B 85 2F      mov d, _token_data ; $token
2958   18BE D7            push a         
2959   18BF 26 00 00      mov b, $0        
2960   18C2 5A            add d, b
2961   18C3 E4            pop a         
2962   18C4 26 00 00      mov b, $0        
2963   18C7 FD 3E         mov [d], bl
2964   18C9 F9            leave
2965   18CA 09            ret
2966   18CB             
2967   18CB             get_path:
2968   18CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2969   18CE             ; $t 
2970   18CE 52 02 00      sub sp, 2
2971   18D1             ;; *token = '\0'; 
2972   18D1 26 85 2F      mov b, _token_data ; $token           
2973   18D4 D8            push b
2974   18D5 26 00 00      mov b, $0
2975   18D8 E7            pop d
2976   18D9 FD 3E         mov [d], bl
2977   18DB             ;; t = token; 
2978   18DB FA FF FF      lea d, [bp + -1] ; $t         
2979   18DE 26 85 2F      mov b, _token_data ; $token                   
2980   18E1 FD 43         mov [d], b
2981   18E3             ;; while(is_space(*prog)) prog++; 
2982   18E3             _while51_cond:
2983   18E3 29 83 2F      mov b, [_prog] ; $prog           
2984   18E6 74            mov d, b
2985   18E7 32            mov bl, [d]
2986   18E8 A7 00         mov bh, 0
2987   18EA DD            push bl
2988   18EB 07 A1 09      call is_space
2989   18EE 51 01 00      add sp, 1
2990   18F1 C0 00 00      cmp b, 0
2991   18F4 C6 08 19      je _while51_exit
2992   18F7             _while51_block:
2993   18F7             ;; prog++; 
2994   18F7 29 83 2F      mov b, [_prog] ; $prog           
2995   18FA FD 79         mov g, b
2996   18FC FD 77         inc b
2997   18FE 3B 83 2F      mov d, _prog ; $prog
2998   1901 FD 43         mov [d], b
2999   1903 FD 27         mov b, g
3000   1905 0A E3 18      jmp _while51_cond
3001   1908             _while51_exit:
3002   1908             ;; if(*prog == '\0'){ 
3003   1908             _if52_cond:
3004   1908 29 83 2F      mov b, [_prog] ; $prog           
3005   190B 74            mov d, b
3006   190C 32            mov bl, [d]
3007   190D A7 00         mov bh, 0
3008   190F             ; START RELATIONAL
3009   190F D7            push a
3010   1910 11            mov a, b
3011   1911 26 00 00      mov b, $0
3012   1914 B0            cmp a, b
3013   1915 FD 71         seq ; ==
3014   1917 E4            pop a
3015   1918             ; END RELATIONAL
3016   1918 C0 00 00      cmp b, 0
3017   191B C6 23 19      je _if52_exit
3018   191E             _if52_true:
3019   191E             ;; return; 
3020   191E F9            leave
3021   191F 09            ret
3022   1920 0A 23 19      jmp _if52_exit
3023   1923             _if52_exit:
3024   1923             ;; while( 
3025   1923             _while53_cond:
3026   1923 29 83 2F      mov b, [_prog] ; $prog           
3027   1926 74            mov d, b
3028   1927 32            mov bl, [d]
3029   1928 A7 00         mov bh, 0
3030   192A             ; START RELATIONAL
3031   192A D7            push a
3032   192B 11            mov a, b
3033   192C 26 61 00      mov b, $61
3034   192F B0            cmp a, b
3035   1930 FD 80         sge ; >=
3036   1932 E4            pop a
3037   1933             ; END RELATIONAL
3038   1933 D7            push a
3039   1934 11            mov a, b
3040   1935 29 83 2F      mov b, [_prog] ; $prog           
3041   1938 74            mov d, b
3042   1939 32            mov bl, [d]
3043   193A A7 00         mov bh, 0
3044   193C             ; START RELATIONAL
3045   193C D7            push a
3046   193D 11            mov a, b
3047   193E 26 7A 00      mov b, $7a
3048   1941 B0            cmp a, b
3049   1942 FD 74         sle ; <=
3050   1944 E4            pop a
3051   1945             ; END RELATIONAL
3052   1945 FD A7         sand a, b ; &&
3053   1947 E4            pop a
3054   1948 D7            push a
3055   1949 11            mov a, b
3056   194A 29 83 2F      mov b, [_prog] ; $prog           
3057   194D 74            mov d, b
3058   194E 32            mov bl, [d]
3059   194F A7 00         mov bh, 0
3060   1951             ; START RELATIONAL
3061   1951 D7            push a
3062   1952 11            mov a, b
3063   1953 26 41 00      mov b, $41
3064   1956 B0            cmp a, b
3065   1957 FD 80         sge ; >=
3066   1959 E4            pop a
3067   195A             ; END RELATIONAL
3068   195A D7            push a
3069   195B 11            mov a, b
3070   195C 29 83 2F      mov b, [_prog] ; $prog           
3071   195F 74            mov d, b
3072   1960 32            mov bl, [d]
3073   1961 A7 00         mov bh, 0
3074   1963             ; START RELATIONAL
3075   1963 D7            push a
3076   1964 11            mov a, b
3077   1965 26 5A 00      mov b, $5a
3078   1968 B0            cmp a, b
3079   1969 FD 74         sle ; <=
3080   196B E4            pop a
3081   196C             ; END RELATIONAL
3082   196C FD A7         sand a, b ; &&
3083   196E E4            pop a
3084   196F FD A8         sor a, b ; ||
3085   1971 11            mov a, b
3086   1972 29 83 2F      mov b, [_prog] ; $prog           
3087   1975 74            mov d, b
3088   1976 32            mov bl, [d]
3089   1977 A7 00         mov bh, 0
3090   1979             ; START RELATIONAL
3091   1979 D7            push a
3092   197A 11            mov a, b
3093   197B 26 30 00      mov b, $30
3094   197E B0            cmp a, b
3095   197F FD 80         sge ; >=
3096   1981 E4            pop a
3097   1982             ; END RELATIONAL
3098   1982 D7            push a
3099   1983 11            mov a, b
3100   1984 29 83 2F      mov b, [_prog] ; $prog           
3101   1987 74            mov d, b
3102   1988 32            mov bl, [d]
3103   1989 A7 00         mov bh, 0
3104   198B             ; START RELATIONAL
3105   198B D7            push a
3106   198C 11            mov a, b
3107   198D 26 39 00      mov b, $39
3108   1990 B0            cmp a, b
3109   1991 FD 74         sle ; <=
3110   1993 E4            pop a
3111   1994             ; END RELATIONAL
3112   1994 FD A7         sand a, b ; &&
3113   1996 E4            pop a
3114   1997 FD A8         sor a, b ; ||
3115   1999 11            mov a, b
3116   199A 29 83 2F      mov b, [_prog] ; $prog           
3117   199D 74            mov d, b
3118   199E 32            mov bl, [d]
3119   199F A7 00         mov bh, 0
3120   19A1             ; START RELATIONAL
3121   19A1 D7            push a
3122   19A2 11            mov a, b
3123   19A3 26 2F 00      mov b, $2f
3124   19A6 B0            cmp a, b
3125   19A7 FD 71         seq ; ==
3126   19A9 E4            pop a
3127   19AA             ; END RELATIONAL
3128   19AA FD A8         sor a, b ; ||
3129   19AC 11            mov a, b
3130   19AD 29 83 2F      mov b, [_prog] ; $prog           
3131   19B0 74            mov d, b
3132   19B1 32            mov bl, [d]
3133   19B2 A7 00         mov bh, 0
3134   19B4             ; START RELATIONAL
3135   19B4 D7            push a
3136   19B5 11            mov a, b
3137   19B6 26 5F 00      mov b, $5f
3138   19B9 B0            cmp a, b
3139   19BA FD 71         seq ; ==
3140   19BC E4            pop a
3141   19BD             ; END RELATIONAL
3142   19BD FD A8         sor a, b ; ||
3143   19BF 11            mov a, b
3144   19C0 29 83 2F      mov b, [_prog] ; $prog           
3145   19C3 74            mov d, b
3146   19C4 32            mov bl, [d]
3147   19C5 A7 00         mov bh, 0
3148   19C7             ; START RELATIONAL
3149   19C7 D7            push a
3150   19C8 11            mov a, b
3151   19C9 26 2D 00      mov b, $2d
3152   19CC B0            cmp a, b
3153   19CD FD 71         seq ; ==
3154   19CF E4            pop a
3155   19D0             ; END RELATIONAL
3156   19D0 FD A8         sor a, b ; ||
3157   19D2 11            mov a, b
3158   19D3 29 83 2F      mov b, [_prog] ; $prog           
3159   19D6 74            mov d, b
3160   19D7 32            mov bl, [d]
3161   19D8 A7 00         mov bh, 0
3162   19DA             ; START RELATIONAL
3163   19DA D7            push a
3164   19DB 11            mov a, b
3165   19DC 26 2E 00      mov b, $2e
3166   19DF B0            cmp a, b
3167   19E0 FD 71         seq ; ==
3168   19E2 E4            pop a
3169   19E3             ; END RELATIONAL
3170   19E3 FD A8         sor a, b ; ||
3171   19E5 E4            pop a
3172   19E6 C0 00 00      cmp b, 0
3173   19E9 C6 13 1A      je _while53_exit
3174   19EC             _while53_block:
3175   19EC             ;; *t++ = *prog++; 
3176   19EC 2C FF FF      mov b, [bp + -1] ; $t             
3177   19EF FD 79         mov g, b
3178   19F1 FD 77         inc b
3179   19F3 FA FF FF      lea d, [bp + -1] ; $t
3180   19F6 FD 43         mov [d], b
3181   19F8 FD 27         mov b, g
3182   19FA D8            push b
3183   19FB 29 83 2F      mov b, [_prog] ; $prog           
3184   19FE FD 79         mov g, b
3185   1A00 FD 77         inc b
3186   1A02 3B 83 2F      mov d, _prog ; $prog
3187   1A05 FD 43         mov [d], b
3188   1A07 FD 27         mov b, g
3189   1A09 74            mov d, b
3190   1A0A 32            mov bl, [d]
3191   1A0B A7 00         mov bh, 0
3192   1A0D E7            pop d
3193   1A0E FD 3E         mov [d], bl
3194   1A10 0A 23 19      jmp _while53_cond
3195   1A13             _while53_exit:
3196   1A13             ;; *t = '\0'; 
3197   1A13 2C FF FF      mov b, [bp + -1] ; $t             
3198   1A16 D8            push b
3199   1A17 26 00 00      mov b, $0
3200   1A1A E7            pop d
3201   1A1B FD 3E         mov [d], bl
3202   1A1D F9            leave
3203   1A1E 09            ret
3204   1A1F             
3205   1A1F             get:
3206   1A1F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3207   1A22             ; $t 
3208   1A22 52 02 00      sub sp, 2
3209   1A25             ;; *token = '\0'; 
3210   1A25 26 85 2F      mov b, _token_data ; $token           
3211   1A28 D8            push b
3212   1A29 26 00 00      mov b, $0
3213   1A2C E7            pop d
3214   1A2D FD 3E         mov [d], bl
3215   1A2F             ;; tok = 0; 
3216   1A2F 3B 7F 2F      mov d, _tok ; $tok         
3217   1A32 26 00 00      mov b, $0        
3218   1A35 FD 43         mov [d], b
3219   1A37             ;; toktype = 0; 
3220   1A37 3B 81 2F      mov d, _toktype ; $toktype         
3221   1A3A 26 00 00      mov b, $0        
3222   1A3D FD 43         mov [d], b
3223   1A3F             ;; t = token; 
3224   1A3F FA FF FF      lea d, [bp + -1] ; $t         
3225   1A42 26 85 2F      mov b, _token_data ; $token                   
3226   1A45 FD 43         mov [d], b
3227   1A47             ;; while(is_space(*prog)) prog++; 
3228   1A47             _while54_cond:
3229   1A47 29 83 2F      mov b, [_prog] ; $prog           
3230   1A4A 74            mov d, b
3231   1A4B 32            mov bl, [d]
3232   1A4C A7 00         mov bh, 0
3233   1A4E DD            push bl
3234   1A4F 07 A1 09      call is_space
3235   1A52 51 01 00      add sp, 1
3236   1A55 C0 00 00      cmp b, 0
3237   1A58 C6 6C 1A      je _while54_exit
3238   1A5B             _while54_block:
3239   1A5B             ;; prog++; 
3240   1A5B 29 83 2F      mov b, [_prog] ; $prog           
3241   1A5E FD 79         mov g, b
3242   1A60 FD 77         inc b
3243   1A62 3B 83 2F      mov d, _prog ; $prog
3244   1A65 FD 43         mov [d], b
3245   1A67 FD 27         mov b, g
3246   1A69 0A 47 1A      jmp _while54_cond
3247   1A6C             _while54_exit:
3248   1A6C             ;; if(*prog == '\0'){ 
3249   1A6C             _if55_cond:
3250   1A6C 29 83 2F      mov b, [_prog] ; $prog           
3251   1A6F 74            mov d, b
3252   1A70 32            mov bl, [d]
3253   1A71 A7 00         mov bh, 0
3254   1A73             ; START RELATIONAL
3255   1A73 D7            push a
3256   1A74 11            mov a, b
3257   1A75 26 00 00      mov b, $0
3258   1A78 B0            cmp a, b
3259   1A79 FD 71         seq ; ==
3260   1A7B E4            pop a
3261   1A7C             ; END RELATIONAL
3262   1A7C C0 00 00      cmp b, 0
3263   1A7F C6 8F 1A      je _if55_exit
3264   1A82             _if55_true:
3265   1A82             ;; toktype = END; 
3266   1A82 3B 81 2F      mov d, _toktype ; $toktype         
3267   1A85 26 06 00      mov b, 6; END        
3268   1A88 FD 43         mov [d], b
3269   1A8A             ;; return; 
3270   1A8A F9            leave
3271   1A8B 09            ret
3272   1A8C 0A 8F 1A      jmp _if55_exit
3273   1A8F             _if55_exit:
3274   1A8F             ;; if(is_digit(*prog)){ 
3275   1A8F             _if56_cond:
3276   1A8F 29 83 2F      mov b, [_prog] ; $prog           
3277   1A92 74            mov d, b
3278   1A93 32            mov bl, [d]
3279   1A94 A7 00         mov bh, 0
3280   1A96 DD            push bl
3281   1A97 07 E9 09      call is_digit
3282   1A9A 51 01 00      add sp, 1
3283   1A9D C0 00 00      cmp b, 0
3284   1AA0 C6 F5 1A      je _if56_else
3285   1AA3             _if56_true:
3286   1AA3             ;; while(is_digit(*prog)){ 
3287   1AA3             _while57_cond:
3288   1AA3 29 83 2F      mov b, [_prog] ; $prog           
3289   1AA6 74            mov d, b
3290   1AA7 32            mov bl, [d]
3291   1AA8 A7 00         mov bh, 0
3292   1AAA DD            push bl
3293   1AAB 07 E9 09      call is_digit
3294   1AAE 51 01 00      add sp, 1
3295   1AB1 C0 00 00      cmp b, 0
3296   1AB4 C6 DE 1A      je _while57_exit
3297   1AB7             _while57_block:
3298   1AB7             ;; *t++ = *prog++; 
3299   1AB7 2C FF FF      mov b, [bp + -1] ; $t             
3300   1ABA FD 79         mov g, b
3301   1ABC FD 77         inc b
3302   1ABE FA FF FF      lea d, [bp + -1] ; $t
3303   1AC1 FD 43         mov [d], b
3304   1AC3 FD 27         mov b, g
3305   1AC5 D8            push b
3306   1AC6 29 83 2F      mov b, [_prog] ; $prog           
3307   1AC9 FD 79         mov g, b
3308   1ACB FD 77         inc b
3309   1ACD 3B 83 2F      mov d, _prog ; $prog
3310   1AD0 FD 43         mov [d], b
3311   1AD2 FD 27         mov b, g
3312   1AD4 74            mov d, b
3313   1AD5 32            mov bl, [d]
3314   1AD6 A7 00         mov bh, 0
3315   1AD8 E7            pop d
3316   1AD9 FD 3E         mov [d], bl
3317   1ADB 0A A3 1A      jmp _while57_cond
3318   1ADE             _while57_exit:
3319   1ADE             ;; *t = '\0'; 
3320   1ADE 2C FF FF      mov b, [bp + -1] ; $t             
3321   1AE1 D8            push b
3322   1AE2 26 00 00      mov b, $0
3323   1AE5 E7            pop d
3324   1AE6 FD 3E         mov [d], bl
3325   1AE8             ;; toktype = INTEGER_CONST; 
3326   1AE8 3B 81 2F      mov d, _toktype ; $toktype         
3327   1AEB 26 04 00      mov b, 4; INTEGER_CONST        
3328   1AEE FD 43         mov [d], b
3329   1AF0             ;; return; // return to avoid *t = '\0' line at the end of function 
3330   1AF0 F9            leave
3331   1AF1 09            ret
3332   1AF2 0A D2 26      jmp _if56_exit
3333   1AF5             _if56_else:
3334   1AF5             ;; if(is_alpha(*prog)){ 
3335   1AF5             _if58_cond:
3336   1AF5 29 83 2F      mov b, [_prog] ; $prog           
3337   1AF8 74            mov d, b
3338   1AF9 32            mov bl, [d]
3339   1AFA A7 00         mov bh, 0
3340   1AFC DD            push bl
3341   1AFD 07 0F 0A      call is_alpha
3342   1B00 51 01 00      add sp, 1
3343   1B03 C0 00 00      cmp b, 0
3344   1B06 C6 6C 1B      je _if58_else
3345   1B09             _if58_true:
3346   1B09             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
3347   1B09             _while59_cond:
3348   1B09 29 83 2F      mov b, [_prog] ; $prog           
3349   1B0C 74            mov d, b
3350   1B0D 32            mov bl, [d]
3351   1B0E A7 00         mov bh, 0
3352   1B10 DD            push bl
3353   1B11 07 0F 0A      call is_alpha
3354   1B14 51 01 00      add sp, 1
3355   1B17 D7            push a
3356   1B18 11            mov a, b
3357   1B19 29 83 2F      mov b, [_prog] ; $prog           
3358   1B1C 74            mov d, b
3359   1B1D 32            mov bl, [d]
3360   1B1E A7 00         mov bh, 0
3361   1B20 DD            push bl
3362   1B21 07 E9 09      call is_digit
3363   1B24 51 01 00      add sp, 1
3364   1B27 FD A8         sor a, b ; ||
3365   1B29 E4            pop a
3366   1B2A C0 00 00      cmp b, 0
3367   1B2D C6 57 1B      je _while59_exit
3368   1B30             _while59_block:
3369   1B30             ;; *t++ = *prog++; 
3370   1B30 2C FF FF      mov b, [bp + -1] ; $t             
3371   1B33 FD 79         mov g, b
3372   1B35 FD 77         inc b
3373   1B37 FA FF FF      lea d, [bp + -1] ; $t
3374   1B3A FD 43         mov [d], b
3375   1B3C FD 27         mov b, g
3376   1B3E D8            push b
3377   1B3F 29 83 2F      mov b, [_prog] ; $prog           
3378   1B42 FD 79         mov g, b
3379   1B44 FD 77         inc b
3380   1B46 3B 83 2F      mov d, _prog ; $prog
3381   1B49 FD 43         mov [d], b
3382   1B4B FD 27         mov b, g
3383   1B4D 74            mov d, b
3384   1B4E 32            mov bl, [d]
3385   1B4F A7 00         mov bh, 0
3386   1B51 E7            pop d
3387   1B52 FD 3E         mov [d], bl
3388   1B54 0A 09 1B      jmp _while59_cond
3389   1B57             _while59_exit:
3390   1B57             ;; *t = '\0'; 
3391   1B57 2C FF FF      mov b, [bp + -1] ; $t             
3392   1B5A D8            push b
3393   1B5B 26 00 00      mov b, $0
3394   1B5E E7            pop d
3395   1B5F FD 3E         mov [d], bl
3396   1B61             ;; toktype = IDENTIFIER; 
3397   1B61 3B 81 2F      mov d, _toktype ; $toktype         
3398   1B64 26 05 00      mov b, 5; IDENTIFIER        
3399   1B67 FD 43         mov [d], b
3400   1B69 0A D2 26      jmp _if58_exit
3401   1B6C             _if58_else:
3402   1B6C             ;; if(*prog == '\"'){ 
3403   1B6C             _if60_cond:
3404   1B6C 29 83 2F      mov b, [_prog] ; $prog           
3405   1B6F 74            mov d, b
3406   1B70 32            mov bl, [d]
3407   1B71 A7 00         mov bh, 0
3408   1B73             ; START RELATIONAL
3409   1B73 D7            push a
3410   1B74 11            mov a, b
3411   1B75 26 22 00      mov b, $22
3412   1B78 B0            cmp a, b
3413   1B79 FD 71         seq ; ==
3414   1B7B E4            pop a
3415   1B7C             ; END RELATIONAL
3416   1B7C C0 00 00      cmp b, 0
3417   1B7F C6 4E 1C      je _if60_else
3418   1B82             _if60_true:
3419   1B82             ;; *t++ = '\"'; 
3420   1B82 2C FF FF      mov b, [bp + -1] ; $t             
3421   1B85 FD 79         mov g, b
3422   1B87 FD 77         inc b
3423   1B89 FA FF FF      lea d, [bp + -1] ; $t
3424   1B8C FD 43         mov [d], b
3425   1B8E FD 27         mov b, g
3426   1B90 D8            push b
3427   1B91 26 22 00      mov b, $22
3428   1B94 E7            pop d
3429   1B95 FD 3E         mov [d], bl
3430   1B97             ;; prog++; 
3431   1B97 29 83 2F      mov b, [_prog] ; $prog           
3432   1B9A FD 79         mov g, b
3433   1B9C FD 77         inc b
3434   1B9E 3B 83 2F      mov d, _prog ; $prog
3435   1BA1 FD 43         mov [d], b
3436   1BA3 FD 27         mov b, g
3437   1BA5             ;; while(*prog != '\"' && *prog){ 
3438   1BA5             _while61_cond:
3439   1BA5 29 83 2F      mov b, [_prog] ; $prog           
3440   1BA8 74            mov d, b
3441   1BA9 32            mov bl, [d]
3442   1BAA A7 00         mov bh, 0
3443   1BAC             ; START RELATIONAL
3444   1BAC D7            push a
3445   1BAD 11            mov a, b
3446   1BAE 26 22 00      mov b, $22
3447   1BB1 B0            cmp a, b
3448   1BB2 FD 72         sneq ; !=
3449   1BB4 E4            pop a
3450   1BB5             ; END RELATIONAL
3451   1BB5 D7            push a
3452   1BB6 11            mov a, b
3453   1BB7 29 83 2F      mov b, [_prog] ; $prog           
3454   1BBA 74            mov d, b
3455   1BBB 32            mov bl, [d]
3456   1BBC A7 00         mov bh, 0
3457   1BBE FD A7         sand a, b ; &&
3458   1BC0 E4            pop a
3459   1BC1 C0 00 00      cmp b, 0
3460   1BC4 C6 EE 1B      je _while61_exit
3461   1BC7             _while61_block:
3462   1BC7             ;; *t++ = *prog++; 
3463   1BC7 2C FF FF      mov b, [bp + -1] ; $t             
3464   1BCA FD 79         mov g, b
3465   1BCC FD 77         inc b
3466   1BCE FA FF FF      lea d, [bp + -1] ; $t
3467   1BD1 FD 43         mov [d], b
3468   1BD3 FD 27         mov b, g
3469   1BD5 D8            push b
3470   1BD6 29 83 2F      mov b, [_prog] ; $prog           
3471   1BD9 FD 79         mov g, b
3472   1BDB FD 77         inc b
3473   1BDD 3B 83 2F      mov d, _prog ; $prog
3474   1BE0 FD 43         mov [d], b
3475   1BE2 FD 27         mov b, g
3476   1BE4 74            mov d, b
3477   1BE5 32            mov bl, [d]
3478   1BE6 A7 00         mov bh, 0
3479   1BE8 E7            pop d
3480   1BE9 FD 3E         mov [d], bl
3481   1BEB 0A A5 1B      jmp _while61_cond
3482   1BEE             _while61_exit:
3483   1BEE             ;; if(*prog != '\"') error("Double quotes expected"); 
3484   1BEE             _if62_cond:
3485   1BEE 29 83 2F      mov b, [_prog] ; $prog           
3486   1BF1 74            mov d, b
3487   1BF2 32            mov bl, [d]
3488   1BF3 A7 00         mov bh, 0
3489   1BF5             ; START RELATIONAL
3490   1BF5 D7            push a
3491   1BF6 11            mov a, b
3492   1BF7 26 22 00      mov b, $22
3493   1BFA B0            cmp a, b
3494   1BFB FD 72         sneq ; !=
3495   1BFD E4            pop a
3496   1BFE             ; END RELATIONAL
3497   1BFE C0 00 00      cmp b, 0
3498   1C01 C6 13 1C      je _if62_exit
3499   1C04             _if62_true:
3500   1C04             ;; error("Double quotes expected"); 
3501   1C04 26 BA 38      mov b, __s13 ; "Double quotes expected"
3502   1C07 FD AB         swp b
3503   1C09 D8            push b
3504   1C0A 07 15 29      call error
3505   1C0D 51 02 00      add sp, 2
3506   1C10 0A 13 1C      jmp _if62_exit
3507   1C13             _if62_exit:
3508   1C13             ;; *t++ = '\"'; 
3509   1C13 2C FF FF      mov b, [bp + -1] ; $t             
3510   1C16 FD 79         mov g, b
3511   1C18 FD 77         inc b
3512   1C1A FA FF FF      lea d, [bp + -1] ; $t
3513   1C1D FD 43         mov [d], b
3514   1C1F FD 27         mov b, g
3515   1C21 D8            push b
3516   1C22 26 22 00      mov b, $22
3517   1C25 E7            pop d
3518   1C26 FD 3E         mov [d], bl
3519   1C28             ;; prog++; 
3520   1C28 29 83 2F      mov b, [_prog] ; $prog           
3521   1C2B FD 79         mov g, b
3522   1C2D FD 77         inc b
3523   1C2F 3B 83 2F      mov d, _prog ; $prog
3524   1C32 FD 43         mov [d], b
3525   1C34 FD 27         mov b, g
3526   1C36             ;; toktype = STRING_CONST; 
3527   1C36 3B 81 2F      mov d, _toktype ; $toktype         
3528   1C39 26 03 00      mov b, 3; STRING_CONST        
3529   1C3C FD 43         mov [d], b
3530   1C3E             ;; *t = '\0'; 
3531   1C3E 2C FF FF      mov b, [bp + -1] ; $t             
3532   1C41 D8            push b
3533   1C42 26 00 00      mov b, $0
3534   1C45 E7            pop d
3535   1C46 FD 3E         mov [d], bl
3536   1C48             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
3537   1C48 07 DE 26      call convert_constant
3538   1C4B 0A D2 26      jmp _if60_exit
3539   1C4E             _if60_else:
3540   1C4E             ;; if(*prog == '#'){ 
3541   1C4E             _if63_cond:
3542   1C4E 29 83 2F      mov b, [_prog] ; $prog           
3543   1C51 74            mov d, b
3544   1C52 32            mov bl, [d]
3545   1C53 A7 00         mov bh, 0
3546   1C55             ; START RELATIONAL
3547   1C55 D7            push a
3548   1C56 11            mov a, b
3549   1C57 26 23 00      mov b, $23
3550   1C5A B0            cmp a, b
3551   1C5B FD 71         seq ; ==
3552   1C5D E4            pop a
3553   1C5E             ; END RELATIONAL
3554   1C5E C0 00 00      cmp b, 0
3555   1C61 C6 9B 1C      je _if63_else
3556   1C64             _if63_true:
3557   1C64             ;; *t++ = *prog++; 
3558   1C64 2C FF FF      mov b, [bp + -1] ; $t             
3559   1C67 FD 79         mov g, b
3560   1C69 FD 77         inc b
3561   1C6B FA FF FF      lea d, [bp + -1] ; $t
3562   1C6E FD 43         mov [d], b
3563   1C70 FD 27         mov b, g
3564   1C72 D8            push b
3565   1C73 29 83 2F      mov b, [_prog] ; $prog           
3566   1C76 FD 79         mov g, b
3567   1C78 FD 77         inc b
3568   1C7A 3B 83 2F      mov d, _prog ; $prog
3569   1C7D FD 43         mov [d], b
3570   1C7F FD 27         mov b, g
3571   1C81 74            mov d, b
3572   1C82 32            mov bl, [d]
3573   1C83 A7 00         mov bh, 0
3574   1C85 E7            pop d
3575   1C86 FD 3E         mov [d], bl
3576   1C88             ;; tok = HASH; 
3577   1C88 3B 7F 2F      mov d, _tok ; $tok         
3578   1C8B 26 15 00      mov b, 21; HASH        
3579   1C8E FD 43         mov [d], b
3580   1C90             ;; toktype = DELIMITER;   
3581   1C90 3B 81 2F      mov d, _toktype ; $toktype         
3582   1C93 26 01 00      mov b, 1; DELIMITER        
3583   1C96 FD 43         mov [d], b
3584   1C98 0A D2 26      jmp _if63_exit
3585   1C9B             _if63_else:
3586   1C9B             ;; if(*prog == '{'){ 
3587   1C9B             _if64_cond:
3588   1C9B 29 83 2F      mov b, [_prog] ; $prog           
3589   1C9E 74            mov d, b
3590   1C9F 32            mov bl, [d]
3591   1CA0 A7 00         mov bh, 0
3592   1CA2             ; START RELATIONAL
3593   1CA2 D7            push a
3594   1CA3 11            mov a, b
3595   1CA4 26 7B 00      mov b, $7b
3596   1CA7 B0            cmp a, b
3597   1CA8 FD 71         seq ; ==
3598   1CAA E4            pop a
3599   1CAB             ; END RELATIONAL
3600   1CAB C0 00 00      cmp b, 0
3601   1CAE C6 E8 1C      je _if64_else
3602   1CB1             _if64_true:
3603   1CB1             ;; *t++ = *prog++; 
3604   1CB1 2C FF FF      mov b, [bp + -1] ; $t             
3605   1CB4 FD 79         mov g, b
3606   1CB6 FD 77         inc b
3607   1CB8 FA FF FF      lea d, [bp + -1] ; $t
3608   1CBB FD 43         mov [d], b
3609   1CBD FD 27         mov b, g
3610   1CBF D8            push b
3611   1CC0 29 83 2F      mov b, [_prog] ; $prog           
3612   1CC3 FD 79         mov g, b
3613   1CC5 FD 77         inc b
3614   1CC7 3B 83 2F      mov d, _prog ; $prog
3615   1CCA FD 43         mov [d], b
3616   1CCC FD 27         mov b, g
3617   1CCE 74            mov d, b
3618   1CCF 32            mov bl, [d]
3619   1CD0 A7 00         mov bh, 0
3620   1CD2 E7            pop d
3621   1CD3 FD 3E         mov [d], bl
3622   1CD5             ;; tok = OPENING_BRACE; 
3623   1CD5 3B 7F 2F      mov d, _tok ; $tok         
3624   1CD8 26 1E 00      mov b, 30; OPENING_BRACE        
3625   1CDB FD 43         mov [d], b
3626   1CDD             ;; toktype = DELIMITER;   
3627   1CDD 3B 81 2F      mov d, _toktype ; $toktype         
3628   1CE0 26 01 00      mov b, 1; DELIMITER        
3629   1CE3 FD 43         mov [d], b
3630   1CE5 0A D2 26      jmp _if64_exit
3631   1CE8             _if64_else:
3632   1CE8             ;; if(*prog == '}'){ 
3633   1CE8             _if65_cond:
3634   1CE8 29 83 2F      mov b, [_prog] ; $prog           
3635   1CEB 74            mov d, b
3636   1CEC 32            mov bl, [d]
3637   1CED A7 00         mov bh, 0
3638   1CEF             ; START RELATIONAL
3639   1CEF D7            push a
3640   1CF0 11            mov a, b
3641   1CF1 26 7D 00      mov b, $7d
3642   1CF4 B0            cmp a, b
3643   1CF5 FD 71         seq ; ==
3644   1CF7 E4            pop a
3645   1CF8             ; END RELATIONAL
3646   1CF8 C0 00 00      cmp b, 0
3647   1CFB C6 35 1D      je _if65_else
3648   1CFE             _if65_true:
3649   1CFE             ;; *t++ = *prog++; 
3650   1CFE 2C FF FF      mov b, [bp + -1] ; $t             
3651   1D01 FD 79         mov g, b
3652   1D03 FD 77         inc b
3653   1D05 FA FF FF      lea d, [bp + -1] ; $t
3654   1D08 FD 43         mov [d], b
3655   1D0A FD 27         mov b, g
3656   1D0C D8            push b
3657   1D0D 29 83 2F      mov b, [_prog] ; $prog           
3658   1D10 FD 79         mov g, b
3659   1D12 FD 77         inc b
3660   1D14 3B 83 2F      mov d, _prog ; $prog
3661   1D17 FD 43         mov [d], b
3662   1D19 FD 27         mov b, g
3663   1D1B 74            mov d, b
3664   1D1C 32            mov bl, [d]
3665   1D1D A7 00         mov bh, 0
3666   1D1F E7            pop d
3667   1D20 FD 3E         mov [d], bl
3668   1D22             ;; tok = CLOSING_BRACE; 
3669   1D22 3B 7F 2F      mov d, _tok ; $tok         
3670   1D25 26 1F 00      mov b, 31; CLOSING_BRACE        
3671   1D28 FD 43         mov [d], b
3672   1D2A             ;; toktype = DELIMITER;   
3673   1D2A 3B 81 2F      mov d, _toktype ; $toktype         
3674   1D2D 26 01 00      mov b, 1; DELIMITER        
3675   1D30 FD 43         mov [d], b
3676   1D32 0A D2 26      jmp _if65_exit
3677   1D35             _if65_else:
3678   1D35             ;; if(*prog == '['){ 
3679   1D35             _if66_cond:
3680   1D35 29 83 2F      mov b, [_prog] ; $prog           
3681   1D38 74            mov d, b
3682   1D39 32            mov bl, [d]
3683   1D3A A7 00         mov bh, 0
3684   1D3C             ; START RELATIONAL
3685   1D3C D7            push a
3686   1D3D 11            mov a, b
3687   1D3E 26 5B 00      mov b, $5b
3688   1D41 B0            cmp a, b
3689   1D42 FD 71         seq ; ==
3690   1D44 E4            pop a
3691   1D45             ; END RELATIONAL
3692   1D45 C0 00 00      cmp b, 0
3693   1D48 C6 82 1D      je _if66_else
3694   1D4B             _if66_true:
3695   1D4B             ;; *t++ = *prog++; 
3696   1D4B 2C FF FF      mov b, [bp + -1] ; $t             
3697   1D4E FD 79         mov g, b
3698   1D50 FD 77         inc b
3699   1D52 FA FF FF      lea d, [bp + -1] ; $t
3700   1D55 FD 43         mov [d], b
3701   1D57 FD 27         mov b, g
3702   1D59 D8            push b
3703   1D5A 29 83 2F      mov b, [_prog] ; $prog           
3704   1D5D FD 79         mov g, b
3705   1D5F FD 77         inc b
3706   1D61 3B 83 2F      mov d, _prog ; $prog
3707   1D64 FD 43         mov [d], b
3708   1D66 FD 27         mov b, g
3709   1D68 74            mov d, b
3710   1D69 32            mov bl, [d]
3711   1D6A A7 00         mov bh, 0
3712   1D6C E7            pop d
3713   1D6D FD 3E         mov [d], bl
3714   1D6F             ;; tok = OPENING_BRACKET; 
3715   1D6F 3B 7F 2F      mov d, _tok ; $tok         
3716   1D72 26 20 00      mov b, 32; OPENING_BRACKET        
3717   1D75 FD 43         mov [d], b
3718   1D77             ;; toktype = DELIMITER;   
3719   1D77 3B 81 2F      mov d, _toktype ; $toktype         
3720   1D7A 26 01 00      mov b, 1; DELIMITER        
3721   1D7D FD 43         mov [d], b
3722   1D7F 0A D2 26      jmp _if66_exit
3723   1D82             _if66_else:
3724   1D82             ;; if(*prog == ']'){ 
3725   1D82             _if67_cond:
3726   1D82 29 83 2F      mov b, [_prog] ; $prog           
3727   1D85 74            mov d, b
3728   1D86 32            mov bl, [d]
3729   1D87 A7 00         mov bh, 0
3730   1D89             ; START RELATIONAL
3731   1D89 D7            push a
3732   1D8A 11            mov a, b
3733   1D8B 26 5D 00      mov b, $5d
3734   1D8E B0            cmp a, b
3735   1D8F FD 71         seq ; ==
3736   1D91 E4            pop a
3737   1D92             ; END RELATIONAL
3738   1D92 C0 00 00      cmp b, 0
3739   1D95 C6 CF 1D      je _if67_else
3740   1D98             _if67_true:
3741   1D98             ;; *t++ = *prog++; 
3742   1D98 2C FF FF      mov b, [bp + -1] ; $t             
3743   1D9B FD 79         mov g, b
3744   1D9D FD 77         inc b
3745   1D9F FA FF FF      lea d, [bp + -1] ; $t
3746   1DA2 FD 43         mov [d], b
3747   1DA4 FD 27         mov b, g
3748   1DA6 D8            push b
3749   1DA7 29 83 2F      mov b, [_prog] ; $prog           
3750   1DAA FD 79         mov g, b
3751   1DAC FD 77         inc b
3752   1DAE 3B 83 2F      mov d, _prog ; $prog
3753   1DB1 FD 43         mov [d], b
3754   1DB3 FD 27         mov b, g
3755   1DB5 74            mov d, b
3756   1DB6 32            mov bl, [d]
3757   1DB7 A7 00         mov bh, 0
3758   1DB9 E7            pop d
3759   1DBA FD 3E         mov [d], bl
3760   1DBC             ;; tok = CLOSING_BRACKET; 
3761   1DBC 3B 7F 2F      mov d, _tok ; $tok         
3762   1DBF 26 21 00      mov b, 33; CLOSING_BRACKET        
3763   1DC2 FD 43         mov [d], b
3764   1DC4             ;; toktype = DELIMITER;   
3765   1DC4 3B 81 2F      mov d, _toktype ; $toktype         
3766   1DC7 26 01 00      mov b, 1; DELIMITER        
3767   1DCA FD 43         mov [d], b
3768   1DCC 0A D2 26      jmp _if67_exit
3769   1DCF             _if67_else:
3770   1DCF             ;; if(*prog == '='){ 
3771   1DCF             _if68_cond:
3772   1DCF 29 83 2F      mov b, [_prog] ; $prog           
3773   1DD2 74            mov d, b
3774   1DD3 32            mov bl, [d]
3775   1DD4 A7 00         mov bh, 0
3776   1DD6             ; START RELATIONAL
3777   1DD6 D7            push a
3778   1DD7 11            mov a, b
3779   1DD8 26 3D 00      mov b, $3d
3780   1DDB B0            cmp a, b
3781   1DDC FD 71         seq ; ==
3782   1DDE E4            pop a
3783   1DDF             ; END RELATIONAL
3784   1DDF C0 00 00      cmp b, 0
3785   1DE2 C6 61 1E      je _if68_else
3786   1DE5             _if68_true:
3787   1DE5             ;; *t++ = *prog++; 
3788   1DE5 2C FF FF      mov b, [bp + -1] ; $t             
3789   1DE8 FD 79         mov g, b
3790   1DEA FD 77         inc b
3791   1DEC FA FF FF      lea d, [bp + -1] ; $t
3792   1DEF FD 43         mov [d], b
3793   1DF1 FD 27         mov b, g
3794   1DF3 D8            push b
3795   1DF4 29 83 2F      mov b, [_prog] ; $prog           
3796   1DF7 FD 79         mov g, b
3797   1DF9 FD 77         inc b
3798   1DFB 3B 83 2F      mov d, _prog ; $prog
3799   1DFE FD 43         mov [d], b
3800   1E00 FD 27         mov b, g
3801   1E02 74            mov d, b
3802   1E03 32            mov bl, [d]
3803   1E04 A7 00         mov bh, 0
3804   1E06 E7            pop d
3805   1E07 FD 3E         mov [d], bl
3806   1E09             ;; if (*prog == '='){ 
3807   1E09             _if69_cond:
3808   1E09 29 83 2F      mov b, [_prog] ; $prog           
3809   1E0C 74            mov d, b
3810   1E0D 32            mov bl, [d]
3811   1E0E A7 00         mov bh, 0
3812   1E10             ; START RELATIONAL
3813   1E10 D7            push a
3814   1E11 11            mov a, b
3815   1E12 26 3D 00      mov b, $3d
3816   1E15 B0            cmp a, b
3817   1E16 FD 71         seq ; ==
3818   1E18 E4            pop a
3819   1E19             ; END RELATIONAL
3820   1E19 C0 00 00      cmp b, 0
3821   1E1C C6 4E 1E      je _if69_else
3822   1E1F             _if69_true:
3823   1E1F             ;; *t++ = *prog++; 
3824   1E1F 2C FF FF      mov b, [bp + -1] ; $t             
3825   1E22 FD 79         mov g, b
3826   1E24 FD 77         inc b
3827   1E26 FA FF FF      lea d, [bp + -1] ; $t
3828   1E29 FD 43         mov [d], b
3829   1E2B FD 27         mov b, g
3830   1E2D D8            push b
3831   1E2E 29 83 2F      mov b, [_prog] ; $prog           
3832   1E31 FD 79         mov g, b
3833   1E33 FD 77         inc b
3834   1E35 3B 83 2F      mov d, _prog ; $prog
3835   1E38 FD 43         mov [d], b
3836   1E3A FD 27         mov b, g
3837   1E3C 74            mov d, b
3838   1E3D 32            mov bl, [d]
3839   1E3E A7 00         mov bh, 0
3840   1E40 E7            pop d
3841   1E41 FD 3E         mov [d], bl
3842   1E43             ;; tok = EQUAL; 
3843   1E43 3B 7F 2F      mov d, _tok ; $tok         
3844   1E46 26 08 00      mov b, 8; EQUAL        
3845   1E49 FD 43         mov [d], b
3846   1E4B 0A 56 1E      jmp _if69_exit
3847   1E4E             _if69_else:
3848   1E4E             ;; tok = ASSIGNMENT; 
3849   1E4E 3B 7F 2F      mov d, _tok ; $tok         
3850   1E51 26 11 00      mov b, 17; ASSIGNMENT        
3851   1E54 FD 43         mov [d], b
3852   1E56             _if69_exit:
3853   1E56             ;; toktype = DELIMITER;   
3854   1E56 3B 81 2F      mov d, _toktype ; $toktype         
3855   1E59 26 01 00      mov b, 1; DELIMITER        
3856   1E5C FD 43         mov [d], b
3857   1E5E 0A D2 26      jmp _if68_exit
3858   1E61             _if68_else:
3859   1E61             ;; if(*prog == '&'){ 
3860   1E61             _if70_cond:
3861   1E61 29 83 2F      mov b, [_prog] ; $prog           
3862   1E64 74            mov d, b
3863   1E65 32            mov bl, [d]
3864   1E66 A7 00         mov bh, 0
3865   1E68             ; START RELATIONAL
3866   1E68 D7            push a
3867   1E69 11            mov a, b
3868   1E6A 26 26 00      mov b, $26
3869   1E6D B0            cmp a, b
3870   1E6E FD 71         seq ; ==
3871   1E70 E4            pop a
3872   1E71             ; END RELATIONAL
3873   1E71 C0 00 00      cmp b, 0
3874   1E74 C6 F3 1E      je _if70_else
3875   1E77             _if70_true:
3876   1E77             ;; *t++ = *prog++; 
3877   1E77 2C FF FF      mov b, [bp + -1] ; $t             
3878   1E7A FD 79         mov g, b
3879   1E7C FD 77         inc b
3880   1E7E FA FF FF      lea d, [bp + -1] ; $t
3881   1E81 FD 43         mov [d], b
3882   1E83 FD 27         mov b, g
3883   1E85 D8            push b
3884   1E86 29 83 2F      mov b, [_prog] ; $prog           
3885   1E89 FD 79         mov g, b
3886   1E8B FD 77         inc b
3887   1E8D 3B 83 2F      mov d, _prog ; $prog
3888   1E90 FD 43         mov [d], b
3889   1E92 FD 27         mov b, g
3890   1E94 74            mov d, b
3891   1E95 32            mov bl, [d]
3892   1E96 A7 00         mov bh, 0
3893   1E98 E7            pop d
3894   1E99 FD 3E         mov [d], bl
3895   1E9B             ;; if(*prog == '&'){ 
3896   1E9B             _if71_cond:
3897   1E9B 29 83 2F      mov b, [_prog] ; $prog           
3898   1E9E 74            mov d, b
3899   1E9F 32            mov bl, [d]
3900   1EA0 A7 00         mov bh, 0
3901   1EA2             ; START RELATIONAL
3902   1EA2 D7            push a
3903   1EA3 11            mov a, b
3904   1EA4 26 26 00      mov b, $26
3905   1EA7 B0            cmp a, b
3906   1EA8 FD 71         seq ; ==
3907   1EAA E4            pop a
3908   1EAB             ; END RELATIONAL
3909   1EAB C0 00 00      cmp b, 0
3910   1EAE C6 E0 1E      je _if71_else
3911   1EB1             _if71_true:
3912   1EB1             ;; *t++ = *prog++; 
3913   1EB1 2C FF FF      mov b, [bp + -1] ; $t             
3914   1EB4 FD 79         mov g, b
3915   1EB6 FD 77         inc b
3916   1EB8 FA FF FF      lea d, [bp + -1] ; $t
3917   1EBB FD 43         mov [d], b
3918   1EBD FD 27         mov b, g
3919   1EBF D8            push b
3920   1EC0 29 83 2F      mov b, [_prog] ; $prog           
3921   1EC3 FD 79         mov g, b
3922   1EC5 FD 77         inc b
3923   1EC7 3B 83 2F      mov d, _prog ; $prog
3924   1ECA FD 43         mov [d], b
3925   1ECC FD 27         mov b, g
3926   1ECE 74            mov d, b
3927   1ECF 32            mov bl, [d]
3928   1ED0 A7 00         mov bh, 0
3929   1ED2 E7            pop d
3930   1ED3 FD 3E         mov [d], bl
3931   1ED5             ;; tok = LOGICAL_AND; 
3932   1ED5 3B 7F 2F      mov d, _tok ; $tok         
3933   1ED8 26 0E 00      mov b, 14; LOGICAL_AND        
3934   1EDB FD 43         mov [d], b
3935   1EDD 0A E8 1E      jmp _if71_exit
3936   1EE0             _if71_else:
3937   1EE0             ;; tok = AMPERSAND; 
3938   1EE0 3B 7F 2F      mov d, _tok ; $tok         
3939   1EE3 26 16 00      mov b, 22; AMPERSAND        
3940   1EE6 FD 43         mov [d], b
3941   1EE8             _if71_exit:
3942   1EE8             ;; toktype = DELIMITER;   
3943   1EE8 3B 81 2F      mov d, _toktype ; $toktype         
3944   1EEB 26 01 00      mov b, 1; DELIMITER        
3945   1EEE FD 43         mov [d], b
3946   1EF0 0A D2 26      jmp _if70_exit
3947   1EF3             _if70_else:
3948   1EF3             ;; if(*prog == '|'){ 
3949   1EF3             _if72_cond:
3950   1EF3 29 83 2F      mov b, [_prog] ; $prog           
3951   1EF6 74            mov d, b
3952   1EF7 32            mov bl, [d]
3953   1EF8 A7 00         mov bh, 0
3954   1EFA             ; START RELATIONAL
3955   1EFA D7            push a
3956   1EFB 11            mov a, b
3957   1EFC 26 7C 00      mov b, $7c
3958   1EFF B0            cmp a, b
3959   1F00 FD 71         seq ; ==
3960   1F02 E4            pop a
3961   1F03             ; END RELATIONAL
3962   1F03 C0 00 00      cmp b, 0
3963   1F06 C6 85 1F      je _if72_else
3964   1F09             _if72_true:
3965   1F09             ;; *t++ = *prog++; 
3966   1F09 2C FF FF      mov b, [bp + -1] ; $t             
3967   1F0C FD 79         mov g, b
3968   1F0E FD 77         inc b
3969   1F10 FA FF FF      lea d, [bp + -1] ; $t
3970   1F13 FD 43         mov [d], b
3971   1F15 FD 27         mov b, g
3972   1F17 D8            push b
3973   1F18 29 83 2F      mov b, [_prog] ; $prog           
3974   1F1B FD 79         mov g, b
3975   1F1D FD 77         inc b
3976   1F1F 3B 83 2F      mov d, _prog ; $prog
3977   1F22 FD 43         mov [d], b
3978   1F24 FD 27         mov b, g
3979   1F26 74            mov d, b
3980   1F27 32            mov bl, [d]
3981   1F28 A7 00         mov bh, 0
3982   1F2A E7            pop d
3983   1F2B FD 3E         mov [d], bl
3984   1F2D             ;; if (*prog == '|'){ 
3985   1F2D             _if73_cond:
3986   1F2D 29 83 2F      mov b, [_prog] ; $prog           
3987   1F30 74            mov d, b
3988   1F31 32            mov bl, [d]
3989   1F32 A7 00         mov bh, 0
3990   1F34             ; START RELATIONAL
3991   1F34 D7            push a
3992   1F35 11            mov a, b
3993   1F36 26 7C 00      mov b, $7c
3994   1F39 B0            cmp a, b
3995   1F3A FD 71         seq ; ==
3996   1F3C E4            pop a
3997   1F3D             ; END RELATIONAL
3998   1F3D C0 00 00      cmp b, 0
3999   1F40 C6 72 1F      je _if73_else
4000   1F43             _if73_true:
4001   1F43             ;; *t++ = *prog++; 
4002   1F43 2C FF FF      mov b, [bp + -1] ; $t             
4003   1F46 FD 79         mov g, b
4004   1F48 FD 77         inc b
4005   1F4A FA FF FF      lea d, [bp + -1] ; $t
4006   1F4D FD 43         mov [d], b
4007   1F4F FD 27         mov b, g
4008   1F51 D8            push b
4009   1F52 29 83 2F      mov b, [_prog] ; $prog           
4010   1F55 FD 79         mov g, b
4011   1F57 FD 77         inc b
4012   1F59 3B 83 2F      mov d, _prog ; $prog
4013   1F5C FD 43         mov [d], b
4014   1F5E FD 27         mov b, g
4015   1F60 74            mov d, b
4016   1F61 32            mov bl, [d]
4017   1F62 A7 00         mov bh, 0
4018   1F64 E7            pop d
4019   1F65 FD 3E         mov [d], bl
4020   1F67             ;; tok = LOGICAL_OR; 
4021   1F67 3B 7F 2F      mov d, _tok ; $tok         
4022   1F6A 26 0F 00      mov b, 15; LOGICAL_OR        
4023   1F6D FD 43         mov [d], b
4024   1F6F 0A 7A 1F      jmp _if73_exit
4025   1F72             _if73_else:
4026   1F72             ;; tok = BITWISE_OR; 
4027   1F72 3B 7F 2F      mov d, _tok ; $tok         
4028   1F75 26 18 00      mov b, 24; BITWISE_OR        
4029   1F78 FD 43         mov [d], b
4030   1F7A             _if73_exit:
4031   1F7A             ;; toktype = DELIMITER;   
4032   1F7A 3B 81 2F      mov d, _toktype ; $toktype         
4033   1F7D 26 01 00      mov b, 1; DELIMITER        
4034   1F80 FD 43         mov [d], b
4035   1F82 0A D2 26      jmp _if72_exit
4036   1F85             _if72_else:
4037   1F85             ;; if(*prog == '~'){ 
4038   1F85             _if74_cond:
4039   1F85 29 83 2F      mov b, [_prog] ; $prog           
4040   1F88 74            mov d, b
4041   1F89 32            mov bl, [d]
4042   1F8A A7 00         mov bh, 0
4043   1F8C             ; START RELATIONAL
4044   1F8C D7            push a
4045   1F8D 11            mov a, b
4046   1F8E 26 7E 00      mov b, $7e
4047   1F91 B0            cmp a, b
4048   1F92 FD 71         seq ; ==
4049   1F94 E4            pop a
4050   1F95             ; END RELATIONAL
4051   1F95 C0 00 00      cmp b, 0
4052   1F98 C6 D2 1F      je _if74_else
4053   1F9B             _if74_true:
4054   1F9B             ;; *t++ = *prog++; 
4055   1F9B 2C FF FF      mov b, [bp + -1] ; $t             
4056   1F9E FD 79         mov g, b
4057   1FA0 FD 77         inc b
4058   1FA2 FA FF FF      lea d, [bp + -1] ; $t
4059   1FA5 FD 43         mov [d], b
4060   1FA7 FD 27         mov b, g
4061   1FA9 D8            push b
4062   1FAA 29 83 2F      mov b, [_prog] ; $prog           
4063   1FAD FD 79         mov g, b
4064   1FAF FD 77         inc b
4065   1FB1 3B 83 2F      mov d, _prog ; $prog
4066   1FB4 FD 43         mov [d], b
4067   1FB6 FD 27         mov b, g
4068   1FB8 74            mov d, b
4069   1FB9 32            mov bl, [d]
4070   1FBA A7 00         mov bh, 0
4071   1FBC E7            pop d
4072   1FBD FD 3E         mov [d], bl
4073   1FBF             ;; tok = BITWISE_NOT; 
4074   1FBF 3B 7F 2F      mov d, _tok ; $tok         
4075   1FC2 26 19 00      mov b, 25; BITWISE_NOT        
4076   1FC5 FD 43         mov [d], b
4077   1FC7             ;; toktype = DELIMITER;   
4078   1FC7 3B 81 2F      mov d, _toktype ; $toktype         
4079   1FCA 26 01 00      mov b, 1; DELIMITER        
4080   1FCD FD 43         mov [d], b
4081   1FCF 0A D2 26      jmp _if74_exit
4082   1FD2             _if74_else:
4083   1FD2             ;; if(*prog == '<'){ 
4084   1FD2             _if75_cond:
4085   1FD2 29 83 2F      mov b, [_prog] ; $prog           
4086   1FD5 74            mov d, b
4087   1FD6 32            mov bl, [d]
4088   1FD7 A7 00         mov bh, 0
4089   1FD9             ; START RELATIONAL
4090   1FD9 D7            push a
4091   1FDA 11            mov a, b
4092   1FDB 26 3C 00      mov b, $3c
4093   1FDE B0            cmp a, b
4094   1FDF FD 71         seq ; ==
4095   1FE1 E4            pop a
4096   1FE2             ; END RELATIONAL
4097   1FE2 C0 00 00      cmp b, 0
4098   1FE5 C6 A9 20      je _if75_else
4099   1FE8             _if75_true:
4100   1FE8             ;; *t++ = *prog++; 
4101   1FE8 2C FF FF      mov b, [bp + -1] ; $t             
4102   1FEB FD 79         mov g, b
4103   1FED FD 77         inc b
4104   1FEF FA FF FF      lea d, [bp + -1] ; $t
4105   1FF2 FD 43         mov [d], b
4106   1FF4 FD 27         mov b, g
4107   1FF6 D8            push b
4108   1FF7 29 83 2F      mov b, [_prog] ; $prog           
4109   1FFA FD 79         mov g, b
4110   1FFC FD 77         inc b
4111   1FFE 3B 83 2F      mov d, _prog ; $prog
4112   2001 FD 43         mov [d], b
4113   2003 FD 27         mov b, g
4114   2005 74            mov d, b
4115   2006 32            mov bl, [d]
4116   2007 A7 00         mov bh, 0
4117   2009 E7            pop d
4118   200A FD 3E         mov [d], bl
4119   200C             ;; if (*prog == '='){ 
4120   200C             _if76_cond:
4121   200C 29 83 2F      mov b, [_prog] ; $prog           
4122   200F 74            mov d, b
4123   2010 32            mov bl, [d]
4124   2011 A7 00         mov bh, 0
4125   2013             ; START RELATIONAL
4126   2013 D7            push a
4127   2014 11            mov a, b
4128   2015 26 3D 00      mov b, $3d
4129   2018 B0            cmp a, b
4130   2019 FD 71         seq ; ==
4131   201B E4            pop a
4132   201C             ; END RELATIONAL
4133   201C C0 00 00      cmp b, 0
4134   201F C6 51 20      je _if76_else
4135   2022             _if76_true:
4136   2022             ;; *t++ = *prog++; 
4137   2022 2C FF FF      mov b, [bp + -1] ; $t             
4138   2025 FD 79         mov g, b
4139   2027 FD 77         inc b
4140   2029 FA FF FF      lea d, [bp + -1] ; $t
4141   202C FD 43         mov [d], b
4142   202E FD 27         mov b, g
4143   2030 D8            push b
4144   2031 29 83 2F      mov b, [_prog] ; $prog           
4145   2034 FD 79         mov g, b
4146   2036 FD 77         inc b
4147   2038 3B 83 2F      mov d, _prog ; $prog
4148   203B FD 43         mov [d], b
4149   203D FD 27         mov b, g
4150   203F 74            mov d, b
4151   2040 32            mov bl, [d]
4152   2041 A7 00         mov bh, 0
4153   2043 E7            pop d
4154   2044 FD 3E         mov [d], bl
4155   2046             ;; tok = LESS_THAN_OR_EQUAL; 
4156   2046 3B 7F 2F      mov d, _tok ; $tok         
4157   2049 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL        
4158   204C FD 43         mov [d], b
4159   204E 0A 9E 20      jmp _if76_exit
4160   2051             _if76_else:
4161   2051             ;; if (*prog == '<'){ 
4162   2051             _if77_cond:
4163   2051 29 83 2F      mov b, [_prog] ; $prog           
4164   2054 74            mov d, b
4165   2055 32            mov bl, [d]
4166   2056 A7 00         mov bh, 0
4167   2058             ; START RELATIONAL
4168   2058 D7            push a
4169   2059 11            mov a, b
4170   205A 26 3C 00      mov b, $3c
4171   205D B0            cmp a, b
4172   205E FD 71         seq ; ==
4173   2060 E4            pop a
4174   2061             ; END RELATIONAL
4175   2061 C0 00 00      cmp b, 0
4176   2064 C6 96 20      je _if77_else
4177   2067             _if77_true:
4178   2067             ;; *t++ = *prog++; 
4179   2067 2C FF FF      mov b, [bp + -1] ; $t             
4180   206A FD 79         mov g, b
4181   206C FD 77         inc b
4182   206E FA FF FF      lea d, [bp + -1] ; $t
4183   2071 FD 43         mov [d], b
4184   2073 FD 27         mov b, g
4185   2075 D8            push b
4186   2076 29 83 2F      mov b, [_prog] ; $prog           
4187   2079 FD 79         mov g, b
4188   207B FD 77         inc b
4189   207D 3B 83 2F      mov d, _prog ; $prog
4190   2080 FD 43         mov [d], b
4191   2082 FD 27         mov b, g
4192   2084 74            mov d, b
4193   2085 32            mov bl, [d]
4194   2086 A7 00         mov bh, 0
4195   2088 E7            pop d
4196   2089 FD 3E         mov [d], bl
4197   208B             ;; tok = BITWISE_SHL; 
4198   208B 3B 7F 2F      mov d, _tok ; $tok         
4199   208E 26 1A 00      mov b, 26; BITWISE_SHL        
4200   2091 FD 43         mov [d], b
4201   2093 0A 9E 20      jmp _if77_exit
4202   2096             _if77_else:
4203   2096             ;; tok = LESS_THAN; 
4204   2096 3B 7F 2F      mov d, _tok ; $tok         
4205   2099 26 0A 00      mov b, 10; LESS_THAN        
4206   209C FD 43         mov [d], b
4207   209E             _if77_exit:
4208   209E             _if76_exit:
4209   209E             ;; toktype = DELIMITER;   
4210   209E 3B 81 2F      mov d, _toktype ; $toktype         
4211   20A1 26 01 00      mov b, 1; DELIMITER        
4212   20A4 FD 43         mov [d], b
4213   20A6 0A D2 26      jmp _if75_exit
4214   20A9             _if75_else:
4215   20A9             ;; if(*prog == '>'){ 
4216   20A9             _if78_cond:
4217   20A9 29 83 2F      mov b, [_prog] ; $prog           
4218   20AC 74            mov d, b
4219   20AD 32            mov bl, [d]
4220   20AE A7 00         mov bh, 0
4221   20B0             ; START RELATIONAL
4222   20B0 D7            push a
4223   20B1 11            mov a, b
4224   20B2 26 3E 00      mov b, $3e
4225   20B5 B0            cmp a, b
4226   20B6 FD 71         seq ; ==
4227   20B8 E4            pop a
4228   20B9             ; END RELATIONAL
4229   20B9 C0 00 00      cmp b, 0
4230   20BC C6 80 21      je _if78_else
4231   20BF             _if78_true:
4232   20BF             ;; *t++ = *prog++; 
4233   20BF 2C FF FF      mov b, [bp + -1] ; $t             
4234   20C2 FD 79         mov g, b
4235   20C4 FD 77         inc b
4236   20C6 FA FF FF      lea d, [bp + -1] ; $t
4237   20C9 FD 43         mov [d], b
4238   20CB FD 27         mov b, g
4239   20CD D8            push b
4240   20CE 29 83 2F      mov b, [_prog] ; $prog           
4241   20D1 FD 79         mov g, b
4242   20D3 FD 77         inc b
4243   20D5 3B 83 2F      mov d, _prog ; $prog
4244   20D8 FD 43         mov [d], b
4245   20DA FD 27         mov b, g
4246   20DC 74            mov d, b
4247   20DD 32            mov bl, [d]
4248   20DE A7 00         mov bh, 0
4249   20E0 E7            pop d
4250   20E1 FD 3E         mov [d], bl
4251   20E3             ;; if (*prog == '='){ 
4252   20E3             _if79_cond:
4253   20E3 29 83 2F      mov b, [_prog] ; $prog           
4254   20E6 74            mov d, b
4255   20E7 32            mov bl, [d]
4256   20E8 A7 00         mov bh, 0
4257   20EA             ; START RELATIONAL
4258   20EA D7            push a
4259   20EB 11            mov a, b
4260   20EC 26 3D 00      mov b, $3d
4261   20EF B0            cmp a, b
4262   20F0 FD 71         seq ; ==
4263   20F2 E4            pop a
4264   20F3             ; END RELATIONAL
4265   20F3 C0 00 00      cmp b, 0
4266   20F6 C6 28 21      je _if79_else
4267   20F9             _if79_true:
4268   20F9             ;; *t++ = *prog++; 
4269   20F9 2C FF FF      mov b, [bp + -1] ; $t             
4270   20FC FD 79         mov g, b
4271   20FE FD 77         inc b
4272   2100 FA FF FF      lea d, [bp + -1] ; $t
4273   2103 FD 43         mov [d], b
4274   2105 FD 27         mov b, g
4275   2107 D8            push b
4276   2108 29 83 2F      mov b, [_prog] ; $prog           
4277   210B FD 79         mov g, b
4278   210D FD 77         inc b
4279   210F 3B 83 2F      mov d, _prog ; $prog
4280   2112 FD 43         mov [d], b
4281   2114 FD 27         mov b, g
4282   2116 74            mov d, b
4283   2117 32            mov bl, [d]
4284   2118 A7 00         mov bh, 0
4285   211A E7            pop d
4286   211B FD 3E         mov [d], bl
4287   211D             ;; tok = GREATER_THAN_OR_EQUAL; 
4288   211D 3B 7F 2F      mov d, _tok ; $tok         
4289   2120 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL        
4290   2123 FD 43         mov [d], b
4291   2125 0A 75 21      jmp _if79_exit
4292   2128             _if79_else:
4293   2128             ;; if (*prog == '>'){ 
4294   2128             _if80_cond:
4295   2128 29 83 2F      mov b, [_prog] ; $prog           
4296   212B 74            mov d, b
4297   212C 32            mov bl, [d]
4298   212D A7 00         mov bh, 0
4299   212F             ; START RELATIONAL
4300   212F D7            push a
4301   2130 11            mov a, b
4302   2131 26 3E 00      mov b, $3e
4303   2134 B0            cmp a, b
4304   2135 FD 71         seq ; ==
4305   2137 E4            pop a
4306   2138             ; END RELATIONAL
4307   2138 C0 00 00      cmp b, 0
4308   213B C6 6D 21      je _if80_else
4309   213E             _if80_true:
4310   213E             ;; *t++ = *prog++; 
4311   213E 2C FF FF      mov b, [bp + -1] ; $t             
4312   2141 FD 79         mov g, b
4313   2143 FD 77         inc b
4314   2145 FA FF FF      lea d, [bp + -1] ; $t
4315   2148 FD 43         mov [d], b
4316   214A FD 27         mov b, g
4317   214C D8            push b
4318   214D 29 83 2F      mov b, [_prog] ; $prog           
4319   2150 FD 79         mov g, b
4320   2152 FD 77         inc b
4321   2154 3B 83 2F      mov d, _prog ; $prog
4322   2157 FD 43         mov [d], b
4323   2159 FD 27         mov b, g
4324   215B 74            mov d, b
4325   215C 32            mov bl, [d]
4326   215D A7 00         mov bh, 0
4327   215F E7            pop d
4328   2160 FD 3E         mov [d], bl
4329   2162             ;; tok = BITWISE_SHR; 
4330   2162 3B 7F 2F      mov d, _tok ; $tok         
4331   2165 26 1B 00      mov b, 27; BITWISE_SHR        
4332   2168 FD 43         mov [d], b
4333   216A 0A 75 21      jmp _if80_exit
4334   216D             _if80_else:
4335   216D             ;; tok = GREATER_THAN; 
4336   216D 3B 7F 2F      mov d, _tok ; $tok         
4337   2170 26 0C 00      mov b, 12; GREATER_THAN        
4338   2173 FD 43         mov [d], b
4339   2175             _if80_exit:
4340   2175             _if79_exit:
4341   2175             ;; toktype = DELIMITER;   
4342   2175 3B 81 2F      mov d, _toktype ; $toktype         
4343   2178 26 01 00      mov b, 1; DELIMITER        
4344   217B FD 43         mov [d], b
4345   217D 0A D2 26      jmp _if78_exit
4346   2180             _if78_else:
4347   2180             ;; if(*prog == '!'){ 
4348   2180             _if81_cond:
4349   2180 29 83 2F      mov b, [_prog] ; $prog           
4350   2183 74            mov d, b
4351   2184 32            mov bl, [d]
4352   2185 A7 00         mov bh, 0
4353   2187             ; START RELATIONAL
4354   2187 D7            push a
4355   2188 11            mov a, b
4356   2189 26 21 00      mov b, $21
4357   218C B0            cmp a, b
4358   218D FD 71         seq ; ==
4359   218F E4            pop a
4360   2190             ; END RELATIONAL
4361   2190 C0 00 00      cmp b, 0
4362   2193 C6 12 22      je _if81_else
4363   2196             _if81_true:
4364   2196             ;; *t++ = *prog++; 
4365   2196 2C FF FF      mov b, [bp + -1] ; $t             
4366   2199 FD 79         mov g, b
4367   219B FD 77         inc b
4368   219D FA FF FF      lea d, [bp + -1] ; $t
4369   21A0 FD 43         mov [d], b
4370   21A2 FD 27         mov b, g
4371   21A4 D8            push b
4372   21A5 29 83 2F      mov b, [_prog] ; $prog           
4373   21A8 FD 79         mov g, b
4374   21AA FD 77         inc b
4375   21AC 3B 83 2F      mov d, _prog ; $prog
4376   21AF FD 43         mov [d], b
4377   21B1 FD 27         mov b, g
4378   21B3 74            mov d, b
4379   21B4 32            mov bl, [d]
4380   21B5 A7 00         mov bh, 0
4381   21B7 E7            pop d
4382   21B8 FD 3E         mov [d], bl
4383   21BA             ;; if(*prog == '='){ 
4384   21BA             _if82_cond:
4385   21BA 29 83 2F      mov b, [_prog] ; $prog           
4386   21BD 74            mov d, b
4387   21BE 32            mov bl, [d]
4388   21BF A7 00         mov bh, 0
4389   21C1             ; START RELATIONAL
4390   21C1 D7            push a
4391   21C2 11            mov a, b
4392   21C3 26 3D 00      mov b, $3d
4393   21C6 B0            cmp a, b
4394   21C7 FD 71         seq ; ==
4395   21C9 E4            pop a
4396   21CA             ; END RELATIONAL
4397   21CA C0 00 00      cmp b, 0
4398   21CD C6 FF 21      je _if82_else
4399   21D0             _if82_true:
4400   21D0             ;; *t++ = *prog++; 
4401   21D0 2C FF FF      mov b, [bp + -1] ; $t             
4402   21D3 FD 79         mov g, b
4403   21D5 FD 77         inc b
4404   21D7 FA FF FF      lea d, [bp + -1] ; $t
4405   21DA FD 43         mov [d], b
4406   21DC FD 27         mov b, g
4407   21DE D8            push b
4408   21DF 29 83 2F      mov b, [_prog] ; $prog           
4409   21E2 FD 79         mov g, b
4410   21E4 FD 77         inc b
4411   21E6 3B 83 2F      mov d, _prog ; $prog
4412   21E9 FD 43         mov [d], b
4413   21EB FD 27         mov b, g
4414   21ED 74            mov d, b
4415   21EE 32            mov bl, [d]
4416   21EF A7 00         mov bh, 0
4417   21F1 E7            pop d
4418   21F2 FD 3E         mov [d], bl
4419   21F4             ;; tok = NOT_EQUAL; 
4420   21F4 3B 7F 2F      mov d, _tok ; $tok         
4421   21F7 26 09 00      mov b, 9; NOT_EQUAL        
4422   21FA FD 43         mov [d], b
4423   21FC 0A 07 22      jmp _if82_exit
4424   21FF             _if82_else:
4425   21FF             ;; tok = LOGICAL_NOT; 
4426   21FF 3B 7F 2F      mov d, _tok ; $tok         
4427   2202 26 10 00      mov b, 16; LOGICAL_NOT        
4428   2205 FD 43         mov [d], b
4429   2207             _if82_exit:
4430   2207             ;; toktype = DELIMITER;   
4431   2207 3B 81 2F      mov d, _toktype ; $toktype         
4432   220A 26 01 00      mov b, 1; DELIMITER        
4433   220D FD 43         mov [d], b
4434   220F 0A D2 26      jmp _if81_exit
4435   2212             _if81_else:
4436   2212             ;; if(*prog == '+'){ 
4437   2212             _if83_cond:
4438   2212 29 83 2F      mov b, [_prog] ; $prog           
4439   2215 74            mov d, b
4440   2216 32            mov bl, [d]
4441   2217 A7 00         mov bh, 0
4442   2219             ; START RELATIONAL
4443   2219 D7            push a
4444   221A 11            mov a, b
4445   221B 26 2B 00      mov b, $2b
4446   221E B0            cmp a, b
4447   221F FD 71         seq ; ==
4448   2221 E4            pop a
4449   2222             ; END RELATIONAL
4450   2222 C0 00 00      cmp b, 0
4451   2225 C6 A4 22      je _if83_else
4452   2228             _if83_true:
4453   2228             ;; *t++ = *prog++; 
4454   2228 2C FF FF      mov b, [bp + -1] ; $t             
4455   222B FD 79         mov g, b
4456   222D FD 77         inc b
4457   222F FA FF FF      lea d, [bp + -1] ; $t
4458   2232 FD 43         mov [d], b
4459   2234 FD 27         mov b, g
4460   2236 D8            push b
4461   2237 29 83 2F      mov b, [_prog] ; $prog           
4462   223A FD 79         mov g, b
4463   223C FD 77         inc b
4464   223E 3B 83 2F      mov d, _prog ; $prog
4465   2241 FD 43         mov [d], b
4466   2243 FD 27         mov b, g
4467   2245 74            mov d, b
4468   2246 32            mov bl, [d]
4469   2247 A7 00         mov bh, 0
4470   2249 E7            pop d
4471   224A FD 3E         mov [d], bl
4472   224C             ;; if(*prog == '+'){ 
4473   224C             _if84_cond:
4474   224C 29 83 2F      mov b, [_prog] ; $prog           
4475   224F 74            mov d, b
4476   2250 32            mov bl, [d]
4477   2251 A7 00         mov bh, 0
4478   2253             ; START RELATIONAL
4479   2253 D7            push a
4480   2254 11            mov a, b
4481   2255 26 2B 00      mov b, $2b
4482   2258 B0            cmp a, b
4483   2259 FD 71         seq ; ==
4484   225B E4            pop a
4485   225C             ; END RELATIONAL
4486   225C C0 00 00      cmp b, 0
4487   225F C6 91 22      je _if84_else
4488   2262             _if84_true:
4489   2262             ;; *t++ = *prog++; 
4490   2262 2C FF FF      mov b, [bp + -1] ; $t             
4491   2265 FD 79         mov g, b
4492   2267 FD 77         inc b
4493   2269 FA FF FF      lea d, [bp + -1] ; $t
4494   226C FD 43         mov [d], b
4495   226E FD 27         mov b, g
4496   2270 D8            push b
4497   2271 29 83 2F      mov b, [_prog] ; $prog           
4498   2274 FD 79         mov g, b
4499   2276 FD 77         inc b
4500   2278 3B 83 2F      mov d, _prog ; $prog
4501   227B FD 43         mov [d], b
4502   227D FD 27         mov b, g
4503   227F 74            mov d, b
4504   2280 32            mov bl, [d]
4505   2281 A7 00         mov bh, 0
4506   2283 E7            pop d
4507   2284 FD 3E         mov [d], bl
4508   2286             ;; tok = INCREMENT; 
4509   2286 3B 7F 2F      mov d, _tok ; $tok         
4510   2289 26 05 00      mov b, 5; INCREMENT        
4511   228C FD 43         mov [d], b
4512   228E 0A 99 22      jmp _if84_exit
4513   2291             _if84_else:
4514   2291             ;; tok = PLUS; 
4515   2291 3B 7F 2F      mov d, _tok ; $tok         
4516   2294 26 01 00      mov b, 1; PLUS        
4517   2297 FD 43         mov [d], b
4518   2299             _if84_exit:
4519   2299             ;; toktype = DELIMITER;   
4520   2299 3B 81 2F      mov d, _toktype ; $toktype         
4521   229C 26 01 00      mov b, 1; DELIMITER        
4522   229F FD 43         mov [d], b
4523   22A1 0A D2 26      jmp _if83_exit
4524   22A4             _if83_else:
4525   22A4             ;; if(*prog == '-'){ 
4526   22A4             _if85_cond:
4527   22A4 29 83 2F      mov b, [_prog] ; $prog           
4528   22A7 74            mov d, b
4529   22A8 32            mov bl, [d]
4530   22A9 A7 00         mov bh, 0
4531   22AB             ; START RELATIONAL
4532   22AB D7            push a
4533   22AC 11            mov a, b
4534   22AD 26 2D 00      mov b, $2d
4535   22B0 B0            cmp a, b
4536   22B1 FD 71         seq ; ==
4537   22B3 E4            pop a
4538   22B4             ; END RELATIONAL
4539   22B4 C0 00 00      cmp b, 0
4540   22B7 C6 36 23      je _if85_else
4541   22BA             _if85_true:
4542   22BA             ;; *t++ = *prog++; 
4543   22BA 2C FF FF      mov b, [bp + -1] ; $t             
4544   22BD FD 79         mov g, b
4545   22BF FD 77         inc b
4546   22C1 FA FF FF      lea d, [bp + -1] ; $t
4547   22C4 FD 43         mov [d], b
4548   22C6 FD 27         mov b, g
4549   22C8 D8            push b
4550   22C9 29 83 2F      mov b, [_prog] ; $prog           
4551   22CC FD 79         mov g, b
4552   22CE FD 77         inc b
4553   22D0 3B 83 2F      mov d, _prog ; $prog
4554   22D3 FD 43         mov [d], b
4555   22D5 FD 27         mov b, g
4556   22D7 74            mov d, b
4557   22D8 32            mov bl, [d]
4558   22D9 A7 00         mov bh, 0
4559   22DB E7            pop d
4560   22DC FD 3E         mov [d], bl
4561   22DE             ;; if(*prog == '-'){ 
4562   22DE             _if86_cond:
4563   22DE 29 83 2F      mov b, [_prog] ; $prog           
4564   22E1 74            mov d, b
4565   22E2 32            mov bl, [d]
4566   22E3 A7 00         mov bh, 0
4567   22E5             ; START RELATIONAL
4568   22E5 D7            push a
4569   22E6 11            mov a, b
4570   22E7 26 2D 00      mov b, $2d
4571   22EA B0            cmp a, b
4572   22EB FD 71         seq ; ==
4573   22ED E4            pop a
4574   22EE             ; END RELATIONAL
4575   22EE C0 00 00      cmp b, 0
4576   22F1 C6 23 23      je _if86_else
4577   22F4             _if86_true:
4578   22F4             ;; *t++ = *prog++; 
4579   22F4 2C FF FF      mov b, [bp + -1] ; $t             
4580   22F7 FD 79         mov g, b
4581   22F9 FD 77         inc b
4582   22FB FA FF FF      lea d, [bp + -1] ; $t
4583   22FE FD 43         mov [d], b
4584   2300 FD 27         mov b, g
4585   2302 D8            push b
4586   2303 29 83 2F      mov b, [_prog] ; $prog           
4587   2306 FD 79         mov g, b
4588   2308 FD 77         inc b
4589   230A 3B 83 2F      mov d, _prog ; $prog
4590   230D FD 43         mov [d], b
4591   230F FD 27         mov b, g
4592   2311 74            mov d, b
4593   2312 32            mov bl, [d]
4594   2313 A7 00         mov bh, 0
4595   2315 E7            pop d
4596   2316 FD 3E         mov [d], bl
4597   2318             ;; tok = DECREMENT; 
4598   2318 3B 7F 2F      mov d, _tok ; $tok         
4599   231B 26 06 00      mov b, 6; DECREMENT        
4600   231E FD 43         mov [d], b
4601   2320 0A 2B 23      jmp _if86_exit
4602   2323             _if86_else:
4603   2323             ;; tok = MINUS; 
4604   2323 3B 7F 2F      mov d, _tok ; $tok         
4605   2326 26 02 00      mov b, 2; MINUS        
4606   2329 FD 43         mov [d], b
4607   232B             _if86_exit:
4608   232B             ;; toktype = DELIMITER;   
4609   232B 3B 81 2F      mov d, _toktype ; $toktype         
4610   232E 26 01 00      mov b, 1; DELIMITER        
4611   2331 FD 43         mov [d], b
4612   2333 0A D2 26      jmp _if85_exit
4613   2336             _if85_else:
4614   2336             ;; if(*prog == '$'){ 
4615   2336             _if87_cond:
4616   2336 29 83 2F      mov b, [_prog] ; $prog           
4617   2339 74            mov d, b
4618   233A 32            mov bl, [d]
4619   233B A7 00         mov bh, 0
4620   233D             ; START RELATIONAL
4621   233D D7            push a
4622   233E 11            mov a, b
4623   233F 26 24 00      mov b, $24
4624   2342 B0            cmp a, b
4625   2343 FD 71         seq ; ==
4626   2345 E4            pop a
4627   2346             ; END RELATIONAL
4628   2346 C0 00 00      cmp b, 0
4629   2349 C6 83 23      je _if87_else
4630   234C             _if87_true:
4631   234C             ;; *t++ = *prog++; 
4632   234C 2C FF FF      mov b, [bp + -1] ; $t             
4633   234F FD 79         mov g, b
4634   2351 FD 77         inc b
4635   2353 FA FF FF      lea d, [bp + -1] ; $t
4636   2356 FD 43         mov [d], b
4637   2358 FD 27         mov b, g
4638   235A D8            push b
4639   235B 29 83 2F      mov b, [_prog] ; $prog           
4640   235E FD 79         mov g, b
4641   2360 FD 77         inc b
4642   2362 3B 83 2F      mov d, _prog ; $prog
4643   2365 FD 43         mov [d], b
4644   2367 FD 27         mov b, g
4645   2369 74            mov d, b
4646   236A 32            mov bl, [d]
4647   236B A7 00         mov bh, 0
4648   236D E7            pop d
4649   236E FD 3E         mov [d], bl
4650   2370             ;; tok = DOLLAR; 
4651   2370 3B 7F 2F      mov d, _tok ; $tok         
4652   2373 26 12 00      mov b, 18; DOLLAR        
4653   2376 FD 43         mov [d], b
4654   2378             ;; toktype = DELIMITER;   
4655   2378 3B 81 2F      mov d, _toktype ; $toktype         
4656   237B 26 01 00      mov b, 1; DELIMITER        
4657   237E FD 43         mov [d], b
4658   2380 0A D2 26      jmp _if87_exit
4659   2383             _if87_else:
4660   2383             ;; if(*prog == '^'){ 
4661   2383             _if88_cond:
4662   2383 29 83 2F      mov b, [_prog] ; $prog           
4663   2386 74            mov d, b
4664   2387 32            mov bl, [d]
4665   2388 A7 00         mov bh, 0
4666   238A             ; START RELATIONAL
4667   238A D7            push a
4668   238B 11            mov a, b
4669   238C 26 5E 00      mov b, $5e
4670   238F B0            cmp a, b
4671   2390 FD 71         seq ; ==
4672   2392 E4            pop a
4673   2393             ; END RELATIONAL
4674   2393 C0 00 00      cmp b, 0
4675   2396 C6 D0 23      je _if88_else
4676   2399             _if88_true:
4677   2399             ;; *t++ = *prog++; 
4678   2399 2C FF FF      mov b, [bp + -1] ; $t             
4679   239C FD 79         mov g, b
4680   239E FD 77         inc b
4681   23A0 FA FF FF      lea d, [bp + -1] ; $t
4682   23A3 FD 43         mov [d], b
4683   23A5 FD 27         mov b, g
4684   23A7 D8            push b
4685   23A8 29 83 2F      mov b, [_prog] ; $prog           
4686   23AB FD 79         mov g, b
4687   23AD FD 77         inc b
4688   23AF 3B 83 2F      mov d, _prog ; $prog
4689   23B2 FD 43         mov [d], b
4690   23B4 FD 27         mov b, g
4691   23B6 74            mov d, b
4692   23B7 32            mov bl, [d]
4693   23B8 A7 00         mov bh, 0
4694   23BA E7            pop d
4695   23BB FD 3E         mov [d], bl
4696   23BD             ;; tok = BITWISE_XOR; 
4697   23BD 3B 7F 2F      mov d, _tok ; $tok         
4698   23C0 26 17 00      mov b, 23; BITWISE_XOR        
4699   23C3 FD 43         mov [d], b
4700   23C5             ;; toktype = DELIMITER;   
4701   23C5 3B 81 2F      mov d, _toktype ; $toktype         
4702   23C8 26 01 00      mov b, 1; DELIMITER        
4703   23CB FD 43         mov [d], b
4704   23CD 0A D2 26      jmp _if88_exit
4705   23D0             _if88_else:
4706   23D0             ;; if(*prog == '@'){ 
4707   23D0             _if89_cond:
4708   23D0 29 83 2F      mov b, [_prog] ; $prog           
4709   23D3 74            mov d, b
4710   23D4 32            mov bl, [d]
4711   23D5 A7 00         mov bh, 0
4712   23D7             ; START RELATIONAL
4713   23D7 D7            push a
4714   23D8 11            mov a, b
4715   23D9 26 40 00      mov b, $40
4716   23DC B0            cmp a, b
4717   23DD FD 71         seq ; ==
4718   23DF E4            pop a
4719   23E0             ; END RELATIONAL
4720   23E0 C0 00 00      cmp b, 0
4721   23E3 C6 1D 24      je _if89_else
4722   23E6             _if89_true:
4723   23E6             ;; *t++ = *prog++; 
4724   23E6 2C FF FF      mov b, [bp + -1] ; $t             
4725   23E9 FD 79         mov g, b
4726   23EB FD 77         inc b
4727   23ED FA FF FF      lea d, [bp + -1] ; $t
4728   23F0 FD 43         mov [d], b
4729   23F2 FD 27         mov b, g
4730   23F4 D8            push b
4731   23F5 29 83 2F      mov b, [_prog] ; $prog           
4732   23F8 FD 79         mov g, b
4733   23FA FD 77         inc b
4734   23FC 3B 83 2F      mov d, _prog ; $prog
4735   23FF FD 43         mov [d], b
4736   2401 FD 27         mov b, g
4737   2403 74            mov d, b
4738   2404 32            mov bl, [d]
4739   2405 A7 00         mov bh, 0
4740   2407 E7            pop d
4741   2408 FD 3E         mov [d], bl
4742   240A             ;; tok = AT; 
4743   240A 3B 7F 2F      mov d, _tok ; $tok         
4744   240D 26 14 00      mov b, 20; AT        
4745   2410 FD 43         mov [d], b
4746   2412             ;; toktype = DELIMITER;   
4747   2412 3B 81 2F      mov d, _toktype ; $toktype         
4748   2415 26 01 00      mov b, 1; DELIMITER        
4749   2418 FD 43         mov [d], b
4750   241A 0A D2 26      jmp _if89_exit
4751   241D             _if89_else:
4752   241D             ;; if(*prog == '*'){ 
4753   241D             _if90_cond:
4754   241D 29 83 2F      mov b, [_prog] ; $prog           
4755   2420 74            mov d, b
4756   2421 32            mov bl, [d]
4757   2422 A7 00         mov bh, 0
4758   2424             ; START RELATIONAL
4759   2424 D7            push a
4760   2425 11            mov a, b
4761   2426 26 2A 00      mov b, $2a
4762   2429 B0            cmp a, b
4763   242A FD 71         seq ; ==
4764   242C E4            pop a
4765   242D             ; END RELATIONAL
4766   242D C0 00 00      cmp b, 0
4767   2430 C6 6A 24      je _if90_else
4768   2433             _if90_true:
4769   2433             ;; *t++ = *prog++; 
4770   2433 2C FF FF      mov b, [bp + -1] ; $t             
4771   2436 FD 79         mov g, b
4772   2438 FD 77         inc b
4773   243A FA FF FF      lea d, [bp + -1] ; $t
4774   243D FD 43         mov [d], b
4775   243F FD 27         mov b, g
4776   2441 D8            push b
4777   2442 29 83 2F      mov b, [_prog] ; $prog           
4778   2445 FD 79         mov g, b
4779   2447 FD 77         inc b
4780   2449 3B 83 2F      mov d, _prog ; $prog
4781   244C FD 43         mov [d], b
4782   244E FD 27         mov b, g
4783   2450 74            mov d, b
4784   2451 32            mov bl, [d]
4785   2452 A7 00         mov bh, 0
4786   2454 E7            pop d
4787   2455 FD 3E         mov [d], bl
4788   2457             ;; tok = STAR; 
4789   2457 3B 7F 2F      mov d, _tok ; $tok         
4790   245A 26 03 00      mov b, 3; STAR        
4791   245D FD 43         mov [d], b
4792   245F             ;; toktype = DELIMITER;   
4793   245F 3B 81 2F      mov d, _toktype ; $toktype         
4794   2462 26 01 00      mov b, 1; DELIMITER        
4795   2465 FD 43         mov [d], b
4796   2467 0A D2 26      jmp _if90_exit
4797   246A             _if90_else:
4798   246A             ;; if(*prog == '/'){ 
4799   246A             _if91_cond:
4800   246A 29 83 2F      mov b, [_prog] ; $prog           
4801   246D 74            mov d, b
4802   246E 32            mov bl, [d]
4803   246F A7 00         mov bh, 0
4804   2471             ; START RELATIONAL
4805   2471 D7            push a
4806   2472 11            mov a, b
4807   2473 26 2F 00      mov b, $2f
4808   2476 B0            cmp a, b
4809   2477 FD 71         seq ; ==
4810   2479 E4            pop a
4811   247A             ; END RELATIONAL
4812   247A C0 00 00      cmp b, 0
4813   247D C6 B7 24      je _if91_else
4814   2480             _if91_true:
4815   2480             ;; *t++ = *prog++; 
4816   2480 2C FF FF      mov b, [bp + -1] ; $t             
4817   2483 FD 79         mov g, b
4818   2485 FD 77         inc b
4819   2487 FA FF FF      lea d, [bp + -1] ; $t
4820   248A FD 43         mov [d], b
4821   248C FD 27         mov b, g
4822   248E D8            push b
4823   248F 29 83 2F      mov b, [_prog] ; $prog           
4824   2492 FD 79         mov g, b
4825   2494 FD 77         inc b
4826   2496 3B 83 2F      mov d, _prog ; $prog
4827   2499 FD 43         mov [d], b
4828   249B FD 27         mov b, g
4829   249D 74            mov d, b
4830   249E 32            mov bl, [d]
4831   249F A7 00         mov bh, 0
4832   24A1 E7            pop d
4833   24A2 FD 3E         mov [d], bl
4834   24A4             ;; tok = FSLASH; 
4835   24A4 3B 7F 2F      mov d, _tok ; $tok         
4836   24A7 26 04 00      mov b, 4; FSLASH        
4837   24AA FD 43         mov [d], b
4838   24AC             ;; toktype = DELIMITER;   
4839   24AC 3B 81 2F      mov d, _toktype ; $toktype         
4840   24AF 26 01 00      mov b, 1; DELIMITER        
4841   24B2 FD 43         mov [d], b
4842   24B4 0A D2 26      jmp _if91_exit
4843   24B7             _if91_else:
4844   24B7             ;; if(*prog == '%'){ 
4845   24B7             _if92_cond:
4846   24B7 29 83 2F      mov b, [_prog] ; $prog           
4847   24BA 74            mov d, b
4848   24BB 32            mov bl, [d]
4849   24BC A7 00         mov bh, 0
4850   24BE             ; START RELATIONAL
4851   24BE D7            push a
4852   24BF 11            mov a, b
4853   24C0 26 25 00      mov b, $25
4854   24C3 B0            cmp a, b
4855   24C4 FD 71         seq ; ==
4856   24C6 E4            pop a
4857   24C7             ; END RELATIONAL
4858   24C7 C0 00 00      cmp b, 0
4859   24CA C6 04 25      je _if92_else
4860   24CD             _if92_true:
4861   24CD             ;; *t++ = *prog++; 
4862   24CD 2C FF FF      mov b, [bp + -1] ; $t             
4863   24D0 FD 79         mov g, b
4864   24D2 FD 77         inc b
4865   24D4 FA FF FF      lea d, [bp + -1] ; $t
4866   24D7 FD 43         mov [d], b
4867   24D9 FD 27         mov b, g
4868   24DB D8            push b
4869   24DC 29 83 2F      mov b, [_prog] ; $prog           
4870   24DF FD 79         mov g, b
4871   24E1 FD 77         inc b
4872   24E3 3B 83 2F      mov d, _prog ; $prog
4873   24E6 FD 43         mov [d], b
4874   24E8 FD 27         mov b, g
4875   24EA 74            mov d, b
4876   24EB 32            mov bl, [d]
4877   24EC A7 00         mov bh, 0
4878   24EE E7            pop d
4879   24EF FD 3E         mov [d], bl
4880   24F1             ;; tok = MOD; 
4881   24F1 3B 7F 2F      mov d, _tok ; $tok         
4882   24F4 26 07 00      mov b, 7; MOD        
4883   24F7 FD 43         mov [d], b
4884   24F9             ;; toktype = DELIMITER;   
4885   24F9 3B 81 2F      mov d, _toktype ; $toktype         
4886   24FC 26 01 00      mov b, 1; DELIMITER        
4887   24FF FD 43         mov [d], b
4888   2501 0A D2 26      jmp _if92_exit
4889   2504             _if92_else:
4890   2504             ;; if(*prog == '('){ 
4891   2504             _if93_cond:
4892   2504 29 83 2F      mov b, [_prog] ; $prog           
4893   2507 74            mov d, b
4894   2508 32            mov bl, [d]
4895   2509 A7 00         mov bh, 0
4896   250B             ; START RELATIONAL
4897   250B D7            push a
4898   250C 11            mov a, b
4899   250D 26 28 00      mov b, $28
4900   2510 B0            cmp a, b
4901   2511 FD 71         seq ; ==
4902   2513 E4            pop a
4903   2514             ; END RELATIONAL
4904   2514 C0 00 00      cmp b, 0
4905   2517 C6 51 25      je _if93_else
4906   251A             _if93_true:
4907   251A             ;; *t++ = *prog++; 
4908   251A 2C FF FF      mov b, [bp + -1] ; $t             
4909   251D FD 79         mov g, b
4910   251F FD 77         inc b
4911   2521 FA FF FF      lea d, [bp + -1] ; $t
4912   2524 FD 43         mov [d], b
4913   2526 FD 27         mov b, g
4914   2528 D8            push b
4915   2529 29 83 2F      mov b, [_prog] ; $prog           
4916   252C FD 79         mov g, b
4917   252E FD 77         inc b
4918   2530 3B 83 2F      mov d, _prog ; $prog
4919   2533 FD 43         mov [d], b
4920   2535 FD 27         mov b, g
4921   2537 74            mov d, b
4922   2538 32            mov bl, [d]
4923   2539 A7 00         mov bh, 0
4924   253B E7            pop d
4925   253C FD 3E         mov [d], bl
4926   253E             ;; tok = OPENING_PAREN; 
4927   253E 3B 7F 2F      mov d, _tok ; $tok         
4928   2541 26 1C 00      mov b, 28; OPENING_PAREN        
4929   2544 FD 43         mov [d], b
4930   2546             ;; toktype = DELIMITER;   
4931   2546 3B 81 2F      mov d, _toktype ; $toktype         
4932   2549 26 01 00      mov b, 1; DELIMITER        
4933   254C FD 43         mov [d], b
4934   254E 0A D2 26      jmp _if93_exit
4935   2551             _if93_else:
4936   2551             ;; if(*prog == ')'){ 
4937   2551             _if94_cond:
4938   2551 29 83 2F      mov b, [_prog] ; $prog           
4939   2554 74            mov d, b
4940   2555 32            mov bl, [d]
4941   2556 A7 00         mov bh, 0
4942   2558             ; START RELATIONAL
4943   2558 D7            push a
4944   2559 11            mov a, b
4945   255A 26 29 00      mov b, $29
4946   255D B0            cmp a, b
4947   255E FD 71         seq ; ==
4948   2560 E4            pop a
4949   2561             ; END RELATIONAL
4950   2561 C0 00 00      cmp b, 0
4951   2564 C6 9E 25      je _if94_else
4952   2567             _if94_true:
4953   2567             ;; *t++ = *prog++; 
4954   2567 2C FF FF      mov b, [bp + -1] ; $t             
4955   256A FD 79         mov g, b
4956   256C FD 77         inc b
4957   256E FA FF FF      lea d, [bp + -1] ; $t
4958   2571 FD 43         mov [d], b
4959   2573 FD 27         mov b, g
4960   2575 D8            push b
4961   2576 29 83 2F      mov b, [_prog] ; $prog           
4962   2579 FD 79         mov g, b
4963   257B FD 77         inc b
4964   257D 3B 83 2F      mov d, _prog ; $prog
4965   2580 FD 43         mov [d], b
4966   2582 FD 27         mov b, g
4967   2584 74            mov d, b
4968   2585 32            mov bl, [d]
4969   2586 A7 00         mov bh, 0
4970   2588 E7            pop d
4971   2589 FD 3E         mov [d], bl
4972   258B             ;; tok = CLOSING_PAREN; 
4973   258B 3B 7F 2F      mov d, _tok ; $tok         
4974   258E 26 1D 00      mov b, 29; CLOSING_PAREN        
4975   2591 FD 43         mov [d], b
4976   2593             ;; toktype = DELIMITER;   
4977   2593 3B 81 2F      mov d, _toktype ; $toktype         
4978   2596 26 01 00      mov b, 1; DELIMITER        
4979   2599 FD 43         mov [d], b
4980   259B 0A D2 26      jmp _if94_exit
4981   259E             _if94_else:
4982   259E             ;; if(*prog == ';'){ 
4983   259E             _if95_cond:
4984   259E 29 83 2F      mov b, [_prog] ; $prog           
4985   25A1 74            mov d, b
4986   25A2 32            mov bl, [d]
4987   25A3 A7 00         mov bh, 0
4988   25A5             ; START RELATIONAL
4989   25A5 D7            push a
4990   25A6 11            mov a, b
4991   25A7 26 3B 00      mov b, $3b
4992   25AA B0            cmp a, b
4993   25AB FD 71         seq ; ==
4994   25AD E4            pop a
4995   25AE             ; END RELATIONAL
4996   25AE C0 00 00      cmp b, 0
4997   25B1 C6 EB 25      je _if95_else
4998   25B4             _if95_true:
4999   25B4             ;; *t++ = *prog++; 
5000   25B4 2C FF FF      mov b, [bp + -1] ; $t             
5001   25B7 FD 79         mov g, b
5002   25B9 FD 77         inc b
5003   25BB FA FF FF      lea d, [bp + -1] ; $t
5004   25BE FD 43         mov [d], b
5005   25C0 FD 27         mov b, g
5006   25C2 D8            push b
5007   25C3 29 83 2F      mov b, [_prog] ; $prog           
5008   25C6 FD 79         mov g, b
5009   25C8 FD 77         inc b
5010   25CA 3B 83 2F      mov d, _prog ; $prog
5011   25CD FD 43         mov [d], b
5012   25CF FD 27         mov b, g
5013   25D1 74            mov d, b
5014   25D2 32            mov bl, [d]
5015   25D3 A7 00         mov bh, 0
5016   25D5 E7            pop d
5017   25D6 FD 3E         mov [d], bl
5018   25D8             ;; tok = SEMICOLON; 
5019   25D8 3B 7F 2F      mov d, _tok ; $tok         
5020   25DB 26 23 00      mov b, 35; SEMICOLON        
5021   25DE FD 43         mov [d], b
5022   25E0             ;; toktype = DELIMITER;   
5023   25E0 3B 81 2F      mov d, _toktype ; $toktype         
5024   25E3 26 01 00      mov b, 1; DELIMITER        
5025   25E6 FD 43         mov [d], b
5026   25E8 0A D2 26      jmp _if95_exit
5027   25EB             _if95_else:
5028   25EB             ;; if(*prog == ':'){ 
5029   25EB             _if96_cond:
5030   25EB 29 83 2F      mov b, [_prog] ; $prog           
5031   25EE 74            mov d, b
5032   25EF 32            mov bl, [d]
5033   25F0 A7 00         mov bh, 0
5034   25F2             ; START RELATIONAL
5035   25F2 D7            push a
5036   25F3 11            mov a, b
5037   25F4 26 3A 00      mov b, $3a
5038   25F7 B0            cmp a, b
5039   25F8 FD 71         seq ; ==
5040   25FA E4            pop a
5041   25FB             ; END RELATIONAL
5042   25FB C0 00 00      cmp b, 0
5043   25FE C6 38 26      je _if96_else
5044   2601             _if96_true:
5045   2601             ;; *t++ = *prog++; 
5046   2601 2C FF FF      mov b, [bp + -1] ; $t             
5047   2604 FD 79         mov g, b
5048   2606 FD 77         inc b
5049   2608 FA FF FF      lea d, [bp + -1] ; $t
5050   260B FD 43         mov [d], b
5051   260D FD 27         mov b, g
5052   260F D8            push b
5053   2610 29 83 2F      mov b, [_prog] ; $prog           
5054   2613 FD 79         mov g, b
5055   2615 FD 77         inc b
5056   2617 3B 83 2F      mov d, _prog ; $prog
5057   261A FD 43         mov [d], b
5058   261C FD 27         mov b, g
5059   261E 74            mov d, b
5060   261F 32            mov bl, [d]
5061   2620 A7 00         mov bh, 0
5062   2622 E7            pop d
5063   2623 FD 3E         mov [d], bl
5064   2625             ;; tok = COLON; 
5065   2625 3B 7F 2F      mov d, _tok ; $tok         
5066   2628 26 22 00      mov b, 34; COLON        
5067   262B FD 43         mov [d], b
5068   262D             ;; toktype = DELIMITER;   
5069   262D 3B 81 2F      mov d, _toktype ; $toktype         
5070   2630 26 01 00      mov b, 1; DELIMITER        
5071   2633 FD 43         mov [d], b
5072   2635 0A D2 26      jmp _if96_exit
5073   2638             _if96_else:
5074   2638             ;; if(*prog == ','){ 
5075   2638             _if97_cond:
5076   2638 29 83 2F      mov b, [_prog] ; $prog           
5077   263B 74            mov d, b
5078   263C 32            mov bl, [d]
5079   263D A7 00         mov bh, 0
5080   263F             ; START RELATIONAL
5081   263F D7            push a
5082   2640 11            mov a, b
5083   2641 26 2C 00      mov b, $2c
5084   2644 B0            cmp a, b
5085   2645 FD 71         seq ; ==
5086   2647 E4            pop a
5087   2648             ; END RELATIONAL
5088   2648 C0 00 00      cmp b, 0
5089   264B C6 85 26      je _if97_else
5090   264E             _if97_true:
5091   264E             ;; *t++ = *prog++; 
5092   264E 2C FF FF      mov b, [bp + -1] ; $t             
5093   2651 FD 79         mov g, b
5094   2653 FD 77         inc b
5095   2655 FA FF FF      lea d, [bp + -1] ; $t
5096   2658 FD 43         mov [d], b
5097   265A FD 27         mov b, g
5098   265C D8            push b
5099   265D 29 83 2F      mov b, [_prog] ; $prog           
5100   2660 FD 79         mov g, b
5101   2662 FD 77         inc b
5102   2664 3B 83 2F      mov d, _prog ; $prog
5103   2667 FD 43         mov [d], b
5104   2669 FD 27         mov b, g
5105   266B 74            mov d, b
5106   266C 32            mov bl, [d]
5107   266D A7 00         mov bh, 0
5108   266F E7            pop d
5109   2670 FD 3E         mov [d], bl
5110   2672             ;; tok = COMMA; 
5111   2672 3B 7F 2F      mov d, _tok ; $tok         
5112   2675 26 24 00      mov b, 36; COMMA        
5113   2678 FD 43         mov [d], b
5114   267A             ;; toktype = DELIMITER;   
5115   267A 3B 81 2F      mov d, _toktype ; $toktype         
5116   267D 26 01 00      mov b, 1; DELIMITER        
5117   2680 FD 43         mov [d], b
5118   2682 0A D2 26      jmp _if97_exit
5119   2685             _if97_else:
5120   2685             ;; if(*prog == '.'){ 
5121   2685             _if98_cond:
5122   2685 29 83 2F      mov b, [_prog] ; $prog           
5123   2688 74            mov d, b
5124   2689 32            mov bl, [d]
5125   268A A7 00         mov bh, 0
5126   268C             ; START RELATIONAL
5127   268C D7            push a
5128   268D 11            mov a, b
5129   268E 26 2E 00      mov b, $2e
5130   2691 B0            cmp a, b
5131   2692 FD 71         seq ; ==
5132   2694 E4            pop a
5133   2695             ; END RELATIONAL
5134   2695 C0 00 00      cmp b, 0
5135   2698 C6 D2 26      je _if98_exit
5136   269B             _if98_true:
5137   269B             ;; *t++ = *prog++; 
5138   269B 2C FF FF      mov b, [bp + -1] ; $t             
5139   269E FD 79         mov g, b
5140   26A0 FD 77         inc b
5141   26A2 FA FF FF      lea d, [bp + -1] ; $t
5142   26A5 FD 43         mov [d], b
5143   26A7 FD 27         mov b, g
5144   26A9 D8            push b
5145   26AA 29 83 2F      mov b, [_prog] ; $prog           
5146   26AD FD 79         mov g, b
5147   26AF FD 77         inc b
5148   26B1 3B 83 2F      mov d, _prog ; $prog
5149   26B4 FD 43         mov [d], b
5150   26B6 FD 27         mov b, g
5151   26B8 74            mov d, b
5152   26B9 32            mov bl, [d]
5153   26BA A7 00         mov bh, 0
5154   26BC E7            pop d
5155   26BD FD 3E         mov [d], bl
5156   26BF             ;; tok = DOT; 
5157   26BF 3B 7F 2F      mov d, _tok ; $tok         
5158   26C2 26 25 00      mov b, 37; DOT        
5159   26C5 FD 43         mov [d], b
5160   26C7             ;; toktype = DELIMITER;   
5161   26C7 3B 81 2F      mov d, _toktype ; $toktype         
5162   26CA 26 01 00      mov b, 1; DELIMITER        
5163   26CD FD 43         mov [d], b
5164   26CF 0A D2 26      jmp _if98_exit
5165   26D2             _if98_exit:
5166   26D2             _if97_exit:
5167   26D2             _if96_exit:
5168   26D2             _if95_exit:
5169   26D2             _if94_exit:
5170   26D2             _if93_exit:
5171   26D2             _if92_exit:
5172   26D2             _if91_exit:
5173   26D2             _if90_exit:
5174   26D2             _if89_exit:
5175   26D2             _if88_exit:
5176   26D2             _if87_exit:
5177   26D2             _if85_exit:
5178   26D2             _if83_exit:
5179   26D2             _if81_exit:
5180   26D2             _if78_exit:
5181   26D2             _if75_exit:
5182   26D2             _if74_exit:
5183   26D2             _if72_exit:
5184   26D2             _if70_exit:
5185   26D2             _if68_exit:
5186   26D2             _if67_exit:
5187   26D2             _if66_exit:
5188   26D2             _if65_exit:
5189   26D2             _if64_exit:
5190   26D2             _if63_exit:
5191   26D2             _if60_exit:
5192   26D2             _if58_exit:
5193   26D2             _if56_exit:
5194   26D2             ;; *t = '\0'; 
5195   26D2 2C FF FF      mov b, [bp + -1] ; $t             
5196   26D5 D8            push b
5197   26D6 26 00 00      mov b, $0
5198   26D9 E7            pop d
5199   26DA FD 3E         mov [d], bl
5200   26DC F9            leave
5201   26DD 09            ret
5202   26DE             
5203   26DE             convert_constant:
5204   26DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
5205   26E1             ; $s 
5206   26E1             ; $t 
5207   26E1 52 04 00      sub sp, 4
5208   26E4             ;; t = token; 
5209   26E4 FA FD FF      lea d, [bp + -3] ; $t         
5210   26E7 26 85 2F      mov b, _token_data ; $token                   
5211   26EA FD 43         mov [d], b
5212   26EC             ;; s = string_const; 
5213   26EC FA FF FF      lea d, [bp + -1] ; $s         
5214   26EF 26 85 30      mov b, _string_const_data ; $string_const                   
5215   26F2 FD 43         mov [d], b
5216   26F4             ;; if(toktype == CHAR_CONST){ 
5217   26F4             _if99_cond:
5218   26F4 29 81 2F      mov b, [_toktype] ; $toktype           
5219   26F7             ; START RELATIONAL
5220   26F7 D7            push a
5221   26F8 11            mov a, b
5222   26F9 26 02 00      mov b, 2; CHAR_CONST
5223   26FC B0            cmp a, b
5224   26FD FD 71         seq ; ==
5225   26FF E4            pop a
5226   2700             ; END RELATIONAL
5227   2700 C0 00 00      cmp b, 0
5228   2703 C6 9D 28      je _if99_else
5229   2706             _if99_true:
5230   2706             ;; t++; 
5231   2706 2C FD FF      mov b, [bp + -3] ; $t             
5232   2709 FD 79         mov g, b
5233   270B FD 77         inc b
5234   270D FA FD FF      lea d, [bp + -3] ; $t
5235   2710 FD 43         mov [d], b
5236   2712 FD 27         mov b, g
5237   2714             ;; if(*t == '\\'){ 
5238   2714             _if100_cond:
5239   2714 2C FD FF      mov b, [bp + -3] ; $t             
5240   2717 74            mov d, b
5241   2718 32            mov bl, [d]
5242   2719 A7 00         mov bh, 0
5243   271B             ; START RELATIONAL
5244   271B D7            push a
5245   271C 11            mov a, b
5246   271D 26 5C 00      mov b, $5c
5247   2720 B0            cmp a, b
5248   2721 FD 71         seq ; ==
5249   2723 E4            pop a
5250   2724             ; END RELATIONAL
5251   2724 C0 00 00      cmp b, 0
5252   2727 C6 81 28      je _if100_else
5253   272A             _if100_true:
5254   272A             ;; t++; 
5255   272A 2C FD FF      mov b, [bp + -3] ; $t             
5256   272D FD 79         mov g, b
5257   272F FD 77         inc b
5258   2731 FA FD FF      lea d, [bp + -3] ; $t
5259   2734 FD 43         mov [d], b
5260   2736 FD 27         mov b, g
5261   2738             ;; switch(*t){ 
5262   2738             _switch101_expr:
5263   2738 2C FD FF      mov b, [bp + -3] ; $t             
5264   273B 74            mov d, b
5265   273C 32            mov bl, [d]
5266   273D A7 00         mov bh, 0
5267   273F             _switch101_comparisons:
5268   273F C1 30         cmp bl, $30
5269   2741 C6 79 27      je _switch101_case0
5270   2744 C1 61         cmp bl, $61
5271   2746 C6 91 27      je _switch101_case1
5272   2749 C1 62         cmp bl, $62
5273   274B C6 A9 27      je _switch101_case2
5274   274E C1 66         cmp bl, $66
5275   2750 C6 C1 27      je _switch101_case3
5276   2753 C1 6E         cmp bl, $6e
5277   2755 C6 D9 27      je _switch101_case4
5278   2758 C1 72         cmp bl, $72
5279   275A C6 F1 27      je _switch101_case5
5280   275D C1 74         cmp bl, $74
5281   275F C6 09 28      je _switch101_case6
5282   2762 C1 76         cmp bl, $76
5283   2764 C6 21 28      je _switch101_case7
5284   2767 C1 5C         cmp bl, $5c
5285   2769 C6 39 28      je _switch101_case8
5286   276C C1 27         cmp bl, $27
5287   276E C6 51 28      je _switch101_case9
5288   2771 C1 22         cmp bl, $22
5289   2773 C6 69 28      je _switch101_case10
5290   2776 0A 7E 28      jmp _switch101_exit
5291   2779             _switch101_case0:
5292   2779             ;; *s++ = '\0'; 
5293   2779 2C FF FF      mov b, [bp + -1] ; $s             
5294   277C FD 79         mov g, b
5295   277E FD 77         inc b
5296   2780 FA FF FF      lea d, [bp + -1] ; $s
5297   2783 FD 43         mov [d], b
5298   2785 FD 27         mov b, g
5299   2787 D8            push b
5300   2788 26 00 00      mov b, $0
5301   278B E7            pop d
5302   278C FD 3E         mov [d], bl
5303   278E             ;; break; 
5304   278E 0A 7E 28      jmp _switch101_exit ; case break
5305   2791             _switch101_case1:
5306   2791             ;; *s++ = '\a'; 
5307   2791 2C FF FF      mov b, [bp + -1] ; $s             
5308   2794 FD 79         mov g, b
5309   2796 FD 77         inc b
5310   2798 FA FF FF      lea d, [bp + -1] ; $s
5311   279B FD 43         mov [d], b
5312   279D FD 27         mov b, g
5313   279F D8            push b
5314   27A0 26 07 00      mov b, $7
5315   27A3 E7            pop d
5316   27A4 FD 3E         mov [d], bl
5317   27A6             ;; break; 
5318   27A6 0A 7E 28      jmp _switch101_exit ; case break
5319   27A9             _switch101_case2:
5320   27A9             ;; *s++ = '\b'; 
5321   27A9 2C FF FF      mov b, [bp + -1] ; $s             
5322   27AC FD 79         mov g, b
5323   27AE FD 77         inc b
5324   27B0 FA FF FF      lea d, [bp + -1] ; $s
5325   27B3 FD 43         mov [d], b
5326   27B5 FD 27         mov b, g
5327   27B7 D8            push b
5328   27B8 26 08 00      mov b, $8
5329   27BB E7            pop d
5330   27BC FD 3E         mov [d], bl
5331   27BE             ;; break;   
5332   27BE 0A 7E 28      jmp _switch101_exit ; case break
5333   27C1             _switch101_case3:
5334   27C1             ;; *s++ = '\f'; 
5335   27C1 2C FF FF      mov b, [bp + -1] ; $s             
5336   27C4 FD 79         mov g, b
5337   27C6 FD 77         inc b
5338   27C8 FA FF FF      lea d, [bp + -1] ; $s
5339   27CB FD 43         mov [d], b
5340   27CD FD 27         mov b, g
5341   27CF D8            push b
5342   27D0 26 0C 00      mov b, $c
5343   27D3 E7            pop d
5344   27D4 FD 3E         mov [d], bl
5345   27D6             ;; break; 
5346   27D6 0A 7E 28      jmp _switch101_exit ; case break
5347   27D9             _switch101_case4:
5348   27D9             ;; *s++ = '\n'; 
5349   27D9 2C FF FF      mov b, [bp + -1] ; $s             
5350   27DC FD 79         mov g, b
5351   27DE FD 77         inc b
5352   27E0 FA FF FF      lea d, [bp + -1] ; $s
5353   27E3 FD 43         mov [d], b
5354   27E5 FD 27         mov b, g
5355   27E7 D8            push b
5356   27E8 26 0A 00      mov b, $a
5357   27EB E7            pop d
5358   27EC FD 3E         mov [d], bl
5359   27EE             ;; break; 
5360   27EE 0A 7E 28      jmp _switch101_exit ; case break
5361   27F1             _switch101_case5:
5362   27F1             ;; *s++ = '\r'; 
5363   27F1 2C FF FF      mov b, [bp + -1] ; $s             
5364   27F4 FD 79         mov g, b
5365   27F6 FD 77         inc b
5366   27F8 FA FF FF      lea d, [bp + -1] ; $s
5367   27FB FD 43         mov [d], b
5368   27FD FD 27         mov b, g
5369   27FF D8            push b
5370   2800 26 0D 00      mov b, $d
5371   2803 E7            pop d
5372   2804 FD 3E         mov [d], bl
5373   2806             ;; break; 
5374   2806 0A 7E 28      jmp _switch101_exit ; case break
5375   2809             _switch101_case6:
5376   2809             ;; *s++ = '\t'; 
5377   2809 2C FF FF      mov b, [bp + -1] ; $s             
5378   280C FD 79         mov g, b
5379   280E FD 77         inc b
5380   2810 FA FF FF      lea d, [bp + -1] ; $s
5381   2813 FD 43         mov [d], b
5382   2815 FD 27         mov b, g
5383   2817 D8            push b
5384   2818 26 09 00      mov b, $9
5385   281B E7            pop d
5386   281C FD 3E         mov [d], bl
5387   281E             ;; break; 
5388   281E 0A 7E 28      jmp _switch101_exit ; case break
5389   2821             _switch101_case7:
5390   2821             ;; *s++ = '\v'; 
5391   2821 2C FF FF      mov b, [bp + -1] ; $s             
5392   2824 FD 79         mov g, b
5393   2826 FD 77         inc b
5394   2828 FA FF FF      lea d, [bp + -1] ; $s
5395   282B FD 43         mov [d], b
5396   282D FD 27         mov b, g
5397   282F D8            push b
5398   2830 26 0B 00      mov b, $b
5399   2833 E7            pop d
5400   2834 FD 3E         mov [d], bl
5401   2836             ;; break; 
5402   2836 0A 7E 28      jmp _switch101_exit ; case break
5403   2839             _switch101_case8:
5404   2839             ;; *s++ = '\\'; 
5405   2839 2C FF FF      mov b, [bp + -1] ; $s             
5406   283C FD 79         mov g, b
5407   283E FD 77         inc b
5408   2840 FA FF FF      lea d, [bp + -1] ; $s
5409   2843 FD 43         mov [d], b
5410   2845 FD 27         mov b, g
5411   2847 D8            push b
5412   2848 26 5C 00      mov b, $5c
5413   284B E7            pop d
5414   284C FD 3E         mov [d], bl
5415   284E             ;; break; 
5416   284E 0A 7E 28      jmp _switch101_exit ; case break
5417   2851             _switch101_case9:
5418   2851             ;; *s++ = '\''; 
5419   2851 2C FF FF      mov b, [bp + -1] ; $s             
5420   2854 FD 79         mov g, b
5421   2856 FD 77         inc b
5422   2858 FA FF FF      lea d, [bp + -1] ; $s
5423   285B FD 43         mov [d], b
5424   285D FD 27         mov b, g
5425   285F D8            push b
5426   2860 26 27 00      mov b, $27
5427   2863 E7            pop d
5428   2864 FD 3E         mov [d], bl
5429   2866             ;; break; 
5430   2866 0A 7E 28      jmp _switch101_exit ; case break
5431   2869             _switch101_case10:
5432   2869             ;; *s++ = '\"'; 
5433   2869 2C FF FF      mov b, [bp + -1] ; $s             
5434   286C FD 79         mov g, b
5435   286E FD 77         inc b
5436   2870 FA FF FF      lea d, [bp + -1] ; $s
5437   2873 FD 43         mov [d], b
5438   2875 FD 27         mov b, g
5439   2877 D8            push b
5440   2878 26 22 00      mov b, $22
5441   287B E7            pop d
5442   287C FD 3E         mov [d], bl
5443   287E             _switch101_exit:
5444   287E 0A 9A 28      jmp _if100_exit
5445   2881             _if100_else:
5446   2881             ;; *s++ = *t; 
5447   2881 2C FF FF      mov b, [bp + -1] ; $s             
5448   2884 FD 79         mov g, b
5449   2886 FD 77         inc b
5450   2888 FA FF FF      lea d, [bp + -1] ; $s
5451   288B FD 43         mov [d], b
5452   288D FD 27         mov b, g
5453   288F D8            push b
5454   2890 2C FD FF      mov b, [bp + -3] ; $t             
5455   2893 74            mov d, b
5456   2894 32            mov bl, [d]
5457   2895 A7 00         mov bh, 0
5458   2897 E7            pop d
5459   2898 FD 3E         mov [d], bl
5460   289A             _if100_exit:
5461   289A 0A 09 29      jmp _if99_exit
5462   289D             _if99_else:
5463   289D             ;; if(toktype == STRING_CONST){ 
5464   289D             _if102_cond:
5465   289D 29 81 2F      mov b, [_toktype] ; $toktype           
5466   28A0             ; START RELATIONAL
5467   28A0 D7            push a
5468   28A1 11            mov a, b
5469   28A2 26 03 00      mov b, 3; STRING_CONST
5470   28A5 B0            cmp a, b
5471   28A6 FD 71         seq ; ==
5472   28A8 E4            pop a
5473   28A9             ; END RELATIONAL
5474   28A9 C0 00 00      cmp b, 0
5475   28AC C6 09 29      je _if102_exit
5476   28AF             _if102_true:
5477   28AF             ;; t++; 
5478   28AF 2C FD FF      mov b, [bp + -3] ; $t             
5479   28B2 FD 79         mov g, b
5480   28B4 FD 77         inc b
5481   28B6 FA FD FF      lea d, [bp + -3] ; $t
5482   28B9 FD 43         mov [d], b
5483   28BB FD 27         mov b, g
5484   28BD             ;; while(*t != '\"' && *t){ 
5485   28BD             _while103_cond:
5486   28BD 2C FD FF      mov b, [bp + -3] ; $t             
5487   28C0 74            mov d, b
5488   28C1 32            mov bl, [d]
5489   28C2 A7 00         mov bh, 0
5490   28C4             ; START RELATIONAL
5491   28C4 D7            push a
5492   28C5 11            mov a, b
5493   28C6 26 22 00      mov b, $22
5494   28C9 B0            cmp a, b
5495   28CA FD 72         sneq ; !=
5496   28CC E4            pop a
5497   28CD             ; END RELATIONAL
5498   28CD D7            push a
5499   28CE 11            mov a, b
5500   28CF 2C FD FF      mov b, [bp + -3] ; $t             
5501   28D2 74            mov d, b
5502   28D3 32            mov bl, [d]
5503   28D4 A7 00         mov bh, 0
5504   28D6 FD A7         sand a, b ; &&
5505   28D8 E4            pop a
5506   28D9 C0 00 00      cmp b, 0
5507   28DC C6 06 29      je _while103_exit
5508   28DF             _while103_block:
5509   28DF             ;; *s++ = *t++; 
5510   28DF 2C FF FF      mov b, [bp + -1] ; $s             
5511   28E2 FD 79         mov g, b
5512   28E4 FD 77         inc b
5513   28E6 FA FF FF      lea d, [bp + -1] ; $s
5514   28E9 FD 43         mov [d], b
5515   28EB FD 27         mov b, g
5516   28ED D8            push b
5517   28EE 2C FD FF      mov b, [bp + -3] ; $t             
5518   28F1 FD 79         mov g, b
5519   28F3 FD 77         inc b
5520   28F5 FA FD FF      lea d, [bp + -3] ; $t
5521   28F8 FD 43         mov [d], b
5522   28FA FD 27         mov b, g
5523   28FC 74            mov d, b
5524   28FD 32            mov bl, [d]
5525   28FE A7 00         mov bh, 0
5526   2900 E7            pop d
5527   2901 FD 3E         mov [d], bl
5528   2903 0A BD 28      jmp _while103_cond
5529   2906             _while103_exit:
5530   2906 0A 09 29      jmp _if102_exit
5531   2909             _if102_exit:
5532   2909             _if99_exit:
5533   2909             ;; *s = '\0'; 
5534   2909 2C FF FF      mov b, [bp + -1] ; $s             
5535   290C D8            push b
5536   290D 26 00 00      mov b, $0
5537   2910 E7            pop d
5538   2911 FD 3E         mov [d], bl
5539   2913 F9            leave
5540   2914 09            ret
5541   2915             
5542   2915             error:
5543   2915 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5544   2918             ;; printf("\nError: "); 
5545   2918 26 D1 38      mov b, __s14 ; "\nError: "
5546   291B FD AB         swp b
5547   291D D8            push b
5548   291E 07 4E 0E      call printf
5549   2921 51 02 00      add sp, 2
5550   2924             ;; printf(msg); 
5551   2924 2C 05 00      mov b, [bp + 5] ; $msg             
5552   2927 FD AB         swp b
5553   2929 D8            push b
5554   292A 07 4E 0E      call printf
5555   292D 51 02 00      add sp, 2
5556   2930             ;; printf("\n"); 
5557   2930 26 DA 38      mov b, __s15 ; "\n"
5558   2933 FD AB         swp b
5559   2935 D8            push b
5560   2936 07 4E 0E      call printf
5561   2939 51 02 00      add sp, 2
5562   293C F9            leave
5563   293D 09            ret
5564   293E             
5565   293E             last_cmd_insert:
5566   293E F8 00 00      enter 0 ; (push bp; mov bp, sp)
5567   2941             ;; if(last_cmd[0]){ 
5568   2941             _if104_cond:
5569   2941 3B 87 36      mov d, _last_cmd_data ; $last_cmd
5570   2944 D7            push a         
5571   2945 26 00 00      mov b, $0        
5572   2948 5A            add d, b
5573   2949 E4            pop a
5574   294A 32            mov bl, [d]
5575   294B A7 00         mov bh, 0
5576   294D C0 00 00      cmp b, 0
5577   2950 C6 74 29      je _if104_exit
5578   2953             _if104_true:
5579   2953             ;; strcpy(command, last_cmd); 
5580   2953 26 87 31      mov b, _command_data ; $command           
5581   2956 FD AB         swp b
5582   2958 D8            push b
5583   2959 26 87 36      mov b, _last_cmd_data ; $last_cmd           
5584   295C FD AB         swp b
5585   295E D8            push b
5586   295F 07 2C 0C      call strcpy
5587   2962 51 04 00      add sp, 4
5588   2965             ;; printf(command); 
5589   2965 26 87 31      mov b, _command_data ; $command           
5590   2968 FD AB         swp b
5591   296A D8            push b
5592   296B 07 4E 0E      call printf
5593   296E 51 02 00      add sp, 2
5594   2971 0A 74 29      jmp _if104_exit
5595   2974             _if104_exit:
5596   2974 F9            leave
5597   2975 09            ret
5598   2976             
5599   2976             set_string_var:
5600   2976 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5601   2979             ; $i 
5602   2979 52 02 00      sub sp, 2
5603   297C             ;; for(i = 0; i < vars_tos; i++){ 
5604   297C             _for105_init:
5605   297C FA FF FF      lea d, [bp + -1] ; $i         
5606   297F 26 00 00      mov b, $0        
5607   2982 FD 43         mov [d], b
5608   2984             _for105_cond:
5609   2984 2C FF FF      mov b, [bp + -1] ; $i             
5610   2987             ; START RELATIONAL
5611   2987 D7            push a
5612   2988 11            mov a, b
5613   2989 29 D9 37      mov b, [_vars_tos] ; $vars_tos           
5614   298C B0            cmp a, b
5615   298D FD 73         slt ; < 
5616   298F E4            pop a
5617   2990             ; END RELATIONAL
5618   2990 C0 00 00      cmp b, 0
5619   2993 C6 FC 29      je _for105_exit
5620   2996             _for105_block:
5621   2996             ;; if(!strcmp(variables[i].varname, varname)){ 
5622   2996             _if106_cond:
5623   2996 3B 07 37      mov d, _variables_data ; $variables
5624   2999 D7            push a         
5625   299A 2C FF FF      mov b, [bp + -1] ; $i                     
5626   299D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5627   29A1 E4            pop a
5628   29A2 58 00 00      add d, 0
5629   29A5 FD 14         clb
5630   29A7 2D            mov b, d
5631   29A8 FD AB         swp b
5632   29AA D8            push b
5633   29AB 2C 07 00      mov b, [bp + 7] ; $varname             
5634   29AE FD AB         swp b
5635   29B0 D8            push b
5636   29B1 07 82 0C      call strcmp
5637   29B4 51 04 00      add sp, 4
5638   29B7 C0 00 00      cmp b, 0
5639   29BA FD 71         seq ; !
5640   29BC C0 00 00      cmp b, 0
5641   29BF C6 EB 29      je _if106_exit
5642   29C2             _if106_true:
5643   29C2             ;; strcpy(variables[vars_tos].as_string, strval); 
5644   29C2 3B 07 37      mov d, _variables_data ; $variables
5645   29C5 D7            push a         
5646   29C6 29 D9 37      mov b, [_vars_tos] ; $vars_tos                   
5647   29C9 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5648   29CD E4            pop a
5649   29CE 58 11 00      add d, 17
5650   29D1 FD 14         clb
5651   29D3 2A            mov b, [d]
5652   29D4 FD AB         swp b
5653   29D6 D8            push b
5654   29D7 2C 05 00      mov b, [bp + 5] ; $strval             
5655   29DA FD AB         swp b
5656   29DC D8            push b
5657   29DD 07 2C 0C      call strcpy
5658   29E0 51 04 00      add sp, 4
5659   29E3             ;; return i; 
5660   29E3 2C FF FF      mov b, [bp + -1] ; $i             
5661   29E6 F9            leave
5662   29E7 09            ret
5663   29E8 0A EB 29      jmp _if106_exit
5664   29EB             _if106_exit:
5665   29EB             _for105_update:
5666   29EB 2C FF FF      mov b, [bp + -1] ; $i             
5667   29EE FD 79         mov g, b
5668   29F0 FD 77         inc b
5669   29F2 FA FF FF      lea d, [bp + -1] ; $i
5670   29F5 FD 43         mov [d], b
5671   29F7 FD 27         mov b, g
5672   29F9 0A 84 29      jmp _for105_cond
5673   29FC             _for105_exit:
5674   29FC             ;; variables[vars_tos].var_type = SHELL_VAR_TYP_STR; 
5675   29FC 3B 07 37      mov d, _variables_data ; $variables
5676   29FF D7            push a         
5677   2A00 29 D9 37      mov b, [_vars_tos] ; $vars_tos                   
5678   2A03 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5679   2A07 E4            pop a
5680   2A08 58 10 00      add d, 16
5681   2A0B FD 14         clb         
5682   2A0D 26 00 00      mov b, 0; SHELL_VAR_TYP_STR        
5683   2A10 FD 3E         mov [d], bl
5684   2A12             ;; variables[vars_tos].as_string = alloc(strlen(strval) + 1); 
5685   2A12 3B 07 37      mov d, _variables_data ; $variables
5686   2A15 D7            push a         
5687   2A16 29 D9 37      mov b, [_vars_tos] ; $vars_tos                   
5688   2A19 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5689   2A1D E4            pop a
5690   2A1E 58 11 00      add d, 17
5691   2A21 FD 14         clb
5692   2A23 DA            push d
5693   2A24 2C 05 00      mov b, [bp + 5] ; $strval             
5694   2A27 FD AB         swp b
5695   2A29 D8            push b
5696   2A2A 07 7E 0D      call strlen
5697   2A2D 51 02 00      add sp, 2
5698   2A30             ; START TERMS
5699   2A30 D7            push a
5700   2A31 11            mov a, b
5701   2A32 26 01 00      mov b, $1
5702   2A35 54            add a, b
5703   2A36 27            mov b, a
5704   2A37 E4            pop a
5705   2A38             ; END TERMS
5706   2A38 FD AB         swp b
5707   2A3A D8            push b
5708   2A3B 07 4A 14      call alloc
5709   2A3E 51 02 00      add sp, 2
5710   2A41 E7            pop d
5711   2A42 FD 43         mov [d], b
5712   2A44             ;; strcpy(variables[vars_tos].varname, varname); 
5713   2A44 3B 07 37      mov d, _variables_data ; $variables
5714   2A47 D7            push a         
5715   2A48 29 D9 37      mov b, [_vars_tos] ; $vars_tos                   
5716   2A4B FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5717   2A4F E4            pop a
5718   2A50 58 00 00      add d, 0
5719   2A53 FD 14         clb
5720   2A55 2D            mov b, d
5721   2A56 FD AB         swp b
5722   2A58 D8            push b
5723   2A59 2C 07 00      mov b, [bp + 7] ; $varname             
5724   2A5C FD AB         swp b
5725   2A5E D8            push b
5726   2A5F 07 2C 0C      call strcpy
5727   2A62 51 04 00      add sp, 4
5728   2A65             ;; strcpy(variables[vars_tos].as_string, strval); 
5729   2A65 3B 07 37      mov d, _variables_data ; $variables
5730   2A68 D7            push a         
5731   2A69 29 D9 37      mov b, [_vars_tos] ; $vars_tos                   
5732   2A6C FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5733   2A70 E4            pop a
5734   2A71 58 11 00      add d, 17
5735   2A74 FD 14         clb
5736   2A76 2A            mov b, [d]
5737   2A77 FD AB         swp b
5738   2A79 D8            push b
5739   2A7A 2C 05 00      mov b, [bp + 5] ; $strval             
5740   2A7D FD AB         swp b
5741   2A7F D8            push b
5742   2A80 07 2C 0C      call strcpy
5743   2A83 51 04 00      add sp, 4
5744   2A86             ;; vars_tos++; 
5745   2A86 29 D9 37      mov b, [_vars_tos] ; $vars_tos           
5746   2A89 FD 79         mov g, b
5747   2A8B FD 77         inc b
5748   2A8D 3B D9 37      mov d, _vars_tos ; $vars_tos
5749   2A90 FD 43         mov [d], b
5750   2A92 FD 27         mov b, g
5751   2A94             ;; return vars_tos - 1; 
5752   2A94 29 D9 37      mov b, [_vars_tos] ; $vars_tos           
5753   2A97             ; START TERMS
5754   2A97 D7            push a
5755   2A98 11            mov a, b
5756   2A99 26 01 00      mov b, $1
5757   2A9C 60            sub a, b
5758   2A9D 27            mov b, a
5759   2A9E E4            pop a
5760   2A9F             ; END TERMS
5761   2A9F F9            leave
5762   2AA0 09            ret
5763   2AA1             
5764   2AA1             set_int_var:
5765   2AA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5766   2AA4             ; $i 
5767   2AA4 52 02 00      sub sp, 2
5768   2AA7             ;; for(i = 0; i < vars_tos; i++){ 
5769   2AA7             _for107_init:
5770   2AA7 FA FF FF      lea d, [bp + -1] ; $i         
5771   2AAA 26 00 00      mov b, $0        
5772   2AAD FD 43         mov [d], b
5773   2AAF             _for107_cond:
5774   2AAF 2C FF FF      mov b, [bp + -1] ; $i             
5775   2AB2             ; START RELATIONAL
5776   2AB2 D7            push a
5777   2AB3 11            mov a, b
5778   2AB4 29 D9 37      mov b, [_vars_tos] ; $vars_tos           
5779   2AB7 B0            cmp a, b
5780   2AB8 FD 73         slt ; < 
5781   2ABA E4            pop a
5782   2ABB             ; END RELATIONAL
5783   2ABB C0 00 00      cmp b, 0
5784   2ABE C6 1C 2B      je _for107_exit
5785   2AC1             _for107_block:
5786   2AC1             ;; if(!strcmp(variables[i].varname, varname)){ 
5787   2AC1             _if108_cond:
5788   2AC1 3B 07 37      mov d, _variables_data ; $variables
5789   2AC4 D7            push a         
5790   2AC5 2C FF FF      mov b, [bp + -1] ; $i                     
5791   2AC8 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5792   2ACC E4            pop a
5793   2ACD 58 00 00      add d, 0
5794   2AD0 FD 14         clb
5795   2AD2 2D            mov b, d
5796   2AD3 FD AB         swp b
5797   2AD5 D8            push b
5798   2AD6 2C 07 00      mov b, [bp + 7] ; $varname             
5799   2AD9 FD AB         swp b
5800   2ADB D8            push b
5801   2ADC 07 82 0C      call strcmp
5802   2ADF 51 04 00      add sp, 4
5803   2AE2 C0 00 00      cmp b, 0
5804   2AE5 FD 71         seq ; !
5805   2AE7 C0 00 00      cmp b, 0
5806   2AEA C6 0B 2B      je _if108_exit
5807   2AED             _if108_true:
5808   2AED             ;; variables[vars_tos].as_int = as_int; 
5809   2AED 3B 07 37      mov d, _variables_data ; $variables
5810   2AF0 D7            push a         
5811   2AF1 29 D9 37      mov b, [_vars_tos] ; $vars_tos                   
5812   2AF4 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5813   2AF8 E4            pop a
5814   2AF9 58 13 00      add d, 19
5815   2AFC FD 14         clb         
5816   2AFE 2C 05 00      mov b, [bp + 5] ; $as_int                     
5817   2B01 FD 43         mov [d], b
5818   2B03             ;; return i; 
5819   2B03 2C FF FF      mov b, [bp + -1] ; $i             
5820   2B06 F9            leave
5821   2B07 09            ret
5822   2B08 0A 0B 2B      jmp _if108_exit
5823   2B0B             _if108_exit:
5824   2B0B             _for107_update:
5825   2B0B 2C FF FF      mov b, [bp + -1] ; $i             
5826   2B0E FD 79         mov g, b
5827   2B10 FD 77         inc b
5828   2B12 FA FF FF      lea d, [bp + -1] ; $i
5829   2B15 FD 43         mov [d], b
5830   2B17 FD 27         mov b, g
5831   2B19 0A AF 2A      jmp _for107_cond
5832   2B1C             _for107_exit:
5833   2B1C             ;; variables[vars_tos].var_type = SHELL_VAR_TYP_INT; 
5834   2B1C 3B 07 37      mov d, _variables_data ; $variables
5835   2B1F D7            push a         
5836   2B20 29 D9 37      mov b, [_vars_tos] ; $vars_tos                   
5837   2B23 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5838   2B27 E4            pop a
5839   2B28 58 10 00      add d, 16
5840   2B2B FD 14         clb         
5841   2B2D 26 01 00      mov b, 1; SHELL_VAR_TYP_INT        
5842   2B30 FD 3E         mov [d], bl
5843   2B32             ;; strcpy(variables[vars_tos].varname, varname); 
5844   2B32 3B 07 37      mov d, _variables_data ; $variables
5845   2B35 D7            push a         
5846   2B36 29 D9 37      mov b, [_vars_tos] ; $vars_tos                   
5847   2B39 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5848   2B3D E4            pop a
5849   2B3E 58 00 00      add d, 0
5850   2B41 FD 14         clb
5851   2B43 2D            mov b, d
5852   2B44 FD AB         swp b
5853   2B46 D8            push b
5854   2B47 2C 07 00      mov b, [bp + 7] ; $varname             
5855   2B4A FD AB         swp b
5856   2B4C D8            push b
5857   2B4D 07 2C 0C      call strcpy
5858   2B50 51 04 00      add sp, 4
5859   2B53             ;; variables[vars_tos].as_int = as_int; 
5860   2B53 3B 07 37      mov d, _variables_data ; $variables
5861   2B56 D7            push a         
5862   2B57 29 D9 37      mov b, [_vars_tos] ; $vars_tos                   
5863   2B5A FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5864   2B5E E4            pop a
5865   2B5F 58 13 00      add d, 19
5866   2B62 FD 14         clb         
5867   2B64 2C 05 00      mov b, [bp + 5] ; $as_int                     
5868   2B67 FD 43         mov [d], b
5869   2B69             ;; vars_tos++; 
5870   2B69 29 D9 37      mov b, [_vars_tos] ; $vars_tos           
5871   2B6C FD 79         mov g, b
5872   2B6E FD 77         inc b
5873   2B70 3B D9 37      mov d, _vars_tos ; $vars_tos
5874   2B73 FD 43         mov [d], b
5875   2B75 FD 27         mov b, g
5876   2B77             ;; return vars_tos - 1; 
5877   2B77 29 D9 37      mov b, [_vars_tos] ; $vars_tos           
5878   2B7A             ; START TERMS
5879   2B7A D7            push a
5880   2B7B 11            mov a, b
5881   2B7C 26 01 00      mov b, $1
5882   2B7F 60            sub a, b
5883   2B80 27            mov b, a
5884   2B81 E4            pop a
5885   2B82             ; END TERMS
5886   2B82 F9            leave
5887   2B83 09            ret
5888   2B84             
5889   2B84             get_var_index:
5890   2B84 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5891   2B87             ; $i 
5892   2B87 52 02 00      sub sp, 2
5893   2B8A             ;; for(i = 0; i < vars_tos; i++) 
5894   2B8A             _for109_init:
5895   2B8A FA FF FF      lea d, [bp + -1] ; $i         
5896   2B8D 26 00 00      mov b, $0        
5897   2B90 FD 43         mov [d], b
5898   2B92             _for109_cond:
5899   2B92 2C FF FF      mov b, [bp + -1] ; $i             
5900   2B95             ; START RELATIONAL
5901   2B95 D7            push a
5902   2B96 11            mov a, b
5903   2B97 29 D9 37      mov b, [_vars_tos] ; $vars_tos           
5904   2B9A B0            cmp a, b
5905   2B9B FD 73         slt ; < 
5906   2B9D E4            pop a
5907   2B9E             ; END RELATIONAL
5908   2B9E C0 00 00      cmp b, 0
5909   2BA1 C6 E9 2B      je _for109_exit
5910   2BA4             _for109_block:
5911   2BA4             ;; if(!strcmp(variables[i].varname, varname)) return i; 
5912   2BA4             _if110_cond:
5913   2BA4 3B 07 37      mov d, _variables_data ; $variables
5914   2BA7 D7            push a         
5915   2BA8 2C FF FF      mov b, [bp + -1] ; $i                     
5916   2BAB FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5917   2BAF E4            pop a
5918   2BB0 58 00 00      add d, 0
5919   2BB3 FD 14         clb
5920   2BB5 2D            mov b, d
5921   2BB6 FD AB         swp b
5922   2BB8 D8            push b
5923   2BB9 2C 05 00      mov b, [bp + 5] ; $varname             
5924   2BBC FD AB         swp b
5925   2BBE D8            push b
5926   2BBF 07 82 0C      call strcmp
5927   2BC2 51 04 00      add sp, 4
5928   2BC5 C0 00 00      cmp b, 0
5929   2BC8 FD 71         seq ; !
5930   2BCA C0 00 00      cmp b, 0
5931   2BCD C6 D8 2B      je _if110_exit
5932   2BD0             _if110_true:
5933   2BD0             ;; return i; 
5934   2BD0 2C FF FF      mov b, [bp + -1] ; $i             
5935   2BD3 F9            leave
5936   2BD4 09            ret
5937   2BD5 0A D8 2B      jmp _if110_exit
5938   2BD8             _if110_exit:
5939   2BD8             _for109_update:
5940   2BD8 2C FF FF      mov b, [bp + -1] ; $i             
5941   2BDB FD 79         mov g, b
5942   2BDD FD 77         inc b
5943   2BDF FA FF FF      lea d, [bp + -1] ; $i
5944   2BE2 FD 43         mov [d], b
5945   2BE4 FD 27         mov b, g
5946   2BE6 0A 92 2B      jmp _for109_cond
5947   2BE9             _for109_exit:
5948   2BE9             ;; return -1; 
5949   2BE9 26 01 00      mov b, $1
5950   2BEC FD 97         neg b
5951   2BEE F9            leave
5952   2BEF 09            ret
5953   2BF0             
5954   2BF0             get_var_type:
5955   2BF0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5956   2BF3             ; $i 
5957   2BF3 52 02 00      sub sp, 2
5958   2BF6             ;; for(i = 0; i < vars_tos; i++) 
5959   2BF6             _for111_init:
5960   2BF6 FA FF FF      lea d, [bp + -1] ; $i         
5961   2BF9 26 00 00      mov b, $0        
5962   2BFC FD 43         mov [d], b
5963   2BFE             _for111_cond:
5964   2BFE 2C FF FF      mov b, [bp + -1] ; $i             
5965   2C01             ; START RELATIONAL
5966   2C01 D7            push a
5967   2C02 11            mov a, b
5968   2C03 29 D9 37      mov b, [_vars_tos] ; $vars_tos           
5969   2C06 B0            cmp a, b
5970   2C07 FD 73         slt ; < 
5971   2C09 E4            pop a
5972   2C0A             ; END RELATIONAL
5973   2C0A C0 00 00      cmp b, 0
5974   2C0D C6 66 2C      je _for111_exit
5975   2C10             _for111_block:
5976   2C10             ;; if(!strcmp(variables[i].varname, varname)) return variables[i].var_type; 
5977   2C10             _if112_cond:
5978   2C10 3B 07 37      mov d, _variables_data ; $variables
5979   2C13 D7            push a         
5980   2C14 2C FF FF      mov b, [bp + -1] ; $i                     
5981   2C17 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
5982   2C1B E4            pop a
5983   2C1C 58 00 00      add d, 0
5984   2C1F FD 14         clb
5985   2C21 2D            mov b, d
5986   2C22 FD AB         swp b
5987   2C24 D8            push b
5988   2C25 2C 05 00      mov b, [bp + 5] ; $varname             
5989   2C28 FD AB         swp b
5990   2C2A D8            push b
5991   2C2B 07 82 0C      call strcmp
5992   2C2E 51 04 00      add sp, 4
5993   2C31 C0 00 00      cmp b, 0
5994   2C34 FD 71         seq ; !
5995   2C36 C0 00 00      cmp b, 0
5996   2C39 C6 55 2C      je _if112_exit
5997   2C3C             _if112_true:
5998   2C3C             ;; return variables[i].var_type; 
5999   2C3C 3B 07 37      mov d, _variables_data ; $variables
6000   2C3F D7            push a         
6001   2C40 2C FF FF      mov b, [bp + -1] ; $i                     
6002   2C43 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6003   2C47 E4            pop a
6004   2C48 58 10 00      add d, 16
6005   2C4B FD 14         clb
6006   2C4D 32            mov bl, [d]
6007   2C4E A7 00         mov bh, 0
6008   2C50 F9            leave
6009   2C51 09            ret
6010   2C52 0A 55 2C      jmp _if112_exit
6011   2C55             _if112_exit:
6012   2C55             _for111_update:
6013   2C55 2C FF FF      mov b, [bp + -1] ; $i             
6014   2C58 FD 79         mov g, b
6015   2C5A FD 77         inc b
6016   2C5C FA FF FF      lea d, [bp + -1] ; $i
6017   2C5F FD 43         mov [d], b
6018   2C61 FD 27         mov b, g
6019   2C63 0A FE 2B      jmp _for111_cond
6020   2C66             _for111_exit:
6021   2C66             ;; return -1; 
6022   2C66 26 01 00      mov b, $1
6023   2C69 FD 97         neg b
6024   2C6B F9            leave
6025   2C6C 09            ret
6026   2C6D             
6027   2C6D             show_var:
6028   2C6D F8 00 00      enter 0 ; (push bp; mov bp, sp)
6029   2C70             ; $i 
6030   2C70 52 02 00      sub sp, 2
6031   2C73             ;; for(i = 0; i < vars_tos; i++){ 
6032   2C73             _for113_init:
6033   2C73 FA FF FF      lea d, [bp + -1] ; $i         
6034   2C76 26 00 00      mov b, $0        
6035   2C79 FD 43         mov [d], b
6036   2C7B             _for113_cond:
6037   2C7B 2C FF FF      mov b, [bp + -1] ; $i             
6038   2C7E             ; START RELATIONAL
6039   2C7E D7            push a
6040   2C7F 11            mov a, b
6041   2C80 29 D9 37      mov b, [_vars_tos] ; $vars_tos           
6042   2C83 B0            cmp a, b
6043   2C84 FD 73         slt ; < 
6044   2C86 E4            pop a
6045   2C87             ; END RELATIONAL
6046   2C87 C0 00 00      cmp b, 0
6047   2C8A C6 54 2D      je _for113_exit
6048   2C8D             _for113_block:
6049   2C8D             ;; if(!strcmp(variables[i].varname, varname)){ 
6050   2C8D             _if114_cond:
6051   2C8D 3B 07 37      mov d, _variables_data ; $variables
6052   2C90 D7            push a         
6053   2C91 2C FF FF      mov b, [bp + -1] ; $i                     
6054   2C94 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6055   2C98 E4            pop a
6056   2C99 58 00 00      add d, 0
6057   2C9C FD 14         clb
6058   2C9E 2D            mov b, d
6059   2C9F FD AB         swp b
6060   2CA1 D8            push b
6061   2CA2 2C 05 00      mov b, [bp + 5] ; $varname             
6062   2CA5 FD AB         swp b
6063   2CA7 D8            push b
6064   2CA8 07 82 0C      call strcmp
6065   2CAB 51 04 00      add sp, 4
6066   2CAE C0 00 00      cmp b, 0
6067   2CB1 FD 71         seq ; !
6068   2CB3 C0 00 00      cmp b, 0
6069   2CB6 C6 43 2D      je _if114_exit
6070   2CB9             _if114_true:
6071   2CB9             ;; if(variables[i].var_type == SHELL_VAR_TYP_INT){ 
6072   2CB9             _if115_cond:
6073   2CB9 3B 07 37      mov d, _variables_data ; $variables
6074   2CBC D7            push a         
6075   2CBD 2C FF FF      mov b, [bp + -1] ; $i                     
6076   2CC0 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6077   2CC4 E4            pop a
6078   2CC5 58 10 00      add d, 16
6079   2CC8 FD 14         clb
6080   2CCA 32            mov bl, [d]
6081   2CCB A7 00         mov bh, 0
6082   2CCD             ; START RELATIONAL
6083   2CCD D7            push a
6084   2CCE 11            mov a, b
6085   2CCF 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
6086   2CD2 B0            cmp a, b
6087   2CD3 FD 71         seq ; ==
6088   2CD5 E4            pop a
6089   2CD6             ; END RELATIONAL
6090   2CD6 C0 00 00      cmp b, 0
6091   2CD9 C6 FA 2C      je _if115_else
6092   2CDC             _if115_true:
6093   2CDC             ;; printu(variables[i].as_int); 
6094   2CDC 3B 07 37      mov d, _variables_data ; $variables
6095   2CDF D7            push a         
6096   2CE0 2C FF FF      mov b, [bp + -1] ; $i                     
6097   2CE3 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6098   2CE7 E4            pop a
6099   2CE8 58 13 00      add d, 19
6100   2CEB FD 14         clb
6101   2CED 2A            mov b, [d]
6102   2CEE FD AB         swp b
6103   2CF0 D8            push b
6104   2CF1 07 F5 12      call printu
6105   2CF4 51 02 00      add sp, 2
6106   2CF7 0A 3B 2D      jmp _if115_exit
6107   2CFA             _if115_else:
6108   2CFA             ;; if(variables[i].var_type == SHELL_VAR_TYP_STR){ 
6109   2CFA             _if116_cond:
6110   2CFA 3B 07 37      mov d, _variables_data ; $variables
6111   2CFD D7            push a         
6112   2CFE 2C FF FF      mov b, [bp + -1] ; $i                     
6113   2D01 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6114   2D05 E4            pop a
6115   2D06 58 10 00      add d, 16
6116   2D09 FD 14         clb
6117   2D0B 32            mov bl, [d]
6118   2D0C A7 00         mov bh, 0
6119   2D0E             ; START RELATIONAL
6120   2D0E D7            push a
6121   2D0F 11            mov a, b
6122   2D10 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
6123   2D13 B0            cmp a, b
6124   2D14 FD 71         seq ; ==
6125   2D16 E4            pop a
6126   2D17             ; END RELATIONAL
6127   2D17 C0 00 00      cmp b, 0
6128   2D1A C6 3B 2D      je _if116_exit
6129   2D1D             _if116_true:
6130   2D1D             ;; printf(variables[i].as_string); 
6131   2D1D 3B 07 37      mov d, _variables_data ; $variables
6132   2D20 D7            push a         
6133   2D21 2C FF FF      mov b, [bp + -1] ; $i                     
6134   2D24 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6135   2D28 E4            pop a
6136   2D29 58 11 00      add d, 17
6137   2D2C FD 14         clb
6138   2D2E 2A            mov b, [d]
6139   2D2F FD AB         swp b
6140   2D31 D8            push b
6141   2D32 07 4E 0E      call printf
6142   2D35 51 02 00      add sp, 2
6143   2D38 0A 3B 2D      jmp _if116_exit
6144   2D3B             _if116_exit:
6145   2D3B             _if115_exit:
6146   2D3B             ;; return i; 
6147   2D3B 2C FF FF      mov b, [bp + -1] ; $i             
6148   2D3E F9            leave
6149   2D3F 09            ret
6150   2D40 0A 43 2D      jmp _if114_exit
6151   2D43             _if114_exit:
6152   2D43             _for113_update:
6153   2D43 2C FF FF      mov b, [bp + -1] ; $i             
6154   2D46 FD 79         mov g, b
6155   2D48 FD 77         inc b
6156   2D4A FA FF FF      lea d, [bp + -1] ; $i
6157   2D4D FD 43         mov [d], b
6158   2D4F FD 27         mov b, g
6159   2D51 0A 7B 2C      jmp _for113_cond
6160   2D54             _for113_exit:
6161   2D54             ;; error("Undeclared variable."); 
6162   2D54 26 DC 38      mov b, __s16 ; "Undeclared variable."
6163   2D57 FD AB         swp b
6164   2D59 D8            push b
6165   2D5A 07 15 29      call error
6166   2D5D 51 02 00      add sp, 2
6167   2D60 F9            leave
6168   2D61 09            ret
6169   2D62             
6170   2D62             get_shell_var_strval:
6171   2D62 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6172   2D65             ;; return variables[index].as_string; 
6173   2D65 3B 07 37      mov d, _variables_data ; $variables
6174   2D68 D7            push a         
6175   2D69 2C 05 00      mov b, [bp + 5] ; $index                     
6176   2D6C FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6177   2D70 E4            pop a
6178   2D71 58 11 00      add d, 17
6179   2D74 FD 14         clb
6180   2D76 2A            mov b, [d]
6181   2D77 F9            leave
6182   2D78 09            ret
6183   2D79             
6184   2D79             get_shell_var_intval:
6185   2D79 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6186   2D7C             ;; return variables[index].as_int; 
6187   2D7C 3B 07 37      mov d, _variables_data ; $variables
6188   2D7F D7            push a         
6189   2D80 2C 05 00      mov b, [bp + 5] ; $index                     
6190   2D83 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6191   2D87 E4            pop a
6192   2D88 58 13 00      add d, 19
6193   2D8B FD 14         clb
6194   2D8D 2A            mov b, [d]
6195   2D8E F9            leave
6196   2D8F 09            ret
6197   2D90             
6198   2D90             file_exists:
6199   2D90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6200   2D93             ; $file_exists 
6201   2D93 52 02 00      sub sp, 2
6202   2D96             
6203   2D96             ; --- BEGIN INLINE ASM BLOCK
6204   2D96 FA 05 00      lea d, [bp + 5] ; $filename
6205   2D99 FD 2A         mov d, [d]
6206   2D9B 19 15         mov al, 21
6207   2D9D 05 04         syscall sys_filesystem
6208   2D9F FA FF FF      lea d, [bp + -1] ; $file_exists
6209   2DA2 43            mov [d], a
6210   2DA3             ; --- END INLINE ASM BLOCK
6211   2DA3             
6212   2DA3             ;; return file_exists; 
6213   2DA3 2C FF FF      mov b, [bp + -1] ; $file_exists             
6214   2DA6 F9            leave
6215   2DA7 09            ret
6216   2DA8             
6217   2DA8             command_cd:
6218   2DA8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6219   2DAB             ; $dirID 
6220   2DAB 52 02 00      sub sp, 2
6221   2DAE             ;; *path = '\0'; 
6222   2DAE 26 87 33      mov b, _path_data ; $path           
6223   2DB1 D8            push b
6224   2DB2 26 00 00      mov b, $0
6225   2DB5 E7            pop d
6226   2DB6 FD 3E         mov [d], bl
6227   2DB8             ;; get(); 
6228   2DB8 07 1F 1A      call get
6229   2DBB             ;; if(toktype == END || tok == SEMICOLON || tok == BITWISE_NOT){ 
6230   2DBB             _if117_cond:
6231   2DBB 29 81 2F      mov b, [_toktype] ; $toktype           
6232   2DBE             ; START RELATIONAL
6233   2DBE D7            push a
6234   2DBF 11            mov a, b
6235   2DC0 26 06 00      mov b, 6; END
6236   2DC3 B0            cmp a, b
6237   2DC4 FD 71         seq ; ==
6238   2DC6 E4            pop a
6239   2DC7             ; END RELATIONAL
6240   2DC7 D7            push a
6241   2DC8 11            mov a, b
6242   2DC9 29 7F 2F      mov b, [_tok] ; $tok           
6243   2DCC             ; START RELATIONAL
6244   2DCC D7            push a
6245   2DCD 11            mov a, b
6246   2DCE 26 23 00      mov b, 35; SEMICOLON
6247   2DD1 B0            cmp a, b
6248   2DD2 FD 71         seq ; ==
6249   2DD4 E4            pop a
6250   2DD5             ; END RELATIONAL
6251   2DD5 FD A8         sor a, b ; ||
6252   2DD7 11            mov a, b
6253   2DD8 29 7F 2F      mov b, [_tok] ; $tok           
6254   2DDB             ; START RELATIONAL
6255   2DDB D7            push a
6256   2DDC 11            mov a, b
6257   2DDD 26 19 00      mov b, 25; BITWISE_NOT
6258   2DE0 B0            cmp a, b
6259   2DE1 FD 71         seq ; ==
6260   2DE3 E4            pop a
6261   2DE4             ; END RELATIONAL
6262   2DE4 FD A8         sor a, b ; ||
6263   2DE6 E4            pop a
6264   2DE7 C0 00 00      cmp b, 0
6265   2DEA C6 0E 2E      je _if117_else
6266   2DED             _if117_true:
6267   2DED             ;; back(); 
6268   2DED 07 74 18      call back
6269   2DF0             ;; cd_to_dir(variables[1].as_string); 
6270   2DF0 3B 07 37      mov d, _variables_data ; $variables
6271   2DF3 D7            push a         
6272   2DF4 26 01 00      mov b, $1        
6273   2DF7 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6274   2DFB E4            pop a
6275   2DFC 58 11 00      add d, 17
6276   2DFF FD 14         clb
6277   2E01 2A            mov b, [d]
6278   2E02 FD AB         swp b
6279   2E04 D8            push b
6280   2E05 07 67 2E      call cd_to_dir
6281   2E08 51 02 00      add sp, 2
6282   2E0B 0A 65 2E      jmp _if117_exit
6283   2E0E             _if117_else:
6284   2E0E             ;; for(;;){ 
6285   2E0E             _for118_init:
6286   2E0E             _for118_cond:
6287   2E0E             _for118_block:
6288   2E0E             ;; strcat(path, token); 
6289   2E0E 26 87 33      mov b, _path_data ; $path           
6290   2E11 FD AB         swp b
6291   2E13 D8            push b
6292   2E14 26 85 2F      mov b, _token_data ; $token           
6293   2E17 FD AB         swp b
6294   2E19 D8            push b
6295   2E1A 07 DF 0C      call strcat
6296   2E1D 51 04 00      add sp, 4
6297   2E20             ;; get(); 
6298   2E20 07 1F 1A      call get
6299   2E23             ;; if(toktype == END) break; 
6300   2E23             _if119_cond:
6301   2E23 29 81 2F      mov b, [_toktype] ; $toktype           
6302   2E26             ; START RELATIONAL
6303   2E26 D7            push a
6304   2E27 11            mov a, b
6305   2E28 26 06 00      mov b, 6; END
6306   2E2B B0            cmp a, b
6307   2E2C FD 71         seq ; ==
6308   2E2E E4            pop a
6309   2E2F             ; END RELATIONAL
6310   2E2F C0 00 00      cmp b, 0
6311   2E32 C6 3B 2E      je _if119_else
6312   2E35             _if119_true:
6313   2E35             ;; break; 
6314   2E35 0A 59 2E      jmp _for118_exit ; for break
6315   2E38 0A 56 2E      jmp _if119_exit
6316   2E3B             _if119_else:
6317   2E3B             ;; if(tok == SEMICOLON){ 
6318   2E3B             _if120_cond:
6319   2E3B 29 7F 2F      mov b, [_tok] ; $tok           
6320   2E3E             ; START RELATIONAL
6321   2E3E D7            push a
6322   2E3F 11            mov a, b
6323   2E40 26 23 00      mov b, 35; SEMICOLON
6324   2E43 B0            cmp a, b
6325   2E44 FD 71         seq ; ==
6326   2E46 E4            pop a
6327   2E47             ; END RELATIONAL
6328   2E47 C0 00 00      cmp b, 0
6329   2E4A C6 56 2E      je _if120_exit
6330   2E4D             _if120_true:
6331   2E4D             ;; back(); 
6332   2E4D 07 74 18      call back
6333   2E50             ;; break; 
6334   2E50 0A 59 2E      jmp _for118_exit ; for break
6335   2E53 0A 56 2E      jmp _if120_exit
6336   2E56             _if120_exit:
6337   2E56             _if119_exit:
6338   2E56             _for118_update:
6339   2E56 0A 0E 2E      jmp _for118_cond
6340   2E59             _for118_exit:
6341   2E59             ;; cd_to_dir(path); 
6342   2E59 26 87 33      mov b, _path_data ; $path           
6343   2E5C FD AB         swp b
6344   2E5E D8            push b
6345   2E5F 07 67 2E      call cd_to_dir
6346   2E62 51 02 00      add sp, 2
6347   2E65             _if117_exit:
6348   2E65 F9            leave
6349   2E66 09            ret
6350   2E67             
6351   2E67             cd_to_dir:
6352   2E67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6353   2E6A             ; $dirID 
6354   2E6A 52 02 00      sub sp, 2
6355   2E6D             
6356   2E6D             ; --- BEGIN INLINE ASM BLOCK
6357   2E6D FA 05 00      lea d, [bp + 5] ; $dir
6358   2E70 FD 2A         mov d, [d]
6359   2E72 19 13         mov al, 19
6360   2E74 05 04         syscall sys_filesystem 
6361   2E76 FA FF FF      lea d, [bp + -1] ; $dirID
6362   2E79 FD 2A         mov d, [d]
6363   2E7B 43            mov [d], a 
6364   2E7C             ; --- END INLINE ASM BLOCK
6365   2E7C             
6366   2E7C             ;; if(dirID != -1){ 
6367   2E7C             _if121_cond:
6368   2E7C 2C FF FF      mov b, [bp + -1] ; $dirID             
6369   2E7F             ; START RELATIONAL
6370   2E7F D7            push a
6371   2E80 11            mov a, b
6372   2E81 26 01 00      mov b, $1
6373   2E84 FD 97         neg b
6374   2E86 B0            cmp a, b
6375   2E87 FD 72         sneq ; !=
6376   2E89 E4            pop a
6377   2E8A             ; END RELATIONAL
6378   2E8A C0 00 00      cmp b, 0
6379   2E8D C6 98 2E      je _if121_exit
6380   2E90             _if121_true:
6381   2E90             
6382   2E90             ; --- BEGIN INLINE ASM BLOCK
6383   2E90 27            mov b, a
6384   2E91 19 03         mov al, 3
6385   2E93 05 04         syscall sys_filesystem
6386   2E95             ; --- END INLINE ASM BLOCK
6387   2E95             
6388   2E95 0A 98 2E      jmp _if121_exit
6389   2E98             _if121_exit:
6390   2E98 F9            leave
6391   2E99 09            ret
6392   2E9A             
6393   2E9A             print_cwd:
6394   2E9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
6395   2E9D             
6396   2E9D             ; --- BEGIN INLINE ASM BLOCK
6397   2E9D 19 12         mov al, 18
6398   2E9F 05 04         syscall sys_filesystem        
6399   2EA1             ; --- END INLINE ASM BLOCK
6400   2EA1             
6401   2EA1 F9            leave
6402   2EA2 09            ret
6403   2EA3             
6404   2EA3             spawn_new_proc:
6405   2EA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6406   2EA6             
6407   2EA6             ; --- BEGIN INLINE ASM BLOCK
6408   2EA6 2C 05 00      mov b, [bp + 5] ; $args             
6409   2EA9 FA 07 00      lea d, [bp + 7] ; $executable_path
6410   2EAC FD 2A         mov d, [d]
6411   2EAE 05 05         syscall sys_spawn_proc
6412   2EB0             ; --- END INLINE ASM BLOCK
6413   2EB0             
6414   2EB0 F9            leave
6415   2EB1 09            ret
6416   2EB2             
6417   2EB2             command_shell:
6418   2EB2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6419   2EB5 F9            leave
6420   2EB6 09            ret
6421   2EB7             
6422   2EB7             command_fg:
6423   2EB7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6424   2EBA F9            leave
6425   2EBB 09            ret
6426   2EBC             
6427   2EBC             read_config:
6428   2EBC F8 00 00      enter 0 ; (push bp; mov bp, sp)
6429   2EBF             ;; transient_area = alloc(16385); 
6430   2EBF 3B 85 31      mov d, _transient_area ; $transient_area
6431   2EC2 DA            push d
6432   2EC3 26 01 40      mov b, $4001
6433   2EC6 FD AB         swp b
6434   2EC8 D8            push b
6435   2EC9 07 4A 14      call alloc
6436   2ECC 51 02 00      add sp, 2
6437   2ECF E7            pop d
6438   2ED0 FD 43         mov [d], b
6439   2ED2             ;; *value = '\0'; 
6440   2ED2 2C 05 00      mov b, [bp + 5] ; $value             
6441   2ED5 D8            push b
6442   2ED6 26 00 00      mov b, $0
6443   2ED9 E7            pop d
6444   2EDA FD 3E         mov [d], bl
6445   2EDC             ;; loadfile(filename, transient_area); 
6446   2EDC 2C 09 00      mov b, [bp + 9] ; $filename             
6447   2EDF FD AB         swp b
6448   2EE1 D8            push b
6449   2EE2 29 85 31      mov b, [_transient_area] ; $transient_area           
6450   2EE5 FD AB         swp b
6451   2EE7 D8            push b
6452   2EE8 07 1D 14      call loadfile
6453   2EEB 51 04 00      add sp, 4
6454   2EEE             ;; prog = transient_area; 
6455   2EEE 3B 83 2F      mov d, _prog ; $prog         
6456   2EF1 29 85 31      mov b, [_transient_area] ; $transient_area                   
6457   2EF4 FD 43         mov [d], b
6458   2EF6             ;; for(;;){ 
6459   2EF6             _for122_init:
6460   2EF6             _for122_cond:
6461   2EF6             _for122_block:
6462   2EF6             ;; get(); 
6463   2EF6 07 1F 1A      call get
6464   2EF9             ;; if(toktype == END) break; 
6465   2EF9             _if123_cond:
6466   2EF9 29 81 2F      mov b, [_toktype] ; $toktype           
6467   2EFC             ; START RELATIONAL
6468   2EFC D7            push a
6469   2EFD 11            mov a, b
6470   2EFE 26 06 00      mov b, 6; END
6471   2F01 B0            cmp a, b
6472   2F02 FD 71         seq ; ==
6473   2F04 E4            pop a
6474   2F05             ; END RELATIONAL
6475   2F05 C0 00 00      cmp b, 0
6476   2F08 C6 11 2F      je _if123_exit
6477   2F0B             _if123_true:
6478   2F0B             ;; break; 
6479   2F0B 0A 71 2F      jmp _for122_exit ; for break
6480   2F0E 0A 11 2F      jmp _if123_exit
6481   2F11             _if123_exit:
6482   2F11             ;; if(!strcmp(entry_name, token)){ 
6483   2F11             _if124_cond:
6484   2F11 2C 07 00      mov b, [bp + 7] ; $entry_name             
6485   2F14 FD AB         swp b
6486   2F16 D8            push b
6487   2F17 26 85 2F      mov b, _token_data ; $token           
6488   2F1A FD AB         swp b
6489   2F1C D8            push b
6490   2F1D 07 82 0C      call strcmp
6491   2F20 51 04 00      add sp, 4
6492   2F23 C0 00 00      cmp b, 0
6493   2F26 FD 71         seq ; !
6494   2F28 C0 00 00      cmp b, 0
6495   2F2B C6 6E 2F      je _if124_exit
6496   2F2E             _if124_true:
6497   2F2E             ;; get(); // get '=' 
6498   2F2E 07 1F 1A      call get
6499   2F31             ;; for(;;){ 
6500   2F31             _for125_init:
6501   2F31             _for125_cond:
6502   2F31             _for125_block:
6503   2F31             ;; get(); 
6504   2F31 07 1F 1A      call get
6505   2F34             ;; if(!strcmp(token, ";")) return; 
6506   2F34             _if126_cond:
6507   2F34 26 85 2F      mov b, _token_data ; $token           
6508   2F37 FD AB         swp b
6509   2F39 D8            push b
6510   2F3A 26 F1 38      mov b, __s17 ; ";"
6511   2F3D FD AB         swp b
6512   2F3F D8            push b
6513   2F40 07 82 0C      call strcmp
6514   2F43 51 04 00      add sp, 4
6515   2F46 C0 00 00      cmp b, 0
6516   2F49 FD 71         seq ; !
6517   2F4B C0 00 00      cmp b, 0
6518   2F4E C6 56 2F      je _if126_exit
6519   2F51             _if126_true:
6520   2F51             ;; return; 
6521   2F51 F9            leave
6522   2F52 09            ret
6523   2F53 0A 56 2F      jmp _if126_exit
6524   2F56             _if126_exit:
6525   2F56             ;; strcat(value, token); 
6526   2F56 2C 05 00      mov b, [bp + 5] ; $value             
6527   2F59 FD AB         swp b
6528   2F5B D8            push b
6529   2F5C 26 85 2F      mov b, _token_data ; $token           
6530   2F5F FD AB         swp b
6531   2F61 D8            push b
6532   2F62 07 DF 0C      call strcat
6533   2F65 51 04 00      add sp, 4
6534   2F68             _for125_update:
6535   2F68 0A 31 2F      jmp _for125_cond
6536   2F6B             _for125_exit:
6537   2F6B 0A 6E 2F      jmp _if124_exit
6538   2F6E             _if124_exit:
6539   2F6E             _for122_update:
6540   2F6E 0A F6 2E      jmp _for122_cond
6541   2F71             _for122_exit:
6542   2F71             ;; free(16385); 
6543   2F71 26 01 40      mov b, $4001
6544   2F74 FD AB         swp b
6545   2F76 D8            push b
6546   2F77 07 6A 14      call free
6547   2F7A 51 02 00      add sp, 2
6548   2F7D F9            leave
6549   2F7E 09            ret
6550   2F7F             ; --- END TEXT BLOCK
6551   2F7F             
6552   2F7F             ; --- BEGIN DATA BLOCK
6553   2F7F 00 00       _tok: .fill 2, 0
6554   2F81 00 00       _toktype: .fill 2, 0
6555   2F83 00 00       _prog: .fill 2, 0
6556   2F85 00 00 00 00 _token_data: .fill 256, 0
6556   2F89 00 00 00 00 
6556   2F8D 00 00 00 00 
6556   2F91 00 00 00 00 
6556   2F95 00 00 00 00 
6556   2F99 00 00 00 00 
6556   2F9D 00 00 00 00 
6556   2FA1 00 00 00 00 
6556   2FA5 00 00 00 00 
6556   2FA9 00 00 00 00 
6556   2FAD 00 00 00 00 
6556   2FB1 00 00 00 00 
6556   2FB5 00 00 00 00 
6556   2FB9 00 00 00 00 
6556   2FBD 00 00 00 00 
6556   2FC1 00 00 00 00 
6556   2FC5 00 00 00 00 
6556   2FC9 00 00 00 00 
6556   2FCD 00 00 00 00 
6556   2FD1 00 00 00 00 
6556   2FD5 00 00 00 00 
6556   2FD9 00 00 00 00 
6556   2FDD 00 00 00 00 
6556   2FE1 00 00 00 00 
6556   2FE5 00 00 00 00 
6556   2FE9 00 00 00 00 
6556   2FED 00 00 00 00 
6556   2FF1 00 00 00 00 
6556   2FF5 00 00 00 00 
6556   2FF9 00 00 00 00 
6556   2FFD 00 00 00 00 
6556   3001 00 00 00 00 
6556   3005 00 00 00 00 
6556   3009 00 00 00 00 
6556   300D 00 00 00 00 
6556   3011 00 00 00 00 
6556   3015 00 00 00 00 
6556   3019 00 00 00 00 
6556   301D 00 00 00 00 
6556   3021 00 00 00 00 
6556   3025 00 00 00 00 
6556   3029 00 00 00 00 
6556   302D 00 00 00 00 
6556   3031 00 00 00 00 
6556   3035 00 00 00 00 
6556   3039 00 00 00 00 
6556   303D 00 00 00 00 
6556   3041 00 00 00 00 
6556   3045 00 00 00 00 
6556   3049 00 00 00 00 
6556   304D 00 00 00 00 
6556   3051 00 00 00 00 
6556   3055 00 00 00 00 
6556   3059 00 00 00 00 
6556   305D 00 00 00 00 
6556   3061 00 00 00 00 
6556   3065 00 00 00 00 
6556   3069 00 00 00 00 
6556   306D 00 00 00 00 
6556   3071 00 00 00 00 
6556   3075 00 00 00 00 
6556   3079 00 00 00 00 
6556   307D 00 00 00 00 
6556   3081 00 00 00 00 
6557   3085 00 00 00 00 _string_const_data: .fill 256, 0
6557   3089 00 00 00 00 
6557   308D 00 00 00 00 
6557   3091 00 00 00 00 
6557   3095 00 00 00 00 
6557   3099 00 00 00 00 
6557   309D 00 00 00 00 
6557   30A1 00 00 00 00 
6557   30A5 00 00 00 00 
6557   30A9 00 00 00 00 
6557   30AD 00 00 00 00 
6557   30B1 00 00 00 00 
6557   30B5 00 00 00 00 
6557   30B9 00 00 00 00 
6557   30BD 00 00 00 00 
6557   30C1 00 00 00 00 
6557   30C5 00 00 00 00 
6557   30C9 00 00 00 00 
6557   30CD 00 00 00 00 
6557   30D1 00 00 00 00 
6557   30D5 00 00 00 00 
6557   30D9 00 00 00 00 
6557   30DD 00 00 00 00 
6557   30E1 00 00 00 00 
6557   30E5 00 00 00 00 
6557   30E9 00 00 00 00 
6557   30ED 00 00 00 00 
6557   30F1 00 00 00 00 
6557   30F5 00 00 00 00 
6557   30F9 00 00 00 00 
6557   30FD 00 00 00 00 
6557   3101 00 00 00 00 
6557   3105 00 00 00 00 
6557   3109 00 00 00 00 
6557   310D 00 00 00 00 
6557   3111 00 00 00 00 
6557   3115 00 00 00 00 
6557   3119 00 00 00 00 
6557   311D 00 00 00 00 
6557   3121 00 00 00 00 
6557   3125 00 00 00 00 
6557   3129 00 00 00 00 
6557   312D 00 00 00 00 
6557   3131 00 00 00 00 
6557   3135 00 00 00 00 
6557   3139 00 00 00 00 
6557   313D 00 00 00 00 
6557   3141 00 00 00 00 
6557   3145 00 00 00 00 
6557   3149 00 00 00 00 
6557   314D 00 00 00 00 
6557   3151 00 00 00 00 
6557   3155 00 00 00 00 
6557   3159 00 00 00 00 
6557   315D 00 00 00 00 
6557   3161 00 00 00 00 
6557   3165 00 00 00 00 
6557   3169 00 00 00 00 
6557   316D 00 00 00 00 
6557   3171 00 00 00 00 
6557   3175 00 00 00 00 
6557   3179 00 00 00 00 
6557   317D 00 00 00 00 
6557   3181 00 00 00 00 
6558   3185 00 00       _transient_area: .fill 2, 0
6559   3187 00 00 00 00 _command_data: .fill 512, 0
6559   318B 00 00 00 00 
6559   318F 00 00 00 00 
6559   3193 00 00 00 00 
6559   3197 00 00 00 00 
6559   319B 00 00 00 00 
6559   319F 00 00 00 00 
6559   31A3 00 00 00 00 
6559   31A7 00 00 00 00 
6559   31AB 00 00 00 00 
6559   31AF 00 00 00 00 
6559   31B3 00 00 00 00 
6559   31B7 00 00 00 00 
6559   31BB 00 00 00 00 
6559   31BF 00 00 00 00 
6559   31C3 00 00 00 00 
6559   31C7 00 00 00 00 
6559   31CB 00 00 00 00 
6559   31CF 00 00 00 00 
6559   31D3 00 00 00 00 
6559   31D7 00 00 00 00 
6559   31DB 00 00 00 00 
6559   31DF 00 00 00 00 
6559   31E3 00 00 00 00 
6559   31E7 00 00 00 00 
6559   31EB 00 00 00 00 
6559   31EF 00 00 00 00 
6559   31F3 00 00 00 00 
6559   31F7 00 00 00 00 
6559   31FB 00 00 00 00 
6559   31FF 00 00 00 00 
6559   3203 00 00 00 00 
6559   3207 00 00 00 00 
6559   320B 00 00 00 00 
6559   320F 00 00 00 00 
6559   3213 00 00 00 00 
6559   3217 00 00 00 00 
6559   321B 00 00 00 00 
6559   321F 00 00 00 00 
6559   3223 00 00 00 00 
6559   3227 00 00 00 00 
6559   322B 00 00 00 00 
6559   322F 00 00 00 00 
6559   3233 00 00 00 00 
6559   3237 00 00 00 00 
6559   323B 00 00 00 00 
6559   323F 00 00 00 00 
6559   3243 00 00 00 00 
6559   3247 00 00 00 00 
6559   324B 00 00 00 00 
6559   324F 00 00 00 00 
6559   3253 00 00 00 00 
6559   3257 00 00 00 00 
6559   325B 00 00 00 00 
6559   325F 00 00 00 00 
6559   3263 00 00 00 00 
6559   3267 00 00 00 00 
6559   326B 00 00 00 00 
6559   326F 00 00 00 00 
6559   3273 00 00 00 00 
6559   3277 00 00 00 00 
6559   327B 00 00 00 00 
6559   327F 00 00 00 00 
6559   3283 00 00 00 00 
6559   3287 00 00 00 00 
6559   328B 00 00 00 00 
6559   328F 00 00 00 00 
6559   3293 00 00 00 00 
6559   3297 00 00 00 00 
6559   329B 00 00 00 00 
6559   329F 00 00 00 00 
6559   32A3 00 00 00 00 
6559   32A7 00 00 00 00 
6559   32AB 00 00 00 00 
6559   32AF 00 00 00 00 
6559   32B3 00 00 00 00 
6559   32B7 00 00 00 00 
6559   32BB 00 00 00 00 
6559   32BF 00 00 00 00 
6559   32C3 00 00 00 00 
6559   32C7 00 00 00 00 
6559   32CB 00 00 00 00 
6559   32CF 00 00 00 00 
6559   32D3 00 00 00 00 
6559   32D7 00 00 00 00 
6559   32DB 00 00 00 00 
6559   32DF 00 00 00 00 
6559   32E3 00 00 00 00 
6559   32E7 00 00 00 00 
6559   32EB 00 00 00 00 
6559   32EF 00 00 00 00 
6559   32F3 00 00 00 00 
6559   32F7 00 00 00 00 
6559   32FB 00 00 00 00 
6559   32FF 00 00 00 00 
6559   3303 00 00 00 00 
6559   3307 00 00 00 00 
6559   330B 00 00 00 00 
6559   330F 00 00 00 00 
6559   3313 00 00 00 00 
6559   3317 00 00 00 00 
6559   331B 00 00 00 00 
6559   331F 00 00 00 00 
6559   3323 00 00 00 00 
6559   3327 00 00 00 00 
6559   332B 00 00 00 00 
6559   332F 00 00 00 00 
6559   3333 00 00 00 00 
6559   3337 00 00 00 00 
6559   333B 00 00 00 00 
6559   333F 00 00 00 00 
6559   3343 00 00 00 00 
6559   3347 00 00 00 00 
6559   334B 00 00 00 00 
6559   334F 00 00 00 00 
6559   3353 00 00 00 00 
6559   3357 00 00 00 00 
6559   335B 00 00 00 00 
6559   335F 00 00 00 00 
6559   3363 00 00 00 00 
6559   3367 00 00 00 00 
6559   336B 00 00 00 00 
6559   336F 00 00 00 00 
6559   3373 00 00 00 00 
6559   3377 00 00 00 00 
6559   337B 00 00 00 00 
6559   337F 00 00 00 00 
6559   3383 00 00 00 00 
6560   3387 00 00 00 00 _path_data: .fill 256, 0
6560   338B 00 00 00 00 
6560   338F 00 00 00 00 
6560   3393 00 00 00 00 
6560   3397 00 00 00 00 
6560   339B 00 00 00 00 
6560   339F 00 00 00 00 
6560   33A3 00 00 00 00 
6560   33A7 00 00 00 00 
6560   33AB 00 00 00 00 
6560   33AF 00 00 00 00 
6560   33B3 00 00 00 00 
6560   33B7 00 00 00 00 
6560   33BB 00 00 00 00 
6560   33BF 00 00 00 00 
6560   33C3 00 00 00 00 
6560   33C7 00 00 00 00 
6560   33CB 00 00 00 00 
6560   33CF 00 00 00 00 
6560   33D3 00 00 00 00 
6560   33D7 00 00 00 00 
6560   33DB 00 00 00 00 
6560   33DF 00 00 00 00 
6560   33E3 00 00 00 00 
6560   33E7 00 00 00 00 
6560   33EB 00 00 00 00 
6560   33EF 00 00 00 00 
6560   33F3 00 00 00 00 
6560   33F7 00 00 00 00 
6560   33FB 00 00 00 00 
6560   33FF 00 00 00 00 
6560   3403 00 00 00 00 
6560   3407 00 00 00 00 
6560   340B 00 00 00 00 
6560   340F 00 00 00 00 
6560   3413 00 00 00 00 
6560   3417 00 00 00 00 
6560   341B 00 00 00 00 
6560   341F 00 00 00 00 
6560   3423 00 00 00 00 
6560   3427 00 00 00 00 
6560   342B 00 00 00 00 
6560   342F 00 00 00 00 
6560   3433 00 00 00 00 
6560   3437 00 00 00 00 
6560   343B 00 00 00 00 
6560   343F 00 00 00 00 
6560   3443 00 00 00 00 
6560   3447 00 00 00 00 
6560   344B 00 00 00 00 
6560   344F 00 00 00 00 
6560   3453 00 00 00 00 
6560   3457 00 00 00 00 
6560   345B 00 00 00 00 
6560   345F 00 00 00 00 
6560   3463 00 00 00 00 
6560   3467 00 00 00 00 
6560   346B 00 00 00 00 
6560   346F 00 00 00 00 
6560   3473 00 00 00 00 
6560   3477 00 00 00 00 
6560   347B 00 00 00 00 
6560   347F 00 00 00 00 
6560   3483 00 00 00 00 
6561   3487 00 00 00 00 _temp_data: .fill 256, 0
6561   348B 00 00 00 00 
6561   348F 00 00 00 00 
6561   3493 00 00 00 00 
6561   3497 00 00 00 00 
6561   349B 00 00 00 00 
6561   349F 00 00 00 00 
6561   34A3 00 00 00 00 
6561   34A7 00 00 00 00 
6561   34AB 00 00 00 00 
6561   34AF 00 00 00 00 
6561   34B3 00 00 00 00 
6561   34B7 00 00 00 00 
6561   34BB 00 00 00 00 
6561   34BF 00 00 00 00 
6561   34C3 00 00 00 00 
6561   34C7 00 00 00 00 
6561   34CB 00 00 00 00 
6561   34CF 00 00 00 00 
6561   34D3 00 00 00 00 
6561   34D7 00 00 00 00 
6561   34DB 00 00 00 00 
6561   34DF 00 00 00 00 
6561   34E3 00 00 00 00 
6561   34E7 00 00 00 00 
6561   34EB 00 00 00 00 
6561   34EF 00 00 00 00 
6561   34F3 00 00 00 00 
6561   34F7 00 00 00 00 
6561   34FB 00 00 00 00 
6561   34FF 00 00 00 00 
6561   3503 00 00 00 00 
6561   3507 00 00 00 00 
6561   350B 00 00 00 00 
6561   350F 00 00 00 00 
6561   3513 00 00 00 00 
6561   3517 00 00 00 00 
6561   351B 00 00 00 00 
6561   351F 00 00 00 00 
6561   3523 00 00 00 00 
6561   3527 00 00 00 00 
6561   352B 00 00 00 00 
6561   352F 00 00 00 00 
6561   3533 00 00 00 00 
6561   3537 00 00 00 00 
6561   353B 00 00 00 00 
6561   353F 00 00 00 00 
6561   3543 00 00 00 00 
6561   3547 00 00 00 00 
6561   354B 00 00 00 00 
6561   354F 00 00 00 00 
6561   3553 00 00 00 00 
6561   3557 00 00 00 00 
6561   355B 00 00 00 00 
6561   355F 00 00 00 00 
6561   3563 00 00 00 00 
6561   3567 00 00 00 00 
6561   356B 00 00 00 00 
6561   356F 00 00 00 00 
6561   3573 00 00 00 00 
6561   3577 00 00 00 00 
6561   357B 00 00 00 00 
6561   357F 00 00 00 00 
6561   3583 00 00 00 00 
6562   3587 00 00 00 00 _argument_data: .fill 256, 0
6562   358B 00 00 00 00 
6562   358F 00 00 00 00 
6562   3593 00 00 00 00 
6562   3597 00 00 00 00 
6562   359B 00 00 00 00 
6562   359F 00 00 00 00 
6562   35A3 00 00 00 00 
6562   35A7 00 00 00 00 
6562   35AB 00 00 00 00 
6562   35AF 00 00 00 00 
6562   35B3 00 00 00 00 
6562   35B7 00 00 00 00 
6562   35BB 00 00 00 00 
6562   35BF 00 00 00 00 
6562   35C3 00 00 00 00 
6562   35C7 00 00 00 00 
6562   35CB 00 00 00 00 
6562   35CF 00 00 00 00 
6562   35D3 00 00 00 00 
6562   35D7 00 00 00 00 
6562   35DB 00 00 00 00 
6562   35DF 00 00 00 00 
6562   35E3 00 00 00 00 
6562   35E7 00 00 00 00 
6562   35EB 00 00 00 00 
6562   35EF 00 00 00 00 
6562   35F3 00 00 00 00 
6562   35F7 00 00 00 00 
6562   35FB 00 00 00 00 
6562   35FF 00 00 00 00 
6562   3603 00 00 00 00 
6562   3607 00 00 00 00 
6562   360B 00 00 00 00 
6562   360F 00 00 00 00 
6562   3613 00 00 00 00 
6562   3617 00 00 00 00 
6562   361B 00 00 00 00 
6562   361F 00 00 00 00 
6562   3623 00 00 00 00 
6562   3627 00 00 00 00 
6562   362B 00 00 00 00 
6562   362F 00 00 00 00 
6562   3633 00 00 00 00 
6562   3637 00 00 00 00 
6562   363B 00 00 00 00 
6562   363F 00 00 00 00 
6562   3643 00 00 00 00 
6562   3647 00 00 00 00 
6562   364B 00 00 00 00 
6562   364F 00 00 00 00 
6562   3653 00 00 00 00 
6562   3657 00 00 00 00 
6562   365B 00 00 00 00 
6562   365F 00 00 00 00 
6562   3663 00 00 00 00 
6562   3667 00 00 00 00 
6562   366B 00 00 00 00 
6562   366F 00 00 00 00 
6562   3673 00 00 00 00 
6562   3677 00 00 00 00 
6562   367B 00 00 00 00 
6562   367F 00 00 00 00 
6562   3683 00 00 00 00 
6563   3687 00 00 00 00 _last_cmd_data: .fill 128, 0
6563   368B 00 00 00 00 
6563   368F 00 00 00 00 
6563   3693 00 00 00 00 
6563   3697 00 00 00 00 
6563   369B 00 00 00 00 
6563   369F 00 00 00 00 
6563   36A3 00 00 00 00 
6563   36A7 00 00 00 00 
6563   36AB 00 00 00 00 
6563   36AF 00 00 00 00 
6563   36B3 00 00 00 00 
6563   36B7 00 00 00 00 
6563   36BB 00 00 00 00 
6563   36BF 00 00 00 00 
6563   36C3 00 00 00 00 
6563   36C7 00 00 00 00 
6563   36CB 00 00 00 00 
6563   36CF 00 00 00 00 
6563   36D3 00 00 00 00 
6563   36D7 00 00 00 00 
6563   36DB 00 00 00 00 
6563   36DF 00 00 00 00 
6563   36E3 00 00 00 00 
6563   36E7 00 00 00 00 
6563   36EB 00 00 00 00 
6563   36EF 00 00 00 00 
6563   36F3 00 00 00 00 
6563   36F7 00 00 00 00 
6563   36FB 00 00 00 00 
6563   36FF 00 00 00 00 
6563   3703 00 00 00 00 
6564   3707 00 00 00 00 _variables_data: .fill 210, 0
6564   370B 00 00 00 00 
6564   370F 00 00 00 00 
6564   3713 00 00 00 00 
6564   3717 00 00 00 00 
6564   371B 00 00 00 00 
6564   371F 00 00 00 00 
6564   3723 00 00 00 00 
6564   3727 00 00 00 00 
6564   372B 00 00 00 00 
6564   372F 00 00 00 00 
6564   3733 00 00 00 00 
6564   3737 00 00 00 00 
6564   373B 00 00 00 00 
6564   373F 00 00 00 00 
6564   3743 00 00 00 00 
6564   3747 00 00 00 00 
6564   374B 00 00 00 00 
6564   374F 00 00 00 00 
6564   3753 00 00 00 00 
6564   3757 00 00 00 00 
6564   375B 00 00 00 00 
6564   375F 00 00 00 00 
6564   3763 00 00 00 00 
6564   3767 00 00 00 00 
6564   376B 00 00 00 00 
6564   376F 00 00 00 00 
6564   3773 00 00 00 00 
6564   3777 00 00 00 00 
6564   377B 00 00 00 00 
6564   377F 00 00 00 00 
6564   3783 00 00 00 00 
6564   3787 00 00 00 00 
6564   378B 00 00 00 00 
6564   378F 00 00 00 00 
6564   3793 00 00 00 00 
6564   3797 00 00 00 00 
6564   379B 00 00 00 00 
6564   379F 00 00 00 00 
6564   37A3 00 00 00 00 
6564   37A7 00 00 00 00 
6564   37AB 00 00 00 00 
6564   37AF 00 00 00 00 
6564   37B3 00 00 00 00 
6564   37B7 00 00 00 00 
6564   37BB 00 00 00 00 
6564   37BF 00 00 00 00 
6564   37C3 00 00 00 00 
6564   37C7 00 00 00 00 
6564   37CB 00 00 00 00 
6564   37CF 00 00 00 00 
6564   37D3 00 00 00 00 
6564   37D7 00 00 
6565   37D9 00 00       _vars_tos: .fill 2, 0
6566   37DB 70 61 74 68 __s0: .db "path", 0
6566   37DF 00 
6567   37E0 20 20 20 20 __s1: .db "                                                                ", 0
6567   37E4 20 20 20 20 
6567   37E8 20 20 20 20 
6567   37EC 20 20 20 20 
6567   37F0 20 20 20 20 
6567   37F4 20 20 20 20 
6567   37F8 20 20 20 20 
6567   37FC 20 20 20 20 
6567   3800 20 20 20 20 
6567   3804 20 20 20 20 
6567   3808 20 20 20 20 
6567   380C 20 20 20 20 
6567   3810 20 20 20 20 
6567   3814 20 20 20 20 
6567   3818 20 20 20 20 
6567   381C 20 20 20 20 
6567   3820 00 
6568   3821 68 6F 6D 65 __s2: .db "home", 0
6568   3825 00 
6569   3826 2F 65 74 63 __s3: .db "/etc/shell.cfg", 0
6569   382A 2F 73 68 65 
6569   382E 6C 6C 2E 63 
6569   3832 66 67 00 
6570   3835 72 6F 6F 74 __s4: .db "root@Sol-1:", 0
6570   3839 40 53 6F 6C 
6570   383D 2D 31 3A 00 
6571   3841 20 23 20 00 __s5: .db " # ", 0
6572   3845 0A 0D 00    __s6: .db "\n\r", 0
6573   3848 63 64 00    __s7: .db "cd", 0
6574   384B 73 68 65 6C __s8: .db "shell", 0
6574   384F 6C 00 
6575   3851 31 32 33 00 __s9: .db "123", 0
6576   3855 2F 00       __s10: .db "/", 0
6577   3857 55 6E 6B 6E __s11: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
6577   385B 6F 77 6E 20 
6577   385F 74 79 70 65 
6577   3863 20 73 69 7A 
6577   3867 65 20 69 6E 
6577   386B 20 76 61 5F 
6577   386F 61 72 67 28 
6577   3873 29 20 63 61 
6577   3877 6C 6C 2E 20 
6577   387B 53 69 7A 65 
6577   387F 20 6E 65 65 
6577   3883 64 73 20 74 
6577   3887 6F 20 62 65 
6577   388B 20 65 69 74 
6577   388F 68 65 72 20 
6577   3893 31 20 6F 72 
6577   3897 20 32 2E 00 
6578   389B 45 72 72 6F __s12: .db "Error: Unknown argument type.\n", 0
6578   389F 72 3A 20 55 
6578   38A3 6E 6B 6E 6F 
6578   38A7 77 6E 20 61 
6578   38AB 72 67 75 6D 
6578   38AF 65 6E 74 20 
6578   38B3 74 79 70 65 
6578   38B7 2E 0A 00 
6579   38BA 44 6F 75 62 __s13: .db "Double quotes expected", 0
6579   38BE 6C 65 20 71 
6579   38C2 75 6F 74 65 
6579   38C6 73 20 65 78 
6579   38CA 70 65 63 74 
6579   38CE 65 64 00 
6580   38D1 0A 45 72 72 __s14: .db "\nError: ", 0
6580   38D5 6F 72 3A 20 
6580   38D9 00 
6581   38DA 0A 00       __s15: .db "\n", 0
6582   38DC 55 6E 64 65 __s16: .db "Undeclared variable.", 0
6582   38E0 63 6C 61 72 
6582   38E4 65 64 20 76 
6582   38E8 61 72 69 61 
6582   38EC 62 6C 65 2E 
6582   38F0 00 
6583   38F1 3B 00       __s17: .db ";", 0
6584   38F3             
6585   38F3 F5 38       _heap_top: .dw _heap
6586   38F5 00          _heap: .db 0
6587   38F6             ; --- END DATA BLOCK
6588   38F6             
6589   38F6             .end
tasm: Number of errors = 0
