0001   0000             ; --- FILENAME: programs/simcity.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; initialize_terrain(); 
0011   0408             ; --- START FUNCTION CALL
0012   0408 07 CF 04      call initialize_terrain
0013   040B             ; display_map(); 
0014   040B             ; --- START FUNCTION CALL
0015   040B 07 10 04      call display_map
0016   040E 05 0B         syscall sys_terminate_proc
0017   0410             
0018   0410             display_map:
0019   0410 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0020   0413             ; int rows, cols; 
0021   0413 52 02 00      sub sp, 2
0022   0416 52 02 00      sub sp, 2
0023   0419             ; for(rows = 0; rows <  30        ; rows++){ 
0024   0419             _for1_init:
0025   0419 FA FF FF      lea d, [bp + -1] ; $rows
0026   041C DA            push d
0027   041D FD 2E 00 00   mov32 cb, $00000000
0027   0421 00 00 
0028   0423 E7            pop d
0029   0424 FD 43         mov [d], b
0030   0426             _for1_cond:
0031   0426 FA FF FF      lea d, [bp + -1] ; $rows
0032   0429 2A            mov b, [d]
0033   042A 38 00 00      mov c, 0
0034   042D             ; --- START RELATIONAL
0035   042D D7            push a
0036   042E 11            mov a, b
0037   042F FD 2E 1E 00   mov32 cb, $0000001e
0037   0433 00 00 
0038   0435 B0            cmp a, b
0039   0436 FD 73         slt ; < (signed)
0040   0438 E4            pop a
0041   0439             ; --- END RELATIONAL
0042   0439 C0 00 00      cmp b, 0
0043   043C C6 CD 04      je _for1_exit
0044   043F             _for1_block:
0045   043F             ; for(cols = 0; cols <   40        ; cols++){ 
0046   043F             _for2_init:
0047   043F FA FD FF      lea d, [bp + -3] ; $cols
0048   0442 DA            push d
0049   0443 FD 2E 00 00   mov32 cb, $00000000
0049   0447 00 00 
0050   0449 E7            pop d
0051   044A FD 43         mov [d], b
0052   044C             _for2_cond:
0053   044C FA FD FF      lea d, [bp + -3] ; $cols
0054   044F 2A            mov b, [d]
0055   0450 38 00 00      mov c, 0
0056   0453             ; --- START RELATIONAL
0057   0453 D7            push a
0058   0454 11            mov a, b
0059   0455 FD 2E 28 00   mov32 cb, $00000028
0059   0459 00 00 
0060   045B B0            cmp a, b
0061   045C FD 73         slt ; < (signed)
0062   045E E4            pop a
0063   045F             ; --- END RELATIONAL
0064   045F C0 00 00      cmp b, 0
0065   0462 C6 AD 04      je _for2_exit
0066   0465             _for2_block:
0067   0465             ; printf("%d ", map[rows][cols].structure_type); 
0068   0465             ; --- START FUNCTION CALL
0069   0465 3B DD 0E      mov d, _map_data ; $map
0070   0468 D7            push a
0071   0469 DA            push d
0072   046A FA FF FF      lea d, [bp + -1] ; $rows
0073   046D 2A            mov b, [d]
0074   046E 38 00 00      mov c, 0
0075   0471 E7            pop d
0076   0472 FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0077   0476 DA            push d
0078   0477 FA FD FF      lea d, [bp + -3] ; $cols
0079   047A 2A            mov b, [d]
0080   047B 38 00 00      mov c, 0
0081   047E E7            pop d
0082   047F FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0083   0483 E4            pop a
0084   0484 58 04 00      add d, 4
0085   0487 2A            mov b, [d]
0086   0488 38 00 00      mov c, 0
0087   048B FD AB         swp b
0088   048D D8            push b
0089   048E 26 FD 2A      mov b, _s0 ; "%d "
0090   0491 FD AB         swp b
0091   0493 D8            push b
0092   0494 07 D0 05      call printf
0093   0497 51 04 00      add sp, 4
0094   049A             ; --- END FUNCTION CALL
0095   049A             _for2_update:
0096   049A FA FD FF      lea d, [bp + -3] ; $cols
0097   049D 2A            mov b, [d]
0098   049E 38 00 00      mov c, 0
0099   04A1 11            mov a, b
0100   04A2 FD 77         inc b
0101   04A4 FA FD FF      lea d, [bp + -3] ; $cols
0102   04A7 FD 43         mov [d], b
0103   04A9 27            mov b, a
0104   04AA 0A 4C 04      jmp _for2_cond
0105   04AD             _for2_exit:
0106   04AD             ; putchar('\n'); 
0107   04AD             ; --- START FUNCTION CALL
0108   04AD FD 2E 0A 00   mov32 cb, $0000000a
0108   04B1 00 00 
0109   04B3 DD            push bl
0110   04B4 07 52 0A      call putchar
0111   04B7 51 01 00      add sp, 1
0112   04BA             ; --- END FUNCTION CALL
0113   04BA             _for1_update:
0114   04BA FA FF FF      lea d, [bp + -1] ; $rows
0115   04BD 2A            mov b, [d]
0116   04BE 38 00 00      mov c, 0
0117   04C1 11            mov a, b
0118   04C2 FD 77         inc b
0119   04C4 FA FF FF      lea d, [bp + -1] ; $rows
0120   04C7 FD 43         mov [d], b
0121   04C9 27            mov b, a
0122   04CA 0A 26 04      jmp _for1_cond
0123   04CD             _for1_exit:
0124   04CD F9            leave
0125   04CE 09            ret
0126   04CF             
0127   04CF             initialize_terrain:
0128   04CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0129   04D2             ; int i, j; 
0130   04D2 52 02 00      sub sp, 2
0131   04D5 52 02 00      sub sp, 2
0132   04D8             ; for(i = 0; i <  30        ; i++){ 
0133   04D8             _for3_init:
0134   04D8 FA FF FF      lea d, [bp + -1] ; $i
0135   04DB DA            push d
0136   04DC FD 2E 00 00   mov32 cb, $00000000
0136   04E0 00 00 
0137   04E2 E7            pop d
0138   04E3 FD 43         mov [d], b
0139   04E5             _for3_cond:
0140   04E5 FA FF FF      lea d, [bp + -1] ; $i
0141   04E8 2A            mov b, [d]
0142   04E9 38 00 00      mov c, 0
0143   04EC             ; --- START RELATIONAL
0144   04EC D7            push a
0145   04ED 11            mov a, b
0146   04EE FD 2E 1E 00   mov32 cb, $0000001e
0146   04F2 00 00 
0147   04F4 B0            cmp a, b
0148   04F5 FD 73         slt ; < (signed)
0149   04F7 E4            pop a
0150   04F8             ; --- END RELATIONAL
0151   04F8 C0 00 00      cmp b, 0
0152   04FB C6 CE 05      je _for3_exit
0153   04FE             _for3_block:
0154   04FE             ; for(j = 0; j <   40        ; j++){ 
0155   04FE             _for4_init:
0156   04FE FA FD FF      lea d, [bp + -3] ; $j
0157   0501 DA            push d
0158   0502 FD 2E 00 00   mov32 cb, $00000000
0158   0506 00 00 
0159   0508 E7            pop d
0160   0509 FD 43         mov [d], b
0161   050B             _for4_cond:
0162   050B FA FD FF      lea d, [bp + -3] ; $j
0163   050E 2A            mov b, [d]
0164   050F 38 00 00      mov c, 0
0165   0512             ; --- START RELATIONAL
0166   0512 D7            push a
0167   0513 11            mov a, b
0168   0514 FD 2E 28 00   mov32 cb, $00000028
0168   0518 00 00 
0169   051A B0            cmp a, b
0170   051B FD 73         slt ; < (signed)
0171   051D E4            pop a
0172   051E             ; --- END RELATIONAL
0173   051E C0 00 00      cmp b, 0
0174   0521 C6 BB 05      je _for4_exit
0175   0524             _for4_block:
0176   0524             ; map[i][j].structure_type = -1; 
0177   0524 3B DD 0E      mov d, _map_data ; $map
0178   0527 D7            push a
0179   0528 DA            push d
0180   0529 FA FF FF      lea d, [bp + -1] ; $i
0181   052C 2A            mov b, [d]
0182   052D 38 00 00      mov c, 0
0183   0530 E7            pop d
0184   0531 FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0185   0535 DA            push d
0186   0536 FA FD FF      lea d, [bp + -3] ; $j
0187   0539 2A            mov b, [d]
0188   053A 38 00 00      mov c, 0
0189   053D E7            pop d
0190   053E FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0191   0542 E4            pop a
0192   0543 58 04 00      add d, 4
0193   0546 DA            push d
0194   0547 FD 2E FF FF   mov32 cb, $ffffffff
0194   054B FF FF 
0195   054D E7            pop d
0196   054E FD 43         mov [d], b
0197   0550             ; map[i][j].zone_type = unzoned; 
0198   0550 3B DD 0E      mov d, _map_data ; $map
0199   0553 D7            push a
0200   0554 DA            push d
0201   0555 FA FF FF      lea d, [bp + -1] ; $i
0202   0558 2A            mov b, [d]
0203   0559 38 00 00      mov c, 0
0204   055C E7            pop d
0205   055D FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0206   0561 DA            push d
0207   0562 FA FD FF      lea d, [bp + -3] ; $j
0208   0565 2A            mov b, [d]
0209   0566 38 00 00      mov c, 0
0210   0569 E7            pop d
0211   056A FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0212   056E E4            pop a
0213   056F 58 02 00      add d, 2
0214   0572 DA            push d
0215   0573 FD 2E 00 00   mov32 cb, $0 ; enum element: unzoned
0215   0577 00 00 
0216   0579 E7            pop d
0217   057A FD 43         mov [d], b
0218   057C             ; map[i][j].tile_type = land; 
0219   057C 3B DD 0E      mov d, _map_data ; $map
0220   057F D7            push a
0221   0580 DA            push d
0222   0581 FA FF FF      lea d, [bp + -1] ; $i
0223   0584 2A            mov b, [d]
0224   0585 38 00 00      mov c, 0
0225   0588 E7            pop d
0226   0589 FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0227   058D DA            push d
0228   058E FA FD FF      lea d, [bp + -3] ; $j
0229   0591 2A            mov b, [d]
0230   0592 38 00 00      mov c, 0
0231   0595 E7            pop d
0232   0596 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0233   059A E4            pop a
0234   059B 58 00 00      add d, 0
0235   059E DA            push d
0236   059F FD 2E 00 00   mov32 cb, $0 ; enum element: land
0236   05A3 00 00 
0237   05A5 E7            pop d
0238   05A6 FD 43         mov [d], b
0239   05A8             _for4_update:
0240   05A8 FA FD FF      lea d, [bp + -3] ; $j
0241   05AB 2A            mov b, [d]
0242   05AC 38 00 00      mov c, 0
0243   05AF 11            mov a, b
0244   05B0 FD 77         inc b
0245   05B2 FA FD FF      lea d, [bp + -3] ; $j
0246   05B5 FD 43         mov [d], b
0247   05B7 27            mov b, a
0248   05B8 0A 0B 05      jmp _for4_cond
0249   05BB             _for4_exit:
0250   05BB             _for3_update:
0251   05BB FA FF FF      lea d, [bp + -1] ; $i
0252   05BE 2A            mov b, [d]
0253   05BF 38 00 00      mov c, 0
0254   05C2 11            mov a, b
0255   05C3 FD 77         inc b
0256   05C5 FA FF FF      lea d, [bp + -1] ; $i
0257   05C8 FD 43         mov [d], b
0258   05CA 27            mov b, a
0259   05CB 0A E5 04      jmp _for3_cond
0260   05CE             _for3_exit:
0261   05CE F9            leave
0262   05CF 09            ret
0263   05D0             
0264   05D0             printf:
0265   05D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0266   05D3             ; char *p, *format_p; 
0267   05D3 52 02 00      sub sp, 2
0268   05D6 52 02 00      sub sp, 2
0269   05D9             ; format_p = format; 
0270   05D9 FA FD FF      lea d, [bp + -3] ; $format_p
0271   05DC DA            push d
0272   05DD FA 05 00      lea d, [bp + 5] ; $format
0273   05E0 2A            mov b, [d]
0274   05E1 38 00 00      mov c, 0
0275   05E4 E7            pop d
0276   05E5 FD 43         mov [d], b
0277   05E7             ; p = &format + 2; 
0278   05E7 FA FF FF      lea d, [bp + -1] ; $p
0279   05EA DA            push d
0280   05EB FA 05 00      lea d, [bp + 5] ; $format
0281   05EE 2D            mov b, d
0282   05EF             ; --- START TERMS
0283   05EF D7            push a
0284   05F0 11            mov a, b
0285   05F1 FD 2E 02 00   mov32 cb, $00000002
0285   05F5 00 00 
0286   05F7 56            add b, a
0287   05F8 E4            pop a
0288   05F9             ; --- END TERMS
0289   05F9 E7            pop d
0290   05FA FD 43         mov [d], b
0291   05FC             ; for(;;){ 
0292   05FC             _for5_init:
0293   05FC             _for5_cond:
0294   05FC             _for5_block:
0295   05FC             ; if(!*format_p) break; 
0296   05FC             _if6_cond:
0297   05FC FA FD FF      lea d, [bp + -3] ; $format_p
0298   05FF 2A            mov b, [d]
0299   0600 38 00 00      mov c, 0
0300   0603 74            mov d, b
0301   0604 32            mov bl, [d]
0302   0605 A7 00         mov bh, 0
0303   0607 38 00 00      mov c, 0
0304   060A C0 00 00      cmp b, 0
0305   060D FD 71         seq ; !
0306   060F C0 00 00      cmp b, 0
0307   0612 C6 1B 06      je _if6_else
0308   0615             _if6_TRUE:
0309   0615             ; break; 
0310   0615 0A CB 08      jmp _for5_exit ; for break
0311   0618 0A C8 08      jmp _if6_exit
0312   061B             _if6_else:
0313   061B             ; if(*format_p == '%'){ 
0314   061B             _if7_cond:
0315   061B FA FD FF      lea d, [bp + -3] ; $format_p
0316   061E 2A            mov b, [d]
0317   061F 38 00 00      mov c, 0
0318   0622 74            mov d, b
0319   0623 32            mov bl, [d]
0320   0624 A7 00         mov bh, 0
0321   0626 38 00 00      mov c, 0
0322   0629             ; --- START RELATIONAL
0323   0629 D7            push a
0324   062A 11            mov a, b
0325   062B FD 2E 25 00   mov32 cb, $00000025
0325   062F 00 00 
0326   0631 B0            cmp a, b
0327   0632 FD 71         seq ; ==
0328   0634 E4            pop a
0329   0635             ; --- END RELATIONAL
0330   0635 C0 00 00      cmp b, 0
0331   0638 C6 A3 08      je _if7_else
0332   063B             _if7_TRUE:
0333   063B             ; format_p++; 
0334   063B FA FD FF      lea d, [bp + -3] ; $format_p
0335   063E 2A            mov b, [d]
0336   063F 38 00 00      mov c, 0
0337   0642 FD 77         inc b
0338   0644 FA FD FF      lea d, [bp + -3] ; $format_p
0339   0647 FD 43         mov [d], b
0340   0649 FD 7D         dec b
0341   064B             ; switch(*format_p){ 
0342   064B             _switch8_expr:
0343   064B FA FD FF      lea d, [bp + -3] ; $format_p
0344   064E 2A            mov b, [d]
0345   064F 38 00 00      mov c, 0
0346   0652 74            mov d, b
0347   0653 32            mov bl, [d]
0348   0654 A7 00         mov bh, 0
0349   0656 38 00 00      mov c, 0
0350   0659             _switch8_comparisons:
0351   0659 C1 6C         cmp bl, $6c
0352   065B C6 87 06      je _switch8_case0
0353   065E C1 4C         cmp bl, $4c
0354   0660 C6 87 06      je _switch8_case1
0355   0663 C1 64         cmp bl, $64
0356   0665 C6 97 07      je _switch8_case2
0357   0668 C1 69         cmp bl, $69
0358   066A C6 97 07      je _switch8_case3
0359   066D C1 75         cmp bl, $75
0360   066F C6 C7 07      je _switch8_case4
0361   0672 C1 78         cmp bl, $78
0362   0674 C6 F7 07      je _switch8_case5
0363   0677 C1 63         cmp bl, $63
0364   0679 C6 27 08      je _switch8_case6
0365   067C C1 73         cmp bl, $73
0366   067E C6 57 08      je _switch8_case7
0367   0681 0A 84 08      jmp _switch8_default
0368   0684 0A 90 08      jmp _switch8_exit
0369   0687             _switch8_case0:
0370   0687             _switch8_case1:
0371   0687             ; format_p++; 
0372   0687 FA FD FF      lea d, [bp + -3] ; $format_p
0373   068A 2A            mov b, [d]
0374   068B 38 00 00      mov c, 0
0375   068E FD 77         inc b
0376   0690 FA FD FF      lea d, [bp + -3] ; $format_p
0377   0693 FD 43         mov [d], b
0378   0695 FD 7D         dec b
0379   0697             ; if(*format_p == 'd' || *format_p == 'i') 
0380   0697             _if9_cond:
0381   0697 FA FD FF      lea d, [bp + -3] ; $format_p
0382   069A 2A            mov b, [d]
0383   069B 38 00 00      mov c, 0
0384   069E 74            mov d, b
0385   069F 32            mov bl, [d]
0386   06A0 A7 00         mov bh, 0
0387   06A2 38 00 00      mov c, 0
0388   06A5             ; --- START RELATIONAL
0389   06A5 D7            push a
0390   06A6 11            mov a, b
0391   06A7 FD 2E 64 00   mov32 cb, $00000064
0391   06AB 00 00 
0392   06AD B0            cmp a, b
0393   06AE FD 71         seq ; ==
0394   06B0 E4            pop a
0395   06B1             ; --- END RELATIONAL
0396   06B1             ; --- START LOGICAL OR
0397   06B1 D7            push a
0398   06B2 11            mov a, b
0399   06B3 FA FD FF      lea d, [bp + -3] ; $format_p
0400   06B6 2A            mov b, [d]
0401   06B7 38 00 00      mov c, 0
0402   06BA 74            mov d, b
0403   06BB 32            mov bl, [d]
0404   06BC A7 00         mov bh, 0
0405   06BE 38 00 00      mov c, 0
0406   06C1             ; --- START RELATIONAL
0407   06C1 D7            push a
0408   06C2 11            mov a, b
0409   06C3 FD 2E 69 00   mov32 cb, $00000069
0409   06C7 00 00 
0410   06C9 B0            cmp a, b
0411   06CA FD 71         seq ; ==
0412   06CC E4            pop a
0413   06CD             ; --- END RELATIONAL
0414   06CD FD A8         sor a, b ; ||
0415   06CF E4            pop a
0416   06D0             ; --- END LOGICAL OR
0417   06D0 C0 00 00      cmp b, 0
0418   06D3 C6 F4 06      je _if9_else
0419   06D6             _if9_TRUE:
0420   06D6             ; print_signed_long(*(long *)p); 
0421   06D6             ; --- START FUNCTION CALL
0422   06D6 FA FF FF      lea d, [bp + -1] ; $p
0423   06D9 2A            mov b, [d]
0424   06DA 38 00 00      mov c, 0
0425   06DD 74            mov d, b
0426   06DE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0427   06E1 FD 39         mov c, b ; And place it into C
0428   06E3 2A            mov b, [d] ; Lower Word in B
0429   06E4 12            mov a, c
0430   06E5 FD AA         swp a
0431   06E7 D7            push a
0432   06E8 FD AB         swp b
0433   06EA D8            push b
0434   06EB 07 CD 08      call print_signed_long
0435   06EE 51 04 00      add sp, 4
0436   06F1             ; --- END FUNCTION CALL
0437   06F1 0A 7C 07      jmp _if9_exit
0438   06F4             _if9_else:
0439   06F4             ; if(*format_p == 'u') 
0440   06F4             _if10_cond:
0441   06F4 FA FD FF      lea d, [bp + -3] ; $format_p
0442   06F7 2A            mov b, [d]
0443   06F8 38 00 00      mov c, 0
0444   06FB 74            mov d, b
0445   06FC 32            mov bl, [d]
0446   06FD A7 00         mov bh, 0
0447   06FF 38 00 00      mov c, 0
0448   0702             ; --- START RELATIONAL
0449   0702 D7            push a
0450   0703 11            mov a, b
0451   0704 FD 2E 75 00   mov32 cb, $00000075
0451   0708 00 00 
0452   070A B0            cmp a, b
0453   070B FD 71         seq ; ==
0454   070D E4            pop a
0455   070E             ; --- END RELATIONAL
0456   070E C0 00 00      cmp b, 0
0457   0711 C6 32 07      je _if10_else
0458   0714             _if10_TRUE:
0459   0714             ; print_unsigned_long(*(unsigned long *)p); 
0460   0714             ; --- START FUNCTION CALL
0461   0714 FA FF FF      lea d, [bp + -1] ; $p
0462   0717 2A            mov b, [d]
0463   0718 38 00 00      mov c, 0
0464   071B 74            mov d, b
0465   071C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0466   071F FD 39         mov c, b ; And place it into C
0467   0721 2A            mov b, [d] ; Lower Word in B
0468   0722 12            mov a, c
0469   0723 FD AA         swp a
0470   0725 D7            push a
0471   0726 FD AB         swp b
0472   0728 D8            push b
0473   0729 07 60 0A      call print_unsigned_long
0474   072C 51 04 00      add sp, 4
0475   072F             ; --- END FUNCTION CALL
0476   072F 0A 7C 07      jmp _if10_exit
0477   0732             _if10_else:
0478   0732             ; if(*format_p == 'x') 
0479   0732             _if11_cond:
0480   0732 FA FD FF      lea d, [bp + -3] ; $format_p
0481   0735 2A            mov b, [d]
0482   0736 38 00 00      mov c, 0
0483   0739 74            mov d, b
0484   073A 32            mov bl, [d]
0485   073B A7 00         mov bh, 0
0486   073D 38 00 00      mov c, 0
0487   0740             ; --- START RELATIONAL
0488   0740 D7            push a
0489   0741 11            mov a, b
0490   0742 FD 2E 78 00   mov32 cb, $00000078
0490   0746 00 00 
0491   0748 B0            cmp a, b
0492   0749 FD 71         seq ; ==
0493   074B E4            pop a
0494   074C             ; --- END RELATIONAL
0495   074C C0 00 00      cmp b, 0
0496   074F C6 70 07      je _if11_else
0497   0752             _if11_TRUE:
0498   0752             ; printx32(*(long int *)p); 
0499   0752             ; --- START FUNCTION CALL
0500   0752 FA FF FF      lea d, [bp + -1] ; $p
0501   0755 2A            mov b, [d]
0502   0756 38 00 00      mov c, 0
0503   0759 74            mov d, b
0504   075A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0505   075D FD 39         mov c, b ; And place it into C
0506   075F 2A            mov b, [d] ; Lower Word in B
0507   0760 12            mov a, c
0508   0761 FD AA         swp a
0509   0763 D7            push a
0510   0764 FD AB         swp b
0511   0766 D8            push b
0512   0767 07 94 0B      call printx32
0513   076A 51 04 00      add sp, 4
0514   076D             ; --- END FUNCTION CALL
0515   076D 0A 7C 07      jmp _if11_exit
0516   0770             _if11_else:
0517   0770             ; err("Unexpected format in printf."); 
0518   0770             ; --- START FUNCTION CALL
0519   0770 26 01 2B      mov b, _s1 ; "Unexpected format in printf."
0520   0773 FD AB         swp b
0521   0775 D8            push b
0522   0776 07 F4 0B      call err
0523   0779 51 02 00      add sp, 2
0524   077C             ; --- END FUNCTION CALL
0525   077C             _if11_exit:
0526   077C             _if10_exit:
0527   077C             _if9_exit:
0528   077C             ; p = p + 4; 
0529   077C FA FF FF      lea d, [bp + -1] ; $p
0530   077F DA            push d
0531   0780 FA FF FF      lea d, [bp + -1] ; $p
0532   0783 2A            mov b, [d]
0533   0784 38 00 00      mov c, 0
0534   0787             ; --- START TERMS
0535   0787 D7            push a
0536   0788 11            mov a, b
0537   0789 FD 2E 04 00   mov32 cb, $00000004
0537   078D 00 00 
0538   078F 56            add b, a
0539   0790 E4            pop a
0540   0791             ; --- END TERMS
0541   0791 E7            pop d
0542   0792 FD 43         mov [d], b
0543   0794             ; break; 
0544   0794 0A 90 08      jmp _switch8_exit ; case break
0545   0797             _switch8_case2:
0546   0797             _switch8_case3:
0547   0797             ; print_signed(*(int*)p); 
0548   0797             ; --- START FUNCTION CALL
0549   0797 FA FF FF      lea d, [bp + -1] ; $p
0550   079A 2A            mov b, [d]
0551   079B 38 00 00      mov c, 0
0552   079E 74            mov d, b
0553   079F 2A            mov b, [d]
0554   07A0 38 00 00      mov c, 0
0555   07A3 FD AB         swp b
0556   07A5 D8            push b
0557   07A6 07 22 0C      call print_signed
0558   07A9 51 02 00      add sp, 2
0559   07AC             ; --- END FUNCTION CALL
0560   07AC             ; p = p + 2; 
0561   07AC FA FF FF      lea d, [bp + -1] ; $p
0562   07AF DA            push d
0563   07B0 FA FF FF      lea d, [bp + -1] ; $p
0564   07B3 2A            mov b, [d]
0565   07B4 38 00 00      mov c, 0
0566   07B7             ; --- START TERMS
0567   07B7 D7            push a
0568   07B8 11            mov a, b
0569   07B9 FD 2E 02 00   mov32 cb, $00000002
0569   07BD 00 00 
0570   07BF 56            add b, a
0571   07C0 E4            pop a
0572   07C1             ; --- END TERMS
0573   07C1 E7            pop d
0574   07C2 FD 43         mov [d], b
0575   07C4             ; break; 
0576   07C4 0A 90 08      jmp _switch8_exit ; case break
0577   07C7             _switch8_case4:
0578   07C7             ; print_unsigned(*(unsigned int*)p); 
0579   07C7             ; --- START FUNCTION CALL
0580   07C7 FA FF FF      lea d, [bp + -1] ; $p
0581   07CA 2A            mov b, [d]
0582   07CB 38 00 00      mov c, 0
0583   07CE 74            mov d, b
0584   07CF 2A            mov b, [d]
0585   07D0 38 00 00      mov c, 0
0586   07D3 FD AB         swp b
0587   07D5 D8            push b
0588   07D6 07 73 0D      call print_unsigned
0589   07D9 51 02 00      add sp, 2
0590   07DC             ; --- END FUNCTION CALL
0591   07DC             ; p = p + 2; 
0592   07DC FA FF FF      lea d, [bp + -1] ; $p
0593   07DF DA            push d
0594   07E0 FA FF FF      lea d, [bp + -1] ; $p
0595   07E3 2A            mov b, [d]
0596   07E4 38 00 00      mov c, 0
0597   07E7             ; --- START TERMS
0598   07E7 D7            push a
0599   07E8 11            mov a, b
0600   07E9 FD 2E 02 00   mov32 cb, $00000002
0600   07ED 00 00 
0601   07EF 56            add b, a
0602   07F0 E4            pop a
0603   07F1             ; --- END TERMS
0604   07F1 E7            pop d
0605   07F2 FD 43         mov [d], b
0606   07F4             ; break; 
0607   07F4 0A 90 08      jmp _switch8_exit ; case break
0608   07F7             _switch8_case5:
0609   07F7             ; printx16(*(int*)p); 
0610   07F7             ; --- START FUNCTION CALL
0611   07F7 FA FF FF      lea d, [bp + -1] ; $p
0612   07FA 2A            mov b, [d]
0613   07FB 38 00 00      mov c, 0
0614   07FE 74            mov d, b
0615   07FF 2A            mov b, [d]
0616   0800 38 00 00      mov c, 0
0617   0803 FD AB         swp b
0618   0805 D8            push b
0619   0806 07 8B 0E      call printx16
0620   0809 51 02 00      add sp, 2
0621   080C             ; --- END FUNCTION CALL
0622   080C             ; p = p + 2; 
0623   080C FA FF FF      lea d, [bp + -1] ; $p
0624   080F DA            push d
0625   0810 FA FF FF      lea d, [bp + -1] ; $p
0626   0813 2A            mov b, [d]
0627   0814 38 00 00      mov c, 0
0628   0817             ; --- START TERMS
0629   0817 D7            push a
0630   0818 11            mov a, b
0631   0819 FD 2E 02 00   mov32 cb, $00000002
0631   081D 00 00 
0632   081F 56            add b, a
0633   0820 E4            pop a
0634   0821             ; --- END TERMS
0635   0821 E7            pop d
0636   0822 FD 43         mov [d], b
0637   0824             ; break; 
0638   0824 0A 90 08      jmp _switch8_exit ; case break
0639   0827             _switch8_case6:
0640   0827             ; putchar(*(char*)p); 
0641   0827             ; --- START FUNCTION CALL
0642   0827 FA FF FF      lea d, [bp + -1] ; $p
0643   082A 2A            mov b, [d]
0644   082B 38 00 00      mov c, 0
0645   082E 74            mov d, b
0646   082F 32            mov bl, [d]
0647   0830 A7 00         mov bh, 0
0648   0832 38 00 00      mov c, 0
0649   0835 DD            push bl
0650   0836 07 52 0A      call putchar
0651   0839 51 01 00      add sp, 1
0652   083C             ; --- END FUNCTION CALL
0653   083C             ; p = p + 1; 
0654   083C FA FF FF      lea d, [bp + -1] ; $p
0655   083F DA            push d
0656   0840 FA FF FF      lea d, [bp + -1] ; $p
0657   0843 2A            mov b, [d]
0658   0844 38 00 00      mov c, 0
0659   0847             ; --- START TERMS
0660   0847 D7            push a
0661   0848 11            mov a, b
0662   0849 FD 2E 01 00   mov32 cb, $00000001
0662   084D 00 00 
0663   084F 56            add b, a
0664   0850 E4            pop a
0665   0851             ; --- END TERMS
0666   0851 E7            pop d
0667   0852 FD 43         mov [d], b
0668   0854             ; break; 
0669   0854 0A 90 08      jmp _switch8_exit ; case break
0670   0857             _switch8_case7:
0671   0857             ; print(*(char**)p); 
0672   0857             ; --- START FUNCTION CALL
0673   0857 FA FF FF      lea d, [bp + -1] ; $p
0674   085A 2A            mov b, [d]
0675   085B 38 00 00      mov c, 0
0676   085E 74            mov d, b
0677   085F 2A            mov b, [d]
0678   0860 FD AB         swp b
0679   0862 D8            push b
0680   0863 07 09 0C      call print
0681   0866 51 02 00      add sp, 2
0682   0869             ; --- END FUNCTION CALL
0683   0869             ; p = p + 2; 
0684   0869 FA FF FF      lea d, [bp + -1] ; $p
0685   086C DA            push d
0686   086D FA FF FF      lea d, [bp + -1] ; $p
0687   0870 2A            mov b, [d]
0688   0871 38 00 00      mov c, 0
0689   0874             ; --- START TERMS
0690   0874 D7            push a
0691   0875 11            mov a, b
0692   0876 FD 2E 02 00   mov32 cb, $00000002
0692   087A 00 00 
0693   087C 56            add b, a
0694   087D E4            pop a
0695   087E             ; --- END TERMS
0696   087E E7            pop d
0697   087F FD 43         mov [d], b
0698   0881             ; break; 
0699   0881 0A 90 08      jmp _switch8_exit ; case break
0700   0884             _switch8_default:
0701   0884             ; print("Error: Unknown argument type.\n"); 
0702   0884             ; --- START FUNCTION CALL
0703   0884 26 1E 2B      mov b, _s2 ; "Error: Unknown argument type.\n"
0704   0887 FD AB         swp b
0705   0889 D8            push b
0706   088A 07 09 0C      call print
0707   088D 51 02 00      add sp, 2
0708   0890             ; --- END FUNCTION CALL
0709   0890             _switch8_exit:
0710   0890             ; format_p++; 
0711   0890 FA FD FF      lea d, [bp + -3] ; $format_p
0712   0893 2A            mov b, [d]
0713   0894 38 00 00      mov c, 0
0714   0897 FD 77         inc b
0715   0899 FA FD FF      lea d, [bp + -3] ; $format_p
0716   089C FD 43         mov [d], b
0717   089E FD 7D         dec b
0718   08A0 0A C8 08      jmp _if7_exit
0719   08A3             _if7_else:
0720   08A3             ; putchar(*format_p); 
0721   08A3             ; --- START FUNCTION CALL
0722   08A3 FA FD FF      lea d, [bp + -3] ; $format_p
0723   08A6 2A            mov b, [d]
0724   08A7 38 00 00      mov c, 0
0725   08AA 74            mov d, b
0726   08AB 32            mov bl, [d]
0727   08AC A7 00         mov bh, 0
0728   08AE 38 00 00      mov c, 0
0729   08B1 DD            push bl
0730   08B2 07 52 0A      call putchar
0731   08B5 51 01 00      add sp, 1
0732   08B8             ; --- END FUNCTION CALL
0733   08B8             ; format_p++; 
0734   08B8 FA FD FF      lea d, [bp + -3] ; $format_p
0735   08BB 2A            mov b, [d]
0736   08BC 38 00 00      mov c, 0
0737   08BF FD 77         inc b
0738   08C1 FA FD FF      lea d, [bp + -3] ; $format_p
0739   08C4 FD 43         mov [d], b
0740   08C6 FD 7D         dec b
0741   08C8             _if7_exit:
0742   08C8             _if6_exit:
0743   08C8             _for5_update:
0744   08C8 0A FC 05      jmp _for5_cond
0745   08CB             _for5_exit:
0746   08CB F9            leave
0747   08CC 09            ret
0748   08CD             
0749   08CD             print_signed_long:
0750   08CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0751   08D0             ; char digits[10]; 
0752   08D0 52 0A 00      sub sp, 10
0753   08D3             ; int i = 0; 
0754   08D3 52 02 00      sub sp, 2
0755   08D6             ; --- START LOCAL VAR INITIALIZATION
0756   08D6 FA F5 FF      lea d, [bp + -11] ; $i
0757   08D9 DA            push d
0758   08DA FD 2E 00 00   mov32 cb, $00000000
0758   08DE 00 00 
0759   08E0 E7            pop d
0760   08E1 FD 43         mov [d], b
0761   08E3             ; --- END LOCAL VAR INITIALIZATION
0762   08E3             ; if (num < 0) { 
0763   08E3             _if12_cond:
0764   08E3 FA 05 00      lea d, [bp + 5] ; $num
0765   08E6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0766   08E9 FD 39         mov c, b ; And place it into C
0767   08EB 2A            mov b, [d] ; Lower Word in B
0768   08EC             ; --- START RELATIONAL
0769   08EC D7            push a
0770   08ED FD D8         push g
0771   08EF 11            mov a, b
0772   08F0 FD 7A         mov g, c
0773   08F2 FD 2E 00 00   mov32 cb, $00000000
0773   08F6 00 00 
0774   08F8 FD AF         cmp32 ga, cb
0775   08FA FD 73         slt ; <
0776   08FC FD F1         pop g
0777   08FE E4            pop a
0778   08FF             ; --- END RELATIONAL
0779   08FF C0 00 00      cmp b, 0
0780   0902 C6 34 09      je _if12_else
0781   0905             _if12_TRUE:
0782   0905             ; putchar('-'); 
0783   0905             ; --- START FUNCTION CALL
0784   0905 FD 2E 2D 00   mov32 cb, $0000002d
0784   0909 00 00 
0785   090B DD            push bl
0786   090C 07 52 0A      call putchar
0787   090F 51 01 00      add sp, 1
0788   0912             ; --- END FUNCTION CALL
0789   0912             ; num = -num; 
0790   0912 FA 05 00      lea d, [bp + 5] ; $num
0791   0915 DA            push d
0792   0916 FA 05 00      lea d, [bp + 5] ; $num
0793   0919 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0794   091C FD 39         mov c, b ; And place it into C
0795   091E 2A            mov b, [d] ; Lower Word in B
0796   091F 12            mov a, c
0797   0920 95            not a
0798   0921 97            not b
0799   0922 55 01 00      add b, 1
0800   0925 5B 00 00      adc a, 0
0801   0928 39            mov c, a
0802   0929 E7            pop d
0803   092A FD 43         mov [d], b
0804   092C 28            mov b, c
0805   092D FD 44 02 00   mov [d + 2], b
0806   0931 0A 68 09      jmp _if12_exit
0807   0934             _if12_else:
0808   0934             ; if (num == 0) { 
0809   0934             _if13_cond:
0810   0934 FA 05 00      lea d, [bp + 5] ; $num
0811   0937 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0812   093A FD 39         mov c, b ; And place it into C
0813   093C 2A            mov b, [d] ; Lower Word in B
0814   093D             ; --- START RELATIONAL
0815   093D D7            push a
0816   093E FD D8         push g
0817   0940 11            mov a, b
0818   0941 FD 7A         mov g, c
0819   0943 FD 2E 00 00   mov32 cb, $00000000
0819   0947 00 00 
0820   0949 FD AF         cmp32 ga, cb
0821   094B FD 71         seq ; ==
0822   094D FD F1         pop g
0823   094F E4            pop a
0824   0950             ; --- END RELATIONAL
0825   0950 C0 00 00      cmp b, 0
0826   0953 C6 68 09      je _if13_exit
0827   0956             _if13_TRUE:
0828   0956             ; putchar('0'); 
0829   0956             ; --- START FUNCTION CALL
0830   0956 FD 2E 30 00   mov32 cb, $00000030
0830   095A 00 00 
0831   095C DD            push bl
0832   095D 07 52 0A      call putchar
0833   0960 51 01 00      add sp, 1
0834   0963             ; --- END FUNCTION CALL
0835   0963             ; return; 
0836   0963 F9            leave
0837   0964 09            ret
0838   0965 0A 68 09      jmp _if13_exit
0839   0968             _if13_exit:
0840   0968             _if12_exit:
0841   0968             ; while (num > 0) { 
0842   0968             _while14_cond:
0843   0968 FA 05 00      lea d, [bp + 5] ; $num
0844   096B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0845   096E FD 39         mov c, b ; And place it into C
0846   0970 2A            mov b, [d] ; Lower Word in B
0847   0971             ; --- START RELATIONAL
0848   0971 D7            push a
0849   0972 FD D8         push g
0850   0974 11            mov a, b
0851   0975 FD 7A         mov g, c
0852   0977 FD 2E 00 00   mov32 cb, $00000000
0852   097B 00 00 
0853   097D FD AF         cmp32 ga, cb
0854   097F FD 7F         sgt
0855   0981 FD F1         pop g
0856   0983 E4            pop a
0857   0984             ; --- END RELATIONAL
0858   0984 C0 00 00      cmp b, 0
0859   0987 C6 08 0A      je _while14_exit
0860   098A             _while14_block:
0861   098A             ; digits[i] = '0' + (num % 10); 
0862   098A FA F7 FF      lea d, [bp + -9] ; $digits
0863   098D D7            push a
0864   098E DA            push d
0865   098F FA F5 FF      lea d, [bp + -11] ; $i
0866   0992 2A            mov b, [d]
0867   0993 38 00 00      mov c, 0
0868   0996 E7            pop d
0869   0997 5A            add d, b
0870   0998 E4            pop a
0871   0999 DA            push d
0872   099A FD 2E 30 00   mov32 cb, $00000030
0872   099E 00 00 
0873   09A0             ; --- START TERMS
0874   09A0 D7            push a
0875   09A1 11            mov a, b
0876   09A2 FA 05 00      lea d, [bp + 5] ; $num
0877   09A5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0878   09A8 FD 39         mov c, b ; And place it into C
0879   09AA 2A            mov b, [d] ; Lower Word in B
0880   09AB             ; --- START FACTORS
0881   09AB D7            push a
0882   09AC FD D8         push g
0883   09AE 11            mov a, b
0884   09AF FD 7A         mov g, c
0885   09B1 FD 2E 0A 00   mov32 cb, $0000000a
0885   09B5 00 00 
0886   09B7 FD D8         push g ; save 'g' as the div instruction uses it
0887   09B9 AE            div a, b ; %, a: quotient, b: remainder
0888   09BA 11            mov a, b
0889   09BB FD F1         pop g
0890   09BD FD 38         mov c, g
0891   09BF 27            mov b, a
0892   09C0 FD F1         pop g
0893   09C2 E4            pop a
0894   09C3             ; --- END FACTORS
0895   09C3 FD 15         add32 cb, ga
0896   09C5 E4            pop a
0897   09C6             ; --- END TERMS
0898   09C6 E7            pop d
0899   09C7 FD 3E         mov [d], bl
0900   09C9             ; num = num / 10; 
0901   09C9 FA 05 00      lea d, [bp + 5] ; $num
0902   09CC DA            push d
0903   09CD FA 05 00      lea d, [bp + 5] ; $num
0904   09D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0905   09D3 FD 39         mov c, b ; And place it into C
0906   09D5 2A            mov b, [d] ; Lower Word in B
0907   09D6             ; --- START FACTORS
0908   09D6 D7            push a
0909   09D7 FD D8         push g
0910   09D9 11            mov a, b
0911   09DA FD 7A         mov g, c
0912   09DC FD 2E 0A 00   mov32 cb, $0000000a
0912   09E0 00 00 
0913   09E2 FD D8         push g ; save 'g' as the div instruction uses it
0914   09E4 AE            div a, b ; /, a: quotient, b: remainder
0915   09E5 FD F1         pop g
0916   09E7 FD 38         mov c, g
0917   09E9 27            mov b, a
0918   09EA FD F1         pop g
0919   09EC E4            pop a
0920   09ED             ; --- END FACTORS
0921   09ED E7            pop d
0922   09EE FD 43         mov [d], b
0923   09F0 28            mov b, c
0924   09F1 FD 44 02 00   mov [d + 2], b
0925   09F5             ; i++; 
0926   09F5 FA F5 FF      lea d, [bp + -11] ; $i
0927   09F8 2A            mov b, [d]
0928   09F9 38 00 00      mov c, 0
0929   09FC 11            mov a, b
0930   09FD FD 77         inc b
0931   09FF FA F5 FF      lea d, [bp + -11] ; $i
0932   0A02 FD 43         mov [d], b
0933   0A04 27            mov b, a
0934   0A05 0A 68 09      jmp _while14_cond
0935   0A08             _while14_exit:
0936   0A08             ; while (i > 0) { 
0937   0A08             _while21_cond:
0938   0A08 FA F5 FF      lea d, [bp + -11] ; $i
0939   0A0B 2A            mov b, [d]
0940   0A0C 38 00 00      mov c, 0
0941   0A0F             ; --- START RELATIONAL
0942   0A0F D7            push a
0943   0A10 11            mov a, b
0944   0A11 FD 2E 00 00   mov32 cb, $00000000
0944   0A15 00 00 
0945   0A17 B0            cmp a, b
0946   0A18 FD 7F         sgt ; >
0947   0A1A E4            pop a
0948   0A1B             ; --- END RELATIONAL
0949   0A1B C0 00 00      cmp b, 0
0950   0A1E C6 50 0A      je _while21_exit
0951   0A21             _while21_block:
0952   0A21             ; i--; 
0953   0A21 FA F5 FF      lea d, [bp + -11] ; $i
0954   0A24 2A            mov b, [d]
0955   0A25 38 00 00      mov c, 0
0956   0A28 11            mov a, b
0957   0A29 FD 7D         dec b
0958   0A2B FA F5 FF      lea d, [bp + -11] ; $i
0959   0A2E FD 43         mov [d], b
0960   0A30 27            mov b, a
0961   0A31             ; putchar(digits[i]); 
0962   0A31             ; --- START FUNCTION CALL
0963   0A31 FA F7 FF      lea d, [bp + -9] ; $digits
0964   0A34 D7            push a
0965   0A35 DA            push d
0966   0A36 FA F5 FF      lea d, [bp + -11] ; $i
0967   0A39 2A            mov b, [d]
0968   0A3A 38 00 00      mov c, 0
0969   0A3D E7            pop d
0970   0A3E 5A            add d, b
0971   0A3F E4            pop a
0972   0A40 32            mov bl, [d]
0973   0A41 A7 00         mov bh, 0
0974   0A43 38 00 00      mov c, 0
0975   0A46 DD            push bl
0976   0A47 07 52 0A      call putchar
0977   0A4A 51 01 00      add sp, 1
0978   0A4D             ; --- END FUNCTION CALL
0979   0A4D 0A 08 0A      jmp _while21_cond
0980   0A50             _while21_exit:
0981   0A50 F9            leave
0982   0A51 09            ret
0983   0A52             
0984   0A52             putchar:
0985   0A52 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0986   0A55             ; --- BEGIN INLINE ASM SEGMENT
0987   0A55 FA 05 00      lea d, [bp + 5] ; $c
0988   0A58 1E            mov al, [d]
0989   0A59 23            mov ah, al
0990   0A5A 19 00         mov al, 0
0991   0A5C 05 03         syscall sys_io      ; char in AH
0992   0A5E             ; --- END INLINE ASM SEGMENT
0993   0A5E F9            leave
0994   0A5F 09            ret
0995   0A60             
0996   0A60             print_unsigned_long:
0997   0A60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0998   0A63             ; char digits[10]; 
0999   0A63 52 0A 00      sub sp, 10
1000   0A66             ; int i; 
1001   0A66 52 02 00      sub sp, 2
1002   0A69             ; i = 0; 
1003   0A69 FA F5 FF      lea d, [bp + -11] ; $i
1004   0A6C DA            push d
1005   0A6D FD 2E 00 00   mov32 cb, $00000000
1005   0A71 00 00 
1006   0A73 E7            pop d
1007   0A74 FD 43         mov [d], b
1008   0A76             ; if(num == 0){ 
1009   0A76             _if22_cond:
1010   0A76 FA 05 00      lea d, [bp + 5] ; $num
1011   0A79 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1012   0A7C FD 39         mov c, b ; And place it into C
1013   0A7E 2A            mov b, [d] ; Lower Word in B
1014   0A7F             ; --- START RELATIONAL
1015   0A7F D7            push a
1016   0A80 FD D8         push g
1017   0A82 11            mov a, b
1018   0A83 FD 7A         mov g, c
1019   0A85 FD 2E 00 00   mov32 cb, $00000000
1019   0A89 00 00 
1020   0A8B FD AF         cmp32 ga, cb
1021   0A8D FD 71         seq ; ==
1022   0A8F FD F1         pop g
1023   0A91 E4            pop a
1024   0A92             ; --- END RELATIONAL
1025   0A92 C0 00 00      cmp b, 0
1026   0A95 C6 AA 0A      je _if22_exit
1027   0A98             _if22_TRUE:
1028   0A98             ; putchar('0'); 
1029   0A98             ; --- START FUNCTION CALL
1030   0A98 FD 2E 30 00   mov32 cb, $00000030
1030   0A9C 00 00 
1031   0A9E DD            push bl
1032   0A9F 07 52 0A      call putchar
1033   0AA2 51 01 00      add sp, 1
1034   0AA5             ; --- END FUNCTION CALL
1035   0AA5             ; return; 
1036   0AA5 F9            leave
1037   0AA6 09            ret
1038   0AA7 0A AA 0A      jmp _if22_exit
1039   0AAA             _if22_exit:
1040   0AAA             ; while (num > 0) { 
1041   0AAA             _while23_cond:
1042   0AAA FA 05 00      lea d, [bp + 5] ; $num
1043   0AAD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1044   0AB0 FD 39         mov c, b ; And place it into C
1045   0AB2 2A            mov b, [d] ; Lower Word in B
1046   0AB3             ; --- START RELATIONAL
1047   0AB3 D7            push a
1048   0AB4 FD D8         push g
1049   0AB6 11            mov a, b
1050   0AB7 FD 7A         mov g, c
1051   0AB9 FD 2E 00 00   mov32 cb, $00000000
1051   0ABD 00 00 
1052   0ABF FD AF         cmp32 ga, cb
1053   0AC1 FD 81         sgu
1054   0AC3 FD F1         pop g
1055   0AC5 E4            pop a
1056   0AC6             ; --- END RELATIONAL
1057   0AC6 C0 00 00      cmp b, 0
1058   0AC9 C6 4A 0B      je _while23_exit
1059   0ACC             _while23_block:
1060   0ACC             ; digits[i] = '0' + (num % 10); 
1061   0ACC FA F7 FF      lea d, [bp + -9] ; $digits
1062   0ACF D7            push a
1063   0AD0 DA            push d
1064   0AD1 FA F5 FF      lea d, [bp + -11] ; $i
1065   0AD4 2A            mov b, [d]
1066   0AD5 38 00 00      mov c, 0
1067   0AD8 E7            pop d
1068   0AD9 5A            add d, b
1069   0ADA E4            pop a
1070   0ADB DA            push d
1071   0ADC FD 2E 30 00   mov32 cb, $00000030
1071   0AE0 00 00 
1072   0AE2             ; --- START TERMS
1073   0AE2 D7            push a
1074   0AE3 11            mov a, b
1075   0AE4 FA 05 00      lea d, [bp + 5] ; $num
1076   0AE7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1077   0AEA FD 39         mov c, b ; And place it into C
1078   0AEC 2A            mov b, [d] ; Lower Word in B
1079   0AED             ; --- START FACTORS
1080   0AED D7            push a
1081   0AEE FD D8         push g
1082   0AF0 11            mov a, b
1083   0AF1 FD 7A         mov g, c
1084   0AF3 FD 2E 0A 00   mov32 cb, $0000000a
1084   0AF7 00 00 
1085   0AF9 FD D8         push g ; save 'g' as the div instruction uses it
1086   0AFB AE            div a, b ; %, a: quotient, b: remainder
1087   0AFC 11            mov a, b
1088   0AFD FD F1         pop g
1089   0AFF FD 38         mov c, g
1090   0B01 27            mov b, a
1091   0B02 FD F1         pop g
1092   0B04 E4            pop a
1093   0B05             ; --- END FACTORS
1094   0B05 FD 15         add32 cb, ga
1095   0B07 E4            pop a
1096   0B08             ; --- END TERMS
1097   0B08 E7            pop d
1098   0B09 FD 3E         mov [d], bl
1099   0B0B             ; num = num / 10; 
1100   0B0B FA 05 00      lea d, [bp + 5] ; $num
1101   0B0E DA            push d
1102   0B0F FA 05 00      lea d, [bp + 5] ; $num
1103   0B12 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1104   0B15 FD 39         mov c, b ; And place it into C
1105   0B17 2A            mov b, [d] ; Lower Word in B
1106   0B18             ; --- START FACTORS
1107   0B18 D7            push a
1108   0B19 FD D8         push g
1109   0B1B 11            mov a, b
1110   0B1C FD 7A         mov g, c
1111   0B1E FD 2E 0A 00   mov32 cb, $0000000a
1111   0B22 00 00 
1112   0B24 FD D8         push g ; save 'g' as the div instruction uses it
1113   0B26 AE            div a, b ; /, a: quotient, b: remainder
1114   0B27 FD F1         pop g
1115   0B29 FD 38         mov c, g
1116   0B2B 27            mov b, a
1117   0B2C FD F1         pop g
1118   0B2E E4            pop a
1119   0B2F             ; --- END FACTORS
1120   0B2F E7            pop d
1121   0B30 FD 43         mov [d], b
1122   0B32 28            mov b, c
1123   0B33 FD 44 02 00   mov [d + 2], b
1124   0B37             ; i++; 
1125   0B37 FA F5 FF      lea d, [bp + -11] ; $i
1126   0B3A 2A            mov b, [d]
1127   0B3B 38 00 00      mov c, 0
1128   0B3E 11            mov a, b
1129   0B3F FD 77         inc b
1130   0B41 FA F5 FF      lea d, [bp + -11] ; $i
1131   0B44 FD 43         mov [d], b
1132   0B46 27            mov b, a
1133   0B47 0A AA 0A      jmp _while23_cond
1134   0B4A             _while23_exit:
1135   0B4A             ; while (i > 0) { 
1136   0B4A             _while30_cond:
1137   0B4A FA F5 FF      lea d, [bp + -11] ; $i
1138   0B4D 2A            mov b, [d]
1139   0B4E 38 00 00      mov c, 0
1140   0B51             ; --- START RELATIONAL
1141   0B51 D7            push a
1142   0B52 11            mov a, b
1143   0B53 FD 2E 00 00   mov32 cb, $00000000
1143   0B57 00 00 
1144   0B59 B0            cmp a, b
1145   0B5A FD 7F         sgt ; >
1146   0B5C E4            pop a
1147   0B5D             ; --- END RELATIONAL
1148   0B5D C0 00 00      cmp b, 0
1149   0B60 C6 92 0B      je _while30_exit
1150   0B63             _while30_block:
1151   0B63             ; i--; 
1152   0B63 FA F5 FF      lea d, [bp + -11] ; $i
1153   0B66 2A            mov b, [d]
1154   0B67 38 00 00      mov c, 0
1155   0B6A 11            mov a, b
1156   0B6B FD 7D         dec b
1157   0B6D FA F5 FF      lea d, [bp + -11] ; $i
1158   0B70 FD 43         mov [d], b
1159   0B72 27            mov b, a
1160   0B73             ; putchar(digits[i]); 
1161   0B73             ; --- START FUNCTION CALL
1162   0B73 FA F7 FF      lea d, [bp + -9] ; $digits
1163   0B76 D7            push a
1164   0B77 DA            push d
1165   0B78 FA F5 FF      lea d, [bp + -11] ; $i
1166   0B7B 2A            mov b, [d]
1167   0B7C 38 00 00      mov c, 0
1168   0B7F E7            pop d
1169   0B80 5A            add d, b
1170   0B81 E4            pop a
1171   0B82 32            mov bl, [d]
1172   0B83 A7 00         mov bh, 0
1173   0B85 38 00 00      mov c, 0
1174   0B88 DD            push bl
1175   0B89 07 52 0A      call putchar
1176   0B8C 51 01 00      add sp, 1
1177   0B8F             ; --- END FUNCTION CALL
1178   0B8F 0A 4A 0B      jmp _while30_cond
1179   0B92             _while30_exit:
1180   0B92 F9            leave
1181   0B93 09            ret
1182   0B94             
1183   0B94             printx32:
1184   0B94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1185   0B97             ; --- BEGIN INLINE ASM SEGMENT
1186   0B97 FA 05 00      lea d, [bp + 5] ; $hex
1187   0B9A 2B 02 00      mov b, [d+2]
1188   0B9D 07 A6 0B      call print_u16x_printx32
1189   0BA0 2A            mov b, [d]
1190   0BA1 07 A6 0B      call print_u16x_printx32
1191   0BA4             ; --- END INLINE ASM SEGMENT
1192   0BA4             ; return; 
1193   0BA4 F9            leave
1194   0BA5 09            ret
1195   0BA6             ; --- BEGIN INLINE ASM SEGMENT
1196   0BA6             print_u16x_printx32:
1197   0BA6 D7            push a
1198   0BA7 D8            push b
1199   0BA8 DD            push bl
1200   0BA9 30            mov bl, bh
1201   0BAA 07 C8 0B      call _itoa_printx32        ; convert bh to char in A
1202   0BAD 2F            mov bl, al        ; save al
1203   0BAE 19 00         mov al, 0
1204   0BB0 05 03         syscall sys_io        ; display AH
1205   0BB2 24            mov ah, bl        ; retrieve al
1206   0BB3 19 00         mov al, 0
1207   0BB5 05 03         syscall sys_io        ; display AL
1208   0BB7 EA            pop bl
1209   0BB8 07 C8 0B      call _itoa_printx32        ; convert bh to char in A
1210   0BBB 2F            mov bl, al        ; save al
1211   0BBC 19 00         mov al, 0
1212   0BBE 05 03         syscall sys_io        ; display AH
1213   0BC0 24            mov ah, bl        ; retrieve al
1214   0BC1 19 00         mov al, 0
1215   0BC3 05 03         syscall sys_io        ; display AL
1216   0BC5 E5            pop b
1217   0BC6 E4            pop a
1218   0BC7 09            ret
1219   0BC8             _itoa_printx32:
1220   0BC8 DA            push d
1221   0BC9 D8            push b
1222   0BCA A7 00         mov bh, 0
1223   0BCC FD A4 04      shr bl, 4  
1224   0BCF 74            mov d, b
1225   0BD0 1F E2 0B      mov al, [d + s_hex_digits_printx32]
1226   0BD3 23            mov ah, al
1227   0BD4 E5            pop b
1228   0BD5 D8            push b
1229   0BD6 A7 00         mov bh, 0
1230   0BD8 FD 87 0F      and bl, $0F
1231   0BDB 74            mov d, b
1232   0BDC 1F E2 0B      mov al, [d + s_hex_digits_printx32]
1233   0BDF E5            pop b
1234   0BE0 E7            pop d
1235   0BE1 09            ret
1236   0BE2 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
1236   0BE6 34 35 36 37 
1236   0BEA 38 39 41 42 
1236   0BEE 43 44 45 46 
1237   0BF2             ; --- END INLINE ASM SEGMENT
1238   0BF2 F9            leave
1239   0BF3 09            ret
1240   0BF4             
1241   0BF4             err:
1242   0BF4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1243   0BF7             ; print(e); 
1244   0BF7             ; --- START FUNCTION CALL
1245   0BF7 FA 05 00      lea d, [bp + 5] ; $e
1246   0BFA 2A            mov b, [d]
1247   0BFB 38 00 00      mov c, 0
1248   0BFE FD AB         swp b
1249   0C00 D8            push b
1250   0C01 07 09 0C      call print
1251   0C04 51 02 00      add sp, 2
1252   0C07             ; --- END FUNCTION CALL
1253   0C07 F9            leave
1254   0C08 09            ret
1255   0C09             
1256   0C09             print:
1257   0C09 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1258   0C0C             ; --- BEGIN INLINE ASM SEGMENT
1259   0C0C FA 05 00      lea d, [bp + 5] ; $s
1260   0C0F FD 2A         mov d, [d]
1261   0C11             _puts_L1_print:
1262   0C11 1E            mov al, [d]
1263   0C12 B9 00         cmp al, 0
1264   0C14 C6 20 0C      jz _puts_END_print
1265   0C17 23            mov ah, al
1266   0C18 19 00         mov al, 0
1267   0C1A 05 03         syscall sys_io
1268   0C1C 79            inc d
1269   0C1D 0A 11 0C      jmp _puts_L1_print
1270   0C20             _puts_END_print:
1271   0C20             ; --- END INLINE ASM SEGMENT
1272   0C20 F9            leave
1273   0C21 09            ret
1274   0C22             
1275   0C22             print_signed:
1276   0C22 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1277   0C25             ; char digits[5]; 
1278   0C25 52 05 00      sub sp, 5
1279   0C28             ; int i = 0; 
1280   0C28 52 02 00      sub sp, 2
1281   0C2B             ; --- START LOCAL VAR INITIALIZATION
1282   0C2B FA FA FF      lea d, [bp + -6] ; $i
1283   0C2E DA            push d
1284   0C2F FD 2E 00 00   mov32 cb, $00000000
1284   0C33 00 00 
1285   0C35 E7            pop d
1286   0C36 FD 43         mov [d], b
1287   0C38             ; --- END LOCAL VAR INITIALIZATION
1288   0C38             ; if (num < 0) { 
1289   0C38             _if31_cond:
1290   0C38 FA 05 00      lea d, [bp + 5] ; $num
1291   0C3B 2A            mov b, [d]
1292   0C3C 38 00 00      mov c, 0
1293   0C3F             ; --- START RELATIONAL
1294   0C3F D7            push a
1295   0C40 11            mov a, b
1296   0C41 FD 2E 00 00   mov32 cb, $00000000
1296   0C45 00 00 
1297   0C47 B0            cmp a, b
1298   0C48 FD 73         slt ; < (signed)
1299   0C4A E4            pop a
1300   0C4B             ; --- END RELATIONAL
1301   0C4B C0 00 00      cmp b, 0
1302   0C4E C6 71 0C      je _if31_else
1303   0C51             _if31_TRUE:
1304   0C51             ; putchar('-'); 
1305   0C51             ; --- START FUNCTION CALL
1306   0C51 FD 2E 2D 00   mov32 cb, $0000002d
1306   0C55 00 00 
1307   0C57 DD            push bl
1308   0C58 07 52 0A      call putchar
1309   0C5B 51 01 00      add sp, 1
1310   0C5E             ; --- END FUNCTION CALL
1311   0C5E             ; num = -num; 
1312   0C5E FA 05 00      lea d, [bp + 5] ; $num
1313   0C61 DA            push d
1314   0C62 FA 05 00      lea d, [bp + 5] ; $num
1315   0C65 2A            mov b, [d]
1316   0C66 38 00 00      mov c, 0
1317   0C69 FD 97         neg b
1318   0C6B E7            pop d
1319   0C6C FD 43         mov [d], b
1320   0C6E 0A 9C 0C      jmp _if31_exit
1321   0C71             _if31_else:
1322   0C71             ; if (num == 0) { 
1323   0C71             _if32_cond:
1324   0C71 FA 05 00      lea d, [bp + 5] ; $num
1325   0C74 2A            mov b, [d]
1326   0C75 38 00 00      mov c, 0
1327   0C78             ; --- START RELATIONAL
1328   0C78 D7            push a
1329   0C79 11            mov a, b
1330   0C7A FD 2E 00 00   mov32 cb, $00000000
1330   0C7E 00 00 
1331   0C80 B0            cmp a, b
1332   0C81 FD 71         seq ; ==
1333   0C83 E4            pop a
1334   0C84             ; --- END RELATIONAL
1335   0C84 C0 00 00      cmp b, 0
1336   0C87 C6 9C 0C      je _if32_exit
1337   0C8A             _if32_TRUE:
1338   0C8A             ; putchar('0'); 
1339   0C8A             ; --- START FUNCTION CALL
1340   0C8A FD 2E 30 00   mov32 cb, $00000030
1340   0C8E 00 00 
1341   0C90 DD            push bl
1342   0C91 07 52 0A      call putchar
1343   0C94 51 01 00      add sp, 1
1344   0C97             ; --- END FUNCTION CALL
1345   0C97             ; return; 
1346   0C97 F9            leave
1347   0C98 09            ret
1348   0C99 0A 9C 0C      jmp _if32_exit
1349   0C9C             _if32_exit:
1350   0C9C             _if31_exit:
1351   0C9C             ; while (num > 0) { 
1352   0C9C             _while33_cond:
1353   0C9C FA 05 00      lea d, [bp + 5] ; $num
1354   0C9F 2A            mov b, [d]
1355   0CA0 38 00 00      mov c, 0
1356   0CA3             ; --- START RELATIONAL
1357   0CA3 D7            push a
1358   0CA4 11            mov a, b
1359   0CA5 FD 2E 00 00   mov32 cb, $00000000
1359   0CA9 00 00 
1360   0CAB B0            cmp a, b
1361   0CAC FD 7F         sgt ; >
1362   0CAE E4            pop a
1363   0CAF             ; --- END RELATIONAL
1364   0CAF C0 00 00      cmp b, 0
1365   0CB2 C6 29 0D      je _while33_exit
1366   0CB5             _while33_block:
1367   0CB5             ; digits[i] = '0' + (num % 10); 
1368   0CB5 FA FC FF      lea d, [bp + -4] ; $digits
1369   0CB8 D7            push a
1370   0CB9 DA            push d
1371   0CBA FA FA FF      lea d, [bp + -6] ; $i
1372   0CBD 2A            mov b, [d]
1373   0CBE 38 00 00      mov c, 0
1374   0CC1 E7            pop d
1375   0CC2 5A            add d, b
1376   0CC3 E4            pop a
1377   0CC4 DA            push d
1378   0CC5 FD 2E 30 00   mov32 cb, $00000030
1378   0CC9 00 00 
1379   0CCB             ; --- START TERMS
1380   0CCB D7            push a
1381   0CCC 11            mov a, b
1382   0CCD FA 05 00      lea d, [bp + 5] ; $num
1383   0CD0 2A            mov b, [d]
1384   0CD1 38 00 00      mov c, 0
1385   0CD4             ; --- START FACTORS
1386   0CD4 D7            push a
1387   0CD5 FD D8         push g
1388   0CD7 11            mov a, b
1389   0CD8 FD 7A         mov g, c
1390   0CDA FD 2E 0A 00   mov32 cb, $0000000a
1390   0CDE 00 00 
1391   0CE0 FD D8         push g ; save 'g' as the div instruction uses it
1392   0CE2 AE            div a, b ; %, a: quotient, b: remainder
1393   0CE3 11            mov a, b
1394   0CE4 FD F1         pop g
1395   0CE6 FD 38         mov c, g
1396   0CE8 27            mov b, a
1397   0CE9 FD F1         pop g
1398   0CEB E4            pop a
1399   0CEC             ; --- END FACTORS
1400   0CEC 56            add b, a
1401   0CED E4            pop a
1402   0CEE             ; --- END TERMS
1403   0CEE E7            pop d
1404   0CEF FD 3E         mov [d], bl
1405   0CF1             ; num = num / 10; 
1406   0CF1 FA 05 00      lea d, [bp + 5] ; $num
1407   0CF4 DA            push d
1408   0CF5 FA 05 00      lea d, [bp + 5] ; $num
1409   0CF8 2A            mov b, [d]
1410   0CF9 38 00 00      mov c, 0
1411   0CFC             ; --- START FACTORS
1412   0CFC D7            push a
1413   0CFD FD D8         push g
1414   0CFF 11            mov a, b
1415   0D00 FD 7A         mov g, c
1416   0D02 FD 2E 0A 00   mov32 cb, $0000000a
1416   0D06 00 00 
1417   0D08 FD D8         push g ; save 'g' as the div instruction uses it
1418   0D0A AE            div a, b ; /, a: quotient, b: remainder
1419   0D0B FD F1         pop g
1420   0D0D FD 38         mov c, g
1421   0D0F 27            mov b, a
1422   0D10 FD F1         pop g
1423   0D12 E4            pop a
1424   0D13             ; --- END FACTORS
1425   0D13 E7            pop d
1426   0D14 FD 43         mov [d], b
1427   0D16             ; i++; 
1428   0D16 FA FA FF      lea d, [bp + -6] ; $i
1429   0D19 2A            mov b, [d]
1430   0D1A 38 00 00      mov c, 0
1431   0D1D 11            mov a, b
1432   0D1E FD 77         inc b
1433   0D20 FA FA FF      lea d, [bp + -6] ; $i
1434   0D23 FD 43         mov [d], b
1435   0D25 27            mov b, a
1436   0D26 0A 9C 0C      jmp _while33_cond
1437   0D29             _while33_exit:
1438   0D29             ; while (i > 0) { 
1439   0D29             _while40_cond:
1440   0D29 FA FA FF      lea d, [bp + -6] ; $i
1441   0D2C 2A            mov b, [d]
1442   0D2D 38 00 00      mov c, 0
1443   0D30             ; --- START RELATIONAL
1444   0D30 D7            push a
1445   0D31 11            mov a, b
1446   0D32 FD 2E 00 00   mov32 cb, $00000000
1446   0D36 00 00 
1447   0D38 B0            cmp a, b
1448   0D39 FD 7F         sgt ; >
1449   0D3B E4            pop a
1450   0D3C             ; --- END RELATIONAL
1451   0D3C C0 00 00      cmp b, 0
1452   0D3F C6 71 0D      je _while40_exit
1453   0D42             _while40_block:
1454   0D42             ; i--; 
1455   0D42 FA FA FF      lea d, [bp + -6] ; $i
1456   0D45 2A            mov b, [d]
1457   0D46 38 00 00      mov c, 0
1458   0D49 11            mov a, b
1459   0D4A FD 7D         dec b
1460   0D4C FA FA FF      lea d, [bp + -6] ; $i
1461   0D4F FD 43         mov [d], b
1462   0D51 27            mov b, a
1463   0D52             ; putchar(digits[i]); 
1464   0D52             ; --- START FUNCTION CALL
1465   0D52 FA FC FF      lea d, [bp + -4] ; $digits
1466   0D55 D7            push a
1467   0D56 DA            push d
1468   0D57 FA FA FF      lea d, [bp + -6] ; $i
1469   0D5A 2A            mov b, [d]
1470   0D5B 38 00 00      mov c, 0
1471   0D5E E7            pop d
1472   0D5F 5A            add d, b
1473   0D60 E4            pop a
1474   0D61 32            mov bl, [d]
1475   0D62 A7 00         mov bh, 0
1476   0D64 38 00 00      mov c, 0
1477   0D67 DD            push bl
1478   0D68 07 52 0A      call putchar
1479   0D6B 51 01 00      add sp, 1
1480   0D6E             ; --- END FUNCTION CALL
1481   0D6E 0A 29 0D      jmp _while40_cond
1482   0D71             _while40_exit:
1483   0D71 F9            leave
1484   0D72 09            ret
1485   0D73             
1486   0D73             print_unsigned:
1487   0D73 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1488   0D76             ; char digits[5]; 
1489   0D76 52 05 00      sub sp, 5
1490   0D79             ; int i; 
1491   0D79 52 02 00      sub sp, 2
1492   0D7C             ; i = 0; 
1493   0D7C FA FA FF      lea d, [bp + -6] ; $i
1494   0D7F DA            push d
1495   0D80 FD 2E 00 00   mov32 cb, $00000000
1495   0D84 00 00 
1496   0D86 E7            pop d
1497   0D87 FD 43         mov [d], b
1498   0D89             ; if(num == 0){ 
1499   0D89             _if41_cond:
1500   0D89 FA 05 00      lea d, [bp + 5] ; $num
1501   0D8C 2A            mov b, [d]
1502   0D8D 38 00 00      mov c, 0
1503   0D90             ; --- START RELATIONAL
1504   0D90 D7            push a
1505   0D91 11            mov a, b
1506   0D92 FD 2E 00 00   mov32 cb, $00000000
1506   0D96 00 00 
1507   0D98 B0            cmp a, b
1508   0D99 FD 71         seq ; ==
1509   0D9B E4            pop a
1510   0D9C             ; --- END RELATIONAL
1511   0D9C C0 00 00      cmp b, 0
1512   0D9F C6 B4 0D      je _if41_exit
1513   0DA2             _if41_TRUE:
1514   0DA2             ; putchar('0'); 
1515   0DA2             ; --- START FUNCTION CALL
1516   0DA2 FD 2E 30 00   mov32 cb, $00000030
1516   0DA6 00 00 
1517   0DA8 DD            push bl
1518   0DA9 07 52 0A      call putchar
1519   0DAC 51 01 00      add sp, 1
1520   0DAF             ; --- END FUNCTION CALL
1521   0DAF             ; return; 
1522   0DAF F9            leave
1523   0DB0 09            ret
1524   0DB1 0A B4 0D      jmp _if41_exit
1525   0DB4             _if41_exit:
1526   0DB4             ; while (num > 0) { 
1527   0DB4             _while42_cond:
1528   0DB4 FA 05 00      lea d, [bp + 5] ; $num
1529   0DB7 2A            mov b, [d]
1530   0DB8 38 00 00      mov c, 0
1531   0DBB             ; --- START RELATIONAL
1532   0DBB D7            push a
1533   0DBC 11            mov a, b
1534   0DBD FD 2E 00 00   mov32 cb, $00000000
1534   0DC1 00 00 
1535   0DC3 B0            cmp a, b
1536   0DC4 FD 81         sgu ; > (unsigned)
1537   0DC6 E4            pop a
1538   0DC7             ; --- END RELATIONAL
1539   0DC7 C0 00 00      cmp b, 0
1540   0DCA C6 41 0E      je _while42_exit
1541   0DCD             _while42_block:
1542   0DCD             ; digits[i] = '0' + (num % 10); 
1543   0DCD FA FC FF      lea d, [bp + -4] ; $digits
1544   0DD0 D7            push a
1545   0DD1 DA            push d
1546   0DD2 FA FA FF      lea d, [bp + -6] ; $i
1547   0DD5 2A            mov b, [d]
1548   0DD6 38 00 00      mov c, 0
1549   0DD9 E7            pop d
1550   0DDA 5A            add d, b
1551   0DDB E4            pop a
1552   0DDC DA            push d
1553   0DDD FD 2E 30 00   mov32 cb, $00000030
1553   0DE1 00 00 
1554   0DE3             ; --- START TERMS
1555   0DE3 D7            push a
1556   0DE4 11            mov a, b
1557   0DE5 FA 05 00      lea d, [bp + 5] ; $num
1558   0DE8 2A            mov b, [d]
1559   0DE9 38 00 00      mov c, 0
1560   0DEC             ; --- START FACTORS
1561   0DEC D7            push a
1562   0DED FD D8         push g
1563   0DEF 11            mov a, b
1564   0DF0 FD 7A         mov g, c
1565   0DF2 FD 2E 0A 00   mov32 cb, $0000000a
1565   0DF6 00 00 
1566   0DF8 FD D8         push g ; save 'g' as the div instruction uses it
1567   0DFA AE            div a, b ; %, a: quotient, b: remainder
1568   0DFB 11            mov a, b
1569   0DFC FD F1         pop g
1570   0DFE FD 38         mov c, g
1571   0E00 27            mov b, a
1572   0E01 FD F1         pop g
1573   0E03 E4            pop a
1574   0E04             ; --- END FACTORS
1575   0E04 56            add b, a
1576   0E05 E4            pop a
1577   0E06             ; --- END TERMS
1578   0E06 E7            pop d
1579   0E07 FD 3E         mov [d], bl
1580   0E09             ; num = num / 10; 
1581   0E09 FA 05 00      lea d, [bp + 5] ; $num
1582   0E0C DA            push d
1583   0E0D FA 05 00      lea d, [bp + 5] ; $num
1584   0E10 2A            mov b, [d]
1585   0E11 38 00 00      mov c, 0
1586   0E14             ; --- START FACTORS
1587   0E14 D7            push a
1588   0E15 FD D8         push g
1589   0E17 11            mov a, b
1590   0E18 FD 7A         mov g, c
1591   0E1A FD 2E 0A 00   mov32 cb, $0000000a
1591   0E1E 00 00 
1592   0E20 FD D8         push g ; save 'g' as the div instruction uses it
1593   0E22 AE            div a, b ; /, a: quotient, b: remainder
1594   0E23 FD F1         pop g
1595   0E25 FD 38         mov c, g
1596   0E27 27            mov b, a
1597   0E28 FD F1         pop g
1598   0E2A E4            pop a
1599   0E2B             ; --- END FACTORS
1600   0E2B E7            pop d
1601   0E2C FD 43         mov [d], b
1602   0E2E             ; i++; 
1603   0E2E FA FA FF      lea d, [bp + -6] ; $i
1604   0E31 2A            mov b, [d]
1605   0E32 38 00 00      mov c, 0
1606   0E35 11            mov a, b
1607   0E36 FD 77         inc b
1608   0E38 FA FA FF      lea d, [bp + -6] ; $i
1609   0E3B FD 43         mov [d], b
1610   0E3D 27            mov b, a
1611   0E3E 0A B4 0D      jmp _while42_cond
1612   0E41             _while42_exit:
1613   0E41             ; while (i > 0) { 
1614   0E41             _while49_cond:
1615   0E41 FA FA FF      lea d, [bp + -6] ; $i
1616   0E44 2A            mov b, [d]
1617   0E45 38 00 00      mov c, 0
1618   0E48             ; --- START RELATIONAL
1619   0E48 D7            push a
1620   0E49 11            mov a, b
1621   0E4A FD 2E 00 00   mov32 cb, $00000000
1621   0E4E 00 00 
1622   0E50 B0            cmp a, b
1623   0E51 FD 7F         sgt ; >
1624   0E53 E4            pop a
1625   0E54             ; --- END RELATIONAL
1626   0E54 C0 00 00      cmp b, 0
1627   0E57 C6 89 0E      je _while49_exit
1628   0E5A             _while49_block:
1629   0E5A             ; i--; 
1630   0E5A FA FA FF      lea d, [bp + -6] ; $i
1631   0E5D 2A            mov b, [d]
1632   0E5E 38 00 00      mov c, 0
1633   0E61 11            mov a, b
1634   0E62 FD 7D         dec b
1635   0E64 FA FA FF      lea d, [bp + -6] ; $i
1636   0E67 FD 43         mov [d], b
1637   0E69 27            mov b, a
1638   0E6A             ; putchar(digits[i]); 
1639   0E6A             ; --- START FUNCTION CALL
1640   0E6A FA FC FF      lea d, [bp + -4] ; $digits
1641   0E6D D7            push a
1642   0E6E DA            push d
1643   0E6F FA FA FF      lea d, [bp + -6] ; $i
1644   0E72 2A            mov b, [d]
1645   0E73 38 00 00      mov c, 0
1646   0E76 E7            pop d
1647   0E77 5A            add d, b
1648   0E78 E4            pop a
1649   0E79 32            mov bl, [d]
1650   0E7A A7 00         mov bh, 0
1651   0E7C 38 00 00      mov c, 0
1652   0E7F DD            push bl
1653   0E80 07 52 0A      call putchar
1654   0E83 51 01 00      add sp, 1
1655   0E86             ; --- END FUNCTION CALL
1656   0E86 0A 41 0E      jmp _while49_cond
1657   0E89             _while49_exit:
1658   0E89 F9            leave
1659   0E8A 09            ret
1660   0E8B             
1661   0E8B             printx16:
1662   0E8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1663   0E8E             ; --- BEGIN INLINE ASM SEGMENT
1664   0E8E FA 05 00      lea d, [bp + 5] ; $hex
1665   0E91 2A            mov b, [d]
1666   0E92             print_u16x_printx16:
1667   0E92 DD            push bl
1668   0E93 30            mov bl, bh
1669   0E94 07 B1 0E      call _itoa_printx16        ; convert bh to char in A
1670   0E97 2F            mov bl, al        ; save al
1671   0E98 19 00         mov al, 0
1672   0E9A 05 03         syscall sys_io        ; display AH
1673   0E9C 24            mov ah, bl        ; retrieve al
1674   0E9D 19 00         mov al, 0
1675   0E9F 05 03         syscall sys_io        ; display AL
1676   0EA1 EA            pop bl
1677   0EA2 07 B1 0E      call _itoa_printx16        ; convert bh to char in A
1678   0EA5 2F            mov bl, al        ; save al
1679   0EA6 19 00         mov al, 0
1680   0EA8 05 03         syscall sys_io        ; display AH
1681   0EAA 24            mov ah, bl        ; retrieve al
1682   0EAB 19 00         mov al, 0
1683   0EAD 05 03         syscall sys_io        ; display AL
1684   0EAF             ; --- END INLINE ASM SEGMENT
1685   0EAF             ; return; 
1686   0EAF F9            leave
1687   0EB0 09            ret
1688   0EB1             ; --- BEGIN INLINE ASM SEGMENT
1689   0EB1             _itoa_printx16:
1690   0EB1 DA            push d
1691   0EB2 D8            push b
1692   0EB3 A7 00         mov bh, 0
1693   0EB5 FD A4 04      shr bl, 4  
1694   0EB8 74            mov d, b
1695   0EB9 1F CB 0E      mov al, [d + s_hex_digits_printx16]
1696   0EBC 23            mov ah, al
1697   0EBD E5            pop b
1698   0EBE D8            push b
1699   0EBF A7 00         mov bh, 0
1700   0EC1 FD 87 0F      and bl, $0F
1701   0EC4 74            mov d, b
1702   0EC5 1F CB 0E      mov al, [d + s_hex_digits_printx16]
1703   0EC8 E5            pop b
1704   0EC9 E7            pop d
1705   0ECA 09            ret
1706   0ECB 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
1706   0ECF 34 35 36 37 
1706   0ED3 38 39 41 42 
1706   0ED7 43 44 45 46 
1707   0EDB             ; --- END INLINE ASM SEGMENT
1708   0EDB F9            leave
1709   0EDC 09            ret
1710   0EDD             ; --- END TEXT SEGMENT
1711   0EDD             
1712   0EDD             ; --- BEGIN DATA SEGMENT
1713   0EDD 00 00 00 00 _map_data: .fill 7200, 0
1713   0EE1 00 00 00 00 
1713   0EE5 00 00 00 00 
1713   0EE9 00 00 00 00 
1713   0EED 00 00 00 00 
1713   0EF1 00 00 00 00 
1713   0EF5 00 00 00 00 
1713   0EF9 00 00 00 00 
1713   0EFD 00 00 00 00 
1713   0F01 00 00 00 00 
1713   0F05 00 00 00 00 
1713   0F09 00 00 00 00 
1713   0F0D 00 00 00 00 
1713   0F11 00 00 00 00 
1713   0F15 00 00 00 00 
1713   0F19 00 00 00 00 
1713   0F1D 00 00 00 00 
1713   0F21 00 00 00 00 
1713   0F25 00 00 00 00 
1713   0F29 00 00 00 00 
1713   0F2D 00 00 00 00 
1713   0F31 00 00 00 00 
1713   0F35 00 00 00 00 
1713   0F39 00 00 00 00 
1713   0F3D 00 00 00 00 
1713   0F41 00 00 00 00 
1713   0F45 00 00 00 00 
1713   0F49 00 00 00 00 
1713   0F4D 00 00 00 00 
1713   0F51 00 00 00 00 
1713   0F55 00 00 00 00 
1713   0F59 00 00 00 00 
1713   0F5D 00 00 00 00 
1713   0F61 00 00 00 00 
1713   0F65 00 00 00 00 
1713   0F69 00 00 00 00 
1713   0F6D 00 00 00 00 
1713   0F71 00 00 00 00 
1713   0F75 00 00 00 00 
1713   0F79 00 00 00 00 
1713   0F7D 00 00 00 00 
1713   0F81 00 00 00 00 
1713   0F85 00 00 00 00 
1713   0F89 00 00 00 00 
1713   0F8D 00 00 00 00 
1713   0F91 00 00 00 00 
1713   0F95 00 00 00 00 
1713   0F99 00 00 00 00 
1713   0F9D 00 00 00 00 
1713   0FA1 00 00 00 00 
1713   0FA5 00 00 00 00 
1713   0FA9 00 00 00 00 
1713   0FAD 00 00 00 00 
1713   0FB1 00 00 00 00 
1713   0FB5 00 00 00 00 
1713   0FB9 00 00 00 00 
1713   0FBD 00 00 00 00 
1713   0FC1 00 00 00 00 
1713   0FC5 00 00 00 00 
1713   0FC9 00 00 00 00 
1713   0FCD 00 00 00 00 
1713   0FD1 00 00 00 00 
1713   0FD5 00 00 00 00 
1713   0FD9 00 00 00 00 
1713   0FDD 00 00 00 00 
1713   0FE1 00 00 00 00 
1713   0FE5 00 00 00 00 
1713   0FE9 00 00 00 00 
1713   0FED 00 00 00 00 
1713   0FF1 00 00 00 00 
1713   0FF5 00 00 00 00 
1713   0FF9 00 00 00 00 
1713   0FFD 00 00 00 00 
1713   1001 00 00 00 00 
1713   1005 00 00 00 00 
1713   1009 00 00 00 00 
1713   100D 00 00 00 00 
1713   1011 00 00 00 00 
1713   1015 00 00 00 00 
1713   1019 00 00 00 00 
1713   101D 00 00 00 00 
1713   1021 00 00 00 00 
1713   1025 00 00 00 00 
1713   1029 00 00 00 00 
1713   102D 00 00 00 00 
1713   1031 00 00 00 00 
1713   1035 00 00 00 00 
1713   1039 00 00 00 00 
1713   103D 00 00 00 00 
1713   1041 00 00 00 00 
1713   1045 00 00 00 00 
1713   1049 00 00 00 00 
1713   104D 00 00 00 00 
1713   1051 00 00 00 00 
1713   1055 00 00 00 00 
1713   1059 00 00 00 00 
1713   105D 00 00 00 00 
1713   1061 00 00 00 00 
1713   1065 00 00 00 00 
1713   1069 00 00 00 00 
1713   106D 00 00 00 00 
1713   1071 00 00 00 00 
1713   1075 00 00 00 00 
1713   1079 00 00 00 00 
1713   107D 00 00 00 00 
1713   1081 00 00 00 00 
1713   1085 00 00 00 00 
1713   1089 00 00 00 00 
1713   108D 00 00 00 00 
1713   1091 00 00 00 00 
1713   1095 00 00 00 00 
1713   1099 00 00 00 00 
1713   109D 00 00 00 00 
1713   10A1 00 00 00 00 
1713   10A5 00 00 00 00 
1713   10A9 00 00 00 00 
1713   10AD 00 00 00 00 
1713   10B1 00 00 00 00 
1713   10B5 00 00 00 00 
1713   10B9 00 00 00 00 
1713   10BD 00 00 00 00 
1713   10C1 00 00 00 00 
1713   10C5 00 00 00 00 
1713   10C9 00 00 00 00 
1713   10CD 00 00 00 00 
1713   10D1 00 00 00 00 
1713   10D5 00 00 00 00 
1713   10D9 00 00 00 00 
1713   10DD 00 00 00 00 
1713   10E1 00 00 00 00 
1713   10E5 00 00 00 00 
1713   10E9 00 00 00 00 
1713   10ED 00 00 00 00 
1713   10F1 00 00 00 00 
1713   10F5 00 00 00 00 
1713   10F9 00 00 00 00 
1713   10FD 00 00 00 00 
1713   1101 00 00 00 00 
1713   1105 00 00 00 00 
1713   1109 00 00 00 00 
1713   110D 00 00 00 00 
1713   1111 00 00 00 00 
1713   1115 00 00 00 00 
1713   1119 00 00 00 00 
1713   111D 00 00 00 00 
1713   1121 00 00 00 00 
1713   1125 00 00 00 00 
1713   1129 00 00 00 00 
1713   112D 00 00 00 00 
1713   1131 00 00 00 00 
1713   1135 00 00 00 00 
1713   1139 00 00 00 00 
1713   113D 00 00 00 00 
1713   1141 00 00 00 00 
1713   1145 00 00 00 00 
1713   1149 00 00 00 00 
1713   114D 00 00 00 00 
1713   1151 00 00 00 00 
1713   1155 00 00 00 00 
1713   1159 00 00 00 00 
1713   115D 00 00 00 00 
1713   1161 00 00 00 00 
1713   1165 00 00 00 00 
1713   1169 00 00 00 00 
1713   116D 00 00 00 00 
1713   1171 00 00 00 00 
1713   1175 00 00 00 00 
1713   1179 00 00 00 00 
1713   117D 00 00 00 00 
1713   1181 00 00 00 00 
1713   1185 00 00 00 00 
1713   1189 00 00 00 00 
1713   118D 00 00 00 00 
1713   1191 00 00 00 00 
1713   1195 00 00 00 00 
1713   1199 00 00 00 00 
1713   119D 00 00 00 00 
1713   11A1 00 00 00 00 
1713   11A5 00 00 00 00 
1713   11A9 00 00 00 00 
1713   11AD 00 00 00 00 
1713   11B1 00 00 00 00 
1713   11B5 00 00 00 00 
1713   11B9 00 00 00 00 
1713   11BD 00 00 00 00 
1713   11C1 00 00 00 00 
1713   11C5 00 00 00 00 
1713   11C9 00 00 00 00 
1713   11CD 00 00 00 00 
1713   11D1 00 00 00 00 
1713   11D5 00 00 00 00 
1713   11D9 00 00 00 00 
1713   11DD 00 00 00 00 
1713   11E1 00 00 00 00 
1713   11E5 00 00 00 00 
1713   11E9 00 00 00 00 
1713   11ED 00 00 00 00 
1713   11F1 00 00 00 00 
1713   11F5 00 00 00 00 
1713   11F9 00 00 00 00 
1713   11FD 00 00 00 00 
1713   1201 00 00 00 00 
1713   1205 00 00 00 00 
1713   1209 00 00 00 00 
1713   120D 00 00 00 00 
1713   1211 00 00 00 00 
1713   1215 00 00 00 00 
1713   1219 00 00 00 00 
1713   121D 00 00 00 00 
1713   1221 00 00 00 00 
1713   1225 00 00 00 00 
1713   1229 00 00 00 00 
1713   122D 00 00 00 00 
1713   1231 00 00 00 00 
1713   1235 00 00 00 00 
1713   1239 00 00 00 00 
1713   123D 00 00 00 00 
1713   1241 00 00 00 00 
1713   1245 00 00 00 00 
1713   1249 00 00 00 00 
1713   124D 00 00 00 00 
1713   1251 00 00 00 00 
1713   1255 00 00 00 00 
1713   1259 00 00 00 00 
1713   125D 00 00 00 00 
1713   1261 00 00 00 00 
1713   1265 00 00 00 00 
1713   1269 00 00 00 00 
1713   126D 00 00 00 00 
1713   1271 00 00 00 00 
1713   1275 00 00 00 00 
1713   1279 00 00 00 00 
1713   127D 00 00 00 00 
1713   1281 00 00 00 00 
1713   1285 00 00 00 00 
1713   1289 00 00 00 00 
1713   128D 00 00 00 00 
1713   1291 00 00 00 00 
1713   1295 00 00 00 00 
1713   1299 00 00 00 00 
1713   129D 00 00 00 00 
1713   12A1 00 00 00 00 
1713   12A5 00 00 00 00 
1713   12A9 00 00 00 00 
1713   12AD 00 00 00 00 
1713   12B1 00 00 00 00 
1713   12B5 00 00 00 00 
1713   12B9 00 00 00 00 
1713   12BD 00 00 00 00 
1713   12C1 00 00 00 00 
1713   12C5 00 00 00 00 
1713   12C9 00 00 00 00 
1713   12CD 00 00 00 00 
1713   12D1 00 00 00 00 
1713   12D5 00 00 00 00 
1713   12D9 00 00 00 00 
1713   12DD 00 00 00 00 
1713   12E1 00 00 00 00 
1713   12E5 00 00 00 00 
1713   12E9 00 00 00 00 
1713   12ED 00 00 00 00 
1713   12F1 00 00 00 00 
1713   12F5 00 00 00 00 
1713   12F9 00 00 00 00 
1713   12FD 00 00 00 00 
1713   1301 00 00 00 00 
1713   1305 00 00 00 00 
1713   1309 00 00 00 00 
1713   130D 00 00 00 00 
1713   1311 00 00 00 00 
1713   1315 00 00 00 00 
1713   1319 00 00 00 00 
1713   131D 00 00 00 00 
1713   1321 00 00 00 00 
1713   1325 00 00 00 00 
1713   1329 00 00 00 00 
1713   132D 00 00 00 00 
1713   1331 00 00 00 00 
1713   1335 00 00 00 00 
1713   1339 00 00 00 00 
1713   133D 00 00 00 00 
1713   1341 00 00 00 00 
1713   1345 00 00 00 00 
1713   1349 00 00 00 00 
1713   134D 00 00 00 00 
1713   1351 00 00 00 00 
1713   1355 00 00 00 00 
1713   1359 00 00 00 00 
1713   135D 00 00 00 00 
1713   1361 00 00 00 00 
1713   1365 00 00 00 00 
1713   1369 00 00 00 00 
1713   136D 00 00 00 00 
1713   1371 00 00 00 00 
1713   1375 00 00 00 00 
1713   1379 00 00 00 00 
1713   137D 00 00 00 00 
1713   1381 00 00 00 00 
1713   1385 00 00 00 00 
1713   1389 00 00 00 00 
1713   138D 00 00 00 00 
1713   1391 00 00 00 00 
1713   1395 00 00 00 00 
1713   1399 00 00 00 00 
1713   139D 00 00 00 00 
1713   13A1 00 00 00 00 
1713   13A5 00 00 00 00 
1713   13A9 00 00 00 00 
1713   13AD 00 00 00 00 
1713   13B1 00 00 00 00 
1713   13B5 00 00 00 00 
1713   13B9 00 00 00 00 
1713   13BD 00 00 00 00 
1713   13C1 00 00 00 00 
1713   13C5 00 00 00 00 
1713   13C9 00 00 00 00 
1713   13CD 00 00 00 00 
1713   13D1 00 00 00 00 
1713   13D5 00 00 00 00 
1713   13D9 00 00 00 00 
1713   13DD 00 00 00 00 
1713   13E1 00 00 00 00 
1713   13E5 00 00 00 00 
1713   13E9 00 00 00 00 
1713   13ED 00 00 00 00 
1713   13F1 00 00 00 00 
1713   13F5 00 00 00 00 
1713   13F9 00 00 00 00 
1713   13FD 00 00 00 00 
1713   1401 00 00 00 00 
1713   1405 00 00 00 00 
1713   1409 00 00 00 00 
1713   140D 00 00 00 00 
1713   1411 00 00 00 00 
1713   1415 00 00 00 00 
1713   1419 00 00 00 00 
1713   141D 00 00 00 00 
1713   1421 00 00 00 00 
1713   1425 00 00 00 00 
1713   1429 00 00 00 00 
1713   142D 00 00 00 00 
1713   1431 00 00 00 00 
1713   1435 00 00 00 00 
1713   1439 00 00 00 00 
1713   143D 00 00 00 00 
1713   1441 00 00 00 00 
1713   1445 00 00 00 00 
1713   1449 00 00 00 00 
1713   144D 00 00 00 00 
1713   1451 00 00 00 00 
1713   1455 00 00 00 00 
1713   1459 00 00 00 00 
1713   145D 00 00 00 00 
1713   1461 00 00 00 00 
1713   1465 00 00 00 00 
1713   1469 00 00 00 00 
1713   146D 00 00 00 00 
1713   1471 00 00 00 00 
1713   1475 00 00 00 00 
1713   1479 00 00 00 00 
1713   147D 00 00 00 00 
1713   1481 00 00 00 00 
1713   1485 00 00 00 00 
1713   1489 00 00 00 00 
1713   148D 00 00 00 00 
1713   1491 00 00 00 00 
1713   1495 00 00 00 00 
1713   1499 00 00 00 00 
1713   149D 00 00 00 00 
1713   14A1 00 00 00 00 
1713   14A5 00 00 00 00 
1713   14A9 00 00 00 00 
1713   14AD 00 00 00 00 
1713   14B1 00 00 00 00 
1713   14B5 00 00 00 00 
1713   14B9 00 00 00 00 
1713   14BD 00 00 00 00 
1713   14C1 00 00 00 00 
1713   14C5 00 00 00 00 
1713   14C9 00 00 00 00 
1713   14CD 00 00 00 00 
1713   14D1 00 00 00 00 
1713   14D5 00 00 00 00 
1713   14D9 00 00 00 00 
1713   14DD 00 00 00 00 
1713   14E1 00 00 00 00 
1713   14E5 00 00 00 00 
1713   14E9 00 00 00 00 
1713   14ED 00 00 00 00 
1713   14F1 00 00 00 00 
1713   14F5 00 00 00 00 
1713   14F9 00 00 00 00 
1713   14FD 00 00 00 00 
1713   1501 00 00 00 00 
1713   1505 00 00 00 00 
1713   1509 00 00 00 00 
1713   150D 00 00 00 00 
1713   1511 00 00 00 00 
1713   1515 00 00 00 00 
1713   1519 00 00 00 00 
1713   151D 00 00 00 00 
1713   1521 00 00 00 00 
1713   1525 00 00 00 00 
1713   1529 00 00 00 00 
1713   152D 00 00 00 00 
1713   1531 00 00 00 00 
1713   1535 00 00 00 00 
1713   1539 00 00 00 00 
1713   153D 00 00 00 00 
1713   1541 00 00 00 00 
1713   1545 00 00 00 00 
1713   1549 00 00 00 00 
1713   154D 00 00 00 00 
1713   1551 00 00 00 00 
1713   1555 00 00 00 00 
1713   1559 00 00 00 00 
1713   155D 00 00 00 00 
1713   1561 00 00 00 00 
1713   1565 00 00 00 00 
1713   1569 00 00 00 00 
1713   156D 00 00 00 00 
1713   1571 00 00 00 00 
1713   1575 00 00 00 00 
1713   1579 00 00 00 00 
1713   157D 00 00 00 00 
1713   1581 00 00 00 00 
1713   1585 00 00 00 00 
1713   1589 00 00 00 00 
1713   158D 00 00 00 00 
1713   1591 00 00 00 00 
1713   1595 00 00 00 00 
1713   1599 00 00 00 00 
1713   159D 00 00 00 00 
1713   15A1 00 00 00 00 
1713   15A5 00 00 00 00 
1713   15A9 00 00 00 00 
1713   15AD 00 00 00 00 
1713   15B1 00 00 00 00 
1713   15B5 00 00 00 00 
1713   15B9 00 00 00 00 
1713   15BD 00 00 00 00 
1713   15C1 00 00 00 00 
1713   15C5 00 00 00 00 
1713   15C9 00 00 00 00 
1713   15CD 00 00 00 00 
1713   15D1 00 00 00 00 
1713   15D5 00 00 00 00 
1713   15D9 00 00 00 00 
1713   15DD 00 00 00 00 
1713   15E1 00 00 00 00 
1713   15E5 00 00 00 00 
1713   15E9 00 00 00 00 
1713   15ED 00 00 00 00 
1713   15F1 00 00 00 00 
1713   15F5 00 00 00 00 
1713   15F9 00 00 00 00 
1713   15FD 00 00 00 00 
1713   1601 00 00 00 00 
1713   1605 00 00 00 00 
1713   1609 00 00 00 00 
1713   160D 00 00 00 00 
1713   1611 00 00 00 00 
1713   1615 00 00 00 00 
1713   1619 00 00 00 00 
1713   161D 00 00 00 00 
1713   1621 00 00 00 00 
1713   1625 00 00 00 00 
1713   1629 00 00 00 00 
1713   162D 00 00 00 00 
1713   1631 00 00 00 00 
1713   1635 00 00 00 00 
1713   1639 00 00 00 00 
1713   163D 00 00 00 00 
1713   1641 00 00 00 00 
1713   1645 00 00 00 00 
1713   1649 00 00 00 00 
1713   164D 00 00 00 00 
1713   1651 00 00 00 00 
1713   1655 00 00 00 00 
1713   1659 00 00 00 00 
1713   165D 00 00 00 00 
1713   1661 00 00 00 00 
1713   1665 00 00 00 00 
1713   1669 00 00 00 00 
1713   166D 00 00 00 00 
1713   1671 00 00 00 00 
1713   1675 00 00 00 00 
1713   1679 00 00 00 00 
1713   167D 00 00 00 00 
1713   1681 00 00 00 00 
1713   1685 00 00 00 00 
1713   1689 00 00 00 00 
1713   168D 00 00 00 00 
1713   1691 00 00 00 00 
1713   1695 00 00 00 00 
1713   1699 00 00 00 00 
1713   169D 00 00 00 00 
1713   16A1 00 00 00 00 
1713   16A5 00 00 00 00 
1713   16A9 00 00 00 00 
1713   16AD 00 00 00 00 
1713   16B1 00 00 00 00 
1713   16B5 00 00 00 00 
1713   16B9 00 00 00 00 
1713   16BD 00 00 00 00 
1713   16C1 00 00 00 00 
1713   16C5 00 00 00 00 
1713   16C9 00 00 00 00 
1713   16CD 00 00 00 00 
1713   16D1 00 00 00 00 
1713   16D5 00 00 00 00 
1713   16D9 00 00 00 00 
1713   16DD 00 00 00 00 
1713   16E1 00 00 00 00 
1713   16E5 00 00 00 00 
1713   16E9 00 00 00 00 
1713   16ED 00 00 00 00 
1713   16F1 00 00 00 00 
1713   16F5 00 00 00 00 
1713   16F9 00 00 00 00 
1713   16FD 00 00 00 00 
1713   1701 00 00 00 00 
1713   1705 00 00 00 00 
1713   1709 00 00 00 00 
1713   170D 00 00 00 00 
1713   1711 00 00 00 00 
1713   1715 00 00 00 00 
1713   1719 00 00 00 00 
1713   171D 00 00 00 00 
1713   1721 00 00 00 00 
1713   1725 00 00 00 00 
1713   1729 00 00 00 00 
1713   172D 00 00 00 00 
1713   1731 00 00 00 00 
1713   1735 00 00 00 00 
1713   1739 00 00 00 00 
1713   173D 00 00 00 00 
1713   1741 00 00 00 00 
1713   1745 00 00 00 00 
1713   1749 00 00 00 00 
1713   174D 00 00 00 00 
1713   1751 00 00 00 00 
1713   1755 00 00 00 00 
1713   1759 00 00 00 00 
1713   175D 00 00 00 00 
1713   1761 00 00 00 00 
1713   1765 00 00 00 00 
1713   1769 00 00 00 00 
1713   176D 00 00 00 00 
1713   1771 00 00 00 00 
1713   1775 00 00 00 00 
1713   1779 00 00 00 00 
1713   177D 00 00 00 00 
1713   1781 00 00 00 00 
1713   1785 00 00 00 00 
1713   1789 00 00 00 00 
1713   178D 00 00 00 00 
1713   1791 00 00 00 00 
1713   1795 00 00 00 00 
1713   1799 00 00 00 00 
1713   179D 00 00 00 00 
1713   17A1 00 00 00 00 
1713   17A5 00 00 00 00 
1713   17A9 00 00 00 00 
1713   17AD 00 00 00 00 
1713   17B1 00 00 00 00 
1713   17B5 00 00 00 00 
1713   17B9 00 00 00 00 
1713   17BD 00 00 00 00 
1713   17C1 00 00 00 00 
1713   17C5 00 00 00 00 
1713   17C9 00 00 00 00 
1713   17CD 00 00 00 00 
1713   17D1 00 00 00 00 
1713   17D5 00 00 00 00 
1713   17D9 00 00 00 00 
1713   17DD 00 00 00 00 
1713   17E1 00 00 00 00 
1713   17E5 00 00 00 00 
1713   17E9 00 00 00 00 
1713   17ED 00 00 00 00 
1713   17F1 00 00 00 00 
1713   17F5 00 00 00 00 
1713   17F9 00 00 00 00 
1713   17FD 00 00 00 00 
1713   1801 00 00 00 00 
1713   1805 00 00 00 00 
1713   1809 00 00 00 00 
1713   180D 00 00 00 00 
1713   1811 00 00 00 00 
1713   1815 00 00 00 00 
1713   1819 00 00 00 00 
1713   181D 00 00 00 00 
1713   1821 00 00 00 00 
1713   1825 00 00 00 00 
1713   1829 00 00 00 00 
1713   182D 00 00 00 00 
1713   1831 00 00 00 00 
1713   1835 00 00 00 00 
1713   1839 00 00 00 00 
1713   183D 00 00 00 00 
1713   1841 00 00 00 00 
1713   1845 00 00 00 00 
1713   1849 00 00 00 00 
1713   184D 00 00 00 00 
1713   1851 00 00 00 00 
1713   1855 00 00 00 00 
1713   1859 00 00 00 00 
1713   185D 00 00 00 00 
1713   1861 00 00 00 00 
1713   1865 00 00 00 00 
1713   1869 00 00 00 00 
1713   186D 00 00 00 00 
1713   1871 00 00 00 00 
1713   1875 00 00 00 00 
1713   1879 00 00 00 00 
1713   187D 00 00 00 00 
1713   1881 00 00 00 00 
1713   1885 00 00 00 00 
1713   1889 00 00 00 00 
1713   188D 00 00 00 00 
1713   1891 00 00 00 00 
1713   1895 00 00 00 00 
1713   1899 00 00 00 00 
1713   189D 00 00 00 00 
1713   18A1 00 00 00 00 
1713   18A5 00 00 00 00 
1713   18A9 00 00 00 00 
1713   18AD 00 00 00 00 
1713   18B1 00 00 00 00 
1713   18B5 00 00 00 00 
1713   18B9 00 00 00 00 
1713   18BD 00 00 00 00 
1713   18C1 00 00 00 00 
1713   18C5 00 00 00 00 
1713   18C9 00 00 00 00 
1713   18CD 00 00 00 00 
1713   18D1 00 00 00 00 
1713   18D5 00 00 00 00 
1713   18D9 00 00 00 00 
1713   18DD 00 00 00 00 
1713   18E1 00 00 00 00 
1713   18E5 00 00 00 00 
1713   18E9 00 00 00 00 
1713   18ED 00 00 00 00 
1713   18F1 00 00 00 00 
1713   18F5 00 00 00 00 
1713   18F9 00 00 00 00 
1713   18FD 00 00 00 00 
1713   1901 00 00 00 00 
1713   1905 00 00 00 00 
1713   1909 00 00 00 00 
1713   190D 00 00 00 00 
1713   1911 00 00 00 00 
1713   1915 00 00 00 00 
1713   1919 00 00 00 00 
1713   191D 00 00 00 00 
1713   1921 00 00 00 00 
1713   1925 00 00 00 00 
1713   1929 00 00 00 00 
1713   192D 00 00 00 00 
1713   1931 00 00 00 00 
1713   1935 00 00 00 00 
1713   1939 00 00 00 00 
1713   193D 00 00 00 00 
1713   1941 00 00 00 00 
1713   1945 00 00 00 00 
1713   1949 00 00 00 00 
1713   194D 00 00 00 00 
1713   1951 00 00 00 00 
1713   1955 00 00 00 00 
1713   1959 00 00 00 00 
1713   195D 00 00 00 00 
1713   1961 00 00 00 00 
1713   1965 00 00 00 00 
1713   1969 00 00 00 00 
1713   196D 00 00 00 00 
1713   1971 00 00 00 00 
1713   1975 00 00 00 00 
1713   1979 00 00 00 00 
1713   197D 00 00 00 00 
1713   1981 00 00 00 00 
1713   1985 00 00 00 00 
1713   1989 00 00 00 00 
1713   198D 00 00 00 00 
1713   1991 00 00 00 00 
1713   1995 00 00 00 00 
1713   1999 00 00 00 00 
1713   199D 00 00 00 00 
1713   19A1 00 00 00 00 
1713   19A5 00 00 00 00 
1713   19A9 00 00 00 00 
1713   19AD 00 00 00 00 
1713   19B1 00 00 00 00 
1713   19B5 00 00 00 00 
1713   19B9 00 00 00 00 
1713   19BD 00 00 00 00 
1713   19C1 00 00 00 00 
1713   19C5 00 00 00 00 
1713   19C9 00 00 00 00 
1713   19CD 00 00 00 00 
1713   19D1 00 00 00 00 
1713   19D5 00 00 00 00 
1713   19D9 00 00 00 00 
1713   19DD 00 00 00 00 
1713   19E1 00 00 00 00 
1713   19E5 00 00 00 00 
1713   19E9 00 00 00 00 
1713   19ED 00 00 00 00 
1713   19F1 00 00 00 00 
1713   19F5 00 00 00 00 
1713   19F9 00 00 00 00 
1713   19FD 00 00 00 00 
1713   1A01 00 00 00 00 
1713   1A05 00 00 00 00 
1713   1A09 00 00 00 00 
1713   1A0D 00 00 00 00 
1713   1A11 00 00 00 00 
1713   1A15 00 00 00 00 
1713   1A19 00 00 00 00 
1713   1A1D 00 00 00 00 
1713   1A21 00 00 00 00 
1713   1A25 00 00 00 00 
1713   1A29 00 00 00 00 
1713   1A2D 00 00 00 00 
1713   1A31 00 00 00 00 
1713   1A35 00 00 00 00 
1713   1A39 00 00 00 00 
1713   1A3D 00 00 00 00 
1713   1A41 00 00 00 00 
1713   1A45 00 00 00 00 
1713   1A49 00 00 00 00 
1713   1A4D 00 00 00 00 
1713   1A51 00 00 00 00 
1713   1A55 00 00 00 00 
1713   1A59 00 00 00 00 
1713   1A5D 00 00 00 00 
1713   1A61 00 00 00 00 
1713   1A65 00 00 00 00 
1713   1A69 00 00 00 00 
1713   1A6D 00 00 00 00 
1713   1A71 00 00 00 00 
1713   1A75 00 00 00 00 
1713   1A79 00 00 00 00 
1713   1A7D 00 00 00 00 
1713   1A81 00 00 00 00 
1713   1A85 00 00 00 00 
1713   1A89 00 00 00 00 
1713   1A8D 00 00 00 00 
1713   1A91 00 00 00 00 
1713   1A95 00 00 00 00 
1713   1A99 00 00 00 00 
1713   1A9D 00 00 00 00 
1713   1AA1 00 00 00 00 
1713   1AA5 00 00 00 00 
1713   1AA9 00 00 00 00 
1713   1AAD 00 00 00 00 
1713   1AB1 00 00 00 00 
1713   1AB5 00 00 00 00 
1713   1AB9 00 00 00 00 
1713   1ABD 00 00 00 00 
1713   1AC1 00 00 00 00 
1713   1AC5 00 00 00 00 
1713   1AC9 00 00 00 00 
1713   1ACD 00 00 00 00 
1713   1AD1 00 00 00 00 
1713   1AD5 00 00 00 00 
1713   1AD9 00 00 00 00 
1713   1ADD 00 00 00 00 
1713   1AE1 00 00 00 00 
1713   1AE5 00 00 00 00 
1713   1AE9 00 00 00 00 
1713   1AED 00 00 00 00 
1713   1AF1 00 00 00 00 
1713   1AF5 00 00 00 00 
1713   1AF9 00 00 00 00 
1713   1AFD 00 00 00 00 
1713   1B01 00 00 00 00 
1713   1B05 00 00 00 00 
1713   1B09 00 00 00 00 
1713   1B0D 00 00 00 00 
1713   1B11 00 00 00 00 
1713   1B15 00 00 00 00 
1713   1B19 00 00 00 00 
1713   1B1D 00 00 00 00 
1713   1B21 00 00 00 00 
1713   1B25 00 00 00 00 
1713   1B29 00 00 00 00 
1713   1B2D 00 00 00 00 
1713   1B31 00 00 00 00 
1713   1B35 00 00 00 00 
1713   1B39 00 00 00 00 
1713   1B3D 00 00 00 00 
1713   1B41 00 00 00 00 
1713   1B45 00 00 00 00 
1713   1B49 00 00 00 00 
1713   1B4D 00 00 00 00 
1713   1B51 00 00 00 00 
1713   1B55 00 00 00 00 
1713   1B59 00 00 00 00 
1713   1B5D 00 00 00 00 
1713   1B61 00 00 00 00 
1713   1B65 00 00 00 00 
1713   1B69 00 00 00 00 
1713   1B6D 00 00 00 00 
1713   1B71 00 00 00 00 
1713   1B75 00 00 00 00 
1713   1B79 00 00 00 00 
1713   1B7D 00 00 00 00 
1713   1B81 00 00 00 00 
1713   1B85 00 00 00 00 
1713   1B89 00 00 00 00 
1713   1B8D 00 00 00 00 
1713   1B91 00 00 00 00 
1713   1B95 00 00 00 00 
1713   1B99 00 00 00 00 
1713   1B9D 00 00 00 00 
1713   1BA1 00 00 00 00 
1713   1BA5 00 00 00 00 
1713   1BA9 00 00 00 00 
1713   1BAD 00 00 00 00 
1713   1BB1 00 00 00 00 
1713   1BB5 00 00 00 00 
1713   1BB9 00 00 00 00 
1713   1BBD 00 00 00 00 
1713   1BC1 00 00 00 00 
1713   1BC5 00 00 00 00 
1713   1BC9 00 00 00 00 
1713   1BCD 00 00 00 00 
1713   1BD1 00 00 00 00 
1713   1BD5 00 00 00 00 
1713   1BD9 00 00 00 00 
1713   1BDD 00 00 00 00 
1713   1BE1 00 00 00 00 
1713   1BE5 00 00 00 00 
1713   1BE9 00 00 00 00 
1713   1BED 00 00 00 00 
1713   1BF1 00 00 00 00 
1713   1BF5 00 00 00 00 
1713   1BF9 00 00 00 00 
1713   1BFD 00 00 00 00 
1713   1C01 00 00 00 00 
1713   1C05 00 00 00 00 
1713   1C09 00 00 00 00 
1713   1C0D 00 00 00 00 
1713   1C11 00 00 00 00 
1713   1C15 00 00 00 00 
1713   1C19 00 00 00 00 
1713   1C1D 00 00 00 00 
1713   1C21 00 00 00 00 
1713   1C25 00 00 00 00 
1713   1C29 00 00 00 00 
1713   1C2D 00 00 00 00 
1713   1C31 00 00 00 00 
1713   1C35 00 00 00 00 
1713   1C39 00 00 00 00 
1713   1C3D 00 00 00 00 
1713   1C41 00 00 00 00 
1713   1C45 00 00 00 00 
1713   1C49 00 00 00 00 
1713   1C4D 00 00 00 00 
1713   1C51 00 00 00 00 
1713   1C55 00 00 00 00 
1713   1C59 00 00 00 00 
1713   1C5D 00 00 00 00 
1713   1C61 00 00 00 00 
1713   1C65 00 00 00 00 
1713   1C69 00 00 00 00 
1713   1C6D 00 00 00 00 
1713   1C71 00 00 00 00 
1713   1C75 00 00 00 00 
1713   1C79 00 00 00 00 
1713   1C7D 00 00 00 00 
1713   1C81 00 00 00 00 
1713   1C85 00 00 00 00 
1713   1C89 00 00 00 00 
1713   1C8D 00 00 00 00 
1713   1C91 00 00 00 00 
1713   1C95 00 00 00 00 
1713   1C99 00 00 00 00 
1713   1C9D 00 00 00 00 
1713   1CA1 00 00 00 00 
1713   1CA5 00 00 00 00 
1713   1CA9 00 00 00 00 
1713   1CAD 00 00 00 00 
1713   1CB1 00 00 00 00 
1713   1CB5 00 00 00 00 
1713   1CB9 00 00 00 00 
1713   1CBD 00 00 00 00 
1713   1CC1 00 00 00 00 
1713   1CC5 00 00 00 00 
1713   1CC9 00 00 00 00 
1713   1CCD 00 00 00 00 
1713   1CD1 00 00 00 00 
1713   1CD5 00 00 00 00 
1713   1CD9 00 00 00 00 
1713   1CDD 00 00 00 00 
1713   1CE1 00 00 00 00 
1713   1CE5 00 00 00 00 
1713   1CE9 00 00 00 00 
1713   1CED 00 00 00 00 
1713   1CF1 00 00 00 00 
1713   1CF5 00 00 00 00 
1713   1CF9 00 00 00 00 
1713   1CFD 00 00 00 00 
1713   1D01 00 00 00 00 
1713   1D05 00 00 00 00 
1713   1D09 00 00 00 00 
1713   1D0D 00 00 00 00 
1713   1D11 00 00 00 00 
1713   1D15 00 00 00 00 
1713   1D19 00 00 00 00 
1713   1D1D 00 00 00 00 
1713   1D21 00 00 00 00 
1713   1D25 00 00 00 00 
1713   1D29 00 00 00 00 
1713   1D2D 00 00 00 00 
1713   1D31 00 00 00 00 
1713   1D35 00 00 00 00 
1713   1D39 00 00 00 00 
1713   1D3D 00 00 00 00 
1713   1D41 00 00 00 00 
1713   1D45 00 00 00 00 
1713   1D49 00 00 00 00 
1713   1D4D 00 00 00 00 
1713   1D51 00 00 00 00 
1713   1D55 00 00 00 00 
1713   1D59 00 00 00 00 
1713   1D5D 00 00 00 00 
1713   1D61 00 00 00 00 
1713   1D65 00 00 00 00 
1713   1D69 00 00 00 00 
1713   1D6D 00 00 00 00 
1713   1D71 00 00 00 00 
1713   1D75 00 00 00 00 
1713   1D79 00 00 00 00 
1713   1D7D 00 00 00 00 
1713   1D81 00 00 00 00 
1713   1D85 00 00 00 00 
1713   1D89 00 00 00 00 
1713   1D8D 00 00 00 00 
1713   1D91 00 00 00 00 
1713   1D95 00 00 00 00 
1713   1D99 00 00 00 00 
1713   1D9D 00 00 00 00 
1713   1DA1 00 00 00 00 
1713   1DA5 00 00 00 00 
1713   1DA9 00 00 00 00 
1713   1DAD 00 00 00 00 
1713   1DB1 00 00 00 00 
1713   1DB5 00 00 00 00 
1713   1DB9 00 00 00 00 
1713   1DBD 00 00 00 00 
1713   1DC1 00 00 00 00 
1713   1DC5 00 00 00 00 
1713   1DC9 00 00 00 00 
1713   1DCD 00 00 00 00 
1713   1DD1 00 00 00 00 
1713   1DD5 00 00 00 00 
1713   1DD9 00 00 00 00 
1713   1DDD 00 00 00 00 
1713   1DE1 00 00 00 00 
1713   1DE5 00 00 00 00 
1713   1DE9 00 00 00 00 
1713   1DED 00 00 00 00 
1713   1DF1 00 00 00 00 
1713   1DF5 00 00 00 00 
1713   1DF9 00 00 00 00 
1713   1DFD 00 00 00 00 
1713   1E01 00 00 00 00 
1713   1E05 00 00 00 00 
1713   1E09 00 00 00 00 
1713   1E0D 00 00 00 00 
1713   1E11 00 00 00 00 
1713   1E15 00 00 00 00 
1713   1E19 00 00 00 00 
1713   1E1D 00 00 00 00 
1713   1E21 00 00 00 00 
1713   1E25 00 00 00 00 
1713   1E29 00 00 00 00 
1713   1E2D 00 00 00 00 
1713   1E31 00 00 00 00 
1713   1E35 00 00 00 00 
1713   1E39 00 00 00 00 
1713   1E3D 00 00 00 00 
1713   1E41 00 00 00 00 
1713   1E45 00 00 00 00 
1713   1E49 00 00 00 00 
1713   1E4D 00 00 00 00 
1713   1E51 00 00 00 00 
1713   1E55 00 00 00 00 
1713   1E59 00 00 00 00 
1713   1E5D 00 00 00 00 
1713   1E61 00 00 00 00 
1713   1E65 00 00 00 00 
1713   1E69 00 00 00 00 
1713   1E6D 00 00 00 00 
1713   1E71 00 00 00 00 
1713   1E75 00 00 00 00 
1713   1E79 00 00 00 00 
1713   1E7D 00 00 00 00 
1713   1E81 00 00 00 00 
1713   1E85 00 00 00 00 
1713   1E89 00 00 00 00 
1713   1E8D 00 00 00 00 
1713   1E91 00 00 00 00 
1713   1E95 00 00 00 00 
1713   1E99 00 00 00 00 
1713   1E9D 00 00 00 00 
1713   1EA1 00 00 00 00 
1713   1EA5 00 00 00 00 
1713   1EA9 00 00 00 00 
1713   1EAD 00 00 00 00 
1713   1EB1 00 00 00 00 
1713   1EB5 00 00 00 00 
1713   1EB9 00 00 00 00 
1713   1EBD 00 00 00 00 
1713   1EC1 00 00 00 00 
1713   1EC5 00 00 00 00 
1713   1EC9 00 00 00 00 
1713   1ECD 00 00 00 00 
1713   1ED1 00 00 00 00 
1713   1ED5 00 00 00 00 
1713   1ED9 00 00 00 00 
1713   1EDD 00 00 00 00 
1713   1EE1 00 00 00 00 
1713   1EE5 00 00 00 00 
1713   1EE9 00 00 00 00 
1713   1EED 00 00 00 00 
1713   1EF1 00 00 00 00 
1713   1EF5 00 00 00 00 
1713   1EF9 00 00 00 00 
1713   1EFD 00 00 00 00 
1713   1F01 00 00 00 00 
1713   1F05 00 00 00 00 
1713   1F09 00 00 00 00 
1713   1F0D 00 00 00 00 
1713   1F11 00 00 00 00 
1713   1F15 00 00 00 00 
1713   1F19 00 00 00 00 
1713   1F1D 00 00 00 00 
1713   1F21 00 00 00 00 
1713   1F25 00 00 00 00 
1713   1F29 00 00 00 00 
1713   1F2D 00 00 00 00 
1713   1F31 00 00 00 00 
1713   1F35 00 00 00 00 
1713   1F39 00 00 00 00 
1713   1F3D 00 00 00 00 
1713   1F41 00 00 00 00 
1713   1F45 00 00 00 00 
1713   1F49 00 00 00 00 
1713   1F4D 00 00 00 00 
1713   1F51 00 00 00 00 
1713   1F55 00 00 00 00 
1713   1F59 00 00 00 00 
1713   1F5D 00 00 00 00 
1713   1F61 00 00 00 00 
1713   1F65 00 00 00 00 
1713   1F69 00 00 00 00 
1713   1F6D 00 00 00 00 
1713   1F71 00 00 00 00 
1713   1F75 00 00 00 00 
1713   1F79 00 00 00 00 
1713   1F7D 00 00 00 00 
1713   1F81 00 00 00 00 
1713   1F85 00 00 00 00 
1713   1F89 00 00 00 00 
1713   1F8D 00 00 00 00 
1713   1F91 00 00 00 00 
1713   1F95 00 00 00 00 
1713   1F99 00 00 00 00 
1713   1F9D 00 00 00 00 
1713   1FA1 00 00 00 00 
1713   1FA5 00 00 00 00 
1713   1FA9 00 00 00 00 
1713   1FAD 00 00 00 00 
1713   1FB1 00 00 00 00 
1713   1FB5 00 00 00 00 
1713   1FB9 00 00 00 00 
1713   1FBD 00 00 00 00 
1713   1FC1 00 00 00 00 
1713   1FC5 00 00 00 00 
1713   1FC9 00 00 00 00 
1713   1FCD 00 00 00 00 
1713   1FD1 00 00 00 00 
1713   1FD5 00 00 00 00 
1713   1FD9 00 00 00 00 
1713   1FDD 00 00 00 00 
1713   1FE1 00 00 00 00 
1713   1FE5 00 00 00 00 
1713   1FE9 00 00 00 00 
1713   1FED 00 00 00 00 
1713   1FF1 00 00 00 00 
1713   1FF5 00 00 00 00 
1713   1FF9 00 00 00 00 
1713   1FFD 00 00 00 00 
1713   2001 00 00 00 00 
1713   2005 00 00 00 00 
1713   2009 00 00 00 00 
1713   200D 00 00 00 00 
1713   2011 00 00 00 00 
1713   2015 00 00 00 00 
1713   2019 00 00 00 00 
1713   201D 00 00 00 00 
1713   2021 00 00 00 00 
1713   2025 00 00 00 00 
1713   2029 00 00 00 00 
1713   202D 00 00 00 00 
1713   2031 00 00 00 00 
1713   2035 00 00 00 00 
1713   2039 00 00 00 00 
1713   203D 00 00 00 00 
1713   2041 00 00 00 00 
1713   2045 00 00 00 00 
1713   2049 00 00 00 00 
1713   204D 00 00 00 00 
1713   2051 00 00 00 00 
1713   2055 00 00 00 00 
1713   2059 00 00 00 00 
1713   205D 00 00 00 00 
1713   2061 00 00 00 00 
1713   2065 00 00 00 00 
1713   2069 00 00 00 00 
1713   206D 00 00 00 00 
1713   2071 00 00 00 00 
1713   2075 00 00 00 00 
1713   2079 00 00 00 00 
1713   207D 00 00 00 00 
1713   2081 00 00 00 00 
1713   2085 00 00 00 00 
1713   2089 00 00 00 00 
1713   208D 00 00 00 00 
1713   2091 00 00 00 00 
1713   2095 00 00 00 00 
1713   2099 00 00 00 00 
1713   209D 00 00 00 00 
1713   20A1 00 00 00 00 
1713   20A5 00 00 00 00 
1713   20A9 00 00 00 00 
1713   20AD 00 00 00 00 
1713   20B1 00 00 00 00 
1713   20B5 00 00 00 00 
1713   20B9 00 00 00 00 
1713   20BD 00 00 00 00 
1713   20C1 00 00 00 00 
1713   20C5 00 00 00 00 
1713   20C9 00 00 00 00 
1713   20CD 00 00 00 00 
1713   20D1 00 00 00 00 
1713   20D5 00 00 00 00 
1713   20D9 00 00 00 00 
1713   20DD 00 00 00 00 
1713   20E1 00 00 00 00 
1713   20E5 00 00 00 00 
1713   20E9 00 00 00 00 
1713   20ED 00 00 00 00 
1713   20F1 00 00 00 00 
1713   20F5 00 00 00 00 
1713   20F9 00 00 00 00 
1713   20FD 00 00 00 00 
1713   2101 00 00 00 00 
1713   2105 00 00 00 00 
1713   2109 00 00 00 00 
1713   210D 00 00 00 00 
1713   2111 00 00 00 00 
1713   2115 00 00 00 00 
1713   2119 00 00 00 00 
1713   211D 00 00 00 00 
1713   2121 00 00 00 00 
1713   2125 00 00 00 00 
1713   2129 00 00 00 00 
1713   212D 00 00 00 00 
1713   2131 00 00 00 00 
1713   2135 00 00 00 00 
1713   2139 00 00 00 00 
1713   213D 00 00 00 00 
1713   2141 00 00 00 00 
1713   2145 00 00 00 00 
1713   2149 00 00 00 00 
1713   214D 00 00 00 00 
1713   2151 00 00 00 00 
1713   2155 00 00 00 00 
1713   2159 00 00 00 00 
1713   215D 00 00 00 00 
1713   2161 00 00 00 00 
1713   2165 00 00 00 00 
1713   2169 00 00 00 00 
1713   216D 00 00 00 00 
1713   2171 00 00 00 00 
1713   2175 00 00 00 00 
1713   2179 00 00 00 00 
1713   217D 00 00 00 00 
1713   2181 00 00 00 00 
1713   2185 00 00 00 00 
1713   2189 00 00 00 00 
1713   218D 00 00 00 00 
1713   2191 00 00 00 00 
1713   2195 00 00 00 00 
1713   2199 00 00 00 00 
1713   219D 00 00 00 00 
1713   21A1 00 00 00 00 
1713   21A5 00 00 00 00 
1713   21A9 00 00 00 00 
1713   21AD 00 00 00 00 
1713   21B1 00 00 00 00 
1713   21B5 00 00 00 00 
1713   21B9 00 00 00 00 
1713   21BD 00 00 00 00 
1713   21C1 00 00 00 00 
1713   21C5 00 00 00 00 
1713   21C9 00 00 00 00 
1713   21CD 00 00 00 00 
1713   21D1 00 00 00 00 
1713   21D5 00 00 00 00 
1713   21D9 00 00 00 00 
1713   21DD 00 00 00 00 
1713   21E1 00 00 00 00 
1713   21E5 00 00 00 00 
1713   21E9 00 00 00 00 
1713   21ED 00 00 00 00 
1713   21F1 00 00 00 00 
1713   21F5 00 00 00 00 
1713   21F9 00 00 00 00 
1713   21FD 00 00 00 00 
1713   2201 00 00 00 00 
1713   2205 00 00 00 00 
1713   2209 00 00 00 00 
1713   220D 00 00 00 00 
1713   2211 00 00 00 00 
1713   2215 00 00 00 00 
1713   2219 00 00 00 00 
1713   221D 00 00 00 00 
1713   2221 00 00 00 00 
1713   2225 00 00 00 00 
1713   2229 00 00 00 00 
1713   222D 00 00 00 00 
1713   2231 00 00 00 00 
1713   2235 00 00 00 00 
1713   2239 00 00 00 00 
1713   223D 00 00 00 00 
1713   2241 00 00 00 00 
1713   2245 00 00 00 00 
1713   2249 00 00 00 00 
1713   224D 00 00 00 00 
1713   2251 00 00 00 00 
1713   2255 00 00 00 00 
1713   2259 00 00 00 00 
1713   225D 00 00 00 00 
1713   2261 00 00 00 00 
1713   2265 00 00 00 00 
1713   2269 00 00 00 00 
1713   226D 00 00 00 00 
1713   2271 00 00 00 00 
1713   2275 00 00 00 00 
1713   2279 00 00 00 00 
1713   227D 00 00 00 00 
1713   2281 00 00 00 00 
1713   2285 00 00 00 00 
1713   2289 00 00 00 00 
1713   228D 00 00 00 00 
1713   2291 00 00 00 00 
1713   2295 00 00 00 00 
1713   2299 00 00 00 00 
1713   229D 00 00 00 00 
1713   22A1 00 00 00 00 
1713   22A5 00 00 00 00 
1713   22A9 00 00 00 00 
1713   22AD 00 00 00 00 
1713   22B1 00 00 00 00 
1713   22B5 00 00 00 00 
1713   22B9 00 00 00 00 
1713   22BD 00 00 00 00 
1713   22C1 00 00 00 00 
1713   22C5 00 00 00 00 
1713   22C9 00 00 00 00 
1713   22CD 00 00 00 00 
1713   22D1 00 00 00 00 
1713   22D5 00 00 00 00 
1713   22D9 00 00 00 00 
1713   22DD 00 00 00 00 
1713   22E1 00 00 00 00 
1713   22E5 00 00 00 00 
1713   22E9 00 00 00 00 
1713   22ED 00 00 00 00 
1713   22F1 00 00 00 00 
1713   22F5 00 00 00 00 
1713   22F9 00 00 00 00 
1713   22FD 00 00 00 00 
1713   2301 00 00 00 00 
1713   2305 00 00 00 00 
1713   2309 00 00 00 00 
1713   230D 00 00 00 00 
1713   2311 00 00 00 00 
1713   2315 00 00 00 00 
1713   2319 00 00 00 00 
1713   231D 00 00 00 00 
1713   2321 00 00 00 00 
1713   2325 00 00 00 00 
1713   2329 00 00 00 00 
1713   232D 00 00 00 00 
1713   2331 00 00 00 00 
1713   2335 00 00 00 00 
1713   2339 00 00 00 00 
1713   233D 00 00 00 00 
1713   2341 00 00 00 00 
1713   2345 00 00 00 00 
1713   2349 00 00 00 00 
1713   234D 00 00 00 00 
1713   2351 00 00 00 00 
1713   2355 00 00 00 00 
1713   2359 00 00 00 00 
1713   235D 00 00 00 00 
1713   2361 00 00 00 00 
1713   2365 00 00 00 00 
1713   2369 00 00 00 00 
1713   236D 00 00 00 00 
1713   2371 00 00 00 00 
1713   2375 00 00 00 00 
1713   2379 00 00 00 00 
1713   237D 00 00 00 00 
1713   2381 00 00 00 00 
1713   2385 00 00 00 00 
1713   2389 00 00 00 00 
1713   238D 00 00 00 00 
1713   2391 00 00 00 00 
1713   2395 00 00 00 00 
1713   2399 00 00 00 00 
1713   239D 00 00 00 00 
1713   23A1 00 00 00 00 
1713   23A5 00 00 00 00 
1713   23A9 00 00 00 00 
1713   23AD 00 00 00 00 
1713   23B1 00 00 00 00 
1713   23B5 00 00 00 00 
1713   23B9 00 00 00 00 
1713   23BD 00 00 00 00 
1713   23C1 00 00 00 00 
1713   23C5 00 00 00 00 
1713   23C9 00 00 00 00 
1713   23CD 00 00 00 00 
1713   23D1 00 00 00 00 
1713   23D5 00 00 00 00 
1713   23D9 00 00 00 00 
1713   23DD 00 00 00 00 
1713   23E1 00 00 00 00 
1713   23E5 00 00 00 00 
1713   23E9 00 00 00 00 
1713   23ED 00 00 00 00 
1713   23F1 00 00 00 00 
1713   23F5 00 00 00 00 
1713   23F9 00 00 00 00 
1713   23FD 00 00 00 00 
1713   2401 00 00 00 00 
1713   2405 00 00 00 00 
1713   2409 00 00 00 00 
1713   240D 00 00 00 00 
1713   2411 00 00 00 00 
1713   2415 00 00 00 00 
1713   2419 00 00 00 00 
1713   241D 00 00 00 00 
1713   2421 00 00 00 00 
1713   2425 00 00 00 00 
1713   2429 00 00 00 00 
1713   242D 00 00 00 00 
1713   2431 00 00 00 00 
1713   2435 00 00 00 00 
1713   2439 00 00 00 00 
1713   243D 00 00 00 00 
1713   2441 00 00 00 00 
1713   2445 00 00 00 00 
1713   2449 00 00 00 00 
1713   244D 00 00 00 00 
1713   2451 00 00 00 00 
1713   2455 00 00 00 00 
1713   2459 00 00 00 00 
1713   245D 00 00 00 00 
1713   2461 00 00 00 00 
1713   2465 00 00 00 00 
1713   2469 00 00 00 00 
1713   246D 00 00 00 00 
1713   2471 00 00 00 00 
1713   2475 00 00 00 00 
1713   2479 00 00 00 00 
1713   247D 00 00 00 00 
1713   2481 00 00 00 00 
1713   2485 00 00 00 00 
1713   2489 00 00 00 00 
1713   248D 00 00 00 00 
1713   2491 00 00 00 00 
1713   2495 00 00 00 00 
1713   2499 00 00 00 00 
1713   249D 00 00 00 00 
1713   24A1 00 00 00 00 
1713   24A5 00 00 00 00 
1713   24A9 00 00 00 00 
1713   24AD 00 00 00 00 
1713   24B1 00 00 00 00 
1713   24B5 00 00 00 00 
1713   24B9 00 00 00 00 
1713   24BD 00 00 00 00 
1713   24C1 00 00 00 00 
1713   24C5 00 00 00 00 
1713   24C9 00 00 00 00 
1713   24CD 00 00 00 00 
1713   24D1 00 00 00 00 
1713   24D5 00 00 00 00 
1713   24D9 00 00 00 00 
1713   24DD 00 00 00 00 
1713   24E1 00 00 00 00 
1713   24E5 00 00 00 00 
1713   24E9 00 00 00 00 
1713   24ED 00 00 00 00 
1713   24F1 00 00 00 00 
1713   24F5 00 00 00 00 
1713   24F9 00 00 00 00 
1713   24FD 00 00 00 00 
1713   2501 00 00 00 00 
1713   2505 00 00 00 00 
1713   2509 00 00 00 00 
1713   250D 00 00 00 00 
1713   2511 00 00 00 00 
1713   2515 00 00 00 00 
1713   2519 00 00 00 00 
1713   251D 00 00 00 00 
1713   2521 00 00 00 00 
1713   2525 00 00 00 00 
1713   2529 00 00 00 00 
1713   252D 00 00 00 00 
1713   2531 00 00 00 00 
1713   2535 00 00 00 00 
1713   2539 00 00 00 00 
1713   253D 00 00 00 00 
1713   2541 00 00 00 00 
1713   2545 00 00 00 00 
1713   2549 00 00 00 00 
1713   254D 00 00 00 00 
1713   2551 00 00 00 00 
1713   2555 00 00 00 00 
1713   2559 00 00 00 00 
1713   255D 00 00 00 00 
1713   2561 00 00 00 00 
1713   2565 00 00 00 00 
1713   2569 00 00 00 00 
1713   256D 00 00 00 00 
1713   2571 00 00 00 00 
1713   2575 00 00 00 00 
1713   2579 00 00 00 00 
1713   257D 00 00 00 00 
1713   2581 00 00 00 00 
1713   2585 00 00 00 00 
1713   2589 00 00 00 00 
1713   258D 00 00 00 00 
1713   2591 00 00 00 00 
1713   2595 00 00 00 00 
1713   2599 00 00 00 00 
1713   259D 00 00 00 00 
1713   25A1 00 00 00 00 
1713   25A5 00 00 00 00 
1713   25A9 00 00 00 00 
1713   25AD 00 00 00 00 
1713   25B1 00 00 00 00 
1713   25B5 00 00 00 00 
1713   25B9 00 00 00 00 
1713   25BD 00 00 00 00 
1713   25C1 00 00 00 00 
1713   25C5 00 00 00 00 
1713   25C9 00 00 00 00 
1713   25CD 00 00 00 00 
1713   25D1 00 00 00 00 
1713   25D5 00 00 00 00 
1713   25D9 00 00 00 00 
1713   25DD 00 00 00 00 
1713   25E1 00 00 00 00 
1713   25E5 00 00 00 00 
1713   25E9 00 00 00 00 
1713   25ED 00 00 00 00 
1713   25F1 00 00 00 00 
1713   25F5 00 00 00 00 
1713   25F9 00 00 00 00 
1713   25FD 00 00 00 00 
1713   2601 00 00 00 00 
1713   2605 00 00 00 00 
1713   2609 00 00 00 00 
1713   260D 00 00 00 00 
1713   2611 00 00 00 00 
1713   2615 00 00 00 00 
1713   2619 00 00 00 00 
1713   261D 00 00 00 00 
1713   2621 00 00 00 00 
1713   2625 00 00 00 00 
1713   2629 00 00 00 00 
1713   262D 00 00 00 00 
1713   2631 00 00 00 00 
1713   2635 00 00 00 00 
1713   2639 00 00 00 00 
1713   263D 00 00 00 00 
1713   2641 00 00 00 00 
1713   2645 00 00 00 00 
1713   2649 00 00 00 00 
1713   264D 00 00 00 00 
1713   2651 00 00 00 00 
1713   2655 00 00 00 00 
1713   2659 00 00 00 00 
1713   265D 00 00 00 00 
1713   2661 00 00 00 00 
1713   2665 00 00 00 00 
1713   2669 00 00 00 00 
1713   266D 00 00 00 00 
1713   2671 00 00 00 00 
1713   2675 00 00 00 00 
1713   2679 00 00 00 00 
1713   267D 00 00 00 00 
1713   2681 00 00 00 00 
1713   2685 00 00 00 00 
1713   2689 00 00 00 00 
1713   268D 00 00 00 00 
1713   2691 00 00 00 00 
1713   2695 00 00 00 00 
1713   2699 00 00 00 00 
1713   269D 00 00 00 00 
1713   26A1 00 00 00 00 
1713   26A5 00 00 00 00 
1713   26A9 00 00 00 00 
1713   26AD 00 00 00 00 
1713   26B1 00 00 00 00 
1713   26B5 00 00 00 00 
1713   26B9 00 00 00 00 
1713   26BD 00 00 00 00 
1713   26C1 00 00 00 00 
1713   26C5 00 00 00 00 
1713   26C9 00 00 00 00 
1713   26CD 00 00 00 00 
1713   26D1 00 00 00 00 
1713   26D5 00 00 00 00 
1713   26D9 00 00 00 00 
1713   26DD 00 00 00 00 
1713   26E1 00 00 00 00 
1713   26E5 00 00 00 00 
1713   26E9 00 00 00 00 
1713   26ED 00 00 00 00 
1713   26F1 00 00 00 00 
1713   26F5 00 00 00 00 
1713   26F9 00 00 00 00 
1713   26FD 00 00 00 00 
1713   2701 00 00 00 00 
1713   2705 00 00 00 00 
1713   2709 00 00 00 00 
1713   270D 00 00 00 00 
1713   2711 00 00 00 00 
1713   2715 00 00 00 00 
1713   2719 00 00 00 00 
1713   271D 00 00 00 00 
1713   2721 00 00 00 00 
1713   2725 00 00 00 00 
1713   2729 00 00 00 00 
1713   272D 00 00 00 00 
1713   2731 00 00 00 00 
1713   2735 00 00 00 00 
1713   2739 00 00 00 00 
1713   273D 00 00 00 00 
1713   2741 00 00 00 00 
1713   2745 00 00 00 00 
1713   2749 00 00 00 00 
1713   274D 00 00 00 00 
1713   2751 00 00 00 00 
1713   2755 00 00 00 00 
1713   2759 00 00 00 00 
1713   275D 00 00 00 00 
1713   2761 00 00 00 00 
1713   2765 00 00 00 00 
1713   2769 00 00 00 00 
1713   276D 00 00 00 00 
1713   2771 00 00 00 00 
1713   2775 00 00 00 00 
1713   2779 00 00 00 00 
1713   277D 00 00 00 00 
1713   2781 00 00 00 00 
1713   2785 00 00 00 00 
1713   2789 00 00 00 00 
1713   278D 00 00 00 00 
1713   2791 00 00 00 00 
1713   2795 00 00 00 00 
1713   2799 00 00 00 00 
1713   279D 00 00 00 00 
1713   27A1 00 00 00 00 
1713   27A5 00 00 00 00 
1713   27A9 00 00 00 00 
1713   27AD 00 00 00 00 
1713   27B1 00 00 00 00 
1713   27B5 00 00 00 00 
1713   27B9 00 00 00 00 
1713   27BD 00 00 00 00 
1713   27C1 00 00 00 00 
1713   27C5 00 00 00 00 
1713   27C9 00 00 00 00 
1713   27CD 00 00 00 00 
1713   27D1 00 00 00 00 
1713   27D5 00 00 00 00 
1713   27D9 00 00 00 00 
1713   27DD 00 00 00 00 
1713   27E1 00 00 00 00 
1713   27E5 00 00 00 00 
1713   27E9 00 00 00 00 
1713   27ED 00 00 00 00 
1713   27F1 00 00 00 00 
1713   27F5 00 00 00 00 
1713   27F9 00 00 00 00 
1713   27FD 00 00 00 00 
1713   2801 00 00 00 00 
1713   2805 00 00 00 00 
1713   2809 00 00 00 00 
1713   280D 00 00 00 00 
1713   2811 00 00 00 00 
1713   2815 00 00 00 00 
1713   2819 00 00 00 00 
1713   281D 00 00 00 00 
1713   2821 00 00 00 00 
1713   2825 00 00 00 00 
1713   2829 00 00 00 00 
1713   282D 00 00 00 00 
1713   2831 00 00 00 00 
1713   2835 00 00 00 00 
1713   2839 00 00 00 00 
1713   283D 00 00 00 00 
1713   2841 00 00 00 00 
1713   2845 00 00 00 00 
1713   2849 00 00 00 00 
1713   284D 00 00 00 00 
1713   2851 00 00 00 00 
1713   2855 00 00 00 00 
1713   2859 00 00 00 00 
1713   285D 00 00 00 00 
1713   2861 00 00 00 00 
1713   2865 00 00 00 00 
1713   2869 00 00 00 00 
1713   286D 00 00 00 00 
1713   2871 00 00 00 00 
1713   2875 00 00 00 00 
1713   2879 00 00 00 00 
1713   287D 00 00 00 00 
1713   2881 00 00 00 00 
1713   2885 00 00 00 00 
1713   2889 00 00 00 00 
1713   288D 00 00 00 00 
1713   2891 00 00 00 00 
1713   2895 00 00 00 00 
1713   2899 00 00 00 00 
1713   289D 00 00 00 00 
1713   28A1 00 00 00 00 
1713   28A5 00 00 00 00 
1713   28A9 00 00 00 00 
1713   28AD 00 00 00 00 
1713   28B1 00 00 00 00 
1713   28B5 00 00 00 00 
1713   28B9 00 00 00 00 
1713   28BD 00 00 00 00 
1713   28C1 00 00 00 00 
1713   28C5 00 00 00 00 
1713   28C9 00 00 00 00 
1713   28CD 00 00 00 00 
1713   28D1 00 00 00 00 
1713   28D5 00 00 00 00 
1713   28D9 00 00 00 00 
1713   28DD 00 00 00 00 
1713   28E1 00 00 00 00 
1713   28E5 00 00 00 00 
1713   28E9 00 00 00 00 
1713   28ED 00 00 00 00 
1713   28F1 00 00 00 00 
1713   28F5 00 00 00 00 
1713   28F9 00 00 00 00 
1713   28FD 00 00 00 00 
1713   2901 00 00 00 00 
1713   2905 00 00 00 00 
1713   2909 00 00 00 00 
1713   290D 00 00 00 00 
1713   2911 00 00 00 00 
1713   2915 00 00 00 00 
1713   2919 00 00 00 00 
1713   291D 00 00 00 00 
1713   2921 00 00 00 00 
1713   2925 00 00 00 00 
1713   2929 00 00 00 00 
1713   292D 00 00 00 00 
1713   2931 00 00 00 00 
1713   2935 00 00 00 00 
1713   2939 00 00 00 00 
1713   293D 00 00 00 00 
1713   2941 00 00 00 00 
1713   2945 00 00 00 00 
1713   2949 00 00 00 00 
1713   294D 00 00 00 00 
1713   2951 00 00 00 00 
1713   2955 00 00 00 00 
1713   2959 00 00 00 00 
1713   295D 00 00 00 00 
1713   2961 00 00 00 00 
1713   2965 00 00 00 00 
1713   2969 00 00 00 00 
1713   296D 00 00 00 00 
1713   2971 00 00 00 00 
1713   2975 00 00 00 00 
1713   2979 00 00 00 00 
1713   297D 00 00 00 00 
1713   2981 00 00 00 00 
1713   2985 00 00 00 00 
1713   2989 00 00 00 00 
1713   298D 00 00 00 00 
1713   2991 00 00 00 00 
1713   2995 00 00 00 00 
1713   2999 00 00 00 00 
1713   299D 00 00 00 00 
1713   29A1 00 00 00 00 
1713   29A5 00 00 00 00 
1713   29A9 00 00 00 00 
1713   29AD 00 00 00 00 
1713   29B1 00 00 00 00 
1713   29B5 00 00 00 00 
1713   29B9 00 00 00 00 
1713   29BD 00 00 00 00 
1713   29C1 00 00 00 00 
1713   29C5 00 00 00 00 
1713   29C9 00 00 00 00 
1713   29CD 00 00 00 00 
1713   29D1 00 00 00 00 
1713   29D5 00 00 00 00 
1713   29D9 00 00 00 00 
1713   29DD 00 00 00 00 
1713   29E1 00 00 00 00 
1713   29E5 00 00 00 00 
1713   29E9 00 00 00 00 
1713   29ED 00 00 00 00 
1713   29F1 00 00 00 00 
1713   29F5 00 00 00 00 
1713   29F9 00 00 00 00 
1713   29FD 00 00 00 00 
1713   2A01 00 00 00 00 
1713   2A05 00 00 00 00 
1713   2A09 00 00 00 00 
1713   2A0D 00 00 00 00 
1713   2A11 00 00 00 00 
1713   2A15 00 00 00 00 
1713   2A19 00 00 00 00 
1713   2A1D 00 00 00 00 
1713   2A21 00 00 00 00 
1713   2A25 00 00 00 00 
1713   2A29 00 00 00 00 
1713   2A2D 00 00 00 00 
1713   2A31 00 00 00 00 
1713   2A35 00 00 00 00 
1713   2A39 00 00 00 00 
1713   2A3D 00 00 00 00 
1713   2A41 00 00 00 00 
1713   2A45 00 00 00 00 
1713   2A49 00 00 00 00 
1713   2A4D 00 00 00 00 
1713   2A51 00 00 00 00 
1713   2A55 00 00 00 00 
1713   2A59 00 00 00 00 
1713   2A5D 00 00 00 00 
1713   2A61 00 00 00 00 
1713   2A65 00 00 00 00 
1713   2A69 00 00 00 00 
1713   2A6D 00 00 00 00 
1713   2A71 00 00 00 00 
1713   2A75 00 00 00 00 
1713   2A79 00 00 00 00 
1713   2A7D 00 00 00 00 
1713   2A81 00 00 00 00 
1713   2A85 00 00 00 00 
1713   2A89 00 00 00 00 
1713   2A8D 00 00 00 00 
1713   2A91 00 00 00 00 
1713   2A95 00 00 00 00 
1713   2A99 00 00 00 00 
1713   2A9D 00 00 00 00 
1713   2AA1 00 00 00 00 
1713   2AA5 00 00 00 00 
1713   2AA9 00 00 00 00 
1713   2AAD 00 00 00 00 
1713   2AB1 00 00 00 00 
1713   2AB5 00 00 00 00 
1713   2AB9 00 00 00 00 
1713   2ABD 00 00 00 00 
1713   2AC1 00 00 00 00 
1713   2AC5 00 00 00 00 
1713   2AC9 00 00 00 00 
1713   2ACD 00 00 00 00 
1713   2AD1 00 00 00 00 
1713   2AD5 00 00 00 00 
1713   2AD9 00 00 00 00 
1713   2ADD 00 00 00 00 
1713   2AE1 00 00 00 00 
1713   2AE5 00 00 00 00 
1713   2AE9 00 00 00 00 
1713   2AED 00 00 00 00 
1713   2AF1 00 00 00 00 
1713   2AF5 00 00 00 00 
1713   2AF9 00 00 00 00 
1714   2AFD 25 64 20 00 _s0: .db "%d ", 0
1715   2B01 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
1715   2B05 70 65 63 74 
1715   2B09 65 64 20 66 
1715   2B0D 6F 72 6D 61 
1715   2B11 74 20 69 6E 
1715   2B15 20 70 72 69 
1715   2B19 6E 74 66 2E 
1715   2B1D 00 
1716   2B1E 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
1716   2B22 72 3A 20 55 
1716   2B26 6E 6B 6E 6F 
1716   2B2A 77 6E 20 61 
1716   2B2E 72 67 75 6D 
1716   2B32 65 6E 74 20 
1716   2B36 74 79 70 65 
1716   2B3A 2E 0A 00 
1717   2B3D             
1718   2B3D 3F 2B       _heap_top: .dw _heap
1719   2B3F 00          _heap: .db 0
1720   2B40             ; --- END DATA SEGMENT
1721   2B40             
1722   2B40             .end
tasm: Number of errors = 0
