0001   0000             ; --- FILENAME: programs/simcity.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char c; 
0011   0408 52 01 00      sub sp, 1
0012   040B             ; initialize_terrain(); 
0013   040B             ; --- START FUNCTION CALL
0014   040B 07 A5 06      call initialize_terrain
0015   040E             ; for(;;){ 
0016   040E             _for1_init:
0017   040E             _for1_cond:
0018   040E             _for1_block:
0019   040E             ; printf("\nd: display map\nq: quit\nenter choice: "); 
0020   040E             ; --- START FUNCTION CALL
0021   040E 26 6B 24      mov b, _s0 ; "\nd: display map\nq: quit\nenter choice: "
0022   0411 FD AB         swp b
0023   0413 D8            push b
0024   0414 07 74 09      call printf
0025   0417 51 02 00      add sp, 2
0026   041A             ; --- END FUNCTION CALL
0027   041A             ; c = getchar(); 
0028   041A FA 00 00      lea d, [bp + 0] ; $c
0029   041D DA            push d
0030   041E             ; --- START FUNCTION CALL
0031   041E 07 81 12      call getchar
0032   0421 E7            pop d
0033   0422 FD 3E         mov [d], bl
0034   0424             ; if(c == 'd'){ 
0035   0424             _if2_cond:
0036   0424 FA 00 00      lea d, [bp + 0] ; $c
0037   0427 32            mov bl, [d]
0038   0428 A7 00         mov bh, 0
0039   042A 38 00 00      mov c, 0
0040   042D             ; --- START RELATIONAL
0041   042D D7            push a
0042   042E 11            mov a, b
0043   042F FD 2E 64 00   mov32 cb, $00000064
0043   0433 00 00 
0044   0435 B0            cmp a, b
0045   0436 FD 71         seq ; ==
0046   0438 E4            pop a
0047   0439             ; --- END RELATIONAL
0048   0439 C0 00 00      cmp b, 0
0049   043C C6 52 04      je _if2_else
0050   043F             _if2_TRUE:
0051   043F             ; putchar('\n'); 
0052   043F             ; --- START FUNCTION CALL
0053   043F FD 2E 0A 00   mov32 cb, $0000000a
0053   0443 00 00 
0054   0445 DD            push bl
0055   0446 07 F6 0D      call putchar
0056   0449 51 01 00      add sp, 1
0057   044C             ; --- END FUNCTION CALL
0058   044C             ; display_map(); 
0059   044C             ; --- START FUNCTION CALL
0060   044C 07 78 04      call display_map
0061   044F 0A 73 04      jmp _if2_exit
0062   0452             _if2_else:
0063   0452             ; if(c == 'q'){ 
0064   0452             _if3_cond:
0065   0452 FA 00 00      lea d, [bp + 0] ; $c
0066   0455 32            mov bl, [d]
0067   0456 A7 00         mov bh, 0
0068   0458 38 00 00      mov c, 0
0069   045B             ; --- START RELATIONAL
0070   045B D7            push a
0071   045C 11            mov a, b
0072   045D FD 2E 71 00   mov32 cb, $00000071
0072   0461 00 00 
0073   0463 B0            cmp a, b
0074   0464 FD 71         seq ; ==
0075   0466 E4            pop a
0076   0467             ; --- END RELATIONAL
0077   0467 C0 00 00      cmp b, 0
0078   046A C6 73 04      je _if3_exit
0079   046D             _if3_TRUE:
0080   046D             ; return; 
0081   046D F9            leave
0082   046E 05 0B         syscall sys_terminate_proc
0083   0470 0A 73 04      jmp _if3_exit
0084   0473             _if3_exit:
0085   0473             _if2_exit:
0086   0473             _for1_update:
0087   0473 0A 0E 04      jmp _for1_cond
0088   0476             _for1_exit:
0089   0476 05 0B         syscall sys_terminate_proc
0090   0478             
0091   0478             display_map:
0092   0478 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0093   047B             ; int rows, cols; 
0094   047B 52 02 00      sub sp, 2
0095   047E 52 02 00      sub sp, 2
0096   0481             ; for(rows = 0; rows <  20        ; rows++){ 
0097   0481             _for4_init:
0098   0481 FA FF FF      lea d, [bp + -1] ; $rows
0099   0484 DA            push d
0100   0485 FD 2E 00 00   mov32 cb, $00000000
0100   0489 00 00 
0101   048B E7            pop d
0102   048C FD 43         mov [d], b
0103   048E             _for4_cond:
0104   048E FA FF FF      lea d, [bp + -1] ; $rows
0105   0491 2A            mov b, [d]
0106   0492 38 00 00      mov c, 0
0107   0495             ; --- START RELATIONAL
0108   0495 D7            push a
0109   0496 11            mov a, b
0110   0497 FD 2E 14 00   mov32 cb, $00000014
0110   049B 00 00 
0111   049D B0            cmp a, b
0112   049E FD 73         slt ; < (signed)
0113   04A0 E4            pop a
0114   04A1             ; --- END RELATIONAL
0115   04A1 C0 00 00      cmp b, 0
0116   04A4 C6 A3 06      je _for4_exit
0117   04A7             _for4_block:
0118   04A7             ; for(cols = 0; cols <   38        ; cols++){ 
0119   04A7             _for5_init:
0120   04A7 FA FD FF      lea d, [bp + -3] ; $cols
0121   04AA DA            push d
0122   04AB FD 2E 00 00   mov32 cb, $00000000
0122   04AF 00 00 
0123   04B1 E7            pop d
0124   04B2 FD 43         mov [d], b
0125   04B4             _for5_cond:
0126   04B4 FA FD FF      lea d, [bp + -3] ; $cols
0127   04B7 2A            mov b, [d]
0128   04B8 38 00 00      mov c, 0
0129   04BB             ; --- START RELATIONAL
0130   04BB D7            push a
0131   04BC 11            mov a, b
0132   04BD FD 2E 26 00   mov32 cb, $00000026
0132   04C1 00 00 
0133   04C3 B0            cmp a, b
0134   04C4 FD 73         slt ; < (signed)
0135   04C6 E4            pop a
0136   04C7             ; --- END RELATIONAL
0137   04C7 C0 00 00      cmp b, 0
0138   04CA C6 83 06      je _for5_exit
0139   04CD             _for5_block:
0140   04CD             ; if(map[rows][cols].zone_type == unzoned){ 
0141   04CD             _if6_cond:
0142   04CD 3B 9B 12      mov d, _map_data ; $map
0143   04D0 D7            push a
0144   04D1 DA            push d
0145   04D2 FA FF FF      lea d, [bp + -1] ; $rows
0146   04D5 2A            mov b, [d]
0147   04D6 38 00 00      mov c, 0
0148   04D9 E7            pop d
0149   04DA FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0150   04DE DA            push d
0151   04DF FA FD FF      lea d, [bp + -3] ; $cols
0152   04E2 2A            mov b, [d]
0153   04E3 38 00 00      mov c, 0
0154   04E6 E7            pop d
0155   04E7 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0156   04EB E4            pop a
0157   04EC 58 02 00      add d, 2
0158   04EF 2A            mov b, [d]
0159   04F0 38 00 00      mov c, 0
0160   04F3             ; --- START RELATIONAL
0161   04F3 D7            push a
0162   04F4 11            mov a, b
0163   04F5 FD 2E 00 00   mov32 cb, $0 ; enum element: unzoned
0163   04F9 00 00 
0164   04FB B0            cmp a, b
0165   04FC FD 71         seq ; ==
0166   04FE E4            pop a
0167   04FF             ; --- END RELATIONAL
0168   04FF C0 00 00      cmp b, 0
0169   0502 C6 98 05      je _if6_else
0170   0505             _if6_TRUE:
0171   0505             ; if(map[rows][cols].tile_type == land){ 
0172   0505             _if7_cond:
0173   0505 3B 9B 12      mov d, _map_data ; $map
0174   0508 D7            push a
0175   0509 DA            push d
0176   050A FA FF FF      lea d, [bp + -1] ; $rows
0177   050D 2A            mov b, [d]
0178   050E 38 00 00      mov c, 0
0179   0511 E7            pop d
0180   0512 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0181   0516 DA            push d
0182   0517 FA FD FF      lea d, [bp + -3] ; $cols
0183   051A 2A            mov b, [d]
0184   051B 38 00 00      mov c, 0
0185   051E E7            pop d
0186   051F FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0187   0523 E4            pop a
0188   0524 58 00 00      add d, 0
0189   0527 2A            mov b, [d]
0190   0528 38 00 00      mov c, 0
0191   052B             ; --- START RELATIONAL
0192   052B D7            push a
0193   052C 11            mov a, b
0194   052D FD 2E 00 00   mov32 cb, $0 ; enum element: land
0194   0531 00 00 
0195   0533 B0            cmp a, b
0196   0534 FD 71         seq ; ==
0197   0536 E4            pop a
0198   0537             ; --- END RELATIONAL
0199   0537 C0 00 00      cmp b, 0
0200   053A C6 4D 05      je _if7_else
0201   053D             _if7_TRUE:
0202   053D             ; putchar('.'); 
0203   053D             ; --- START FUNCTION CALL
0204   053D FD 2E 2E 00   mov32 cb, $0000002e
0204   0541 00 00 
0205   0543 DD            push bl
0206   0544 07 F6 0D      call putchar
0207   0547 51 01 00      add sp, 1
0208   054A             ; --- END FUNCTION CALL
0209   054A 0A 95 05      jmp _if7_exit
0210   054D             _if7_else:
0211   054D             ; if(map[rows][cols].tile_type == water){ 
0212   054D             _if8_cond:
0213   054D 3B 9B 12      mov d, _map_data ; $map
0214   0550 D7            push a
0215   0551 DA            push d
0216   0552 FA FF FF      lea d, [bp + -1] ; $rows
0217   0555 2A            mov b, [d]
0218   0556 38 00 00      mov c, 0
0219   0559 E7            pop d
0220   055A FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0221   055E DA            push d
0222   055F FA FD FF      lea d, [bp + -3] ; $cols
0223   0562 2A            mov b, [d]
0224   0563 38 00 00      mov c, 0
0225   0566 E7            pop d
0226   0567 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0227   056B E4            pop a
0228   056C 58 00 00      add d, 0
0229   056F 2A            mov b, [d]
0230   0570 38 00 00      mov c, 0
0231   0573             ; --- START RELATIONAL
0232   0573 D7            push a
0233   0574 11            mov a, b
0234   0575 FD 2E 01 00   mov32 cb, $1 ; enum element: water
0234   0579 00 00 
0235   057B B0            cmp a, b
0236   057C FD 71         seq ; ==
0237   057E E4            pop a
0238   057F             ; --- END RELATIONAL
0239   057F C0 00 00      cmp b, 0
0240   0582 C6 95 05      je _if8_exit
0241   0585             _if8_TRUE:
0242   0585             ; putchar('~'); 
0243   0585             ; --- START FUNCTION CALL
0244   0585 FD 2E 7E 00   mov32 cb, $0000007e
0244   0589 00 00 
0245   058B DD            push bl
0246   058C 07 F6 0D      call putchar
0247   058F 51 01 00      add sp, 1
0248   0592             ; --- END FUNCTION CALL
0249   0592 0A 95 05      jmp _if8_exit
0250   0595             _if8_exit:
0251   0595             _if7_exit:
0252   0595 0A 70 06      jmp _if6_exit
0253   0598             _if6_else:
0254   0598             ; if(map[rows][cols].zone_type == residential){ 
0255   0598             _if9_cond:
0256   0598 3B 9B 12      mov d, _map_data ; $map
0257   059B D7            push a
0258   059C DA            push d
0259   059D FA FF FF      lea d, [bp + -1] ; $rows
0260   05A0 2A            mov b, [d]
0261   05A1 38 00 00      mov c, 0
0262   05A4 E7            pop d
0263   05A5 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0264   05A9 DA            push d
0265   05AA FA FD FF      lea d, [bp + -3] ; $cols
0266   05AD 2A            mov b, [d]
0267   05AE 38 00 00      mov c, 0
0268   05B1 E7            pop d
0269   05B2 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0270   05B6 E4            pop a
0271   05B7 58 02 00      add d, 2
0272   05BA 2A            mov b, [d]
0273   05BB 38 00 00      mov c, 0
0274   05BE             ; --- START RELATIONAL
0275   05BE D7            push a
0276   05BF 11            mov a, b
0277   05C0 FD 2E 01 00   mov32 cb, $1 ; enum element: residential
0277   05C4 00 00 
0278   05C6 B0            cmp a, b
0279   05C7 FD 71         seq ; ==
0280   05C9 E4            pop a
0281   05CA             ; --- END RELATIONAL
0282   05CA C0 00 00      cmp b, 0
0283   05CD C6 E0 05      je _if9_else
0284   05D0             _if9_TRUE:
0285   05D0             ; putchar('R'); 
0286   05D0             ; --- START FUNCTION CALL
0287   05D0 FD 2E 52 00   mov32 cb, $00000052
0287   05D4 00 00 
0288   05D6 DD            push bl
0289   05D7 07 F6 0D      call putchar
0290   05DA 51 01 00      add sp, 1
0291   05DD             ; --- END FUNCTION CALL
0292   05DD 0A 70 06      jmp _if9_exit
0293   05E0             _if9_else:
0294   05E0             ; if(map[rows][cols].zone_type == commercial){ 
0295   05E0             _if10_cond:
0296   05E0 3B 9B 12      mov d, _map_data ; $map
0297   05E3 D7            push a
0298   05E4 DA            push d
0299   05E5 FA FF FF      lea d, [bp + -1] ; $rows
0300   05E8 2A            mov b, [d]
0301   05E9 38 00 00      mov c, 0
0302   05EC E7            pop d
0303   05ED FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0304   05F1 DA            push d
0305   05F2 FA FD FF      lea d, [bp + -3] ; $cols
0306   05F5 2A            mov b, [d]
0307   05F6 38 00 00      mov c, 0
0308   05F9 E7            pop d
0309   05FA FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0310   05FE E4            pop a
0311   05FF 58 02 00      add d, 2
0312   0602 2A            mov b, [d]
0313   0603 38 00 00      mov c, 0
0314   0606             ; --- START RELATIONAL
0315   0606 D7            push a
0316   0607 11            mov a, b
0317   0608 FD 2E 02 00   mov32 cb, $2 ; enum element: commercial
0317   060C 00 00 
0318   060E B0            cmp a, b
0319   060F FD 71         seq ; ==
0320   0611 E4            pop a
0321   0612             ; --- END RELATIONAL
0322   0612 C0 00 00      cmp b, 0
0323   0615 C6 28 06      je _if10_else
0324   0618             _if10_TRUE:
0325   0618             ; putchar('C'); 
0326   0618             ; --- START FUNCTION CALL
0327   0618 FD 2E 43 00   mov32 cb, $00000043
0327   061C 00 00 
0328   061E DD            push bl
0329   061F 07 F6 0D      call putchar
0330   0622 51 01 00      add sp, 1
0331   0625             ; --- END FUNCTION CALL
0332   0625 0A 70 06      jmp _if10_exit
0333   0628             _if10_else:
0334   0628             ; if(map[rows][cols].zone_type == industrial){ 
0335   0628             _if11_cond:
0336   0628 3B 9B 12      mov d, _map_data ; $map
0337   062B D7            push a
0338   062C DA            push d
0339   062D FA FF FF      lea d, [bp + -1] ; $rows
0340   0630 2A            mov b, [d]
0341   0631 38 00 00      mov c, 0
0342   0634 E7            pop d
0343   0635 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0344   0639 DA            push d
0345   063A FA FD FF      lea d, [bp + -3] ; $cols
0346   063D 2A            mov b, [d]
0347   063E 38 00 00      mov c, 0
0348   0641 E7            pop d
0349   0642 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0350   0646 E4            pop a
0351   0647 58 02 00      add d, 2
0352   064A 2A            mov b, [d]
0353   064B 38 00 00      mov c, 0
0354   064E             ; --- START RELATIONAL
0355   064E D7            push a
0356   064F 11            mov a, b
0357   0650 FD 2E 03 00   mov32 cb, $3 ; enum element: industrial
0357   0654 00 00 
0358   0656 B0            cmp a, b
0359   0657 FD 71         seq ; ==
0360   0659 E4            pop a
0361   065A             ; --- END RELATIONAL
0362   065A C0 00 00      cmp b, 0
0363   065D C6 70 06      je _if11_exit
0364   0660             _if11_TRUE:
0365   0660             ; putchar('I'); 
0366   0660             ; --- START FUNCTION CALL
0367   0660 FD 2E 49 00   mov32 cb, $00000049
0367   0664 00 00 
0368   0666 DD            push bl
0369   0667 07 F6 0D      call putchar
0370   066A 51 01 00      add sp, 1
0371   066D             ; --- END FUNCTION CALL
0372   066D 0A 70 06      jmp _if11_exit
0373   0670             _if11_exit:
0374   0670             _if10_exit:
0375   0670             _if9_exit:
0376   0670             _if6_exit:
0377   0670             _for5_update:
0378   0670 FA FD FF      lea d, [bp + -3] ; $cols
0379   0673 2A            mov b, [d]
0380   0674 38 00 00      mov c, 0
0381   0677 11            mov a, b
0382   0678 FD 77         inc b
0383   067A FA FD FF      lea d, [bp + -3] ; $cols
0384   067D FD 43         mov [d], b
0385   067F 27            mov b, a
0386   0680 0A B4 04      jmp _for5_cond
0387   0683             _for5_exit:
0388   0683             ; putchar('\n'); 
0389   0683             ; --- START FUNCTION CALL
0390   0683 FD 2E 0A 00   mov32 cb, $0000000a
0390   0687 00 00 
0391   0689 DD            push bl
0392   068A 07 F6 0D      call putchar
0393   068D 51 01 00      add sp, 1
0394   0690             ; --- END FUNCTION CALL
0395   0690             _for4_update:
0396   0690 FA FF FF      lea d, [bp + -1] ; $rows
0397   0693 2A            mov b, [d]
0398   0694 38 00 00      mov c, 0
0399   0697 11            mov a, b
0400   0698 FD 77         inc b
0401   069A FA FF FF      lea d, [bp + -1] ; $rows
0402   069D FD 43         mov [d], b
0403   069F 27            mov b, a
0404   06A0 0A 8E 04      jmp _for4_cond
0405   06A3             _for4_exit:
0406   06A3 F9            leave
0407   06A4 09            ret
0408   06A5             
0409   06A5             initialize_terrain:
0410   06A5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0411   06A8             ; int i, j; 
0412   06A8 52 02 00      sub sp, 2
0413   06AB 52 02 00      sub sp, 2
0414   06AE             ; for(i = 0; i <  20        ; i++){ 
0415   06AE             _for12_init:
0416   06AE FA FF FF      lea d, [bp + -1] ; $i
0417   06B1 DA            push d
0418   06B2 FD 2E 00 00   mov32 cb, $00000000
0418   06B6 00 00 
0419   06B8 E7            pop d
0420   06B9 FD 43         mov [d], b
0421   06BB             _for12_cond:
0422   06BB FA FF FF      lea d, [bp + -1] ; $i
0423   06BE 2A            mov b, [d]
0424   06BF 38 00 00      mov c, 0
0425   06C2             ; --- START RELATIONAL
0426   06C2 D7            push a
0427   06C3 11            mov a, b
0428   06C4 FD 2E 14 00   mov32 cb, $00000014
0428   06C8 00 00 
0429   06CA B0            cmp a, b
0430   06CB FD 73         slt ; < (signed)
0431   06CD E4            pop a
0432   06CE             ; --- END RELATIONAL
0433   06CE C0 00 00      cmp b, 0
0434   06D1 C6 A4 07      je _for12_exit
0435   06D4             _for12_block:
0436   06D4             ; for(j = 0; j <   38        ; j++){ 
0437   06D4             _for13_init:
0438   06D4 FA FD FF      lea d, [bp + -3] ; $j
0439   06D7 DA            push d
0440   06D8 FD 2E 00 00   mov32 cb, $00000000
0440   06DC 00 00 
0441   06DE E7            pop d
0442   06DF FD 43         mov [d], b
0443   06E1             _for13_cond:
0444   06E1 FA FD FF      lea d, [bp + -3] ; $j
0445   06E4 2A            mov b, [d]
0446   06E5 38 00 00      mov c, 0
0447   06E8             ; --- START RELATIONAL
0448   06E8 D7            push a
0449   06E9 11            mov a, b
0450   06EA FD 2E 26 00   mov32 cb, $00000026
0450   06EE 00 00 
0451   06F0 B0            cmp a, b
0452   06F1 FD 73         slt ; < (signed)
0453   06F3 E4            pop a
0454   06F4             ; --- END RELATIONAL
0455   06F4 C0 00 00      cmp b, 0
0456   06F7 C6 91 07      je _for13_exit
0457   06FA             _for13_block:
0458   06FA             ; map[i][j].structure_type = -1; 
0459   06FA 3B 9B 12      mov d, _map_data ; $map
0460   06FD D7            push a
0461   06FE DA            push d
0462   06FF FA FF FF      lea d, [bp + -1] ; $i
0463   0702 2A            mov b, [d]
0464   0703 38 00 00      mov c, 0
0465   0706 E7            pop d
0466   0707 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0467   070B DA            push d
0468   070C FA FD FF      lea d, [bp + -3] ; $j
0469   070F 2A            mov b, [d]
0470   0710 38 00 00      mov c, 0
0471   0713 E7            pop d
0472   0714 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0473   0718 E4            pop a
0474   0719 58 04 00      add d, 4
0475   071C DA            push d
0476   071D FD 2E FF FF   mov32 cb, $ffffffff
0476   0721 FF FF 
0477   0723 E7            pop d
0478   0724 FD 43         mov [d], b
0479   0726             ; map[i][j].zone_type = unzoned; 
0480   0726 3B 9B 12      mov d, _map_data ; $map
0481   0729 D7            push a
0482   072A DA            push d
0483   072B FA FF FF      lea d, [bp + -1] ; $i
0484   072E 2A            mov b, [d]
0485   072F 38 00 00      mov c, 0
0486   0732 E7            pop d
0487   0733 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0488   0737 DA            push d
0489   0738 FA FD FF      lea d, [bp + -3] ; $j
0490   073B 2A            mov b, [d]
0491   073C 38 00 00      mov c, 0
0492   073F E7            pop d
0493   0740 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0494   0744 E4            pop a
0495   0745 58 02 00      add d, 2
0496   0748 DA            push d
0497   0749 FD 2E 00 00   mov32 cb, $0 ; enum element: unzoned
0497   074D 00 00 
0498   074F E7            pop d
0499   0750 FD 43         mov [d], b
0500   0752             ; map[i][j].tile_type = land; 
0501   0752 3B 9B 12      mov d, _map_data ; $map
0502   0755 D7            push a
0503   0756 DA            push d
0504   0757 FA FF FF      lea d, [bp + -1] ; $i
0505   075A 2A            mov b, [d]
0506   075B 38 00 00      mov c, 0
0507   075E E7            pop d
0508   075F FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0509   0763 DA            push d
0510   0764 FA FD FF      lea d, [bp + -3] ; $j
0511   0767 2A            mov b, [d]
0512   0768 38 00 00      mov c, 0
0513   076B E7            pop d
0514   076C FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0515   0770 E4            pop a
0516   0771 58 00 00      add d, 0
0517   0774 DA            push d
0518   0775 FD 2E 00 00   mov32 cb, $0 ; enum element: land
0518   0779 00 00 
0519   077B E7            pop d
0520   077C FD 43         mov [d], b
0521   077E             _for13_update:
0522   077E FA FD FF      lea d, [bp + -3] ; $j
0523   0781 2A            mov b, [d]
0524   0782 38 00 00      mov c, 0
0525   0785 11            mov a, b
0526   0786 FD 77         inc b
0527   0788 FA FD FF      lea d, [bp + -3] ; $j
0528   078B FD 43         mov [d], b
0529   078D 27            mov b, a
0530   078E 0A E1 06      jmp _for13_cond
0531   0791             _for13_exit:
0532   0791             _for12_update:
0533   0791 FA FF FF      lea d, [bp + -1] ; $i
0534   0794 2A            mov b, [d]
0535   0795 38 00 00      mov c, 0
0536   0798 11            mov a, b
0537   0799 FD 77         inc b
0538   079B FA FF FF      lea d, [bp + -1] ; $i
0539   079E FD 43         mov [d], b
0540   07A0 27            mov b, a
0541   07A1 0A BB 06      jmp _for12_cond
0542   07A4             _for12_exit:
0543   07A4             ; map[5][5].zone_type  = residential; 
0544   07A4 3B 9B 12      mov d, _map_data ; $map
0545   07A7 D7            push a
0546   07A8 DA            push d
0547   07A9 FD 2E 05 00   mov32 cb, $00000005
0547   07AD 00 00 
0548   07AF E7            pop d
0549   07B0 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0550   07B4 DA            push d
0551   07B5 FD 2E 05 00   mov32 cb, $00000005
0551   07B9 00 00 
0552   07BB E7            pop d
0553   07BC FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0554   07C0 E4            pop a
0555   07C1 58 02 00      add d, 2
0556   07C4 DA            push d
0557   07C5 FD 2E 01 00   mov32 cb, $1 ; enum element: residential
0557   07C9 00 00 
0558   07CB E7            pop d
0559   07CC FD 43         mov [d], b
0560   07CE             ; map[5][6].zone_type  = residential; 
0561   07CE 3B 9B 12      mov d, _map_data ; $map
0562   07D1 D7            push a
0563   07D2 DA            push d
0564   07D3 FD 2E 05 00   mov32 cb, $00000005
0564   07D7 00 00 
0565   07D9 E7            pop d
0566   07DA FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0567   07DE DA            push d
0568   07DF FD 2E 06 00   mov32 cb, $00000006
0568   07E3 00 00 
0569   07E5 E7            pop d
0570   07E6 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0571   07EA E4            pop a
0572   07EB 58 02 00      add d, 2
0573   07EE DA            push d
0574   07EF FD 2E 01 00   mov32 cb, $1 ; enum element: residential
0574   07F3 00 00 
0575   07F5 E7            pop d
0576   07F6 FD 43         mov [d], b
0577   07F8             ; map[5][7].zone_type  = residential; 
0578   07F8 3B 9B 12      mov d, _map_data ; $map
0579   07FB D7            push a
0580   07FC DA            push d
0581   07FD FD 2E 05 00   mov32 cb, $00000005
0581   0801 00 00 
0582   0803 E7            pop d
0583   0804 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0584   0808 DA            push d
0585   0809 FD 2E 07 00   mov32 cb, $00000007
0585   080D 00 00 
0586   080F E7            pop d
0587   0810 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0588   0814 E4            pop a
0589   0815 58 02 00      add d, 2
0590   0818 DA            push d
0591   0819 FD 2E 01 00   mov32 cb, $1 ; enum element: residential
0591   081D 00 00 
0592   081F E7            pop d
0593   0820 FD 43         mov [d], b
0594   0822             ; map[6][5].zone_type  = commercial; 
0595   0822 3B 9B 12      mov d, _map_data ; $map
0596   0825 D7            push a
0597   0826 DA            push d
0598   0827 FD 2E 06 00   mov32 cb, $00000006
0598   082B 00 00 
0599   082D E7            pop d
0600   082E FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0601   0832 DA            push d
0602   0833 FD 2E 05 00   mov32 cb, $00000005
0602   0837 00 00 
0603   0839 E7            pop d
0604   083A FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0605   083E E4            pop a
0606   083F 58 02 00      add d, 2
0607   0842 DA            push d
0608   0843 FD 2E 02 00   mov32 cb, $2 ; enum element: commercial
0608   0847 00 00 
0609   0849 E7            pop d
0610   084A FD 43         mov [d], b
0611   084C             ; map[6][6].zone_type  = commercial; 
0612   084C 3B 9B 12      mov d, _map_data ; $map
0613   084F D7            push a
0614   0850 DA            push d
0615   0851 FD 2E 06 00   mov32 cb, $00000006
0615   0855 00 00 
0616   0857 E7            pop d
0617   0858 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0618   085C DA            push d
0619   085D FD 2E 06 00   mov32 cb, $00000006
0619   0861 00 00 
0620   0863 E7            pop d
0621   0864 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0622   0868 E4            pop a
0623   0869 58 02 00      add d, 2
0624   086C DA            push d
0625   086D FD 2E 02 00   mov32 cb, $2 ; enum element: commercial
0625   0871 00 00 
0626   0873 E7            pop d
0627   0874 FD 43         mov [d], b
0628   0876             ; map[6][7].zone_type  = commercial; 
0629   0876 3B 9B 12      mov d, _map_data ; $map
0630   0879 D7            push a
0631   087A DA            push d
0632   087B FD 2E 06 00   mov32 cb, $00000006
0632   087F 00 00 
0633   0881 E7            pop d
0634   0882 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0635   0886 DA            push d
0636   0887 FD 2E 07 00   mov32 cb, $00000007
0636   088B 00 00 
0637   088D E7            pop d
0638   088E FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0639   0892 E4            pop a
0640   0893 58 02 00      add d, 2
0641   0896 DA            push d
0642   0897 FD 2E 02 00   mov32 cb, $2 ; enum element: commercial
0642   089B 00 00 
0643   089D E7            pop d
0644   089E FD 43         mov [d], b
0645   08A0             ; map[6][8].zone_type  = commercial; 
0646   08A0 3B 9B 12      mov d, _map_data ; $map
0647   08A3 D7            push a
0648   08A4 DA            push d
0649   08A5 FD 2E 06 00   mov32 cb, $00000006
0649   08A9 00 00 
0650   08AB E7            pop d
0651   08AC FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0652   08B0 DA            push d
0653   08B1 FD 2E 08 00   mov32 cb, $00000008
0653   08B5 00 00 
0654   08B7 E7            pop d
0655   08B8 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0656   08BC E4            pop a
0657   08BD 58 02 00      add d, 2
0658   08C0 DA            push d
0659   08C1 FD 2E 02 00   mov32 cb, $2 ; enum element: commercial
0659   08C5 00 00 
0660   08C7 E7            pop d
0661   08C8 FD 43         mov [d], b
0662   08CA             ; map[10][5].zone_type = industrial; 
0663   08CA 3B 9B 12      mov d, _map_data ; $map
0664   08CD D7            push a
0665   08CE DA            push d
0666   08CF FD 2E 0A 00   mov32 cb, $0000000a
0666   08D3 00 00 
0667   08D5 E7            pop d
0668   08D6 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0669   08DA DA            push d
0670   08DB FD 2E 05 00   mov32 cb, $00000005
0670   08DF 00 00 
0671   08E1 E7            pop d
0672   08E2 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0673   08E6 E4            pop a
0674   08E7 58 02 00      add d, 2
0675   08EA DA            push d
0676   08EB FD 2E 03 00   mov32 cb, $3 ; enum element: industrial
0676   08EF 00 00 
0677   08F1 E7            pop d
0678   08F2 FD 43         mov [d], b
0679   08F4             ; map[10][6].zone_type = industrial; 
0680   08F4 3B 9B 12      mov d, _map_data ; $map
0681   08F7 D7            push a
0682   08F8 DA            push d
0683   08F9 FD 2E 0A 00   mov32 cb, $0000000a
0683   08FD 00 00 
0684   08FF E7            pop d
0685   0900 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0686   0904 DA            push d
0687   0905 FD 2E 06 00   mov32 cb, $00000006
0687   0909 00 00 
0688   090B E7            pop d
0689   090C FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0690   0910 E4            pop a
0691   0911 58 02 00      add d, 2
0692   0914 DA            push d
0693   0915 FD 2E 03 00   mov32 cb, $3 ; enum element: industrial
0693   0919 00 00 
0694   091B E7            pop d
0695   091C FD 43         mov [d], b
0696   091E             ; map[11][6].zone_type = industrial; 
0697   091E 3B 9B 12      mov d, _map_data ; $map
0698   0921 D7            push a
0699   0922 DA            push d
0700   0923 FD 2E 0B 00   mov32 cb, $0000000b
0700   0927 00 00 
0701   0929 E7            pop d
0702   092A FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0703   092E DA            push d
0704   092F FD 2E 06 00   mov32 cb, $00000006
0704   0933 00 00 
0705   0935 E7            pop d
0706   0936 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0707   093A E4            pop a
0708   093B 58 02 00      add d, 2
0709   093E DA            push d
0710   093F FD 2E 03 00   mov32 cb, $3 ; enum element: industrial
0710   0943 00 00 
0711   0945 E7            pop d
0712   0946 FD 43         mov [d], b
0713   0948             ; map[11][7].zone_type = industrial; 
0714   0948 3B 9B 12      mov d, _map_data ; $map
0715   094B D7            push a
0716   094C DA            push d
0717   094D FD 2E 0B 00   mov32 cb, $0000000b
0717   0951 00 00 
0718   0953 E7            pop d
0719   0954 FD 13 E4 00   mma 228 ; mov a, 228; mul a, b; add d, b
0720   0958 DA            push d
0721   0959 FD 2E 07 00   mov32 cb, $00000007
0721   095D 00 00 
0722   095F E7            pop d
0723   0960 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0724   0964 E4            pop a
0725   0965 58 02 00      add d, 2
0726   0968 DA            push d
0727   0969 FD 2E 03 00   mov32 cb, $3 ; enum element: industrial
0727   096D 00 00 
0728   096F E7            pop d
0729   0970 FD 43         mov [d], b
0730   0972 F9            leave
0731   0973 09            ret
0732   0974             
0733   0974             printf:
0734   0974 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0735   0977             ; char *p, *format_p; 
0736   0977 52 02 00      sub sp, 2
0737   097A 52 02 00      sub sp, 2
0738   097D             ; format_p = format; 
0739   097D FA FD FF      lea d, [bp + -3] ; $format_p
0740   0980 DA            push d
0741   0981 FA 05 00      lea d, [bp + 5] ; $format
0742   0984 2A            mov b, [d]
0743   0985 38 00 00      mov c, 0
0744   0988 E7            pop d
0745   0989 FD 43         mov [d], b
0746   098B             ; p = &format + 2; 
0747   098B FA FF FF      lea d, [bp + -1] ; $p
0748   098E DA            push d
0749   098F FA 05 00      lea d, [bp + 5] ; $format
0750   0992 2D            mov b, d
0751   0993             ; --- START TERMS
0752   0993 D7            push a
0753   0994 11            mov a, b
0754   0995 FD 2E 02 00   mov32 cb, $00000002
0754   0999 00 00 
0755   099B 56            add b, a
0756   099C E4            pop a
0757   099D             ; --- END TERMS
0758   099D E7            pop d
0759   099E FD 43         mov [d], b
0760   09A0             ; for(;;){ 
0761   09A0             _for14_init:
0762   09A0             _for14_cond:
0763   09A0             _for14_block:
0764   09A0             ; if(!*format_p) break; 
0765   09A0             _if15_cond:
0766   09A0 FA FD FF      lea d, [bp + -3] ; $format_p
0767   09A3 2A            mov b, [d]
0768   09A4 38 00 00      mov c, 0
0769   09A7 74            mov d, b
0770   09A8 32            mov bl, [d]
0771   09A9 A7 00         mov bh, 0
0772   09AB 38 00 00      mov c, 0
0773   09AE C0 00 00      cmp b, 0
0774   09B1 FD 71         seq ; !
0775   09B3 C0 00 00      cmp b, 0
0776   09B6 C6 BF 09      je _if15_else
0777   09B9             _if15_TRUE:
0778   09B9             ; break; 
0779   09B9 0A 6F 0C      jmp _for14_exit ; for break
0780   09BC 0A 6C 0C      jmp _if15_exit
0781   09BF             _if15_else:
0782   09BF             ; if(*format_p == '%'){ 
0783   09BF             _if16_cond:
0784   09BF FA FD FF      lea d, [bp + -3] ; $format_p
0785   09C2 2A            mov b, [d]
0786   09C3 38 00 00      mov c, 0
0787   09C6 74            mov d, b
0788   09C7 32            mov bl, [d]
0789   09C8 A7 00         mov bh, 0
0790   09CA 38 00 00      mov c, 0
0791   09CD             ; --- START RELATIONAL
0792   09CD D7            push a
0793   09CE 11            mov a, b
0794   09CF FD 2E 25 00   mov32 cb, $00000025
0794   09D3 00 00 
0795   09D5 B0            cmp a, b
0796   09D6 FD 71         seq ; ==
0797   09D8 E4            pop a
0798   09D9             ; --- END RELATIONAL
0799   09D9 C0 00 00      cmp b, 0
0800   09DC C6 47 0C      je _if16_else
0801   09DF             _if16_TRUE:
0802   09DF             ; format_p++; 
0803   09DF FA FD FF      lea d, [bp + -3] ; $format_p
0804   09E2 2A            mov b, [d]
0805   09E3 38 00 00      mov c, 0
0806   09E6 FD 77         inc b
0807   09E8 FA FD FF      lea d, [bp + -3] ; $format_p
0808   09EB FD 43         mov [d], b
0809   09ED FD 7D         dec b
0810   09EF             ; switch(*format_p){ 
0811   09EF             _switch17_expr:
0812   09EF FA FD FF      lea d, [bp + -3] ; $format_p
0813   09F2 2A            mov b, [d]
0814   09F3 38 00 00      mov c, 0
0815   09F6 74            mov d, b
0816   09F7 32            mov bl, [d]
0817   09F8 A7 00         mov bh, 0
0818   09FA 38 00 00      mov c, 0
0819   09FD             _switch17_comparisons:
0820   09FD C1 6C         cmp bl, $6c
0821   09FF C6 2B 0A      je _switch17_case0
0822   0A02 C1 4C         cmp bl, $4c
0823   0A04 C6 2B 0A      je _switch17_case1
0824   0A07 C1 64         cmp bl, $64
0825   0A09 C6 3B 0B      je _switch17_case2
0826   0A0C C1 69         cmp bl, $69
0827   0A0E C6 3B 0B      je _switch17_case3
0828   0A11 C1 75         cmp bl, $75
0829   0A13 C6 6B 0B      je _switch17_case4
0830   0A16 C1 78         cmp bl, $78
0831   0A18 C6 9B 0B      je _switch17_case5
0832   0A1B C1 63         cmp bl, $63
0833   0A1D C6 CB 0B      je _switch17_case6
0834   0A20 C1 73         cmp bl, $73
0835   0A22 C6 FB 0B      je _switch17_case7
0836   0A25 0A 28 0C      jmp _switch17_default
0837   0A28 0A 34 0C      jmp _switch17_exit
0838   0A2B             _switch17_case0:
0839   0A2B             _switch17_case1:
0840   0A2B             ; format_p++; 
0841   0A2B FA FD FF      lea d, [bp + -3] ; $format_p
0842   0A2E 2A            mov b, [d]
0843   0A2F 38 00 00      mov c, 0
0844   0A32 FD 77         inc b
0845   0A34 FA FD FF      lea d, [bp + -3] ; $format_p
0846   0A37 FD 43         mov [d], b
0847   0A39 FD 7D         dec b
0848   0A3B             ; if(*format_p == 'd' || *format_p == 'i') 
0849   0A3B             _if18_cond:
0850   0A3B FA FD FF      lea d, [bp + -3] ; $format_p
0851   0A3E 2A            mov b, [d]
0852   0A3F 38 00 00      mov c, 0
0853   0A42 74            mov d, b
0854   0A43 32            mov bl, [d]
0855   0A44 A7 00         mov bh, 0
0856   0A46 38 00 00      mov c, 0
0857   0A49             ; --- START RELATIONAL
0858   0A49 D7            push a
0859   0A4A 11            mov a, b
0860   0A4B FD 2E 64 00   mov32 cb, $00000064
0860   0A4F 00 00 
0861   0A51 B0            cmp a, b
0862   0A52 FD 71         seq ; ==
0863   0A54 E4            pop a
0864   0A55             ; --- END RELATIONAL
0865   0A55             ; --- START LOGICAL OR
0866   0A55 D7            push a
0867   0A56 11            mov a, b
0868   0A57 FA FD FF      lea d, [bp + -3] ; $format_p
0869   0A5A 2A            mov b, [d]
0870   0A5B 38 00 00      mov c, 0
0871   0A5E 74            mov d, b
0872   0A5F 32            mov bl, [d]
0873   0A60 A7 00         mov bh, 0
0874   0A62 38 00 00      mov c, 0
0875   0A65             ; --- START RELATIONAL
0876   0A65 D7            push a
0877   0A66 11            mov a, b
0878   0A67 FD 2E 69 00   mov32 cb, $00000069
0878   0A6B 00 00 
0879   0A6D B0            cmp a, b
0880   0A6E FD 71         seq ; ==
0881   0A70 E4            pop a
0882   0A71             ; --- END RELATIONAL
0883   0A71 FD A8         sor a, b ; ||
0884   0A73 E4            pop a
0885   0A74             ; --- END LOGICAL OR
0886   0A74 C0 00 00      cmp b, 0
0887   0A77 C6 98 0A      je _if18_else
0888   0A7A             _if18_TRUE:
0889   0A7A             ; print_signed_long(*(long *)p); 
0890   0A7A             ; --- START FUNCTION CALL
0891   0A7A FA FF FF      lea d, [bp + -1] ; $p
0892   0A7D 2A            mov b, [d]
0893   0A7E 38 00 00      mov c, 0
0894   0A81 74            mov d, b
0895   0A82 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0896   0A85 FD 39         mov c, b ; And place it into C
0897   0A87 2A            mov b, [d] ; Lower Word in B
0898   0A88 12            mov a, c
0899   0A89 FD AA         swp a
0900   0A8B D7            push a
0901   0A8C FD AB         swp b
0902   0A8E D8            push b
0903   0A8F 07 71 0C      call print_signed_long
0904   0A92 51 04 00      add sp, 4
0905   0A95             ; --- END FUNCTION CALL
0906   0A95 0A 20 0B      jmp _if18_exit
0907   0A98             _if18_else:
0908   0A98             ; if(*format_p == 'u') 
0909   0A98             _if19_cond:
0910   0A98 FA FD FF      lea d, [bp + -3] ; $format_p
0911   0A9B 2A            mov b, [d]
0912   0A9C 38 00 00      mov c, 0
0913   0A9F 74            mov d, b
0914   0AA0 32            mov bl, [d]
0915   0AA1 A7 00         mov bh, 0
0916   0AA3 38 00 00      mov c, 0
0917   0AA6             ; --- START RELATIONAL
0918   0AA6 D7            push a
0919   0AA7 11            mov a, b
0920   0AA8 FD 2E 75 00   mov32 cb, $00000075
0920   0AAC 00 00 
0921   0AAE B0            cmp a, b
0922   0AAF FD 71         seq ; ==
0923   0AB1 E4            pop a
0924   0AB2             ; --- END RELATIONAL
0925   0AB2 C0 00 00      cmp b, 0
0926   0AB5 C6 D6 0A      je _if19_else
0927   0AB8             _if19_TRUE:
0928   0AB8             ; print_unsigned_long(*(unsigned long *)p); 
0929   0AB8             ; --- START FUNCTION CALL
0930   0AB8 FA FF FF      lea d, [bp + -1] ; $p
0931   0ABB 2A            mov b, [d]
0932   0ABC 38 00 00      mov c, 0
0933   0ABF 74            mov d, b
0934   0AC0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0935   0AC3 FD 39         mov c, b ; And place it into C
0936   0AC5 2A            mov b, [d] ; Lower Word in B
0937   0AC6 12            mov a, c
0938   0AC7 FD AA         swp a
0939   0AC9 D7            push a
0940   0ACA FD AB         swp b
0941   0ACC D8            push b
0942   0ACD 07 04 0E      call print_unsigned_long
0943   0AD0 51 04 00      add sp, 4
0944   0AD3             ; --- END FUNCTION CALL
0945   0AD3 0A 20 0B      jmp _if19_exit
0946   0AD6             _if19_else:
0947   0AD6             ; if(*format_p == 'x') 
0948   0AD6             _if20_cond:
0949   0AD6 FA FD FF      lea d, [bp + -3] ; $format_p
0950   0AD9 2A            mov b, [d]
0951   0ADA 38 00 00      mov c, 0
0952   0ADD 74            mov d, b
0953   0ADE 32            mov bl, [d]
0954   0ADF A7 00         mov bh, 0
0955   0AE1 38 00 00      mov c, 0
0956   0AE4             ; --- START RELATIONAL
0957   0AE4 D7            push a
0958   0AE5 11            mov a, b
0959   0AE6 FD 2E 78 00   mov32 cb, $00000078
0959   0AEA 00 00 
0960   0AEC B0            cmp a, b
0961   0AED FD 71         seq ; ==
0962   0AEF E4            pop a
0963   0AF0             ; --- END RELATIONAL
0964   0AF0 C0 00 00      cmp b, 0
0965   0AF3 C6 14 0B      je _if20_else
0966   0AF6             _if20_TRUE:
0967   0AF6             ; printx32(*(long int *)p); 
0968   0AF6             ; --- START FUNCTION CALL
0969   0AF6 FA FF FF      lea d, [bp + -1] ; $p
0970   0AF9 2A            mov b, [d]
0971   0AFA 38 00 00      mov c, 0
0972   0AFD 74            mov d, b
0973   0AFE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0974   0B01 FD 39         mov c, b ; And place it into C
0975   0B03 2A            mov b, [d] ; Lower Word in B
0976   0B04 12            mov a, c
0977   0B05 FD AA         swp a
0978   0B07 D7            push a
0979   0B08 FD AB         swp b
0980   0B0A D8            push b
0981   0B0B 07 38 0F      call printx32
0982   0B0E 51 04 00      add sp, 4
0983   0B11             ; --- END FUNCTION CALL
0984   0B11 0A 20 0B      jmp _if20_exit
0985   0B14             _if20_else:
0986   0B14             ; err("Unexpected format in printf."); 
0987   0B14             ; --- START FUNCTION CALL
0988   0B14 26 92 24      mov b, _s1 ; "Unexpected format in printf."
0989   0B17 FD AB         swp b
0990   0B19 D8            push b
0991   0B1A 07 98 0F      call err
0992   0B1D 51 02 00      add sp, 2
0993   0B20             ; --- END FUNCTION CALL
0994   0B20             _if20_exit:
0995   0B20             _if19_exit:
0996   0B20             _if18_exit:
0997   0B20             ; p = p + 4; 
0998   0B20 FA FF FF      lea d, [bp + -1] ; $p
0999   0B23 DA            push d
1000   0B24 FA FF FF      lea d, [bp + -1] ; $p
1001   0B27 2A            mov b, [d]
1002   0B28 38 00 00      mov c, 0
1003   0B2B             ; --- START TERMS
1004   0B2B D7            push a
1005   0B2C 11            mov a, b
1006   0B2D FD 2E 04 00   mov32 cb, $00000004
1006   0B31 00 00 
1007   0B33 56            add b, a
1008   0B34 E4            pop a
1009   0B35             ; --- END TERMS
1010   0B35 E7            pop d
1011   0B36 FD 43         mov [d], b
1012   0B38             ; break; 
1013   0B38 0A 34 0C      jmp _switch17_exit ; case break
1014   0B3B             _switch17_case2:
1015   0B3B             _switch17_case3:
1016   0B3B             ; print_signed(*(int*)p); 
1017   0B3B             ; --- START FUNCTION CALL
1018   0B3B FA FF FF      lea d, [bp + -1] ; $p
1019   0B3E 2A            mov b, [d]
1020   0B3F 38 00 00      mov c, 0
1021   0B42 74            mov d, b
1022   0B43 2A            mov b, [d]
1023   0B44 38 00 00      mov c, 0
1024   0B47 FD AB         swp b
1025   0B49 D8            push b
1026   0B4A 07 C6 0F      call print_signed
1027   0B4D 51 02 00      add sp, 2
1028   0B50             ; --- END FUNCTION CALL
1029   0B50             ; p = p + 2; 
1030   0B50 FA FF FF      lea d, [bp + -1] ; $p
1031   0B53 DA            push d
1032   0B54 FA FF FF      lea d, [bp + -1] ; $p
1033   0B57 2A            mov b, [d]
1034   0B58 38 00 00      mov c, 0
1035   0B5B             ; --- START TERMS
1036   0B5B D7            push a
1037   0B5C 11            mov a, b
1038   0B5D FD 2E 02 00   mov32 cb, $00000002
1038   0B61 00 00 
1039   0B63 56            add b, a
1040   0B64 E4            pop a
1041   0B65             ; --- END TERMS
1042   0B65 E7            pop d
1043   0B66 FD 43         mov [d], b
1044   0B68             ; break; 
1045   0B68 0A 34 0C      jmp _switch17_exit ; case break
1046   0B6B             _switch17_case4:
1047   0B6B             ; print_unsigned(*(unsigned int*)p); 
1048   0B6B             ; --- START FUNCTION CALL
1049   0B6B FA FF FF      lea d, [bp + -1] ; $p
1050   0B6E 2A            mov b, [d]
1051   0B6F 38 00 00      mov c, 0
1052   0B72 74            mov d, b
1053   0B73 2A            mov b, [d]
1054   0B74 38 00 00      mov c, 0
1055   0B77 FD AB         swp b
1056   0B79 D8            push b
1057   0B7A 07 17 11      call print_unsigned
1058   0B7D 51 02 00      add sp, 2
1059   0B80             ; --- END FUNCTION CALL
1060   0B80             ; p = p + 2; 
1061   0B80 FA FF FF      lea d, [bp + -1] ; $p
1062   0B83 DA            push d
1063   0B84 FA FF FF      lea d, [bp + -1] ; $p
1064   0B87 2A            mov b, [d]
1065   0B88 38 00 00      mov c, 0
1066   0B8B             ; --- START TERMS
1067   0B8B D7            push a
1068   0B8C 11            mov a, b
1069   0B8D FD 2E 02 00   mov32 cb, $00000002
1069   0B91 00 00 
1070   0B93 56            add b, a
1071   0B94 E4            pop a
1072   0B95             ; --- END TERMS
1073   0B95 E7            pop d
1074   0B96 FD 43         mov [d], b
1075   0B98             ; break; 
1076   0B98 0A 34 0C      jmp _switch17_exit ; case break
1077   0B9B             _switch17_case5:
1078   0B9B             ; printx16(*(int*)p); 
1079   0B9B             ; --- START FUNCTION CALL
1080   0B9B FA FF FF      lea d, [bp + -1] ; $p
1081   0B9E 2A            mov b, [d]
1082   0B9F 38 00 00      mov c, 0
1083   0BA2 74            mov d, b
1084   0BA3 2A            mov b, [d]
1085   0BA4 38 00 00      mov c, 0
1086   0BA7 FD AB         swp b
1087   0BA9 D8            push b
1088   0BAA 07 2F 12      call printx16
1089   0BAD 51 02 00      add sp, 2
1090   0BB0             ; --- END FUNCTION CALL
1091   0BB0             ; p = p + 2; 
1092   0BB0 FA FF FF      lea d, [bp + -1] ; $p
1093   0BB3 DA            push d
1094   0BB4 FA FF FF      lea d, [bp + -1] ; $p
1095   0BB7 2A            mov b, [d]
1096   0BB8 38 00 00      mov c, 0
1097   0BBB             ; --- START TERMS
1098   0BBB D7            push a
1099   0BBC 11            mov a, b
1100   0BBD FD 2E 02 00   mov32 cb, $00000002
1100   0BC1 00 00 
1101   0BC3 56            add b, a
1102   0BC4 E4            pop a
1103   0BC5             ; --- END TERMS
1104   0BC5 E7            pop d
1105   0BC6 FD 43         mov [d], b
1106   0BC8             ; break; 
1107   0BC8 0A 34 0C      jmp _switch17_exit ; case break
1108   0BCB             _switch17_case6:
1109   0BCB             ; putchar(*(char*)p); 
1110   0BCB             ; --- START FUNCTION CALL
1111   0BCB FA FF FF      lea d, [bp + -1] ; $p
1112   0BCE 2A            mov b, [d]
1113   0BCF 38 00 00      mov c, 0
1114   0BD2 74            mov d, b
1115   0BD3 32            mov bl, [d]
1116   0BD4 A7 00         mov bh, 0
1117   0BD6 38 00 00      mov c, 0
1118   0BD9 DD            push bl
1119   0BDA 07 F6 0D      call putchar
1120   0BDD 51 01 00      add sp, 1
1121   0BE0             ; --- END FUNCTION CALL
1122   0BE0             ; p = p + 1; 
1123   0BE0 FA FF FF      lea d, [bp + -1] ; $p
1124   0BE3 DA            push d
1125   0BE4 FA FF FF      lea d, [bp + -1] ; $p
1126   0BE7 2A            mov b, [d]
1127   0BE8 38 00 00      mov c, 0
1128   0BEB             ; --- START TERMS
1129   0BEB D7            push a
1130   0BEC 11            mov a, b
1131   0BED FD 2E 01 00   mov32 cb, $00000001
1131   0BF1 00 00 
1132   0BF3 56            add b, a
1133   0BF4 E4            pop a
1134   0BF5             ; --- END TERMS
1135   0BF5 E7            pop d
1136   0BF6 FD 43         mov [d], b
1137   0BF8             ; break; 
1138   0BF8 0A 34 0C      jmp _switch17_exit ; case break
1139   0BFB             _switch17_case7:
1140   0BFB             ; print(*(char**)p); 
1141   0BFB             ; --- START FUNCTION CALL
1142   0BFB FA FF FF      lea d, [bp + -1] ; $p
1143   0BFE 2A            mov b, [d]
1144   0BFF 38 00 00      mov c, 0
1145   0C02 74            mov d, b
1146   0C03 2A            mov b, [d]
1147   0C04 FD AB         swp b
1148   0C06 D8            push b
1149   0C07 07 AD 0F      call print
1150   0C0A 51 02 00      add sp, 2
1151   0C0D             ; --- END FUNCTION CALL
1152   0C0D             ; p = p + 2; 
1153   0C0D FA FF FF      lea d, [bp + -1] ; $p
1154   0C10 DA            push d
1155   0C11 FA FF FF      lea d, [bp + -1] ; $p
1156   0C14 2A            mov b, [d]
1157   0C15 38 00 00      mov c, 0
1158   0C18             ; --- START TERMS
1159   0C18 D7            push a
1160   0C19 11            mov a, b
1161   0C1A FD 2E 02 00   mov32 cb, $00000002
1161   0C1E 00 00 
1162   0C20 56            add b, a
1163   0C21 E4            pop a
1164   0C22             ; --- END TERMS
1165   0C22 E7            pop d
1166   0C23 FD 43         mov [d], b
1167   0C25             ; break; 
1168   0C25 0A 34 0C      jmp _switch17_exit ; case break
1169   0C28             _switch17_default:
1170   0C28             ; print("Error: Unknown argument type.\n"); 
1171   0C28             ; --- START FUNCTION CALL
1172   0C28 26 AF 24      mov b, _s2 ; "Error: Unknown argument type.\n"
1173   0C2B FD AB         swp b
1174   0C2D D8            push b
1175   0C2E 07 AD 0F      call print
1176   0C31 51 02 00      add sp, 2
1177   0C34             ; --- END FUNCTION CALL
1178   0C34             _switch17_exit:
1179   0C34             ; format_p++; 
1180   0C34 FA FD FF      lea d, [bp + -3] ; $format_p
1181   0C37 2A            mov b, [d]
1182   0C38 38 00 00      mov c, 0
1183   0C3B FD 77         inc b
1184   0C3D FA FD FF      lea d, [bp + -3] ; $format_p
1185   0C40 FD 43         mov [d], b
1186   0C42 FD 7D         dec b
1187   0C44 0A 6C 0C      jmp _if16_exit
1188   0C47             _if16_else:
1189   0C47             ; putchar(*format_p); 
1190   0C47             ; --- START FUNCTION CALL
1191   0C47 FA FD FF      lea d, [bp + -3] ; $format_p
1192   0C4A 2A            mov b, [d]
1193   0C4B 38 00 00      mov c, 0
1194   0C4E 74            mov d, b
1195   0C4F 32            mov bl, [d]
1196   0C50 A7 00         mov bh, 0
1197   0C52 38 00 00      mov c, 0
1198   0C55 DD            push bl
1199   0C56 07 F6 0D      call putchar
1200   0C59 51 01 00      add sp, 1
1201   0C5C             ; --- END FUNCTION CALL
1202   0C5C             ; format_p++; 
1203   0C5C FA FD FF      lea d, [bp + -3] ; $format_p
1204   0C5F 2A            mov b, [d]
1205   0C60 38 00 00      mov c, 0
1206   0C63 FD 77         inc b
1207   0C65 FA FD FF      lea d, [bp + -3] ; $format_p
1208   0C68 FD 43         mov [d], b
1209   0C6A FD 7D         dec b
1210   0C6C             _if16_exit:
1211   0C6C             _if15_exit:
1212   0C6C             _for14_update:
1213   0C6C 0A A0 09      jmp _for14_cond
1214   0C6F             _for14_exit:
1215   0C6F F9            leave
1216   0C70 09            ret
1217   0C71             
1218   0C71             print_signed_long:
1219   0C71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1220   0C74             ; char digits[10]; 
1221   0C74 52 0A 00      sub sp, 10
1222   0C77             ; int i = 0; 
1223   0C77 52 02 00      sub sp, 2
1224   0C7A             ; --- START LOCAL VAR INITIALIZATION
1225   0C7A FA F5 FF      lea d, [bp + -11] ; $i
1226   0C7D DA            push d
1227   0C7E FD 2E 00 00   mov32 cb, $00000000
1227   0C82 00 00 
1228   0C84 E7            pop d
1229   0C85 FD 43         mov [d], b
1230   0C87             ; --- END LOCAL VAR INITIALIZATION
1231   0C87             ; if (num < 0) { 
1232   0C87             _if21_cond:
1233   0C87 FA 05 00      lea d, [bp + 5] ; $num
1234   0C8A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1235   0C8D FD 39         mov c, b ; And place it into C
1236   0C8F 2A            mov b, [d] ; Lower Word in B
1237   0C90             ; --- START RELATIONAL
1238   0C90 D7            push a
1239   0C91 FD D8         push g
1240   0C93 11            mov a, b
1241   0C94 FD 7A         mov g, c
1242   0C96 FD 2E 00 00   mov32 cb, $00000000
1242   0C9A 00 00 
1243   0C9C FD AF         cmp32 ga, cb
1244   0C9E FD 73         slt ; <
1245   0CA0 FD F1         pop g
1246   0CA2 E4            pop a
1247   0CA3             ; --- END RELATIONAL
1248   0CA3 C0 00 00      cmp b, 0
1249   0CA6 C6 D8 0C      je _if21_else
1250   0CA9             _if21_TRUE:
1251   0CA9             ; putchar('-'); 
1252   0CA9             ; --- START FUNCTION CALL
1253   0CA9 FD 2E 2D 00   mov32 cb, $0000002d
1253   0CAD 00 00 
1254   0CAF DD            push bl
1255   0CB0 07 F6 0D      call putchar
1256   0CB3 51 01 00      add sp, 1
1257   0CB6             ; --- END FUNCTION CALL
1258   0CB6             ; num = -num; 
1259   0CB6 FA 05 00      lea d, [bp + 5] ; $num
1260   0CB9 DA            push d
1261   0CBA FA 05 00      lea d, [bp + 5] ; $num
1262   0CBD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1263   0CC0 FD 39         mov c, b ; And place it into C
1264   0CC2 2A            mov b, [d] ; Lower Word in B
1265   0CC3 12            mov a, c
1266   0CC4 95            not a
1267   0CC5 97            not b
1268   0CC6 55 01 00      add b, 1
1269   0CC9 5B 00 00      adc a, 0
1270   0CCC 39            mov c, a
1271   0CCD E7            pop d
1272   0CCE FD 43         mov [d], b
1273   0CD0 28            mov b, c
1274   0CD1 FD 44 02 00   mov [d + 2], b
1275   0CD5 0A 0C 0D      jmp _if21_exit
1276   0CD8             _if21_else:
1277   0CD8             ; if (num == 0) { 
1278   0CD8             _if22_cond:
1279   0CD8 FA 05 00      lea d, [bp + 5] ; $num
1280   0CDB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1281   0CDE FD 39         mov c, b ; And place it into C
1282   0CE0 2A            mov b, [d] ; Lower Word in B
1283   0CE1             ; --- START RELATIONAL
1284   0CE1 D7            push a
1285   0CE2 FD D8         push g
1286   0CE4 11            mov a, b
1287   0CE5 FD 7A         mov g, c
1288   0CE7 FD 2E 00 00   mov32 cb, $00000000
1288   0CEB 00 00 
1289   0CED FD AF         cmp32 ga, cb
1290   0CEF FD 71         seq ; ==
1291   0CF1 FD F1         pop g
1292   0CF3 E4            pop a
1293   0CF4             ; --- END RELATIONAL
1294   0CF4 C0 00 00      cmp b, 0
1295   0CF7 C6 0C 0D      je _if22_exit
1296   0CFA             _if22_TRUE:
1297   0CFA             ; putchar('0'); 
1298   0CFA             ; --- START FUNCTION CALL
1299   0CFA FD 2E 30 00   mov32 cb, $00000030
1299   0CFE 00 00 
1300   0D00 DD            push bl
1301   0D01 07 F6 0D      call putchar
1302   0D04 51 01 00      add sp, 1
1303   0D07             ; --- END FUNCTION CALL
1304   0D07             ; return; 
1305   0D07 F9            leave
1306   0D08 09            ret
1307   0D09 0A 0C 0D      jmp _if22_exit
1308   0D0C             _if22_exit:
1309   0D0C             _if21_exit:
1310   0D0C             ; while (num > 0) { 
1311   0D0C             _while23_cond:
1312   0D0C FA 05 00      lea d, [bp + 5] ; $num
1313   0D0F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1314   0D12 FD 39         mov c, b ; And place it into C
1315   0D14 2A            mov b, [d] ; Lower Word in B
1316   0D15             ; --- START RELATIONAL
1317   0D15 D7            push a
1318   0D16 FD D8         push g
1319   0D18 11            mov a, b
1320   0D19 FD 7A         mov g, c
1321   0D1B FD 2E 00 00   mov32 cb, $00000000
1321   0D1F 00 00 
1322   0D21 FD AF         cmp32 ga, cb
1323   0D23 FD 7F         sgt
1324   0D25 FD F1         pop g
1325   0D27 E4            pop a
1326   0D28             ; --- END RELATIONAL
1327   0D28 C0 00 00      cmp b, 0
1328   0D2B C6 AC 0D      je _while23_exit
1329   0D2E             _while23_block:
1330   0D2E             ; digits[i] = '0' + (num % 10); 
1331   0D2E FA F7 FF      lea d, [bp + -9] ; $digits
1332   0D31 D7            push a
1333   0D32 DA            push d
1334   0D33 FA F5 FF      lea d, [bp + -11] ; $i
1335   0D36 2A            mov b, [d]
1336   0D37 38 00 00      mov c, 0
1337   0D3A E7            pop d
1338   0D3B 5A            add d, b
1339   0D3C E4            pop a
1340   0D3D DA            push d
1341   0D3E FD 2E 30 00   mov32 cb, $00000030
1341   0D42 00 00 
1342   0D44             ; --- START TERMS
1343   0D44 D7            push a
1344   0D45 11            mov a, b
1345   0D46 FA 05 00      lea d, [bp + 5] ; $num
1346   0D49 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1347   0D4C FD 39         mov c, b ; And place it into C
1348   0D4E 2A            mov b, [d] ; Lower Word in B
1349   0D4F             ; --- START FACTORS
1350   0D4F D7            push a
1351   0D50 FD D8         push g
1352   0D52 11            mov a, b
1353   0D53 FD 7A         mov g, c
1354   0D55 FD 2E 0A 00   mov32 cb, $0000000a
1354   0D59 00 00 
1355   0D5B FD D8         push g ; save 'g' as the div instruction uses it
1356   0D5D AE            div a, b ; %, a: quotient, b: remainder
1357   0D5E 11            mov a, b
1358   0D5F FD F1         pop g
1359   0D61 FD 38         mov c, g
1360   0D63 27            mov b, a
1361   0D64 FD F1         pop g
1362   0D66 E4            pop a
1363   0D67             ; --- END FACTORS
1364   0D67 FD 15         add32 cb, ga
1365   0D69 E4            pop a
1366   0D6A             ; --- END TERMS
1367   0D6A E7            pop d
1368   0D6B FD 3E         mov [d], bl
1369   0D6D             ; num = num / 10; 
1370   0D6D FA 05 00      lea d, [bp + 5] ; $num
1371   0D70 DA            push d
1372   0D71 FA 05 00      lea d, [bp + 5] ; $num
1373   0D74 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1374   0D77 FD 39         mov c, b ; And place it into C
1375   0D79 2A            mov b, [d] ; Lower Word in B
1376   0D7A             ; --- START FACTORS
1377   0D7A D7            push a
1378   0D7B FD D8         push g
1379   0D7D 11            mov a, b
1380   0D7E FD 7A         mov g, c
1381   0D80 FD 2E 0A 00   mov32 cb, $0000000a
1381   0D84 00 00 
1382   0D86 FD D8         push g ; save 'g' as the div instruction uses it
1383   0D88 AE            div a, b ; /, a: quotient, b: remainder
1384   0D89 FD F1         pop g
1385   0D8B FD 38         mov c, g
1386   0D8D 27            mov b, a
1387   0D8E FD F1         pop g
1388   0D90 E4            pop a
1389   0D91             ; --- END FACTORS
1390   0D91 E7            pop d
1391   0D92 FD 43         mov [d], b
1392   0D94 28            mov b, c
1393   0D95 FD 44 02 00   mov [d + 2], b
1394   0D99             ; i++; 
1395   0D99 FA F5 FF      lea d, [bp + -11] ; $i
1396   0D9C 2A            mov b, [d]
1397   0D9D 38 00 00      mov c, 0
1398   0DA0 11            mov a, b
1399   0DA1 FD 77         inc b
1400   0DA3 FA F5 FF      lea d, [bp + -11] ; $i
1401   0DA6 FD 43         mov [d], b
1402   0DA8 27            mov b, a
1403   0DA9 0A 0C 0D      jmp _while23_cond
1404   0DAC             _while23_exit:
1405   0DAC             ; while (i > 0) { 
1406   0DAC             _while30_cond:
1407   0DAC FA F5 FF      lea d, [bp + -11] ; $i
1408   0DAF 2A            mov b, [d]
1409   0DB0 38 00 00      mov c, 0
1410   0DB3             ; --- START RELATIONAL
1411   0DB3 D7            push a
1412   0DB4 11            mov a, b
1413   0DB5 FD 2E 00 00   mov32 cb, $00000000
1413   0DB9 00 00 
1414   0DBB B0            cmp a, b
1415   0DBC FD 7F         sgt ; >
1416   0DBE E4            pop a
1417   0DBF             ; --- END RELATIONAL
1418   0DBF C0 00 00      cmp b, 0
1419   0DC2 C6 F4 0D      je _while30_exit
1420   0DC5             _while30_block:
1421   0DC5             ; i--; 
1422   0DC5 FA F5 FF      lea d, [bp + -11] ; $i
1423   0DC8 2A            mov b, [d]
1424   0DC9 38 00 00      mov c, 0
1425   0DCC 11            mov a, b
1426   0DCD FD 7D         dec b
1427   0DCF FA F5 FF      lea d, [bp + -11] ; $i
1428   0DD2 FD 43         mov [d], b
1429   0DD4 27            mov b, a
1430   0DD5             ; putchar(digits[i]); 
1431   0DD5             ; --- START FUNCTION CALL
1432   0DD5 FA F7 FF      lea d, [bp + -9] ; $digits
1433   0DD8 D7            push a
1434   0DD9 DA            push d
1435   0DDA FA F5 FF      lea d, [bp + -11] ; $i
1436   0DDD 2A            mov b, [d]
1437   0DDE 38 00 00      mov c, 0
1438   0DE1 E7            pop d
1439   0DE2 5A            add d, b
1440   0DE3 E4            pop a
1441   0DE4 32            mov bl, [d]
1442   0DE5 A7 00         mov bh, 0
1443   0DE7 38 00 00      mov c, 0
1444   0DEA DD            push bl
1445   0DEB 07 F6 0D      call putchar
1446   0DEE 51 01 00      add sp, 1
1447   0DF1             ; --- END FUNCTION CALL
1448   0DF1 0A AC 0D      jmp _while30_cond
1449   0DF4             _while30_exit:
1450   0DF4 F9            leave
1451   0DF5 09            ret
1452   0DF6             
1453   0DF6             putchar:
1454   0DF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1455   0DF9             ; --- BEGIN INLINE ASM SEGMENT
1456   0DF9 FA 05 00      lea d, [bp + 5] ; $c
1457   0DFC 1E            mov al, [d]
1458   0DFD 23            mov ah, al
1459   0DFE 19 00         mov al, 0
1460   0E00 05 03         syscall sys_io      ; char in AH
1461   0E02             ; --- END INLINE ASM SEGMENT
1462   0E02 F9            leave
1463   0E03 09            ret
1464   0E04             
1465   0E04             print_unsigned_long:
1466   0E04 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1467   0E07             ; char digits[10]; 
1468   0E07 52 0A 00      sub sp, 10
1469   0E0A             ; int i; 
1470   0E0A 52 02 00      sub sp, 2
1471   0E0D             ; i = 0; 
1472   0E0D FA F5 FF      lea d, [bp + -11] ; $i
1473   0E10 DA            push d
1474   0E11 FD 2E 00 00   mov32 cb, $00000000
1474   0E15 00 00 
1475   0E17 E7            pop d
1476   0E18 FD 43         mov [d], b
1477   0E1A             ; if(num == 0){ 
1478   0E1A             _if31_cond:
1479   0E1A FA 05 00      lea d, [bp + 5] ; $num
1480   0E1D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1481   0E20 FD 39         mov c, b ; And place it into C
1482   0E22 2A            mov b, [d] ; Lower Word in B
1483   0E23             ; --- START RELATIONAL
1484   0E23 D7            push a
1485   0E24 FD D8         push g
1486   0E26 11            mov a, b
1487   0E27 FD 7A         mov g, c
1488   0E29 FD 2E 00 00   mov32 cb, $00000000
1488   0E2D 00 00 
1489   0E2F FD AF         cmp32 ga, cb
1490   0E31 FD 71         seq ; ==
1491   0E33 FD F1         pop g
1492   0E35 E4            pop a
1493   0E36             ; --- END RELATIONAL
1494   0E36 C0 00 00      cmp b, 0
1495   0E39 C6 4E 0E      je _if31_exit
1496   0E3C             _if31_TRUE:
1497   0E3C             ; putchar('0'); 
1498   0E3C             ; --- START FUNCTION CALL
1499   0E3C FD 2E 30 00   mov32 cb, $00000030
1499   0E40 00 00 
1500   0E42 DD            push bl
1501   0E43 07 F6 0D      call putchar
1502   0E46 51 01 00      add sp, 1
1503   0E49             ; --- END FUNCTION CALL
1504   0E49             ; return; 
1505   0E49 F9            leave
1506   0E4A 09            ret
1507   0E4B 0A 4E 0E      jmp _if31_exit
1508   0E4E             _if31_exit:
1509   0E4E             ; while (num > 0) { 
1510   0E4E             _while32_cond:
1511   0E4E FA 05 00      lea d, [bp + 5] ; $num
1512   0E51 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1513   0E54 FD 39         mov c, b ; And place it into C
1514   0E56 2A            mov b, [d] ; Lower Word in B
1515   0E57             ; --- START RELATIONAL
1516   0E57 D7            push a
1517   0E58 FD D8         push g
1518   0E5A 11            mov a, b
1519   0E5B FD 7A         mov g, c
1520   0E5D FD 2E 00 00   mov32 cb, $00000000
1520   0E61 00 00 
1521   0E63 FD AF         cmp32 ga, cb
1522   0E65 FD 81         sgu
1523   0E67 FD F1         pop g
1524   0E69 E4            pop a
1525   0E6A             ; --- END RELATIONAL
1526   0E6A C0 00 00      cmp b, 0
1527   0E6D C6 EE 0E      je _while32_exit
1528   0E70             _while32_block:
1529   0E70             ; digits[i] = '0' + (num % 10); 
1530   0E70 FA F7 FF      lea d, [bp + -9] ; $digits
1531   0E73 D7            push a
1532   0E74 DA            push d
1533   0E75 FA F5 FF      lea d, [bp + -11] ; $i
1534   0E78 2A            mov b, [d]
1535   0E79 38 00 00      mov c, 0
1536   0E7C E7            pop d
1537   0E7D 5A            add d, b
1538   0E7E E4            pop a
1539   0E7F DA            push d
1540   0E80 FD 2E 30 00   mov32 cb, $00000030
1540   0E84 00 00 
1541   0E86             ; --- START TERMS
1542   0E86 D7            push a
1543   0E87 11            mov a, b
1544   0E88 FA 05 00      lea d, [bp + 5] ; $num
1545   0E8B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1546   0E8E FD 39         mov c, b ; And place it into C
1547   0E90 2A            mov b, [d] ; Lower Word in B
1548   0E91             ; --- START FACTORS
1549   0E91 D7            push a
1550   0E92 FD D8         push g
1551   0E94 11            mov a, b
1552   0E95 FD 7A         mov g, c
1553   0E97 FD 2E 0A 00   mov32 cb, $0000000a
1553   0E9B 00 00 
1554   0E9D FD D8         push g ; save 'g' as the div instruction uses it
1555   0E9F AE            div a, b ; %, a: quotient, b: remainder
1556   0EA0 11            mov a, b
1557   0EA1 FD F1         pop g
1558   0EA3 FD 38         mov c, g
1559   0EA5 27            mov b, a
1560   0EA6 FD F1         pop g
1561   0EA8 E4            pop a
1562   0EA9             ; --- END FACTORS
1563   0EA9 FD 15         add32 cb, ga
1564   0EAB E4            pop a
1565   0EAC             ; --- END TERMS
1566   0EAC E7            pop d
1567   0EAD FD 3E         mov [d], bl
1568   0EAF             ; num = num / 10; 
1569   0EAF FA 05 00      lea d, [bp + 5] ; $num
1570   0EB2 DA            push d
1571   0EB3 FA 05 00      lea d, [bp + 5] ; $num
1572   0EB6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1573   0EB9 FD 39         mov c, b ; And place it into C
1574   0EBB 2A            mov b, [d] ; Lower Word in B
1575   0EBC             ; --- START FACTORS
1576   0EBC D7            push a
1577   0EBD FD D8         push g
1578   0EBF 11            mov a, b
1579   0EC0 FD 7A         mov g, c
1580   0EC2 FD 2E 0A 00   mov32 cb, $0000000a
1580   0EC6 00 00 
1581   0EC8 FD D8         push g ; save 'g' as the div instruction uses it
1582   0ECA AE            div a, b ; /, a: quotient, b: remainder
1583   0ECB FD F1         pop g
1584   0ECD FD 38         mov c, g
1585   0ECF 27            mov b, a
1586   0ED0 FD F1         pop g
1587   0ED2 E4            pop a
1588   0ED3             ; --- END FACTORS
1589   0ED3 E7            pop d
1590   0ED4 FD 43         mov [d], b
1591   0ED6 28            mov b, c
1592   0ED7 FD 44 02 00   mov [d + 2], b
1593   0EDB             ; i++; 
1594   0EDB FA F5 FF      lea d, [bp + -11] ; $i
1595   0EDE 2A            mov b, [d]
1596   0EDF 38 00 00      mov c, 0
1597   0EE2 11            mov a, b
1598   0EE3 FD 77         inc b
1599   0EE5 FA F5 FF      lea d, [bp + -11] ; $i
1600   0EE8 FD 43         mov [d], b
1601   0EEA 27            mov b, a
1602   0EEB 0A 4E 0E      jmp _while32_cond
1603   0EEE             _while32_exit:
1604   0EEE             ; while (i > 0) { 
1605   0EEE             _while39_cond:
1606   0EEE FA F5 FF      lea d, [bp + -11] ; $i
1607   0EF1 2A            mov b, [d]
1608   0EF2 38 00 00      mov c, 0
1609   0EF5             ; --- START RELATIONAL
1610   0EF5 D7            push a
1611   0EF6 11            mov a, b
1612   0EF7 FD 2E 00 00   mov32 cb, $00000000
1612   0EFB 00 00 
1613   0EFD B0            cmp a, b
1614   0EFE FD 7F         sgt ; >
1615   0F00 E4            pop a
1616   0F01             ; --- END RELATIONAL
1617   0F01 C0 00 00      cmp b, 0
1618   0F04 C6 36 0F      je _while39_exit
1619   0F07             _while39_block:
1620   0F07             ; i--; 
1621   0F07 FA F5 FF      lea d, [bp + -11] ; $i
1622   0F0A 2A            mov b, [d]
1623   0F0B 38 00 00      mov c, 0
1624   0F0E 11            mov a, b
1625   0F0F FD 7D         dec b
1626   0F11 FA F5 FF      lea d, [bp + -11] ; $i
1627   0F14 FD 43         mov [d], b
1628   0F16 27            mov b, a
1629   0F17             ; putchar(digits[i]); 
1630   0F17             ; --- START FUNCTION CALL
1631   0F17 FA F7 FF      lea d, [bp + -9] ; $digits
1632   0F1A D7            push a
1633   0F1B DA            push d
1634   0F1C FA F5 FF      lea d, [bp + -11] ; $i
1635   0F1F 2A            mov b, [d]
1636   0F20 38 00 00      mov c, 0
1637   0F23 E7            pop d
1638   0F24 5A            add d, b
1639   0F25 E4            pop a
1640   0F26 32            mov bl, [d]
1641   0F27 A7 00         mov bh, 0
1642   0F29 38 00 00      mov c, 0
1643   0F2C DD            push bl
1644   0F2D 07 F6 0D      call putchar
1645   0F30 51 01 00      add sp, 1
1646   0F33             ; --- END FUNCTION CALL
1647   0F33 0A EE 0E      jmp _while39_cond
1648   0F36             _while39_exit:
1649   0F36 F9            leave
1650   0F37 09            ret
1651   0F38             
1652   0F38             printx32:
1653   0F38 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1654   0F3B             ; --- BEGIN INLINE ASM SEGMENT
1655   0F3B FA 05 00      lea d, [bp + 5] ; $hex
1656   0F3E 2B 02 00      mov b, [d+2]
1657   0F41 07 4A 0F      call print_u16x_printx32
1658   0F44 2A            mov b, [d]
1659   0F45 07 4A 0F      call print_u16x_printx32
1660   0F48             ; --- END INLINE ASM SEGMENT
1661   0F48             ; return; 
1662   0F48 F9            leave
1663   0F49 09            ret
1664   0F4A             ; --- BEGIN INLINE ASM SEGMENT
1665   0F4A             print_u16x_printx32:
1666   0F4A D7            push a
1667   0F4B D8            push b
1668   0F4C DD            push bl
1669   0F4D 30            mov bl, bh
1670   0F4E 07 6C 0F      call _itoa_printx32        ; convert bh to char in A
1671   0F51 2F            mov bl, al        ; save al
1672   0F52 19 00         mov al, 0
1673   0F54 05 03         syscall sys_io        ; display AH
1674   0F56 24            mov ah, bl        ; retrieve al
1675   0F57 19 00         mov al, 0
1676   0F59 05 03         syscall sys_io        ; display AL
1677   0F5B EA            pop bl
1678   0F5C 07 6C 0F      call _itoa_printx32        ; convert bh to char in A
1679   0F5F 2F            mov bl, al        ; save al
1680   0F60 19 00         mov al, 0
1681   0F62 05 03         syscall sys_io        ; display AH
1682   0F64 24            mov ah, bl        ; retrieve al
1683   0F65 19 00         mov al, 0
1684   0F67 05 03         syscall sys_io        ; display AL
1685   0F69 E5            pop b
1686   0F6A E4            pop a
1687   0F6B 09            ret
1688   0F6C             _itoa_printx32:
1689   0F6C DA            push d
1690   0F6D D8            push b
1691   0F6E A7 00         mov bh, 0
1692   0F70 FD A4 04      shr bl, 4  
1693   0F73 74            mov d, b
1694   0F74 1F 86 0F      mov al, [d + s_hex_digits_printx32]
1695   0F77 23            mov ah, al
1696   0F78 E5            pop b
1697   0F79 D8            push b
1698   0F7A A7 00         mov bh, 0
1699   0F7C FD 87 0F      and bl, $0F
1700   0F7F 74            mov d, b
1701   0F80 1F 86 0F      mov al, [d + s_hex_digits_printx32]
1702   0F83 E5            pop b
1703   0F84 E7            pop d
1704   0F85 09            ret
1705   0F86 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
1705   0F8A 34 35 36 37 
1705   0F8E 38 39 41 42 
1705   0F92 43 44 45 46 
1706   0F96             ; --- END INLINE ASM SEGMENT
1707   0F96 F9            leave
1708   0F97 09            ret
1709   0F98             
1710   0F98             err:
1711   0F98 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1712   0F9B             ; print(e); 
1713   0F9B             ; --- START FUNCTION CALL
1714   0F9B FA 05 00      lea d, [bp + 5] ; $e
1715   0F9E 2A            mov b, [d]
1716   0F9F 38 00 00      mov c, 0
1717   0FA2 FD AB         swp b
1718   0FA4 D8            push b
1719   0FA5 07 AD 0F      call print
1720   0FA8 51 02 00      add sp, 2
1721   0FAB             ; --- END FUNCTION CALL
1722   0FAB F9            leave
1723   0FAC 09            ret
1724   0FAD             
1725   0FAD             print:
1726   0FAD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1727   0FB0             ; --- BEGIN INLINE ASM SEGMENT
1728   0FB0 FA 05 00      lea d, [bp + 5] ; $s
1729   0FB3 FD 2A         mov d, [d]
1730   0FB5             _puts_L1_print:
1731   0FB5 1E            mov al, [d]
1732   0FB6 B9 00         cmp al, 0
1733   0FB8 C6 C4 0F      jz _puts_END_print
1734   0FBB 23            mov ah, al
1735   0FBC 19 00         mov al, 0
1736   0FBE 05 03         syscall sys_io
1737   0FC0 79            inc d
1738   0FC1 0A B5 0F      jmp _puts_L1_print
1739   0FC4             _puts_END_print:
1740   0FC4             ; --- END INLINE ASM SEGMENT
1741   0FC4 F9            leave
1742   0FC5 09            ret
1743   0FC6             
1744   0FC6             print_signed:
1745   0FC6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1746   0FC9             ; char digits[5]; 
1747   0FC9 52 05 00      sub sp, 5
1748   0FCC             ; int i = 0; 
1749   0FCC 52 02 00      sub sp, 2
1750   0FCF             ; --- START LOCAL VAR INITIALIZATION
1751   0FCF FA FA FF      lea d, [bp + -6] ; $i
1752   0FD2 DA            push d
1753   0FD3 FD 2E 00 00   mov32 cb, $00000000
1753   0FD7 00 00 
1754   0FD9 E7            pop d
1755   0FDA FD 43         mov [d], b
1756   0FDC             ; --- END LOCAL VAR INITIALIZATION
1757   0FDC             ; if (num < 0) { 
1758   0FDC             _if40_cond:
1759   0FDC FA 05 00      lea d, [bp + 5] ; $num
1760   0FDF 2A            mov b, [d]
1761   0FE0 38 00 00      mov c, 0
1762   0FE3             ; --- START RELATIONAL
1763   0FE3 D7            push a
1764   0FE4 11            mov a, b
1765   0FE5 FD 2E 00 00   mov32 cb, $00000000
1765   0FE9 00 00 
1766   0FEB B0            cmp a, b
1767   0FEC FD 73         slt ; < (signed)
1768   0FEE E4            pop a
1769   0FEF             ; --- END RELATIONAL
1770   0FEF C0 00 00      cmp b, 0
1771   0FF2 C6 15 10      je _if40_else
1772   0FF5             _if40_TRUE:
1773   0FF5             ; putchar('-'); 
1774   0FF5             ; --- START FUNCTION CALL
1775   0FF5 FD 2E 2D 00   mov32 cb, $0000002d
1775   0FF9 00 00 
1776   0FFB DD            push bl
1777   0FFC 07 F6 0D      call putchar
1778   0FFF 51 01 00      add sp, 1
1779   1002             ; --- END FUNCTION CALL
1780   1002             ; num = -num; 
1781   1002 FA 05 00      lea d, [bp + 5] ; $num
1782   1005 DA            push d
1783   1006 FA 05 00      lea d, [bp + 5] ; $num
1784   1009 2A            mov b, [d]
1785   100A 38 00 00      mov c, 0
1786   100D FD 97         neg b
1787   100F E7            pop d
1788   1010 FD 43         mov [d], b
1789   1012 0A 40 10      jmp _if40_exit
1790   1015             _if40_else:
1791   1015             ; if (num == 0) { 
1792   1015             _if41_cond:
1793   1015 FA 05 00      lea d, [bp + 5] ; $num
1794   1018 2A            mov b, [d]
1795   1019 38 00 00      mov c, 0
1796   101C             ; --- START RELATIONAL
1797   101C D7            push a
1798   101D 11            mov a, b
1799   101E FD 2E 00 00   mov32 cb, $00000000
1799   1022 00 00 
1800   1024 B0            cmp a, b
1801   1025 FD 71         seq ; ==
1802   1027 E4            pop a
1803   1028             ; --- END RELATIONAL
1804   1028 C0 00 00      cmp b, 0
1805   102B C6 40 10      je _if41_exit
1806   102E             _if41_TRUE:
1807   102E             ; putchar('0'); 
1808   102E             ; --- START FUNCTION CALL
1809   102E FD 2E 30 00   mov32 cb, $00000030
1809   1032 00 00 
1810   1034 DD            push bl
1811   1035 07 F6 0D      call putchar
1812   1038 51 01 00      add sp, 1
1813   103B             ; --- END FUNCTION CALL
1814   103B             ; return; 
1815   103B F9            leave
1816   103C 09            ret
1817   103D 0A 40 10      jmp _if41_exit
1818   1040             _if41_exit:
1819   1040             _if40_exit:
1820   1040             ; while (num > 0) { 
1821   1040             _while42_cond:
1822   1040 FA 05 00      lea d, [bp + 5] ; $num
1823   1043 2A            mov b, [d]
1824   1044 38 00 00      mov c, 0
1825   1047             ; --- START RELATIONAL
1826   1047 D7            push a
1827   1048 11            mov a, b
1828   1049 FD 2E 00 00   mov32 cb, $00000000
1828   104D 00 00 
1829   104F B0            cmp a, b
1830   1050 FD 7F         sgt ; >
1831   1052 E4            pop a
1832   1053             ; --- END RELATIONAL
1833   1053 C0 00 00      cmp b, 0
1834   1056 C6 CD 10      je _while42_exit
1835   1059             _while42_block:
1836   1059             ; digits[i] = '0' + (num % 10); 
1837   1059 FA FC FF      lea d, [bp + -4] ; $digits
1838   105C D7            push a
1839   105D DA            push d
1840   105E FA FA FF      lea d, [bp + -6] ; $i
1841   1061 2A            mov b, [d]
1842   1062 38 00 00      mov c, 0
1843   1065 E7            pop d
1844   1066 5A            add d, b
1845   1067 E4            pop a
1846   1068 DA            push d
1847   1069 FD 2E 30 00   mov32 cb, $00000030
1847   106D 00 00 
1848   106F             ; --- START TERMS
1849   106F D7            push a
1850   1070 11            mov a, b
1851   1071 FA 05 00      lea d, [bp + 5] ; $num
1852   1074 2A            mov b, [d]
1853   1075 38 00 00      mov c, 0
1854   1078             ; --- START FACTORS
1855   1078 D7            push a
1856   1079 FD D8         push g
1857   107B 11            mov a, b
1858   107C FD 7A         mov g, c
1859   107E FD 2E 0A 00   mov32 cb, $0000000a
1859   1082 00 00 
1860   1084 FD D8         push g ; save 'g' as the div instruction uses it
1861   1086 AE            div a, b ; %, a: quotient, b: remainder
1862   1087 11            mov a, b
1863   1088 FD F1         pop g
1864   108A FD 38         mov c, g
1865   108C 27            mov b, a
1866   108D FD F1         pop g
1867   108F E4            pop a
1868   1090             ; --- END FACTORS
1869   1090 56            add b, a
1870   1091 E4            pop a
1871   1092             ; --- END TERMS
1872   1092 E7            pop d
1873   1093 FD 3E         mov [d], bl
1874   1095             ; num = num / 10; 
1875   1095 FA 05 00      lea d, [bp + 5] ; $num
1876   1098 DA            push d
1877   1099 FA 05 00      lea d, [bp + 5] ; $num
1878   109C 2A            mov b, [d]
1879   109D 38 00 00      mov c, 0
1880   10A0             ; --- START FACTORS
1881   10A0 D7            push a
1882   10A1 FD D8         push g
1883   10A3 11            mov a, b
1884   10A4 FD 7A         mov g, c
1885   10A6 FD 2E 0A 00   mov32 cb, $0000000a
1885   10AA 00 00 
1886   10AC FD D8         push g ; save 'g' as the div instruction uses it
1887   10AE AE            div a, b ; /, a: quotient, b: remainder
1888   10AF FD F1         pop g
1889   10B1 FD 38         mov c, g
1890   10B3 27            mov b, a
1891   10B4 FD F1         pop g
1892   10B6 E4            pop a
1893   10B7             ; --- END FACTORS
1894   10B7 E7            pop d
1895   10B8 FD 43         mov [d], b
1896   10BA             ; i++; 
1897   10BA FA FA FF      lea d, [bp + -6] ; $i
1898   10BD 2A            mov b, [d]
1899   10BE 38 00 00      mov c, 0
1900   10C1 11            mov a, b
1901   10C2 FD 77         inc b
1902   10C4 FA FA FF      lea d, [bp + -6] ; $i
1903   10C7 FD 43         mov [d], b
1904   10C9 27            mov b, a
1905   10CA 0A 40 10      jmp _while42_cond
1906   10CD             _while42_exit:
1907   10CD             ; while (i > 0) { 
1908   10CD             _while49_cond:
1909   10CD FA FA FF      lea d, [bp + -6] ; $i
1910   10D0 2A            mov b, [d]
1911   10D1 38 00 00      mov c, 0
1912   10D4             ; --- START RELATIONAL
1913   10D4 D7            push a
1914   10D5 11            mov a, b
1915   10D6 FD 2E 00 00   mov32 cb, $00000000
1915   10DA 00 00 
1916   10DC B0            cmp a, b
1917   10DD FD 7F         sgt ; >
1918   10DF E4            pop a
1919   10E0             ; --- END RELATIONAL
1920   10E0 C0 00 00      cmp b, 0
1921   10E3 C6 15 11      je _while49_exit
1922   10E6             _while49_block:
1923   10E6             ; i--; 
1924   10E6 FA FA FF      lea d, [bp + -6] ; $i
1925   10E9 2A            mov b, [d]
1926   10EA 38 00 00      mov c, 0
1927   10ED 11            mov a, b
1928   10EE FD 7D         dec b
1929   10F0 FA FA FF      lea d, [bp + -6] ; $i
1930   10F3 FD 43         mov [d], b
1931   10F5 27            mov b, a
1932   10F6             ; putchar(digits[i]); 
1933   10F6             ; --- START FUNCTION CALL
1934   10F6 FA FC FF      lea d, [bp + -4] ; $digits
1935   10F9 D7            push a
1936   10FA DA            push d
1937   10FB FA FA FF      lea d, [bp + -6] ; $i
1938   10FE 2A            mov b, [d]
1939   10FF 38 00 00      mov c, 0
1940   1102 E7            pop d
1941   1103 5A            add d, b
1942   1104 E4            pop a
1943   1105 32            mov bl, [d]
1944   1106 A7 00         mov bh, 0
1945   1108 38 00 00      mov c, 0
1946   110B DD            push bl
1947   110C 07 F6 0D      call putchar
1948   110F 51 01 00      add sp, 1
1949   1112             ; --- END FUNCTION CALL
1950   1112 0A CD 10      jmp _while49_cond
1951   1115             _while49_exit:
1952   1115 F9            leave
1953   1116 09            ret
1954   1117             
1955   1117             print_unsigned:
1956   1117 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1957   111A             ; char digits[5]; 
1958   111A 52 05 00      sub sp, 5
1959   111D             ; int i; 
1960   111D 52 02 00      sub sp, 2
1961   1120             ; i = 0; 
1962   1120 FA FA FF      lea d, [bp + -6] ; $i
1963   1123 DA            push d
1964   1124 FD 2E 00 00   mov32 cb, $00000000
1964   1128 00 00 
1965   112A E7            pop d
1966   112B FD 43         mov [d], b
1967   112D             ; if(num == 0){ 
1968   112D             _if50_cond:
1969   112D FA 05 00      lea d, [bp + 5] ; $num
1970   1130 2A            mov b, [d]
1971   1131 38 00 00      mov c, 0
1972   1134             ; --- START RELATIONAL
1973   1134 D7            push a
1974   1135 11            mov a, b
1975   1136 FD 2E 00 00   mov32 cb, $00000000
1975   113A 00 00 
1976   113C B0            cmp a, b
1977   113D FD 71         seq ; ==
1978   113F E4            pop a
1979   1140             ; --- END RELATIONAL
1980   1140 C0 00 00      cmp b, 0
1981   1143 C6 58 11      je _if50_exit
1982   1146             _if50_TRUE:
1983   1146             ; putchar('0'); 
1984   1146             ; --- START FUNCTION CALL
1985   1146 FD 2E 30 00   mov32 cb, $00000030
1985   114A 00 00 
1986   114C DD            push bl
1987   114D 07 F6 0D      call putchar
1988   1150 51 01 00      add sp, 1
1989   1153             ; --- END FUNCTION CALL
1990   1153             ; return; 
1991   1153 F9            leave
1992   1154 09            ret
1993   1155 0A 58 11      jmp _if50_exit
1994   1158             _if50_exit:
1995   1158             ; while (num > 0) { 
1996   1158             _while51_cond:
1997   1158 FA 05 00      lea d, [bp + 5] ; $num
1998   115B 2A            mov b, [d]
1999   115C 38 00 00      mov c, 0
2000   115F             ; --- START RELATIONAL
2001   115F D7            push a
2002   1160 11            mov a, b
2003   1161 FD 2E 00 00   mov32 cb, $00000000
2003   1165 00 00 
2004   1167 B0            cmp a, b
2005   1168 FD 81         sgu ; > (unsigned)
2006   116A E4            pop a
2007   116B             ; --- END RELATIONAL
2008   116B C0 00 00      cmp b, 0
2009   116E C6 E5 11      je _while51_exit
2010   1171             _while51_block:
2011   1171             ; digits[i] = '0' + (num % 10); 
2012   1171 FA FC FF      lea d, [bp + -4] ; $digits
2013   1174 D7            push a
2014   1175 DA            push d
2015   1176 FA FA FF      lea d, [bp + -6] ; $i
2016   1179 2A            mov b, [d]
2017   117A 38 00 00      mov c, 0
2018   117D E7            pop d
2019   117E 5A            add d, b
2020   117F E4            pop a
2021   1180 DA            push d
2022   1181 FD 2E 30 00   mov32 cb, $00000030
2022   1185 00 00 
2023   1187             ; --- START TERMS
2024   1187 D7            push a
2025   1188 11            mov a, b
2026   1189 FA 05 00      lea d, [bp + 5] ; $num
2027   118C 2A            mov b, [d]
2028   118D 38 00 00      mov c, 0
2029   1190             ; --- START FACTORS
2030   1190 D7            push a
2031   1191 FD D8         push g
2032   1193 11            mov a, b
2033   1194 FD 7A         mov g, c
2034   1196 FD 2E 0A 00   mov32 cb, $0000000a
2034   119A 00 00 
2035   119C FD D8         push g ; save 'g' as the div instruction uses it
2036   119E AE            div a, b ; %, a: quotient, b: remainder
2037   119F 11            mov a, b
2038   11A0 FD F1         pop g
2039   11A2 FD 38         mov c, g
2040   11A4 27            mov b, a
2041   11A5 FD F1         pop g
2042   11A7 E4            pop a
2043   11A8             ; --- END FACTORS
2044   11A8 56            add b, a
2045   11A9 E4            pop a
2046   11AA             ; --- END TERMS
2047   11AA E7            pop d
2048   11AB FD 3E         mov [d], bl
2049   11AD             ; num = num / 10; 
2050   11AD FA 05 00      lea d, [bp + 5] ; $num
2051   11B0 DA            push d
2052   11B1 FA 05 00      lea d, [bp + 5] ; $num
2053   11B4 2A            mov b, [d]
2054   11B5 38 00 00      mov c, 0
2055   11B8             ; --- START FACTORS
2056   11B8 D7            push a
2057   11B9 FD D8         push g
2058   11BB 11            mov a, b
2059   11BC FD 7A         mov g, c
2060   11BE FD 2E 0A 00   mov32 cb, $0000000a
2060   11C2 00 00 
2061   11C4 FD D8         push g ; save 'g' as the div instruction uses it
2062   11C6 AE            div a, b ; /, a: quotient, b: remainder
2063   11C7 FD F1         pop g
2064   11C9 FD 38         mov c, g
2065   11CB 27            mov b, a
2066   11CC FD F1         pop g
2067   11CE E4            pop a
2068   11CF             ; --- END FACTORS
2069   11CF E7            pop d
2070   11D0 FD 43         mov [d], b
2071   11D2             ; i++; 
2072   11D2 FA FA FF      lea d, [bp + -6] ; $i
2073   11D5 2A            mov b, [d]
2074   11D6 38 00 00      mov c, 0
2075   11D9 11            mov a, b
2076   11DA FD 77         inc b
2077   11DC FA FA FF      lea d, [bp + -6] ; $i
2078   11DF FD 43         mov [d], b
2079   11E1 27            mov b, a
2080   11E2 0A 58 11      jmp _while51_cond
2081   11E5             _while51_exit:
2082   11E5             ; while (i > 0) { 
2083   11E5             _while58_cond:
2084   11E5 FA FA FF      lea d, [bp + -6] ; $i
2085   11E8 2A            mov b, [d]
2086   11E9 38 00 00      mov c, 0
2087   11EC             ; --- START RELATIONAL
2088   11EC D7            push a
2089   11ED 11            mov a, b
2090   11EE FD 2E 00 00   mov32 cb, $00000000
2090   11F2 00 00 
2091   11F4 B0            cmp a, b
2092   11F5 FD 7F         sgt ; >
2093   11F7 E4            pop a
2094   11F8             ; --- END RELATIONAL
2095   11F8 C0 00 00      cmp b, 0
2096   11FB C6 2D 12      je _while58_exit
2097   11FE             _while58_block:
2098   11FE             ; i--; 
2099   11FE FA FA FF      lea d, [bp + -6] ; $i
2100   1201 2A            mov b, [d]
2101   1202 38 00 00      mov c, 0
2102   1205 11            mov a, b
2103   1206 FD 7D         dec b
2104   1208 FA FA FF      lea d, [bp + -6] ; $i
2105   120B FD 43         mov [d], b
2106   120D 27            mov b, a
2107   120E             ; putchar(digits[i]); 
2108   120E             ; --- START FUNCTION CALL
2109   120E FA FC FF      lea d, [bp + -4] ; $digits
2110   1211 D7            push a
2111   1212 DA            push d
2112   1213 FA FA FF      lea d, [bp + -6] ; $i
2113   1216 2A            mov b, [d]
2114   1217 38 00 00      mov c, 0
2115   121A E7            pop d
2116   121B 5A            add d, b
2117   121C E4            pop a
2118   121D 32            mov bl, [d]
2119   121E A7 00         mov bh, 0
2120   1220 38 00 00      mov c, 0
2121   1223 DD            push bl
2122   1224 07 F6 0D      call putchar
2123   1227 51 01 00      add sp, 1
2124   122A             ; --- END FUNCTION CALL
2125   122A 0A E5 11      jmp _while58_cond
2126   122D             _while58_exit:
2127   122D F9            leave
2128   122E 09            ret
2129   122F             
2130   122F             printx16:
2131   122F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2132   1232             ; --- BEGIN INLINE ASM SEGMENT
2133   1232 FA 05 00      lea d, [bp + 5] ; $hex
2134   1235 2A            mov b, [d]
2135   1236             print_u16x_printx16:
2136   1236 DD            push bl
2137   1237 30            mov bl, bh
2138   1238 07 55 12      call _itoa_printx16        ; convert bh to char in A
2139   123B 2F            mov bl, al        ; save al
2140   123C 19 00         mov al, 0
2141   123E 05 03         syscall sys_io        ; display AH
2142   1240 24            mov ah, bl        ; retrieve al
2143   1241 19 00         mov al, 0
2144   1243 05 03         syscall sys_io        ; display AL
2145   1245 EA            pop bl
2146   1246 07 55 12      call _itoa_printx16        ; convert bh to char in A
2147   1249 2F            mov bl, al        ; save al
2148   124A 19 00         mov al, 0
2149   124C 05 03         syscall sys_io        ; display AH
2150   124E 24            mov ah, bl        ; retrieve al
2151   124F 19 00         mov al, 0
2152   1251 05 03         syscall sys_io        ; display AL
2153   1253             ; --- END INLINE ASM SEGMENT
2154   1253             ; return; 
2155   1253 F9            leave
2156   1254 09            ret
2157   1255             ; --- BEGIN INLINE ASM SEGMENT
2158   1255             _itoa_printx16:
2159   1255 DA            push d
2160   1256 D8            push b
2161   1257 A7 00         mov bh, 0
2162   1259 FD A4 04      shr bl, 4  
2163   125C 74            mov d, b
2164   125D 1F 6F 12      mov al, [d + s_hex_digits_printx16]
2165   1260 23            mov ah, al
2166   1261 E5            pop b
2167   1262 D8            push b
2168   1263 A7 00         mov bh, 0
2169   1265 FD 87 0F      and bl, $0F
2170   1268 74            mov d, b
2171   1269 1F 6F 12      mov al, [d + s_hex_digits_printx16]
2172   126C E5            pop b
2173   126D E7            pop d
2174   126E 09            ret
2175   126F 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2175   1273 34 35 36 37 
2175   1277 38 39 41 42 
2175   127B 43 44 45 46 
2176   127F             ; --- END INLINE ASM SEGMENT
2177   127F F9            leave
2178   1280 09            ret
2179   1281             
2180   1281             getchar:
2181   1281 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2182   1284             ; char c; 
2183   1284 52 01 00      sub sp, 1
2184   1287             ; --- BEGIN INLINE ASM SEGMENT
2185   1287 19 01         mov al, 1
2186   1289 05 03         syscall sys_io      ; receive in AH
2187   128B 1A            mov al, ah
2188   128C FA 00 00      lea d, [bp + 0] ; $c
2189   128F 3E            mov [d], al
2190   1290             ; --- END INLINE ASM SEGMENT
2191   1290             ; return c; 
2192   1290 FA 00 00      lea d, [bp + 0] ; $c
2193   1293 32            mov bl, [d]
2194   1294 A7 00         mov bh, 0
2195   1296 38 00 00      mov c, 0
2196   1299 F9            leave
2197   129A 09            ret
2198   129B             ; --- END TEXT SEGMENT
2199   129B             
2200   129B             ; --- BEGIN DATA SEGMENT
2201   129B 00 00 00 00 _map_data: .fill 4560, 0
2201   129F 00 00 00 00 
2201   12A3 00 00 00 00 
2201   12A7 00 00 00 00 
2201   12AB 00 00 00 00 
2201   12AF 00 00 00 00 
2201   12B3 00 00 00 00 
2201   12B7 00 00 00 00 
2201   12BB 00 00 00 00 
2201   12BF 00 00 00 00 
2201   12C3 00 00 00 00 
2201   12C7 00 00 00 00 
2201   12CB 00 00 00 00 
2201   12CF 00 00 00 00 
2201   12D3 00 00 00 00 
2201   12D7 00 00 00 00 
2201   12DB 00 00 00 00 
2201   12DF 00 00 00 00 
2201   12E3 00 00 00 00 
2201   12E7 00 00 00 00 
2201   12EB 00 00 00 00 
2201   12EF 00 00 00 00 
2201   12F3 00 00 00 00 
2201   12F7 00 00 00 00 
2201   12FB 00 00 00 00 
2201   12FF 00 00 00 00 
2201   1303 00 00 00 00 
2201   1307 00 00 00 00 
2201   130B 00 00 00 00 
2201   130F 00 00 00 00 
2201   1313 00 00 00 00 
2201   1317 00 00 00 00 
2201   131B 00 00 00 00 
2201   131F 00 00 00 00 
2201   1323 00 00 00 00 
2201   1327 00 00 00 00 
2201   132B 00 00 00 00 
2201   132F 00 00 00 00 
2201   1333 00 00 00 00 
2201   1337 00 00 00 00 
2201   133B 00 00 00 00 
2201   133F 00 00 00 00 
2201   1343 00 00 00 00 
2201   1347 00 00 00 00 
2201   134B 00 00 00 00 
2201   134F 00 00 00 00 
2201   1353 00 00 00 00 
2201   1357 00 00 00 00 
2201   135B 00 00 00 00 
2201   135F 00 00 00 00 
2201   1363 00 00 00 00 
2201   1367 00 00 00 00 
2201   136B 00 00 00 00 
2201   136F 00 00 00 00 
2201   1373 00 00 00 00 
2201   1377 00 00 00 00 
2201   137B 00 00 00 00 
2201   137F 00 00 00 00 
2201   1383 00 00 00 00 
2201   1387 00 00 00 00 
2201   138B 00 00 00 00 
2201   138F 00 00 00 00 
2201   1393 00 00 00 00 
2201   1397 00 00 00 00 
2201   139B 00 00 00 00 
2201   139F 00 00 00 00 
2201   13A3 00 00 00 00 
2201   13A7 00 00 00 00 
2201   13AB 00 00 00 00 
2201   13AF 00 00 00 00 
2201   13B3 00 00 00 00 
2201   13B7 00 00 00 00 
2201   13BB 00 00 00 00 
2201   13BF 00 00 00 00 
2201   13C3 00 00 00 00 
2201   13C7 00 00 00 00 
2201   13CB 00 00 00 00 
2201   13CF 00 00 00 00 
2201   13D3 00 00 00 00 
2201   13D7 00 00 00 00 
2201   13DB 00 00 00 00 
2201   13DF 00 00 00 00 
2201   13E3 00 00 00 00 
2201   13E7 00 00 00 00 
2201   13EB 00 00 00 00 
2201   13EF 00 00 00 00 
2201   13F3 00 00 00 00 
2201   13F7 00 00 00 00 
2201   13FB 00 00 00 00 
2201   13FF 00 00 00 00 
2201   1403 00 00 00 00 
2201   1407 00 00 00 00 
2201   140B 00 00 00 00 
2201   140F 00 00 00 00 
2201   1413 00 00 00 00 
2201   1417 00 00 00 00 
2201   141B 00 00 00 00 
2201   141F 00 00 00 00 
2201   1423 00 00 00 00 
2201   1427 00 00 00 00 
2201   142B 00 00 00 00 
2201   142F 00 00 00 00 
2201   1433 00 00 00 00 
2201   1437 00 00 00 00 
2201   143B 00 00 00 00 
2201   143F 00 00 00 00 
2201   1443 00 00 00 00 
2201   1447 00 00 00 00 
2201   144B 00 00 00 00 
2201   144F 00 00 00 00 
2201   1453 00 00 00 00 
2201   1457 00 00 00 00 
2201   145B 00 00 00 00 
2201   145F 00 00 00 00 
2201   1463 00 00 00 00 
2201   1467 00 00 00 00 
2201   146B 00 00 00 00 
2201   146F 00 00 00 00 
2201   1473 00 00 00 00 
2201   1477 00 00 00 00 
2201   147B 00 00 00 00 
2201   147F 00 00 00 00 
2201   1483 00 00 00 00 
2201   1487 00 00 00 00 
2201   148B 00 00 00 00 
2201   148F 00 00 00 00 
2201   1493 00 00 00 00 
2201   1497 00 00 00 00 
2201   149B 00 00 00 00 
2201   149F 00 00 00 00 
2201   14A3 00 00 00 00 
2201   14A7 00 00 00 00 
2201   14AB 00 00 00 00 
2201   14AF 00 00 00 00 
2201   14B3 00 00 00 00 
2201   14B7 00 00 00 00 
2201   14BB 00 00 00 00 
2201   14BF 00 00 00 00 
2201   14C3 00 00 00 00 
2201   14C7 00 00 00 00 
2201   14CB 00 00 00 00 
2201   14CF 00 00 00 00 
2201   14D3 00 00 00 00 
2201   14D7 00 00 00 00 
2201   14DB 00 00 00 00 
2201   14DF 00 00 00 00 
2201   14E3 00 00 00 00 
2201   14E7 00 00 00 00 
2201   14EB 00 00 00 00 
2201   14EF 00 00 00 00 
2201   14F3 00 00 00 00 
2201   14F7 00 00 00 00 
2201   14FB 00 00 00 00 
2201   14FF 00 00 00 00 
2201   1503 00 00 00 00 
2201   1507 00 00 00 00 
2201   150B 00 00 00 00 
2201   150F 00 00 00 00 
2201   1513 00 00 00 00 
2201   1517 00 00 00 00 
2201   151B 00 00 00 00 
2201   151F 00 00 00 00 
2201   1523 00 00 00 00 
2201   1527 00 00 00 00 
2201   152B 00 00 00 00 
2201   152F 00 00 00 00 
2201   1533 00 00 00 00 
2201   1537 00 00 00 00 
2201   153B 00 00 00 00 
2201   153F 00 00 00 00 
2201   1543 00 00 00 00 
2201   1547 00 00 00 00 
2201   154B 00 00 00 00 
2201   154F 00 00 00 00 
2201   1553 00 00 00 00 
2201   1557 00 00 00 00 
2201   155B 00 00 00 00 
2201   155F 00 00 00 00 
2201   1563 00 00 00 00 
2201   1567 00 00 00 00 
2201   156B 00 00 00 00 
2201   156F 00 00 00 00 
2201   1573 00 00 00 00 
2201   1577 00 00 00 00 
2201   157B 00 00 00 00 
2201   157F 00 00 00 00 
2201   1583 00 00 00 00 
2201   1587 00 00 00 00 
2201   158B 00 00 00 00 
2201   158F 00 00 00 00 
2201   1593 00 00 00 00 
2201   1597 00 00 00 00 
2201   159B 00 00 00 00 
2201   159F 00 00 00 00 
2201   15A3 00 00 00 00 
2201   15A7 00 00 00 00 
2201   15AB 00 00 00 00 
2201   15AF 00 00 00 00 
2201   15B3 00 00 00 00 
2201   15B7 00 00 00 00 
2201   15BB 00 00 00 00 
2201   15BF 00 00 00 00 
2201   15C3 00 00 00 00 
2201   15C7 00 00 00 00 
2201   15CB 00 00 00 00 
2201   15CF 00 00 00 00 
2201   15D3 00 00 00 00 
2201   15D7 00 00 00 00 
2201   15DB 00 00 00 00 
2201   15DF 00 00 00 00 
2201   15E3 00 00 00 00 
2201   15E7 00 00 00 00 
2201   15EB 00 00 00 00 
2201   15EF 00 00 00 00 
2201   15F3 00 00 00 00 
2201   15F7 00 00 00 00 
2201   15FB 00 00 00 00 
2201   15FF 00 00 00 00 
2201   1603 00 00 00 00 
2201   1607 00 00 00 00 
2201   160B 00 00 00 00 
2201   160F 00 00 00 00 
2201   1613 00 00 00 00 
2201   1617 00 00 00 00 
2201   161B 00 00 00 00 
2201   161F 00 00 00 00 
2201   1623 00 00 00 00 
2201   1627 00 00 00 00 
2201   162B 00 00 00 00 
2201   162F 00 00 00 00 
2201   1633 00 00 00 00 
2201   1637 00 00 00 00 
2201   163B 00 00 00 00 
2201   163F 00 00 00 00 
2201   1643 00 00 00 00 
2201   1647 00 00 00 00 
2201   164B 00 00 00 00 
2201   164F 00 00 00 00 
2201   1653 00 00 00 00 
2201   1657 00 00 00 00 
2201   165B 00 00 00 00 
2201   165F 00 00 00 00 
2201   1663 00 00 00 00 
2201   1667 00 00 00 00 
2201   166B 00 00 00 00 
2201   166F 00 00 00 00 
2201   1673 00 00 00 00 
2201   1677 00 00 00 00 
2201   167B 00 00 00 00 
2201   167F 00 00 00 00 
2201   1683 00 00 00 00 
2201   1687 00 00 00 00 
2201   168B 00 00 00 00 
2201   168F 00 00 00 00 
2201   1693 00 00 00 00 
2201   1697 00 00 00 00 
2201   169B 00 00 00 00 
2201   169F 00 00 00 00 
2201   16A3 00 00 00 00 
2201   16A7 00 00 00 00 
2201   16AB 00 00 00 00 
2201   16AF 00 00 00 00 
2201   16B3 00 00 00 00 
2201   16B7 00 00 00 00 
2201   16BB 00 00 00 00 
2201   16BF 00 00 00 00 
2201   16C3 00 00 00 00 
2201   16C7 00 00 00 00 
2201   16CB 00 00 00 00 
2201   16CF 00 00 00 00 
2201   16D3 00 00 00 00 
2201   16D7 00 00 00 00 
2201   16DB 00 00 00 00 
2201   16DF 00 00 00 00 
2201   16E3 00 00 00 00 
2201   16E7 00 00 00 00 
2201   16EB 00 00 00 00 
2201   16EF 00 00 00 00 
2201   16F3 00 00 00 00 
2201   16F7 00 00 00 00 
2201   16FB 00 00 00 00 
2201   16FF 00 00 00 00 
2201   1703 00 00 00 00 
2201   1707 00 00 00 00 
2201   170B 00 00 00 00 
2201   170F 00 00 00 00 
2201   1713 00 00 00 00 
2201   1717 00 00 00 00 
2201   171B 00 00 00 00 
2201   171F 00 00 00 00 
2201   1723 00 00 00 00 
2201   1727 00 00 00 00 
2201   172B 00 00 00 00 
2201   172F 00 00 00 00 
2201   1733 00 00 00 00 
2201   1737 00 00 00 00 
2201   173B 00 00 00 00 
2201   173F 00 00 00 00 
2201   1743 00 00 00 00 
2201   1747 00 00 00 00 
2201   174B 00 00 00 00 
2201   174F 00 00 00 00 
2201   1753 00 00 00 00 
2201   1757 00 00 00 00 
2201   175B 00 00 00 00 
2201   175F 00 00 00 00 
2201   1763 00 00 00 00 
2201   1767 00 00 00 00 
2201   176B 00 00 00 00 
2201   176F 00 00 00 00 
2201   1773 00 00 00 00 
2201   1777 00 00 00 00 
2201   177B 00 00 00 00 
2201   177F 00 00 00 00 
2201   1783 00 00 00 00 
2201   1787 00 00 00 00 
2201   178B 00 00 00 00 
2201   178F 00 00 00 00 
2201   1793 00 00 00 00 
2201   1797 00 00 00 00 
2201   179B 00 00 00 00 
2201   179F 00 00 00 00 
2201   17A3 00 00 00 00 
2201   17A7 00 00 00 00 
2201   17AB 00 00 00 00 
2201   17AF 00 00 00 00 
2201   17B3 00 00 00 00 
2201   17B7 00 00 00 00 
2201   17BB 00 00 00 00 
2201   17BF 00 00 00 00 
2201   17C3 00 00 00 00 
2201   17C7 00 00 00 00 
2201   17CB 00 00 00 00 
2201   17CF 00 00 00 00 
2201   17D3 00 00 00 00 
2201   17D7 00 00 00 00 
2201   17DB 00 00 00 00 
2201   17DF 00 00 00 00 
2201   17E3 00 00 00 00 
2201   17E7 00 00 00 00 
2201   17EB 00 00 00 00 
2201   17EF 00 00 00 00 
2201   17F3 00 00 00 00 
2201   17F7 00 00 00 00 
2201   17FB 00 00 00 00 
2201   17FF 00 00 00 00 
2201   1803 00 00 00 00 
2201   1807 00 00 00 00 
2201   180B 00 00 00 00 
2201   180F 00 00 00 00 
2201   1813 00 00 00 00 
2201   1817 00 00 00 00 
2201   181B 00 00 00 00 
2201   181F 00 00 00 00 
2201   1823 00 00 00 00 
2201   1827 00 00 00 00 
2201   182B 00 00 00 00 
2201   182F 00 00 00 00 
2201   1833 00 00 00 00 
2201   1837 00 00 00 00 
2201   183B 00 00 00 00 
2201   183F 00 00 00 00 
2201   1843 00 00 00 00 
2201   1847 00 00 00 00 
2201   184B 00 00 00 00 
2201   184F 00 00 00 00 
2201   1853 00 00 00 00 
2201   1857 00 00 00 00 
2201   185B 00 00 00 00 
2201   185F 00 00 00 00 
2201   1863 00 00 00 00 
2201   1867 00 00 00 00 
2201   186B 00 00 00 00 
2201   186F 00 00 00 00 
2201   1873 00 00 00 00 
2201   1877 00 00 00 00 
2201   187B 00 00 00 00 
2201   187F 00 00 00 00 
2201   1883 00 00 00 00 
2201   1887 00 00 00 00 
2201   188B 00 00 00 00 
2201   188F 00 00 00 00 
2201   1893 00 00 00 00 
2201   1897 00 00 00 00 
2201   189B 00 00 00 00 
2201   189F 00 00 00 00 
2201   18A3 00 00 00 00 
2201   18A7 00 00 00 00 
2201   18AB 00 00 00 00 
2201   18AF 00 00 00 00 
2201   18B3 00 00 00 00 
2201   18B7 00 00 00 00 
2201   18BB 00 00 00 00 
2201   18BF 00 00 00 00 
2201   18C3 00 00 00 00 
2201   18C7 00 00 00 00 
2201   18CB 00 00 00 00 
2201   18CF 00 00 00 00 
2201   18D3 00 00 00 00 
2201   18D7 00 00 00 00 
2201   18DB 00 00 00 00 
2201   18DF 00 00 00 00 
2201   18E3 00 00 00 00 
2201   18E7 00 00 00 00 
2201   18EB 00 00 00 00 
2201   18EF 00 00 00 00 
2201   18F3 00 00 00 00 
2201   18F7 00 00 00 00 
2201   18FB 00 00 00 00 
2201   18FF 00 00 00 00 
2201   1903 00 00 00 00 
2201   1907 00 00 00 00 
2201   190B 00 00 00 00 
2201   190F 00 00 00 00 
2201   1913 00 00 00 00 
2201   1917 00 00 00 00 
2201   191B 00 00 00 00 
2201   191F 00 00 00 00 
2201   1923 00 00 00 00 
2201   1927 00 00 00 00 
2201   192B 00 00 00 00 
2201   192F 00 00 00 00 
2201   1933 00 00 00 00 
2201   1937 00 00 00 00 
2201   193B 00 00 00 00 
2201   193F 00 00 00 00 
2201   1943 00 00 00 00 
2201   1947 00 00 00 00 
2201   194B 00 00 00 00 
2201   194F 00 00 00 00 
2201   1953 00 00 00 00 
2201   1957 00 00 00 00 
2201   195B 00 00 00 00 
2201   195F 00 00 00 00 
2201   1963 00 00 00 00 
2201   1967 00 00 00 00 
2201   196B 00 00 00 00 
2201   196F 00 00 00 00 
2201   1973 00 00 00 00 
2201   1977 00 00 00 00 
2201   197B 00 00 00 00 
2201   197F 00 00 00 00 
2201   1983 00 00 00 00 
2201   1987 00 00 00 00 
2201   198B 00 00 00 00 
2201   198F 00 00 00 00 
2201   1993 00 00 00 00 
2201   1997 00 00 00 00 
2201   199B 00 00 00 00 
2201   199F 00 00 00 00 
2201   19A3 00 00 00 00 
2201   19A7 00 00 00 00 
2201   19AB 00 00 00 00 
2201   19AF 00 00 00 00 
2201   19B3 00 00 00 00 
2201   19B7 00 00 00 00 
2201   19BB 00 00 00 00 
2201   19BF 00 00 00 00 
2201   19C3 00 00 00 00 
2201   19C7 00 00 00 00 
2201   19CB 00 00 00 00 
2201   19CF 00 00 00 00 
2201   19D3 00 00 00 00 
2201   19D7 00 00 00 00 
2201   19DB 00 00 00 00 
2201   19DF 00 00 00 00 
2201   19E3 00 00 00 00 
2201   19E7 00 00 00 00 
2201   19EB 00 00 00 00 
2201   19EF 00 00 00 00 
2201   19F3 00 00 00 00 
2201   19F7 00 00 00 00 
2201   19FB 00 00 00 00 
2201   19FF 00 00 00 00 
2201   1A03 00 00 00 00 
2201   1A07 00 00 00 00 
2201   1A0B 00 00 00 00 
2201   1A0F 00 00 00 00 
2201   1A13 00 00 00 00 
2201   1A17 00 00 00 00 
2201   1A1B 00 00 00 00 
2201   1A1F 00 00 00 00 
2201   1A23 00 00 00 00 
2201   1A27 00 00 00 00 
2201   1A2B 00 00 00 00 
2201   1A2F 00 00 00 00 
2201   1A33 00 00 00 00 
2201   1A37 00 00 00 00 
2201   1A3B 00 00 00 00 
2201   1A3F 00 00 00 00 
2201   1A43 00 00 00 00 
2201   1A47 00 00 00 00 
2201   1A4B 00 00 00 00 
2201   1A4F 00 00 00 00 
2201   1A53 00 00 00 00 
2201   1A57 00 00 00 00 
2201   1A5B 00 00 00 00 
2201   1A5F 00 00 00 00 
2201   1A63 00 00 00 00 
2201   1A67 00 00 00 00 
2201   1A6B 00 00 00 00 
2201   1A6F 00 00 00 00 
2201   1A73 00 00 00 00 
2201   1A77 00 00 00 00 
2201   1A7B 00 00 00 00 
2201   1A7F 00 00 00 00 
2201   1A83 00 00 00 00 
2201   1A87 00 00 00 00 
2201   1A8B 00 00 00 00 
2201   1A8F 00 00 00 00 
2201   1A93 00 00 00 00 
2201   1A97 00 00 00 00 
2201   1A9B 00 00 00 00 
2201   1A9F 00 00 00 00 
2201   1AA3 00 00 00 00 
2201   1AA7 00 00 00 00 
2201   1AAB 00 00 00 00 
2201   1AAF 00 00 00 00 
2201   1AB3 00 00 00 00 
2201   1AB7 00 00 00 00 
2201   1ABB 00 00 00 00 
2201   1ABF 00 00 00 00 
2201   1AC3 00 00 00 00 
2201   1AC7 00 00 00 00 
2201   1ACB 00 00 00 00 
2201   1ACF 00 00 00 00 
2201   1AD3 00 00 00 00 
2201   1AD7 00 00 00 00 
2201   1ADB 00 00 00 00 
2201   1ADF 00 00 00 00 
2201   1AE3 00 00 00 00 
2201   1AE7 00 00 00 00 
2201   1AEB 00 00 00 00 
2201   1AEF 00 00 00 00 
2201   1AF3 00 00 00 00 
2201   1AF7 00 00 00 00 
2201   1AFB 00 00 00 00 
2201   1AFF 00 00 00 00 
2201   1B03 00 00 00 00 
2201   1B07 00 00 00 00 
2201   1B0B 00 00 00 00 
2201   1B0F 00 00 00 00 
2201   1B13 00 00 00 00 
2201   1B17 00 00 00 00 
2201   1B1B 00 00 00 00 
2201   1B1F 00 00 00 00 
2201   1B23 00 00 00 00 
2201   1B27 00 00 00 00 
2201   1B2B 00 00 00 00 
2201   1B2F 00 00 00 00 
2201   1B33 00 00 00 00 
2201   1B37 00 00 00 00 
2201   1B3B 00 00 00 00 
2201   1B3F 00 00 00 00 
2201   1B43 00 00 00 00 
2201   1B47 00 00 00 00 
2201   1B4B 00 00 00 00 
2201   1B4F 00 00 00 00 
2201   1B53 00 00 00 00 
2201   1B57 00 00 00 00 
2201   1B5B 00 00 00 00 
2201   1B5F 00 00 00 00 
2201   1B63 00 00 00 00 
2201   1B67 00 00 00 00 
2201   1B6B 00 00 00 00 
2201   1B6F 00 00 00 00 
2201   1B73 00 00 00 00 
2201   1B77 00 00 00 00 
2201   1B7B 00 00 00 00 
2201   1B7F 00 00 00 00 
2201   1B83 00 00 00 00 
2201   1B87 00 00 00 00 
2201   1B8B 00 00 00 00 
2201   1B8F 00 00 00 00 
2201   1B93 00 00 00 00 
2201   1B97 00 00 00 00 
2201   1B9B 00 00 00 00 
2201   1B9F 00 00 00 00 
2201   1BA3 00 00 00 00 
2201   1BA7 00 00 00 00 
2201   1BAB 00 00 00 00 
2201   1BAF 00 00 00 00 
2201   1BB3 00 00 00 00 
2201   1BB7 00 00 00 00 
2201   1BBB 00 00 00 00 
2201   1BBF 00 00 00 00 
2201   1BC3 00 00 00 00 
2201   1BC7 00 00 00 00 
2201   1BCB 00 00 00 00 
2201   1BCF 00 00 00 00 
2201   1BD3 00 00 00 00 
2201   1BD7 00 00 00 00 
2201   1BDB 00 00 00 00 
2201   1BDF 00 00 00 00 
2201   1BE3 00 00 00 00 
2201   1BE7 00 00 00 00 
2201   1BEB 00 00 00 00 
2201   1BEF 00 00 00 00 
2201   1BF3 00 00 00 00 
2201   1BF7 00 00 00 00 
2201   1BFB 00 00 00 00 
2201   1BFF 00 00 00 00 
2201   1C03 00 00 00 00 
2201   1C07 00 00 00 00 
2201   1C0B 00 00 00 00 
2201   1C0F 00 00 00 00 
2201   1C13 00 00 00 00 
2201   1C17 00 00 00 00 
2201   1C1B 00 00 00 00 
2201   1C1F 00 00 00 00 
2201   1C23 00 00 00 00 
2201   1C27 00 00 00 00 
2201   1C2B 00 00 00 00 
2201   1C2F 00 00 00 00 
2201   1C33 00 00 00 00 
2201   1C37 00 00 00 00 
2201   1C3B 00 00 00 00 
2201   1C3F 00 00 00 00 
2201   1C43 00 00 00 00 
2201   1C47 00 00 00 00 
2201   1C4B 00 00 00 00 
2201   1C4F 00 00 00 00 
2201   1C53 00 00 00 00 
2201   1C57 00 00 00 00 
2201   1C5B 00 00 00 00 
2201   1C5F 00 00 00 00 
2201   1C63 00 00 00 00 
2201   1C67 00 00 00 00 
2201   1C6B 00 00 00 00 
2201   1C6F 00 00 00 00 
2201   1C73 00 00 00 00 
2201   1C77 00 00 00 00 
2201   1C7B 00 00 00 00 
2201   1C7F 00 00 00 00 
2201   1C83 00 00 00 00 
2201   1C87 00 00 00 00 
2201   1C8B 00 00 00 00 
2201   1C8F 00 00 00 00 
2201   1C93 00 00 00 00 
2201   1C97 00 00 00 00 
2201   1C9B 00 00 00 00 
2201   1C9F 00 00 00 00 
2201   1CA3 00 00 00 00 
2201   1CA7 00 00 00 00 
2201   1CAB 00 00 00 00 
2201   1CAF 00 00 00 00 
2201   1CB3 00 00 00 00 
2201   1CB7 00 00 00 00 
2201   1CBB 00 00 00 00 
2201   1CBF 00 00 00 00 
2201   1CC3 00 00 00 00 
2201   1CC7 00 00 00 00 
2201   1CCB 00 00 00 00 
2201   1CCF 00 00 00 00 
2201   1CD3 00 00 00 00 
2201   1CD7 00 00 00 00 
2201   1CDB 00 00 00 00 
2201   1CDF 00 00 00 00 
2201   1CE3 00 00 00 00 
2201   1CE7 00 00 00 00 
2201   1CEB 00 00 00 00 
2201   1CEF 00 00 00 00 
2201   1CF3 00 00 00 00 
2201   1CF7 00 00 00 00 
2201   1CFB 00 00 00 00 
2201   1CFF 00 00 00 00 
2201   1D03 00 00 00 00 
2201   1D07 00 00 00 00 
2201   1D0B 00 00 00 00 
2201   1D0F 00 00 00 00 
2201   1D13 00 00 00 00 
2201   1D17 00 00 00 00 
2201   1D1B 00 00 00 00 
2201   1D1F 00 00 00 00 
2201   1D23 00 00 00 00 
2201   1D27 00 00 00 00 
2201   1D2B 00 00 00 00 
2201   1D2F 00 00 00 00 
2201   1D33 00 00 00 00 
2201   1D37 00 00 00 00 
2201   1D3B 00 00 00 00 
2201   1D3F 00 00 00 00 
2201   1D43 00 00 00 00 
2201   1D47 00 00 00 00 
2201   1D4B 00 00 00 00 
2201   1D4F 00 00 00 00 
2201   1D53 00 00 00 00 
2201   1D57 00 00 00 00 
2201   1D5B 00 00 00 00 
2201   1D5F 00 00 00 00 
2201   1D63 00 00 00 00 
2201   1D67 00 00 00 00 
2201   1D6B 00 00 00 00 
2201   1D6F 00 00 00 00 
2201   1D73 00 00 00 00 
2201   1D77 00 00 00 00 
2201   1D7B 00 00 00 00 
2201   1D7F 00 00 00 00 
2201   1D83 00 00 00 00 
2201   1D87 00 00 00 00 
2201   1D8B 00 00 00 00 
2201   1D8F 00 00 00 00 
2201   1D93 00 00 00 00 
2201   1D97 00 00 00 00 
2201   1D9B 00 00 00 00 
2201   1D9F 00 00 00 00 
2201   1DA3 00 00 00 00 
2201   1DA7 00 00 00 00 
2201   1DAB 00 00 00 00 
2201   1DAF 00 00 00 00 
2201   1DB3 00 00 00 00 
2201   1DB7 00 00 00 00 
2201   1DBB 00 00 00 00 
2201   1DBF 00 00 00 00 
2201   1DC3 00 00 00 00 
2201   1DC7 00 00 00 00 
2201   1DCB 00 00 00 00 
2201   1DCF 00 00 00 00 
2201   1DD3 00 00 00 00 
2201   1DD7 00 00 00 00 
2201   1DDB 00 00 00 00 
2201   1DDF 00 00 00 00 
2201   1DE3 00 00 00 00 
2201   1DE7 00 00 00 00 
2201   1DEB 00 00 00 00 
2201   1DEF 00 00 00 00 
2201   1DF3 00 00 00 00 
2201   1DF7 00 00 00 00 
2201   1DFB 00 00 00 00 
2201   1DFF 00 00 00 00 
2201   1E03 00 00 00 00 
2201   1E07 00 00 00 00 
2201   1E0B 00 00 00 00 
2201   1E0F 00 00 00 00 
2201   1E13 00 00 00 00 
2201   1E17 00 00 00 00 
2201   1E1B 00 00 00 00 
2201   1E1F 00 00 00 00 
2201   1E23 00 00 00 00 
2201   1E27 00 00 00 00 
2201   1E2B 00 00 00 00 
2201   1E2F 00 00 00 00 
2201   1E33 00 00 00 00 
2201   1E37 00 00 00 00 
2201   1E3B 00 00 00 00 
2201   1E3F 00 00 00 00 
2201   1E43 00 00 00 00 
2201   1E47 00 00 00 00 
2201   1E4B 00 00 00 00 
2201   1E4F 00 00 00 00 
2201   1E53 00 00 00 00 
2201   1E57 00 00 00 00 
2201   1E5B 00 00 00 00 
2201   1E5F 00 00 00 00 
2201   1E63 00 00 00 00 
2201   1E67 00 00 00 00 
2201   1E6B 00 00 00 00 
2201   1E6F 00 00 00 00 
2201   1E73 00 00 00 00 
2201   1E77 00 00 00 00 
2201   1E7B 00 00 00 00 
2201   1E7F 00 00 00 00 
2201   1E83 00 00 00 00 
2201   1E87 00 00 00 00 
2201   1E8B 00 00 00 00 
2201   1E8F 00 00 00 00 
2201   1E93 00 00 00 00 
2201   1E97 00 00 00 00 
2201   1E9B 00 00 00 00 
2201   1E9F 00 00 00 00 
2201   1EA3 00 00 00 00 
2201   1EA7 00 00 00 00 
2201   1EAB 00 00 00 00 
2201   1EAF 00 00 00 00 
2201   1EB3 00 00 00 00 
2201   1EB7 00 00 00 00 
2201   1EBB 00 00 00 00 
2201   1EBF 00 00 00 00 
2201   1EC3 00 00 00 00 
2201   1EC7 00 00 00 00 
2201   1ECB 00 00 00 00 
2201   1ECF 00 00 00 00 
2201   1ED3 00 00 00 00 
2201   1ED7 00 00 00 00 
2201   1EDB 00 00 00 00 
2201   1EDF 00 00 00 00 
2201   1EE3 00 00 00 00 
2201   1EE7 00 00 00 00 
2201   1EEB 00 00 00 00 
2201   1EEF 00 00 00 00 
2201   1EF3 00 00 00 00 
2201   1EF7 00 00 00 00 
2201   1EFB 00 00 00 00 
2201   1EFF 00 00 00 00 
2201   1F03 00 00 00 00 
2201   1F07 00 00 00 00 
2201   1F0B 00 00 00 00 
2201   1F0F 00 00 00 00 
2201   1F13 00 00 00 00 
2201   1F17 00 00 00 00 
2201   1F1B 00 00 00 00 
2201   1F1F 00 00 00 00 
2201   1F23 00 00 00 00 
2201   1F27 00 00 00 00 
2201   1F2B 00 00 00 00 
2201   1F2F 00 00 00 00 
2201   1F33 00 00 00 00 
2201   1F37 00 00 00 00 
2201   1F3B 00 00 00 00 
2201   1F3F 00 00 00 00 
2201   1F43 00 00 00 00 
2201   1F47 00 00 00 00 
2201   1F4B 00 00 00 00 
2201   1F4F 00 00 00 00 
2201   1F53 00 00 00 00 
2201   1F57 00 00 00 00 
2201   1F5B 00 00 00 00 
2201   1F5F 00 00 00 00 
2201   1F63 00 00 00 00 
2201   1F67 00 00 00 00 
2201   1F6B 00 00 00 00 
2201   1F6F 00 00 00 00 
2201   1F73 00 00 00 00 
2201   1F77 00 00 00 00 
2201   1F7B 00 00 00 00 
2201   1F7F 00 00 00 00 
2201   1F83 00 00 00 00 
2201   1F87 00 00 00 00 
2201   1F8B 00 00 00 00 
2201   1F8F 00 00 00 00 
2201   1F93 00 00 00 00 
2201   1F97 00 00 00 00 
2201   1F9B 00 00 00 00 
2201   1F9F 00 00 00 00 
2201   1FA3 00 00 00 00 
2201   1FA7 00 00 00 00 
2201   1FAB 00 00 00 00 
2201   1FAF 00 00 00 00 
2201   1FB3 00 00 00 00 
2201   1FB7 00 00 00 00 
2201   1FBB 00 00 00 00 
2201   1FBF 00 00 00 00 
2201   1FC3 00 00 00 00 
2201   1FC7 00 00 00 00 
2201   1FCB 00 00 00 00 
2201   1FCF 00 00 00 00 
2201   1FD3 00 00 00 00 
2201   1FD7 00 00 00 00 
2201   1FDB 00 00 00 00 
2201   1FDF 00 00 00 00 
2201   1FE3 00 00 00 00 
2201   1FE7 00 00 00 00 
2201   1FEB 00 00 00 00 
2201   1FEF 00 00 00 00 
2201   1FF3 00 00 00 00 
2201   1FF7 00 00 00 00 
2201   1FFB 00 00 00 00 
2201   1FFF 00 00 00 00 
2201   2003 00 00 00 00 
2201   2007 00 00 00 00 
2201   200B 00 00 00 00 
2201   200F 00 00 00 00 
2201   2013 00 00 00 00 
2201   2017 00 00 00 00 
2201   201B 00 00 00 00 
2201   201F 00 00 00 00 
2201   2023 00 00 00 00 
2201   2027 00 00 00 00 
2201   202B 00 00 00 00 
2201   202F 00 00 00 00 
2201   2033 00 00 00 00 
2201   2037 00 00 00 00 
2201   203B 00 00 00 00 
2201   203F 00 00 00 00 
2201   2043 00 00 00 00 
2201   2047 00 00 00 00 
2201   204B 00 00 00 00 
2201   204F 00 00 00 00 
2201   2053 00 00 00 00 
2201   2057 00 00 00 00 
2201   205B 00 00 00 00 
2201   205F 00 00 00 00 
2201   2063 00 00 00 00 
2201   2067 00 00 00 00 
2201   206B 00 00 00 00 
2201   206F 00 00 00 00 
2201   2073 00 00 00 00 
2201   2077 00 00 00 00 
2201   207B 00 00 00 00 
2201   207F 00 00 00 00 
2201   2083 00 00 00 00 
2201   2087 00 00 00 00 
2201   208B 00 00 00 00 
2201   208F 00 00 00 00 
2201   2093 00 00 00 00 
2201   2097 00 00 00 00 
2201   209B 00 00 00 00 
2201   209F 00 00 00 00 
2201   20A3 00 00 00 00 
2201   20A7 00 00 00 00 
2201   20AB 00 00 00 00 
2201   20AF 00 00 00 00 
2201   20B3 00 00 00 00 
2201   20B7 00 00 00 00 
2201   20BB 00 00 00 00 
2201   20BF 00 00 00 00 
2201   20C3 00 00 00 00 
2201   20C7 00 00 00 00 
2201   20CB 00 00 00 00 
2201   20CF 00 00 00 00 
2201   20D3 00 00 00 00 
2201   20D7 00 00 00 00 
2201   20DB 00 00 00 00 
2201   20DF 00 00 00 00 
2201   20E3 00 00 00 00 
2201   20E7 00 00 00 00 
2201   20EB 00 00 00 00 
2201   20EF 00 00 00 00 
2201   20F3 00 00 00 00 
2201   20F7 00 00 00 00 
2201   20FB 00 00 00 00 
2201   20FF 00 00 00 00 
2201   2103 00 00 00 00 
2201   2107 00 00 00 00 
2201   210B 00 00 00 00 
2201   210F 00 00 00 00 
2201   2113 00 00 00 00 
2201   2117 00 00 00 00 
2201   211B 00 00 00 00 
2201   211F 00 00 00 00 
2201   2123 00 00 00 00 
2201   2127 00 00 00 00 
2201   212B 00 00 00 00 
2201   212F 00 00 00 00 
2201   2133 00 00 00 00 
2201   2137 00 00 00 00 
2201   213B 00 00 00 00 
2201   213F 00 00 00 00 
2201   2143 00 00 00 00 
2201   2147 00 00 00 00 
2201   214B 00 00 00 00 
2201   214F 00 00 00 00 
2201   2153 00 00 00 00 
2201   2157 00 00 00 00 
2201   215B 00 00 00 00 
2201   215F 00 00 00 00 
2201   2163 00 00 00 00 
2201   2167 00 00 00 00 
2201   216B 00 00 00 00 
2201   216F 00 00 00 00 
2201   2173 00 00 00 00 
2201   2177 00 00 00 00 
2201   217B 00 00 00 00 
2201   217F 00 00 00 00 
2201   2183 00 00 00 00 
2201   2187 00 00 00 00 
2201   218B 00 00 00 00 
2201   218F 00 00 00 00 
2201   2193 00 00 00 00 
2201   2197 00 00 00 00 
2201   219B 00 00 00 00 
2201   219F 00 00 00 00 
2201   21A3 00 00 00 00 
2201   21A7 00 00 00 00 
2201   21AB 00 00 00 00 
2201   21AF 00 00 00 00 
2201   21B3 00 00 00 00 
2201   21B7 00 00 00 00 
2201   21BB 00 00 00 00 
2201   21BF 00 00 00 00 
2201   21C3 00 00 00 00 
2201   21C7 00 00 00 00 
2201   21CB 00 00 00 00 
2201   21CF 00 00 00 00 
2201   21D3 00 00 00 00 
2201   21D7 00 00 00 00 
2201   21DB 00 00 00 00 
2201   21DF 00 00 00 00 
2201   21E3 00 00 00 00 
2201   21E7 00 00 00 00 
2201   21EB 00 00 00 00 
2201   21EF 00 00 00 00 
2201   21F3 00 00 00 00 
2201   21F7 00 00 00 00 
2201   21FB 00 00 00 00 
2201   21FF 00 00 00 00 
2201   2203 00 00 00 00 
2201   2207 00 00 00 00 
2201   220B 00 00 00 00 
2201   220F 00 00 00 00 
2201   2213 00 00 00 00 
2201   2217 00 00 00 00 
2201   221B 00 00 00 00 
2201   221F 00 00 00 00 
2201   2223 00 00 00 00 
2201   2227 00 00 00 00 
2201   222B 00 00 00 00 
2201   222F 00 00 00 00 
2201   2233 00 00 00 00 
2201   2237 00 00 00 00 
2201   223B 00 00 00 00 
2201   223F 00 00 00 00 
2201   2243 00 00 00 00 
2201   2247 00 00 00 00 
2201   224B 00 00 00 00 
2201   224F 00 00 00 00 
2201   2253 00 00 00 00 
2201   2257 00 00 00 00 
2201   225B 00 00 00 00 
2201   225F 00 00 00 00 
2201   2263 00 00 00 00 
2201   2267 00 00 00 00 
2201   226B 00 00 00 00 
2201   226F 00 00 00 00 
2201   2273 00 00 00 00 
2201   2277 00 00 00 00 
2201   227B 00 00 00 00 
2201   227F 00 00 00 00 
2201   2283 00 00 00 00 
2201   2287 00 00 00 00 
2201   228B 00 00 00 00 
2201   228F 00 00 00 00 
2201   2293 00 00 00 00 
2201   2297 00 00 00 00 
2201   229B 00 00 00 00 
2201   229F 00 00 00 00 
2201   22A3 00 00 00 00 
2201   22A7 00 00 00 00 
2201   22AB 00 00 00 00 
2201   22AF 00 00 00 00 
2201   22B3 00 00 00 00 
2201   22B7 00 00 00 00 
2201   22BB 00 00 00 00 
2201   22BF 00 00 00 00 
2201   22C3 00 00 00 00 
2201   22C7 00 00 00 00 
2201   22CB 00 00 00 00 
2201   22CF 00 00 00 00 
2201   22D3 00 00 00 00 
2201   22D7 00 00 00 00 
2201   22DB 00 00 00 00 
2201   22DF 00 00 00 00 
2201   22E3 00 00 00 00 
2201   22E7 00 00 00 00 
2201   22EB 00 00 00 00 
2201   22EF 00 00 00 00 
2201   22F3 00 00 00 00 
2201   22F7 00 00 00 00 
2201   22FB 00 00 00 00 
2201   22FF 00 00 00 00 
2201   2303 00 00 00 00 
2201   2307 00 00 00 00 
2201   230B 00 00 00 00 
2201   230F 00 00 00 00 
2201   2313 00 00 00 00 
2201   2317 00 00 00 00 
2201   231B 00 00 00 00 
2201   231F 00 00 00 00 
2201   2323 00 00 00 00 
2201   2327 00 00 00 00 
2201   232B 00 00 00 00 
2201   232F 00 00 00 00 
2201   2333 00 00 00 00 
2201   2337 00 00 00 00 
2201   233B 00 00 00 00 
2201   233F 00 00 00 00 
2201   2343 00 00 00 00 
2201   2347 00 00 00 00 
2201   234B 00 00 00 00 
2201   234F 00 00 00 00 
2201   2353 00 00 00 00 
2201   2357 00 00 00 00 
2201   235B 00 00 00 00 
2201   235F 00 00 00 00 
2201   2363 00 00 00 00 
2201   2367 00 00 00 00 
2201   236B 00 00 00 00 
2201   236F 00 00 00 00 
2201   2373 00 00 00 00 
2201   2377 00 00 00 00 
2201   237B 00 00 00 00 
2201   237F 00 00 00 00 
2201   2383 00 00 00 00 
2201   2387 00 00 00 00 
2201   238B 00 00 00 00 
2201   238F 00 00 00 00 
2201   2393 00 00 00 00 
2201   2397 00 00 00 00 
2201   239B 00 00 00 00 
2201   239F 00 00 00 00 
2201   23A3 00 00 00 00 
2201   23A7 00 00 00 00 
2201   23AB 00 00 00 00 
2201   23AF 00 00 00 00 
2201   23B3 00 00 00 00 
2201   23B7 00 00 00 00 
2201   23BB 00 00 00 00 
2201   23BF 00 00 00 00 
2201   23C3 00 00 00 00 
2201   23C7 00 00 00 00 
2201   23CB 00 00 00 00 
2201   23CF 00 00 00 00 
2201   23D3 00 00 00 00 
2201   23D7 00 00 00 00 
2201   23DB 00 00 00 00 
2201   23DF 00 00 00 00 
2201   23E3 00 00 00 00 
2201   23E7 00 00 00 00 
2201   23EB 00 00 00 00 
2201   23EF 00 00 00 00 
2201   23F3 00 00 00 00 
2201   23F7 00 00 00 00 
2201   23FB 00 00 00 00 
2201   23FF 00 00 00 00 
2201   2403 00 00 00 00 
2201   2407 00 00 00 00 
2201   240B 00 00 00 00 
2201   240F 00 00 00 00 
2201   2413 00 00 00 00 
2201   2417 00 00 00 00 
2201   241B 00 00 00 00 
2201   241F 00 00 00 00 
2201   2423 00 00 00 00 
2201   2427 00 00 00 00 
2201   242B 00 00 00 00 
2201   242F 00 00 00 00 
2201   2433 00 00 00 00 
2201   2437 00 00 00 00 
2201   243B 00 00 00 00 
2201   243F 00 00 00 00 
2201   2443 00 00 00 00 
2201   2447 00 00 00 00 
2201   244B 00 00 00 00 
2201   244F 00 00 00 00 
2201   2453 00 00 00 00 
2201   2457 00 00 00 00 
2201   245B 00 00 00 00 
2201   245F 00 00 00 00 
2201   2463 00 00 00 00 
2201   2467 00 00 00 00 
2202   246B 0A 64 3A 20 _s0: .db "\nd: display map\nq: quit\nenter choice: ", 0
2202   246F 64 69 73 70 
2202   2473 6C 61 79 20 
2202   2477 6D 61 70 0A 
2202   247B 71 3A 20 71 
2202   247F 75 69 74 0A 
2202   2483 65 6E 74 65 
2202   2487 72 20 63 68 
2202   248B 6F 69 63 65 
2202   248F 3A 20 00 
2203   2492 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
2203   2496 70 65 63 74 
2203   249A 65 64 20 66 
2203   249E 6F 72 6D 61 
2203   24A2 74 20 69 6E 
2203   24A6 20 70 72 69 
2203   24AA 6E 74 66 2E 
2203   24AE 00 
2204   24AF 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
2204   24B3 72 3A 20 55 
2204   24B7 6E 6B 6E 6F 
2204   24BB 77 6E 20 61 
2204   24BF 72 67 75 6D 
2204   24C3 65 6E 74 20 
2204   24C7 74 79 70 65 
2204   24CB 2E 0A 00 
2205   24CE             
2206   24CE D0 24       _heap_top: .dw _heap
2207   24D0 00          _heap: .db 0
2208   24D1             ; --- END DATA SEGMENT
2209   24D1             
2210   24D1             .end
tasm: Number of errors = 0
