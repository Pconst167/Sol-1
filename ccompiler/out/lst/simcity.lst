0001   0000             ; --- FILENAME: programs/simcity.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char c; 
0011   0408 52 01 00      sub sp, 1
0012   040B             ; initialize_terrain(); 
0013   040B             ; --- START FUNCTION CALL
0014   040B 07 CD 05      call initialize_terrain
0015   040E             ; for(;;){ 
0016   040E             _for1_init:
0017   040E             _for1_cond:
0018   040E             _for1_block:
0019   040E             ; printf("\nd: display map\nq: quit\nenter choice: "); 
0020   040E             ; --- START FUNCTION CALL
0021   040E 26 80 2C      mov b, _s0 ; "\nd: display map\nq: quit\nenter choice: "
0022   0411 FD AB         swp b
0023   0413 D8            push b
0024   0414 07 39 07      call printf
0025   0417 51 02 00      add sp, 2
0026   041A             ; --- END FUNCTION CALL
0027   041A             ; c = getchar(); 
0028   041A FA 00 00      lea d, [bp + 0] ; $c
0029   041D DA            push d
0030   041E             ; --- START FUNCTION CALL
0031   041E 07 46 10      call getchar
0032   0421 E7            pop d
0033   0422 FD 3E         mov [d], bl
0034   0424             ; if(c == 'd'){ 
0035   0424             _if2_cond:
0036   0424 FA 00 00      lea d, [bp + 0] ; $c
0037   0427 32            mov bl, [d]
0038   0428 A7 00         mov bh, 0
0039   042A 38 00 00      mov c, 0
0040   042D             ; --- START RELATIONAL
0041   042D D7            push a
0042   042E 11            mov a, b
0043   042F FD 2E 64 00   mov32 cb, $00000064
0043   0433 00 00 
0044   0435 B0            cmp a, b
0045   0436 FD 71         seq ; ==
0046   0438 E4            pop a
0047   0439             ; --- END RELATIONAL
0048   0439 C0 00 00      cmp b, 0
0049   043C C6 45 04      je _if2_else
0050   043F             _if2_TRUE:
0051   043F             ; display_map(); 
0052   043F             ; --- START FUNCTION CALL
0053   043F 07 6B 04      call display_map
0054   0442 0A 66 04      jmp _if2_exit
0055   0445             _if2_else:
0056   0445             ; if(c == 'q'){ 
0057   0445             _if3_cond:
0058   0445 FA 00 00      lea d, [bp + 0] ; $c
0059   0448 32            mov bl, [d]
0060   0449 A7 00         mov bh, 0
0061   044B 38 00 00      mov c, 0
0062   044E             ; --- START RELATIONAL
0063   044E D7            push a
0064   044F 11            mov a, b
0065   0450 FD 2E 71 00   mov32 cb, $00000071
0065   0454 00 00 
0066   0456 B0            cmp a, b
0067   0457 FD 71         seq ; ==
0068   0459 E4            pop a
0069   045A             ; --- END RELATIONAL
0070   045A C0 00 00      cmp b, 0
0071   045D C6 66 04      je _if3_exit
0072   0460             _if3_TRUE:
0073   0460             ; return; 
0074   0460 F9            leave
0075   0461 05 0B         syscall sys_terminate_proc
0076   0463 0A 66 04      jmp _if3_exit
0077   0466             _if3_exit:
0078   0466             _if2_exit:
0079   0466             _for1_update:
0080   0466 0A 0E 04      jmp _for1_cond
0081   0469             _for1_exit:
0082   0469 05 0B         syscall sys_terminate_proc
0083   046B             
0084   046B             display_map:
0085   046B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0086   046E             ; int rows, cols; 
0087   046E 52 02 00      sub sp, 2
0088   0471 52 02 00      sub sp, 2
0089   0474             ; for(rows = 0; rows <  30        ; rows++){ 
0090   0474             _for4_init:
0091   0474 FA FF FF      lea d, [bp + -1] ; $rows
0092   0477 DA            push d
0093   0478 FD 2E 00 00   mov32 cb, $00000000
0093   047C 00 00 
0094   047E E7            pop d
0095   047F FD 43         mov [d], b
0096   0481             _for4_cond:
0097   0481 FA FF FF      lea d, [bp + -1] ; $rows
0098   0484 2A            mov b, [d]
0099   0485 38 00 00      mov c, 0
0100   0488             ; --- START RELATIONAL
0101   0488 D7            push a
0102   0489 11            mov a, b
0103   048A FD 2E 1E 00   mov32 cb, $0000001e
0103   048E 00 00 
0104   0490 B0            cmp a, b
0105   0491 FD 73         slt ; < (signed)
0106   0493 E4            pop a
0107   0494             ; --- END RELATIONAL
0108   0494 C0 00 00      cmp b, 0
0109   0497 C6 CB 05      je _for4_exit
0110   049A             _for4_block:
0111   049A             ; for(cols = 0; cols <   40        ; cols++){ 
0112   049A             _for5_init:
0113   049A FA FD FF      lea d, [bp + -3] ; $cols
0114   049D DA            push d
0115   049E FD 2E 00 00   mov32 cb, $00000000
0115   04A2 00 00 
0116   04A4 E7            pop d
0117   04A5 FD 43         mov [d], b
0118   04A7             _for5_cond:
0119   04A7 FA FD FF      lea d, [bp + -3] ; $cols
0120   04AA 2A            mov b, [d]
0121   04AB 38 00 00      mov c, 0
0122   04AE             ; --- START RELATIONAL
0123   04AE D7            push a
0124   04AF 11            mov a, b
0125   04B0 FD 2E 28 00   mov32 cb, $00000028
0125   04B4 00 00 
0126   04B6 B0            cmp a, b
0127   04B7 FD 73         slt ; < (signed)
0128   04B9 E4            pop a
0129   04BA             ; --- END RELATIONAL
0130   04BA C0 00 00      cmp b, 0
0131   04BD C6 AB 05      je _for5_exit
0132   04C0             _for5_block:
0133   04C0             ; if(map[rows][cols].tile_type == land){ 
0134   04C0             _if6_cond:
0135   04C0 3B 60 10      mov d, _map_data ; $map
0136   04C3 D7            push a
0137   04C4 DA            push d
0138   04C5 FA FF FF      lea d, [bp + -1] ; $rows
0139   04C8 2A            mov b, [d]
0140   04C9 38 00 00      mov c, 0
0141   04CC E7            pop d
0142   04CD FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0143   04D1 DA            push d
0144   04D2 FA FD FF      lea d, [bp + -3] ; $cols
0145   04D5 2A            mov b, [d]
0146   04D6 38 00 00      mov c, 0
0147   04D9 E7            pop d
0148   04DA FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0149   04DE E4            pop a
0150   04DF 58 00 00      add d, 0
0151   04E2 2A            mov b, [d]
0152   04E3 38 00 00      mov c, 0
0153   04E6             ; --- START RELATIONAL
0154   04E6 D7            push a
0155   04E7 11            mov a, b
0156   04E8 FD 2E 00 00   mov32 cb, $0 ; enum element: land
0156   04EC 00 00 
0157   04EE B0            cmp a, b
0158   04EF FD 71         seq ; ==
0159   04F1 E4            pop a
0160   04F2             ; --- END RELATIONAL
0161   04F2 C0 00 00      cmp b, 0
0162   04F5 C6 08 05      je _if6_else
0163   04F8             _if6_TRUE:
0164   04F8             ; putchar('.'); 
0165   04F8             ; --- START FUNCTION CALL
0166   04F8 FD 2E 2E 00   mov32 cb, $0000002e
0166   04FC 00 00 
0167   04FE DD            push bl
0168   04FF 07 BB 0B      call putchar
0169   0502 51 01 00      add sp, 1
0170   0505             ; --- END FUNCTION CALL
0171   0505 0A 98 05      jmp _if6_exit
0172   0508             _if6_else:
0173   0508             ; if(map[rows][cols].tile_type == water){ 
0174   0508             _if7_cond:
0175   0508 3B 60 10      mov d, _map_data ; $map
0176   050B D7            push a
0177   050C DA            push d
0178   050D FA FF FF      lea d, [bp + -1] ; $rows
0179   0510 2A            mov b, [d]
0180   0511 38 00 00      mov c, 0
0181   0514 E7            pop d
0182   0515 FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0183   0519 DA            push d
0184   051A FA FD FF      lea d, [bp + -3] ; $cols
0185   051D 2A            mov b, [d]
0186   051E 38 00 00      mov c, 0
0187   0521 E7            pop d
0188   0522 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0189   0526 E4            pop a
0190   0527 58 00 00      add d, 0
0191   052A 2A            mov b, [d]
0192   052B 38 00 00      mov c, 0
0193   052E             ; --- START RELATIONAL
0194   052E D7            push a
0195   052F 11            mov a, b
0196   0530 FD 2E 01 00   mov32 cb, $1 ; enum element: water
0196   0534 00 00 
0197   0536 B0            cmp a, b
0198   0537 FD 71         seq ; ==
0199   0539 E4            pop a
0200   053A             ; --- END RELATIONAL
0201   053A C0 00 00      cmp b, 0
0202   053D C6 50 05      je _if7_else
0203   0540             _if7_TRUE:
0204   0540             ; putchar('~'); 
0205   0540             ; --- START FUNCTION CALL
0206   0540 FD 2E 7E 00   mov32 cb, $0000007e
0206   0544 00 00 
0207   0546 DD            push bl
0208   0547 07 BB 0B      call putchar
0209   054A 51 01 00      add sp, 1
0210   054D             ; --- END FUNCTION CALL
0211   054D 0A 98 05      jmp _if7_exit
0212   0550             _if7_else:
0213   0550             ; if(map[rows][cols].structure_type == road){ 
0214   0550             _if8_cond:
0215   0550 3B 60 10      mov d, _map_data ; $map
0216   0553 D7            push a
0217   0554 DA            push d
0218   0555 FA FF FF      lea d, [bp + -1] ; $rows
0219   0558 2A            mov b, [d]
0220   0559 38 00 00      mov c, 0
0221   055C E7            pop d
0222   055D FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0223   0561 DA            push d
0224   0562 FA FD FF      lea d, [bp + -3] ; $cols
0225   0565 2A            mov b, [d]
0226   0566 38 00 00      mov c, 0
0227   0569 E7            pop d
0228   056A FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0229   056E E4            pop a
0230   056F 58 04 00      add d, 4
0231   0572 2A            mov b, [d]
0232   0573 38 00 00      mov c, 0
0233   0576             ; --- START RELATIONAL
0234   0576 D7            push a
0235   0577 11            mov a, b
0236   0578 FD 2E 00 00   mov32 cb, $0 ; enum element: road
0236   057C 00 00 
0237   057E B0            cmp a, b
0238   057F FD 71         seq ; ==
0239   0581 E4            pop a
0240   0582             ; --- END RELATIONAL
0241   0582 C0 00 00      cmp b, 0
0242   0585 C6 98 05      je _if8_exit
0243   0588             _if8_TRUE:
0244   0588             ; putchar('='); 
0245   0588             ; --- START FUNCTION CALL
0246   0588 FD 2E 3D 00   mov32 cb, $0000003d
0246   058C 00 00 
0247   058E DD            push bl
0248   058F 07 BB 0B      call putchar
0249   0592 51 01 00      add sp, 1
0250   0595             ; --- END FUNCTION CALL
0251   0595 0A 98 05      jmp _if8_exit
0252   0598             _if8_exit:
0253   0598             _if7_exit:
0254   0598             _if6_exit:
0255   0598             _for5_update:
0256   0598 FA FD FF      lea d, [bp + -3] ; $cols
0257   059B 2A            mov b, [d]
0258   059C 38 00 00      mov c, 0
0259   059F 11            mov a, b
0260   05A0 FD 77         inc b
0261   05A2 FA FD FF      lea d, [bp + -3] ; $cols
0262   05A5 FD 43         mov [d], b
0263   05A7 27            mov b, a
0264   05A8 0A A7 04      jmp _for5_cond
0265   05AB             _for5_exit:
0266   05AB             ; putchar('\n'); 
0267   05AB             ; --- START FUNCTION CALL
0268   05AB FD 2E 0A 00   mov32 cb, $0000000a
0268   05AF 00 00 
0269   05B1 DD            push bl
0270   05B2 07 BB 0B      call putchar
0271   05B5 51 01 00      add sp, 1
0272   05B8             ; --- END FUNCTION CALL
0273   05B8             _for4_update:
0274   05B8 FA FF FF      lea d, [bp + -1] ; $rows
0275   05BB 2A            mov b, [d]
0276   05BC 38 00 00      mov c, 0
0277   05BF 11            mov a, b
0278   05C0 FD 77         inc b
0279   05C2 FA FF FF      lea d, [bp + -1] ; $rows
0280   05C5 FD 43         mov [d], b
0281   05C7 27            mov b, a
0282   05C8 0A 81 04      jmp _for4_cond
0283   05CB             _for4_exit:
0284   05CB F9            leave
0285   05CC 09            ret
0286   05CD             
0287   05CD             initialize_terrain:
0288   05CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0289   05D0             ; int i, j; 
0290   05D0 52 02 00      sub sp, 2
0291   05D3 52 02 00      sub sp, 2
0292   05D6             ; for(i = 0; i <  30        ; i++){ 
0293   05D6             _for9_init:
0294   05D6 FA FF FF      lea d, [bp + -1] ; $i
0295   05D9 DA            push d
0296   05DA FD 2E 00 00   mov32 cb, $00000000
0296   05DE 00 00 
0297   05E0 E7            pop d
0298   05E1 FD 43         mov [d], b
0299   05E3             _for9_cond:
0300   05E3 FA FF FF      lea d, [bp + -1] ; $i
0301   05E6 2A            mov b, [d]
0302   05E7 38 00 00      mov c, 0
0303   05EA             ; --- START RELATIONAL
0304   05EA D7            push a
0305   05EB 11            mov a, b
0306   05EC FD 2E 1E 00   mov32 cb, $0000001e
0306   05F0 00 00 
0307   05F2 B0            cmp a, b
0308   05F3 FD 73         slt ; < (signed)
0309   05F5 E4            pop a
0310   05F6             ; --- END RELATIONAL
0311   05F6 C0 00 00      cmp b, 0
0312   05F9 C6 37 07      je _for9_exit
0313   05FC             _for9_block:
0314   05FC             ; for(j = 0; j <   40        ; j++){ 
0315   05FC             _for10_init:
0316   05FC FA FD FF      lea d, [bp + -3] ; $j
0317   05FF DA            push d
0318   0600 FD 2E 00 00   mov32 cb, $00000000
0318   0604 00 00 
0319   0606 E7            pop d
0320   0607 FD 43         mov [d], b
0321   0609             _for10_cond:
0322   0609 FA FD FF      lea d, [bp + -3] ; $j
0323   060C 2A            mov b, [d]
0324   060D 38 00 00      mov c, 0
0325   0610             ; --- START RELATIONAL
0326   0610 D7            push a
0327   0611 11            mov a, b
0328   0612 FD 2E 28 00   mov32 cb, $00000028
0328   0616 00 00 
0329   0618 B0            cmp a, b
0330   0619 FD 73         slt ; < (signed)
0331   061B E4            pop a
0332   061C             ; --- END RELATIONAL
0333   061C C0 00 00      cmp b, 0
0334   061F C6 24 07      je _for10_exit
0335   0622             _for10_block:
0336   0622             ; map[i][j].structure_type = -1; 
0337   0622 3B 60 10      mov d, _map_data ; $map
0338   0625 D7            push a
0339   0626 DA            push d
0340   0627 FA FF FF      lea d, [bp + -1] ; $i
0341   062A 2A            mov b, [d]
0342   062B 38 00 00      mov c, 0
0343   062E E7            pop d
0344   062F FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0345   0633 DA            push d
0346   0634 FA FD FF      lea d, [bp + -3] ; $j
0347   0637 2A            mov b, [d]
0348   0638 38 00 00      mov c, 0
0349   063B E7            pop d
0350   063C FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0351   0640 E4            pop a
0352   0641 58 04 00      add d, 4
0353   0644 DA            push d
0354   0645 FD 2E FF FF   mov32 cb, $ffffffff
0354   0649 FF FF 
0355   064B E7            pop d
0356   064C FD 43         mov [d], b
0357   064E             ; map[i][j].zone_type = unzoned; 
0358   064E 3B 60 10      mov d, _map_data ; $map
0359   0651 D7            push a
0360   0652 DA            push d
0361   0653 FA FF FF      lea d, [bp + -1] ; $i
0362   0656 2A            mov b, [d]
0363   0657 38 00 00      mov c, 0
0364   065A E7            pop d
0365   065B FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0366   065F DA            push d
0367   0660 FA FD FF      lea d, [bp + -3] ; $j
0368   0663 2A            mov b, [d]
0369   0664 38 00 00      mov c, 0
0370   0667 E7            pop d
0371   0668 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0372   066C E4            pop a
0373   066D 58 02 00      add d, 2
0374   0670 DA            push d
0375   0671 FD 2E 00 00   mov32 cb, $0 ; enum element: unzoned
0375   0675 00 00 
0376   0677 E7            pop d
0377   0678 FD 43         mov [d], b
0378   067A             ; if((i + j) % 5 == 0) 
0379   067A             _if11_cond:
0380   067A FA FF FF      lea d, [bp + -1] ; $i
0381   067D 2A            mov b, [d]
0382   067E 38 00 00      mov c, 0
0383   0681             ; --- START TERMS
0384   0681 D7            push a
0385   0682 11            mov a, b
0386   0683 FA FD FF      lea d, [bp + -3] ; $j
0387   0686 2A            mov b, [d]
0388   0687 38 00 00      mov c, 0
0389   068A 56            add b, a
0390   068B E4            pop a
0391   068C             ; --- END TERMS
0392   068C             ; --- START FACTORS
0393   068C D7            push a
0394   068D FD D8         push g
0395   068F 11            mov a, b
0396   0690 FD 7A         mov g, c
0397   0692 FD 2E 05 00   mov32 cb, $00000005
0397   0696 00 00 
0398   0698 FD D8         push g ; save 'g' as the div instruction uses it
0399   069A AE            div a, b ; %, a: quotient, b: remainder
0400   069B 11            mov a, b
0401   069C FD F1         pop g
0402   069E FD 38         mov c, g
0403   06A0 27            mov b, a
0404   06A1 FD F1         pop g
0405   06A3 E4            pop a
0406   06A4             ; --- END FACTORS
0407   06A4             ; --- START RELATIONAL
0408   06A4 D7            push a
0409   06A5 11            mov a, b
0410   06A6 FD 2E 00 00   mov32 cb, $00000000
0410   06AA 00 00 
0411   06AC B0            cmp a, b
0412   06AD FD 71         seq ; ==
0413   06AF E4            pop a
0414   06B0             ; --- END RELATIONAL
0415   06B0 C0 00 00      cmp b, 0
0416   06B3 C6 E5 06      je _if11_else
0417   06B6             _if11_TRUE:
0418   06B6             ; map[i][j].tile_type = water; 
0419   06B6 3B 60 10      mov d, _map_data ; $map
0420   06B9 D7            push a
0421   06BA DA            push d
0422   06BB FA FF FF      lea d, [bp + -1] ; $i
0423   06BE 2A            mov b, [d]
0424   06BF 38 00 00      mov c, 0
0425   06C2 E7            pop d
0426   06C3 FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0427   06C7 DA            push d
0428   06C8 FA FD FF      lea d, [bp + -3] ; $j
0429   06CB 2A            mov b, [d]
0430   06CC 38 00 00      mov c, 0
0431   06CF E7            pop d
0432   06D0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0433   06D4 E4            pop a
0434   06D5 58 00 00      add d, 0
0435   06D8 DA            push d
0436   06D9 FD 2E 01 00   mov32 cb, $1 ; enum element: water
0436   06DD 00 00 
0437   06DF E7            pop d
0438   06E0 FD 43         mov [d], b
0439   06E2 0A 11 07      jmp _if11_exit
0440   06E5             _if11_else:
0441   06E5             ; map[i][j].tile_type = land; 
0442   06E5 3B 60 10      mov d, _map_data ; $map
0443   06E8 D7            push a
0444   06E9 DA            push d
0445   06EA FA FF FF      lea d, [bp + -1] ; $i
0446   06ED 2A            mov b, [d]
0447   06EE 38 00 00      mov c, 0
0448   06F1 E7            pop d
0449   06F2 FD 13 F0 00   mma 240 ; mov a, 240; mul a, b; add d, b
0450   06F6 DA            push d
0451   06F7 FA FD FF      lea d, [bp + -3] ; $j
0452   06FA 2A            mov b, [d]
0453   06FB 38 00 00      mov c, 0
0454   06FE E7            pop d
0455   06FF FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0456   0703 E4            pop a
0457   0704 58 00 00      add d, 0
0458   0707 DA            push d
0459   0708 FD 2E 00 00   mov32 cb, $0 ; enum element: land
0459   070C 00 00 
0460   070E E7            pop d
0461   070F FD 43         mov [d], b
0462   0711             _if11_exit:
0463   0711             _for10_update:
0464   0711 FA FD FF      lea d, [bp + -3] ; $j
0465   0714 2A            mov b, [d]
0466   0715 38 00 00      mov c, 0
0467   0718 11            mov a, b
0468   0719 FD 77         inc b
0469   071B FA FD FF      lea d, [bp + -3] ; $j
0470   071E FD 43         mov [d], b
0471   0720 27            mov b, a
0472   0721 0A 09 06      jmp _for10_cond
0473   0724             _for10_exit:
0474   0724             _for9_update:
0475   0724 FA FF FF      lea d, [bp + -1] ; $i
0476   0727 2A            mov b, [d]
0477   0728 38 00 00      mov c, 0
0478   072B 11            mov a, b
0479   072C FD 77         inc b
0480   072E FA FF FF      lea d, [bp + -1] ; $i
0481   0731 FD 43         mov [d], b
0482   0733 27            mov b, a
0483   0734 0A E3 05      jmp _for9_cond
0484   0737             _for9_exit:
0485   0737 F9            leave
0486   0738 09            ret
0487   0739             
0488   0739             printf:
0489   0739 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0490   073C             ; char *p, *format_p; 
0491   073C 52 02 00      sub sp, 2
0492   073F 52 02 00      sub sp, 2
0493   0742             ; format_p = format; 
0494   0742 FA FD FF      lea d, [bp + -3] ; $format_p
0495   0745 DA            push d
0496   0746 FA 05 00      lea d, [bp + 5] ; $format
0497   0749 2A            mov b, [d]
0498   074A 38 00 00      mov c, 0
0499   074D E7            pop d
0500   074E FD 43         mov [d], b
0501   0750             ; p = &format + 2; 
0502   0750 FA FF FF      lea d, [bp + -1] ; $p
0503   0753 DA            push d
0504   0754 FA 05 00      lea d, [bp + 5] ; $format
0505   0757 2D            mov b, d
0506   0758             ; --- START TERMS
0507   0758 D7            push a
0508   0759 11            mov a, b
0509   075A FD 2E 02 00   mov32 cb, $00000002
0509   075E 00 00 
0510   0760 56            add b, a
0511   0761 E4            pop a
0512   0762             ; --- END TERMS
0513   0762 E7            pop d
0514   0763 FD 43         mov [d], b
0515   0765             ; for(;;){ 
0516   0765             _for14_init:
0517   0765             _for14_cond:
0518   0765             _for14_block:
0519   0765             ; if(!*format_p) break; 
0520   0765             _if15_cond:
0521   0765 FA FD FF      lea d, [bp + -3] ; $format_p
0522   0768 2A            mov b, [d]
0523   0769 38 00 00      mov c, 0
0524   076C 74            mov d, b
0525   076D 32            mov bl, [d]
0526   076E A7 00         mov bh, 0
0527   0770 38 00 00      mov c, 0
0528   0773 C0 00 00      cmp b, 0
0529   0776 FD 71         seq ; !
0530   0778 C0 00 00      cmp b, 0
0531   077B C6 84 07      je _if15_else
0532   077E             _if15_TRUE:
0533   077E             ; break; 
0534   077E 0A 34 0A      jmp _for14_exit ; for break
0535   0781 0A 31 0A      jmp _if15_exit
0536   0784             _if15_else:
0537   0784             ; if(*format_p == '%'){ 
0538   0784             _if16_cond:
0539   0784 FA FD FF      lea d, [bp + -3] ; $format_p
0540   0787 2A            mov b, [d]
0541   0788 38 00 00      mov c, 0
0542   078B 74            mov d, b
0543   078C 32            mov bl, [d]
0544   078D A7 00         mov bh, 0
0545   078F 38 00 00      mov c, 0
0546   0792             ; --- START RELATIONAL
0547   0792 D7            push a
0548   0793 11            mov a, b
0549   0794 FD 2E 25 00   mov32 cb, $00000025
0549   0798 00 00 
0550   079A B0            cmp a, b
0551   079B FD 71         seq ; ==
0552   079D E4            pop a
0553   079E             ; --- END RELATIONAL
0554   079E C0 00 00      cmp b, 0
0555   07A1 C6 0C 0A      je _if16_else
0556   07A4             _if16_TRUE:
0557   07A4             ; format_p++; 
0558   07A4 FA FD FF      lea d, [bp + -3] ; $format_p
0559   07A7 2A            mov b, [d]
0560   07A8 38 00 00      mov c, 0
0561   07AB FD 77         inc b
0562   07AD FA FD FF      lea d, [bp + -3] ; $format_p
0563   07B0 FD 43         mov [d], b
0564   07B2 FD 7D         dec b
0565   07B4             ; switch(*format_p){ 
0566   07B4             _switch17_expr:
0567   07B4 FA FD FF      lea d, [bp + -3] ; $format_p
0568   07B7 2A            mov b, [d]
0569   07B8 38 00 00      mov c, 0
0570   07BB 74            mov d, b
0571   07BC 32            mov bl, [d]
0572   07BD A7 00         mov bh, 0
0573   07BF 38 00 00      mov c, 0
0574   07C2             _switch17_comparisons:
0575   07C2 C1 6C         cmp bl, $6c
0576   07C4 C6 F0 07      je _switch17_case0
0577   07C7 C1 4C         cmp bl, $4c
0578   07C9 C6 F0 07      je _switch17_case1
0579   07CC C1 64         cmp bl, $64
0580   07CE C6 00 09      je _switch17_case2
0581   07D1 C1 69         cmp bl, $69
0582   07D3 C6 00 09      je _switch17_case3
0583   07D6 C1 75         cmp bl, $75
0584   07D8 C6 30 09      je _switch17_case4
0585   07DB C1 78         cmp bl, $78
0586   07DD C6 60 09      je _switch17_case5
0587   07E0 C1 63         cmp bl, $63
0588   07E2 C6 90 09      je _switch17_case6
0589   07E5 C1 73         cmp bl, $73
0590   07E7 C6 C0 09      je _switch17_case7
0591   07EA 0A ED 09      jmp _switch17_default
0592   07ED 0A F9 09      jmp _switch17_exit
0593   07F0             _switch17_case0:
0594   07F0             _switch17_case1:
0595   07F0             ; format_p++; 
0596   07F0 FA FD FF      lea d, [bp + -3] ; $format_p
0597   07F3 2A            mov b, [d]
0598   07F4 38 00 00      mov c, 0
0599   07F7 FD 77         inc b
0600   07F9 FA FD FF      lea d, [bp + -3] ; $format_p
0601   07FC FD 43         mov [d], b
0602   07FE FD 7D         dec b
0603   0800             ; if(*format_p == 'd' || *format_p == 'i') 
0604   0800             _if18_cond:
0605   0800 FA FD FF      lea d, [bp + -3] ; $format_p
0606   0803 2A            mov b, [d]
0607   0804 38 00 00      mov c, 0
0608   0807 74            mov d, b
0609   0808 32            mov bl, [d]
0610   0809 A7 00         mov bh, 0
0611   080B 38 00 00      mov c, 0
0612   080E             ; --- START RELATIONAL
0613   080E D7            push a
0614   080F 11            mov a, b
0615   0810 FD 2E 64 00   mov32 cb, $00000064
0615   0814 00 00 
0616   0816 B0            cmp a, b
0617   0817 FD 71         seq ; ==
0618   0819 E4            pop a
0619   081A             ; --- END RELATIONAL
0620   081A             ; --- START LOGICAL OR
0621   081A D7            push a
0622   081B 11            mov a, b
0623   081C FA FD FF      lea d, [bp + -3] ; $format_p
0624   081F 2A            mov b, [d]
0625   0820 38 00 00      mov c, 0
0626   0823 74            mov d, b
0627   0824 32            mov bl, [d]
0628   0825 A7 00         mov bh, 0
0629   0827 38 00 00      mov c, 0
0630   082A             ; --- START RELATIONAL
0631   082A D7            push a
0632   082B 11            mov a, b
0633   082C FD 2E 69 00   mov32 cb, $00000069
0633   0830 00 00 
0634   0832 B0            cmp a, b
0635   0833 FD 71         seq ; ==
0636   0835 E4            pop a
0637   0836             ; --- END RELATIONAL
0638   0836 FD A8         sor a, b ; ||
0639   0838 E4            pop a
0640   0839             ; --- END LOGICAL OR
0641   0839 C0 00 00      cmp b, 0
0642   083C C6 5D 08      je _if18_else
0643   083F             _if18_TRUE:
0644   083F             ; print_signed_long(*(long *)p); 
0645   083F             ; --- START FUNCTION CALL
0646   083F FA FF FF      lea d, [bp + -1] ; $p
0647   0842 2A            mov b, [d]
0648   0843 38 00 00      mov c, 0
0649   0846 74            mov d, b
0650   0847 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0651   084A FD 39         mov c, b ; And place it into C
0652   084C 2A            mov b, [d] ; Lower Word in B
0653   084D 12            mov a, c
0654   084E FD AA         swp a
0655   0850 D7            push a
0656   0851 FD AB         swp b
0657   0853 D8            push b
0658   0854 07 36 0A      call print_signed_long
0659   0857 51 04 00      add sp, 4
0660   085A             ; --- END FUNCTION CALL
0661   085A 0A E5 08      jmp _if18_exit
0662   085D             _if18_else:
0663   085D             ; if(*format_p == 'u') 
0664   085D             _if19_cond:
0665   085D FA FD FF      lea d, [bp + -3] ; $format_p
0666   0860 2A            mov b, [d]
0667   0861 38 00 00      mov c, 0
0668   0864 74            mov d, b
0669   0865 32            mov bl, [d]
0670   0866 A7 00         mov bh, 0
0671   0868 38 00 00      mov c, 0
0672   086B             ; --- START RELATIONAL
0673   086B D7            push a
0674   086C 11            mov a, b
0675   086D FD 2E 75 00   mov32 cb, $00000075
0675   0871 00 00 
0676   0873 B0            cmp a, b
0677   0874 FD 71         seq ; ==
0678   0876 E4            pop a
0679   0877             ; --- END RELATIONAL
0680   0877 C0 00 00      cmp b, 0
0681   087A C6 9B 08      je _if19_else
0682   087D             _if19_TRUE:
0683   087D             ; print_unsigned_long(*(unsigned long *)p); 
0684   087D             ; --- START FUNCTION CALL
0685   087D FA FF FF      lea d, [bp + -1] ; $p
0686   0880 2A            mov b, [d]
0687   0881 38 00 00      mov c, 0
0688   0884 74            mov d, b
0689   0885 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0690   0888 FD 39         mov c, b ; And place it into C
0691   088A 2A            mov b, [d] ; Lower Word in B
0692   088B 12            mov a, c
0693   088C FD AA         swp a
0694   088E D7            push a
0695   088F FD AB         swp b
0696   0891 D8            push b
0697   0892 07 C9 0B      call print_unsigned_long
0698   0895 51 04 00      add sp, 4
0699   0898             ; --- END FUNCTION CALL
0700   0898 0A E5 08      jmp _if19_exit
0701   089B             _if19_else:
0702   089B             ; if(*format_p == 'x') 
0703   089B             _if20_cond:
0704   089B FA FD FF      lea d, [bp + -3] ; $format_p
0705   089E 2A            mov b, [d]
0706   089F 38 00 00      mov c, 0
0707   08A2 74            mov d, b
0708   08A3 32            mov bl, [d]
0709   08A4 A7 00         mov bh, 0
0710   08A6 38 00 00      mov c, 0
0711   08A9             ; --- START RELATIONAL
0712   08A9 D7            push a
0713   08AA 11            mov a, b
0714   08AB FD 2E 78 00   mov32 cb, $00000078
0714   08AF 00 00 
0715   08B1 B0            cmp a, b
0716   08B2 FD 71         seq ; ==
0717   08B4 E4            pop a
0718   08B5             ; --- END RELATIONAL
0719   08B5 C0 00 00      cmp b, 0
0720   08B8 C6 D9 08      je _if20_else
0721   08BB             _if20_TRUE:
0722   08BB             ; printx32(*(long int *)p); 
0723   08BB             ; --- START FUNCTION CALL
0724   08BB FA FF FF      lea d, [bp + -1] ; $p
0725   08BE 2A            mov b, [d]
0726   08BF 38 00 00      mov c, 0
0727   08C2 74            mov d, b
0728   08C3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0729   08C6 FD 39         mov c, b ; And place it into C
0730   08C8 2A            mov b, [d] ; Lower Word in B
0731   08C9 12            mov a, c
0732   08CA FD AA         swp a
0733   08CC D7            push a
0734   08CD FD AB         swp b
0735   08CF D8            push b
0736   08D0 07 FD 0C      call printx32
0737   08D3 51 04 00      add sp, 4
0738   08D6             ; --- END FUNCTION CALL
0739   08D6 0A E5 08      jmp _if20_exit
0740   08D9             _if20_else:
0741   08D9             ; err("Unexpected format in printf."); 
0742   08D9             ; --- START FUNCTION CALL
0743   08D9 26 A7 2C      mov b, _s1 ; "Unexpected format in printf."
0744   08DC FD AB         swp b
0745   08DE D8            push b
0746   08DF 07 5D 0D      call err
0747   08E2 51 02 00      add sp, 2
0748   08E5             ; --- END FUNCTION CALL
0749   08E5             _if20_exit:
0750   08E5             _if19_exit:
0751   08E5             _if18_exit:
0752   08E5             ; p = p + 4; 
0753   08E5 FA FF FF      lea d, [bp + -1] ; $p
0754   08E8 DA            push d
0755   08E9 FA FF FF      lea d, [bp + -1] ; $p
0756   08EC 2A            mov b, [d]
0757   08ED 38 00 00      mov c, 0
0758   08F0             ; --- START TERMS
0759   08F0 D7            push a
0760   08F1 11            mov a, b
0761   08F2 FD 2E 04 00   mov32 cb, $00000004
0761   08F6 00 00 
0762   08F8 56            add b, a
0763   08F9 E4            pop a
0764   08FA             ; --- END TERMS
0765   08FA E7            pop d
0766   08FB FD 43         mov [d], b
0767   08FD             ; break; 
0768   08FD 0A F9 09      jmp _switch17_exit ; case break
0769   0900             _switch17_case2:
0770   0900             _switch17_case3:
0771   0900             ; print_signed(*(int*)p); 
0772   0900             ; --- START FUNCTION CALL
0773   0900 FA FF FF      lea d, [bp + -1] ; $p
0774   0903 2A            mov b, [d]
0775   0904 38 00 00      mov c, 0
0776   0907 74            mov d, b
0777   0908 2A            mov b, [d]
0778   0909 38 00 00      mov c, 0
0779   090C FD AB         swp b
0780   090E D8            push b
0781   090F 07 8B 0D      call print_signed
0782   0912 51 02 00      add sp, 2
0783   0915             ; --- END FUNCTION CALL
0784   0915             ; p = p + 2; 
0785   0915 FA FF FF      lea d, [bp + -1] ; $p
0786   0918 DA            push d
0787   0919 FA FF FF      lea d, [bp + -1] ; $p
0788   091C 2A            mov b, [d]
0789   091D 38 00 00      mov c, 0
0790   0920             ; --- START TERMS
0791   0920 D7            push a
0792   0921 11            mov a, b
0793   0922 FD 2E 02 00   mov32 cb, $00000002
0793   0926 00 00 
0794   0928 56            add b, a
0795   0929 E4            pop a
0796   092A             ; --- END TERMS
0797   092A E7            pop d
0798   092B FD 43         mov [d], b
0799   092D             ; break; 
0800   092D 0A F9 09      jmp _switch17_exit ; case break
0801   0930             _switch17_case4:
0802   0930             ; print_unsigned(*(unsigned int*)p); 
0803   0930             ; --- START FUNCTION CALL
0804   0930 FA FF FF      lea d, [bp + -1] ; $p
0805   0933 2A            mov b, [d]
0806   0934 38 00 00      mov c, 0
0807   0937 74            mov d, b
0808   0938 2A            mov b, [d]
0809   0939 38 00 00      mov c, 0
0810   093C FD AB         swp b
0811   093E D8            push b
0812   093F 07 DC 0E      call print_unsigned
0813   0942 51 02 00      add sp, 2
0814   0945             ; --- END FUNCTION CALL
0815   0945             ; p = p + 2; 
0816   0945 FA FF FF      lea d, [bp + -1] ; $p
0817   0948 DA            push d
0818   0949 FA FF FF      lea d, [bp + -1] ; $p
0819   094C 2A            mov b, [d]
0820   094D 38 00 00      mov c, 0
0821   0950             ; --- START TERMS
0822   0950 D7            push a
0823   0951 11            mov a, b
0824   0952 FD 2E 02 00   mov32 cb, $00000002
0824   0956 00 00 
0825   0958 56            add b, a
0826   0959 E4            pop a
0827   095A             ; --- END TERMS
0828   095A E7            pop d
0829   095B FD 43         mov [d], b
0830   095D             ; break; 
0831   095D 0A F9 09      jmp _switch17_exit ; case break
0832   0960             _switch17_case5:
0833   0960             ; printx16(*(int*)p); 
0834   0960             ; --- START FUNCTION CALL
0835   0960 FA FF FF      lea d, [bp + -1] ; $p
0836   0963 2A            mov b, [d]
0837   0964 38 00 00      mov c, 0
0838   0967 74            mov d, b
0839   0968 2A            mov b, [d]
0840   0969 38 00 00      mov c, 0
0841   096C FD AB         swp b
0842   096E D8            push b
0843   096F 07 F4 0F      call printx16
0844   0972 51 02 00      add sp, 2
0845   0975             ; --- END FUNCTION CALL
0846   0975             ; p = p + 2; 
0847   0975 FA FF FF      lea d, [bp + -1] ; $p
0848   0978 DA            push d
0849   0979 FA FF FF      lea d, [bp + -1] ; $p
0850   097C 2A            mov b, [d]
0851   097D 38 00 00      mov c, 0
0852   0980             ; --- START TERMS
0853   0980 D7            push a
0854   0981 11            mov a, b
0855   0982 FD 2E 02 00   mov32 cb, $00000002
0855   0986 00 00 
0856   0988 56            add b, a
0857   0989 E4            pop a
0858   098A             ; --- END TERMS
0859   098A E7            pop d
0860   098B FD 43         mov [d], b
0861   098D             ; break; 
0862   098D 0A F9 09      jmp _switch17_exit ; case break
0863   0990             _switch17_case6:
0864   0990             ; putchar(*(char*)p); 
0865   0990             ; --- START FUNCTION CALL
0866   0990 FA FF FF      lea d, [bp + -1] ; $p
0867   0993 2A            mov b, [d]
0868   0994 38 00 00      mov c, 0
0869   0997 74            mov d, b
0870   0998 32            mov bl, [d]
0871   0999 A7 00         mov bh, 0
0872   099B 38 00 00      mov c, 0
0873   099E DD            push bl
0874   099F 07 BB 0B      call putchar
0875   09A2 51 01 00      add sp, 1
0876   09A5             ; --- END FUNCTION CALL
0877   09A5             ; p = p + 1; 
0878   09A5 FA FF FF      lea d, [bp + -1] ; $p
0879   09A8 DA            push d
0880   09A9 FA FF FF      lea d, [bp + -1] ; $p
0881   09AC 2A            mov b, [d]
0882   09AD 38 00 00      mov c, 0
0883   09B0             ; --- START TERMS
0884   09B0 D7            push a
0885   09B1 11            mov a, b
0886   09B2 FD 2E 01 00   mov32 cb, $00000001
0886   09B6 00 00 
0887   09B8 56            add b, a
0888   09B9 E4            pop a
0889   09BA             ; --- END TERMS
0890   09BA E7            pop d
0891   09BB FD 43         mov [d], b
0892   09BD             ; break; 
0893   09BD 0A F9 09      jmp _switch17_exit ; case break
0894   09C0             _switch17_case7:
0895   09C0             ; print(*(char**)p); 
0896   09C0             ; --- START FUNCTION CALL
0897   09C0 FA FF FF      lea d, [bp + -1] ; $p
0898   09C3 2A            mov b, [d]
0899   09C4 38 00 00      mov c, 0
0900   09C7 74            mov d, b
0901   09C8 2A            mov b, [d]
0902   09C9 FD AB         swp b
0903   09CB D8            push b
0904   09CC 07 72 0D      call print
0905   09CF 51 02 00      add sp, 2
0906   09D2             ; --- END FUNCTION CALL
0907   09D2             ; p = p + 2; 
0908   09D2 FA FF FF      lea d, [bp + -1] ; $p
0909   09D5 DA            push d
0910   09D6 FA FF FF      lea d, [bp + -1] ; $p
0911   09D9 2A            mov b, [d]
0912   09DA 38 00 00      mov c, 0
0913   09DD             ; --- START TERMS
0914   09DD D7            push a
0915   09DE 11            mov a, b
0916   09DF FD 2E 02 00   mov32 cb, $00000002
0916   09E3 00 00 
0917   09E5 56            add b, a
0918   09E6 E4            pop a
0919   09E7             ; --- END TERMS
0920   09E7 E7            pop d
0921   09E8 FD 43         mov [d], b
0922   09EA             ; break; 
0923   09EA 0A F9 09      jmp _switch17_exit ; case break
0924   09ED             _switch17_default:
0925   09ED             ; print("Error: Unknown argument type.\n"); 
0926   09ED             ; --- START FUNCTION CALL
0927   09ED 26 C4 2C      mov b, _s2 ; "Error: Unknown argument type.\n"
0928   09F0 FD AB         swp b
0929   09F2 D8            push b
0930   09F3 07 72 0D      call print
0931   09F6 51 02 00      add sp, 2
0932   09F9             ; --- END FUNCTION CALL
0933   09F9             _switch17_exit:
0934   09F9             ; format_p++; 
0935   09F9 FA FD FF      lea d, [bp + -3] ; $format_p
0936   09FC 2A            mov b, [d]
0937   09FD 38 00 00      mov c, 0
0938   0A00 FD 77         inc b
0939   0A02 FA FD FF      lea d, [bp + -3] ; $format_p
0940   0A05 FD 43         mov [d], b
0941   0A07 FD 7D         dec b
0942   0A09 0A 31 0A      jmp _if16_exit
0943   0A0C             _if16_else:
0944   0A0C             ; putchar(*format_p); 
0945   0A0C             ; --- START FUNCTION CALL
0946   0A0C FA FD FF      lea d, [bp + -3] ; $format_p
0947   0A0F 2A            mov b, [d]
0948   0A10 38 00 00      mov c, 0
0949   0A13 74            mov d, b
0950   0A14 32            mov bl, [d]
0951   0A15 A7 00         mov bh, 0
0952   0A17 38 00 00      mov c, 0
0953   0A1A DD            push bl
0954   0A1B 07 BB 0B      call putchar
0955   0A1E 51 01 00      add sp, 1
0956   0A21             ; --- END FUNCTION CALL
0957   0A21             ; format_p++; 
0958   0A21 FA FD FF      lea d, [bp + -3] ; $format_p
0959   0A24 2A            mov b, [d]
0960   0A25 38 00 00      mov c, 0
0961   0A28 FD 77         inc b
0962   0A2A FA FD FF      lea d, [bp + -3] ; $format_p
0963   0A2D FD 43         mov [d], b
0964   0A2F FD 7D         dec b
0965   0A31             _if16_exit:
0966   0A31             _if15_exit:
0967   0A31             _for14_update:
0968   0A31 0A 65 07      jmp _for14_cond
0969   0A34             _for14_exit:
0970   0A34 F9            leave
0971   0A35 09            ret
0972   0A36             
0973   0A36             print_signed_long:
0974   0A36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0975   0A39             ; char digits[10]; 
0976   0A39 52 0A 00      sub sp, 10
0977   0A3C             ; int i = 0; 
0978   0A3C 52 02 00      sub sp, 2
0979   0A3F             ; --- START LOCAL VAR INITIALIZATION
0980   0A3F FA F5 FF      lea d, [bp + -11] ; $i
0981   0A42 DA            push d
0982   0A43 FD 2E 00 00   mov32 cb, $00000000
0982   0A47 00 00 
0983   0A49 E7            pop d
0984   0A4A FD 43         mov [d], b
0985   0A4C             ; --- END LOCAL VAR INITIALIZATION
0986   0A4C             ; if (num < 0) { 
0987   0A4C             _if21_cond:
0988   0A4C FA 05 00      lea d, [bp + 5] ; $num
0989   0A4F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0990   0A52 FD 39         mov c, b ; And place it into C
0991   0A54 2A            mov b, [d] ; Lower Word in B
0992   0A55             ; --- START RELATIONAL
0993   0A55 D7            push a
0994   0A56 FD D8         push g
0995   0A58 11            mov a, b
0996   0A59 FD 7A         mov g, c
0997   0A5B FD 2E 00 00   mov32 cb, $00000000
0997   0A5F 00 00 
0998   0A61 FD AF         cmp32 ga, cb
0999   0A63 FD 73         slt ; <
1000   0A65 FD F1         pop g
1001   0A67 E4            pop a
1002   0A68             ; --- END RELATIONAL
1003   0A68 C0 00 00      cmp b, 0
1004   0A6B C6 9D 0A      je _if21_else
1005   0A6E             _if21_TRUE:
1006   0A6E             ; putchar('-'); 
1007   0A6E             ; --- START FUNCTION CALL
1008   0A6E FD 2E 2D 00   mov32 cb, $0000002d
1008   0A72 00 00 
1009   0A74 DD            push bl
1010   0A75 07 BB 0B      call putchar
1011   0A78 51 01 00      add sp, 1
1012   0A7B             ; --- END FUNCTION CALL
1013   0A7B             ; num = -num; 
1014   0A7B FA 05 00      lea d, [bp + 5] ; $num
1015   0A7E DA            push d
1016   0A7F FA 05 00      lea d, [bp + 5] ; $num
1017   0A82 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1018   0A85 FD 39         mov c, b ; And place it into C
1019   0A87 2A            mov b, [d] ; Lower Word in B
1020   0A88 12            mov a, c
1021   0A89 95            not a
1022   0A8A 97            not b
1023   0A8B 55 01 00      add b, 1
1024   0A8E 5B 00 00      adc a, 0
1025   0A91 39            mov c, a
1026   0A92 E7            pop d
1027   0A93 FD 43         mov [d], b
1028   0A95 28            mov b, c
1029   0A96 FD 44 02 00   mov [d + 2], b
1030   0A9A 0A D1 0A      jmp _if21_exit
1031   0A9D             _if21_else:
1032   0A9D             ; if (num == 0) { 
1033   0A9D             _if22_cond:
1034   0A9D FA 05 00      lea d, [bp + 5] ; $num
1035   0AA0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1036   0AA3 FD 39         mov c, b ; And place it into C
1037   0AA5 2A            mov b, [d] ; Lower Word in B
1038   0AA6             ; --- START RELATIONAL
1039   0AA6 D7            push a
1040   0AA7 FD D8         push g
1041   0AA9 11            mov a, b
1042   0AAA FD 7A         mov g, c
1043   0AAC FD 2E 00 00   mov32 cb, $00000000
1043   0AB0 00 00 
1044   0AB2 FD AF         cmp32 ga, cb
1045   0AB4 FD 71         seq ; ==
1046   0AB6 FD F1         pop g
1047   0AB8 E4            pop a
1048   0AB9             ; --- END RELATIONAL
1049   0AB9 C0 00 00      cmp b, 0
1050   0ABC C6 D1 0A      je _if22_exit
1051   0ABF             _if22_TRUE:
1052   0ABF             ; putchar('0'); 
1053   0ABF             ; --- START FUNCTION CALL
1054   0ABF FD 2E 30 00   mov32 cb, $00000030
1054   0AC3 00 00 
1055   0AC5 DD            push bl
1056   0AC6 07 BB 0B      call putchar
1057   0AC9 51 01 00      add sp, 1
1058   0ACC             ; --- END FUNCTION CALL
1059   0ACC             ; return; 
1060   0ACC F9            leave
1061   0ACD 09            ret
1062   0ACE 0A D1 0A      jmp _if22_exit
1063   0AD1             _if22_exit:
1064   0AD1             _if21_exit:
1065   0AD1             ; while (num > 0) { 
1066   0AD1             _while23_cond:
1067   0AD1 FA 05 00      lea d, [bp + 5] ; $num
1068   0AD4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1069   0AD7 FD 39         mov c, b ; And place it into C
1070   0AD9 2A            mov b, [d] ; Lower Word in B
1071   0ADA             ; --- START RELATIONAL
1072   0ADA D7            push a
1073   0ADB FD D8         push g
1074   0ADD 11            mov a, b
1075   0ADE FD 7A         mov g, c
1076   0AE0 FD 2E 00 00   mov32 cb, $00000000
1076   0AE4 00 00 
1077   0AE6 FD AF         cmp32 ga, cb
1078   0AE8 FD 7F         sgt
1079   0AEA FD F1         pop g
1080   0AEC E4            pop a
1081   0AED             ; --- END RELATIONAL
1082   0AED C0 00 00      cmp b, 0
1083   0AF0 C6 71 0B      je _while23_exit
1084   0AF3             _while23_block:
1085   0AF3             ; digits[i] = '0' + (num % 10); 
1086   0AF3 FA F7 FF      lea d, [bp + -9] ; $digits
1087   0AF6 D7            push a
1088   0AF7 DA            push d
1089   0AF8 FA F5 FF      lea d, [bp + -11] ; $i
1090   0AFB 2A            mov b, [d]
1091   0AFC 38 00 00      mov c, 0
1092   0AFF E7            pop d
1093   0B00 5A            add d, b
1094   0B01 E4            pop a
1095   0B02 DA            push d
1096   0B03 FD 2E 30 00   mov32 cb, $00000030
1096   0B07 00 00 
1097   0B09             ; --- START TERMS
1098   0B09 D7            push a
1099   0B0A 11            mov a, b
1100   0B0B FA 05 00      lea d, [bp + 5] ; $num
1101   0B0E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1102   0B11 FD 39         mov c, b ; And place it into C
1103   0B13 2A            mov b, [d] ; Lower Word in B
1104   0B14             ; --- START FACTORS
1105   0B14 D7            push a
1106   0B15 FD D8         push g
1107   0B17 11            mov a, b
1108   0B18 FD 7A         mov g, c
1109   0B1A FD 2E 0A 00   mov32 cb, $0000000a
1109   0B1E 00 00 
1110   0B20 FD D8         push g ; save 'g' as the div instruction uses it
1111   0B22 AE            div a, b ; %, a: quotient, b: remainder
1112   0B23 11            mov a, b
1113   0B24 FD F1         pop g
1114   0B26 FD 38         mov c, g
1115   0B28 27            mov b, a
1116   0B29 FD F1         pop g
1117   0B2B E4            pop a
1118   0B2C             ; --- END FACTORS
1119   0B2C FD 15         add32 cb, ga
1120   0B2E E4            pop a
1121   0B2F             ; --- END TERMS
1122   0B2F E7            pop d
1123   0B30 FD 3E         mov [d], bl
1124   0B32             ; num = num / 10; 
1125   0B32 FA 05 00      lea d, [bp + 5] ; $num
1126   0B35 DA            push d
1127   0B36 FA 05 00      lea d, [bp + 5] ; $num
1128   0B39 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1129   0B3C FD 39         mov c, b ; And place it into C
1130   0B3E 2A            mov b, [d] ; Lower Word in B
1131   0B3F             ; --- START FACTORS
1132   0B3F D7            push a
1133   0B40 FD D8         push g
1134   0B42 11            mov a, b
1135   0B43 FD 7A         mov g, c
1136   0B45 FD 2E 0A 00   mov32 cb, $0000000a
1136   0B49 00 00 
1137   0B4B FD D8         push g ; save 'g' as the div instruction uses it
1138   0B4D AE            div a, b ; /, a: quotient, b: remainder
1139   0B4E FD F1         pop g
1140   0B50 FD 38         mov c, g
1141   0B52 27            mov b, a
1142   0B53 FD F1         pop g
1143   0B55 E4            pop a
1144   0B56             ; --- END FACTORS
1145   0B56 E7            pop d
1146   0B57 FD 43         mov [d], b
1147   0B59 28            mov b, c
1148   0B5A FD 44 02 00   mov [d + 2], b
1149   0B5E             ; i++; 
1150   0B5E FA F5 FF      lea d, [bp + -11] ; $i
1151   0B61 2A            mov b, [d]
1152   0B62 38 00 00      mov c, 0
1153   0B65 11            mov a, b
1154   0B66 FD 77         inc b
1155   0B68 FA F5 FF      lea d, [bp + -11] ; $i
1156   0B6B FD 43         mov [d], b
1157   0B6D 27            mov b, a
1158   0B6E 0A D1 0A      jmp _while23_cond
1159   0B71             _while23_exit:
1160   0B71             ; while (i > 0) { 
1161   0B71             _while30_cond:
1162   0B71 FA F5 FF      lea d, [bp + -11] ; $i
1163   0B74 2A            mov b, [d]
1164   0B75 38 00 00      mov c, 0
1165   0B78             ; --- START RELATIONAL
1166   0B78 D7            push a
1167   0B79 11            mov a, b
1168   0B7A FD 2E 00 00   mov32 cb, $00000000
1168   0B7E 00 00 
1169   0B80 B0            cmp a, b
1170   0B81 FD 7F         sgt ; >
1171   0B83 E4            pop a
1172   0B84             ; --- END RELATIONAL
1173   0B84 C0 00 00      cmp b, 0
1174   0B87 C6 B9 0B      je _while30_exit
1175   0B8A             _while30_block:
1176   0B8A             ; i--; 
1177   0B8A FA F5 FF      lea d, [bp + -11] ; $i
1178   0B8D 2A            mov b, [d]
1179   0B8E 38 00 00      mov c, 0
1180   0B91 11            mov a, b
1181   0B92 FD 7D         dec b
1182   0B94 FA F5 FF      lea d, [bp + -11] ; $i
1183   0B97 FD 43         mov [d], b
1184   0B99 27            mov b, a
1185   0B9A             ; putchar(digits[i]); 
1186   0B9A             ; --- START FUNCTION CALL
1187   0B9A FA F7 FF      lea d, [bp + -9] ; $digits
1188   0B9D D7            push a
1189   0B9E DA            push d
1190   0B9F FA F5 FF      lea d, [bp + -11] ; $i
1191   0BA2 2A            mov b, [d]
1192   0BA3 38 00 00      mov c, 0
1193   0BA6 E7            pop d
1194   0BA7 5A            add d, b
1195   0BA8 E4            pop a
1196   0BA9 32            mov bl, [d]
1197   0BAA A7 00         mov bh, 0
1198   0BAC 38 00 00      mov c, 0
1199   0BAF DD            push bl
1200   0BB0 07 BB 0B      call putchar
1201   0BB3 51 01 00      add sp, 1
1202   0BB6             ; --- END FUNCTION CALL
1203   0BB6 0A 71 0B      jmp _while30_cond
1204   0BB9             _while30_exit:
1205   0BB9 F9            leave
1206   0BBA 09            ret
1207   0BBB             
1208   0BBB             putchar:
1209   0BBB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1210   0BBE             ; --- BEGIN INLINE ASM SEGMENT
1211   0BBE FA 05 00      lea d, [bp + 5] ; $c
1212   0BC1 1E            mov al, [d]
1213   0BC2 23            mov ah, al
1214   0BC3 19 00         mov al, 0
1215   0BC5 05 03         syscall sys_io      ; char in AH
1216   0BC7             ; --- END INLINE ASM SEGMENT
1217   0BC7 F9            leave
1218   0BC8 09            ret
1219   0BC9             
1220   0BC9             print_unsigned_long:
1221   0BC9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1222   0BCC             ; char digits[10]; 
1223   0BCC 52 0A 00      sub sp, 10
1224   0BCF             ; int i; 
1225   0BCF 52 02 00      sub sp, 2
1226   0BD2             ; i = 0; 
1227   0BD2 FA F5 FF      lea d, [bp + -11] ; $i
1228   0BD5 DA            push d
1229   0BD6 FD 2E 00 00   mov32 cb, $00000000
1229   0BDA 00 00 
1230   0BDC E7            pop d
1231   0BDD FD 43         mov [d], b
1232   0BDF             ; if(num == 0){ 
1233   0BDF             _if31_cond:
1234   0BDF FA 05 00      lea d, [bp + 5] ; $num
1235   0BE2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1236   0BE5 FD 39         mov c, b ; And place it into C
1237   0BE7 2A            mov b, [d] ; Lower Word in B
1238   0BE8             ; --- START RELATIONAL
1239   0BE8 D7            push a
1240   0BE9 FD D8         push g
1241   0BEB 11            mov a, b
1242   0BEC FD 7A         mov g, c
1243   0BEE FD 2E 00 00   mov32 cb, $00000000
1243   0BF2 00 00 
1244   0BF4 FD AF         cmp32 ga, cb
1245   0BF6 FD 71         seq ; ==
1246   0BF8 FD F1         pop g
1247   0BFA E4            pop a
1248   0BFB             ; --- END RELATIONAL
1249   0BFB C0 00 00      cmp b, 0
1250   0BFE C6 13 0C      je _if31_exit
1251   0C01             _if31_TRUE:
1252   0C01             ; putchar('0'); 
1253   0C01             ; --- START FUNCTION CALL
1254   0C01 FD 2E 30 00   mov32 cb, $00000030
1254   0C05 00 00 
1255   0C07 DD            push bl
1256   0C08 07 BB 0B      call putchar
1257   0C0B 51 01 00      add sp, 1
1258   0C0E             ; --- END FUNCTION CALL
1259   0C0E             ; return; 
1260   0C0E F9            leave
1261   0C0F 09            ret
1262   0C10 0A 13 0C      jmp _if31_exit
1263   0C13             _if31_exit:
1264   0C13             ; while (num > 0) { 
1265   0C13             _while32_cond:
1266   0C13 FA 05 00      lea d, [bp + 5] ; $num
1267   0C16 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1268   0C19 FD 39         mov c, b ; And place it into C
1269   0C1B 2A            mov b, [d] ; Lower Word in B
1270   0C1C             ; --- START RELATIONAL
1271   0C1C D7            push a
1272   0C1D FD D8         push g
1273   0C1F 11            mov a, b
1274   0C20 FD 7A         mov g, c
1275   0C22 FD 2E 00 00   mov32 cb, $00000000
1275   0C26 00 00 
1276   0C28 FD AF         cmp32 ga, cb
1277   0C2A FD 81         sgu
1278   0C2C FD F1         pop g
1279   0C2E E4            pop a
1280   0C2F             ; --- END RELATIONAL
1281   0C2F C0 00 00      cmp b, 0
1282   0C32 C6 B3 0C      je _while32_exit
1283   0C35             _while32_block:
1284   0C35             ; digits[i] = '0' + (num % 10); 
1285   0C35 FA F7 FF      lea d, [bp + -9] ; $digits
1286   0C38 D7            push a
1287   0C39 DA            push d
1288   0C3A FA F5 FF      lea d, [bp + -11] ; $i
1289   0C3D 2A            mov b, [d]
1290   0C3E 38 00 00      mov c, 0
1291   0C41 E7            pop d
1292   0C42 5A            add d, b
1293   0C43 E4            pop a
1294   0C44 DA            push d
1295   0C45 FD 2E 30 00   mov32 cb, $00000030
1295   0C49 00 00 
1296   0C4B             ; --- START TERMS
1297   0C4B D7            push a
1298   0C4C 11            mov a, b
1299   0C4D FA 05 00      lea d, [bp + 5] ; $num
1300   0C50 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1301   0C53 FD 39         mov c, b ; And place it into C
1302   0C55 2A            mov b, [d] ; Lower Word in B
1303   0C56             ; --- START FACTORS
1304   0C56 D7            push a
1305   0C57 FD D8         push g
1306   0C59 11            mov a, b
1307   0C5A FD 7A         mov g, c
1308   0C5C FD 2E 0A 00   mov32 cb, $0000000a
1308   0C60 00 00 
1309   0C62 FD D8         push g ; save 'g' as the div instruction uses it
1310   0C64 AE            div a, b ; %, a: quotient, b: remainder
1311   0C65 11            mov a, b
1312   0C66 FD F1         pop g
1313   0C68 FD 38         mov c, g
1314   0C6A 27            mov b, a
1315   0C6B FD F1         pop g
1316   0C6D E4            pop a
1317   0C6E             ; --- END FACTORS
1318   0C6E FD 15         add32 cb, ga
1319   0C70 E4            pop a
1320   0C71             ; --- END TERMS
1321   0C71 E7            pop d
1322   0C72 FD 3E         mov [d], bl
1323   0C74             ; num = num / 10; 
1324   0C74 FA 05 00      lea d, [bp + 5] ; $num
1325   0C77 DA            push d
1326   0C78 FA 05 00      lea d, [bp + 5] ; $num
1327   0C7B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1328   0C7E FD 39         mov c, b ; And place it into C
1329   0C80 2A            mov b, [d] ; Lower Word in B
1330   0C81             ; --- START FACTORS
1331   0C81 D7            push a
1332   0C82 FD D8         push g
1333   0C84 11            mov a, b
1334   0C85 FD 7A         mov g, c
1335   0C87 FD 2E 0A 00   mov32 cb, $0000000a
1335   0C8B 00 00 
1336   0C8D FD D8         push g ; save 'g' as the div instruction uses it
1337   0C8F AE            div a, b ; /, a: quotient, b: remainder
1338   0C90 FD F1         pop g
1339   0C92 FD 38         mov c, g
1340   0C94 27            mov b, a
1341   0C95 FD F1         pop g
1342   0C97 E4            pop a
1343   0C98             ; --- END FACTORS
1344   0C98 E7            pop d
1345   0C99 FD 43         mov [d], b
1346   0C9B 28            mov b, c
1347   0C9C FD 44 02 00   mov [d + 2], b
1348   0CA0             ; i++; 
1349   0CA0 FA F5 FF      lea d, [bp + -11] ; $i
1350   0CA3 2A            mov b, [d]
1351   0CA4 38 00 00      mov c, 0
1352   0CA7 11            mov a, b
1353   0CA8 FD 77         inc b
1354   0CAA FA F5 FF      lea d, [bp + -11] ; $i
1355   0CAD FD 43         mov [d], b
1356   0CAF 27            mov b, a
1357   0CB0 0A 13 0C      jmp _while32_cond
1358   0CB3             _while32_exit:
1359   0CB3             ; while (i > 0) { 
1360   0CB3             _while39_cond:
1361   0CB3 FA F5 FF      lea d, [bp + -11] ; $i
1362   0CB6 2A            mov b, [d]
1363   0CB7 38 00 00      mov c, 0
1364   0CBA             ; --- START RELATIONAL
1365   0CBA D7            push a
1366   0CBB 11            mov a, b
1367   0CBC FD 2E 00 00   mov32 cb, $00000000
1367   0CC0 00 00 
1368   0CC2 B0            cmp a, b
1369   0CC3 FD 7F         sgt ; >
1370   0CC5 E4            pop a
1371   0CC6             ; --- END RELATIONAL
1372   0CC6 C0 00 00      cmp b, 0
1373   0CC9 C6 FB 0C      je _while39_exit
1374   0CCC             _while39_block:
1375   0CCC             ; i--; 
1376   0CCC FA F5 FF      lea d, [bp + -11] ; $i
1377   0CCF 2A            mov b, [d]
1378   0CD0 38 00 00      mov c, 0
1379   0CD3 11            mov a, b
1380   0CD4 FD 7D         dec b
1381   0CD6 FA F5 FF      lea d, [bp + -11] ; $i
1382   0CD9 FD 43         mov [d], b
1383   0CDB 27            mov b, a
1384   0CDC             ; putchar(digits[i]); 
1385   0CDC             ; --- START FUNCTION CALL
1386   0CDC FA F7 FF      lea d, [bp + -9] ; $digits
1387   0CDF D7            push a
1388   0CE0 DA            push d
1389   0CE1 FA F5 FF      lea d, [bp + -11] ; $i
1390   0CE4 2A            mov b, [d]
1391   0CE5 38 00 00      mov c, 0
1392   0CE8 E7            pop d
1393   0CE9 5A            add d, b
1394   0CEA E4            pop a
1395   0CEB 32            mov bl, [d]
1396   0CEC A7 00         mov bh, 0
1397   0CEE 38 00 00      mov c, 0
1398   0CF1 DD            push bl
1399   0CF2 07 BB 0B      call putchar
1400   0CF5 51 01 00      add sp, 1
1401   0CF8             ; --- END FUNCTION CALL
1402   0CF8 0A B3 0C      jmp _while39_cond
1403   0CFB             _while39_exit:
1404   0CFB F9            leave
1405   0CFC 09            ret
1406   0CFD             
1407   0CFD             printx32:
1408   0CFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1409   0D00             ; --- BEGIN INLINE ASM SEGMENT
1410   0D00 FA 05 00      lea d, [bp + 5] ; $hex
1411   0D03 2B 02 00      mov b, [d+2]
1412   0D06 07 0F 0D      call print_u16x_printx32
1413   0D09 2A            mov b, [d]
1414   0D0A 07 0F 0D      call print_u16x_printx32
1415   0D0D             ; --- END INLINE ASM SEGMENT
1416   0D0D             ; return; 
1417   0D0D F9            leave
1418   0D0E 09            ret
1419   0D0F             ; --- BEGIN INLINE ASM SEGMENT
1420   0D0F             print_u16x_printx32:
1421   0D0F D7            push a
1422   0D10 D8            push b
1423   0D11 DD            push bl
1424   0D12 30            mov bl, bh
1425   0D13 07 31 0D      call _itoa_printx32        ; convert bh to char in A
1426   0D16 2F            mov bl, al        ; save al
1427   0D17 19 00         mov al, 0
1428   0D19 05 03         syscall sys_io        ; display AH
1429   0D1B 24            mov ah, bl        ; retrieve al
1430   0D1C 19 00         mov al, 0
1431   0D1E 05 03         syscall sys_io        ; display AL
1432   0D20 EA            pop bl
1433   0D21 07 31 0D      call _itoa_printx32        ; convert bh to char in A
1434   0D24 2F            mov bl, al        ; save al
1435   0D25 19 00         mov al, 0
1436   0D27 05 03         syscall sys_io        ; display AH
1437   0D29 24            mov ah, bl        ; retrieve al
1438   0D2A 19 00         mov al, 0
1439   0D2C 05 03         syscall sys_io        ; display AL
1440   0D2E E5            pop b
1441   0D2F E4            pop a
1442   0D30 09            ret
1443   0D31             _itoa_printx32:
1444   0D31 DA            push d
1445   0D32 D8            push b
1446   0D33 A7 00         mov bh, 0
1447   0D35 FD A4 04      shr bl, 4  
1448   0D38 74            mov d, b
1449   0D39 1F 4B 0D      mov al, [d + s_hex_digits_printx32]
1450   0D3C 23            mov ah, al
1451   0D3D E5            pop b
1452   0D3E D8            push b
1453   0D3F A7 00         mov bh, 0
1454   0D41 FD 87 0F      and bl, $0F
1455   0D44 74            mov d, b
1456   0D45 1F 4B 0D      mov al, [d + s_hex_digits_printx32]
1457   0D48 E5            pop b
1458   0D49 E7            pop d
1459   0D4A 09            ret
1460   0D4B 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
1460   0D4F 34 35 36 37 
1460   0D53 38 39 41 42 
1460   0D57 43 44 45 46 
1461   0D5B             ; --- END INLINE ASM SEGMENT
1462   0D5B F9            leave
1463   0D5C 09            ret
1464   0D5D             
1465   0D5D             err:
1466   0D5D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1467   0D60             ; print(e); 
1468   0D60             ; --- START FUNCTION CALL
1469   0D60 FA 05 00      lea d, [bp + 5] ; $e
1470   0D63 2A            mov b, [d]
1471   0D64 38 00 00      mov c, 0
1472   0D67 FD AB         swp b
1473   0D69 D8            push b
1474   0D6A 07 72 0D      call print
1475   0D6D 51 02 00      add sp, 2
1476   0D70             ; --- END FUNCTION CALL
1477   0D70 F9            leave
1478   0D71 09            ret
1479   0D72             
1480   0D72             print:
1481   0D72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1482   0D75             ; --- BEGIN INLINE ASM SEGMENT
1483   0D75 FA 05 00      lea d, [bp + 5] ; $s
1484   0D78 FD 2A         mov d, [d]
1485   0D7A             _puts_L1_print:
1486   0D7A 1E            mov al, [d]
1487   0D7B B9 00         cmp al, 0
1488   0D7D C6 89 0D      jz _puts_END_print
1489   0D80 23            mov ah, al
1490   0D81 19 00         mov al, 0
1491   0D83 05 03         syscall sys_io
1492   0D85 79            inc d
1493   0D86 0A 7A 0D      jmp _puts_L1_print
1494   0D89             _puts_END_print:
1495   0D89             ; --- END INLINE ASM SEGMENT
1496   0D89 F9            leave
1497   0D8A 09            ret
1498   0D8B             
1499   0D8B             print_signed:
1500   0D8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1501   0D8E             ; char digits[5]; 
1502   0D8E 52 05 00      sub sp, 5
1503   0D91             ; int i = 0; 
1504   0D91 52 02 00      sub sp, 2
1505   0D94             ; --- START LOCAL VAR INITIALIZATION
1506   0D94 FA FA FF      lea d, [bp + -6] ; $i
1507   0D97 DA            push d
1508   0D98 FD 2E 00 00   mov32 cb, $00000000
1508   0D9C 00 00 
1509   0D9E E7            pop d
1510   0D9F FD 43         mov [d], b
1511   0DA1             ; --- END LOCAL VAR INITIALIZATION
1512   0DA1             ; if (num < 0) { 
1513   0DA1             _if40_cond:
1514   0DA1 FA 05 00      lea d, [bp + 5] ; $num
1515   0DA4 2A            mov b, [d]
1516   0DA5 38 00 00      mov c, 0
1517   0DA8             ; --- START RELATIONAL
1518   0DA8 D7            push a
1519   0DA9 11            mov a, b
1520   0DAA FD 2E 00 00   mov32 cb, $00000000
1520   0DAE 00 00 
1521   0DB0 B0            cmp a, b
1522   0DB1 FD 73         slt ; < (signed)
1523   0DB3 E4            pop a
1524   0DB4             ; --- END RELATIONAL
1525   0DB4 C0 00 00      cmp b, 0
1526   0DB7 C6 DA 0D      je _if40_else
1527   0DBA             _if40_TRUE:
1528   0DBA             ; putchar('-'); 
1529   0DBA             ; --- START FUNCTION CALL
1530   0DBA FD 2E 2D 00   mov32 cb, $0000002d
1530   0DBE 00 00 
1531   0DC0 DD            push bl
1532   0DC1 07 BB 0B      call putchar
1533   0DC4 51 01 00      add sp, 1
1534   0DC7             ; --- END FUNCTION CALL
1535   0DC7             ; num = -num; 
1536   0DC7 FA 05 00      lea d, [bp + 5] ; $num
1537   0DCA DA            push d
1538   0DCB FA 05 00      lea d, [bp + 5] ; $num
1539   0DCE 2A            mov b, [d]
1540   0DCF 38 00 00      mov c, 0
1541   0DD2 FD 97         neg b
1542   0DD4 E7            pop d
1543   0DD5 FD 43         mov [d], b
1544   0DD7 0A 05 0E      jmp _if40_exit
1545   0DDA             _if40_else:
1546   0DDA             ; if (num == 0) { 
1547   0DDA             _if41_cond:
1548   0DDA FA 05 00      lea d, [bp + 5] ; $num
1549   0DDD 2A            mov b, [d]
1550   0DDE 38 00 00      mov c, 0
1551   0DE1             ; --- START RELATIONAL
1552   0DE1 D7            push a
1553   0DE2 11            mov a, b
1554   0DE3 FD 2E 00 00   mov32 cb, $00000000
1554   0DE7 00 00 
1555   0DE9 B0            cmp a, b
1556   0DEA FD 71         seq ; ==
1557   0DEC E4            pop a
1558   0DED             ; --- END RELATIONAL
1559   0DED C0 00 00      cmp b, 0
1560   0DF0 C6 05 0E      je _if41_exit
1561   0DF3             _if41_TRUE:
1562   0DF3             ; putchar('0'); 
1563   0DF3             ; --- START FUNCTION CALL
1564   0DF3 FD 2E 30 00   mov32 cb, $00000030
1564   0DF7 00 00 
1565   0DF9 DD            push bl
1566   0DFA 07 BB 0B      call putchar
1567   0DFD 51 01 00      add sp, 1
1568   0E00             ; --- END FUNCTION CALL
1569   0E00             ; return; 
1570   0E00 F9            leave
1571   0E01 09            ret
1572   0E02 0A 05 0E      jmp _if41_exit
1573   0E05             _if41_exit:
1574   0E05             _if40_exit:
1575   0E05             ; while (num > 0) { 
1576   0E05             _while42_cond:
1577   0E05 FA 05 00      lea d, [bp + 5] ; $num
1578   0E08 2A            mov b, [d]
1579   0E09 38 00 00      mov c, 0
1580   0E0C             ; --- START RELATIONAL
1581   0E0C D7            push a
1582   0E0D 11            mov a, b
1583   0E0E FD 2E 00 00   mov32 cb, $00000000
1583   0E12 00 00 
1584   0E14 B0            cmp a, b
1585   0E15 FD 7F         sgt ; >
1586   0E17 E4            pop a
1587   0E18             ; --- END RELATIONAL
1588   0E18 C0 00 00      cmp b, 0
1589   0E1B C6 92 0E      je _while42_exit
1590   0E1E             _while42_block:
1591   0E1E             ; digits[i] = '0' + (num % 10); 
1592   0E1E FA FC FF      lea d, [bp + -4] ; $digits
1593   0E21 D7            push a
1594   0E22 DA            push d
1595   0E23 FA FA FF      lea d, [bp + -6] ; $i
1596   0E26 2A            mov b, [d]
1597   0E27 38 00 00      mov c, 0
1598   0E2A E7            pop d
1599   0E2B 5A            add d, b
1600   0E2C E4            pop a
1601   0E2D DA            push d
1602   0E2E FD 2E 30 00   mov32 cb, $00000030
1602   0E32 00 00 
1603   0E34             ; --- START TERMS
1604   0E34 D7            push a
1605   0E35 11            mov a, b
1606   0E36 FA 05 00      lea d, [bp + 5] ; $num
1607   0E39 2A            mov b, [d]
1608   0E3A 38 00 00      mov c, 0
1609   0E3D             ; --- START FACTORS
1610   0E3D D7            push a
1611   0E3E FD D8         push g
1612   0E40 11            mov a, b
1613   0E41 FD 7A         mov g, c
1614   0E43 FD 2E 0A 00   mov32 cb, $0000000a
1614   0E47 00 00 
1615   0E49 FD D8         push g ; save 'g' as the div instruction uses it
1616   0E4B AE            div a, b ; %, a: quotient, b: remainder
1617   0E4C 11            mov a, b
1618   0E4D FD F1         pop g
1619   0E4F FD 38         mov c, g
1620   0E51 27            mov b, a
1621   0E52 FD F1         pop g
1622   0E54 E4            pop a
1623   0E55             ; --- END FACTORS
1624   0E55 56            add b, a
1625   0E56 E4            pop a
1626   0E57             ; --- END TERMS
1627   0E57 E7            pop d
1628   0E58 FD 3E         mov [d], bl
1629   0E5A             ; num = num / 10; 
1630   0E5A FA 05 00      lea d, [bp + 5] ; $num
1631   0E5D DA            push d
1632   0E5E FA 05 00      lea d, [bp + 5] ; $num
1633   0E61 2A            mov b, [d]
1634   0E62 38 00 00      mov c, 0
1635   0E65             ; --- START FACTORS
1636   0E65 D7            push a
1637   0E66 FD D8         push g
1638   0E68 11            mov a, b
1639   0E69 FD 7A         mov g, c
1640   0E6B FD 2E 0A 00   mov32 cb, $0000000a
1640   0E6F 00 00 
1641   0E71 FD D8         push g ; save 'g' as the div instruction uses it
1642   0E73 AE            div a, b ; /, a: quotient, b: remainder
1643   0E74 FD F1         pop g
1644   0E76 FD 38         mov c, g
1645   0E78 27            mov b, a
1646   0E79 FD F1         pop g
1647   0E7B E4            pop a
1648   0E7C             ; --- END FACTORS
1649   0E7C E7            pop d
1650   0E7D FD 43         mov [d], b
1651   0E7F             ; i++; 
1652   0E7F FA FA FF      lea d, [bp + -6] ; $i
1653   0E82 2A            mov b, [d]
1654   0E83 38 00 00      mov c, 0
1655   0E86 11            mov a, b
1656   0E87 FD 77         inc b
1657   0E89 FA FA FF      lea d, [bp + -6] ; $i
1658   0E8C FD 43         mov [d], b
1659   0E8E 27            mov b, a
1660   0E8F 0A 05 0E      jmp _while42_cond
1661   0E92             _while42_exit:
1662   0E92             ; while (i > 0) { 
1663   0E92             _while49_cond:
1664   0E92 FA FA FF      lea d, [bp + -6] ; $i
1665   0E95 2A            mov b, [d]
1666   0E96 38 00 00      mov c, 0
1667   0E99             ; --- START RELATIONAL
1668   0E99 D7            push a
1669   0E9A 11            mov a, b
1670   0E9B FD 2E 00 00   mov32 cb, $00000000
1670   0E9F 00 00 
1671   0EA1 B0            cmp a, b
1672   0EA2 FD 7F         sgt ; >
1673   0EA4 E4            pop a
1674   0EA5             ; --- END RELATIONAL
1675   0EA5 C0 00 00      cmp b, 0
1676   0EA8 C6 DA 0E      je _while49_exit
1677   0EAB             _while49_block:
1678   0EAB             ; i--; 
1679   0EAB FA FA FF      lea d, [bp + -6] ; $i
1680   0EAE 2A            mov b, [d]
1681   0EAF 38 00 00      mov c, 0
1682   0EB2 11            mov a, b
1683   0EB3 FD 7D         dec b
1684   0EB5 FA FA FF      lea d, [bp + -6] ; $i
1685   0EB8 FD 43         mov [d], b
1686   0EBA 27            mov b, a
1687   0EBB             ; putchar(digits[i]); 
1688   0EBB             ; --- START FUNCTION CALL
1689   0EBB FA FC FF      lea d, [bp + -4] ; $digits
1690   0EBE D7            push a
1691   0EBF DA            push d
1692   0EC0 FA FA FF      lea d, [bp + -6] ; $i
1693   0EC3 2A            mov b, [d]
1694   0EC4 38 00 00      mov c, 0
1695   0EC7 E7            pop d
1696   0EC8 5A            add d, b
1697   0EC9 E4            pop a
1698   0ECA 32            mov bl, [d]
1699   0ECB A7 00         mov bh, 0
1700   0ECD 38 00 00      mov c, 0
1701   0ED0 DD            push bl
1702   0ED1 07 BB 0B      call putchar
1703   0ED4 51 01 00      add sp, 1
1704   0ED7             ; --- END FUNCTION CALL
1705   0ED7 0A 92 0E      jmp _while49_cond
1706   0EDA             _while49_exit:
1707   0EDA F9            leave
1708   0EDB 09            ret
1709   0EDC             
1710   0EDC             print_unsigned:
1711   0EDC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1712   0EDF             ; char digits[5]; 
1713   0EDF 52 05 00      sub sp, 5
1714   0EE2             ; int i; 
1715   0EE2 52 02 00      sub sp, 2
1716   0EE5             ; i = 0; 
1717   0EE5 FA FA FF      lea d, [bp + -6] ; $i
1718   0EE8 DA            push d
1719   0EE9 FD 2E 00 00   mov32 cb, $00000000
1719   0EED 00 00 
1720   0EEF E7            pop d
1721   0EF0 FD 43         mov [d], b
1722   0EF2             ; if(num == 0){ 
1723   0EF2             _if50_cond:
1724   0EF2 FA 05 00      lea d, [bp + 5] ; $num
1725   0EF5 2A            mov b, [d]
1726   0EF6 38 00 00      mov c, 0
1727   0EF9             ; --- START RELATIONAL
1728   0EF9 D7            push a
1729   0EFA 11            mov a, b
1730   0EFB FD 2E 00 00   mov32 cb, $00000000
1730   0EFF 00 00 
1731   0F01 B0            cmp a, b
1732   0F02 FD 71         seq ; ==
1733   0F04 E4            pop a
1734   0F05             ; --- END RELATIONAL
1735   0F05 C0 00 00      cmp b, 0
1736   0F08 C6 1D 0F      je _if50_exit
1737   0F0B             _if50_TRUE:
1738   0F0B             ; putchar('0'); 
1739   0F0B             ; --- START FUNCTION CALL
1740   0F0B FD 2E 30 00   mov32 cb, $00000030
1740   0F0F 00 00 
1741   0F11 DD            push bl
1742   0F12 07 BB 0B      call putchar
1743   0F15 51 01 00      add sp, 1
1744   0F18             ; --- END FUNCTION CALL
1745   0F18             ; return; 
1746   0F18 F9            leave
1747   0F19 09            ret
1748   0F1A 0A 1D 0F      jmp _if50_exit
1749   0F1D             _if50_exit:
1750   0F1D             ; while (num > 0) { 
1751   0F1D             _while51_cond:
1752   0F1D FA 05 00      lea d, [bp + 5] ; $num
1753   0F20 2A            mov b, [d]
1754   0F21 38 00 00      mov c, 0
1755   0F24             ; --- START RELATIONAL
1756   0F24 D7            push a
1757   0F25 11            mov a, b
1758   0F26 FD 2E 00 00   mov32 cb, $00000000
1758   0F2A 00 00 
1759   0F2C B0            cmp a, b
1760   0F2D FD 81         sgu ; > (unsigned)
1761   0F2F E4            pop a
1762   0F30             ; --- END RELATIONAL
1763   0F30 C0 00 00      cmp b, 0
1764   0F33 C6 AA 0F      je _while51_exit
1765   0F36             _while51_block:
1766   0F36             ; digits[i] = '0' + (num % 10); 
1767   0F36 FA FC FF      lea d, [bp + -4] ; $digits
1768   0F39 D7            push a
1769   0F3A DA            push d
1770   0F3B FA FA FF      lea d, [bp + -6] ; $i
1771   0F3E 2A            mov b, [d]
1772   0F3F 38 00 00      mov c, 0
1773   0F42 E7            pop d
1774   0F43 5A            add d, b
1775   0F44 E4            pop a
1776   0F45 DA            push d
1777   0F46 FD 2E 30 00   mov32 cb, $00000030
1777   0F4A 00 00 
1778   0F4C             ; --- START TERMS
1779   0F4C D7            push a
1780   0F4D 11            mov a, b
1781   0F4E FA 05 00      lea d, [bp + 5] ; $num
1782   0F51 2A            mov b, [d]
1783   0F52 38 00 00      mov c, 0
1784   0F55             ; --- START FACTORS
1785   0F55 D7            push a
1786   0F56 FD D8         push g
1787   0F58 11            mov a, b
1788   0F59 FD 7A         mov g, c
1789   0F5B FD 2E 0A 00   mov32 cb, $0000000a
1789   0F5F 00 00 
1790   0F61 FD D8         push g ; save 'g' as the div instruction uses it
1791   0F63 AE            div a, b ; %, a: quotient, b: remainder
1792   0F64 11            mov a, b
1793   0F65 FD F1         pop g
1794   0F67 FD 38         mov c, g
1795   0F69 27            mov b, a
1796   0F6A FD F1         pop g
1797   0F6C E4            pop a
1798   0F6D             ; --- END FACTORS
1799   0F6D 56            add b, a
1800   0F6E E4            pop a
1801   0F6F             ; --- END TERMS
1802   0F6F E7            pop d
1803   0F70 FD 3E         mov [d], bl
1804   0F72             ; num = num / 10; 
1805   0F72 FA 05 00      lea d, [bp + 5] ; $num
1806   0F75 DA            push d
1807   0F76 FA 05 00      lea d, [bp + 5] ; $num
1808   0F79 2A            mov b, [d]
1809   0F7A 38 00 00      mov c, 0
1810   0F7D             ; --- START FACTORS
1811   0F7D D7            push a
1812   0F7E FD D8         push g
1813   0F80 11            mov a, b
1814   0F81 FD 7A         mov g, c
1815   0F83 FD 2E 0A 00   mov32 cb, $0000000a
1815   0F87 00 00 
1816   0F89 FD D8         push g ; save 'g' as the div instruction uses it
1817   0F8B AE            div a, b ; /, a: quotient, b: remainder
1818   0F8C FD F1         pop g
1819   0F8E FD 38         mov c, g
1820   0F90 27            mov b, a
1821   0F91 FD F1         pop g
1822   0F93 E4            pop a
1823   0F94             ; --- END FACTORS
1824   0F94 E7            pop d
1825   0F95 FD 43         mov [d], b
1826   0F97             ; i++; 
1827   0F97 FA FA FF      lea d, [bp + -6] ; $i
1828   0F9A 2A            mov b, [d]
1829   0F9B 38 00 00      mov c, 0
1830   0F9E 11            mov a, b
1831   0F9F FD 77         inc b
1832   0FA1 FA FA FF      lea d, [bp + -6] ; $i
1833   0FA4 FD 43         mov [d], b
1834   0FA6 27            mov b, a
1835   0FA7 0A 1D 0F      jmp _while51_cond
1836   0FAA             _while51_exit:
1837   0FAA             ; while (i > 0) { 
1838   0FAA             _while58_cond:
1839   0FAA FA FA FF      lea d, [bp + -6] ; $i
1840   0FAD 2A            mov b, [d]
1841   0FAE 38 00 00      mov c, 0
1842   0FB1             ; --- START RELATIONAL
1843   0FB1 D7            push a
1844   0FB2 11            mov a, b
1845   0FB3 FD 2E 00 00   mov32 cb, $00000000
1845   0FB7 00 00 
1846   0FB9 B0            cmp a, b
1847   0FBA FD 7F         sgt ; >
1848   0FBC E4            pop a
1849   0FBD             ; --- END RELATIONAL
1850   0FBD C0 00 00      cmp b, 0
1851   0FC0 C6 F2 0F      je _while58_exit
1852   0FC3             _while58_block:
1853   0FC3             ; i--; 
1854   0FC3 FA FA FF      lea d, [bp + -6] ; $i
1855   0FC6 2A            mov b, [d]
1856   0FC7 38 00 00      mov c, 0
1857   0FCA 11            mov a, b
1858   0FCB FD 7D         dec b
1859   0FCD FA FA FF      lea d, [bp + -6] ; $i
1860   0FD0 FD 43         mov [d], b
1861   0FD2 27            mov b, a
1862   0FD3             ; putchar(digits[i]); 
1863   0FD3             ; --- START FUNCTION CALL
1864   0FD3 FA FC FF      lea d, [bp + -4] ; $digits
1865   0FD6 D7            push a
1866   0FD7 DA            push d
1867   0FD8 FA FA FF      lea d, [bp + -6] ; $i
1868   0FDB 2A            mov b, [d]
1869   0FDC 38 00 00      mov c, 0
1870   0FDF E7            pop d
1871   0FE0 5A            add d, b
1872   0FE1 E4            pop a
1873   0FE2 32            mov bl, [d]
1874   0FE3 A7 00         mov bh, 0
1875   0FE5 38 00 00      mov c, 0
1876   0FE8 DD            push bl
1877   0FE9 07 BB 0B      call putchar
1878   0FEC 51 01 00      add sp, 1
1879   0FEF             ; --- END FUNCTION CALL
1880   0FEF 0A AA 0F      jmp _while58_cond
1881   0FF2             _while58_exit:
1882   0FF2 F9            leave
1883   0FF3 09            ret
1884   0FF4             
1885   0FF4             printx16:
1886   0FF4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1887   0FF7             ; --- BEGIN INLINE ASM SEGMENT
1888   0FF7 FA 05 00      lea d, [bp + 5] ; $hex
1889   0FFA 2A            mov b, [d]
1890   0FFB             print_u16x_printx16:
1891   0FFB DD            push bl
1892   0FFC 30            mov bl, bh
1893   0FFD 07 1A 10      call _itoa_printx16        ; convert bh to char in A
1894   1000 2F            mov bl, al        ; save al
1895   1001 19 00         mov al, 0
1896   1003 05 03         syscall sys_io        ; display AH
1897   1005 24            mov ah, bl        ; retrieve al
1898   1006 19 00         mov al, 0
1899   1008 05 03         syscall sys_io        ; display AL
1900   100A EA            pop bl
1901   100B 07 1A 10      call _itoa_printx16        ; convert bh to char in A
1902   100E 2F            mov bl, al        ; save al
1903   100F 19 00         mov al, 0
1904   1011 05 03         syscall sys_io        ; display AH
1905   1013 24            mov ah, bl        ; retrieve al
1906   1014 19 00         mov al, 0
1907   1016 05 03         syscall sys_io        ; display AL
1908   1018             ; --- END INLINE ASM SEGMENT
1909   1018             ; return; 
1910   1018 F9            leave
1911   1019 09            ret
1912   101A             ; --- BEGIN INLINE ASM SEGMENT
1913   101A             _itoa_printx16:
1914   101A DA            push d
1915   101B D8            push b
1916   101C A7 00         mov bh, 0
1917   101E FD A4 04      shr bl, 4  
1918   1021 74            mov d, b
1919   1022 1F 34 10      mov al, [d + s_hex_digits_printx16]
1920   1025 23            mov ah, al
1921   1026 E5            pop b
1922   1027 D8            push b
1923   1028 A7 00         mov bh, 0
1924   102A FD 87 0F      and bl, $0F
1925   102D 74            mov d, b
1926   102E 1F 34 10      mov al, [d + s_hex_digits_printx16]
1927   1031 E5            pop b
1928   1032 E7            pop d
1929   1033 09            ret
1930   1034 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
1930   1038 34 35 36 37 
1930   103C 38 39 41 42 
1930   1040 43 44 45 46 
1931   1044             ; --- END INLINE ASM SEGMENT
1932   1044 F9            leave
1933   1045 09            ret
1934   1046             
1935   1046             getchar:
1936   1046 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1937   1049             ; char c; 
1938   1049 52 01 00      sub sp, 1
1939   104C             ; --- BEGIN INLINE ASM SEGMENT
1940   104C 19 01         mov al, 1
1941   104E 05 03         syscall sys_io      ; receive in AH
1942   1050 1A            mov al, ah
1943   1051 FA 00 00      lea d, [bp + 0] ; $c
1944   1054 3E            mov [d], al
1945   1055             ; --- END INLINE ASM SEGMENT
1946   1055             ; return c; 
1947   1055 FA 00 00      lea d, [bp + 0] ; $c
1948   1058 32            mov bl, [d]
1949   1059 A7 00         mov bh, 0
1950   105B 38 00 00      mov c, 0
1951   105E F9            leave
1952   105F 09            ret
1953   1060             ; --- END TEXT SEGMENT
1954   1060             
1955   1060             ; --- BEGIN DATA SEGMENT
1956   1060 00 00 00 00 _map_data: .fill 7200, 0
1956   1064 00 00 00 00 
1956   1068 00 00 00 00 
1956   106C 00 00 00 00 
1956   1070 00 00 00 00 
1956   1074 00 00 00 00 
1956   1078 00 00 00 00 
1956   107C 00 00 00 00 
1956   1080 00 00 00 00 
1956   1084 00 00 00 00 
1956   1088 00 00 00 00 
1956   108C 00 00 00 00 
1956   1090 00 00 00 00 
1956   1094 00 00 00 00 
1956   1098 00 00 00 00 
1956   109C 00 00 00 00 
1956   10A0 00 00 00 00 
1956   10A4 00 00 00 00 
1956   10A8 00 00 00 00 
1956   10AC 00 00 00 00 
1956   10B0 00 00 00 00 
1956   10B4 00 00 00 00 
1956   10B8 00 00 00 00 
1956   10BC 00 00 00 00 
1956   10C0 00 00 00 00 
1956   10C4 00 00 00 00 
1956   10C8 00 00 00 00 
1956   10CC 00 00 00 00 
1956   10D0 00 00 00 00 
1956   10D4 00 00 00 00 
1956   10D8 00 00 00 00 
1956   10DC 00 00 00 00 
1956   10E0 00 00 00 00 
1956   10E4 00 00 00 00 
1956   10E8 00 00 00 00 
1956   10EC 00 00 00 00 
1956   10F0 00 00 00 00 
1956   10F4 00 00 00 00 
1956   10F8 00 00 00 00 
1956   10FC 00 00 00 00 
1956   1100 00 00 00 00 
1956   1104 00 00 00 00 
1956   1108 00 00 00 00 
1956   110C 00 00 00 00 
1956   1110 00 00 00 00 
1956   1114 00 00 00 00 
1956   1118 00 00 00 00 
1956   111C 00 00 00 00 
1956   1120 00 00 00 00 
1956   1124 00 00 00 00 
1956   1128 00 00 00 00 
1956   112C 00 00 00 00 
1956   1130 00 00 00 00 
1956   1134 00 00 00 00 
1956   1138 00 00 00 00 
1956   113C 00 00 00 00 
1956   1140 00 00 00 00 
1956   1144 00 00 00 00 
1956   1148 00 00 00 00 
1956   114C 00 00 00 00 
1956   1150 00 00 00 00 
1956   1154 00 00 00 00 
1956   1158 00 00 00 00 
1956   115C 00 00 00 00 
1956   1160 00 00 00 00 
1956   1164 00 00 00 00 
1956   1168 00 00 00 00 
1956   116C 00 00 00 00 
1956   1170 00 00 00 00 
1956   1174 00 00 00 00 
1956   1178 00 00 00 00 
1956   117C 00 00 00 00 
1956   1180 00 00 00 00 
1956   1184 00 00 00 00 
1956   1188 00 00 00 00 
1956   118C 00 00 00 00 
1956   1190 00 00 00 00 
1956   1194 00 00 00 00 
1956   1198 00 00 00 00 
1956   119C 00 00 00 00 
1956   11A0 00 00 00 00 
1956   11A4 00 00 00 00 
1956   11A8 00 00 00 00 
1956   11AC 00 00 00 00 
1956   11B0 00 00 00 00 
1956   11B4 00 00 00 00 
1956   11B8 00 00 00 00 
1956   11BC 00 00 00 00 
1956   11C0 00 00 00 00 
1956   11C4 00 00 00 00 
1956   11C8 00 00 00 00 
1956   11CC 00 00 00 00 
1956   11D0 00 00 00 00 
1956   11D4 00 00 00 00 
1956   11D8 00 00 00 00 
1956   11DC 00 00 00 00 
1956   11E0 00 00 00 00 
1956   11E4 00 00 00 00 
1956   11E8 00 00 00 00 
1956   11EC 00 00 00 00 
1956   11F0 00 00 00 00 
1956   11F4 00 00 00 00 
1956   11F8 00 00 00 00 
1956   11FC 00 00 00 00 
1956   1200 00 00 00 00 
1956   1204 00 00 00 00 
1956   1208 00 00 00 00 
1956   120C 00 00 00 00 
1956   1210 00 00 00 00 
1956   1214 00 00 00 00 
1956   1218 00 00 00 00 
1956   121C 00 00 00 00 
1956   1220 00 00 00 00 
1956   1224 00 00 00 00 
1956   1228 00 00 00 00 
1956   122C 00 00 00 00 
1956   1230 00 00 00 00 
1956   1234 00 00 00 00 
1956   1238 00 00 00 00 
1956   123C 00 00 00 00 
1956   1240 00 00 00 00 
1956   1244 00 00 00 00 
1956   1248 00 00 00 00 
1956   124C 00 00 00 00 
1956   1250 00 00 00 00 
1956   1254 00 00 00 00 
1956   1258 00 00 00 00 
1956   125C 00 00 00 00 
1956   1260 00 00 00 00 
1956   1264 00 00 00 00 
1956   1268 00 00 00 00 
1956   126C 00 00 00 00 
1956   1270 00 00 00 00 
1956   1274 00 00 00 00 
1956   1278 00 00 00 00 
1956   127C 00 00 00 00 
1956   1280 00 00 00 00 
1956   1284 00 00 00 00 
1956   1288 00 00 00 00 
1956   128C 00 00 00 00 
1956   1290 00 00 00 00 
1956   1294 00 00 00 00 
1956   1298 00 00 00 00 
1956   129C 00 00 00 00 
1956   12A0 00 00 00 00 
1956   12A4 00 00 00 00 
1956   12A8 00 00 00 00 
1956   12AC 00 00 00 00 
1956   12B0 00 00 00 00 
1956   12B4 00 00 00 00 
1956   12B8 00 00 00 00 
1956   12BC 00 00 00 00 
1956   12C0 00 00 00 00 
1956   12C4 00 00 00 00 
1956   12C8 00 00 00 00 
1956   12CC 00 00 00 00 
1956   12D0 00 00 00 00 
1956   12D4 00 00 00 00 
1956   12D8 00 00 00 00 
1956   12DC 00 00 00 00 
1956   12E0 00 00 00 00 
1956   12E4 00 00 00 00 
1956   12E8 00 00 00 00 
1956   12EC 00 00 00 00 
1956   12F0 00 00 00 00 
1956   12F4 00 00 00 00 
1956   12F8 00 00 00 00 
1956   12FC 00 00 00 00 
1956   1300 00 00 00 00 
1956   1304 00 00 00 00 
1956   1308 00 00 00 00 
1956   130C 00 00 00 00 
1956   1310 00 00 00 00 
1956   1314 00 00 00 00 
1956   1318 00 00 00 00 
1956   131C 00 00 00 00 
1956   1320 00 00 00 00 
1956   1324 00 00 00 00 
1956   1328 00 00 00 00 
1956   132C 00 00 00 00 
1956   1330 00 00 00 00 
1956   1334 00 00 00 00 
1956   1338 00 00 00 00 
1956   133C 00 00 00 00 
1956   1340 00 00 00 00 
1956   1344 00 00 00 00 
1956   1348 00 00 00 00 
1956   134C 00 00 00 00 
1956   1350 00 00 00 00 
1956   1354 00 00 00 00 
1956   1358 00 00 00 00 
1956   135C 00 00 00 00 
1956   1360 00 00 00 00 
1956   1364 00 00 00 00 
1956   1368 00 00 00 00 
1956   136C 00 00 00 00 
1956   1370 00 00 00 00 
1956   1374 00 00 00 00 
1956   1378 00 00 00 00 
1956   137C 00 00 00 00 
1956   1380 00 00 00 00 
1956   1384 00 00 00 00 
1956   1388 00 00 00 00 
1956   138C 00 00 00 00 
1956   1390 00 00 00 00 
1956   1394 00 00 00 00 
1956   1398 00 00 00 00 
1956   139C 00 00 00 00 
1956   13A0 00 00 00 00 
1956   13A4 00 00 00 00 
1956   13A8 00 00 00 00 
1956   13AC 00 00 00 00 
1956   13B0 00 00 00 00 
1956   13B4 00 00 00 00 
1956   13B8 00 00 00 00 
1956   13BC 00 00 00 00 
1956   13C0 00 00 00 00 
1956   13C4 00 00 00 00 
1956   13C8 00 00 00 00 
1956   13CC 00 00 00 00 
1956   13D0 00 00 00 00 
1956   13D4 00 00 00 00 
1956   13D8 00 00 00 00 
1956   13DC 00 00 00 00 
1956   13E0 00 00 00 00 
1956   13E4 00 00 00 00 
1956   13E8 00 00 00 00 
1956   13EC 00 00 00 00 
1956   13F0 00 00 00 00 
1956   13F4 00 00 00 00 
1956   13F8 00 00 00 00 
1956   13FC 00 00 00 00 
1956   1400 00 00 00 00 
1956   1404 00 00 00 00 
1956   1408 00 00 00 00 
1956   140C 00 00 00 00 
1956   1410 00 00 00 00 
1956   1414 00 00 00 00 
1956   1418 00 00 00 00 
1956   141C 00 00 00 00 
1956   1420 00 00 00 00 
1956   1424 00 00 00 00 
1956   1428 00 00 00 00 
1956   142C 00 00 00 00 
1956   1430 00 00 00 00 
1956   1434 00 00 00 00 
1956   1438 00 00 00 00 
1956   143C 00 00 00 00 
1956   1440 00 00 00 00 
1956   1444 00 00 00 00 
1956   1448 00 00 00 00 
1956   144C 00 00 00 00 
1956   1450 00 00 00 00 
1956   1454 00 00 00 00 
1956   1458 00 00 00 00 
1956   145C 00 00 00 00 
1956   1460 00 00 00 00 
1956   1464 00 00 00 00 
1956   1468 00 00 00 00 
1956   146C 00 00 00 00 
1956   1470 00 00 00 00 
1956   1474 00 00 00 00 
1956   1478 00 00 00 00 
1956   147C 00 00 00 00 
1956   1480 00 00 00 00 
1956   1484 00 00 00 00 
1956   1488 00 00 00 00 
1956   148C 00 00 00 00 
1956   1490 00 00 00 00 
1956   1494 00 00 00 00 
1956   1498 00 00 00 00 
1956   149C 00 00 00 00 
1956   14A0 00 00 00 00 
1956   14A4 00 00 00 00 
1956   14A8 00 00 00 00 
1956   14AC 00 00 00 00 
1956   14B0 00 00 00 00 
1956   14B4 00 00 00 00 
1956   14B8 00 00 00 00 
1956   14BC 00 00 00 00 
1956   14C0 00 00 00 00 
1956   14C4 00 00 00 00 
1956   14C8 00 00 00 00 
1956   14CC 00 00 00 00 
1956   14D0 00 00 00 00 
1956   14D4 00 00 00 00 
1956   14D8 00 00 00 00 
1956   14DC 00 00 00 00 
1956   14E0 00 00 00 00 
1956   14E4 00 00 00 00 
1956   14E8 00 00 00 00 
1956   14EC 00 00 00 00 
1956   14F0 00 00 00 00 
1956   14F4 00 00 00 00 
1956   14F8 00 00 00 00 
1956   14FC 00 00 00 00 
1956   1500 00 00 00 00 
1956   1504 00 00 00 00 
1956   1508 00 00 00 00 
1956   150C 00 00 00 00 
1956   1510 00 00 00 00 
1956   1514 00 00 00 00 
1956   1518 00 00 00 00 
1956   151C 00 00 00 00 
1956   1520 00 00 00 00 
1956   1524 00 00 00 00 
1956   1528 00 00 00 00 
1956   152C 00 00 00 00 
1956   1530 00 00 00 00 
1956   1534 00 00 00 00 
1956   1538 00 00 00 00 
1956   153C 00 00 00 00 
1956   1540 00 00 00 00 
1956   1544 00 00 00 00 
1956   1548 00 00 00 00 
1956   154C 00 00 00 00 
1956   1550 00 00 00 00 
1956   1554 00 00 00 00 
1956   1558 00 00 00 00 
1956   155C 00 00 00 00 
1956   1560 00 00 00 00 
1956   1564 00 00 00 00 
1956   1568 00 00 00 00 
1956   156C 00 00 00 00 
1956   1570 00 00 00 00 
1956   1574 00 00 00 00 
1956   1578 00 00 00 00 
1956   157C 00 00 00 00 
1956   1580 00 00 00 00 
1956   1584 00 00 00 00 
1956   1588 00 00 00 00 
1956   158C 00 00 00 00 
1956   1590 00 00 00 00 
1956   1594 00 00 00 00 
1956   1598 00 00 00 00 
1956   159C 00 00 00 00 
1956   15A0 00 00 00 00 
1956   15A4 00 00 00 00 
1956   15A8 00 00 00 00 
1956   15AC 00 00 00 00 
1956   15B0 00 00 00 00 
1956   15B4 00 00 00 00 
1956   15B8 00 00 00 00 
1956   15BC 00 00 00 00 
1956   15C0 00 00 00 00 
1956   15C4 00 00 00 00 
1956   15C8 00 00 00 00 
1956   15CC 00 00 00 00 
1956   15D0 00 00 00 00 
1956   15D4 00 00 00 00 
1956   15D8 00 00 00 00 
1956   15DC 00 00 00 00 
1956   15E0 00 00 00 00 
1956   15E4 00 00 00 00 
1956   15E8 00 00 00 00 
1956   15EC 00 00 00 00 
1956   15F0 00 00 00 00 
1956   15F4 00 00 00 00 
1956   15F8 00 00 00 00 
1956   15FC 00 00 00 00 
1956   1600 00 00 00 00 
1956   1604 00 00 00 00 
1956   1608 00 00 00 00 
1956   160C 00 00 00 00 
1956   1610 00 00 00 00 
1956   1614 00 00 00 00 
1956   1618 00 00 00 00 
1956   161C 00 00 00 00 
1956   1620 00 00 00 00 
1956   1624 00 00 00 00 
1956   1628 00 00 00 00 
1956   162C 00 00 00 00 
1956   1630 00 00 00 00 
1956   1634 00 00 00 00 
1956   1638 00 00 00 00 
1956   163C 00 00 00 00 
1956   1640 00 00 00 00 
1956   1644 00 00 00 00 
1956   1648 00 00 00 00 
1956   164C 00 00 00 00 
1956   1650 00 00 00 00 
1956   1654 00 00 00 00 
1956   1658 00 00 00 00 
1956   165C 00 00 00 00 
1956   1660 00 00 00 00 
1956   1664 00 00 00 00 
1956   1668 00 00 00 00 
1956   166C 00 00 00 00 
1956   1670 00 00 00 00 
1956   1674 00 00 00 00 
1956   1678 00 00 00 00 
1956   167C 00 00 00 00 
1956   1680 00 00 00 00 
1956   1684 00 00 00 00 
1956   1688 00 00 00 00 
1956   168C 00 00 00 00 
1956   1690 00 00 00 00 
1956   1694 00 00 00 00 
1956   1698 00 00 00 00 
1956   169C 00 00 00 00 
1956   16A0 00 00 00 00 
1956   16A4 00 00 00 00 
1956   16A8 00 00 00 00 
1956   16AC 00 00 00 00 
1956   16B0 00 00 00 00 
1956   16B4 00 00 00 00 
1956   16B8 00 00 00 00 
1956   16BC 00 00 00 00 
1956   16C0 00 00 00 00 
1956   16C4 00 00 00 00 
1956   16C8 00 00 00 00 
1956   16CC 00 00 00 00 
1956   16D0 00 00 00 00 
1956   16D4 00 00 00 00 
1956   16D8 00 00 00 00 
1956   16DC 00 00 00 00 
1956   16E0 00 00 00 00 
1956   16E4 00 00 00 00 
1956   16E8 00 00 00 00 
1956   16EC 00 00 00 00 
1956   16F0 00 00 00 00 
1956   16F4 00 00 00 00 
1956   16F8 00 00 00 00 
1956   16FC 00 00 00 00 
1956   1700 00 00 00 00 
1956   1704 00 00 00 00 
1956   1708 00 00 00 00 
1956   170C 00 00 00 00 
1956   1710 00 00 00 00 
1956   1714 00 00 00 00 
1956   1718 00 00 00 00 
1956   171C 00 00 00 00 
1956   1720 00 00 00 00 
1956   1724 00 00 00 00 
1956   1728 00 00 00 00 
1956   172C 00 00 00 00 
1956   1730 00 00 00 00 
1956   1734 00 00 00 00 
1956   1738 00 00 00 00 
1956   173C 00 00 00 00 
1956   1740 00 00 00 00 
1956   1744 00 00 00 00 
1956   1748 00 00 00 00 
1956   174C 00 00 00 00 
1956   1750 00 00 00 00 
1956   1754 00 00 00 00 
1956   1758 00 00 00 00 
1956   175C 00 00 00 00 
1956   1760 00 00 00 00 
1956   1764 00 00 00 00 
1956   1768 00 00 00 00 
1956   176C 00 00 00 00 
1956   1770 00 00 00 00 
1956   1774 00 00 00 00 
1956   1778 00 00 00 00 
1956   177C 00 00 00 00 
1956   1780 00 00 00 00 
1956   1784 00 00 00 00 
1956   1788 00 00 00 00 
1956   178C 00 00 00 00 
1956   1790 00 00 00 00 
1956   1794 00 00 00 00 
1956   1798 00 00 00 00 
1956   179C 00 00 00 00 
1956   17A0 00 00 00 00 
1956   17A4 00 00 00 00 
1956   17A8 00 00 00 00 
1956   17AC 00 00 00 00 
1956   17B0 00 00 00 00 
1956   17B4 00 00 00 00 
1956   17B8 00 00 00 00 
1956   17BC 00 00 00 00 
1956   17C0 00 00 00 00 
1956   17C4 00 00 00 00 
1956   17C8 00 00 00 00 
1956   17CC 00 00 00 00 
1956   17D0 00 00 00 00 
1956   17D4 00 00 00 00 
1956   17D8 00 00 00 00 
1956   17DC 00 00 00 00 
1956   17E0 00 00 00 00 
1956   17E4 00 00 00 00 
1956   17E8 00 00 00 00 
1956   17EC 00 00 00 00 
1956   17F0 00 00 00 00 
1956   17F4 00 00 00 00 
1956   17F8 00 00 00 00 
1956   17FC 00 00 00 00 
1956   1800 00 00 00 00 
1956   1804 00 00 00 00 
1956   1808 00 00 00 00 
1956   180C 00 00 00 00 
1956   1810 00 00 00 00 
1956   1814 00 00 00 00 
1956   1818 00 00 00 00 
1956   181C 00 00 00 00 
1956   1820 00 00 00 00 
1956   1824 00 00 00 00 
1956   1828 00 00 00 00 
1956   182C 00 00 00 00 
1956   1830 00 00 00 00 
1956   1834 00 00 00 00 
1956   1838 00 00 00 00 
1956   183C 00 00 00 00 
1956   1840 00 00 00 00 
1956   1844 00 00 00 00 
1956   1848 00 00 00 00 
1956   184C 00 00 00 00 
1956   1850 00 00 00 00 
1956   1854 00 00 00 00 
1956   1858 00 00 00 00 
1956   185C 00 00 00 00 
1956   1860 00 00 00 00 
1956   1864 00 00 00 00 
1956   1868 00 00 00 00 
1956   186C 00 00 00 00 
1956   1870 00 00 00 00 
1956   1874 00 00 00 00 
1956   1878 00 00 00 00 
1956   187C 00 00 00 00 
1956   1880 00 00 00 00 
1956   1884 00 00 00 00 
1956   1888 00 00 00 00 
1956   188C 00 00 00 00 
1956   1890 00 00 00 00 
1956   1894 00 00 00 00 
1956   1898 00 00 00 00 
1956   189C 00 00 00 00 
1956   18A0 00 00 00 00 
1956   18A4 00 00 00 00 
1956   18A8 00 00 00 00 
1956   18AC 00 00 00 00 
1956   18B0 00 00 00 00 
1956   18B4 00 00 00 00 
1956   18B8 00 00 00 00 
1956   18BC 00 00 00 00 
1956   18C0 00 00 00 00 
1956   18C4 00 00 00 00 
1956   18C8 00 00 00 00 
1956   18CC 00 00 00 00 
1956   18D0 00 00 00 00 
1956   18D4 00 00 00 00 
1956   18D8 00 00 00 00 
1956   18DC 00 00 00 00 
1956   18E0 00 00 00 00 
1956   18E4 00 00 00 00 
1956   18E8 00 00 00 00 
1956   18EC 00 00 00 00 
1956   18F0 00 00 00 00 
1956   18F4 00 00 00 00 
1956   18F8 00 00 00 00 
1956   18FC 00 00 00 00 
1956   1900 00 00 00 00 
1956   1904 00 00 00 00 
1956   1908 00 00 00 00 
1956   190C 00 00 00 00 
1956   1910 00 00 00 00 
1956   1914 00 00 00 00 
1956   1918 00 00 00 00 
1956   191C 00 00 00 00 
1956   1920 00 00 00 00 
1956   1924 00 00 00 00 
1956   1928 00 00 00 00 
1956   192C 00 00 00 00 
1956   1930 00 00 00 00 
1956   1934 00 00 00 00 
1956   1938 00 00 00 00 
1956   193C 00 00 00 00 
1956   1940 00 00 00 00 
1956   1944 00 00 00 00 
1956   1948 00 00 00 00 
1956   194C 00 00 00 00 
1956   1950 00 00 00 00 
1956   1954 00 00 00 00 
1956   1958 00 00 00 00 
1956   195C 00 00 00 00 
1956   1960 00 00 00 00 
1956   1964 00 00 00 00 
1956   1968 00 00 00 00 
1956   196C 00 00 00 00 
1956   1970 00 00 00 00 
1956   1974 00 00 00 00 
1956   1978 00 00 00 00 
1956   197C 00 00 00 00 
1956   1980 00 00 00 00 
1956   1984 00 00 00 00 
1956   1988 00 00 00 00 
1956   198C 00 00 00 00 
1956   1990 00 00 00 00 
1956   1994 00 00 00 00 
1956   1998 00 00 00 00 
1956   199C 00 00 00 00 
1956   19A0 00 00 00 00 
1956   19A4 00 00 00 00 
1956   19A8 00 00 00 00 
1956   19AC 00 00 00 00 
1956   19B0 00 00 00 00 
1956   19B4 00 00 00 00 
1956   19B8 00 00 00 00 
1956   19BC 00 00 00 00 
1956   19C0 00 00 00 00 
1956   19C4 00 00 00 00 
1956   19C8 00 00 00 00 
1956   19CC 00 00 00 00 
1956   19D0 00 00 00 00 
1956   19D4 00 00 00 00 
1956   19D8 00 00 00 00 
1956   19DC 00 00 00 00 
1956   19E0 00 00 00 00 
1956   19E4 00 00 00 00 
1956   19E8 00 00 00 00 
1956   19EC 00 00 00 00 
1956   19F0 00 00 00 00 
1956   19F4 00 00 00 00 
1956   19F8 00 00 00 00 
1956   19FC 00 00 00 00 
1956   1A00 00 00 00 00 
1956   1A04 00 00 00 00 
1956   1A08 00 00 00 00 
1956   1A0C 00 00 00 00 
1956   1A10 00 00 00 00 
1956   1A14 00 00 00 00 
1956   1A18 00 00 00 00 
1956   1A1C 00 00 00 00 
1956   1A20 00 00 00 00 
1956   1A24 00 00 00 00 
1956   1A28 00 00 00 00 
1956   1A2C 00 00 00 00 
1956   1A30 00 00 00 00 
1956   1A34 00 00 00 00 
1956   1A38 00 00 00 00 
1956   1A3C 00 00 00 00 
1956   1A40 00 00 00 00 
1956   1A44 00 00 00 00 
1956   1A48 00 00 00 00 
1956   1A4C 00 00 00 00 
1956   1A50 00 00 00 00 
1956   1A54 00 00 00 00 
1956   1A58 00 00 00 00 
1956   1A5C 00 00 00 00 
1956   1A60 00 00 00 00 
1956   1A64 00 00 00 00 
1956   1A68 00 00 00 00 
1956   1A6C 00 00 00 00 
1956   1A70 00 00 00 00 
1956   1A74 00 00 00 00 
1956   1A78 00 00 00 00 
1956   1A7C 00 00 00 00 
1956   1A80 00 00 00 00 
1956   1A84 00 00 00 00 
1956   1A88 00 00 00 00 
1956   1A8C 00 00 00 00 
1956   1A90 00 00 00 00 
1956   1A94 00 00 00 00 
1956   1A98 00 00 00 00 
1956   1A9C 00 00 00 00 
1956   1AA0 00 00 00 00 
1956   1AA4 00 00 00 00 
1956   1AA8 00 00 00 00 
1956   1AAC 00 00 00 00 
1956   1AB0 00 00 00 00 
1956   1AB4 00 00 00 00 
1956   1AB8 00 00 00 00 
1956   1ABC 00 00 00 00 
1956   1AC0 00 00 00 00 
1956   1AC4 00 00 00 00 
1956   1AC8 00 00 00 00 
1956   1ACC 00 00 00 00 
1956   1AD0 00 00 00 00 
1956   1AD4 00 00 00 00 
1956   1AD8 00 00 00 00 
1956   1ADC 00 00 00 00 
1956   1AE0 00 00 00 00 
1956   1AE4 00 00 00 00 
1956   1AE8 00 00 00 00 
1956   1AEC 00 00 00 00 
1956   1AF0 00 00 00 00 
1956   1AF4 00 00 00 00 
1956   1AF8 00 00 00 00 
1956   1AFC 00 00 00 00 
1956   1B00 00 00 00 00 
1956   1B04 00 00 00 00 
1956   1B08 00 00 00 00 
1956   1B0C 00 00 00 00 
1956   1B10 00 00 00 00 
1956   1B14 00 00 00 00 
1956   1B18 00 00 00 00 
1956   1B1C 00 00 00 00 
1956   1B20 00 00 00 00 
1956   1B24 00 00 00 00 
1956   1B28 00 00 00 00 
1956   1B2C 00 00 00 00 
1956   1B30 00 00 00 00 
1956   1B34 00 00 00 00 
1956   1B38 00 00 00 00 
1956   1B3C 00 00 00 00 
1956   1B40 00 00 00 00 
1956   1B44 00 00 00 00 
1956   1B48 00 00 00 00 
1956   1B4C 00 00 00 00 
1956   1B50 00 00 00 00 
1956   1B54 00 00 00 00 
1956   1B58 00 00 00 00 
1956   1B5C 00 00 00 00 
1956   1B60 00 00 00 00 
1956   1B64 00 00 00 00 
1956   1B68 00 00 00 00 
1956   1B6C 00 00 00 00 
1956   1B70 00 00 00 00 
1956   1B74 00 00 00 00 
1956   1B78 00 00 00 00 
1956   1B7C 00 00 00 00 
1956   1B80 00 00 00 00 
1956   1B84 00 00 00 00 
1956   1B88 00 00 00 00 
1956   1B8C 00 00 00 00 
1956   1B90 00 00 00 00 
1956   1B94 00 00 00 00 
1956   1B98 00 00 00 00 
1956   1B9C 00 00 00 00 
1956   1BA0 00 00 00 00 
1956   1BA4 00 00 00 00 
1956   1BA8 00 00 00 00 
1956   1BAC 00 00 00 00 
1956   1BB0 00 00 00 00 
1956   1BB4 00 00 00 00 
1956   1BB8 00 00 00 00 
1956   1BBC 00 00 00 00 
1956   1BC0 00 00 00 00 
1956   1BC4 00 00 00 00 
1956   1BC8 00 00 00 00 
1956   1BCC 00 00 00 00 
1956   1BD0 00 00 00 00 
1956   1BD4 00 00 00 00 
1956   1BD8 00 00 00 00 
1956   1BDC 00 00 00 00 
1956   1BE0 00 00 00 00 
1956   1BE4 00 00 00 00 
1956   1BE8 00 00 00 00 
1956   1BEC 00 00 00 00 
1956   1BF0 00 00 00 00 
1956   1BF4 00 00 00 00 
1956   1BF8 00 00 00 00 
1956   1BFC 00 00 00 00 
1956   1C00 00 00 00 00 
1956   1C04 00 00 00 00 
1956   1C08 00 00 00 00 
1956   1C0C 00 00 00 00 
1956   1C10 00 00 00 00 
1956   1C14 00 00 00 00 
1956   1C18 00 00 00 00 
1956   1C1C 00 00 00 00 
1956   1C20 00 00 00 00 
1956   1C24 00 00 00 00 
1956   1C28 00 00 00 00 
1956   1C2C 00 00 00 00 
1956   1C30 00 00 00 00 
1956   1C34 00 00 00 00 
1956   1C38 00 00 00 00 
1956   1C3C 00 00 00 00 
1956   1C40 00 00 00 00 
1956   1C44 00 00 00 00 
1956   1C48 00 00 00 00 
1956   1C4C 00 00 00 00 
1956   1C50 00 00 00 00 
1956   1C54 00 00 00 00 
1956   1C58 00 00 00 00 
1956   1C5C 00 00 00 00 
1956   1C60 00 00 00 00 
1956   1C64 00 00 00 00 
1956   1C68 00 00 00 00 
1956   1C6C 00 00 00 00 
1956   1C70 00 00 00 00 
1956   1C74 00 00 00 00 
1956   1C78 00 00 00 00 
1956   1C7C 00 00 00 00 
1956   1C80 00 00 00 00 
1956   1C84 00 00 00 00 
1956   1C88 00 00 00 00 
1956   1C8C 00 00 00 00 
1956   1C90 00 00 00 00 
1956   1C94 00 00 00 00 
1956   1C98 00 00 00 00 
1956   1C9C 00 00 00 00 
1956   1CA0 00 00 00 00 
1956   1CA4 00 00 00 00 
1956   1CA8 00 00 00 00 
1956   1CAC 00 00 00 00 
1956   1CB0 00 00 00 00 
1956   1CB4 00 00 00 00 
1956   1CB8 00 00 00 00 
1956   1CBC 00 00 00 00 
1956   1CC0 00 00 00 00 
1956   1CC4 00 00 00 00 
1956   1CC8 00 00 00 00 
1956   1CCC 00 00 00 00 
1956   1CD0 00 00 00 00 
1956   1CD4 00 00 00 00 
1956   1CD8 00 00 00 00 
1956   1CDC 00 00 00 00 
1956   1CE0 00 00 00 00 
1956   1CE4 00 00 00 00 
1956   1CE8 00 00 00 00 
1956   1CEC 00 00 00 00 
1956   1CF0 00 00 00 00 
1956   1CF4 00 00 00 00 
1956   1CF8 00 00 00 00 
1956   1CFC 00 00 00 00 
1956   1D00 00 00 00 00 
1956   1D04 00 00 00 00 
1956   1D08 00 00 00 00 
1956   1D0C 00 00 00 00 
1956   1D10 00 00 00 00 
1956   1D14 00 00 00 00 
1956   1D18 00 00 00 00 
1956   1D1C 00 00 00 00 
1956   1D20 00 00 00 00 
1956   1D24 00 00 00 00 
1956   1D28 00 00 00 00 
1956   1D2C 00 00 00 00 
1956   1D30 00 00 00 00 
1956   1D34 00 00 00 00 
1956   1D38 00 00 00 00 
1956   1D3C 00 00 00 00 
1956   1D40 00 00 00 00 
1956   1D44 00 00 00 00 
1956   1D48 00 00 00 00 
1956   1D4C 00 00 00 00 
1956   1D50 00 00 00 00 
1956   1D54 00 00 00 00 
1956   1D58 00 00 00 00 
1956   1D5C 00 00 00 00 
1956   1D60 00 00 00 00 
1956   1D64 00 00 00 00 
1956   1D68 00 00 00 00 
1956   1D6C 00 00 00 00 
1956   1D70 00 00 00 00 
1956   1D74 00 00 00 00 
1956   1D78 00 00 00 00 
1956   1D7C 00 00 00 00 
1956   1D80 00 00 00 00 
1956   1D84 00 00 00 00 
1956   1D88 00 00 00 00 
1956   1D8C 00 00 00 00 
1956   1D90 00 00 00 00 
1956   1D94 00 00 00 00 
1956   1D98 00 00 00 00 
1956   1D9C 00 00 00 00 
1956   1DA0 00 00 00 00 
1956   1DA4 00 00 00 00 
1956   1DA8 00 00 00 00 
1956   1DAC 00 00 00 00 
1956   1DB0 00 00 00 00 
1956   1DB4 00 00 00 00 
1956   1DB8 00 00 00 00 
1956   1DBC 00 00 00 00 
1956   1DC0 00 00 00 00 
1956   1DC4 00 00 00 00 
1956   1DC8 00 00 00 00 
1956   1DCC 00 00 00 00 
1956   1DD0 00 00 00 00 
1956   1DD4 00 00 00 00 
1956   1DD8 00 00 00 00 
1956   1DDC 00 00 00 00 
1956   1DE0 00 00 00 00 
1956   1DE4 00 00 00 00 
1956   1DE8 00 00 00 00 
1956   1DEC 00 00 00 00 
1956   1DF0 00 00 00 00 
1956   1DF4 00 00 00 00 
1956   1DF8 00 00 00 00 
1956   1DFC 00 00 00 00 
1956   1E00 00 00 00 00 
1956   1E04 00 00 00 00 
1956   1E08 00 00 00 00 
1956   1E0C 00 00 00 00 
1956   1E10 00 00 00 00 
1956   1E14 00 00 00 00 
1956   1E18 00 00 00 00 
1956   1E1C 00 00 00 00 
1956   1E20 00 00 00 00 
1956   1E24 00 00 00 00 
1956   1E28 00 00 00 00 
1956   1E2C 00 00 00 00 
1956   1E30 00 00 00 00 
1956   1E34 00 00 00 00 
1956   1E38 00 00 00 00 
1956   1E3C 00 00 00 00 
1956   1E40 00 00 00 00 
1956   1E44 00 00 00 00 
1956   1E48 00 00 00 00 
1956   1E4C 00 00 00 00 
1956   1E50 00 00 00 00 
1956   1E54 00 00 00 00 
1956   1E58 00 00 00 00 
1956   1E5C 00 00 00 00 
1956   1E60 00 00 00 00 
1956   1E64 00 00 00 00 
1956   1E68 00 00 00 00 
1956   1E6C 00 00 00 00 
1956   1E70 00 00 00 00 
1956   1E74 00 00 00 00 
1956   1E78 00 00 00 00 
1956   1E7C 00 00 00 00 
1956   1E80 00 00 00 00 
1956   1E84 00 00 00 00 
1956   1E88 00 00 00 00 
1956   1E8C 00 00 00 00 
1956   1E90 00 00 00 00 
1956   1E94 00 00 00 00 
1956   1E98 00 00 00 00 
1956   1E9C 00 00 00 00 
1956   1EA0 00 00 00 00 
1956   1EA4 00 00 00 00 
1956   1EA8 00 00 00 00 
1956   1EAC 00 00 00 00 
1956   1EB0 00 00 00 00 
1956   1EB4 00 00 00 00 
1956   1EB8 00 00 00 00 
1956   1EBC 00 00 00 00 
1956   1EC0 00 00 00 00 
1956   1EC4 00 00 00 00 
1956   1EC8 00 00 00 00 
1956   1ECC 00 00 00 00 
1956   1ED0 00 00 00 00 
1956   1ED4 00 00 00 00 
1956   1ED8 00 00 00 00 
1956   1EDC 00 00 00 00 
1956   1EE0 00 00 00 00 
1956   1EE4 00 00 00 00 
1956   1EE8 00 00 00 00 
1956   1EEC 00 00 00 00 
1956   1EF0 00 00 00 00 
1956   1EF4 00 00 00 00 
1956   1EF8 00 00 00 00 
1956   1EFC 00 00 00 00 
1956   1F00 00 00 00 00 
1956   1F04 00 00 00 00 
1956   1F08 00 00 00 00 
1956   1F0C 00 00 00 00 
1956   1F10 00 00 00 00 
1956   1F14 00 00 00 00 
1956   1F18 00 00 00 00 
1956   1F1C 00 00 00 00 
1956   1F20 00 00 00 00 
1956   1F24 00 00 00 00 
1956   1F28 00 00 00 00 
1956   1F2C 00 00 00 00 
1956   1F30 00 00 00 00 
1956   1F34 00 00 00 00 
1956   1F38 00 00 00 00 
1956   1F3C 00 00 00 00 
1956   1F40 00 00 00 00 
1956   1F44 00 00 00 00 
1956   1F48 00 00 00 00 
1956   1F4C 00 00 00 00 
1956   1F50 00 00 00 00 
1956   1F54 00 00 00 00 
1956   1F58 00 00 00 00 
1956   1F5C 00 00 00 00 
1956   1F60 00 00 00 00 
1956   1F64 00 00 00 00 
1956   1F68 00 00 00 00 
1956   1F6C 00 00 00 00 
1956   1F70 00 00 00 00 
1956   1F74 00 00 00 00 
1956   1F78 00 00 00 00 
1956   1F7C 00 00 00 00 
1956   1F80 00 00 00 00 
1956   1F84 00 00 00 00 
1956   1F88 00 00 00 00 
1956   1F8C 00 00 00 00 
1956   1F90 00 00 00 00 
1956   1F94 00 00 00 00 
1956   1F98 00 00 00 00 
1956   1F9C 00 00 00 00 
1956   1FA0 00 00 00 00 
1956   1FA4 00 00 00 00 
1956   1FA8 00 00 00 00 
1956   1FAC 00 00 00 00 
1956   1FB0 00 00 00 00 
1956   1FB4 00 00 00 00 
1956   1FB8 00 00 00 00 
1956   1FBC 00 00 00 00 
1956   1FC0 00 00 00 00 
1956   1FC4 00 00 00 00 
1956   1FC8 00 00 00 00 
1956   1FCC 00 00 00 00 
1956   1FD0 00 00 00 00 
1956   1FD4 00 00 00 00 
1956   1FD8 00 00 00 00 
1956   1FDC 00 00 00 00 
1956   1FE0 00 00 00 00 
1956   1FE4 00 00 00 00 
1956   1FE8 00 00 00 00 
1956   1FEC 00 00 00 00 
1956   1FF0 00 00 00 00 
1956   1FF4 00 00 00 00 
1956   1FF8 00 00 00 00 
1956   1FFC 00 00 00 00 
1956   2000 00 00 00 00 
1956   2004 00 00 00 00 
1956   2008 00 00 00 00 
1956   200C 00 00 00 00 
1956   2010 00 00 00 00 
1956   2014 00 00 00 00 
1956   2018 00 00 00 00 
1956   201C 00 00 00 00 
1956   2020 00 00 00 00 
1956   2024 00 00 00 00 
1956   2028 00 00 00 00 
1956   202C 00 00 00 00 
1956   2030 00 00 00 00 
1956   2034 00 00 00 00 
1956   2038 00 00 00 00 
1956   203C 00 00 00 00 
1956   2040 00 00 00 00 
1956   2044 00 00 00 00 
1956   2048 00 00 00 00 
1956   204C 00 00 00 00 
1956   2050 00 00 00 00 
1956   2054 00 00 00 00 
1956   2058 00 00 00 00 
1956   205C 00 00 00 00 
1956   2060 00 00 00 00 
1956   2064 00 00 00 00 
1956   2068 00 00 00 00 
1956   206C 00 00 00 00 
1956   2070 00 00 00 00 
1956   2074 00 00 00 00 
1956   2078 00 00 00 00 
1956   207C 00 00 00 00 
1956   2080 00 00 00 00 
1956   2084 00 00 00 00 
1956   2088 00 00 00 00 
1956   208C 00 00 00 00 
1956   2090 00 00 00 00 
1956   2094 00 00 00 00 
1956   2098 00 00 00 00 
1956   209C 00 00 00 00 
1956   20A0 00 00 00 00 
1956   20A4 00 00 00 00 
1956   20A8 00 00 00 00 
1956   20AC 00 00 00 00 
1956   20B0 00 00 00 00 
1956   20B4 00 00 00 00 
1956   20B8 00 00 00 00 
1956   20BC 00 00 00 00 
1956   20C0 00 00 00 00 
1956   20C4 00 00 00 00 
1956   20C8 00 00 00 00 
1956   20CC 00 00 00 00 
1956   20D0 00 00 00 00 
1956   20D4 00 00 00 00 
1956   20D8 00 00 00 00 
1956   20DC 00 00 00 00 
1956   20E0 00 00 00 00 
1956   20E4 00 00 00 00 
1956   20E8 00 00 00 00 
1956   20EC 00 00 00 00 
1956   20F0 00 00 00 00 
1956   20F4 00 00 00 00 
1956   20F8 00 00 00 00 
1956   20FC 00 00 00 00 
1956   2100 00 00 00 00 
1956   2104 00 00 00 00 
1956   2108 00 00 00 00 
1956   210C 00 00 00 00 
1956   2110 00 00 00 00 
1956   2114 00 00 00 00 
1956   2118 00 00 00 00 
1956   211C 00 00 00 00 
1956   2120 00 00 00 00 
1956   2124 00 00 00 00 
1956   2128 00 00 00 00 
1956   212C 00 00 00 00 
1956   2130 00 00 00 00 
1956   2134 00 00 00 00 
1956   2138 00 00 00 00 
1956   213C 00 00 00 00 
1956   2140 00 00 00 00 
1956   2144 00 00 00 00 
1956   2148 00 00 00 00 
1956   214C 00 00 00 00 
1956   2150 00 00 00 00 
1956   2154 00 00 00 00 
1956   2158 00 00 00 00 
1956   215C 00 00 00 00 
1956   2160 00 00 00 00 
1956   2164 00 00 00 00 
1956   2168 00 00 00 00 
1956   216C 00 00 00 00 
1956   2170 00 00 00 00 
1956   2174 00 00 00 00 
1956   2178 00 00 00 00 
1956   217C 00 00 00 00 
1956   2180 00 00 00 00 
1956   2184 00 00 00 00 
1956   2188 00 00 00 00 
1956   218C 00 00 00 00 
1956   2190 00 00 00 00 
1956   2194 00 00 00 00 
1956   2198 00 00 00 00 
1956   219C 00 00 00 00 
1956   21A0 00 00 00 00 
1956   21A4 00 00 00 00 
1956   21A8 00 00 00 00 
1956   21AC 00 00 00 00 
1956   21B0 00 00 00 00 
1956   21B4 00 00 00 00 
1956   21B8 00 00 00 00 
1956   21BC 00 00 00 00 
1956   21C0 00 00 00 00 
1956   21C4 00 00 00 00 
1956   21C8 00 00 00 00 
1956   21CC 00 00 00 00 
1956   21D0 00 00 00 00 
1956   21D4 00 00 00 00 
1956   21D8 00 00 00 00 
1956   21DC 00 00 00 00 
1956   21E0 00 00 00 00 
1956   21E4 00 00 00 00 
1956   21E8 00 00 00 00 
1956   21EC 00 00 00 00 
1956   21F0 00 00 00 00 
1956   21F4 00 00 00 00 
1956   21F8 00 00 00 00 
1956   21FC 00 00 00 00 
1956   2200 00 00 00 00 
1956   2204 00 00 00 00 
1956   2208 00 00 00 00 
1956   220C 00 00 00 00 
1956   2210 00 00 00 00 
1956   2214 00 00 00 00 
1956   2218 00 00 00 00 
1956   221C 00 00 00 00 
1956   2220 00 00 00 00 
1956   2224 00 00 00 00 
1956   2228 00 00 00 00 
1956   222C 00 00 00 00 
1956   2230 00 00 00 00 
1956   2234 00 00 00 00 
1956   2238 00 00 00 00 
1956   223C 00 00 00 00 
1956   2240 00 00 00 00 
1956   2244 00 00 00 00 
1956   2248 00 00 00 00 
1956   224C 00 00 00 00 
1956   2250 00 00 00 00 
1956   2254 00 00 00 00 
1956   2258 00 00 00 00 
1956   225C 00 00 00 00 
1956   2260 00 00 00 00 
1956   2264 00 00 00 00 
1956   2268 00 00 00 00 
1956   226C 00 00 00 00 
1956   2270 00 00 00 00 
1956   2274 00 00 00 00 
1956   2278 00 00 00 00 
1956   227C 00 00 00 00 
1956   2280 00 00 00 00 
1956   2284 00 00 00 00 
1956   2288 00 00 00 00 
1956   228C 00 00 00 00 
1956   2290 00 00 00 00 
1956   2294 00 00 00 00 
1956   2298 00 00 00 00 
1956   229C 00 00 00 00 
1956   22A0 00 00 00 00 
1956   22A4 00 00 00 00 
1956   22A8 00 00 00 00 
1956   22AC 00 00 00 00 
1956   22B0 00 00 00 00 
1956   22B4 00 00 00 00 
1956   22B8 00 00 00 00 
1956   22BC 00 00 00 00 
1956   22C0 00 00 00 00 
1956   22C4 00 00 00 00 
1956   22C8 00 00 00 00 
1956   22CC 00 00 00 00 
1956   22D0 00 00 00 00 
1956   22D4 00 00 00 00 
1956   22D8 00 00 00 00 
1956   22DC 00 00 00 00 
1956   22E0 00 00 00 00 
1956   22E4 00 00 00 00 
1956   22E8 00 00 00 00 
1956   22EC 00 00 00 00 
1956   22F0 00 00 00 00 
1956   22F4 00 00 00 00 
1956   22F8 00 00 00 00 
1956   22FC 00 00 00 00 
1956   2300 00 00 00 00 
1956   2304 00 00 00 00 
1956   2308 00 00 00 00 
1956   230C 00 00 00 00 
1956   2310 00 00 00 00 
1956   2314 00 00 00 00 
1956   2318 00 00 00 00 
1956   231C 00 00 00 00 
1956   2320 00 00 00 00 
1956   2324 00 00 00 00 
1956   2328 00 00 00 00 
1956   232C 00 00 00 00 
1956   2330 00 00 00 00 
1956   2334 00 00 00 00 
1956   2338 00 00 00 00 
1956   233C 00 00 00 00 
1956   2340 00 00 00 00 
1956   2344 00 00 00 00 
1956   2348 00 00 00 00 
1956   234C 00 00 00 00 
1956   2350 00 00 00 00 
1956   2354 00 00 00 00 
1956   2358 00 00 00 00 
1956   235C 00 00 00 00 
1956   2360 00 00 00 00 
1956   2364 00 00 00 00 
1956   2368 00 00 00 00 
1956   236C 00 00 00 00 
1956   2370 00 00 00 00 
1956   2374 00 00 00 00 
1956   2378 00 00 00 00 
1956   237C 00 00 00 00 
1956   2380 00 00 00 00 
1956   2384 00 00 00 00 
1956   2388 00 00 00 00 
1956   238C 00 00 00 00 
1956   2390 00 00 00 00 
1956   2394 00 00 00 00 
1956   2398 00 00 00 00 
1956   239C 00 00 00 00 
1956   23A0 00 00 00 00 
1956   23A4 00 00 00 00 
1956   23A8 00 00 00 00 
1956   23AC 00 00 00 00 
1956   23B0 00 00 00 00 
1956   23B4 00 00 00 00 
1956   23B8 00 00 00 00 
1956   23BC 00 00 00 00 
1956   23C0 00 00 00 00 
1956   23C4 00 00 00 00 
1956   23C8 00 00 00 00 
1956   23CC 00 00 00 00 
1956   23D0 00 00 00 00 
1956   23D4 00 00 00 00 
1956   23D8 00 00 00 00 
1956   23DC 00 00 00 00 
1956   23E0 00 00 00 00 
1956   23E4 00 00 00 00 
1956   23E8 00 00 00 00 
1956   23EC 00 00 00 00 
1956   23F0 00 00 00 00 
1956   23F4 00 00 00 00 
1956   23F8 00 00 00 00 
1956   23FC 00 00 00 00 
1956   2400 00 00 00 00 
1956   2404 00 00 00 00 
1956   2408 00 00 00 00 
1956   240C 00 00 00 00 
1956   2410 00 00 00 00 
1956   2414 00 00 00 00 
1956   2418 00 00 00 00 
1956   241C 00 00 00 00 
1956   2420 00 00 00 00 
1956   2424 00 00 00 00 
1956   2428 00 00 00 00 
1956   242C 00 00 00 00 
1956   2430 00 00 00 00 
1956   2434 00 00 00 00 
1956   2438 00 00 00 00 
1956   243C 00 00 00 00 
1956   2440 00 00 00 00 
1956   2444 00 00 00 00 
1956   2448 00 00 00 00 
1956   244C 00 00 00 00 
1956   2450 00 00 00 00 
1956   2454 00 00 00 00 
1956   2458 00 00 00 00 
1956   245C 00 00 00 00 
1956   2460 00 00 00 00 
1956   2464 00 00 00 00 
1956   2468 00 00 00 00 
1956   246C 00 00 00 00 
1956   2470 00 00 00 00 
1956   2474 00 00 00 00 
1956   2478 00 00 00 00 
1956   247C 00 00 00 00 
1956   2480 00 00 00 00 
1956   2484 00 00 00 00 
1956   2488 00 00 00 00 
1956   248C 00 00 00 00 
1956   2490 00 00 00 00 
1956   2494 00 00 00 00 
1956   2498 00 00 00 00 
1956   249C 00 00 00 00 
1956   24A0 00 00 00 00 
1956   24A4 00 00 00 00 
1956   24A8 00 00 00 00 
1956   24AC 00 00 00 00 
1956   24B0 00 00 00 00 
1956   24B4 00 00 00 00 
1956   24B8 00 00 00 00 
1956   24BC 00 00 00 00 
1956   24C0 00 00 00 00 
1956   24C4 00 00 00 00 
1956   24C8 00 00 00 00 
1956   24CC 00 00 00 00 
1956   24D0 00 00 00 00 
1956   24D4 00 00 00 00 
1956   24D8 00 00 00 00 
1956   24DC 00 00 00 00 
1956   24E0 00 00 00 00 
1956   24E4 00 00 00 00 
1956   24E8 00 00 00 00 
1956   24EC 00 00 00 00 
1956   24F0 00 00 00 00 
1956   24F4 00 00 00 00 
1956   24F8 00 00 00 00 
1956   24FC 00 00 00 00 
1956   2500 00 00 00 00 
1956   2504 00 00 00 00 
1956   2508 00 00 00 00 
1956   250C 00 00 00 00 
1956   2510 00 00 00 00 
1956   2514 00 00 00 00 
1956   2518 00 00 00 00 
1956   251C 00 00 00 00 
1956   2520 00 00 00 00 
1956   2524 00 00 00 00 
1956   2528 00 00 00 00 
1956   252C 00 00 00 00 
1956   2530 00 00 00 00 
1956   2534 00 00 00 00 
1956   2538 00 00 00 00 
1956   253C 00 00 00 00 
1956   2540 00 00 00 00 
1956   2544 00 00 00 00 
1956   2548 00 00 00 00 
1956   254C 00 00 00 00 
1956   2550 00 00 00 00 
1956   2554 00 00 00 00 
1956   2558 00 00 00 00 
1956   255C 00 00 00 00 
1956   2560 00 00 00 00 
1956   2564 00 00 00 00 
1956   2568 00 00 00 00 
1956   256C 00 00 00 00 
1956   2570 00 00 00 00 
1956   2574 00 00 00 00 
1956   2578 00 00 00 00 
1956   257C 00 00 00 00 
1956   2580 00 00 00 00 
1956   2584 00 00 00 00 
1956   2588 00 00 00 00 
1956   258C 00 00 00 00 
1956   2590 00 00 00 00 
1956   2594 00 00 00 00 
1956   2598 00 00 00 00 
1956   259C 00 00 00 00 
1956   25A0 00 00 00 00 
1956   25A4 00 00 00 00 
1956   25A8 00 00 00 00 
1956   25AC 00 00 00 00 
1956   25B0 00 00 00 00 
1956   25B4 00 00 00 00 
1956   25B8 00 00 00 00 
1956   25BC 00 00 00 00 
1956   25C0 00 00 00 00 
1956   25C4 00 00 00 00 
1956   25C8 00 00 00 00 
1956   25CC 00 00 00 00 
1956   25D0 00 00 00 00 
1956   25D4 00 00 00 00 
1956   25D8 00 00 00 00 
1956   25DC 00 00 00 00 
1956   25E0 00 00 00 00 
1956   25E4 00 00 00 00 
1956   25E8 00 00 00 00 
1956   25EC 00 00 00 00 
1956   25F0 00 00 00 00 
1956   25F4 00 00 00 00 
1956   25F8 00 00 00 00 
1956   25FC 00 00 00 00 
1956   2600 00 00 00 00 
1956   2604 00 00 00 00 
1956   2608 00 00 00 00 
1956   260C 00 00 00 00 
1956   2610 00 00 00 00 
1956   2614 00 00 00 00 
1956   2618 00 00 00 00 
1956   261C 00 00 00 00 
1956   2620 00 00 00 00 
1956   2624 00 00 00 00 
1956   2628 00 00 00 00 
1956   262C 00 00 00 00 
1956   2630 00 00 00 00 
1956   2634 00 00 00 00 
1956   2638 00 00 00 00 
1956   263C 00 00 00 00 
1956   2640 00 00 00 00 
1956   2644 00 00 00 00 
1956   2648 00 00 00 00 
1956   264C 00 00 00 00 
1956   2650 00 00 00 00 
1956   2654 00 00 00 00 
1956   2658 00 00 00 00 
1956   265C 00 00 00 00 
1956   2660 00 00 00 00 
1956   2664 00 00 00 00 
1956   2668 00 00 00 00 
1956   266C 00 00 00 00 
1956   2670 00 00 00 00 
1956   2674 00 00 00 00 
1956   2678 00 00 00 00 
1956   267C 00 00 00 00 
1956   2680 00 00 00 00 
1956   2684 00 00 00 00 
1956   2688 00 00 00 00 
1956   268C 00 00 00 00 
1956   2690 00 00 00 00 
1956   2694 00 00 00 00 
1956   2698 00 00 00 00 
1956   269C 00 00 00 00 
1956   26A0 00 00 00 00 
1956   26A4 00 00 00 00 
1956   26A8 00 00 00 00 
1956   26AC 00 00 00 00 
1956   26B0 00 00 00 00 
1956   26B4 00 00 00 00 
1956   26B8 00 00 00 00 
1956   26BC 00 00 00 00 
1956   26C0 00 00 00 00 
1956   26C4 00 00 00 00 
1956   26C8 00 00 00 00 
1956   26CC 00 00 00 00 
1956   26D0 00 00 00 00 
1956   26D4 00 00 00 00 
1956   26D8 00 00 00 00 
1956   26DC 00 00 00 00 
1956   26E0 00 00 00 00 
1956   26E4 00 00 00 00 
1956   26E8 00 00 00 00 
1956   26EC 00 00 00 00 
1956   26F0 00 00 00 00 
1956   26F4 00 00 00 00 
1956   26F8 00 00 00 00 
1956   26FC 00 00 00 00 
1956   2700 00 00 00 00 
1956   2704 00 00 00 00 
1956   2708 00 00 00 00 
1956   270C 00 00 00 00 
1956   2710 00 00 00 00 
1956   2714 00 00 00 00 
1956   2718 00 00 00 00 
1956   271C 00 00 00 00 
1956   2720 00 00 00 00 
1956   2724 00 00 00 00 
1956   2728 00 00 00 00 
1956   272C 00 00 00 00 
1956   2730 00 00 00 00 
1956   2734 00 00 00 00 
1956   2738 00 00 00 00 
1956   273C 00 00 00 00 
1956   2740 00 00 00 00 
1956   2744 00 00 00 00 
1956   2748 00 00 00 00 
1956   274C 00 00 00 00 
1956   2750 00 00 00 00 
1956   2754 00 00 00 00 
1956   2758 00 00 00 00 
1956   275C 00 00 00 00 
1956   2760 00 00 00 00 
1956   2764 00 00 00 00 
1956   2768 00 00 00 00 
1956   276C 00 00 00 00 
1956   2770 00 00 00 00 
1956   2774 00 00 00 00 
1956   2778 00 00 00 00 
1956   277C 00 00 00 00 
1956   2780 00 00 00 00 
1956   2784 00 00 00 00 
1956   2788 00 00 00 00 
1956   278C 00 00 00 00 
1956   2790 00 00 00 00 
1956   2794 00 00 00 00 
1956   2798 00 00 00 00 
1956   279C 00 00 00 00 
1956   27A0 00 00 00 00 
1956   27A4 00 00 00 00 
1956   27A8 00 00 00 00 
1956   27AC 00 00 00 00 
1956   27B0 00 00 00 00 
1956   27B4 00 00 00 00 
1956   27B8 00 00 00 00 
1956   27BC 00 00 00 00 
1956   27C0 00 00 00 00 
1956   27C4 00 00 00 00 
1956   27C8 00 00 00 00 
1956   27CC 00 00 00 00 
1956   27D0 00 00 00 00 
1956   27D4 00 00 00 00 
1956   27D8 00 00 00 00 
1956   27DC 00 00 00 00 
1956   27E0 00 00 00 00 
1956   27E4 00 00 00 00 
1956   27E8 00 00 00 00 
1956   27EC 00 00 00 00 
1956   27F0 00 00 00 00 
1956   27F4 00 00 00 00 
1956   27F8 00 00 00 00 
1956   27FC 00 00 00 00 
1956   2800 00 00 00 00 
1956   2804 00 00 00 00 
1956   2808 00 00 00 00 
1956   280C 00 00 00 00 
1956   2810 00 00 00 00 
1956   2814 00 00 00 00 
1956   2818 00 00 00 00 
1956   281C 00 00 00 00 
1956   2820 00 00 00 00 
1956   2824 00 00 00 00 
1956   2828 00 00 00 00 
1956   282C 00 00 00 00 
1956   2830 00 00 00 00 
1956   2834 00 00 00 00 
1956   2838 00 00 00 00 
1956   283C 00 00 00 00 
1956   2840 00 00 00 00 
1956   2844 00 00 00 00 
1956   2848 00 00 00 00 
1956   284C 00 00 00 00 
1956   2850 00 00 00 00 
1956   2854 00 00 00 00 
1956   2858 00 00 00 00 
1956   285C 00 00 00 00 
1956   2860 00 00 00 00 
1956   2864 00 00 00 00 
1956   2868 00 00 00 00 
1956   286C 00 00 00 00 
1956   2870 00 00 00 00 
1956   2874 00 00 00 00 
1956   2878 00 00 00 00 
1956   287C 00 00 00 00 
1956   2880 00 00 00 00 
1956   2884 00 00 00 00 
1956   2888 00 00 00 00 
1956   288C 00 00 00 00 
1956   2890 00 00 00 00 
1956   2894 00 00 00 00 
1956   2898 00 00 00 00 
1956   289C 00 00 00 00 
1956   28A0 00 00 00 00 
1956   28A4 00 00 00 00 
1956   28A8 00 00 00 00 
1956   28AC 00 00 00 00 
1956   28B0 00 00 00 00 
1956   28B4 00 00 00 00 
1956   28B8 00 00 00 00 
1956   28BC 00 00 00 00 
1956   28C0 00 00 00 00 
1956   28C4 00 00 00 00 
1956   28C8 00 00 00 00 
1956   28CC 00 00 00 00 
1956   28D0 00 00 00 00 
1956   28D4 00 00 00 00 
1956   28D8 00 00 00 00 
1956   28DC 00 00 00 00 
1956   28E0 00 00 00 00 
1956   28E4 00 00 00 00 
1956   28E8 00 00 00 00 
1956   28EC 00 00 00 00 
1956   28F0 00 00 00 00 
1956   28F4 00 00 00 00 
1956   28F8 00 00 00 00 
1956   28FC 00 00 00 00 
1956   2900 00 00 00 00 
1956   2904 00 00 00 00 
1956   2908 00 00 00 00 
1956   290C 00 00 00 00 
1956   2910 00 00 00 00 
1956   2914 00 00 00 00 
1956   2918 00 00 00 00 
1956   291C 00 00 00 00 
1956   2920 00 00 00 00 
1956   2924 00 00 00 00 
1956   2928 00 00 00 00 
1956   292C 00 00 00 00 
1956   2930 00 00 00 00 
1956   2934 00 00 00 00 
1956   2938 00 00 00 00 
1956   293C 00 00 00 00 
1956   2940 00 00 00 00 
1956   2944 00 00 00 00 
1956   2948 00 00 00 00 
1956   294C 00 00 00 00 
1956   2950 00 00 00 00 
1956   2954 00 00 00 00 
1956   2958 00 00 00 00 
1956   295C 00 00 00 00 
1956   2960 00 00 00 00 
1956   2964 00 00 00 00 
1956   2968 00 00 00 00 
1956   296C 00 00 00 00 
1956   2970 00 00 00 00 
1956   2974 00 00 00 00 
1956   2978 00 00 00 00 
1956   297C 00 00 00 00 
1956   2980 00 00 00 00 
1956   2984 00 00 00 00 
1956   2988 00 00 00 00 
1956   298C 00 00 00 00 
1956   2990 00 00 00 00 
1956   2994 00 00 00 00 
1956   2998 00 00 00 00 
1956   299C 00 00 00 00 
1956   29A0 00 00 00 00 
1956   29A4 00 00 00 00 
1956   29A8 00 00 00 00 
1956   29AC 00 00 00 00 
1956   29B0 00 00 00 00 
1956   29B4 00 00 00 00 
1956   29B8 00 00 00 00 
1956   29BC 00 00 00 00 
1956   29C0 00 00 00 00 
1956   29C4 00 00 00 00 
1956   29C8 00 00 00 00 
1956   29CC 00 00 00 00 
1956   29D0 00 00 00 00 
1956   29D4 00 00 00 00 
1956   29D8 00 00 00 00 
1956   29DC 00 00 00 00 
1956   29E0 00 00 00 00 
1956   29E4 00 00 00 00 
1956   29E8 00 00 00 00 
1956   29EC 00 00 00 00 
1956   29F0 00 00 00 00 
1956   29F4 00 00 00 00 
1956   29F8 00 00 00 00 
1956   29FC 00 00 00 00 
1956   2A00 00 00 00 00 
1956   2A04 00 00 00 00 
1956   2A08 00 00 00 00 
1956   2A0C 00 00 00 00 
1956   2A10 00 00 00 00 
1956   2A14 00 00 00 00 
1956   2A18 00 00 00 00 
1956   2A1C 00 00 00 00 
1956   2A20 00 00 00 00 
1956   2A24 00 00 00 00 
1956   2A28 00 00 00 00 
1956   2A2C 00 00 00 00 
1956   2A30 00 00 00 00 
1956   2A34 00 00 00 00 
1956   2A38 00 00 00 00 
1956   2A3C 00 00 00 00 
1956   2A40 00 00 00 00 
1956   2A44 00 00 00 00 
1956   2A48 00 00 00 00 
1956   2A4C 00 00 00 00 
1956   2A50 00 00 00 00 
1956   2A54 00 00 00 00 
1956   2A58 00 00 00 00 
1956   2A5C 00 00 00 00 
1956   2A60 00 00 00 00 
1956   2A64 00 00 00 00 
1956   2A68 00 00 00 00 
1956   2A6C 00 00 00 00 
1956   2A70 00 00 00 00 
1956   2A74 00 00 00 00 
1956   2A78 00 00 00 00 
1956   2A7C 00 00 00 00 
1956   2A80 00 00 00 00 
1956   2A84 00 00 00 00 
1956   2A88 00 00 00 00 
1956   2A8C 00 00 00 00 
1956   2A90 00 00 00 00 
1956   2A94 00 00 00 00 
1956   2A98 00 00 00 00 
1956   2A9C 00 00 00 00 
1956   2AA0 00 00 00 00 
1956   2AA4 00 00 00 00 
1956   2AA8 00 00 00 00 
1956   2AAC 00 00 00 00 
1956   2AB0 00 00 00 00 
1956   2AB4 00 00 00 00 
1956   2AB8 00 00 00 00 
1956   2ABC 00 00 00 00 
1956   2AC0 00 00 00 00 
1956   2AC4 00 00 00 00 
1956   2AC8 00 00 00 00 
1956   2ACC 00 00 00 00 
1956   2AD0 00 00 00 00 
1956   2AD4 00 00 00 00 
1956   2AD8 00 00 00 00 
1956   2ADC 00 00 00 00 
1956   2AE0 00 00 00 00 
1956   2AE4 00 00 00 00 
1956   2AE8 00 00 00 00 
1956   2AEC 00 00 00 00 
1956   2AF0 00 00 00 00 
1956   2AF4 00 00 00 00 
1956   2AF8 00 00 00 00 
1956   2AFC 00 00 00 00 
1956   2B00 00 00 00 00 
1956   2B04 00 00 00 00 
1956   2B08 00 00 00 00 
1956   2B0C 00 00 00 00 
1956   2B10 00 00 00 00 
1956   2B14 00 00 00 00 
1956   2B18 00 00 00 00 
1956   2B1C 00 00 00 00 
1956   2B20 00 00 00 00 
1956   2B24 00 00 00 00 
1956   2B28 00 00 00 00 
1956   2B2C 00 00 00 00 
1956   2B30 00 00 00 00 
1956   2B34 00 00 00 00 
1956   2B38 00 00 00 00 
1956   2B3C 00 00 00 00 
1956   2B40 00 00 00 00 
1956   2B44 00 00 00 00 
1956   2B48 00 00 00 00 
1956   2B4C 00 00 00 00 
1956   2B50 00 00 00 00 
1956   2B54 00 00 00 00 
1956   2B58 00 00 00 00 
1956   2B5C 00 00 00 00 
1956   2B60 00 00 00 00 
1956   2B64 00 00 00 00 
1956   2B68 00 00 00 00 
1956   2B6C 00 00 00 00 
1956   2B70 00 00 00 00 
1956   2B74 00 00 00 00 
1956   2B78 00 00 00 00 
1956   2B7C 00 00 00 00 
1956   2B80 00 00 00 00 
1956   2B84 00 00 00 00 
1956   2B88 00 00 00 00 
1956   2B8C 00 00 00 00 
1956   2B90 00 00 00 00 
1956   2B94 00 00 00 00 
1956   2B98 00 00 00 00 
1956   2B9C 00 00 00 00 
1956   2BA0 00 00 00 00 
1956   2BA4 00 00 00 00 
1956   2BA8 00 00 00 00 
1956   2BAC 00 00 00 00 
1956   2BB0 00 00 00 00 
1956   2BB4 00 00 00 00 
1956   2BB8 00 00 00 00 
1956   2BBC 00 00 00 00 
1956   2BC0 00 00 00 00 
1956   2BC4 00 00 00 00 
1956   2BC8 00 00 00 00 
1956   2BCC 00 00 00 00 
1956   2BD0 00 00 00 00 
1956   2BD4 00 00 00 00 
1956   2BD8 00 00 00 00 
1956   2BDC 00 00 00 00 
1956   2BE0 00 00 00 00 
1956   2BE4 00 00 00 00 
1956   2BE8 00 00 00 00 
1956   2BEC 00 00 00 00 
1956   2BF0 00 00 00 00 
1956   2BF4 00 00 00 00 
1956   2BF8 00 00 00 00 
1956   2BFC 00 00 00 00 
1956   2C00 00 00 00 00 
1956   2C04 00 00 00 00 
1956   2C08 00 00 00 00 
1956   2C0C 00 00 00 00 
1956   2C10 00 00 00 00 
1956   2C14 00 00 00 00 
1956   2C18 00 00 00 00 
1956   2C1C 00 00 00 00 
1956   2C20 00 00 00 00 
1956   2C24 00 00 00 00 
1956   2C28 00 00 00 00 
1956   2C2C 00 00 00 00 
1956   2C30 00 00 00 00 
1956   2C34 00 00 00 00 
1956   2C38 00 00 00 00 
1956   2C3C 00 00 00 00 
1956   2C40 00 00 00 00 
1956   2C44 00 00 00 00 
1956   2C48 00 00 00 00 
1956   2C4C 00 00 00 00 
1956   2C50 00 00 00 00 
1956   2C54 00 00 00 00 
1956   2C58 00 00 00 00 
1956   2C5C 00 00 00 00 
1956   2C60 00 00 00 00 
1956   2C64 00 00 00 00 
1956   2C68 00 00 00 00 
1956   2C6C 00 00 00 00 
1956   2C70 00 00 00 00 
1956   2C74 00 00 00 00 
1956   2C78 00 00 00 00 
1956   2C7C 00 00 00 00 
1957   2C80 0A 64 3A 20 _s0: .db "\nd: display map\nq: quit\nenter choice: ", 0
1957   2C84 64 69 73 70 
1957   2C88 6C 61 79 20 
1957   2C8C 6D 61 70 0A 
1957   2C90 71 3A 20 71 
1957   2C94 75 69 74 0A 
1957   2C98 65 6E 74 65 
1957   2C9C 72 20 63 68 
1957   2CA0 6F 69 63 65 
1957   2CA4 3A 20 00 
1958   2CA7 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
1958   2CAB 70 65 63 74 
1958   2CAF 65 64 20 66 
1958   2CB3 6F 72 6D 61 
1958   2CB7 74 20 69 6E 
1958   2CBB 20 70 72 69 
1958   2CBF 6E 74 66 2E 
1958   2CC3 00 
1959   2CC4 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
1959   2CC8 72 3A 20 55 
1959   2CCC 6E 6B 6E 6F 
1959   2CD0 77 6E 20 61 
1959   2CD4 72 67 75 6D 
1959   2CD8 65 6E 74 20 
1959   2CDC 74 79 70 65 
1959   2CE0 2E 0A 00 
1960   2CE3             
1961   2CE3 E5 2C       _heap_top: .dw _heap
1962   2CE5 00          _heap: .db 0
1963   2CE6             ; --- END DATA SEGMENT
1964   2CE6             
1965   2CE6             .end
tasm: Number of errors = 0
