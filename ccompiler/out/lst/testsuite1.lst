0001   0000             ; --- FILENAME: ctestsuite/testsuite1
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $pass 
0011   0408             ; $i 
0012   0408             ; $nbr_tests 
0013   0408 10 0A 00      mov a, $a
0014   040B 45 E9 FF      mov [bp + -23], a
0015   040E 52 18 00      sub sp, 24
0016   0411             ;; for(i = 0; i < nbr_tests; i++){ 
0017   0411             _for1_init:
0018   0411 FA EB FF      lea d, [bp + -21] ; $i
0019   0414 DA            push d
0020   0415 26 00 00      mov b, $0
0021   0418 E7            pop d
0022   0419 FD 43         mov [d], b
0023   041B             _for1_cond:
0024   041B FA EB FF      lea d, [bp + -21] ; $i
0025   041E 2A            mov b, [d]
0026   041F             ; START RELATIONAL
0027   041F D7            push a
0028   0420 11            mov a, b
0029   0421 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0030   0424 2A            mov b, [d]
0031   0425 B0            cmp a, b
0032   0426 FD 73         slt ; <= (signed)
0033   0428 E4            pop a
0034   0429             ; END RELATIONAL
0035   0429 C0 00 00      cmp b, 0
0036   042C C6 55 04      je _for1_exit
0037   042F             _for1_block:
0038   042F             ;; pass[i] = -1; 
0039   042F FA ED FF      lea d, [bp + -19] ; $pass
0040   0432 D7            push a
0041   0433 DA            push d
0042   0434 FA EB FF      lea d, [bp + -21] ; $i
0043   0437 2A            mov b, [d]
0044   0438 E7            pop d
0045   0439 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0046   043D E4            pop a
0047   043E DA            push d
0048   043F 26 FF FF      mov b, $ffff
0049   0442 E7            pop d
0050   0443 FD 43         mov [d], b
0051   0445             _for1_update:
0052   0445 FA EB FF      lea d, [bp + -21] ; $i
0053   0448 2A            mov b, [d]
0054   0449 D8            push b
0055   044A FD 77         inc b
0056   044C FA EB FF      lea d, [bp + -21] ; $i
0057   044F FD 43         mov [d], b
0058   0451 E5            pop b
0059   0452 0A 1B 04      jmp _for1_cond
0060   0455             _for1_exit:
0061   0455             ;; pass[0] = test0(); 
0062   0455 FA ED FF      lea d, [bp + -19] ; $pass
0063   0458 D7            push a
0064   0459 DA            push d
0065   045A 26 00 00      mov b, $0
0066   045D E7            pop d
0067   045E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0068   0462 E4            pop a
0069   0463 DA            push d
0070   0464 07 CE 20      call test0
0071   0467 E7            pop d
0072   0468 FD 43         mov [d], b
0073   046A             ;; pass[1] = test1(); 
0074   046A FA ED FF      lea d, [bp + -19] ; $pass
0075   046D D7            push a
0076   046E DA            push d
0077   046F 26 01 00      mov b, $1
0078   0472 E7            pop d
0079   0473 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0080   0477 E4            pop a
0081   0478 DA            push d
0082   0479 07 D2 21      call test1
0083   047C E7            pop d
0084   047D FD 43         mov [d], b
0085   047F             ;; pass[2] = test2(); 
0086   047F FA ED FF      lea d, [bp + -19] ; $pass
0087   0482 D7            push a
0088   0483 DA            push d
0089   0484 26 02 00      mov b, $2
0090   0487 E7            pop d
0091   0488 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0092   048C E4            pop a
0093   048D DA            push d
0094   048E 07 78 23      call test2
0095   0491 E7            pop d
0096   0492 FD 43         mov [d], b
0097   0494             ;; pass[3] = test3(); 
0098   0494 FA ED FF      lea d, [bp + -19] ; $pass
0099   0497 D7            push a
0100   0498 DA            push d
0101   0499 26 03 00      mov b, $3
0102   049C E7            pop d
0103   049D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0104   04A1 E4            pop a
0105   04A2 DA            push d
0106   04A3 07 9C 24      call test3
0107   04A6 E7            pop d
0108   04A7 FD 43         mov [d], b
0109   04A9             ;; pass[4] = test4(); 
0110   04A9 FA ED FF      lea d, [bp + -19] ; $pass
0111   04AC D7            push a
0112   04AD DA            push d
0113   04AE 26 04 00      mov b, $4
0114   04B1 E7            pop d
0115   04B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0116   04B6 E4            pop a
0117   04B7 DA            push d
0118   04B8 07 42 26      call test4
0119   04BB E7            pop d
0120   04BC FD 43         mov [d], b
0121   04BE             ;; pass[5] = test5(); 
0122   04BE FA ED FF      lea d, [bp + -19] ; $pass
0123   04C1 D7            push a
0124   04C2 DA            push d
0125   04C3 26 05 00      mov b, $5
0126   04C6 E7            pop d
0127   04C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0128   04CB E4            pop a
0129   04CC DA            push d
0130   04CD 07 9A 29      call test5
0131   04D0 E7            pop d
0132   04D1 FD 43         mov [d], b
0133   04D3             ;; pass[6] = test6(); 
0134   04D3 FA ED FF      lea d, [bp + -19] ; $pass
0135   04D6 D7            push a
0136   04D7 DA            push d
0137   04D8 26 06 00      mov b, $6
0138   04DB E7            pop d
0139   04DC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0140   04E0 E4            pop a
0141   04E1 DA            push d
0142   04E2 07 7E 2A      call test6
0143   04E5 E7            pop d
0144   04E6 FD 43         mov [d], b
0145   04E8             ;; pass[7] = test7(); 
0146   04E8 FA ED FF      lea d, [bp + -19] ; $pass
0147   04EB D7            push a
0148   04EC DA            push d
0149   04ED 26 07 00      mov b, $7
0150   04F0 E7            pop d
0151   04F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0152   04F5 E4            pop a
0153   04F6 DA            push d
0154   04F7 07 D0 2B      call test7
0155   04FA E7            pop d
0156   04FB FD 43         mov [d], b
0157   04FD             ;; pass[8] = test8(); 
0158   04FD FA ED FF      lea d, [bp + -19] ; $pass
0159   0500 D7            push a
0160   0501 DA            push d
0161   0502 26 08 00      mov b, $8
0162   0505 E7            pop d
0163   0506 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0164   050A E4            pop a
0165   050B DA            push d
0166   050C 07 3A 2D      call test8
0167   050F E7            pop d
0168   0510 FD 43         mov [d], b
0169   0512             ;; pass[9] = test9(); 
0170   0512 FA ED FF      lea d, [bp + -19] ; $pass
0171   0515 D7            push a
0172   0516 DA            push d
0173   0517 26 09 00      mov b, $9
0174   051A E7            pop d
0175   051B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0176   051F E4            pop a
0177   0520 DA            push d
0178   0521 07 8C 2E      call test9
0179   0524 E7            pop d
0180   0525 FD 43         mov [d], b
0181   0527             ;; for(i = 0; i < nbr_tests; i++) 
0182   0527             _for2_init:
0183   0527 FA EB FF      lea d, [bp + -21] ; $i
0184   052A DA            push d
0185   052B 26 00 00      mov b, $0
0186   052E E7            pop d
0187   052F FD 43         mov [d], b
0188   0531             _for2_cond:
0189   0531 FA EB FF      lea d, [bp + -21] ; $i
0190   0534 2A            mov b, [d]
0191   0535             ; START RELATIONAL
0192   0535 D7            push a
0193   0536 11            mov a, b
0194   0537 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0195   053A 2A            mov b, [d]
0196   053B B0            cmp a, b
0197   053C FD 73         slt ; <= (signed)
0198   053E E4            pop a
0199   053F             ; END RELATIONAL
0200   053F C0 00 00      cmp b, 0
0201   0542 C6 7B 05      je _for2_exit
0202   0545             _for2_block:
0203   0545             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0204   0545 FA ED FF      lea d, [bp + -19] ; $pass
0205   0548 D7            push a
0206   0549 DA            push d
0207   054A FA EB FF      lea d, [bp + -21] ; $i
0208   054D 2A            mov b, [d]
0209   054E E7            pop d
0210   054F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0211   0553 E4            pop a
0212   0554 2A            mov b, [d]
0213   0555 FD AB         swp b
0214   0557 D8            push b
0215   0558 FA EB FF      lea d, [bp + -21] ; $i
0216   055B 2A            mov b, [d]
0217   055C FD AB         swp b
0218   055E D8            push b
0219   055F 26 C9 30      mov b, __s0 ; "Test %d, Result: %d\n"
0220   0562 FD AB         swp b
0221   0564 D8            push b
0222   0565 07 5A 14      call printf
0223   0568 51 06 00      add sp, 6
0224   056B             _for2_update:
0225   056B FA EB FF      lea d, [bp + -21] ; $i
0226   056E 2A            mov b, [d]
0227   056F D8            push b
0228   0570 FD 77         inc b
0229   0572 FA EB FF      lea d, [bp + -21] ; $i
0230   0575 FD 43         mov [d], b
0231   0577 E5            pop b
0232   0578 0A 31 05      jmp _for2_cond
0233   057B             _for2_exit:
0234   057B 05 0B         syscall sys_terminate_proc
0235   057D             
0236   057D             strcpy:
0237   057D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0238   0580             ; $psrc 
0239   0580             ; $pdest 
0240   0580 52 04 00      sub sp, 4
0241   0583             ;; psrc = src; 
0242   0583 FA FF FF      lea d, [bp + -1] ; $psrc
0243   0586 DA            push d
0244   0587 FA 07 00      lea d, [bp + 7] ; $src
0245   058A 2A            mov b, [d]
0246   058B E7            pop d
0247   058C FD 43         mov [d], b
0248   058E             ;; pdest = dest; 
0249   058E FA FD FF      lea d, [bp + -3] ; $pdest
0250   0591 DA            push d
0251   0592 FA 05 00      lea d, [bp + 5] ; $dest
0252   0595 2A            mov b, [d]
0253   0596 E7            pop d
0254   0597 FD 43         mov [d], b
0255   0599             ;; while(*psrc) *pdest++ = *psrc++; 
0256   0599             _while3_cond:
0257   0599 FA FF FF      lea d, [bp + -1] ; $psrc
0258   059C 2A            mov b, [d]
0259   059D 74            mov d, b
0260   059E 32            mov bl, [d]
0261   059F A7 00         mov bh, 0
0262   05A1 C0 00 00      cmp b, 0
0263   05A4 C6 CC 05      je _while3_exit
0264   05A7             _while3_block:
0265   05A7             ;; *pdest++ = *psrc++; 
0266   05A7 FA FD FF      lea d, [bp + -3] ; $pdest
0267   05AA 2A            mov b, [d]
0268   05AB D8            push b
0269   05AC FD 77         inc b
0270   05AE FA FD FF      lea d, [bp + -3] ; $pdest
0271   05B1 FD 43         mov [d], b
0272   05B3 E5            pop b
0273   05B4 D8            push b
0274   05B5 FA FF FF      lea d, [bp + -1] ; $psrc
0275   05B8 2A            mov b, [d]
0276   05B9 D8            push b
0277   05BA FD 77         inc b
0278   05BC FA FF FF      lea d, [bp + -1] ; $psrc
0279   05BF FD 43         mov [d], b
0280   05C1 E5            pop b
0281   05C2 74            mov d, b
0282   05C3 32            mov bl, [d]
0283   05C4 A7 00         mov bh, 0
0284   05C6 E7            pop d
0285   05C7 FD 3E         mov [d], bl
0286   05C9 0A 99 05      jmp _while3_cond
0287   05CC             _while3_exit:
0288   05CC             ;; *pdest = '\0'; 
0289   05CC FA FD FF      lea d, [bp + -3] ; $pdest
0290   05CF 2A            mov b, [d]
0291   05D0 D8            push b
0292   05D1 26 00 00      mov b, $0
0293   05D4 E7            pop d
0294   05D5 FD 3E         mov [d], bl
0295   05D7 F9            leave
0296   05D8 09            ret
0297   05D9             
0298   05D9             strcmp:
0299   05D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0300   05DC             ;; while (*s1 && (*s1 == *s2)) { 
0301   05DC             _while4_cond:
0302   05DC FA 05 00      lea d, [bp + 5] ; $s1
0303   05DF 2A            mov b, [d]
0304   05E0 74            mov d, b
0305   05E1 32            mov bl, [d]
0306   05E2 A7 00         mov bh, 0
0307   05E4 D7            push a
0308   05E5 11            mov a, b
0309   05E6 FA 05 00      lea d, [bp + 5] ; $s1
0310   05E9 2A            mov b, [d]
0311   05EA 74            mov d, b
0312   05EB 32            mov bl, [d]
0313   05EC A7 00         mov bh, 0
0314   05EE             ; START RELATIONAL
0315   05EE D7            push a
0316   05EF 11            mov a, b
0317   05F0 FA 07 00      lea d, [bp + 7] ; $s2
0318   05F3 2A            mov b, [d]
0319   05F4 74            mov d, b
0320   05F5 32            mov bl, [d]
0321   05F6 A7 00         mov bh, 0
0322   05F8 B0            cmp a, b
0323   05F9 FD 71         seq ; ==
0324   05FB E4            pop a
0325   05FC             ; END RELATIONAL
0326   05FC FD A7         sand a, b ; &&
0327   05FE E4            pop a
0328   05FF C0 00 00      cmp b, 0
0329   0602 C6 22 06      je _while4_exit
0330   0605             _while4_block:
0331   0605             ;; s1++; 
0332   0605 FA 05 00      lea d, [bp + 5] ; $s1
0333   0608 2A            mov b, [d]
0334   0609 D8            push b
0335   060A FD 77         inc b
0336   060C FA 05 00      lea d, [bp + 5] ; $s1
0337   060F FD 43         mov [d], b
0338   0611 E5            pop b
0339   0612             ;; s2++; 
0340   0612 FA 07 00      lea d, [bp + 7] ; $s2
0341   0615 2A            mov b, [d]
0342   0616 D8            push b
0343   0617 FD 77         inc b
0344   0619 FA 07 00      lea d, [bp + 7] ; $s2
0345   061C FD 43         mov [d], b
0346   061E E5            pop b
0347   061F 0A DC 05      jmp _while4_cond
0348   0622             _while4_exit:
0349   0622             ;; return *s1 - *s2; 
0350   0622 FA 05 00      lea d, [bp + 5] ; $s1
0351   0625 2A            mov b, [d]
0352   0626 74            mov d, b
0353   0627 32            mov bl, [d]
0354   0628 A7 00         mov bh, 0
0355   062A             ; START TERMS
0356   062A D7            push a
0357   062B 11            mov a, b
0358   062C FA 07 00      lea d, [bp + 7] ; $s2
0359   062F 2A            mov b, [d]
0360   0630 74            mov d, b
0361   0631 32            mov bl, [d]
0362   0632 A7 00         mov bh, 0
0363   0634 60            sub a, b
0364   0635 27            mov b, a
0365   0636 E4            pop a
0366   0637             ; END TERMS
0367   0637 F9            leave
0368   0638 09            ret
0369   0639             
0370   0639             strcat:
0371   0639 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0372   063C             ; $dest_len 
0373   063C             ; $i 
0374   063C 52 04 00      sub sp, 4
0375   063F             ;; dest_len = strlen(dest); 
0376   063F FA FF FF      lea d, [bp + -1] ; $dest_len
0377   0642 DA            push d
0378   0643 FA 05 00      lea d, [bp + 5] ; $dest
0379   0646 2A            mov b, [d]
0380   0647 FD AB         swp b
0381   0649 D8            push b
0382   064A 07 EC 06      call strlen
0383   064D 51 02 00      add sp, 2
0384   0650 E7            pop d
0385   0651 FD 43         mov [d], b
0386   0653             ;; for (i = 0; src[i] != 0; i=i+1) { 
0387   0653             _for5_init:
0388   0653 FA FD FF      lea d, [bp + -3] ; $i
0389   0656 DA            push d
0390   0657 26 00 00      mov b, $0
0391   065A E7            pop d
0392   065B FD 43         mov [d], b
0393   065D             _for5_cond:
0394   065D FA 07 00      lea d, [bp + 7] ; $src
0395   0660 FD 2A         mov d, [d]
0396   0662 D7            push a
0397   0663 DA            push d
0398   0664 FA FD FF      lea d, [bp + -3] ; $i
0399   0667 2A            mov b, [d]
0400   0668 E7            pop d
0401   0669 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0402   066D E4            pop a
0403   066E 32            mov bl, [d]
0404   066F A7 00         mov bh, 0
0405   0671             ; START RELATIONAL
0406   0671 D7            push a
0407   0672 11            mov a, b
0408   0673 26 00 00      mov b, $0
0409   0676 B0            cmp a, b
0410   0677 FD 72         sneq ; !=
0411   0679 E4            pop a
0412   067A             ; END RELATIONAL
0413   067A C0 00 00      cmp b, 0
0414   067D C6 C6 06      je _for5_exit
0415   0680             _for5_block:
0416   0680             ;; dest[dest_len + i] = src[i]; 
0417   0680 FA 05 00      lea d, [bp + 5] ; $dest
0418   0683 FD 2A         mov d, [d]
0419   0685 D7            push a
0420   0686 DA            push d
0421   0687 FA FF FF      lea d, [bp + -1] ; $dest_len
0422   068A 2A            mov b, [d]
0423   068B             ; START TERMS
0424   068B D7            push a
0425   068C 11            mov a, b
0426   068D FA FD FF      lea d, [bp + -3] ; $i
0427   0690 2A            mov b, [d]
0428   0691 56            add b, a
0429   0692 E4            pop a
0430   0693             ; END TERMS
0431   0693 E7            pop d
0432   0694 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0433   0698 E4            pop a
0434   0699 DA            push d
0435   069A FA 07 00      lea d, [bp + 7] ; $src
0436   069D FD 2A         mov d, [d]
0437   069F D7            push a
0438   06A0 DA            push d
0439   06A1 FA FD FF      lea d, [bp + -3] ; $i
0440   06A4 2A            mov b, [d]
0441   06A5 E7            pop d
0442   06A6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0443   06AA E4            pop a
0444   06AB 32            mov bl, [d]
0445   06AC A7 00         mov bh, 0
0446   06AE E7            pop d
0447   06AF FD 3E         mov [d], bl
0448   06B1             _for5_update:
0449   06B1 FA FD FF      lea d, [bp + -3] ; $i
0450   06B4 DA            push d
0451   06B5 FA FD FF      lea d, [bp + -3] ; $i
0452   06B8 2A            mov b, [d]
0453   06B9             ; START TERMS
0454   06B9 D7            push a
0455   06BA 11            mov a, b
0456   06BB 26 01 00      mov b, $1
0457   06BE 56            add b, a
0458   06BF E4            pop a
0459   06C0             ; END TERMS
0460   06C0 E7            pop d
0461   06C1 FD 43         mov [d], b
0462   06C3 0A 5D 06      jmp _for5_cond
0463   06C6             _for5_exit:
0464   06C6             ;; dest[dest_len + i] = 0; 
0465   06C6 FA 05 00      lea d, [bp + 5] ; $dest
0466   06C9 FD 2A         mov d, [d]
0467   06CB D7            push a
0468   06CC DA            push d
0469   06CD FA FF FF      lea d, [bp + -1] ; $dest_len
0470   06D0 2A            mov b, [d]
0471   06D1             ; START TERMS
0472   06D1 D7            push a
0473   06D2 11            mov a, b
0474   06D3 FA FD FF      lea d, [bp + -3] ; $i
0475   06D6 2A            mov b, [d]
0476   06D7 56            add b, a
0477   06D8 E4            pop a
0478   06D9             ; END TERMS
0479   06D9 E7            pop d
0480   06DA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0481   06DE E4            pop a
0482   06DF DA            push d
0483   06E0 26 00 00      mov b, $0
0484   06E3 E7            pop d
0485   06E4 FD 3E         mov [d], bl
0486   06E6             ;; return dest; 
0487   06E6 FA 05 00      lea d, [bp + 5] ; $dest
0488   06E9 2A            mov b, [d]
0489   06EA F9            leave
0490   06EB 09            ret
0491   06EC             
0492   06EC             strlen:
0493   06EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0494   06EF             ; $length 
0495   06EF 52 02 00      sub sp, 2
0496   06F2             ;; length = 0; 
0497   06F2 FA FF FF      lea d, [bp + -1] ; $length
0498   06F5 DA            push d
0499   06F6 26 00 00      mov b, $0
0500   06F9 E7            pop d
0501   06FA FD 43         mov [d], b
0502   06FC             ;; while (str[length] != 0) { 
0503   06FC             _while6_cond:
0504   06FC FA 05 00      lea d, [bp + 5] ; $str
0505   06FF FD 2A         mov d, [d]
0506   0701 D7            push a
0507   0702 DA            push d
0508   0703 FA FF FF      lea d, [bp + -1] ; $length
0509   0706 2A            mov b, [d]
0510   0707 E7            pop d
0511   0708 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0512   070C E4            pop a
0513   070D 32            mov bl, [d]
0514   070E A7 00         mov bh, 0
0515   0710             ; START RELATIONAL
0516   0710 D7            push a
0517   0711 11            mov a, b
0518   0712 26 00 00      mov b, $0
0519   0715 B0            cmp a, b
0520   0716 FD 72         sneq ; !=
0521   0718 E4            pop a
0522   0719             ; END RELATIONAL
0523   0719 C0 00 00      cmp b, 0
0524   071C C6 2F 07      je _while6_exit
0525   071F             _while6_block:
0526   071F             ;; length++; 
0527   071F FA FF FF      lea d, [bp + -1] ; $length
0528   0722 2A            mov b, [d]
0529   0723 D8            push b
0530   0724 FD 77         inc b
0531   0726 FA FF FF      lea d, [bp + -1] ; $length
0532   0729 FD 43         mov [d], b
0533   072B E5            pop b
0534   072C 0A FC 06      jmp _while6_cond
0535   072F             _while6_exit:
0536   072F             ;; return length; 
0537   072F FA FF FF      lea d, [bp + -1] ; $length
0538   0732 2A            mov b, [d]
0539   0733 F9            leave
0540   0734 09            ret
0541   0735             
0542   0735             exit:
0543   0735 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0544   0738             
0545   0738             ; --- BEGIN INLINE ASM BLOCK
0546   0738 05 0B         syscall sys_terminate_proc
0547   073A             ; --- END INLINE ASM BLOCK
0548   073A             
0549   073A F9            leave
0550   073B 09            ret
0551   073C             
0552   073C             atoi:
0553   073C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0554   073F             ; $result 
0555   073F 10 00 00      mov a, $0
0556   0742 45 FF FF      mov [bp + -1], a
0557   0745             ; $sign 
0558   0745 10 01 00      mov a, $1
0559   0748 45 FD FF      mov [bp + -3], a
0560   074B 52 04 00      sub sp, 4
0561   074E             ;; while (*str == ' ') str++; 
0562   074E             _while7_cond:
0563   074E FA 05 00      lea d, [bp + 5] ; $str
0564   0751 2A            mov b, [d]
0565   0752 74            mov d, b
0566   0753 32            mov bl, [d]
0567   0754 A7 00         mov bh, 0
0568   0756             ; START RELATIONAL
0569   0756 D7            push a
0570   0757 11            mov a, b
0571   0758 26 20 00      mov b, $20
0572   075B B0            cmp a, b
0573   075C FD 71         seq ; ==
0574   075E E4            pop a
0575   075F             ; END RELATIONAL
0576   075F C0 00 00      cmp b, 0
0577   0762 C6 75 07      je _while7_exit
0578   0765             _while7_block:
0579   0765             ;; str++; 
0580   0765 FA 05 00      lea d, [bp + 5] ; $str
0581   0768 2A            mov b, [d]
0582   0769 D8            push b
0583   076A FD 77         inc b
0584   076C FA 05 00      lea d, [bp + 5] ; $str
0585   076F FD 43         mov [d], b
0586   0771 E5            pop b
0587   0772 0A 4E 07      jmp _while7_cond
0588   0775             _while7_exit:
0589   0775             ;; if (*str == '-' || *str == '+') { 
0590   0775             _if8_cond:
0591   0775 FA 05 00      lea d, [bp + 5] ; $str
0592   0778 2A            mov b, [d]
0593   0779 74            mov d, b
0594   077A 32            mov bl, [d]
0595   077B A7 00         mov bh, 0
0596   077D             ; START RELATIONAL
0597   077D D7            push a
0598   077E 11            mov a, b
0599   077F 26 2D 00      mov b, $2d
0600   0782 B0            cmp a, b
0601   0783 FD 71         seq ; ==
0602   0785 E4            pop a
0603   0786             ; END RELATIONAL
0604   0786 D7            push a
0605   0787 11            mov a, b
0606   0788 FA 05 00      lea d, [bp + 5] ; $str
0607   078B 2A            mov b, [d]
0608   078C 74            mov d, b
0609   078D 32            mov bl, [d]
0610   078E A7 00         mov bh, 0
0611   0790             ; START RELATIONAL
0612   0790 D7            push a
0613   0791 11            mov a, b
0614   0792 26 2B 00      mov b, $2b
0615   0795 B0            cmp a, b
0616   0796 FD 71         seq ; ==
0617   0798 E4            pop a
0618   0799             ; END RELATIONAL
0619   0799 FD A8         sor a, b ; ||
0620   079B E4            pop a
0621   079C C0 00 00      cmp b, 0
0622   079F C6 D6 07      je _if8_exit
0623   07A2             _if8_true:
0624   07A2             ;; if (*str == '-') sign = -1; 
0625   07A2             _if9_cond:
0626   07A2 FA 05 00      lea d, [bp + 5] ; $str
0627   07A5 2A            mov b, [d]
0628   07A6 74            mov d, b
0629   07A7 32            mov bl, [d]
0630   07A8 A7 00         mov bh, 0
0631   07AA             ; START RELATIONAL
0632   07AA D7            push a
0633   07AB 11            mov a, b
0634   07AC 26 2D 00      mov b, $2d
0635   07AF B0            cmp a, b
0636   07B0 FD 71         seq ; ==
0637   07B2 E4            pop a
0638   07B3             ; END RELATIONAL
0639   07B3 C0 00 00      cmp b, 0
0640   07B6 C6 C6 07      je _if9_exit
0641   07B9             _if9_true:
0642   07B9             ;; sign = -1; 
0643   07B9 FA FD FF      lea d, [bp + -3] ; $sign
0644   07BC DA            push d
0645   07BD 26 FF FF      mov b, $ffff
0646   07C0 E7            pop d
0647   07C1 FD 43         mov [d], b
0648   07C3 0A C6 07      jmp _if9_exit
0649   07C6             _if9_exit:
0650   07C6             ;; str++; 
0651   07C6 FA 05 00      lea d, [bp + 5] ; $str
0652   07C9 2A            mov b, [d]
0653   07CA D8            push b
0654   07CB FD 77         inc b
0655   07CD FA 05 00      lea d, [bp + 5] ; $str
0656   07D0 FD 43         mov [d], b
0657   07D2 E5            pop b
0658   07D3 0A D6 07      jmp _if8_exit
0659   07D6             _if8_exit:
0660   07D6             ;; while (*str >= '0' && *str <= '9') { 
0661   07D6             _while10_cond:
0662   07D6 FA 05 00      lea d, [bp + 5] ; $str
0663   07D9 2A            mov b, [d]
0664   07DA 74            mov d, b
0665   07DB 32            mov bl, [d]
0666   07DC A7 00         mov bh, 0
0667   07DE             ; START RELATIONAL
0668   07DE D7            push a
0669   07DF 11            mov a, b
0670   07E0 26 30 00      mov b, $30
0671   07E3 B0            cmp a, b
0672   07E4 FD 82         sgeu ; >= (unsigned)
0673   07E6 E4            pop a
0674   07E7             ; END RELATIONAL
0675   07E7 D7            push a
0676   07E8 11            mov a, b
0677   07E9 FA 05 00      lea d, [bp + 5] ; $str
0678   07EC 2A            mov b, [d]
0679   07ED 74            mov d, b
0680   07EE 32            mov bl, [d]
0681   07EF A7 00         mov bh, 0
0682   07F1             ; START RELATIONAL
0683   07F1 D7            push a
0684   07F2 11            mov a, b
0685   07F3 26 39 00      mov b, $39
0686   07F6 B0            cmp a, b
0687   07F7 FD 76         sleu ; <= (unsigned)
0688   07F9 E4            pop a
0689   07FA             ; END RELATIONAL
0690   07FA FD A7         sand a, b ; &&
0691   07FC E4            pop a
0692   07FD C0 00 00      cmp b, 0
0693   0800 C6 3B 08      je _while10_exit
0694   0803             _while10_block:
0695   0803             ;; result = result * 10 + (*str - '0'); 
0696   0803 FA FF FF      lea d, [bp + -1] ; $result
0697   0806 DA            push d
0698   0807 FA FF FF      lea d, [bp + -1] ; $result
0699   080A 2A            mov b, [d]
0700   080B             ; START FACTORS
0701   080B D7            push a
0702   080C 11            mov a, b
0703   080D 26 0A 00      mov b, $a
0704   0810 AC            mul a, b ; *
0705   0811 11            mov a, b
0706   0812 27            mov b, a
0707   0813 E4            pop a
0708   0814             ; END FACTORS
0709   0814             ; START TERMS
0710   0814 D7            push a
0711   0815 11            mov a, b
0712   0816 FA 05 00      lea d, [bp + 5] ; $str
0713   0819 2A            mov b, [d]
0714   081A 74            mov d, b
0715   081B 32            mov bl, [d]
0716   081C A7 00         mov bh, 0
0717   081E             ; START TERMS
0718   081E D7            push a
0719   081F 11            mov a, b
0720   0820 26 30 00      mov b, $30
0721   0823 60            sub a, b
0722   0824 27            mov b, a
0723   0825 E4            pop a
0724   0826             ; END TERMS
0725   0826 56            add b, a
0726   0827 E4            pop a
0727   0828             ; END TERMS
0728   0828 E7            pop d
0729   0829 FD 43         mov [d], b
0730   082B             ;; str++; 
0731   082B FA 05 00      lea d, [bp + 5] ; $str
0732   082E 2A            mov b, [d]
0733   082F D8            push b
0734   0830 FD 77         inc b
0735   0832 FA 05 00      lea d, [bp + 5] ; $str
0736   0835 FD 43         mov [d], b
0737   0837 E5            pop b
0738   0838 0A D6 07      jmp _while10_cond
0739   083B             _while10_exit:
0740   083B             ;; return sign * result; 
0741   083B FA FD FF      lea d, [bp + -3] ; $sign
0742   083E 2A            mov b, [d]
0743   083F             ; START FACTORS
0744   083F D7            push a
0745   0840 11            mov a, b
0746   0841 FA FF FF      lea d, [bp + -1] ; $result
0747   0844 2A            mov b, [d]
0748   0845 AC            mul a, b ; *
0749   0846 11            mov a, b
0750   0847 27            mov b, a
0751   0848 E4            pop a
0752   0849             ; END FACTORS
0753   0849 F9            leave
0754   084A 09            ret
0755   084B             
0756   084B             rand:
0757   084B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0758   084E             ; $sec 
0759   084E 52 02 00      sub sp, 2
0760   0851             
0761   0851             ; --- BEGIN INLINE ASM BLOCK
0762   0851 19 00         mov al, 0
0763   0853 05 01         syscall sys_rtc					
0764   0855 1A            mov al, ah
0765   0856 FA FF FF      lea d, [bp + -1] ; $sec
0766   0859 1E            mov al, [d]
0767   085A 22 00         mov ah, 0
0768   085C             ; --- END INLINE ASM BLOCK
0769   085C             
0770   085C             ;; return sec; 
0771   085C FA FF FF      lea d, [bp + -1] ; $sec
0772   085F 2A            mov b, [d]
0773   0860 F9            leave
0774   0861 09            ret
0775   0862             
0776   0862             srand:
0777   0862 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0778   0865 F9            leave
0779   0866 09            ret
0780   0867             
0781   0867             malloc:
0782   0867 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0783   086A F9            leave
0784   086B 09            ret
0785   086C             
0786   086C             calloc:
0787   086C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0788   086F F9            leave
0789   0870 09            ret
0790   0871             
0791   0871             realloc:
0792   0871 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0793   0874 F9            leave
0794   0875 09            ret
0795   0876             
0796   0876             alloc:
0797   0876 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0798   0879             ;; heap_top = heap_top + bytes; 
0799   0879 3B 22 31      mov d, _heap_top ; $heap_top
0800   087C DA            push d
0801   087D 3B 22 31      mov d, _heap_top ; $heap_top
0802   0880 2A            mov b, [d]
0803   0881             ; START TERMS
0804   0881 D7            push a
0805   0882 11            mov a, b
0806   0883 FA 05 00      lea d, [bp + 5] ; $bytes
0807   0886 2A            mov b, [d]
0808   0887 56            add b, a
0809   0888 E4            pop a
0810   0889             ; END TERMS
0811   0889 E7            pop d
0812   088A FD 43         mov [d], b
0813   088C             ;; return heap_top - bytes; 
0814   088C 3B 22 31      mov d, _heap_top ; $heap_top
0815   088F 2A            mov b, [d]
0816   0890             ; START TERMS
0817   0890 D7            push a
0818   0891 11            mov a, b
0819   0892 FA 05 00      lea d, [bp + 5] ; $bytes
0820   0895 2A            mov b, [d]
0821   0896 60            sub a, b
0822   0897 27            mov b, a
0823   0898 E4            pop a
0824   0899             ; END TERMS
0825   0899 F9            leave
0826   089A 09            ret
0827   089B             
0828   089B             free:
0829   089B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0830   089E             ;; return heap_top = heap_top - bytes; 
0831   089E 3B 22 31      mov d, _heap_top ; $heap_top
0832   08A1 DA            push d
0833   08A2 3B 22 31      mov d, _heap_top ; $heap_top
0834   08A5 2A            mov b, [d]
0835   08A6             ; START TERMS
0836   08A6 D7            push a
0837   08A7 11            mov a, b
0838   08A8 FA 05 00      lea d, [bp + 5] ; $bytes
0839   08AB 2A            mov b, [d]
0840   08AC 60            sub a, b
0841   08AD 27            mov b, a
0842   08AE E4            pop a
0843   08AF             ; END TERMS
0844   08AF E7            pop d
0845   08B0 FD 43         mov [d], b
0846   08B2 F9            leave
0847   08B3 09            ret
0848   08B4             
0849   08B4             base64_encode:
0850   08B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0851   08B7             ; $i 
0852   08B7 10 00 00      mov a, $0
0853   08BA 45 FF FF      mov [bp + -1], a
0854   08BD             ; $j 
0855   08BD 10 00 00      mov a, $0
0856   08C0 45 FD FF      mov [bp + -3], a
0857   08C3             ; $k 
0858   08C3             ; $input_len 
0859   08C3             ; $input_buffer 
0860   08C3             ; $output_buffer 
0861   08C3 52 0F 00      sub sp, 15
0862   08C6             ;; input_len = strlen(input); 
0863   08C6 FA F9 FF      lea d, [bp + -7] ; $input_len
0864   08C9 DA            push d
0865   08CA FA 05 00      lea d, [bp + 5] ; $input
0866   08CD 2A            mov b, [d]
0867   08CE FD AB         swp b
0868   08D0 D8            push b
0869   08D1 07 EC 06      call strlen
0870   08D4 51 02 00      add sp, 2
0871   08D7 E7            pop d
0872   08D8 FD 43         mov [d], b
0873   08DA             ;; while (input_len--) { 
0874   08DA             _while11_cond:
0875   08DA FA F9 FF      lea d, [bp + -7] ; $input_len
0876   08DD 2A            mov b, [d]
0877   08DE D8            push b
0878   08DF FD 7D         dec b
0879   08E1 FA F9 FF      lea d, [bp + -7] ; $input_len
0880   08E4 FD 43         mov [d], b
0881   08E6 E5            pop b
0882   08E7 C0 00 00      cmp b, 0
0883   08EA C6 9E 0A      je _while11_exit
0884   08ED             _while11_block:
0885   08ED             ;; input_buffer[i++] = *(input++); 
0886   08ED FA F6 FF      lea d, [bp + -10] ; $input_buffer
0887   08F0 D7            push a
0888   08F1 DA            push d
0889   08F2 FA FF FF      lea d, [bp + -1] ; $i
0890   08F5 2A            mov b, [d]
0891   08F6 D8            push b
0892   08F7 FD 77         inc b
0893   08F9 FA FF FF      lea d, [bp + -1] ; $i
0894   08FC FD 43         mov [d], b
0895   08FE E5            pop b
0896   08FF E7            pop d
0897   0900 5A            add d, b
0898   0901 E4            pop a
0899   0902 DA            push d
0900   0903 FA 05 00      lea d, [bp + 5] ; $input
0901   0906 2A            mov b, [d]
0902   0907 D8            push b
0903   0908 FD 77         inc b
0904   090A FA 05 00      lea d, [bp + 5] ; $input
0905   090D FD 43         mov [d], b
0906   090F E5            pop b
0907   0910 74            mov d, b
0908   0911 32            mov bl, [d]
0909   0912 A7 00         mov bh, 0
0910   0914 E7            pop d
0911   0915 FD 3E         mov [d], bl
0912   0917             ;; if (i == 3) { 
0913   0917             _if12_cond:
0914   0917 FA FF FF      lea d, [bp + -1] ; $i
0915   091A 2A            mov b, [d]
0916   091B             ; START RELATIONAL
0917   091B D7            push a
0918   091C 11            mov a, b
0919   091D 26 03 00      mov b, $3
0920   0920 B0            cmp a, b
0921   0921 FD 71         seq ; ==
0922   0923 E4            pop a
0923   0924             ; END RELATIONAL
0924   0924 C0 00 00      cmp b, 0
0925   0927 C6 9B 0A      je _if12_exit
0926   092A             _if12_true:
0927   092A             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0928   092A FA F2 FF      lea d, [bp + -14] ; $output_buffer
0929   092D D7            push a
0930   092E DA            push d
0931   092F 26 00 00      mov b, $0
0932   0932 E7            pop d
0933   0933 5A            add d, b
0934   0934 E4            pop a
0935   0935 DA            push d
0936   0936 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0937   0939 D7            push a
0938   093A DA            push d
0939   093B 26 00 00      mov b, $0
0940   093E E7            pop d
0941   093F 5A            add d, b
0942   0940 E4            pop a
0943   0941 32            mov bl, [d]
0944   0942 A7 00         mov bh, 0
0945   0944 D7            push a
0946   0945 11            mov a, b
0947   0946 26 FC 00      mov b, $fc
0948   0949 86            and a, b ; &
0949   094A 27            mov b, a
0950   094B E4            pop a
0951   094C             ; START SHIFT
0952   094C D7            push a
0953   094D 11            mov a, b
0954   094E 26 02 00      mov b, $2
0955   0951 FD 39         mov c, b
0956   0953 A5            ashr a, cl
0957   0954 27            mov b, a
0958   0955 E4            pop a
0959   0956             ; END SHIFT
0960   0956 E7            pop d
0961   0957 FD 3E         mov [d], bl
0962   0959             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0963   0959 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0964   095C D7            push a
0965   095D DA            push d
0966   095E 26 01 00      mov b, $1
0967   0961 E7            pop d
0968   0962 5A            add d, b
0969   0963 E4            pop a
0970   0964 DA            push d
0971   0965 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0972   0968 D7            push a
0973   0969 DA            push d
0974   096A 26 00 00      mov b, $0
0975   096D E7            pop d
0976   096E 5A            add d, b
0977   096F E4            pop a
0978   0970 32            mov bl, [d]
0979   0971 A7 00         mov bh, 0
0980   0973 D7            push a
0981   0974 11            mov a, b
0982   0975 26 03 00      mov b, $3
0983   0978 86            and a, b ; &
0984   0979 27            mov b, a
0985   097A E4            pop a
0986   097B             ; START SHIFT
0987   097B D7            push a
0988   097C 11            mov a, b
0989   097D 26 04 00      mov b, $4
0990   0980 FD 39         mov c, b
0991   0982 9D            shl a, cl
0992   0983 27            mov b, a
0993   0984 E4            pop a
0994   0985             ; END SHIFT
0995   0985             ; START TERMS
0996   0985 D7            push a
0997   0986 11            mov a, b
0998   0987 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0999   098A D7            push a
1000   098B DA            push d
1001   098C 26 01 00      mov b, $1
1002   098F E7            pop d
1003   0990 5A            add d, b
1004   0991 E4            pop a
1005   0992 32            mov bl, [d]
1006   0993 A7 00         mov bh, 0
1007   0995 D7            push a
1008   0996 11            mov a, b
1009   0997 26 F0 00      mov b, $f0
1010   099A 86            and a, b ; &
1011   099B 27            mov b, a
1012   099C E4            pop a
1013   099D             ; START SHIFT
1014   099D D7            push a
1015   099E 11            mov a, b
1016   099F 26 04 00      mov b, $4
1017   09A2 FD 39         mov c, b
1018   09A4 A5            ashr a, cl
1019   09A5 27            mov b, a
1020   09A6 E4            pop a
1021   09A7             ; END SHIFT
1022   09A7 56            add b, a
1023   09A8 E4            pop a
1024   09A9             ; END TERMS
1025   09A9 E7            pop d
1026   09AA FD 3E         mov [d], bl
1027   09AC             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1028   09AC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1029   09AF D7            push a
1030   09B0 DA            push d
1031   09B1 26 02 00      mov b, $2
1032   09B4 E7            pop d
1033   09B5 5A            add d, b
1034   09B6 E4            pop a
1035   09B7 DA            push d
1036   09B8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1037   09BB D7            push a
1038   09BC DA            push d
1039   09BD 26 01 00      mov b, $1
1040   09C0 E7            pop d
1041   09C1 5A            add d, b
1042   09C2 E4            pop a
1043   09C3 32            mov bl, [d]
1044   09C4 A7 00         mov bh, 0
1045   09C6 D7            push a
1046   09C7 11            mov a, b
1047   09C8 26 0F 00      mov b, $f
1048   09CB 86            and a, b ; &
1049   09CC 27            mov b, a
1050   09CD E4            pop a
1051   09CE             ; START SHIFT
1052   09CE D7            push a
1053   09CF 11            mov a, b
1054   09D0 26 02 00      mov b, $2
1055   09D3 FD 39         mov c, b
1056   09D5 9D            shl a, cl
1057   09D6 27            mov b, a
1058   09D7 E4            pop a
1059   09D8             ; END SHIFT
1060   09D8             ; START TERMS
1061   09D8 D7            push a
1062   09D9 11            mov a, b
1063   09DA FA F6 FF      lea d, [bp + -10] ; $input_buffer
1064   09DD D7            push a
1065   09DE DA            push d
1066   09DF 26 02 00      mov b, $2
1067   09E2 E7            pop d
1068   09E3 5A            add d, b
1069   09E4 E4            pop a
1070   09E5 32            mov bl, [d]
1071   09E6 A7 00         mov bh, 0
1072   09E8 D7            push a
1073   09E9 11            mov a, b
1074   09EA 26 C0 00      mov b, $c0
1075   09ED 86            and a, b ; &
1076   09EE 27            mov b, a
1077   09EF E4            pop a
1078   09F0             ; START SHIFT
1079   09F0 D7            push a
1080   09F1 11            mov a, b
1081   09F2 26 06 00      mov b, $6
1082   09F5 FD 39         mov c, b
1083   09F7 A5            ashr a, cl
1084   09F8 27            mov b, a
1085   09F9 E4            pop a
1086   09FA             ; END SHIFT
1087   09FA 56            add b, a
1088   09FB E4            pop a
1089   09FC             ; END TERMS
1090   09FC E7            pop d
1091   09FD FD 3E         mov [d], bl
1092   09FF             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
1093   09FF FA F2 FF      lea d, [bp + -14] ; $output_buffer
1094   0A02 D7            push a
1095   0A03 DA            push d
1096   0A04 26 03 00      mov b, $3
1097   0A07 E7            pop d
1098   0A08 5A            add d, b
1099   0A09 E4            pop a
1100   0A0A DA            push d
1101   0A0B FA F6 FF      lea d, [bp + -10] ; $input_buffer
1102   0A0E D7            push a
1103   0A0F DA            push d
1104   0A10 26 02 00      mov b, $2
1105   0A13 E7            pop d
1106   0A14 5A            add d, b
1107   0A15 E4            pop a
1108   0A16 32            mov bl, [d]
1109   0A17 A7 00         mov bh, 0
1110   0A19 D7            push a
1111   0A1A 11            mov a, b
1112   0A1B 26 3F 00      mov b, $3f
1113   0A1E 86            and a, b ; &
1114   0A1F 27            mov b, a
1115   0A20 E4            pop a
1116   0A21 E7            pop d
1117   0A22 FD 3E         mov [d], bl
1118   0A24             ;; for (i = 0; i < 4; i++) { 
1119   0A24             _for13_init:
1120   0A24 FA FF FF      lea d, [bp + -1] ; $i
1121   0A27 DA            push d
1122   0A28 26 00 00      mov b, $0
1123   0A2B E7            pop d
1124   0A2C FD 43         mov [d], b
1125   0A2E             _for13_cond:
1126   0A2E FA FF FF      lea d, [bp + -1] ; $i
1127   0A31 2A            mov b, [d]
1128   0A32             ; START RELATIONAL
1129   0A32 D7            push a
1130   0A33 11            mov a, b
1131   0A34 26 04 00      mov b, $4
1132   0A37 B0            cmp a, b
1133   0A38 FD 73         slt ; <= (signed)
1134   0A3A E4            pop a
1135   0A3B             ; END RELATIONAL
1136   0A3B C0 00 00      cmp b, 0
1137   0A3E C6 8E 0A      je _for13_exit
1138   0A41             _for13_block:
1139   0A41             ;; output[j++] = base64_table[output_buffer[i]]; 
1140   0A41 FA 07 00      lea d, [bp + 7] ; $output
1141   0A44 FD 2A         mov d, [d]
1142   0A46 D7            push a
1143   0A47 DA            push d
1144   0A48 FA FD FF      lea d, [bp + -3] ; $j
1145   0A4B 2A            mov b, [d]
1146   0A4C D8            push b
1147   0A4D FD 77         inc b
1148   0A4F FA FD FF      lea d, [bp + -3] ; $j
1149   0A52 FD 43         mov [d], b
1150   0A54 E5            pop b
1151   0A55 E7            pop d
1152   0A56 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1153   0A5A E4            pop a
1154   0A5B DA            push d
1155   0A5C 3B 37 30      mov d, _base64_table ; $base64_table
1156   0A5F FD 2A         mov d, [d]
1157   0A61 D7            push a
1158   0A62 DA            push d
1159   0A63 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1160   0A66 D7            push a
1161   0A67 DA            push d
1162   0A68 FA FF FF      lea d, [bp + -1] ; $i
1163   0A6B 2A            mov b, [d]
1164   0A6C E7            pop d
1165   0A6D 5A            add d, b
1166   0A6E E4            pop a
1167   0A6F 32            mov bl, [d]
1168   0A70 A7 00         mov bh, 0
1169   0A72 E7            pop d
1170   0A73 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1171   0A77 E4            pop a
1172   0A78 32            mov bl, [d]
1173   0A79 A7 00         mov bh, 0
1174   0A7B E7            pop d
1175   0A7C FD 3E         mov [d], bl
1176   0A7E             _for13_update:
1177   0A7E FA FF FF      lea d, [bp + -1] ; $i
1178   0A81 2A            mov b, [d]
1179   0A82 D8            push b
1180   0A83 FD 77         inc b
1181   0A85 FA FF FF      lea d, [bp + -1] ; $i
1182   0A88 FD 43         mov [d], b
1183   0A8A E5            pop b
1184   0A8B 0A 2E 0A      jmp _for13_cond
1185   0A8E             _for13_exit:
1186   0A8E             ;; i = 0; 
1187   0A8E FA FF FF      lea d, [bp + -1] ; $i
1188   0A91 DA            push d
1189   0A92 26 00 00      mov b, $0
1190   0A95 E7            pop d
1191   0A96 FD 43         mov [d], b
1192   0A98 0A 9B 0A      jmp _if12_exit
1193   0A9B             _if12_exit:
1194   0A9B 0A DA 08      jmp _while11_cond
1195   0A9E             _while11_exit:
1196   0A9E             ;; if (i) { 
1197   0A9E             _if14_cond:
1198   0A9E FA FF FF      lea d, [bp + -1] ; $i
1199   0AA1 2A            mov b, [d]
1200   0AA2 C0 00 00      cmp b, 0
1201   0AA5 C6 73 0C      je _if14_exit
1202   0AA8             _if14_true:
1203   0AA8             ;; for (k = i; k < 3; k++) { 
1204   0AA8             _for15_init:
1205   0AA8 FA FB FF      lea d, [bp + -5] ; $k
1206   0AAB DA            push d
1207   0AAC FA FF FF      lea d, [bp + -1] ; $i
1208   0AAF 2A            mov b, [d]
1209   0AB0 E7            pop d
1210   0AB1 FD 43         mov [d], b
1211   0AB3             _for15_cond:
1212   0AB3 FA FB FF      lea d, [bp + -5] ; $k
1213   0AB6 2A            mov b, [d]
1214   0AB7             ; START RELATIONAL
1215   0AB7 D7            push a
1216   0AB8 11            mov a, b
1217   0AB9 26 03 00      mov b, $3
1218   0ABC B0            cmp a, b
1219   0ABD FD 73         slt ; <= (signed)
1220   0ABF E4            pop a
1221   0AC0             ; END RELATIONAL
1222   0AC0 C0 00 00      cmp b, 0
1223   0AC3 C6 E9 0A      je _for15_exit
1224   0AC6             _for15_block:
1225   0AC6             ;; input_buffer[k] = '\0'; 
1226   0AC6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1227   0AC9 D7            push a
1228   0ACA DA            push d
1229   0ACB FA FB FF      lea d, [bp + -5] ; $k
1230   0ACE 2A            mov b, [d]
1231   0ACF E7            pop d
1232   0AD0 5A            add d, b
1233   0AD1 E4            pop a
1234   0AD2 DA            push d
1235   0AD3 26 00 00      mov b, $0
1236   0AD6 E7            pop d
1237   0AD7 FD 3E         mov [d], bl
1238   0AD9             _for15_update:
1239   0AD9 FA FB FF      lea d, [bp + -5] ; $k
1240   0ADC 2A            mov b, [d]
1241   0ADD D8            push b
1242   0ADE FD 77         inc b
1243   0AE0 FA FB FF      lea d, [bp + -5] ; $k
1244   0AE3 FD 43         mov [d], b
1245   0AE5 E5            pop b
1246   0AE6 0A B3 0A      jmp _for15_cond
1247   0AE9             _for15_exit:
1248   0AE9             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1249   0AE9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1250   0AEC D7            push a
1251   0AED DA            push d
1252   0AEE 26 00 00      mov b, $0
1253   0AF1 E7            pop d
1254   0AF2 5A            add d, b
1255   0AF3 E4            pop a
1256   0AF4 DA            push d
1257   0AF5 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1258   0AF8 D7            push a
1259   0AF9 DA            push d
1260   0AFA 26 00 00      mov b, $0
1261   0AFD E7            pop d
1262   0AFE 5A            add d, b
1263   0AFF E4            pop a
1264   0B00 32            mov bl, [d]
1265   0B01 A7 00         mov bh, 0
1266   0B03 D7            push a
1267   0B04 11            mov a, b
1268   0B05 26 FC 00      mov b, $fc
1269   0B08 86            and a, b ; &
1270   0B09 27            mov b, a
1271   0B0A E4            pop a
1272   0B0B             ; START SHIFT
1273   0B0B D7            push a
1274   0B0C 11            mov a, b
1275   0B0D 26 02 00      mov b, $2
1276   0B10 FD 39         mov c, b
1277   0B12 A5            ashr a, cl
1278   0B13 27            mov b, a
1279   0B14 E4            pop a
1280   0B15             ; END SHIFT
1281   0B15 E7            pop d
1282   0B16 FD 3E         mov [d], bl
1283   0B18             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1284   0B18 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1285   0B1B D7            push a
1286   0B1C DA            push d
1287   0B1D 26 01 00      mov b, $1
1288   0B20 E7            pop d
1289   0B21 5A            add d, b
1290   0B22 E4            pop a
1291   0B23 DA            push d
1292   0B24 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1293   0B27 D7            push a
1294   0B28 DA            push d
1295   0B29 26 00 00      mov b, $0
1296   0B2C E7            pop d
1297   0B2D 5A            add d, b
1298   0B2E E4            pop a
1299   0B2F 32            mov bl, [d]
1300   0B30 A7 00         mov bh, 0
1301   0B32 D7            push a
1302   0B33 11            mov a, b
1303   0B34 26 03 00      mov b, $3
1304   0B37 86            and a, b ; &
1305   0B38 27            mov b, a
1306   0B39 E4            pop a
1307   0B3A             ; START SHIFT
1308   0B3A D7            push a
1309   0B3B 11            mov a, b
1310   0B3C 26 04 00      mov b, $4
1311   0B3F FD 39         mov c, b
1312   0B41 9D            shl a, cl
1313   0B42 27            mov b, a
1314   0B43 E4            pop a
1315   0B44             ; END SHIFT
1316   0B44             ; START TERMS
1317   0B44 D7            push a
1318   0B45 11            mov a, b
1319   0B46 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1320   0B49 D7            push a
1321   0B4A DA            push d
1322   0B4B 26 01 00      mov b, $1
1323   0B4E E7            pop d
1324   0B4F 5A            add d, b
1325   0B50 E4            pop a
1326   0B51 32            mov bl, [d]
1327   0B52 A7 00         mov bh, 0
1328   0B54 D7            push a
1329   0B55 11            mov a, b
1330   0B56 26 F0 00      mov b, $f0
1331   0B59 86            and a, b ; &
1332   0B5A 27            mov b, a
1333   0B5B E4            pop a
1334   0B5C             ; START SHIFT
1335   0B5C D7            push a
1336   0B5D 11            mov a, b
1337   0B5E 26 04 00      mov b, $4
1338   0B61 FD 39         mov c, b
1339   0B63 A5            ashr a, cl
1340   0B64 27            mov b, a
1341   0B65 E4            pop a
1342   0B66             ; END SHIFT
1343   0B66 56            add b, a
1344   0B67 E4            pop a
1345   0B68             ; END TERMS
1346   0B68 E7            pop d
1347   0B69 FD 3E         mov [d], bl
1348   0B6B             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1349   0B6B FA F2 FF      lea d, [bp + -14] ; $output_buffer
1350   0B6E D7            push a
1351   0B6F DA            push d
1352   0B70 26 02 00      mov b, $2
1353   0B73 E7            pop d
1354   0B74 5A            add d, b
1355   0B75 E4            pop a
1356   0B76 DA            push d
1357   0B77 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1358   0B7A D7            push a
1359   0B7B DA            push d
1360   0B7C 26 01 00      mov b, $1
1361   0B7F E7            pop d
1362   0B80 5A            add d, b
1363   0B81 E4            pop a
1364   0B82 32            mov bl, [d]
1365   0B83 A7 00         mov bh, 0
1366   0B85 D7            push a
1367   0B86 11            mov a, b
1368   0B87 26 0F 00      mov b, $f
1369   0B8A 86            and a, b ; &
1370   0B8B 27            mov b, a
1371   0B8C E4            pop a
1372   0B8D             ; START SHIFT
1373   0B8D D7            push a
1374   0B8E 11            mov a, b
1375   0B8F 26 02 00      mov b, $2
1376   0B92 FD 39         mov c, b
1377   0B94 9D            shl a, cl
1378   0B95 27            mov b, a
1379   0B96 E4            pop a
1380   0B97             ; END SHIFT
1381   0B97             ; START TERMS
1382   0B97 D7            push a
1383   0B98 11            mov a, b
1384   0B99 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1385   0B9C D7            push a
1386   0B9D DA            push d
1387   0B9E 26 02 00      mov b, $2
1388   0BA1 E7            pop d
1389   0BA2 5A            add d, b
1390   0BA3 E4            pop a
1391   0BA4 32            mov bl, [d]
1392   0BA5 A7 00         mov bh, 0
1393   0BA7 D7            push a
1394   0BA8 11            mov a, b
1395   0BA9 26 C0 00      mov b, $c0
1396   0BAC 86            and a, b ; &
1397   0BAD 27            mov b, a
1398   0BAE E4            pop a
1399   0BAF             ; START SHIFT
1400   0BAF D7            push a
1401   0BB0 11            mov a, b
1402   0BB1 26 06 00      mov b, $6
1403   0BB4 FD 39         mov c, b
1404   0BB6 A5            ashr a, cl
1405   0BB7 27            mov b, a
1406   0BB8 E4            pop a
1407   0BB9             ; END SHIFT
1408   0BB9 56            add b, a
1409   0BBA E4            pop a
1410   0BBB             ; END TERMS
1411   0BBB E7            pop d
1412   0BBC FD 3E         mov [d], bl
1413   0BBE             ;; for (k = 0; k < i + 1; k++) { 
1414   0BBE             _for16_init:
1415   0BBE FA FB FF      lea d, [bp + -5] ; $k
1416   0BC1 DA            push d
1417   0BC2 26 00 00      mov b, $0
1418   0BC5 E7            pop d
1419   0BC6 FD 43         mov [d], b
1420   0BC8             _for16_cond:
1421   0BC8 FA FB FF      lea d, [bp + -5] ; $k
1422   0BCB 2A            mov b, [d]
1423   0BCC             ; START RELATIONAL
1424   0BCC D7            push a
1425   0BCD 11            mov a, b
1426   0BCE FA FF FF      lea d, [bp + -1] ; $i
1427   0BD1 2A            mov b, [d]
1428   0BD2             ; START TERMS
1429   0BD2 D7            push a
1430   0BD3 11            mov a, b
1431   0BD4 26 01 00      mov b, $1
1432   0BD7 56            add b, a
1433   0BD8 E4            pop a
1434   0BD9             ; END TERMS
1435   0BD9 B0            cmp a, b
1436   0BDA FD 73         slt ; <= (signed)
1437   0BDC E4            pop a
1438   0BDD             ; END RELATIONAL
1439   0BDD C0 00 00      cmp b, 0
1440   0BE0 C6 30 0C      je _for16_exit
1441   0BE3             _for16_block:
1442   0BE3             ;; output[j++] = base64_table[output_buffer[k]]; 
1443   0BE3 FA 07 00      lea d, [bp + 7] ; $output
1444   0BE6 FD 2A         mov d, [d]
1445   0BE8 D7            push a
1446   0BE9 DA            push d
1447   0BEA FA FD FF      lea d, [bp + -3] ; $j
1448   0BED 2A            mov b, [d]
1449   0BEE D8            push b
1450   0BEF FD 77         inc b
1451   0BF1 FA FD FF      lea d, [bp + -3] ; $j
1452   0BF4 FD 43         mov [d], b
1453   0BF6 E5            pop b
1454   0BF7 E7            pop d
1455   0BF8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1456   0BFC E4            pop a
1457   0BFD DA            push d
1458   0BFE 3B 37 30      mov d, _base64_table ; $base64_table
1459   0C01 FD 2A         mov d, [d]
1460   0C03 D7            push a
1461   0C04 DA            push d
1462   0C05 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1463   0C08 D7            push a
1464   0C09 DA            push d
1465   0C0A FA FB FF      lea d, [bp + -5] ; $k
1466   0C0D 2A            mov b, [d]
1467   0C0E E7            pop d
1468   0C0F 5A            add d, b
1469   0C10 E4            pop a
1470   0C11 32            mov bl, [d]
1471   0C12 A7 00         mov bh, 0
1472   0C14 E7            pop d
1473   0C15 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1474   0C19 E4            pop a
1475   0C1A 32            mov bl, [d]
1476   0C1B A7 00         mov bh, 0
1477   0C1D E7            pop d
1478   0C1E FD 3E         mov [d], bl
1479   0C20             _for16_update:
1480   0C20 FA FB FF      lea d, [bp + -5] ; $k
1481   0C23 2A            mov b, [d]
1482   0C24 D8            push b
1483   0C25 FD 77         inc b
1484   0C27 FA FB FF      lea d, [bp + -5] ; $k
1485   0C2A FD 43         mov [d], b
1486   0C2C E5            pop b
1487   0C2D 0A C8 0B      jmp _for16_cond
1488   0C30             _for16_exit:
1489   0C30             ;; while (i++ < 3) { 
1490   0C30             _while17_cond:
1491   0C30 FA FF FF      lea d, [bp + -1] ; $i
1492   0C33 2A            mov b, [d]
1493   0C34 D8            push b
1494   0C35 FD 77         inc b
1495   0C37 FA FF FF      lea d, [bp + -1] ; $i
1496   0C3A FD 43         mov [d], b
1497   0C3C E5            pop b
1498   0C3D             ; START RELATIONAL
1499   0C3D D7            push a
1500   0C3E 11            mov a, b
1501   0C3F 26 03 00      mov b, $3
1502   0C42 B0            cmp a, b
1503   0C43 FD 73         slt ; <= (signed)
1504   0C45 E4            pop a
1505   0C46             ; END RELATIONAL
1506   0C46 C0 00 00      cmp b, 0
1507   0C49 C6 70 0C      je _while17_exit
1508   0C4C             _while17_block:
1509   0C4C             ;; output[j++] = '='; 
1510   0C4C FA 07 00      lea d, [bp + 7] ; $output
1511   0C4F FD 2A         mov d, [d]
1512   0C51 D7            push a
1513   0C52 DA            push d
1514   0C53 FA FD FF      lea d, [bp + -3] ; $j
1515   0C56 2A            mov b, [d]
1516   0C57 D8            push b
1517   0C58 FD 77         inc b
1518   0C5A FA FD FF      lea d, [bp + -3] ; $j
1519   0C5D FD 43         mov [d], b
1520   0C5F E5            pop b
1521   0C60 E7            pop d
1522   0C61 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1523   0C65 E4            pop a
1524   0C66 DA            push d
1525   0C67 26 3D 00      mov b, $3d
1526   0C6A E7            pop d
1527   0C6B FD 3E         mov [d], bl
1528   0C6D 0A 30 0C      jmp _while17_cond
1529   0C70             _while17_exit:
1530   0C70 0A 73 0C      jmp _if14_exit
1531   0C73             _if14_exit:
1532   0C73             ;; output[j] = '\0'; 
1533   0C73 FA 07 00      lea d, [bp + 7] ; $output
1534   0C76 FD 2A         mov d, [d]
1535   0C78 D7            push a
1536   0C79 DA            push d
1537   0C7A FA FD FF      lea d, [bp + -3] ; $j
1538   0C7D 2A            mov b, [d]
1539   0C7E E7            pop d
1540   0C7F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1541   0C83 E4            pop a
1542   0C84 DA            push d
1543   0C85 26 00 00      mov b, $0
1544   0C88 E7            pop d
1545   0C89 FD 3E         mov [d], bl
1546   0C8B F9            leave
1547   0C8C 09            ret
1548   0C8D             
1549   0C8D             base64_char_value:
1550   0C8D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1551   0C90             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1552   0C90             _if18_cond:
1553   0C90 FA 05 00      lea d, [bp + 5] ; $c
1554   0C93 32            mov bl, [d]
1555   0C94 A7 00         mov bh, 0
1556   0C96             ; START RELATIONAL
1557   0C96 D7            push a
1558   0C97 11            mov a, b
1559   0C98 26 41 00      mov b, $41
1560   0C9B B0            cmp a, b
1561   0C9C FD 80         sge ; >=
1562   0C9E E4            pop a
1563   0C9F             ; END RELATIONAL
1564   0C9F D7            push a
1565   0CA0 11            mov a, b
1566   0CA1 FA 05 00      lea d, [bp + 5] ; $c
1567   0CA4 32            mov bl, [d]
1568   0CA5 A7 00         mov bh, 0
1569   0CA7             ; START RELATIONAL
1570   0CA7 D7            push a
1571   0CA8 11            mov a, b
1572   0CA9 26 5A 00      mov b, $5a
1573   0CAC B0            cmp a, b
1574   0CAD FD 74         sle ; <=
1575   0CAF E4            pop a
1576   0CB0             ; END RELATIONAL
1577   0CB0 FD A7         sand a, b ; &&
1578   0CB2 E4            pop a
1579   0CB3 C0 00 00      cmp b, 0
1580   0CB6 C6 CC 0C      je _if18_exit
1581   0CB9             _if18_true:
1582   0CB9             ;; return c - 'A'; 
1583   0CB9 FA 05 00      lea d, [bp + 5] ; $c
1584   0CBC 32            mov bl, [d]
1585   0CBD A7 00         mov bh, 0
1586   0CBF             ; START TERMS
1587   0CBF D7            push a
1588   0CC0 11            mov a, b
1589   0CC1 26 41 00      mov b, $41
1590   0CC4 60            sub a, b
1591   0CC5 27            mov b, a
1592   0CC6 E4            pop a
1593   0CC7             ; END TERMS
1594   0CC7 F9            leave
1595   0CC8 09            ret
1596   0CC9 0A CC 0C      jmp _if18_exit
1597   0CCC             _if18_exit:
1598   0CCC             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1599   0CCC             _if19_cond:
1600   0CCC FA 05 00      lea d, [bp + 5] ; $c
1601   0CCF 32            mov bl, [d]
1602   0CD0 A7 00         mov bh, 0
1603   0CD2             ; START RELATIONAL
1604   0CD2 D7            push a
1605   0CD3 11            mov a, b
1606   0CD4 26 61 00      mov b, $61
1607   0CD7 B0            cmp a, b
1608   0CD8 FD 80         sge ; >=
1609   0CDA E4            pop a
1610   0CDB             ; END RELATIONAL
1611   0CDB D7            push a
1612   0CDC 11            mov a, b
1613   0CDD FA 05 00      lea d, [bp + 5] ; $c
1614   0CE0 32            mov bl, [d]
1615   0CE1 A7 00         mov bh, 0
1616   0CE3             ; START RELATIONAL
1617   0CE3 D7            push a
1618   0CE4 11            mov a, b
1619   0CE5 26 7A 00      mov b, $7a
1620   0CE8 B0            cmp a, b
1621   0CE9 FD 74         sle ; <=
1622   0CEB E4            pop a
1623   0CEC             ; END RELATIONAL
1624   0CEC FD A7         sand a, b ; &&
1625   0CEE E4            pop a
1626   0CEF C0 00 00      cmp b, 0
1627   0CF2 C6 0D 0D      je _if19_exit
1628   0CF5             _if19_true:
1629   0CF5             ;; return c - 'a' + 26; 
1630   0CF5 FA 05 00      lea d, [bp + 5] ; $c
1631   0CF8 32            mov bl, [d]
1632   0CF9 A7 00         mov bh, 0
1633   0CFB             ; START TERMS
1634   0CFB D7            push a
1635   0CFC 11            mov a, b
1636   0CFD 26 61 00      mov b, $61
1637   0D00 60            sub a, b
1638   0D01 27            mov b, a
1639   0D02 11            mov a, b
1640   0D03 26 1A 00      mov b, $1a
1641   0D06 56            add b, a
1642   0D07 E4            pop a
1643   0D08             ; END TERMS
1644   0D08 F9            leave
1645   0D09 09            ret
1646   0D0A 0A 0D 0D      jmp _if19_exit
1647   0D0D             _if19_exit:
1648   0D0D             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1649   0D0D             _if20_cond:
1650   0D0D FA 05 00      lea d, [bp + 5] ; $c
1651   0D10 32            mov bl, [d]
1652   0D11 A7 00         mov bh, 0
1653   0D13             ; START RELATIONAL
1654   0D13 D7            push a
1655   0D14 11            mov a, b
1656   0D15 26 30 00      mov b, $30
1657   0D18 B0            cmp a, b
1658   0D19 FD 80         sge ; >=
1659   0D1B E4            pop a
1660   0D1C             ; END RELATIONAL
1661   0D1C D7            push a
1662   0D1D 11            mov a, b
1663   0D1E FA 05 00      lea d, [bp + 5] ; $c
1664   0D21 32            mov bl, [d]
1665   0D22 A7 00         mov bh, 0
1666   0D24             ; START RELATIONAL
1667   0D24 D7            push a
1668   0D25 11            mov a, b
1669   0D26 26 39 00      mov b, $39
1670   0D29 B0            cmp a, b
1671   0D2A FD 74         sle ; <=
1672   0D2C E4            pop a
1673   0D2D             ; END RELATIONAL
1674   0D2D FD A7         sand a, b ; &&
1675   0D2F E4            pop a
1676   0D30 C0 00 00      cmp b, 0
1677   0D33 C6 4E 0D      je _if20_exit
1678   0D36             _if20_true:
1679   0D36             ;; return c - '0' + 52; 
1680   0D36 FA 05 00      lea d, [bp + 5] ; $c
1681   0D39 32            mov bl, [d]
1682   0D3A A7 00         mov bh, 0
1683   0D3C             ; START TERMS
1684   0D3C D7            push a
1685   0D3D 11            mov a, b
1686   0D3E 26 30 00      mov b, $30
1687   0D41 60            sub a, b
1688   0D42 27            mov b, a
1689   0D43 11            mov a, b
1690   0D44 26 34 00      mov b, $34
1691   0D47 56            add b, a
1692   0D48 E4            pop a
1693   0D49             ; END TERMS
1694   0D49 F9            leave
1695   0D4A 09            ret
1696   0D4B 0A 4E 0D      jmp _if20_exit
1697   0D4E             _if20_exit:
1698   0D4E             ;; if (c == '+') return 62; 
1699   0D4E             _if21_cond:
1700   0D4E FA 05 00      lea d, [bp + 5] ; $c
1701   0D51 32            mov bl, [d]
1702   0D52 A7 00         mov bh, 0
1703   0D54             ; START RELATIONAL
1704   0D54 D7            push a
1705   0D55 11            mov a, b
1706   0D56 26 2B 00      mov b, $2b
1707   0D59 B0            cmp a, b
1708   0D5A FD 71         seq ; ==
1709   0D5C E4            pop a
1710   0D5D             ; END RELATIONAL
1711   0D5D C0 00 00      cmp b, 0
1712   0D60 C6 6B 0D      je _if21_exit
1713   0D63             _if21_true:
1714   0D63             ;; return 62; 
1715   0D63 26 3E 00      mov b, $3e
1716   0D66 F9            leave
1717   0D67 09            ret
1718   0D68 0A 6B 0D      jmp _if21_exit
1719   0D6B             _if21_exit:
1720   0D6B             ;; if (c == '/') return 63; 
1721   0D6B             _if22_cond:
1722   0D6B FA 05 00      lea d, [bp + 5] ; $c
1723   0D6E 32            mov bl, [d]
1724   0D6F A7 00         mov bh, 0
1725   0D71             ; START RELATIONAL
1726   0D71 D7            push a
1727   0D72 11            mov a, b
1728   0D73 26 2F 00      mov b, $2f
1729   0D76 B0            cmp a, b
1730   0D77 FD 71         seq ; ==
1731   0D79 E4            pop a
1732   0D7A             ; END RELATIONAL
1733   0D7A C0 00 00      cmp b, 0
1734   0D7D C6 88 0D      je _if22_exit
1735   0D80             _if22_true:
1736   0D80             ;; return 63; 
1737   0D80 26 3F 00      mov b, $3f
1738   0D83 F9            leave
1739   0D84 09            ret
1740   0D85 0A 88 0D      jmp _if22_exit
1741   0D88             _if22_exit:
1742   0D88             ;; return -1; 
1743   0D88 26 FF FF      mov b, $ffff
1744   0D8B F9            leave
1745   0D8C 09            ret
1746   0D8D             
1747   0D8D             base64_decode:
1748   0D8D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1749   0D90             ; $i 
1750   0D90 10 00 00      mov a, $0
1751   0D93 45 FF FF      mov [bp + -1], a
1752   0D96             ; $j 
1753   0D96 10 00 00      mov a, $0
1754   0D99 45 FD FF      mov [bp + -3], a
1755   0D9C             ; $k 
1756   0D9C 10 00 00      mov a, $0
1757   0D9F 45 FB FF      mov [bp + -5], a
1758   0DA2             ; $input_len 
1759   0DA2             ; $input_buffer 
1760   0DA2             ; $output_buffer 
1761   0DA2 52 0F 00      sub sp, 15
1762   0DA5             ;; input_len = strlen(input); 
1763   0DA5 FA F9 FF      lea d, [bp + -7] ; $input_len
1764   0DA8 DA            push d
1765   0DA9 FA 05 00      lea d, [bp + 5] ; $input
1766   0DAC 2A            mov b, [d]
1767   0DAD FD AB         swp b
1768   0DAF D8            push b
1769   0DB0 07 EC 06      call strlen
1770   0DB3 51 02 00      add sp, 2
1771   0DB6 E7            pop d
1772   0DB7 FD 43         mov [d], b
1773   0DB9             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1774   0DB9             _while23_cond:
1775   0DB9 FA F9 FF      lea d, [bp + -7] ; $input_len
1776   0DBC 2A            mov b, [d]
1777   0DBD D8            push b
1778   0DBE FD 7D         dec b
1779   0DC0 FA F9 FF      lea d, [bp + -7] ; $input_len
1780   0DC3 FD 43         mov [d], b
1781   0DC5 E5            pop b
1782   0DC6 D7            push a
1783   0DC7 11            mov a, b
1784   0DC8 FA 05 00      lea d, [bp + 5] ; $input
1785   0DCB FD 2A         mov d, [d]
1786   0DCD D7            push a
1787   0DCE DA            push d
1788   0DCF FA FB FF      lea d, [bp + -5] ; $k
1789   0DD2 2A            mov b, [d]
1790   0DD3 E7            pop d
1791   0DD4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1792   0DD8 E4            pop a
1793   0DD9 32            mov bl, [d]
1794   0DDA A7 00         mov bh, 0
1795   0DDC             ; START RELATIONAL
1796   0DDC D7            push a
1797   0DDD 11            mov a, b
1798   0DDE 26 3D 00      mov b, $3d
1799   0DE1 B0            cmp a, b
1800   0DE2 FD 72         sneq ; !=
1801   0DE4 E4            pop a
1802   0DE5             ; END RELATIONAL
1803   0DE5 FD A7         sand a, b ; &&
1804   0DE7 11            mov a, b
1805   0DE8 FA 05 00      lea d, [bp + 5] ; $input
1806   0DEB FD 2A         mov d, [d]
1807   0DED D7            push a
1808   0DEE DA            push d
1809   0DEF FA FB FF      lea d, [bp + -5] ; $k
1810   0DF2 2A            mov b, [d]
1811   0DF3 E7            pop d
1812   0DF4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1813   0DF8 E4            pop a
1814   0DF9 32            mov bl, [d]
1815   0DFA A7 00         mov bh, 0
1816   0DFC DD            push bl
1817   0DFD 07 8D 0C      call base64_char_value
1818   0E00 51 01 00      add sp, 1
1819   0E03             ; START RELATIONAL
1820   0E03 D7            push a
1821   0E04 11            mov a, b
1822   0E05 26 FF FF      mov b, $ffff
1823   0E08 B0            cmp a, b
1824   0E09 FD 72         sneq ; !=
1825   0E0B E4            pop a
1826   0E0C             ; END RELATIONAL
1827   0E0C FD A7         sand a, b ; &&
1828   0E0E E4            pop a
1829   0E0F C0 00 00      cmp b, 0
1830   0E12 C6 FA 0F      je _while23_exit
1831   0E15             _while23_block:
1832   0E15             ;; input_buffer[i++] = input[k++]; 
1833   0E15 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1834   0E18 D7            push a
1835   0E19 DA            push d
1836   0E1A FA FF FF      lea d, [bp + -1] ; $i
1837   0E1D 2A            mov b, [d]
1838   0E1E D8            push b
1839   0E1F FD 77         inc b
1840   0E21 FA FF FF      lea d, [bp + -1] ; $i
1841   0E24 FD 43         mov [d], b
1842   0E26 E5            pop b
1843   0E27 E7            pop d
1844   0E28 5A            add d, b
1845   0E29 E4            pop a
1846   0E2A DA            push d
1847   0E2B FA 05 00      lea d, [bp + 5] ; $input
1848   0E2E FD 2A         mov d, [d]
1849   0E30 D7            push a
1850   0E31 DA            push d
1851   0E32 FA FB FF      lea d, [bp + -5] ; $k
1852   0E35 2A            mov b, [d]
1853   0E36 D8            push b
1854   0E37 FD 77         inc b
1855   0E39 FA FB FF      lea d, [bp + -5] ; $k
1856   0E3C FD 43         mov [d], b
1857   0E3E E5            pop b
1858   0E3F E7            pop d
1859   0E40 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1860   0E44 E4            pop a
1861   0E45 32            mov bl, [d]
1862   0E46 A7 00         mov bh, 0
1863   0E48 E7            pop d
1864   0E49 FD 3E         mov [d], bl
1865   0E4B             ;; if (i == 4) { 
1866   0E4B             _if24_cond:
1867   0E4B FA FF FF      lea d, [bp + -1] ; $i
1868   0E4E 2A            mov b, [d]
1869   0E4F             ; START RELATIONAL
1870   0E4F D7            push a
1871   0E50 11            mov a, b
1872   0E51 26 04 00      mov b, $4
1873   0E54 B0            cmp a, b
1874   0E55 FD 71         seq ; ==
1875   0E57 E4            pop a
1876   0E58             ; END RELATIONAL
1877   0E58 C0 00 00      cmp b, 0
1878   0E5B C6 F7 0F      je _if24_exit
1879   0E5E             _if24_true:
1880   0E5E             ;; for (i = 0; i < 4; i++) { 
1881   0E5E             _for25_init:
1882   0E5E FA FF FF      lea d, [bp + -1] ; $i
1883   0E61 DA            push d
1884   0E62 26 00 00      mov b, $0
1885   0E65 E7            pop d
1886   0E66 FD 43         mov [d], b
1887   0E68             _for25_cond:
1888   0E68 FA FF FF      lea d, [bp + -1] ; $i
1889   0E6B 2A            mov b, [d]
1890   0E6C             ; START RELATIONAL
1891   0E6C D7            push a
1892   0E6D 11            mov a, b
1893   0E6E 26 04 00      mov b, $4
1894   0E71 B0            cmp a, b
1895   0E72 FD 73         slt ; <= (signed)
1896   0E74 E4            pop a
1897   0E75             ; END RELATIONAL
1898   0E75 C0 00 00      cmp b, 0
1899   0E78 C6 B1 0E      je _for25_exit
1900   0E7B             _for25_block:
1901   0E7B             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1902   0E7B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1903   0E7E D7            push a
1904   0E7F DA            push d
1905   0E80 FA FF FF      lea d, [bp + -1] ; $i
1906   0E83 2A            mov b, [d]
1907   0E84 E7            pop d
1908   0E85 5A            add d, b
1909   0E86 E4            pop a
1910   0E87 DA            push d
1911   0E88 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1912   0E8B D7            push a
1913   0E8C DA            push d
1914   0E8D FA FF FF      lea d, [bp + -1] ; $i
1915   0E90 2A            mov b, [d]
1916   0E91 E7            pop d
1917   0E92 5A            add d, b
1918   0E93 E4            pop a
1919   0E94 32            mov bl, [d]
1920   0E95 A7 00         mov bh, 0
1921   0E97 DD            push bl
1922   0E98 07 8D 0C      call base64_char_value
1923   0E9B 51 01 00      add sp, 1
1924   0E9E E7            pop d
1925   0E9F FD 3E         mov [d], bl
1926   0EA1             _for25_update:
1927   0EA1 FA FF FF      lea d, [bp + -1] ; $i
1928   0EA4 2A            mov b, [d]
1929   0EA5 D8            push b
1930   0EA6 FD 77         inc b
1931   0EA8 FA FF FF      lea d, [bp + -1] ; $i
1932   0EAB FD 43         mov [d], b
1933   0EAD E5            pop b
1934   0EAE 0A 68 0E      jmp _for25_cond
1935   0EB1             _for25_exit:
1936   0EB1             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1937   0EB1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1938   0EB4 D7            push a
1939   0EB5 DA            push d
1940   0EB6 26 00 00      mov b, $0
1941   0EB9 E7            pop d
1942   0EBA 5A            add d, b
1943   0EBB E4            pop a
1944   0EBC DA            push d
1945   0EBD FA F5 FF      lea d, [bp + -11] ; $input_buffer
1946   0EC0 D7            push a
1947   0EC1 DA            push d
1948   0EC2 26 00 00      mov b, $0
1949   0EC5 E7            pop d
1950   0EC6 5A            add d, b
1951   0EC7 E4            pop a
1952   0EC8 32            mov bl, [d]
1953   0EC9 A7 00         mov bh, 0
1954   0ECB             ; START SHIFT
1955   0ECB D7            push a
1956   0ECC 11            mov a, b
1957   0ECD 26 02 00      mov b, $2
1958   0ED0 FD 39         mov c, b
1959   0ED2 9D            shl a, cl
1960   0ED3 27            mov b, a
1961   0ED4 E4            pop a
1962   0ED5             ; END SHIFT
1963   0ED5             ; START TERMS
1964   0ED5 D7            push a
1965   0ED6 11            mov a, b
1966   0ED7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1967   0EDA D7            push a
1968   0EDB DA            push d
1969   0EDC 26 01 00      mov b, $1
1970   0EDF E7            pop d
1971   0EE0 5A            add d, b
1972   0EE1 E4            pop a
1973   0EE2 32            mov bl, [d]
1974   0EE3 A7 00         mov bh, 0
1975   0EE5 D7            push a
1976   0EE6 11            mov a, b
1977   0EE7 26 30 00      mov b, $30
1978   0EEA 86            and a, b ; &
1979   0EEB 27            mov b, a
1980   0EEC E4            pop a
1981   0EED             ; START SHIFT
1982   0EED D7            push a
1983   0EEE 11            mov a, b
1984   0EEF 26 04 00      mov b, $4
1985   0EF2 FD 39         mov c, b
1986   0EF4 A5            ashr a, cl
1987   0EF5 27            mov b, a
1988   0EF6 E4            pop a
1989   0EF7             ; END SHIFT
1990   0EF7 56            add b, a
1991   0EF8 E4            pop a
1992   0EF9             ; END TERMS
1993   0EF9 E7            pop d
1994   0EFA FD 3E         mov [d], bl
1995   0EFC             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1996   0EFC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1997   0EFF D7            push a
1998   0F00 DA            push d
1999   0F01 26 01 00      mov b, $1
2000   0F04 E7            pop d
2001   0F05 5A            add d, b
2002   0F06 E4            pop a
2003   0F07 DA            push d
2004   0F08 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2005   0F0B D7            push a
2006   0F0C DA            push d
2007   0F0D 26 01 00      mov b, $1
2008   0F10 E7            pop d
2009   0F11 5A            add d, b
2010   0F12 E4            pop a
2011   0F13 32            mov bl, [d]
2012   0F14 A7 00         mov bh, 0
2013   0F16 D7            push a
2014   0F17 11            mov a, b
2015   0F18 26 0F 00      mov b, $f
2016   0F1B 86            and a, b ; &
2017   0F1C 27            mov b, a
2018   0F1D E4            pop a
2019   0F1E             ; START SHIFT
2020   0F1E D7            push a
2021   0F1F 11            mov a, b
2022   0F20 26 04 00      mov b, $4
2023   0F23 FD 39         mov c, b
2024   0F25 9D            shl a, cl
2025   0F26 27            mov b, a
2026   0F27 E4            pop a
2027   0F28             ; END SHIFT
2028   0F28             ; START TERMS
2029   0F28 D7            push a
2030   0F29 11            mov a, b
2031   0F2A FA F5 FF      lea d, [bp + -11] ; $input_buffer
2032   0F2D D7            push a
2033   0F2E DA            push d
2034   0F2F 26 02 00      mov b, $2
2035   0F32 E7            pop d
2036   0F33 5A            add d, b
2037   0F34 E4            pop a
2038   0F35 32            mov bl, [d]
2039   0F36 A7 00         mov bh, 0
2040   0F38 D7            push a
2041   0F39 11            mov a, b
2042   0F3A 26 3C 00      mov b, $3c
2043   0F3D 86            and a, b ; &
2044   0F3E 27            mov b, a
2045   0F3F E4            pop a
2046   0F40             ; START SHIFT
2047   0F40 D7            push a
2048   0F41 11            mov a, b
2049   0F42 26 02 00      mov b, $2
2050   0F45 FD 39         mov c, b
2051   0F47 A5            ashr a, cl
2052   0F48 27            mov b, a
2053   0F49 E4            pop a
2054   0F4A             ; END SHIFT
2055   0F4A 56            add b, a
2056   0F4B E4            pop a
2057   0F4C             ; END TERMS
2058   0F4C E7            pop d
2059   0F4D FD 3E         mov [d], bl
2060   0F4F             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
2061   0F4F FA F2 FF      lea d, [bp + -14] ; $output_buffer
2062   0F52 D7            push a
2063   0F53 DA            push d
2064   0F54 26 02 00      mov b, $2
2065   0F57 E7            pop d
2066   0F58 5A            add d, b
2067   0F59 E4            pop a
2068   0F5A DA            push d
2069   0F5B FA F5 FF      lea d, [bp + -11] ; $input_buffer
2070   0F5E D7            push a
2071   0F5F DA            push d
2072   0F60 26 02 00      mov b, $2
2073   0F63 E7            pop d
2074   0F64 5A            add d, b
2075   0F65 E4            pop a
2076   0F66 32            mov bl, [d]
2077   0F67 A7 00         mov bh, 0
2078   0F69 D7            push a
2079   0F6A 11            mov a, b
2080   0F6B 26 03 00      mov b, $3
2081   0F6E 86            and a, b ; &
2082   0F6F 27            mov b, a
2083   0F70 E4            pop a
2084   0F71             ; START SHIFT
2085   0F71 D7            push a
2086   0F72 11            mov a, b
2087   0F73 26 06 00      mov b, $6
2088   0F76 FD 39         mov c, b
2089   0F78 9D            shl a, cl
2090   0F79 27            mov b, a
2091   0F7A E4            pop a
2092   0F7B             ; END SHIFT
2093   0F7B             ; START TERMS
2094   0F7B D7            push a
2095   0F7C 11            mov a, b
2096   0F7D FA F5 FF      lea d, [bp + -11] ; $input_buffer
2097   0F80 D7            push a
2098   0F81 DA            push d
2099   0F82 26 03 00      mov b, $3
2100   0F85 E7            pop d
2101   0F86 5A            add d, b
2102   0F87 E4            pop a
2103   0F88 32            mov bl, [d]
2104   0F89 A7 00         mov bh, 0
2105   0F8B 56            add b, a
2106   0F8C E4            pop a
2107   0F8D             ; END TERMS
2108   0F8D E7            pop d
2109   0F8E FD 3E         mov [d], bl
2110   0F90             ;; for (i = 0; i < 3; i++) { 
2111   0F90             _for26_init:
2112   0F90 FA FF FF      lea d, [bp + -1] ; $i
2113   0F93 DA            push d
2114   0F94 26 00 00      mov b, $0
2115   0F97 E7            pop d
2116   0F98 FD 43         mov [d], b
2117   0F9A             _for26_cond:
2118   0F9A FA FF FF      lea d, [bp + -1] ; $i
2119   0F9D 2A            mov b, [d]
2120   0F9E             ; START RELATIONAL
2121   0F9E D7            push a
2122   0F9F 11            mov a, b
2123   0FA0 26 03 00      mov b, $3
2124   0FA3 B0            cmp a, b
2125   0FA4 FD 73         slt ; <= (signed)
2126   0FA6 E4            pop a
2127   0FA7             ; END RELATIONAL
2128   0FA7 C0 00 00      cmp b, 0
2129   0FAA C6 EA 0F      je _for26_exit
2130   0FAD             _for26_block:
2131   0FAD             ;; output[j++] = output_buffer[i]; 
2132   0FAD FA 07 00      lea d, [bp + 7] ; $output
2133   0FB0 FD 2A         mov d, [d]
2134   0FB2 D7            push a
2135   0FB3 DA            push d
2136   0FB4 FA FD FF      lea d, [bp + -3] ; $j
2137   0FB7 2A            mov b, [d]
2138   0FB8 D8            push b
2139   0FB9 FD 77         inc b
2140   0FBB FA FD FF      lea d, [bp + -3] ; $j
2141   0FBE FD 43         mov [d], b
2142   0FC0 E5            pop b
2143   0FC1 E7            pop d
2144   0FC2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2145   0FC6 E4            pop a
2146   0FC7 DA            push d
2147   0FC8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2148   0FCB D7            push a
2149   0FCC DA            push d
2150   0FCD FA FF FF      lea d, [bp + -1] ; $i
2151   0FD0 2A            mov b, [d]
2152   0FD1 E7            pop d
2153   0FD2 5A            add d, b
2154   0FD3 E4            pop a
2155   0FD4 32            mov bl, [d]
2156   0FD5 A7 00         mov bh, 0
2157   0FD7 E7            pop d
2158   0FD8 FD 3E         mov [d], bl
2159   0FDA             _for26_update:
2160   0FDA FA FF FF      lea d, [bp + -1] ; $i
2161   0FDD 2A            mov b, [d]
2162   0FDE D8            push b
2163   0FDF FD 77         inc b
2164   0FE1 FA FF FF      lea d, [bp + -1] ; $i
2165   0FE4 FD 43         mov [d], b
2166   0FE6 E5            pop b
2167   0FE7 0A 9A 0F      jmp _for26_cond
2168   0FEA             _for26_exit:
2169   0FEA             ;; i = 0; 
2170   0FEA FA FF FF      lea d, [bp + -1] ; $i
2171   0FED DA            push d
2172   0FEE 26 00 00      mov b, $0
2173   0FF1 E7            pop d
2174   0FF2 FD 43         mov [d], b
2175   0FF4 0A F7 0F      jmp _if24_exit
2176   0FF7             _if24_exit:
2177   0FF7 0A B9 0D      jmp _while23_cond
2178   0FFA             _while23_exit:
2179   0FFA             ;; if (i) { 
2180   0FFA             _if27_cond:
2181   0FFA FA FF FF      lea d, [bp + -1] ; $i
2182   0FFD 2A            mov b, [d]
2183   0FFE C0 00 00      cmp b, 0
2184   1001 C6 9C 11      je _if27_exit
2185   1004             _if27_true:
2186   1004             ;; for (k = i; k < 4; k++) { 
2187   1004             _for28_init:
2188   1004 FA FB FF      lea d, [bp + -5] ; $k
2189   1007 DA            push d
2190   1008 FA FF FF      lea d, [bp + -1] ; $i
2191   100B 2A            mov b, [d]
2192   100C E7            pop d
2193   100D FD 43         mov [d], b
2194   100F             _for28_cond:
2195   100F FA FB FF      lea d, [bp + -5] ; $k
2196   1012 2A            mov b, [d]
2197   1013             ; START RELATIONAL
2198   1013 D7            push a
2199   1014 11            mov a, b
2200   1015 26 04 00      mov b, $4
2201   1018 B0            cmp a, b
2202   1019 FD 73         slt ; <= (signed)
2203   101B E4            pop a
2204   101C             ; END RELATIONAL
2205   101C C0 00 00      cmp b, 0
2206   101F C6 45 10      je _for28_exit
2207   1022             _for28_block:
2208   1022             ;; input_buffer[k] = 0; 
2209   1022 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2210   1025 D7            push a
2211   1026 DA            push d
2212   1027 FA FB FF      lea d, [bp + -5] ; $k
2213   102A 2A            mov b, [d]
2214   102B E7            pop d
2215   102C 5A            add d, b
2216   102D E4            pop a
2217   102E DA            push d
2218   102F 26 00 00      mov b, $0
2219   1032 E7            pop d
2220   1033 FD 3E         mov [d], bl
2221   1035             _for28_update:
2222   1035 FA FB FF      lea d, [bp + -5] ; $k
2223   1038 2A            mov b, [d]
2224   1039 D8            push b
2225   103A FD 77         inc b
2226   103C FA FB FF      lea d, [bp + -5] ; $k
2227   103F FD 43         mov [d], b
2228   1041 E5            pop b
2229   1042 0A 0F 10      jmp _for28_cond
2230   1045             _for28_exit:
2231   1045             ;; for (k = 0; k < 4; k++) { 
2232   1045             _for29_init:
2233   1045 FA FB FF      lea d, [bp + -5] ; $k
2234   1048 DA            push d
2235   1049 26 00 00      mov b, $0
2236   104C E7            pop d
2237   104D FD 43         mov [d], b
2238   104F             _for29_cond:
2239   104F FA FB FF      lea d, [bp + -5] ; $k
2240   1052 2A            mov b, [d]
2241   1053             ; START RELATIONAL
2242   1053 D7            push a
2243   1054 11            mov a, b
2244   1055 26 04 00      mov b, $4
2245   1058 B0            cmp a, b
2246   1059 FD 73         slt ; <= (signed)
2247   105B E4            pop a
2248   105C             ; END RELATIONAL
2249   105C C0 00 00      cmp b, 0
2250   105F C6 98 10      je _for29_exit
2251   1062             _for29_block:
2252   1062             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2253   1062 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2254   1065 D7            push a
2255   1066 DA            push d
2256   1067 FA FB FF      lea d, [bp + -5] ; $k
2257   106A 2A            mov b, [d]
2258   106B E7            pop d
2259   106C 5A            add d, b
2260   106D E4            pop a
2261   106E DA            push d
2262   106F FA F5 FF      lea d, [bp + -11] ; $input_buffer
2263   1072 D7            push a
2264   1073 DA            push d
2265   1074 FA FB FF      lea d, [bp + -5] ; $k
2266   1077 2A            mov b, [d]
2267   1078 E7            pop d
2268   1079 5A            add d, b
2269   107A E4            pop a
2270   107B 32            mov bl, [d]
2271   107C A7 00         mov bh, 0
2272   107E DD            push bl
2273   107F 07 8D 0C      call base64_char_value
2274   1082 51 01 00      add sp, 1
2275   1085 E7            pop d
2276   1086 FD 3E         mov [d], bl
2277   1088             _for29_update:
2278   1088 FA FB FF      lea d, [bp + -5] ; $k
2279   108B 2A            mov b, [d]
2280   108C D8            push b
2281   108D FD 77         inc b
2282   108F FA FB FF      lea d, [bp + -5] ; $k
2283   1092 FD 43         mov [d], b
2284   1094 E5            pop b
2285   1095 0A 4F 10      jmp _for29_cond
2286   1098             _for29_exit:
2287   1098             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2288   1098 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2289   109B D7            push a
2290   109C DA            push d
2291   109D 26 00 00      mov b, $0
2292   10A0 E7            pop d
2293   10A1 5A            add d, b
2294   10A2 E4            pop a
2295   10A3 DA            push d
2296   10A4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2297   10A7 D7            push a
2298   10A8 DA            push d
2299   10A9 26 00 00      mov b, $0
2300   10AC E7            pop d
2301   10AD 5A            add d, b
2302   10AE E4            pop a
2303   10AF 32            mov bl, [d]
2304   10B0 A7 00         mov bh, 0
2305   10B2             ; START SHIFT
2306   10B2 D7            push a
2307   10B3 11            mov a, b
2308   10B4 26 02 00      mov b, $2
2309   10B7 FD 39         mov c, b
2310   10B9 9D            shl a, cl
2311   10BA 27            mov b, a
2312   10BB E4            pop a
2313   10BC             ; END SHIFT
2314   10BC             ; START TERMS
2315   10BC D7            push a
2316   10BD 11            mov a, b
2317   10BE FA F5 FF      lea d, [bp + -11] ; $input_buffer
2318   10C1 D7            push a
2319   10C2 DA            push d
2320   10C3 26 01 00      mov b, $1
2321   10C6 E7            pop d
2322   10C7 5A            add d, b
2323   10C8 E4            pop a
2324   10C9 32            mov bl, [d]
2325   10CA A7 00         mov bh, 0
2326   10CC D7            push a
2327   10CD 11            mov a, b
2328   10CE 26 30 00      mov b, $30
2329   10D1 86            and a, b ; &
2330   10D2 27            mov b, a
2331   10D3 E4            pop a
2332   10D4             ; START SHIFT
2333   10D4 D7            push a
2334   10D5 11            mov a, b
2335   10D6 26 04 00      mov b, $4
2336   10D9 FD 39         mov c, b
2337   10DB A5            ashr a, cl
2338   10DC 27            mov b, a
2339   10DD E4            pop a
2340   10DE             ; END SHIFT
2341   10DE 56            add b, a
2342   10DF E4            pop a
2343   10E0             ; END TERMS
2344   10E0 E7            pop d
2345   10E1 FD 3E         mov [d], bl
2346   10E3             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2347   10E3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2348   10E6 D7            push a
2349   10E7 DA            push d
2350   10E8 26 01 00      mov b, $1
2351   10EB E7            pop d
2352   10EC 5A            add d, b
2353   10ED E4            pop a
2354   10EE DA            push d
2355   10EF FA F5 FF      lea d, [bp + -11] ; $input_buffer
2356   10F2 D7            push a
2357   10F3 DA            push d
2358   10F4 26 01 00      mov b, $1
2359   10F7 E7            pop d
2360   10F8 5A            add d, b
2361   10F9 E4            pop a
2362   10FA 32            mov bl, [d]
2363   10FB A7 00         mov bh, 0
2364   10FD D7            push a
2365   10FE 11            mov a, b
2366   10FF 26 0F 00      mov b, $f
2367   1102 86            and a, b ; &
2368   1103 27            mov b, a
2369   1104 E4            pop a
2370   1105             ; START SHIFT
2371   1105 D7            push a
2372   1106 11            mov a, b
2373   1107 26 04 00      mov b, $4
2374   110A FD 39         mov c, b
2375   110C 9D            shl a, cl
2376   110D 27            mov b, a
2377   110E E4            pop a
2378   110F             ; END SHIFT
2379   110F             ; START TERMS
2380   110F D7            push a
2381   1110 11            mov a, b
2382   1111 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2383   1114 D7            push a
2384   1115 DA            push d
2385   1116 26 02 00      mov b, $2
2386   1119 E7            pop d
2387   111A 5A            add d, b
2388   111B E4            pop a
2389   111C 32            mov bl, [d]
2390   111D A7 00         mov bh, 0
2391   111F D7            push a
2392   1120 11            mov a, b
2393   1121 26 3C 00      mov b, $3c
2394   1124 86            and a, b ; &
2395   1125 27            mov b, a
2396   1126 E4            pop a
2397   1127             ; START SHIFT
2398   1127 D7            push a
2399   1128 11            mov a, b
2400   1129 26 02 00      mov b, $2
2401   112C FD 39         mov c, b
2402   112E A5            ashr a, cl
2403   112F 27            mov b, a
2404   1130 E4            pop a
2405   1131             ; END SHIFT
2406   1131 56            add b, a
2407   1132 E4            pop a
2408   1133             ; END TERMS
2409   1133 E7            pop d
2410   1134 FD 3E         mov [d], bl
2411   1136             ;; for (k = 0; k < i - 1; k++) { 
2412   1136             _for30_init:
2413   1136 FA FB FF      lea d, [bp + -5] ; $k
2414   1139 DA            push d
2415   113A 26 00 00      mov b, $0
2416   113D E7            pop d
2417   113E FD 43         mov [d], b
2418   1140             _for30_cond:
2419   1140 FA FB FF      lea d, [bp + -5] ; $k
2420   1143 2A            mov b, [d]
2421   1144             ; START RELATIONAL
2422   1144 D7            push a
2423   1145 11            mov a, b
2424   1146 FA FF FF      lea d, [bp + -1] ; $i
2425   1149 2A            mov b, [d]
2426   114A             ; START TERMS
2427   114A D7            push a
2428   114B 11            mov a, b
2429   114C 26 01 00      mov b, $1
2430   114F 60            sub a, b
2431   1150 27            mov b, a
2432   1151 E4            pop a
2433   1152             ; END TERMS
2434   1152 B0            cmp a, b
2435   1153 FD 73         slt ; <= (signed)
2436   1155 E4            pop a
2437   1156             ; END RELATIONAL
2438   1156 C0 00 00      cmp b, 0
2439   1159 C6 99 11      je _for30_exit
2440   115C             _for30_block:
2441   115C             ;; output[j++] = output_buffer[k]; 
2442   115C FA 07 00      lea d, [bp + 7] ; $output
2443   115F FD 2A         mov d, [d]
2444   1161 D7            push a
2445   1162 DA            push d
2446   1163 FA FD FF      lea d, [bp + -3] ; $j
2447   1166 2A            mov b, [d]
2448   1167 D8            push b
2449   1168 FD 77         inc b
2450   116A FA FD FF      lea d, [bp + -3] ; $j
2451   116D FD 43         mov [d], b
2452   116F E5            pop b
2453   1170 E7            pop d
2454   1171 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2455   1175 E4            pop a
2456   1176 DA            push d
2457   1177 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2458   117A D7            push a
2459   117B DA            push d
2460   117C FA FB FF      lea d, [bp + -5] ; $k
2461   117F 2A            mov b, [d]
2462   1180 E7            pop d
2463   1181 5A            add d, b
2464   1182 E4            pop a
2465   1183 32            mov bl, [d]
2466   1184 A7 00         mov bh, 0
2467   1186 E7            pop d
2468   1187 FD 3E         mov [d], bl
2469   1189             _for30_update:
2470   1189 FA FB FF      lea d, [bp + -5] ; $k
2471   118C 2A            mov b, [d]
2472   118D D8            push b
2473   118E FD 77         inc b
2474   1190 FA FB FF      lea d, [bp + -5] ; $k
2475   1193 FD 43         mov [d], b
2476   1195 E5            pop b
2477   1196 0A 40 11      jmp _for30_cond
2478   1199             _for30_exit:
2479   1199 0A 9C 11      jmp _if27_exit
2480   119C             _if27_exit:
2481   119C             ;; output[j] = '\0'; 
2482   119C FA 07 00      lea d, [bp + 7] ; $output
2483   119F FD 2A         mov d, [d]
2484   11A1 D7            push a
2485   11A2 DA            push d
2486   11A3 FA FD FF      lea d, [bp + -3] ; $j
2487   11A6 2A            mov b, [d]
2488   11A7 E7            pop d
2489   11A8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2490   11AC E4            pop a
2491   11AD DA            push d
2492   11AE 26 00 00      mov b, $0
2493   11B1 E7            pop d
2494   11B2 FD 3E         mov [d], bl
2495   11B4 F9            leave
2496   11B5 09            ret
2497   11B6             
2498   11B6             va_start:
2499   11B6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2500   11B9             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2501   11B9 FA 05 00      lea d, [bp + 5] ; $argp
2502   11BC FD 2A         mov d, [d]
2503   11BE 58 00 00      add d, 0
2504   11C1 DA            push d
2505   11C2 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2506   11C5 2A            mov b, [d]
2507   11C6             ; START TERMS
2508   11C6 D7            push a
2509   11C7 11            mov a, b
2510   11C8 26 02 00      mov b, 2
2511   11CB 56            add b, a
2512   11CC E4            pop a
2513   11CD             ; END TERMS
2514   11CD E7            pop d
2515   11CE FD 43         mov [d], b
2516   11D0 F9            leave
2517   11D1 09            ret
2518   11D2             
2519   11D2             va_arg:
2520   11D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2521   11D5             ; $p 
2522   11D5 52 02 00      sub sp, 2
2523   11D8             ;; p = argp->current_arg; 
2524   11D8 FA FF FF      lea d, [bp + -1] ; $p
2525   11DB DA            push d
2526   11DC FA 05 00      lea d, [bp + 5] ; $argp
2527   11DF FD 2A         mov d, [d]
2528   11E1 58 00 00      add d, 0
2529   11E4 2A            mov b, [d]
2530   11E5 E7            pop d
2531   11E6 FD 43         mov [d], b
2532   11E8             ;; argp->current_arg = argp->current_arg + size; 
2533   11E8 FA 05 00      lea d, [bp + 5] ; $argp
2534   11EB FD 2A         mov d, [d]
2535   11ED 58 00 00      add d, 0
2536   11F0 DA            push d
2537   11F1 FA 05 00      lea d, [bp + 5] ; $argp
2538   11F4 FD 2A         mov d, [d]
2539   11F6 58 00 00      add d, 0
2540   11F9 2A            mov b, [d]
2541   11FA             ; START TERMS
2542   11FA D7            push a
2543   11FB 11            mov a, b
2544   11FC FA 07 00      lea d, [bp + 7] ; $size
2545   11FF 2A            mov b, [d]
2546   1200 56            add b, a
2547   1201 E4            pop a
2548   1202             ; END TERMS
2549   1202 E7            pop d
2550   1203 FD 43         mov [d], b
2551   1205             ;; return p; 
2552   1205 FA FF FF      lea d, [bp + -1] ; $p
2553   1208 2A            mov b, [d]
2554   1209 F9            leave
2555   120A 09            ret
2556   120B             
2557   120B             va_end:
2558   120B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2559   120E             ;; argp->current_arg =   0   ; 
2560   120E FA 05 00      lea d, [bp + 5] ; $argp
2561   1211 FD 2A         mov d, [d]
2562   1213 58 00 00      add d, 0
2563   1216 DA            push d
2564   1217 26 00 00      mov b, $0
2565   121A E7            pop d
2566   121B FD 43         mov [d], b
2567   121D F9            leave
2568   121E 09            ret
2569   121F             
2570   121F             scanf:
2571   121F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2572   1222             ; $p 
2573   1222             ; $format_p 
2574   1222             ; $c 
2575   1222             ; $i 
2576   1222             ; $input_string 
2577   1222 52 07 02      sub sp, 519
2578   1225             ;; format_p = format; 
2579   1225 FA FD FF      lea d, [bp + -3] ; $format_p
2580   1228 DA            push d
2581   1229 FA 05 00      lea d, [bp + 5] ; $format
2582   122C 2A            mov b, [d]
2583   122D E7            pop d
2584   122E FD 43         mov [d], b
2585   1230             ;; p = &format + 2; 
2586   1230 FA FF FF      lea d, [bp + -1] ; $p
2587   1233 DA            push d
2588   1234 FA 05 00      lea d, [bp + 5] ; $format
2589   1237 2D            mov b, d
2590   1238             ; START TERMS
2591   1238 D7            push a
2592   1239 11            mov a, b
2593   123A 26 02 00      mov b, $2
2594   123D 56            add b, a
2595   123E E4            pop a
2596   123F             ; END TERMS
2597   123F E7            pop d
2598   1240 FD 43         mov [d], b
2599   1242             ;; for(;;){ 
2600   1242             _for31_init:
2601   1242             _for31_cond:
2602   1242             _for31_block:
2603   1242             ;; if(!*format_p) break; 
2604   1242             _if32_cond:
2605   1242 FA FD FF      lea d, [bp + -3] ; $format_p
2606   1245 2A            mov b, [d]
2607   1246 74            mov d, b
2608   1247 32            mov bl, [d]
2609   1248 A7 00         mov bh, 0
2610   124A C0 00 00      cmp b, 0
2611   124D FD 71         seq ; !
2612   124F C0 00 00      cmp b, 0
2613   1252 C6 5B 12      je _if32_else
2614   1255             _if32_true:
2615   1255             ;; break; 
2616   1255 0A 58 14      jmp _for31_exit ; for break
2617   1258 0A 55 14      jmp _if32_exit
2618   125B             _if32_else:
2619   125B             ;; if(*format_p == '%'){ 
2620   125B             _if33_cond:
2621   125B FA FD FF      lea d, [bp + -3] ; $format_p
2622   125E 2A            mov b, [d]
2623   125F 74            mov d, b
2624   1260 32            mov bl, [d]
2625   1261 A7 00         mov bh, 0
2626   1263             ; START RELATIONAL
2627   1263 D7            push a
2628   1264 11            mov a, b
2629   1265 26 25 00      mov b, $25
2630   1268 B0            cmp a, b
2631   1269 FD 71         seq ; ==
2632   126B E4            pop a
2633   126C             ; END RELATIONAL
2634   126C C0 00 00      cmp b, 0
2635   126F C6 39 14      je _if33_else
2636   1272             _if33_true:
2637   1272             ;; format_p++; 
2638   1272 FA FD FF      lea d, [bp + -3] ; $format_p
2639   1275 2A            mov b, [d]
2640   1276 D8            push b
2641   1277 FD 77         inc b
2642   1279 FA FD FF      lea d, [bp + -3] ; $format_p
2643   127C FD 43         mov [d], b
2644   127E E5            pop b
2645   127F             ;; switch(*format_p){ 
2646   127F             _switch34_expr:
2647   127F FA FD FF      lea d, [bp + -3] ; $format_p
2648   1282 2A            mov b, [d]
2649   1283 74            mov d, b
2650   1284 32            mov bl, [d]
2651   1285 A7 00         mov bh, 0
2652   1287             _switch34_comparisons:
2653   1287 C1 6C         cmp bl, $6c
2654   1289 C6 B5 12      je _switch34_case0
2655   128C C1 4C         cmp bl, $4c
2656   128E C6 B5 12      je _switch34_case1
2657   1291 C1 64         cmp bl, $64
2658   1293 C6 47 13      je _switch34_case2
2659   1296 C1 69         cmp bl, $69
2660   1298 C6 47 13      je _switch34_case3
2661   129B C1 75         cmp bl, $75
2662   129D C6 74 13      je _switch34_case4
2663   12A0 C1 78         cmp bl, $78
2664   12A2 C6 A1 13      je _switch34_case5
2665   12A5 C1 63         cmp bl, $63
2666   12A7 C6 B6 13      je _switch34_case6
2667   12AA C1 73         cmp bl, $73
2668   12AC C6 E5 13      je _switch34_case7
2669   12AF 0A 1D 14      jmp _switch34_default
2670   12B2 0A 29 14      jmp _switch34_exit
2671   12B5             _switch34_case0:
2672   12B5             _switch34_case1:
2673   12B5             ;; format_p++; 
2674   12B5 FA FD FF      lea d, [bp + -3] ; $format_p
2675   12B8 2A            mov b, [d]
2676   12B9 D8            push b
2677   12BA FD 77         inc b
2678   12BC FA FD FF      lea d, [bp + -3] ; $format_p
2679   12BF FD 43         mov [d], b
2680   12C1 E5            pop b
2681   12C2             ;; if(*format_p == 'd' || *format_p == 'i'); 
2682   12C2             _if35_cond:
2683   12C2 FA FD FF      lea d, [bp + -3] ; $format_p
2684   12C5 2A            mov b, [d]
2685   12C6 74            mov d, b
2686   12C7 32            mov bl, [d]
2687   12C8 A7 00         mov bh, 0
2688   12CA             ; START RELATIONAL
2689   12CA D7            push a
2690   12CB 11            mov a, b
2691   12CC 26 64 00      mov b, $64
2692   12CF B0            cmp a, b
2693   12D0 FD 71         seq ; ==
2694   12D2 E4            pop a
2695   12D3             ; END RELATIONAL
2696   12D3 D7            push a
2697   12D4 11            mov a, b
2698   12D5 FA FD FF      lea d, [bp + -3] ; $format_p
2699   12D8 2A            mov b, [d]
2700   12D9 74            mov d, b
2701   12DA 32            mov bl, [d]
2702   12DB A7 00         mov bh, 0
2703   12DD             ; START RELATIONAL
2704   12DD D7            push a
2705   12DE 11            mov a, b
2706   12DF 26 69 00      mov b, $69
2707   12E2 B0            cmp a, b
2708   12E3 FD 71         seq ; ==
2709   12E5 E4            pop a
2710   12E6             ; END RELATIONAL
2711   12E6 FD A8         sor a, b ; ||
2712   12E8 E4            pop a
2713   12E9 C0 00 00      cmp b, 0
2714   12EC C6 F2 12      je _if35_else
2715   12EF             _if35_true:
2716   12EF             ;; ; 
2717   12EF 0A 32 13      jmp _if35_exit
2718   12F2             _if35_else:
2719   12F2             ;; if(*format_p == 'u'); 
2720   12F2             _if36_cond:
2721   12F2 FA FD FF      lea d, [bp + -3] ; $format_p
2722   12F5 2A            mov b, [d]
2723   12F6 74            mov d, b
2724   12F7 32            mov bl, [d]
2725   12F8 A7 00         mov bh, 0
2726   12FA             ; START RELATIONAL
2727   12FA D7            push a
2728   12FB 11            mov a, b
2729   12FC 26 75 00      mov b, $75
2730   12FF B0            cmp a, b
2731   1300 FD 71         seq ; ==
2732   1302 E4            pop a
2733   1303             ; END RELATIONAL
2734   1303 C0 00 00      cmp b, 0
2735   1306 C6 0C 13      je _if36_else
2736   1309             _if36_true:
2737   1309             ;; ; 
2738   1309 0A 32 13      jmp _if36_exit
2739   130C             _if36_else:
2740   130C             ;; if(*format_p == 'x'); 
2741   130C             _if37_cond:
2742   130C FA FD FF      lea d, [bp + -3] ; $format_p
2743   130F 2A            mov b, [d]
2744   1310 74            mov d, b
2745   1311 32            mov bl, [d]
2746   1312 A7 00         mov bh, 0
2747   1314             ; START RELATIONAL
2748   1314 D7            push a
2749   1315 11            mov a, b
2750   1316 26 78 00      mov b, $78
2751   1319 B0            cmp a, b
2752   131A FD 71         seq ; ==
2753   131C E4            pop a
2754   131D             ; END RELATIONAL
2755   131D C0 00 00      cmp b, 0
2756   1320 C6 26 13      je _if37_else
2757   1323             _if37_true:
2758   1323             ;; ; 
2759   1323 0A 32 13      jmp _if37_exit
2760   1326             _if37_else:
2761   1326             ;; err("Unexpected format in printf."); 
2762   1326 26 DE 30      mov b, __s1 ; "Unexpected format in printf."
2763   1329 FD AB         swp b
2764   132B D8            push b
2765   132C 07 A1 16      call err
2766   132F 51 02 00      add sp, 2
2767   1332             _if37_exit:
2768   1332             _if36_exit:
2769   1332             _if35_exit:
2770   1332             ;; p = p + 4; 
2771   1332 FA FF FF      lea d, [bp + -1] ; $p
2772   1335 DA            push d
2773   1336 FA FF FF      lea d, [bp + -1] ; $p
2774   1339 2A            mov b, [d]
2775   133A             ; START TERMS
2776   133A D7            push a
2777   133B 11            mov a, b
2778   133C 26 04 00      mov b, $4
2779   133F 56            add b, a
2780   1340 E4            pop a
2781   1341             ; END TERMS
2782   1341 E7            pop d
2783   1342 FD 43         mov [d], b
2784   1344             ;; break; 
2785   1344 0A 29 14      jmp _switch34_exit ; case break
2786   1347             _switch34_case2:
2787   1347             _switch34_case3:
2788   1347             ;; i = scann(); 
2789   1347 FA FA FF      lea d, [bp + -6] ; $i
2790   134A DA            push d
2791   134B 07 6F 1C      call scann
2792   134E E7            pop d
2793   134F FD 43         mov [d], b
2794   1351             ;; **(int **)p = i; 
2795   1351 FA FF FF      lea d, [bp + -1] ; $p
2796   1354 2A            mov b, [d]
2797   1355 74            mov d, b
2798   1356 2A            mov b, [d]
2799   1357 D8            push b
2800   1358 FA FA FF      lea d, [bp + -6] ; $i
2801   135B 2A            mov b, [d]
2802   135C E7            pop d
2803   135D FD 43         mov [d], b
2804   135F             ;; p = p + 2; 
2805   135F FA FF FF      lea d, [bp + -1] ; $p
2806   1362 DA            push d
2807   1363 FA FF FF      lea d, [bp + -1] ; $p
2808   1366 2A            mov b, [d]
2809   1367             ; START TERMS
2810   1367 D7            push a
2811   1368 11            mov a, b
2812   1369 26 02 00      mov b, $2
2813   136C 56            add b, a
2814   136D E4            pop a
2815   136E             ; END TERMS
2816   136E E7            pop d
2817   136F FD 43         mov [d], b
2818   1371             ;; break; 
2819   1371 0A 29 14      jmp _switch34_exit ; case break
2820   1374             _switch34_case4:
2821   1374             ;; i = scann(); 
2822   1374 FA FA FF      lea d, [bp + -6] ; $i
2823   1377 DA            push d
2824   1378 07 6F 1C      call scann
2825   137B E7            pop d
2826   137C FD 43         mov [d], b
2827   137E             ;; **(int **)p = i; 
2828   137E FA FF FF      lea d, [bp + -1] ; $p
2829   1381 2A            mov b, [d]
2830   1382 74            mov d, b
2831   1383 2A            mov b, [d]
2832   1384 D8            push b
2833   1385 FA FA FF      lea d, [bp + -6] ; $i
2834   1388 2A            mov b, [d]
2835   1389 E7            pop d
2836   138A FD 43         mov [d], b
2837   138C             ;; p = p + 2; 
2838   138C FA FF FF      lea d, [bp + -1] ; $p
2839   138F DA            push d
2840   1390 FA FF FF      lea d, [bp + -1] ; $p
2841   1393 2A            mov b, [d]
2842   1394             ; START TERMS
2843   1394 D7            push a
2844   1395 11            mov a, b
2845   1396 26 02 00      mov b, $2
2846   1399 56            add b, a
2847   139A E4            pop a
2848   139B             ; END TERMS
2849   139B E7            pop d
2850   139C FD 43         mov [d], b
2851   139E             ;; break; 
2852   139E 0A 29 14      jmp _switch34_exit ; case break
2853   13A1             _switch34_case5:
2854   13A1             ;; p = p + 2; 
2855   13A1 FA FF FF      lea d, [bp + -1] ; $p
2856   13A4 DA            push d
2857   13A5 FA FF FF      lea d, [bp + -1] ; $p
2858   13A8 2A            mov b, [d]
2859   13A9             ; START TERMS
2860   13A9 D7            push a
2861   13AA 11            mov a, b
2862   13AB 26 02 00      mov b, $2
2863   13AE 56            add b, a
2864   13AF E4            pop a
2865   13B0             ; END TERMS
2866   13B0 E7            pop d
2867   13B1 FD 43         mov [d], b
2868   13B3             ;; break; 
2869   13B3 0A 29 14      jmp _switch34_exit ; case break
2870   13B6             _switch34_case6:
2871   13B6             ;; c = getchar(); 
2872   13B6 FA FC FF      lea d, [bp + -4] ; $c
2873   13B9 DA            push d
2874   13BA 07 59 1C      call getchar
2875   13BD E7            pop d
2876   13BE FD 3E         mov [d], bl
2877   13C0             ;; **(char **)p = c; 
2878   13C0 FA FF FF      lea d, [bp + -1] ; $p
2879   13C3 2A            mov b, [d]
2880   13C4 74            mov d, b
2881   13C5 2A            mov b, [d]
2882   13C6 D8            push b
2883   13C7 FA FC FF      lea d, [bp + -4] ; $c
2884   13CA 32            mov bl, [d]
2885   13CB A7 00         mov bh, 0
2886   13CD E7            pop d
2887   13CE FD 43         mov [d], b
2888   13D0             ;; p = p + 2; 
2889   13D0 FA FF FF      lea d, [bp + -1] ; $p
2890   13D3 DA            push d
2891   13D4 FA FF FF      lea d, [bp + -1] ; $p
2892   13D7 2A            mov b, [d]
2893   13D8             ; START TERMS
2894   13D8 D7            push a
2895   13D9 11            mov a, b
2896   13DA 26 02 00      mov b, $2
2897   13DD 56            add b, a
2898   13DE E4            pop a
2899   13DF             ; END TERMS
2900   13DF E7            pop d
2901   13E0 FD 43         mov [d], b
2902   13E2             ;; break; 
2903   13E2 0A 29 14      jmp _switch34_exit ; case break
2904   13E5             _switch34_case7:
2905   13E5             ;; gets(input_string); 
2906   13E5 FA FA FD      lea d, [bp + -518] ; $input_string
2907   13E8 2D            mov b, d
2908   13E9 FD AB         swp b
2909   13EB D8            push b
2910   13EC 07 23 18      call gets
2911   13EF 51 02 00      add sp, 2
2912   13F2             ;; strcpy(*(char **)p, input_string); 
2913   13F2 FA FA FD      lea d, [bp + -518] ; $input_string
2914   13F5 2D            mov b, d
2915   13F6 FD AB         swp b
2916   13F8 D8            push b
2917   13F9 FA FF FF      lea d, [bp + -1] ; $p
2918   13FC 2A            mov b, [d]
2919   13FD 74            mov d, b
2920   13FE 2A            mov b, [d]
2921   13FF FD AB         swp b
2922   1401 D8            push b
2923   1402 07 7D 05      call strcpy
2924   1405 51 04 00      add sp, 4
2925   1408             ;; p = p + 2; 
2926   1408 FA FF FF      lea d, [bp + -1] ; $p
2927   140B DA            push d
2928   140C FA FF FF      lea d, [bp + -1] ; $p
2929   140F 2A            mov b, [d]
2930   1410             ; START TERMS
2931   1410 D7            push a
2932   1411 11            mov a, b
2933   1412 26 02 00      mov b, $2
2934   1415 56            add b, a
2935   1416 E4            pop a
2936   1417             ; END TERMS
2937   1417 E7            pop d
2938   1418 FD 43         mov [d], b
2939   141A             ;; break; 
2940   141A 0A 29 14      jmp _switch34_exit ; case break
2941   141D             _switch34_default:
2942   141D             ;; print("Error: Unknown argument type.\n"); 
2943   141D 26 FB 30      mov b, __s2 ; "Error: Unknown argument type.\n"
2944   1420 FD AB         swp b
2945   1422 D8            push b
2946   1423 07 94 1C      call print
2947   1426 51 02 00      add sp, 2
2948   1429             _switch34_exit:
2949   1429             ;; format_p++; 
2950   1429 FA FD FF      lea d, [bp + -3] ; $format_p
2951   142C 2A            mov b, [d]
2952   142D D8            push b
2953   142E FD 77         inc b
2954   1430 FA FD FF      lea d, [bp + -3] ; $format_p
2955   1433 FD 43         mov [d], b
2956   1435 E5            pop b
2957   1436 0A 55 14      jmp _if33_exit
2958   1439             _if33_else:
2959   1439             ;; putchar(*format_p); 
2960   1439 FA FD FF      lea d, [bp + -3] ; $format_p
2961   143C 2A            mov b, [d]
2962   143D 74            mov d, b
2963   143E 32            mov bl, [d]
2964   143F A7 00         mov bh, 0
2965   1441 DD            push bl
2966   1442 07 4C 1C      call putchar
2967   1445 51 01 00      add sp, 1
2968   1448             ;; format_p++; 
2969   1448 FA FD FF      lea d, [bp + -3] ; $format_p
2970   144B 2A            mov b, [d]
2971   144C D8            push b
2972   144D FD 77         inc b
2973   144F FA FD FF      lea d, [bp + -3] ; $format_p
2974   1452 FD 43         mov [d], b
2975   1454 E5            pop b
2976   1455             _if33_exit:
2977   1455             _if32_exit:
2978   1455             _for31_update:
2979   1455 0A 42 12      jmp _for31_cond
2980   1458             _for31_exit:
2981   1458 F9            leave
2982   1459 09            ret
2983   145A             
2984   145A             printf:
2985   145A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2986   145D             ; $p 
2987   145D             ; $format_p 
2988   145D 52 04 00      sub sp, 4
2989   1460             ;; format_p = format; 
2990   1460 FA FD FF      lea d, [bp + -3] ; $format_p
2991   1463 DA            push d
2992   1464 FA 05 00      lea d, [bp + 5] ; $format
2993   1467 2A            mov b, [d]
2994   1468 E7            pop d
2995   1469 FD 43         mov [d], b
2996   146B             ;; p = &format + 2; 
2997   146B FA FF FF      lea d, [bp + -1] ; $p
2998   146E DA            push d
2999   146F FA 05 00      lea d, [bp + 5] ; $format
3000   1472 2D            mov b, d
3001   1473             ; START TERMS
3002   1473 D7            push a
3003   1474 11            mov a, b
3004   1475 26 02 00      mov b, $2
3005   1478 56            add b, a
3006   1479 E4            pop a
3007   147A             ; END TERMS
3008   147A E7            pop d
3009   147B FD 43         mov [d], b
3010   147D             ;; for(;;){ 
3011   147D             _for38_init:
3012   147D             _for38_cond:
3013   147D             _for38_block:
3014   147D             ;; if(!*format_p) break; 
3015   147D             _if39_cond:
3016   147D FA FD FF      lea d, [bp + -3] ; $format_p
3017   1480 2A            mov b, [d]
3018   1481 74            mov d, b
3019   1482 32            mov bl, [d]
3020   1483 A7 00         mov bh, 0
3021   1485 C0 00 00      cmp b, 0
3022   1488 FD 71         seq ; !
3023   148A C0 00 00      cmp b, 0
3024   148D C6 96 14      je _if39_else
3025   1490             _if39_true:
3026   1490             ;; break; 
3027   1490 0A 9F 16      jmp _for38_exit ; for break
3028   1493 0A 9C 16      jmp _if39_exit
3029   1496             _if39_else:
3030   1496             ;; if(*format_p == '%'){ 
3031   1496             _if40_cond:
3032   1496 FA FD FF      lea d, [bp + -3] ; $format_p
3033   1499 2A            mov b, [d]
3034   149A 74            mov d, b
3035   149B 32            mov bl, [d]
3036   149C A7 00         mov bh, 0
3037   149E             ; START RELATIONAL
3038   149E D7            push a
3039   149F 11            mov a, b
3040   14A0 26 25 00      mov b, $25
3041   14A3 B0            cmp a, b
3042   14A4 FD 71         seq ; ==
3043   14A6 E4            pop a
3044   14A7             ; END RELATIONAL
3045   14A7 C0 00 00      cmp b, 0
3046   14AA C6 80 16      je _if40_else
3047   14AD             _if40_true:
3048   14AD             ;; format_p++; 
3049   14AD FA FD FF      lea d, [bp + -3] ; $format_p
3050   14B0 2A            mov b, [d]
3051   14B1 D8            push b
3052   14B2 FD 77         inc b
3053   14B4 FA FD FF      lea d, [bp + -3] ; $format_p
3054   14B7 FD 43         mov [d], b
3055   14B9 E5            pop b
3056   14BA             ;; switch(*format_p){ 
3057   14BA             _switch41_expr:
3058   14BA FA FD FF      lea d, [bp + -3] ; $format_p
3059   14BD 2A            mov b, [d]
3060   14BE 74            mov d, b
3061   14BF 32            mov bl, [d]
3062   14C0 A7 00         mov bh, 0
3063   14C2             _switch41_comparisons:
3064   14C2 C1 6C         cmp bl, $6c
3065   14C4 C6 F0 14      je _switch41_case0
3066   14C7 C1 4C         cmp bl, $4c
3067   14C9 C6 F0 14      je _switch41_case1
3068   14CC C1 64         cmp bl, $64
3069   14CE C6 C0 15      je _switch41_case2
3070   14D1 C1 69         cmp bl, $69
3071   14D3 C6 C0 15      je _switch41_case3
3072   14D6 C1 75         cmp bl, $75
3073   14D8 C6 E4 15      je _switch41_case4
3074   14DB C1 78         cmp bl, $78
3075   14DD C6 08 16      je _switch41_case5
3076   14E0 C1 63         cmp bl, $63
3077   14E2 C6 26 16      je _switch41_case6
3078   14E5 C1 73         cmp bl, $73
3079   14E7 C6 45 16      je _switch41_case7
3080   14EA 0A 64 16      jmp _switch41_default
3081   14ED 0A 70 16      jmp _switch41_exit
3082   14F0             _switch41_case0:
3083   14F0             _switch41_case1:
3084   14F0             ;; format_p++; 
3085   14F0 FA FD FF      lea d, [bp + -3] ; $format_p
3086   14F3 2A            mov b, [d]
3087   14F4 D8            push b
3088   14F5 FD 77         inc b
3089   14F7 FA FD FF      lea d, [bp + -3] ; $format_p
3090   14FA FD 43         mov [d], b
3091   14FC E5            pop b
3092   14FD             ;; if(*format_p == 'd' || *format_p == 'i') 
3093   14FD             _if42_cond:
3094   14FD FA FD FF      lea d, [bp + -3] ; $format_p
3095   1500 2A            mov b, [d]
3096   1501 74            mov d, b
3097   1502 32            mov bl, [d]
3098   1503 A7 00         mov bh, 0
3099   1505             ; START RELATIONAL
3100   1505 D7            push a
3101   1506 11            mov a, b
3102   1507 26 64 00      mov b, $64
3103   150A B0            cmp a, b
3104   150B FD 71         seq ; ==
3105   150D E4            pop a
3106   150E             ; END RELATIONAL
3107   150E D7            push a
3108   150F 11            mov a, b
3109   1510 FA FD FF      lea d, [bp + -3] ; $format_p
3110   1513 2A            mov b, [d]
3111   1514 74            mov d, b
3112   1515 32            mov bl, [d]
3113   1516 A7 00         mov bh, 0
3114   1518             ; START RELATIONAL
3115   1518 D7            push a
3116   1519 11            mov a, b
3117   151A 26 69 00      mov b, $69
3118   151D B0            cmp a, b
3119   151E FD 71         seq ; ==
3120   1520 E4            pop a
3121   1521             ; END RELATIONAL
3122   1521 FD A8         sor a, b ; ||
3123   1523 E4            pop a
3124   1524 C0 00 00      cmp b, 0
3125   1527 C6 3E 15      je _if42_else
3126   152A             _if42_true:
3127   152A             ;; print_signed_long(*(long *)p); 
3128   152A FD 79         mov g, b
3129   152C 28            mov b, c
3130   152D FD AB         swp b
3131   152F D8            push b
3132   1530 FD 27         mov b, g
3133   1532 FD AB         swp b
3134   1534 D8            push b
3135   1535 07 2D 19      call print_signed_long
3136   1538 51 04 00      add sp, 4
3137   153B 0A AB 15      jmp _if42_exit
3138   153E             _if42_else:
3139   153E             ;; if(*format_p == 'u') 
3140   153E             _if43_cond:
3141   153E FA FD FF      lea d, [bp + -3] ; $format_p
3142   1541 2A            mov b, [d]
3143   1542 74            mov d, b
3144   1543 32            mov bl, [d]
3145   1544 A7 00         mov bh, 0
3146   1546             ; START RELATIONAL
3147   1546 D7            push a
3148   1547 11            mov a, b
3149   1548 26 75 00      mov b, $75
3150   154B B0            cmp a, b
3151   154C FD 71         seq ; ==
3152   154E E4            pop a
3153   154F             ; END RELATIONAL
3154   154F C0 00 00      cmp b, 0
3155   1552 C6 69 15      je _if43_else
3156   1555             _if43_true:
3157   1555             ;; print_unsigned_long(*(unsigned long *)p); 
3158   1555 FD 79         mov g, b
3159   1557 28            mov b, c
3160   1558 FD AB         swp b
3161   155A D8            push b
3162   155B FD 27         mov b, g
3163   155D FD AB         swp b
3164   155F D8            push b
3165   1560 07 7F 1A      call print_unsigned_long
3166   1563 51 04 00      add sp, 4
3167   1566 0A AB 15      jmp _if43_exit
3168   1569             _if43_else:
3169   1569             ;; if(*format_p == 'x') 
3170   1569             _if44_cond:
3171   1569 FA FD FF      lea d, [bp + -3] ; $format_p
3172   156C 2A            mov b, [d]
3173   156D 74            mov d, b
3174   156E 32            mov bl, [d]
3175   156F A7 00         mov bh, 0
3176   1571             ; START RELATIONAL
3177   1571 D7            push a
3178   1572 11            mov a, b
3179   1573 26 78 00      mov b, $78
3180   1576 B0            cmp a, b
3181   1577 FD 71         seq ; ==
3182   1579 E4            pop a
3183   157A             ; END RELATIONAL
3184   157A C0 00 00      cmp b, 0
3185   157D C6 9F 15      je _if44_else
3186   1580             _if44_true:
3187   1580             ;; printx32(*(long int *)p); 
3188   1580 FA FF FF      lea d, [bp + -1] ; $p
3189   1583 2A            mov b, [d]
3190   1584 74            mov d, b
3191   1585 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3192   1588 FD 39         mov c, b ; And place it into C
3193   158A 2A            mov b, [d] ; Lower Word in B
3194   158B FD 79         mov g, b
3195   158D 28            mov b, c
3196   158E FD AB         swp b
3197   1590 D8            push b
3198   1591 FD 27         mov b, g
3199   1593 FD AB         swp b
3200   1595 D8            push b
3201   1596 07 B6 16      call printx32
3202   1599 51 04 00      add sp, 4
3203   159C 0A AB 15      jmp _if44_exit
3204   159F             _if44_else:
3205   159F             ;; err("Unexpected format in printf."); 
3206   159F 26 DE 30      mov b, __s1 ; "Unexpected format in printf."
3207   15A2 FD AB         swp b
3208   15A4 D8            push b
3209   15A5 07 A1 16      call err
3210   15A8 51 02 00      add sp, 2
3211   15AB             _if44_exit:
3212   15AB             _if43_exit:
3213   15AB             _if42_exit:
3214   15AB             ;; p = p + 4; 
3215   15AB FA FF FF      lea d, [bp + -1] ; $p
3216   15AE DA            push d
3217   15AF FA FF FF      lea d, [bp + -1] ; $p
3218   15B2 2A            mov b, [d]
3219   15B3             ; START TERMS
3220   15B3 D7            push a
3221   15B4 11            mov a, b
3222   15B5 26 04 00      mov b, $4
3223   15B8 56            add b, a
3224   15B9 E4            pop a
3225   15BA             ; END TERMS
3226   15BA E7            pop d
3227   15BB FD 43         mov [d], b
3228   15BD             ;; break; 
3229   15BD 0A 70 16      jmp _switch41_exit ; case break
3230   15C0             _switch41_case2:
3231   15C0             _switch41_case3:
3232   15C0             ;; print_signed(*(int*)p); 
3233   15C0 FA FF FF      lea d, [bp + -1] ; $p
3234   15C3 2A            mov b, [d]
3235   15C4 74            mov d, b
3236   15C5 2A            mov b, [d]
3237   15C6 FD AB         swp b
3238   15C8 D8            push b
3239   15C9 07 3D 18      call print_signed
3240   15CC 51 02 00      add sp, 2
3241   15CF             ;; p = p + 2; 
3242   15CF FA FF FF      lea d, [bp + -1] ; $p
3243   15D2 DA            push d
3244   15D3 FA FF FF      lea d, [bp + -1] ; $p
3245   15D6 2A            mov b, [d]
3246   15D7             ; START TERMS
3247   15D7 D7            push a
3248   15D8 11            mov a, b
3249   15D9 26 02 00      mov b, $2
3250   15DC 56            add b, a
3251   15DD E4            pop a
3252   15DE             ; END TERMS
3253   15DE E7            pop d
3254   15DF FD 43         mov [d], b
3255   15E1             ;; break; 
3256   15E1 0A 70 16      jmp _switch41_exit ; case break
3257   15E4             _switch41_case4:
3258   15E4             ;; print_unsigned(*(unsigned int*)p); 
3259   15E4 FA FF FF      lea d, [bp + -1] ; $p
3260   15E7 2A            mov b, [d]
3261   15E8 74            mov d, b
3262   15E9 2A            mov b, [d]
3263   15EA FD AB         swp b
3264   15EC D8            push b
3265   15ED 07 7C 1B      call print_unsigned
3266   15F0 51 02 00      add sp, 2
3267   15F3             ;; p = p + 2; 
3268   15F3 FA FF FF      lea d, [bp + -1] ; $p
3269   15F6 DA            push d
3270   15F7 FA FF FF      lea d, [bp + -1] ; $p
3271   15FA 2A            mov b, [d]
3272   15FB             ; START TERMS
3273   15FB D7            push a
3274   15FC 11            mov a, b
3275   15FD 26 02 00      mov b, $2
3276   1600 56            add b, a
3277   1601 E4            pop a
3278   1602             ; END TERMS
3279   1602 E7            pop d
3280   1603 FD 43         mov [d], b
3281   1605             ;; break; 
3282   1605 0A 70 16      jmp _switch41_exit ; case break
3283   1608             _switch41_case5:
3284   1608             
3285   1608             ; --- BEGIN INLINE ASM BLOCK
3286   1608 FA FF FF      lea d, [bp + -1] ; $p
3287   160B FD 2A         mov d, [d]
3288   160D 2A            mov b, [d]
3289   160E 07 CE 1F      call print_u16x
3290   1611             ; --- END INLINE ASM BLOCK
3291   1611             
3292   1611             ;; p = p + 2; 
3293   1611 FA FF FF      lea d, [bp + -1] ; $p
3294   1614 DA            push d
3295   1615 FA FF FF      lea d, [bp + -1] ; $p
3296   1618 2A            mov b, [d]
3297   1619             ; START TERMS
3298   1619 D7            push a
3299   161A 11            mov a, b
3300   161B 26 02 00      mov b, $2
3301   161E 56            add b, a
3302   161F E4            pop a
3303   1620             ; END TERMS
3304   1620 E7            pop d
3305   1621 FD 43         mov [d], b
3306   1623             ;; break; 
3307   1623 0A 70 16      jmp _switch41_exit ; case break
3308   1626             _switch41_case6:
3309   1626             
3310   1626             ; --- BEGIN INLINE ASM BLOCK
3311   1626 FA FF FF      lea d, [bp + -1] ; $p
3312   1629 FD 2A         mov d, [d]
3313   162B 1E            mov al, [d]
3314   162C 23            mov ah, al
3315   162D 07 2C 1E      call _putchar
3316   1630             ; --- END INLINE ASM BLOCK
3317   1630             
3318   1630             ;; p = p + 2; 
3319   1630 FA FF FF      lea d, [bp + -1] ; $p
3320   1633 DA            push d
3321   1634 FA FF FF      lea d, [bp + -1] ; $p
3322   1637 2A            mov b, [d]
3323   1638             ; START TERMS
3324   1638 D7            push a
3325   1639 11            mov a, b
3326   163A 26 02 00      mov b, $2
3327   163D 56            add b, a
3328   163E E4            pop a
3329   163F             ; END TERMS
3330   163F E7            pop d
3331   1640 FD 43         mov [d], b
3332   1642             ;; break; 
3333   1642 0A 70 16      jmp _switch41_exit ; case break
3334   1645             _switch41_case7:
3335   1645             
3336   1645             ; --- BEGIN INLINE ASM BLOCK
3337   1645 FA FF FF      lea d, [bp + -1] ; $p
3338   1648 FD 2A         mov d, [d]
3339   164A FD 2A         mov d, [d]
3340   164C 07 76 1F      call _puts
3341   164F             ; --- END INLINE ASM BLOCK
3342   164F             
3343   164F             ;; p = p + 2; 
3344   164F FA FF FF      lea d, [bp + -1] ; $p
3345   1652 DA            push d
3346   1653 FA FF FF      lea d, [bp + -1] ; $p
3347   1656 2A            mov b, [d]
3348   1657             ; START TERMS
3349   1657 D7            push a
3350   1658 11            mov a, b
3351   1659 26 02 00      mov b, $2
3352   165C 56            add b, a
3353   165D E4            pop a
3354   165E             ; END TERMS
3355   165E E7            pop d
3356   165F FD 43         mov [d], b
3357   1661             ;; break; 
3358   1661 0A 70 16      jmp _switch41_exit ; case break
3359   1664             _switch41_default:
3360   1664             ;; print("Error: Unknown argument type.\n"); 
3361   1664 26 FB 30      mov b, __s2 ; "Error: Unknown argument type.\n"
3362   1667 FD AB         swp b
3363   1669 D8            push b
3364   166A 07 94 1C      call print
3365   166D 51 02 00      add sp, 2
3366   1670             _switch41_exit:
3367   1670             ;; format_p++; 
3368   1670 FA FD FF      lea d, [bp + -3] ; $format_p
3369   1673 2A            mov b, [d]
3370   1674 D8            push b
3371   1675 FD 77         inc b
3372   1677 FA FD FF      lea d, [bp + -3] ; $format_p
3373   167A FD 43         mov [d], b
3374   167C E5            pop b
3375   167D 0A 9C 16      jmp _if40_exit
3376   1680             _if40_else:
3377   1680             ;; putchar(*format_p); 
3378   1680 FA FD FF      lea d, [bp + -3] ; $format_p
3379   1683 2A            mov b, [d]
3380   1684 74            mov d, b
3381   1685 32            mov bl, [d]
3382   1686 A7 00         mov bh, 0
3383   1688 DD            push bl
3384   1689 07 4C 1C      call putchar
3385   168C 51 01 00      add sp, 1
3386   168F             ;; format_p++; 
3387   168F FA FD FF      lea d, [bp + -3] ; $format_p
3388   1692 2A            mov b, [d]
3389   1693 D8            push b
3390   1694 FD 77         inc b
3391   1696 FA FD FF      lea d, [bp + -3] ; $format_p
3392   1699 FD 43         mov [d], b
3393   169B E5            pop b
3394   169C             _if40_exit:
3395   169C             _if39_exit:
3396   169C             _for38_update:
3397   169C 0A 7D 14      jmp _for38_cond
3398   169F             _for38_exit:
3399   169F F9            leave
3400   16A0 09            ret
3401   16A1             
3402   16A1             err:
3403   16A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3404   16A4             ;; print(e); 
3405   16A4 FA 05 00      lea d, [bp + 5] ; $e
3406   16A7 2A            mov b, [d]
3407   16A8 FD AB         swp b
3408   16AA D8            push b
3409   16AB 07 94 1C      call print
3410   16AE 51 02 00      add sp, 2
3411   16B1             ;; exit(); 
3412   16B1 07 35 07      call exit
3413   16B4 F9            leave
3414   16B5 09            ret
3415   16B6             
3416   16B6             printx32:
3417   16B6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3418   16B9             
3419   16B9             ; --- BEGIN INLINE ASM BLOCK
3420   16B9 FA 05 00      lea d, [bp + 5] ; $hex
3421   16BC 2B 02 00      mov b, [d+2]
3422   16BF 07 CE 1F      call print_u16x
3423   16C2 2A            mov b, [d]
3424   16C3 07 CE 1F      call print_u16x
3425   16C6             ; --- END INLINE ASM BLOCK
3426   16C6             
3427   16C6 F9            leave
3428   16C7 09            ret
3429   16C8             
3430   16C8             printx16:
3431   16C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3432   16CB             
3433   16CB             ; --- BEGIN INLINE ASM BLOCK
3434   16CB FA 05 00      lea d, [bp + 5] ; $hex
3435   16CE 2A            mov b, [d]
3436   16CF 07 CE 1F      call print_u16x
3437   16D2             ; --- END INLINE ASM BLOCK
3438   16D2             
3439   16D2 F9            leave
3440   16D3 09            ret
3441   16D4             
3442   16D4             printx8:
3443   16D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3444   16D7             
3445   16D7             ; --- BEGIN INLINE ASM BLOCK
3446   16D7 FA 05 00      lea d, [bp + 5] ; $hex
3447   16DA 32            mov bl, [d]
3448   16DB 07 12 20      call print_u8x
3449   16DE             ; --- END INLINE ASM BLOCK
3450   16DE             
3451   16DE F9            leave
3452   16DF 09            ret
3453   16E0             
3454   16E0             hex_to_int:
3455   16E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3456   16E3             ; $value 
3457   16E3 10 00 00      mov a, $0
3458   16E6 45 FF FF      mov [bp + -1], a
3459   16E9             ; $i 
3460   16E9             ; $hex_char 
3461   16E9             ; $len 
3462   16E9 52 07 00      sub sp, 7
3463   16EC             ;; len = strlen(hex_string); 
3464   16EC FA FA FF      lea d, [bp + -6] ; $len
3465   16EF DA            push d
3466   16F0 FA 05 00      lea d, [bp + 5] ; $hex_string
3467   16F3 2A            mov b, [d]
3468   16F4 FD AB         swp b
3469   16F6 D8            push b
3470   16F7 07 EC 06      call strlen
3471   16FA 51 02 00      add sp, 2
3472   16FD E7            pop d
3473   16FE FD 43         mov [d], b
3474   1700             ;; for (i = 0; i < len; i++) { 
3475   1700             _for45_init:
3476   1700 FA FD FF      lea d, [bp + -3] ; $i
3477   1703 DA            push d
3478   1704 26 00 00      mov b, $0
3479   1707 E7            pop d
3480   1708 FD 43         mov [d], b
3481   170A             _for45_cond:
3482   170A FA FD FF      lea d, [bp + -3] ; $i
3483   170D 2A            mov b, [d]
3484   170E             ; START RELATIONAL
3485   170E D7            push a
3486   170F 11            mov a, b
3487   1710 FA FA FF      lea d, [bp + -6] ; $len
3488   1713 2A            mov b, [d]
3489   1714 B0            cmp a, b
3490   1715 FD 73         slt ; <= (signed)
3491   1717 E4            pop a
3492   1718             ; END RELATIONAL
3493   1718 C0 00 00      cmp b, 0
3494   171B C6 1D 18      je _for45_exit
3495   171E             _for45_block:
3496   171E             ;; hex_char = hex_string[i]; 
3497   171E FA FC FF      lea d, [bp + -4] ; $hex_char
3498   1721 DA            push d
3499   1722 FA 05 00      lea d, [bp + 5] ; $hex_string
3500   1725 FD 2A         mov d, [d]
3501   1727 D7            push a
3502   1728 DA            push d
3503   1729 FA FD FF      lea d, [bp + -3] ; $i
3504   172C 2A            mov b, [d]
3505   172D E7            pop d
3506   172E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3507   1732 E4            pop a
3508   1733 32            mov bl, [d]
3509   1734 A7 00         mov bh, 0
3510   1736 E7            pop d
3511   1737 FD 3E         mov [d], bl
3512   1739             ;; if (hex_char >= 'a' && hex_char <= 'f')  
3513   1739             _if46_cond:
3514   1739 FA FC FF      lea d, [bp + -4] ; $hex_char
3515   173C 32            mov bl, [d]
3516   173D A7 00         mov bh, 0
3517   173F             ; START RELATIONAL
3518   173F D7            push a
3519   1740 11            mov a, b
3520   1741 26 61 00      mov b, $61
3521   1744 B0            cmp a, b
3522   1745 FD 80         sge ; >=
3523   1747 E4            pop a
3524   1748             ; END RELATIONAL
3525   1748 D7            push a
3526   1749 11            mov a, b
3527   174A FA FC FF      lea d, [bp + -4] ; $hex_char
3528   174D 32            mov bl, [d]
3529   174E A7 00         mov bh, 0
3530   1750             ; START RELATIONAL
3531   1750 D7            push a
3532   1751 11            mov a, b
3533   1752 26 66 00      mov b, $66
3534   1755 B0            cmp a, b
3535   1756 FD 74         sle ; <=
3536   1758 E4            pop a
3537   1759             ; END RELATIONAL
3538   1759 FD A7         sand a, b ; &&
3539   175B E4            pop a
3540   175C C0 00 00      cmp b, 0
3541   175F C6 90 17      je _if46_else
3542   1762             _if46_true:
3543   1762             ;; value = (value * 16) + (hex_char - 'a' + 10); 
3544   1762 FA FF FF      lea d, [bp + -1] ; $value
3545   1765 DA            push d
3546   1766 FA FF FF      lea d, [bp + -1] ; $value
3547   1769 2A            mov b, [d]
3548   176A             ; START FACTORS
3549   176A D7            push a
3550   176B 11            mov a, b
3551   176C 26 10 00      mov b, $10
3552   176F AC            mul a, b ; *
3553   1770 11            mov a, b
3554   1771 27            mov b, a
3555   1772 E4            pop a
3556   1773             ; END FACTORS
3557   1773             ; START TERMS
3558   1773 D7            push a
3559   1774 11            mov a, b
3560   1775 FA FC FF      lea d, [bp + -4] ; $hex_char
3561   1778 32            mov bl, [d]
3562   1779 A7 00         mov bh, 0
3563   177B             ; START TERMS
3564   177B D7            push a
3565   177C 11            mov a, b
3566   177D 26 61 00      mov b, $61
3567   1780 60            sub a, b
3568   1781 27            mov b, a
3569   1782 11            mov a, b
3570   1783 26 0A 00      mov b, $a
3571   1786 56            add b, a
3572   1787 E4            pop a
3573   1788             ; END TERMS
3574   1788 56            add b, a
3575   1789 E4            pop a
3576   178A             ; END TERMS
3577   178A E7            pop d
3578   178B FD 43         mov [d], b
3579   178D 0A 0D 18      jmp _if46_exit
3580   1790             _if46_else:
3581   1790             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3582   1790             _if47_cond:
3583   1790 FA FC FF      lea d, [bp + -4] ; $hex_char
3584   1793 32            mov bl, [d]
3585   1794 A7 00         mov bh, 0
3586   1796             ; START RELATIONAL
3587   1796 D7            push a
3588   1797 11            mov a, b
3589   1798 26 41 00      mov b, $41
3590   179B B0            cmp a, b
3591   179C FD 80         sge ; >=
3592   179E E4            pop a
3593   179F             ; END RELATIONAL
3594   179F D7            push a
3595   17A0 11            mov a, b
3596   17A1 FA FC FF      lea d, [bp + -4] ; $hex_char
3597   17A4 32            mov bl, [d]
3598   17A5 A7 00         mov bh, 0
3599   17A7             ; START RELATIONAL
3600   17A7 D7            push a
3601   17A8 11            mov a, b
3602   17A9 26 46 00      mov b, $46
3603   17AC B0            cmp a, b
3604   17AD FD 74         sle ; <=
3605   17AF E4            pop a
3606   17B0             ; END RELATIONAL
3607   17B0 FD A7         sand a, b ; &&
3608   17B2 E4            pop a
3609   17B3 C0 00 00      cmp b, 0
3610   17B6 C6 E7 17      je _if47_else
3611   17B9             _if47_true:
3612   17B9             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3613   17B9 FA FF FF      lea d, [bp + -1] ; $value
3614   17BC DA            push d
3615   17BD FA FF FF      lea d, [bp + -1] ; $value
3616   17C0 2A            mov b, [d]
3617   17C1             ; START FACTORS
3618   17C1 D7            push a
3619   17C2 11            mov a, b
3620   17C3 26 10 00      mov b, $10
3621   17C6 AC            mul a, b ; *
3622   17C7 11            mov a, b
3623   17C8 27            mov b, a
3624   17C9 E4            pop a
3625   17CA             ; END FACTORS
3626   17CA             ; START TERMS
3627   17CA D7            push a
3628   17CB 11            mov a, b
3629   17CC FA FC FF      lea d, [bp + -4] ; $hex_char
3630   17CF 32            mov bl, [d]
3631   17D0 A7 00         mov bh, 0
3632   17D2             ; START TERMS
3633   17D2 D7            push a
3634   17D3 11            mov a, b
3635   17D4 26 41 00      mov b, $41
3636   17D7 60            sub a, b
3637   17D8 27            mov b, a
3638   17D9 11            mov a, b
3639   17DA 26 0A 00      mov b, $a
3640   17DD 56            add b, a
3641   17DE E4            pop a
3642   17DF             ; END TERMS
3643   17DF 56            add b, a
3644   17E0 E4            pop a
3645   17E1             ; END TERMS
3646   17E1 E7            pop d
3647   17E2 FD 43         mov [d], b
3648   17E4 0A 0D 18      jmp _if47_exit
3649   17E7             _if47_else:
3650   17E7             ;; value = (value * 16) + (hex_char - '0'); 
3651   17E7 FA FF FF      lea d, [bp + -1] ; $value
3652   17EA DA            push d
3653   17EB FA FF FF      lea d, [bp + -1] ; $value
3654   17EE 2A            mov b, [d]
3655   17EF             ; START FACTORS
3656   17EF D7            push a
3657   17F0 11            mov a, b
3658   17F1 26 10 00      mov b, $10
3659   17F4 AC            mul a, b ; *
3660   17F5 11            mov a, b
3661   17F6 27            mov b, a
3662   17F7 E4            pop a
3663   17F8             ; END FACTORS
3664   17F8             ; START TERMS
3665   17F8 D7            push a
3666   17F9 11            mov a, b
3667   17FA FA FC FF      lea d, [bp + -4] ; $hex_char
3668   17FD 32            mov bl, [d]
3669   17FE A7 00         mov bh, 0
3670   1800             ; START TERMS
3671   1800 D7            push a
3672   1801 11            mov a, b
3673   1802 26 30 00      mov b, $30
3674   1805 60            sub a, b
3675   1806 27            mov b, a
3676   1807 E4            pop a
3677   1808             ; END TERMS
3678   1808 56            add b, a
3679   1809 E4            pop a
3680   180A             ; END TERMS
3681   180A E7            pop d
3682   180B FD 43         mov [d], b
3683   180D             _if47_exit:
3684   180D             _if46_exit:
3685   180D             _for45_update:
3686   180D FA FD FF      lea d, [bp + -3] ; $i
3687   1810 2A            mov b, [d]
3688   1811 D8            push b
3689   1812 FD 77         inc b
3690   1814 FA FD FF      lea d, [bp + -3] ; $i
3691   1817 FD 43         mov [d], b
3692   1819 E5            pop b
3693   181A 0A 0A 17      jmp _for45_cond
3694   181D             _for45_exit:
3695   181D             ;; return value; 
3696   181D FA FF FF      lea d, [bp + -1] ; $value
3697   1820 2A            mov b, [d]
3698   1821 F9            leave
3699   1822 09            ret
3700   1823             
3701   1823             gets:
3702   1823 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3703   1826             
3704   1826             ; --- BEGIN INLINE ASM BLOCK
3705   1826 FA 05 00      lea d, [bp + 5] ; $s
3706   1829 15            mov a, [d]
3707   182A 3C            mov d, a
3708   182B 07 33 1E      call _gets
3709   182E             ; --- END INLINE ASM BLOCK
3710   182E             
3711   182E             ;; return strlen(s); 
3712   182E FA 05 00      lea d, [bp + 5] ; $s
3713   1831 2A            mov b, [d]
3714   1832 FD AB         swp b
3715   1834 D8            push b
3716   1835 07 EC 06      call strlen
3717   1838 51 02 00      add sp, 2
3718   183B F9            leave
3719   183C 09            ret
3720   183D             
3721   183D             print_signed:
3722   183D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3723   1840             ; $digits 
3724   1840             ; $i 
3725   1840 10 00 00      mov a, $0
3726   1843 45 FA FF      mov [bp + -6], a
3727   1846 52 07 00      sub sp, 7
3728   1849             ;; if (num < 0) { 
3729   1849             _if48_cond:
3730   1849 FA 05 00      lea d, [bp + 5] ; $num
3731   184C 2A            mov b, [d]
3732   184D             ; START RELATIONAL
3733   184D D7            push a
3734   184E 11            mov a, b
3735   184F 26 00 00      mov b, $0
3736   1852 B0            cmp a, b
3737   1853 FD 73         slt ; <= (signed)
3738   1855 E4            pop a
3739   1856             ; END RELATIONAL
3740   1856 C0 00 00      cmp b, 0
3741   1859 C6 76 18      je _if48_else
3742   185C             _if48_true:
3743   185C             ;; putchar('-'); 
3744   185C 26 2D 00      mov b, $2d
3745   185F DD            push bl
3746   1860 07 4C 1C      call putchar
3747   1863 51 01 00      add sp, 1
3748   1866             ;; num = -num; 
3749   1866 FA 05 00      lea d, [bp + 5] ; $num
3750   1869 DA            push d
3751   186A FA 05 00      lea d, [bp + 5] ; $num
3752   186D 2A            mov b, [d]
3753   186E FD 97         neg b
3754   1870 E7            pop d
3755   1871 FD 43         mov [d], b
3756   1873 0A 98 18      jmp _if48_exit
3757   1876             _if48_else:
3758   1876             ;; if (num == 0) { 
3759   1876             _if49_cond:
3760   1876 FA 05 00      lea d, [bp + 5] ; $num
3761   1879 2A            mov b, [d]
3762   187A             ; START RELATIONAL
3763   187A D7            push a
3764   187B 11            mov a, b
3765   187C 26 00 00      mov b, $0
3766   187F B0            cmp a, b
3767   1880 FD 71         seq ; ==
3768   1882 E4            pop a
3769   1883             ; END RELATIONAL
3770   1883 C0 00 00      cmp b, 0
3771   1886 C6 98 18      je _if49_exit
3772   1889             _if49_true:
3773   1889             ;; putchar('0'); 
3774   1889 26 30 00      mov b, $30
3775   188C DD            push bl
3776   188D 07 4C 1C      call putchar
3777   1890 51 01 00      add sp, 1
3778   1893             ;; return; 
3779   1893 F9            leave
3780   1894 09            ret
3781   1895 0A 98 18      jmp _if49_exit
3782   1898             _if49_exit:
3783   1898             _if48_exit:
3784   1898             ;; while (num > 0) { 
3785   1898             _while50_cond:
3786   1898 FA 05 00      lea d, [bp + 5] ; $num
3787   189B 2A            mov b, [d]
3788   189C             ; START RELATIONAL
3789   189C D7            push a
3790   189D 11            mov a, b
3791   189E 26 00 00      mov b, $0
3792   18A1 B0            cmp a, b
3793   18A2 FD 7F         sgt ; >
3794   18A4 E4            pop a
3795   18A5             ; END RELATIONAL
3796   18A5 C0 00 00      cmp b, 0
3797   18A8 C6 F2 18      je _while50_exit
3798   18AB             _while50_block:
3799   18AB             ;; digits[i] = '0' + (num % 10); 
3800   18AB FA FC FF      lea d, [bp + -4] ; $digits
3801   18AE D7            push a
3802   18AF DA            push d
3803   18B0 FA FA FF      lea d, [bp + -6] ; $i
3804   18B3 2A            mov b, [d]
3805   18B4 E7            pop d
3806   18B5 5A            add d, b
3807   18B6 E4            pop a
3808   18B7 DA            push d
3809   18B8 26 30 00      mov b, $30
3810   18BB             ; START TERMS
3811   18BB D7            push a
3812   18BC 11            mov a, b
3813   18BD FA 05 00      lea d, [bp + 5] ; $num
3814   18C0 2A            mov b, [d]
3815   18C1             ; START FACTORS
3816   18C1 D7            push a
3817   18C2 11            mov a, b
3818   18C3 26 0A 00      mov b, $a
3819   18C6 AE            div a, b ; 
3820   18C7 11            mov a, b
3821   18C8 27            mov b, a
3822   18C9 E4            pop a
3823   18CA             ; END FACTORS
3824   18CA 56            add b, a
3825   18CB E4            pop a
3826   18CC             ; END TERMS
3827   18CC E7            pop d
3828   18CD FD 3E         mov [d], bl
3829   18CF             ;; num = num / 10; 
3830   18CF FA 05 00      lea d, [bp + 5] ; $num
3831   18D2 DA            push d
3832   18D3 FA 05 00      lea d, [bp + 5] ; $num
3833   18D6 2A            mov b, [d]
3834   18D7             ; START FACTORS
3835   18D7 D7            push a
3836   18D8 11            mov a, b
3837   18D9 26 0A 00      mov b, $a
3838   18DC AE            div a, b
3839   18DD 27            mov b, a
3840   18DE E4            pop a
3841   18DF             ; END FACTORS
3842   18DF E7            pop d
3843   18E0 FD 43         mov [d], b
3844   18E2             ;; i++; 
3845   18E2 FA FA FF      lea d, [bp + -6] ; $i
3846   18E5 2A            mov b, [d]
3847   18E6 D8            push b
3848   18E7 FD 77         inc b
3849   18E9 FA FA FF      lea d, [bp + -6] ; $i
3850   18EC FD 43         mov [d], b
3851   18EE E5            pop b
3852   18EF 0A 98 18      jmp _while50_cond
3853   18F2             _while50_exit:
3854   18F2             ;; while (i > 0) { 
3855   18F2             _while51_cond:
3856   18F2 FA FA FF      lea d, [bp + -6] ; $i
3857   18F5 2A            mov b, [d]
3858   18F6             ; START RELATIONAL
3859   18F6 D7            push a
3860   18F7 11            mov a, b
3861   18F8 26 00 00      mov b, $0
3862   18FB B0            cmp a, b
3863   18FC FD 7F         sgt ; >
3864   18FE E4            pop a
3865   18FF             ; END RELATIONAL
3866   18FF C0 00 00      cmp b, 0
3867   1902 C6 2B 19      je _while51_exit
3868   1905             _while51_block:
3869   1905             ;; i--; 
3870   1905 FA FA FF      lea d, [bp + -6] ; $i
3871   1908 2A            mov b, [d]
3872   1909 D8            push b
3873   190A FD 7D         dec b
3874   190C FA FA FF      lea d, [bp + -6] ; $i
3875   190F FD 43         mov [d], b
3876   1911 E5            pop b
3877   1912             ;; putchar(digits[i]); 
3878   1912 FA FC FF      lea d, [bp + -4] ; $digits
3879   1915 D7            push a
3880   1916 DA            push d
3881   1917 FA FA FF      lea d, [bp + -6] ; $i
3882   191A 2A            mov b, [d]
3883   191B E7            pop d
3884   191C 5A            add d, b
3885   191D E4            pop a
3886   191E 32            mov bl, [d]
3887   191F A7 00         mov bh, 0
3888   1921 DD            push bl
3889   1922 07 4C 1C      call putchar
3890   1925 51 01 00      add sp, 1
3891   1928 0A F2 18      jmp _while51_cond
3892   192B             _while51_exit:
3893   192B F9            leave
3894   192C 09            ret
3895   192D             
3896   192D             print_signed_long:
3897   192D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3898   1930             ; $digits 
3899   1930             ; $i 
3900   1930 10 00 00      mov a, $0
3901   1933 45 F5 FF      mov [bp + -11], a
3902   1936 52 0C 00      sub sp, 12
3903   1939             ;; if (num < 0) { 
3904   1939             _if52_cond:
3905   1939 FA 05 00      lea d, [bp + 5] ; $num
3906   193C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3907   193F FD 39         mov c, b ; And place it into C
3908   1941 2A            mov b, [d] ; Lower Word in B
3909   1942             ; START RELATIONAL
3910   1942 D7            push a
3911   1943 FD D8         push g
3912   1945 11            mov a, b
3913   1946 FD 7A         mov g, c
3914   1948 26 00 00      mov b, $0
3915   194B 4D            mov si, a
3916   194C 11            mov a, b
3917   194D 4F            mov di, a
3918   194E FD 12         mov a, g
3919   1950 28            mov b, c
3920   1951 B0            cmp a, b
3921   1952 FD 75         slu ; <
3922   1954 D8            push b
3923   1955 28            mov b, c
3924   1956 FD 71         seq ; ==
3925   1958 D8            push b
3926   1959 50            mov a, di
3927   195A 27            mov b, a
3928   195B 4E            mov a, si
3929   195C B0            cmp a, b
3930   195D FD 75         slu ; <
3931   195F E4            pop a
3932   1960 FD 92         and b, a
3933   1962 E4            pop a
3934   1963 FD 70         or b, a
3935   1965               
3936   1965 FD F1         pop g
3937   1967 E4            pop a
3938   1968             ; END RELATIONAL
3939   1968 C0 00 00      cmp b, 0
3940   196B C6 92 19      je _if52_else
3941   196E             _if52_true:
3942   196E             ;; putchar('-'); 
3943   196E 26 2D 00      mov b, $2d
3944   1971 DD            push bl
3945   1972 07 4C 1C      call putchar
3946   1975 51 01 00      add sp, 1
3947   1978             ;; num = -num; 
3948   1978 FA 05 00      lea d, [bp + 5] ; $num
3949   197B DA            push d
3950   197C FA 05 00      lea d, [bp + 5] ; $num
3951   197F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3952   1982 FD 39         mov c, b ; And place it into C
3953   1984 2A            mov b, [d] ; Lower Word in B
3954   1985 FD 97         neg b
3955   1987 E7            pop d
3956   1988 FD 43         mov [d], b
3957   198A 28            mov b, c
3958   198B FD 44 02 00   mov [d + 2], b
3959   198F 0A C9 19      jmp _if52_exit
3960   1992             _if52_else:
3961   1992             ;; if (num == 0) { 
3962   1992             _if53_cond:
3963   1992 FA 05 00      lea d, [bp + 5] ; $num
3964   1995 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3965   1998 FD 39         mov c, b ; And place it into C
3966   199A 2A            mov b, [d] ; Lower Word in B
3967   199B             ; START RELATIONAL
3968   199B D7            push a
3969   199C FD D8         push g
3970   199E 11            mov a, b
3971   199F FD 7A         mov g, c
3972   19A1 26 00 00      mov b, $0
3973   19A4 B0            cmp a, b
3974   19A5 FD 71         seq ; ==
3975   19A7 D8            push b
3976   19A8 12            mov a, c
3977   19A9 FD 27         mov b, g
3978   19AB B0            cmp a, b
3979   19AC FD 71         seq ; ==
3980   19AE E4            pop a
3981   19AF FD A7         sand a, b
3982   19B1 FD F1         pop g
3983   19B3 E4            pop a
3984   19B4             ; END RELATIONAL
3985   19B4 C0 00 00      cmp b, 0
3986   19B7 C6 C9 19      je _if53_exit
3987   19BA             _if53_true:
3988   19BA             ;; putchar('0'); 
3989   19BA 26 30 00      mov b, $30
3990   19BD DD            push bl
3991   19BE 07 4C 1C      call putchar
3992   19C1 51 01 00      add sp, 1
3993   19C4             ;; return; 
3994   19C4 F9            leave
3995   19C5 09            ret
3996   19C6 0A C9 19      jmp _if53_exit
3997   19C9             _if53_exit:
3998   19C9             _if52_exit:
3999   19C9             ;; while (num > 0) { 
4000   19C9             _while54_cond:
4001   19C9 FA 05 00      lea d, [bp + 5] ; $num
4002   19CC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4003   19CF FD 39         mov c, b ; And place it into C
4004   19D1 2A            mov b, [d] ; Lower Word in B
4005   19D2             ; START RELATIONAL
4006   19D2 D7            push a
4007   19D3 FD D8         push g
4008   19D5 11            mov a, b
4009   19D6 FD 7A         mov g, c
4010   19D8 26 00 00      mov b, $0
4011   19DB B0            cmp a, b
4012   19DC FD 7F         sgt ; >
4013   19DE FD F1         pop g
4014   19E0 E4            pop a
4015   19E1             ; END RELATIONAL
4016   19E1 C0 00 00      cmp b, 0
4017   19E4 C6 44 1A      je _while54_exit
4018   19E7             _while54_block:
4019   19E7             ;; digits[i] = '0' + (num % 10); 
4020   19E7 FA F7 FF      lea d, [bp + -9] ; $digits
4021   19EA D7            push a
4022   19EB DA            push d
4023   19EC FA F5 FF      lea d, [bp + -11] ; $i
4024   19EF 2A            mov b, [d]
4025   19F0 E7            pop d
4026   19F1 5A            add d, b
4027   19F2 E4            pop a
4028   19F3 DA            push d
4029   19F4 26 30 00      mov b, $30
4030   19F7             ; START TERMS
4031   19F7 D7            push a
4032   19F8 11            mov a, b
4033   19F9 FA 05 00      lea d, [bp + 5] ; $num
4034   19FC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4035   19FF FD 39         mov c, b ; And place it into C
4036   1A01 2A            mov b, [d] ; Lower Word in B
4037   1A02             ; START FACTORS
4038   1A02 D7            push a
4039   1A03 11            mov a, b
4040   1A04 26 0A 00      mov b, $a
4041   1A07 AE            div a, b ; 
4042   1A08 11            mov a, b
4043   1A09 27            mov b, a
4044   1A0A E4            pop a
4045   1A0B             ; END FACTORS
4046   1A0B 54            add a, b
4047   1A0C D7            push a
4048   1A0D FD 12         mov a, g
4049   1A0F 28            mov b, c
4050   1A10 5C            adc a, b
4051   1A11 39            mov c, a
4052   1A12 E5            pop b
4053   1A13 E4            pop a
4054   1A14             ; END TERMS
4055   1A14 E7            pop d
4056   1A15 FD 3E         mov [d], bl
4057   1A17             ;; num = num / 10; 
4058   1A17 FA 05 00      lea d, [bp + 5] ; $num
4059   1A1A DA            push d
4060   1A1B FA 05 00      lea d, [bp + 5] ; $num
4061   1A1E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4062   1A21 FD 39         mov c, b ; And place it into C
4063   1A23 2A            mov b, [d] ; Lower Word in B
4064   1A24             ; START FACTORS
4065   1A24 D7            push a
4066   1A25 11            mov a, b
4067   1A26 26 0A 00      mov b, $a
4068   1A29 AE            div a, b
4069   1A2A 27            mov b, a
4070   1A2B E4            pop a
4071   1A2C             ; END FACTORS
4072   1A2C E7            pop d
4073   1A2D FD 43         mov [d], b
4074   1A2F 28            mov b, c
4075   1A30 FD 44 02 00   mov [d + 2], b
4076   1A34             ;; i++; 
4077   1A34 FA F5 FF      lea d, [bp + -11] ; $i
4078   1A37 2A            mov b, [d]
4079   1A38 D8            push b
4080   1A39 FD 77         inc b
4081   1A3B FA F5 FF      lea d, [bp + -11] ; $i
4082   1A3E FD 43         mov [d], b
4083   1A40 E5            pop b
4084   1A41 0A C9 19      jmp _while54_cond
4085   1A44             _while54_exit:
4086   1A44             ;; while (i > 0) { 
4087   1A44             _while55_cond:
4088   1A44 FA F5 FF      lea d, [bp + -11] ; $i
4089   1A47 2A            mov b, [d]
4090   1A48             ; START RELATIONAL
4091   1A48 D7            push a
4092   1A49 11            mov a, b
4093   1A4A 26 00 00      mov b, $0
4094   1A4D B0            cmp a, b
4095   1A4E FD 7F         sgt ; >
4096   1A50 E4            pop a
4097   1A51             ; END RELATIONAL
4098   1A51 C0 00 00      cmp b, 0
4099   1A54 C6 7D 1A      je _while55_exit
4100   1A57             _while55_block:
4101   1A57             ;; i--; 
4102   1A57 FA F5 FF      lea d, [bp + -11] ; $i
4103   1A5A 2A            mov b, [d]
4104   1A5B D8            push b
4105   1A5C FD 7D         dec b
4106   1A5E FA F5 FF      lea d, [bp + -11] ; $i
4107   1A61 FD 43         mov [d], b
4108   1A63 E5            pop b
4109   1A64             ;; putchar(digits[i]); 
4110   1A64 FA F7 FF      lea d, [bp + -9] ; $digits
4111   1A67 D7            push a
4112   1A68 DA            push d
4113   1A69 FA F5 FF      lea d, [bp + -11] ; $i
4114   1A6C 2A            mov b, [d]
4115   1A6D E7            pop d
4116   1A6E 5A            add d, b
4117   1A6F E4            pop a
4118   1A70 32            mov bl, [d]
4119   1A71 A7 00         mov bh, 0
4120   1A73 DD            push bl
4121   1A74 07 4C 1C      call putchar
4122   1A77 51 01 00      add sp, 1
4123   1A7A 0A 44 1A      jmp _while55_cond
4124   1A7D             _while55_exit:
4125   1A7D F9            leave
4126   1A7E 09            ret
4127   1A7F             
4128   1A7F             print_unsigned_long:
4129   1A7F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4130   1A82             ; $digits 
4131   1A82             ; $i 
4132   1A82 52 0C 00      sub sp, 12
4133   1A85             ;; i = 0; 
4134   1A85 FA F5 FF      lea d, [bp + -11] ; $i
4135   1A88 DA            push d
4136   1A89 26 00 00      mov b, $0
4137   1A8C E7            pop d
4138   1A8D FD 43         mov [d], b
4139   1A8F             ;; if(num == 0){ 
4140   1A8F             _if56_cond:
4141   1A8F FA 05 00      lea d, [bp + 5] ; $num
4142   1A92 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4143   1A95 FD 39         mov c, b ; And place it into C
4144   1A97 2A            mov b, [d] ; Lower Word in B
4145   1A98             ; START RELATIONAL
4146   1A98 D7            push a
4147   1A99 FD D8         push g
4148   1A9B 11            mov a, b
4149   1A9C FD 7A         mov g, c
4150   1A9E 26 00 00      mov b, $0
4151   1AA1 B0            cmp a, b
4152   1AA2 FD 71         seq ; ==
4153   1AA4 D8            push b
4154   1AA5 12            mov a, c
4155   1AA6 FD 27         mov b, g
4156   1AA8 B0            cmp a, b
4157   1AA9 FD 71         seq ; ==
4158   1AAB E4            pop a
4159   1AAC FD A7         sand a, b
4160   1AAE FD F1         pop g
4161   1AB0 E4            pop a
4162   1AB1             ; END RELATIONAL
4163   1AB1 C0 00 00      cmp b, 0
4164   1AB4 C6 C6 1A      je _if56_exit
4165   1AB7             _if56_true:
4166   1AB7             ;; putchar('0'); 
4167   1AB7 26 30 00      mov b, $30
4168   1ABA DD            push bl
4169   1ABB 07 4C 1C      call putchar
4170   1ABE 51 01 00      add sp, 1
4171   1AC1             ;; return; 
4172   1AC1 F9            leave
4173   1AC2 09            ret
4174   1AC3 0A C6 1A      jmp _if56_exit
4175   1AC6             _if56_exit:
4176   1AC6             ;; while (num > 0) { 
4177   1AC6             _while57_cond:
4178   1AC6 FA 05 00      lea d, [bp + 5] ; $num
4179   1AC9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4180   1ACC FD 39         mov c, b ; And place it into C
4181   1ACE 2A            mov b, [d] ; Lower Word in B
4182   1ACF             ; START RELATIONAL
4183   1ACF D7            push a
4184   1AD0 FD D8         push g
4185   1AD2 11            mov a, b
4186   1AD3 FD 7A         mov g, c
4187   1AD5 26 00 00      mov b, $0
4188   1AD8 B0            cmp a, b
4189   1AD9 FD 81         sgu ; > (unsigned)
4190   1ADB FD F1         pop g
4191   1ADD E4            pop a
4192   1ADE             ; END RELATIONAL
4193   1ADE C0 00 00      cmp b, 0
4194   1AE1 C6 41 1B      je _while57_exit
4195   1AE4             _while57_block:
4196   1AE4             ;; digits[i] = '0' + (num % 10); 
4197   1AE4 FA F7 FF      lea d, [bp + -9] ; $digits
4198   1AE7 D7            push a
4199   1AE8 DA            push d
4200   1AE9 FA F5 FF      lea d, [bp + -11] ; $i
4201   1AEC 2A            mov b, [d]
4202   1AED E7            pop d
4203   1AEE 5A            add d, b
4204   1AEF E4            pop a
4205   1AF0 DA            push d
4206   1AF1 26 30 00      mov b, $30
4207   1AF4             ; START TERMS
4208   1AF4 D7            push a
4209   1AF5 11            mov a, b
4210   1AF6 FA 05 00      lea d, [bp + 5] ; $num
4211   1AF9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4212   1AFC FD 39         mov c, b ; And place it into C
4213   1AFE 2A            mov b, [d] ; Lower Word in B
4214   1AFF             ; START FACTORS
4215   1AFF D7            push a
4216   1B00 11            mov a, b
4217   1B01 26 0A 00      mov b, $a
4218   1B04 AE            div a, b ; 
4219   1B05 11            mov a, b
4220   1B06 27            mov b, a
4221   1B07 E4            pop a
4222   1B08             ; END FACTORS
4223   1B08 54            add a, b
4224   1B09 D7            push a
4225   1B0A FD 12         mov a, g
4226   1B0C 28            mov b, c
4227   1B0D 5C            adc a, b
4228   1B0E 39            mov c, a
4229   1B0F E5            pop b
4230   1B10 E4            pop a
4231   1B11             ; END TERMS
4232   1B11 E7            pop d
4233   1B12 FD 3E         mov [d], bl
4234   1B14             ;; num = num / 10; 
4235   1B14 FA 05 00      lea d, [bp + 5] ; $num
4236   1B17 DA            push d
4237   1B18 FA 05 00      lea d, [bp + 5] ; $num
4238   1B1B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4239   1B1E FD 39         mov c, b ; And place it into C
4240   1B20 2A            mov b, [d] ; Lower Word in B
4241   1B21             ; START FACTORS
4242   1B21 D7            push a
4243   1B22 11            mov a, b
4244   1B23 26 0A 00      mov b, $a
4245   1B26 AE            div a, b
4246   1B27 27            mov b, a
4247   1B28 E4            pop a
4248   1B29             ; END FACTORS
4249   1B29 E7            pop d
4250   1B2A FD 43         mov [d], b
4251   1B2C 28            mov b, c
4252   1B2D FD 44 02 00   mov [d + 2], b
4253   1B31             ;; i++; 
4254   1B31 FA F5 FF      lea d, [bp + -11] ; $i
4255   1B34 2A            mov b, [d]
4256   1B35 D8            push b
4257   1B36 FD 77         inc b
4258   1B38 FA F5 FF      lea d, [bp + -11] ; $i
4259   1B3B FD 43         mov [d], b
4260   1B3D E5            pop b
4261   1B3E 0A C6 1A      jmp _while57_cond
4262   1B41             _while57_exit:
4263   1B41             ;; while (i > 0) { 
4264   1B41             _while58_cond:
4265   1B41 FA F5 FF      lea d, [bp + -11] ; $i
4266   1B44 2A            mov b, [d]
4267   1B45             ; START RELATIONAL
4268   1B45 D7            push a
4269   1B46 11            mov a, b
4270   1B47 26 00 00      mov b, $0
4271   1B4A B0            cmp a, b
4272   1B4B FD 7F         sgt ; >
4273   1B4D E4            pop a
4274   1B4E             ; END RELATIONAL
4275   1B4E C0 00 00      cmp b, 0
4276   1B51 C6 7A 1B      je _while58_exit
4277   1B54             _while58_block:
4278   1B54             ;; i--; 
4279   1B54 FA F5 FF      lea d, [bp + -11] ; $i
4280   1B57 2A            mov b, [d]
4281   1B58 D8            push b
4282   1B59 FD 7D         dec b
4283   1B5B FA F5 FF      lea d, [bp + -11] ; $i
4284   1B5E FD 43         mov [d], b
4285   1B60 E5            pop b
4286   1B61             ;; putchar(digits[i]); 
4287   1B61 FA F7 FF      lea d, [bp + -9] ; $digits
4288   1B64 D7            push a
4289   1B65 DA            push d
4290   1B66 FA F5 FF      lea d, [bp + -11] ; $i
4291   1B69 2A            mov b, [d]
4292   1B6A E7            pop d
4293   1B6B 5A            add d, b
4294   1B6C E4            pop a
4295   1B6D 32            mov bl, [d]
4296   1B6E A7 00         mov bh, 0
4297   1B70 DD            push bl
4298   1B71 07 4C 1C      call putchar
4299   1B74 51 01 00      add sp, 1
4300   1B77 0A 41 1B      jmp _while58_cond
4301   1B7A             _while58_exit:
4302   1B7A F9            leave
4303   1B7B 09            ret
4304   1B7C             
4305   1B7C             print_unsigned:
4306   1B7C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4307   1B7F             ; $digits 
4308   1B7F             ; $i 
4309   1B7F 52 07 00      sub sp, 7
4310   1B82             ;; i = 0; 
4311   1B82 FA FA FF      lea d, [bp + -6] ; $i
4312   1B85 DA            push d
4313   1B86 26 00 00      mov b, $0
4314   1B89 E7            pop d
4315   1B8A FD 43         mov [d], b
4316   1B8C             ;; if(num == 0){ 
4317   1B8C             _if59_cond:
4318   1B8C FA 05 00      lea d, [bp + 5] ; $num
4319   1B8F 2A            mov b, [d]
4320   1B90             ; START RELATIONAL
4321   1B90 D7            push a
4322   1B91 11            mov a, b
4323   1B92 26 00 00      mov b, $0
4324   1B95 B0            cmp a, b
4325   1B96 FD 71         seq ; ==
4326   1B98 E4            pop a
4327   1B99             ; END RELATIONAL
4328   1B99 C0 00 00      cmp b, 0
4329   1B9C C6 AE 1B      je _if59_exit
4330   1B9F             _if59_true:
4331   1B9F             ;; putchar('0'); 
4332   1B9F 26 30 00      mov b, $30
4333   1BA2 DD            push bl
4334   1BA3 07 4C 1C      call putchar
4335   1BA6 51 01 00      add sp, 1
4336   1BA9             ;; return; 
4337   1BA9 F9            leave
4338   1BAA 09            ret
4339   1BAB 0A AE 1B      jmp _if59_exit
4340   1BAE             _if59_exit:
4341   1BAE             ;; while (num > 0) { 
4342   1BAE             _while60_cond:
4343   1BAE FA 05 00      lea d, [bp + 5] ; $num
4344   1BB1 2A            mov b, [d]
4345   1BB2             ; START RELATIONAL
4346   1BB2 D7            push a
4347   1BB3 11            mov a, b
4348   1BB4 26 00 00      mov b, $0
4349   1BB7 B0            cmp a, b
4350   1BB8 FD 81         sgu ; > (unsigned)
4351   1BBA E4            pop a
4352   1BBB             ; END RELATIONAL
4353   1BBB C0 00 00      cmp b, 0
4354   1BBE C6 08 1C      je _while60_exit
4355   1BC1             _while60_block:
4356   1BC1             ;; digits[i] = '0' + (num % 10); 
4357   1BC1 FA FC FF      lea d, [bp + -4] ; $digits
4358   1BC4 D7            push a
4359   1BC5 DA            push d
4360   1BC6 FA FA FF      lea d, [bp + -6] ; $i
4361   1BC9 2A            mov b, [d]
4362   1BCA E7            pop d
4363   1BCB 5A            add d, b
4364   1BCC E4            pop a
4365   1BCD DA            push d
4366   1BCE 26 30 00      mov b, $30
4367   1BD1             ; START TERMS
4368   1BD1 D7            push a
4369   1BD2 11            mov a, b
4370   1BD3 FA 05 00      lea d, [bp + 5] ; $num
4371   1BD6 2A            mov b, [d]
4372   1BD7             ; START FACTORS
4373   1BD7 D7            push a
4374   1BD8 11            mov a, b
4375   1BD9 26 0A 00      mov b, $a
4376   1BDC AE            div a, b ; 
4377   1BDD 11            mov a, b
4378   1BDE 27            mov b, a
4379   1BDF E4            pop a
4380   1BE0             ; END FACTORS
4381   1BE0 56            add b, a
4382   1BE1 E4            pop a
4383   1BE2             ; END TERMS
4384   1BE2 E7            pop d
4385   1BE3 FD 3E         mov [d], bl
4386   1BE5             ;; num = num / 10; 
4387   1BE5 FA 05 00      lea d, [bp + 5] ; $num
4388   1BE8 DA            push d
4389   1BE9 FA 05 00      lea d, [bp + 5] ; $num
4390   1BEC 2A            mov b, [d]
4391   1BED             ; START FACTORS
4392   1BED D7            push a
4393   1BEE 11            mov a, b
4394   1BEF 26 0A 00      mov b, $a
4395   1BF2 AE            div a, b
4396   1BF3 27            mov b, a
4397   1BF4 E4            pop a
4398   1BF5             ; END FACTORS
4399   1BF5 E7            pop d
4400   1BF6 FD 43         mov [d], b
4401   1BF8             ;; i++; 
4402   1BF8 FA FA FF      lea d, [bp + -6] ; $i
4403   1BFB 2A            mov b, [d]
4404   1BFC D8            push b
4405   1BFD FD 77         inc b
4406   1BFF FA FA FF      lea d, [bp + -6] ; $i
4407   1C02 FD 43         mov [d], b
4408   1C04 E5            pop b
4409   1C05 0A AE 1B      jmp _while60_cond
4410   1C08             _while60_exit:
4411   1C08             ;; while (i > 0) { 
4412   1C08             _while61_cond:
4413   1C08 FA FA FF      lea d, [bp + -6] ; $i
4414   1C0B 2A            mov b, [d]
4415   1C0C             ; START RELATIONAL
4416   1C0C D7            push a
4417   1C0D 11            mov a, b
4418   1C0E 26 00 00      mov b, $0
4419   1C11 B0            cmp a, b
4420   1C12 FD 7F         sgt ; >
4421   1C14 E4            pop a
4422   1C15             ; END RELATIONAL
4423   1C15 C0 00 00      cmp b, 0
4424   1C18 C6 41 1C      je _while61_exit
4425   1C1B             _while61_block:
4426   1C1B             ;; i--; 
4427   1C1B FA FA FF      lea d, [bp + -6] ; $i
4428   1C1E 2A            mov b, [d]
4429   1C1F D8            push b
4430   1C20 FD 7D         dec b
4431   1C22 FA FA FF      lea d, [bp + -6] ; $i
4432   1C25 FD 43         mov [d], b
4433   1C27 E5            pop b
4434   1C28             ;; putchar(digits[i]); 
4435   1C28 FA FC FF      lea d, [bp + -4] ; $digits
4436   1C2B D7            push a
4437   1C2C DA            push d
4438   1C2D FA FA FF      lea d, [bp + -6] ; $i
4439   1C30 2A            mov b, [d]
4440   1C31 E7            pop d
4441   1C32 5A            add d, b
4442   1C33 E4            pop a
4443   1C34 32            mov bl, [d]
4444   1C35 A7 00         mov bh, 0
4445   1C37 DD            push bl
4446   1C38 07 4C 1C      call putchar
4447   1C3B 51 01 00      add sp, 1
4448   1C3E 0A 08 1C      jmp _while61_cond
4449   1C41             _while61_exit:
4450   1C41 F9            leave
4451   1C42 09            ret
4452   1C43             
4453   1C43             date:
4454   1C43 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4455   1C46             
4456   1C46             ; --- BEGIN INLINE ASM BLOCK
4457   1C46 19 00         mov al, 0 
4458   1C48 05 07         syscall sys_datetime
4459   1C4A             ; --- END INLINE ASM BLOCK
4460   1C4A             
4461   1C4A F9            leave
4462   1C4B 09            ret
4463   1C4C             
4464   1C4C             putchar:
4465   1C4C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4466   1C4F             
4467   1C4F             ; --- BEGIN INLINE ASM BLOCK
4468   1C4F FA 05 00      lea d, [bp + 5] ; $c
4469   1C52 1E            mov al, [d]
4470   1C53 23            mov ah, al
4471   1C54 07 2C 1E      call _putchar
4472   1C57             ; --- END INLINE ASM BLOCK
4473   1C57             
4474   1C57 F9            leave
4475   1C58 09            ret
4476   1C59             
4477   1C59             getchar:
4478   1C59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4479   1C5C             ; $c 
4480   1C5C 52 01 00      sub sp, 1
4481   1C5F             
4482   1C5F             ; --- BEGIN INLINE ASM BLOCK
4483   1C5F 07 25 1E      call getch
4484   1C62 1A            mov al, ah
4485   1C63 FA 00 00      lea d, [bp + 0] ; $c
4486   1C66 3E            mov [d], al
4487   1C67             ; --- END INLINE ASM BLOCK
4488   1C67             
4489   1C67             ;; return c; 
4490   1C67 FA 00 00      lea d, [bp + 0] ; $c
4491   1C6A 32            mov bl, [d]
4492   1C6B A7 00         mov bh, 0
4493   1C6D F9            leave
4494   1C6E 09            ret
4495   1C6F             
4496   1C6F             scann:
4497   1C6F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4498   1C72             ; $m 
4499   1C72 52 02 00      sub sp, 2
4500   1C75             
4501   1C75             ; --- BEGIN INLINE ASM BLOCK
4502   1C75 07 70 20      call scan_u16d
4503   1C78 FA FF FF      lea d, [bp + -1] ; $m
4504   1C7B 43            mov [d], a
4505   1C7C             ; --- END INLINE ASM BLOCK
4506   1C7C             
4507   1C7C             ;; return m; 
4508   1C7C FA FF FF      lea d, [bp + -1] ; $m
4509   1C7F 2A            mov b, [d]
4510   1C80 F9            leave
4511   1C81 09            ret
4512   1C82             
4513   1C82             puts:
4514   1C82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4515   1C85             
4516   1C85             ; --- BEGIN INLINE ASM BLOCK
4517   1C85 FA 05 00      lea d, [bp + 5] ; $s
4518   1C88 15            mov a, [d]
4519   1C89 3C            mov d, a
4520   1C8A 07 76 1F      call _puts
4521   1C8D 10 00 0A      mov a, $0A00
4522   1C90 05 03         syscall sys_io
4523   1C92             ; --- END INLINE ASM BLOCK
4524   1C92             
4525   1C92 F9            leave
4526   1C93 09            ret
4527   1C94             
4528   1C94             print:
4529   1C94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4530   1C97             
4531   1C97             ; --- BEGIN INLINE ASM BLOCK
4532   1C97 FA 05 00      lea d, [bp + 5] ; $s
4533   1C9A FD 2A         mov d, [d]
4534   1C9C 07 76 1F      call _puts
4535   1C9F             ; --- END INLINE ASM BLOCK
4536   1C9F             
4537   1C9F F9            leave
4538   1CA0 09            ret
4539   1CA1             
4540   1CA1             loadfile:
4541   1CA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4542   1CA4             
4543   1CA4             ; --- BEGIN INLINE ASM BLOCK
4544   1CA4 FA 07 00      lea d, [bp + 7] ; $destination
4545   1CA7 15            mov a, [d]
4546   1CA8 4F            mov di, a
4547   1CA9 FA 05 00      lea d, [bp + 5] ; $filename
4548   1CAC FD 2A         mov d, [d]
4549   1CAE 19 14         mov al, 20
4550   1CB0 05 04         syscall sys_filesystem
4551   1CB2             ; --- END INLINE ASM BLOCK
4552   1CB2             
4553   1CB2 F9            leave
4554   1CB3 09            ret
4555   1CB4             
4556   1CB4             create_file:
4557   1CB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4558   1CB7 F9            leave
4559   1CB8 09            ret
4560   1CB9             
4561   1CB9             delete_file:
4562   1CB9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4563   1CBC             
4564   1CBC             ; --- BEGIN INLINE ASM BLOCK
4565   1CBC FA 05 00      lea d, [bp + 5] ; $filename
4566   1CBF 19 0A         mov al, 10
4567   1CC1 05 04         syscall sys_filesystem
4568   1CC3             ; --- END INLINE ASM BLOCK
4569   1CC3             
4570   1CC3 F9            leave
4571   1CC4 09            ret
4572   1CC5             
4573   1CC5             fopen:
4574   1CC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4575   1CC8 F9            leave
4576   1CC9 09            ret
4577   1CCA             
4578   1CCA             fclose:
4579   1CCA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4580   1CCD F9            leave
4581   1CCE 09            ret
4582   1CCF             
4583   1CCF             load_hex:
4584   1CCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4585   1CD2             ; $temp 
4586   1CD2 52 02 00      sub sp, 2
4587   1CD5             ;; temp = alloc(32768); 
4588   1CD5 FA FF FF      lea d, [bp + -1] ; $temp
4589   1CD8 DA            push d
4590   1CD9 26 00 80      mov b, $8000
4591   1CDC FD AB         swp b
4592   1CDE D8            push b
4593   1CDF 07 76 08      call alloc
4594   1CE2 51 02 00      add sp, 2
4595   1CE5 E7            pop d
4596   1CE6 FD 43         mov [d], b
4597   1CE8             
4598   1CE8             ; --- BEGIN INLINE ASM BLOCK
4599   1CE8               
4600   1CE8               
4601   1CE8               
4602   1CE8               
4603   1CE8               
4604   1CE8             _load_hex:
4605   1CE8 D7            push a
4606   1CE9 D8            push b
4607   1CEA DA            push d
4608   1CEB E2            push si
4609   1CEC E3            push di
4610   1CED 52 00 80      sub sp, $8000      
4611   1CF0 38 00 00      mov c, 0
4612   1CF3 48            mov a, sp
4613   1CF4 77            inc a
4614   1CF5 3C            mov d, a          
4615   1CF6 07 33 1E      call _gets        
4616   1CF9 4D            mov si, a
4617   1CFA             __load_hex_loop:
4618   1CFA F6            lodsb             
4619   1CFB B9 00         cmp al, 0         
4620   1CFD C6 0B 1D      jz __load_hex_ret
4621   1D00 36            mov bh, al
4622   1D01 F6            lodsb
4623   1D02 2F            mov bl, al
4624   1D03 07 EA 1D      call _atoi        
4625   1D06 F7            stosb             
4626   1D07 78            inc c
4627   1D08 0A FA 1C      jmp __load_hex_loop
4628   1D0B             __load_hex_ret:
4629   1D0B 51 00 80      add sp, $8000
4630   1D0E F0            pop di
4631   1D0F EF            pop si
4632   1D10 E7            pop d
4633   1D11 E5            pop b
4634   1D12 E4            pop a
4635   1D13             ; --- END INLINE ASM BLOCK
4636   1D13             
4637   1D13 F9            leave
4638   1D14 09            ret
4639   1D15             
4640   1D15             getparam:
4641   1D15 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4642   1D18             ; $data 
4643   1D18 52 01 00      sub sp, 1
4644   1D1B             
4645   1D1B             ; --- BEGIN INLINE ASM BLOCK
4646   1D1B 19 04         mov al, 4
4647   1D1D FA 05 00      lea d, [bp + 5] ; $address
4648   1D20 FD 2A         mov d, [d]
4649   1D22 05 0C         syscall sys_system
4650   1D24 FA 00 00      lea d, [bp + 0] ; $data
4651   1D27 FD 3E         mov [d], bl
4652   1D29             ; --- END INLINE ASM BLOCK
4653   1D29             
4654   1D29             ;; return data; 
4655   1D29 FA 00 00      lea d, [bp + 0] ; $data
4656   1D2C 32            mov bl, [d]
4657   1D2D A7 00         mov bh, 0
4658   1D2F F9            leave
4659   1D30 09            ret
4660   1D31             
4661   1D31             clear:
4662   1D31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4663   1D34             ;; print("\033[2J\033[H"); 
4664   1D34 26 1A 31      mov b, __s3 ; "\033[2J\033[H"
4665   1D37 FD AB         swp b
4666   1D39 D8            push b
4667   1D3A 07 94 1C      call print
4668   1D3D 51 02 00      add sp, 2
4669   1D40 F9            leave
4670   1D41 09            ret
4671   1D42             
4672   1D42             include_stdio_asm:
4673   1D42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4674   1D45             
4675   1D45             ; --- BEGIN INLINE ASM BLOCK
4676   1D45             .include "lib/asm/stdio.asm"
0001+  1D45             ;-----------------------------------------------------------------------------
0002+  1D45             ; stdio.s
0003+  1D45             ;-----------------------------------------------------------------------------
0004+  1D45             .include "lib/asm/string.asm"
0001++ 1D45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1D45             ; string.s
0003++ 1D45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1D45             
0005++ 1D45             
0006++ 1D45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1D45             ; _strrev
0008++ 1D45             ; reverse a string
0009++ 1D45             ; D = string address
0010++ 1D45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1D45             ; 01234
0012++ 1D45             _strrev:
0013++ 1D45 4B          	pusha
0014++ 1D46 07 8C 1D    	call _strlen	; length in C
0015++ 1D49 12          	mov a, c
0016++ 1D4A AF 01 00    	cmp a, 1
0017++ 1D4D D0 67 1D    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1D50 7D          	dec a
0019++ 1D51 FD 4E       	mov si, d	; beginning of string
0020++ 1D53 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1D55 59          	add d, a	; end of string
0022++ 1D56 12          	mov a, c
0023++ 1D57 FD 9B       	shr a		; divide by 2
0024++ 1D59 39          	mov c, a	; C now counts the steps
0025++ 1D5A             _strrev_L0:
0026++ 1D5A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1D5B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1D5C 3E          	mov [d], al	; store left char into right side
0029++ 1D5D 1B          	mov al, bl
0030++ 1D5E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1D5F 7E          	dec c
0032++ 1D60 7F          	dec d
0033++ 1D61 C2 00 00    	cmp c, 0
0034++ 1D64 C7 5A 1D    	jne _strrev_L0
0035++ 1D67             _strrev_end:
0036++ 1D67 4C          	popa
0037++ 1D68 09          	ret
0038++ 1D69             	
0039++ 1D69             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1D69             ; _strchr
0041++ 1D69             ; search string in D for char in AL
0042++ 1D69             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1D69             _strchr:
0044++ 1D69             _strchr_L0:
0045++ 1D69 32          	mov bl, [d]
0046++ 1D6A C1 00       	cmp bl, 0
0047++ 1D6C C6 77 1D    	je _strchr_end
0048++ 1D6F BA          	cmp al, bl
0049++ 1D70 C6 77 1D    	je _strchr_end
0050++ 1D73 79          	inc d
0051++ 1D74 0A 69 1D    	jmp _strchr_L0
0052++ 1D77             _strchr_end:
0053++ 1D77 1B          	mov al, bl
0054++ 1D78 09          	ret
0055++ 1D79             
0056++ 1D79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1D79             ; _strstr
0058++ 1D79             ; find sub-string
0059++ 1D79             ; str1 in SI
0060++ 1D79             ; str2 in DI
0061++ 1D79             ; SI points to end of source string
0062++ 1D79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1D79             _strstr:
0064++ 1D79 DB          	push al
0065++ 1D7A DA          	push d
0066++ 1D7B E3          	push di
0067++ 1D7C             _strstr_loop:
0068++ 1D7C F3          	cmpsb					; compare a byte of the strings
0069++ 1D7D C7 88 1D    	jne _strstr_ret
0070++ 1D80 FC 00 00    	lea d, [di + 0]
0071++ 1D83 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1D85 C7 7C 1D    	jne _strstr_loop				; equal chars but not at end
0073++ 1D88             _strstr_ret:
0074++ 1D88 F0          	pop di
0075++ 1D89 E7          	pop d
0076++ 1D8A E8          	pop al
0077++ 1D8B 09          	ret
0078++ 1D8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1D8C             ; length of null terminated string
0080++ 1D8C             ; result in C
0081++ 1D8C             ; pointer in D
0082++ 1D8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1D8C             _strlen:
0084++ 1D8C DA          	push d
0085++ 1D8D 38 00 00    	mov c, 0
0086++ 1D90             _strlen_L1:
0087++ 1D90 BD 00       	cmp byte [d], 0
0088++ 1D92 C6 9A 1D    	je _strlen_ret
0089++ 1D95 79          	inc d
0090++ 1D96 78          	inc c
0091++ 1D97 0A 90 1D    	jmp _strlen_L1
0092++ 1D9A             _strlen_ret:
0093++ 1D9A E7          	pop d
0094++ 1D9B 09          	ret
0095++ 1D9C             
0096++ 1D9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1D9C             ; STRCMP
0098++ 1D9C             ; compare two strings
0099++ 1D9C             ; str1 in SI
0100++ 1D9C             ; str2 in DI
0101++ 1D9C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1D9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1D9C             _strcmp:
0104++ 1D9C DB          	push al
0105++ 1D9D DA          	push d
0106++ 1D9E E3          	push di
0107++ 1D9F E2          	push si
0108++ 1DA0             _strcmp_loop:
0109++ 1DA0 F3          	cmpsb					; compare a byte of the strings
0110++ 1DA1 C7 AC 1D    	jne _strcmp_ret
0111++ 1DA4 FB FF FF    	lea d, [si +- 1]
0112++ 1DA7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1DA9 C7 A0 1D    	jne _strcmp_loop				; equal chars but not at end
0114++ 1DAC             _strcmp_ret:
0115++ 1DAC EF          	pop si
0116++ 1DAD F0          	pop di
0117++ 1DAE E7          	pop d
0118++ 1DAF E8          	pop al
0119++ 1DB0 09          	ret
0120++ 1DB1             
0121++ 1DB1             
0122++ 1DB1             ; STRCPY
0123++ 1DB1             ; copy null terminated string from SI to DI
0124++ 1DB1             ; source in SI
0125++ 1DB1             ; destination in DI
0126++ 1DB1             _strcpy:
0127++ 1DB1 E2          	push si
0128++ 1DB2 E3          	push di
0129++ 1DB3 DB          	push al
0130++ 1DB4             _strcpy_L1:
0131++ 1DB4 F6          	lodsb
0132++ 1DB5 F7          	stosb
0133++ 1DB6 B9 00       	cmp al, 0
0134++ 1DB8 C7 B4 1D    	jne _strcpy_L1
0135++ 1DBB             _strcpy_end:
0136++ 1DBB E8          	pop al
0137++ 1DBC F0          	pop di
0138++ 1DBD EF          	pop si
0139++ 1DBE 09          	ret
0140++ 1DBF             
0141++ 1DBF             ; STRCAT
0142++ 1DBF             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1DBF             ; source in SI
0144++ 1DBF             ; destination in DI
0145++ 1DBF             _strcat:
0146++ 1DBF E2          	push si
0147++ 1DC0 E3          	push di
0148++ 1DC1 D7          	push a
0149++ 1DC2 DA          	push d
0150++ 1DC3 50          	mov a, di
0151++ 1DC4 3C          	mov d, a
0152++ 1DC5             _strcat_goto_end_L1:
0153++ 1DC5 BD 00       	cmp byte[d], 0
0154++ 1DC7 C6 CE 1D    	je _strcat_start
0155++ 1DCA 79          	inc d
0156++ 1DCB 0A C5 1D    	jmp _strcat_goto_end_L1
0157++ 1DCE             _strcat_start:
0158++ 1DCE FD 50       	mov di, d
0159++ 1DD0             _strcat_L1:
0160++ 1DD0 F6          	lodsb
0161++ 1DD1 F7          	stosb
0162++ 1DD2 B9 00       	cmp al, 0
0163++ 1DD4 C7 D0 1D    	jne _strcat_L1
0164++ 1DD7             _strcat_end:
0165++ 1DD7 E7          	pop d
0166++ 1DD8 E4          	pop a
0167++ 1DD9 F0          	pop di
0168++ 1DDA EF          	pop si
0169++ 1DDB 09          	ret
0170++ 1DDC             
0171++ 1DDC             
0005+  1DDC             
0006+  1DDC             ;-----------------------------------------------------------------------------
0007+  1DDC             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1DDC             ; ASCII in BL
0009+  1DDC             ; result in AL
0010+  1DDC             ; ascii for F = 0100 0110
0011+  1DDC             ; ascii for 9 = 0011 1001
0012+  1DDC             ;-----------------------------------------------------------------------------
0013+  1DDC             hex_ascii_encode:
0014+  1DDC 1B            mov al, bl
0015+  1DDD 93 40         test al, $40        ; test if letter or number
0016+  1DDF C7 E5 1D      jnz hex_letter
0017+  1DE2 87 0F         and al, $0F        ; get number
0018+  1DE4 09            ret
0019+  1DE5             hex_letter:
0020+  1DE5 87 0F         and al, $0F        ; get letter
0021+  1DE7 6A 09         add al, 9
0022+  1DE9 09            ret
0023+  1DEA             
0024+  1DEA             ;-----------------------------------------------------------------------------
0025+  1DEA             ; ATOI
0026+  1DEA             ; 2 letter hex string in B
0027+  1DEA             ; 8bit integer returned in AL
0028+  1DEA             ;-----------------------------------------------------------------------------
0029+  1DEA             _atoi:
0030+  1DEA D8            push b
0031+  1DEB 07 DC 1D      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1DEE 30            mov bl, bh
0033+  1DEF DB            push al          ; save a
0034+  1DF0 07 DC 1D      call hex_ascii_encode
0035+  1DF3 EA            pop bl  
0036+  1DF4 FD 9E 04      shl al, 4
0037+  1DF7 8C            or al, bl
0038+  1DF8 E5            pop b
0039+  1DF9 09            ret  
0040+  1DFA             
0041+  1DFA             
0042+  1DFA             ;-----------------------------------------------------------------------------
0043+  1DFA             ; ITOA
0044+  1DFA             ; 8bit value in BL
0045+  1DFA             ; 2 byte ASCII result in A
0046+  1DFA             ;-----------------------------------------------------------------------------
0047+  1DFA             _itoa:
0048+  1DFA DA            push d
0049+  1DFB D8            push b
0050+  1DFC A7 00         mov bh, 0
0051+  1DFE FD A4 04      shr bl, 4  
0052+  1E01 74            mov d, b
0053+  1E02 1F AA 20      mov al, [d + s_hex_digits]
0054+  1E05 23            mov ah, al
0055+  1E06               
0056+  1E06 E5            pop b
0057+  1E07 D8            push b
0058+  1E08 A7 00         mov bh, 0
0059+  1E0A FD 87 0F      and bl, $0F
0060+  1E0D 74            mov d, b
0061+  1E0E 1F AA 20      mov al, [d + s_hex_digits]
0062+  1E11 E5            pop b
0063+  1E12 E7            pop d
0064+  1E13 09            ret
0065+  1E14             
0066+  1E14             ;-----------------------------------------------------------------------------
0067+  1E14             ; HEX STRING TO BINARY
0068+  1E14             ; di = destination address
0069+  1E14             ; si = source
0070+  1E14             ;-----------------------------------------------------------------------------
0071+  1E14             _hex_to_int:
0072+  1E14             _hex_to_int_L1:
0073+  1E14 F6            lodsb          ; load from [SI] to AL
0074+  1E15 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1E17 C6 24 1E      jz _hex_to_int_ret
0076+  1E1A 36            mov bh, al
0077+  1E1B F6            lodsb
0078+  1E1C 2F            mov bl, al
0079+  1E1D 07 EA 1D      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1E20 F7            stosb          ; store AL to [DI]
0081+  1E21 0A 14 1E      jmp _hex_to_int_L1
0082+  1E24             _hex_to_int_ret:
0083+  1E24 09            ret    
0084+  1E25             
0085+  1E25             ;-----------------------------------------------------------------------------
0086+  1E25             ; GETCHAR
0087+  1E25             ; char in ah
0088+  1E25             ;-----------------------------------------------------------------------------
0089+  1E25             getch:
0090+  1E25 DB            push al
0091+  1E26             getch_retry:
0092+  1E26 19 01         mov al, 1
0093+  1E28 05 03         syscall sys_io      ; receive in AH
0094+  1E2A E8            pop al
0095+  1E2B 09            ret
0096+  1E2C             
0097+  1E2C             ;-----------------------------------------------------------------------------
0098+  1E2C             ; PUTCHAR
0099+  1E2C             ; char in ah
0100+  1E2C             ;-----------------------------------------------------------------------------
0101+  1E2C             _putchar:
0102+  1E2C D7            push a
0103+  1E2D 19 00         mov al, 0
0104+  1E2F 05 03         syscall sys_io      ; char in AH
0105+  1E31 E4            pop a
0106+  1E32 09            ret
0107+  1E33             
0108+  1E33             ;-----------------------------------------------------------------------------
0109+  1E33             ;; INPUT A STRING
0110+  1E33             ;; terminates with null
0111+  1E33             ;; pointer in D
0112+  1E33             ;-----------------------------------------------------------------------------
0113+  1E33             _gets:
0114+  1E33 D7            push a
0115+  1E34 DA            push d
0116+  1E35             _gets_loop:
0117+  1E35 19 01         mov al, 1
0118+  1E37 05 03         syscall sys_io      ; receive in AH
0119+  1E39 B9 00         cmp al, 0        ; check error code (AL)
0120+  1E3B C6 35 1E      je _gets_loop      ; if no char received, retry
0121+  1E3E             
0122+  1E3E 76 1B         cmp ah, 27
0123+  1E40 C6 61 1E      je _gets_ansi_esc
0124+  1E43 76 0A         cmp ah, $0A        ; LF
0125+  1E45 C6 CC 1E      je _gets_end
0126+  1E48 76 0D         cmp ah, $0D        ; CR
0127+  1E4A C6 CC 1E      je _gets_end
0128+  1E4D 76 5C         cmp ah, $5C        ; '\\'
0129+  1E4F C6 8D 1E      je _gets_escape
0130+  1E52               
0131+  1E52 76 08         cmp ah, $08      ; check for backspace
0132+  1E54 C6 5D 1E      je _gets_backspace
0133+  1E57             
0134+  1E57 1A            mov al, ah
0135+  1E58 3E            mov [d], al
0136+  1E59 79            inc d
0137+  1E5A 0A 35 1E      jmp _gets_loop
0138+  1E5D             _gets_backspace:
0139+  1E5D 7F            dec d
0140+  1E5E 0A 35 1E      jmp _gets_loop
0141+  1E61             _gets_ansi_esc:
0142+  1E61 19 01         mov al, 1
0143+  1E63 05 03         syscall sys_io        ; receive in AH without echo
0144+  1E65 B9 00         cmp al, 0          ; check error code (AL)
0145+  1E67 C6 61 1E      je _gets_ansi_esc    ; if no char received, retry
0146+  1E6A 76 5B         cmp ah, '['
0147+  1E6C C7 35 1E      jne _gets_loop
0148+  1E6F             _gets_ansi_esc_2:
0149+  1E6F 19 01         mov al, 1
0150+  1E71 05 03         syscall sys_io          ; receive in AH without echo
0151+  1E73 B9 00         cmp al, 0            ; check error code (AL)
0152+  1E75 C6 6F 1E      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1E78 76 44         cmp ah, 'D'
0154+  1E7A C6 85 1E      je _gets_left_arrow
0155+  1E7D 76 43         cmp ah, 'C'
0156+  1E7F C6 89 1E      je _gets_right_arrow
0157+  1E82 0A 35 1E      jmp _gets_loop
0158+  1E85             _gets_left_arrow:
0159+  1E85 7F            dec d
0160+  1E86 0A 35 1E      jmp _gets_loop
0161+  1E89             _gets_right_arrow:
0162+  1E89 79            inc d
0163+  1E8A 0A 35 1E      jmp _gets_loop
0164+  1E8D             _gets_escape:
0165+  1E8D 19 01         mov al, 1
0166+  1E8F 05 03         syscall sys_io      ; receive in AH
0167+  1E91 B9 00         cmp al, 0        ; check error code (AL)
0168+  1E93 C6 8D 1E      je _gets_escape      ; if no char received, retry
0169+  1E96 76 6E         cmp ah, 'n'
0170+  1E98 C6 B7 1E      je _gets_LF
0171+  1E9B 76 72         cmp ah, 'r'
0172+  1E9D C6 BE 1E      je _gets_CR
0173+  1EA0 76 30         cmp ah, '0'
0174+  1EA2 C6 C5 1E      je _gets_NULL
0175+  1EA5 76 5C         cmp ah, $5C  ; '\'
0176+  1EA7 C6 B0 1E      je _gets_slash
0177+  1EAA 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1EAB 3E            mov [d], al
0179+  1EAC 79            inc d
0180+  1EAD 0A 35 1E      jmp _gets_loop
0181+  1EB0             _gets_slash:
0182+  1EB0 19 5C         mov al, $5C
0183+  1EB2 3E            mov [d], al
0184+  1EB3 79            inc d
0185+  1EB4 0A 35 1E      jmp _gets_loop
0186+  1EB7             _gets_LF:
0187+  1EB7 19 0A         mov al, $0A
0188+  1EB9 3E            mov [d], al
0189+  1EBA 79            inc d
0190+  1EBB 0A 35 1E      jmp _gets_loop
0191+  1EBE             _gets_CR:
0192+  1EBE 19 0D         mov al, $0D
0193+  1EC0 3E            mov [d], al
0194+  1EC1 79            inc d
0195+  1EC2 0A 35 1E      jmp _gets_loop
0196+  1EC5             _gets_NULL:
0197+  1EC5 19 00         mov al, $00
0198+  1EC7 3E            mov [d], al
0199+  1EC8 79            inc d
0200+  1EC9 0A 35 1E      jmp _gets_loop
0201+  1ECC             _gets_end:
0202+  1ECC 19 00         mov al, 0
0203+  1ECE 3E            mov [d], al        ; terminate string
0204+  1ECF E7            pop d
0205+  1ED0 E4            pop a
0206+  1ED1 09            ret
0207+  1ED2             
0208+  1ED2             ;-----------------------------------------------------------------------------
0209+  1ED2             ;; INPUT TEXT
0210+  1ED2             ;; terminated with CTRL+D
0211+  1ED2             ;; pointer in D
0212+  1ED2             ;-----------------------------------------------------------------------------
0213+  1ED2             _gettxt:
0214+  1ED2 D7            push a
0215+  1ED3 DA            push d
0216+  1ED4             _gettxt_loop:
0217+  1ED4 19 01         mov al, 1
0218+  1ED6 05 03         syscall sys_io      ; receive in AH
0219+  1ED8 B9 00         cmp al, 0        ; check error code (AL)
0220+  1EDA C6 D4 1E      je _gettxt_loop    ; if no char received, retry
0221+  1EDD 76 04         cmp ah, 4      ; EOT
0222+  1EDF C6 1D 1F      je _gettxt_end
0223+  1EE2 76 08         cmp ah, $08      ; check for backspace
0224+  1EE4 C6 19 1F      je _gettxt_backspace
0225+  1EE7 76 5C         cmp ah, $5C        ; '\'
0226+  1EE9 C6 F2 1E      je _gettxt_escape
0227+  1EEC 1A            mov al, ah
0228+  1EED 3E            mov [d], al
0229+  1EEE 79            inc d
0230+  1EEF 0A D4 1E      jmp _gettxt_loop
0231+  1EF2             _gettxt_escape:
0232+  1EF2 19 01         mov al, 1
0233+  1EF4 05 03         syscall sys_io      ; receive in AH
0234+  1EF6 B9 00         cmp al, 0        ; check error code (AL)
0235+  1EF8 C6 F2 1E      je _gettxt_escape    ; if no char received, retry
0236+  1EFB 76 6E         cmp ah, 'n'
0237+  1EFD C6 0B 1F      je _gettxt_LF
0238+  1F00 76 72         cmp ah, 'r'
0239+  1F02 C6 12 1F      je _gettxt_CR
0240+  1F05 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1F06 3E            mov [d], al
0242+  1F07 79            inc d
0243+  1F08 0A D4 1E      jmp _gettxt_loop
0244+  1F0B             _gettxt_LF:
0245+  1F0B 19 0A         mov al, $0A
0246+  1F0D 3E            mov [d], al
0247+  1F0E 79            inc d
0248+  1F0F 0A D4 1E      jmp _gettxt_loop
0249+  1F12             _gettxt_CR:
0250+  1F12 19 0D         mov al, $0D
0251+  1F14 3E            mov [d], al
0252+  1F15 79            inc d
0253+  1F16 0A D4 1E      jmp _gettxt_loop
0254+  1F19             _gettxt_backspace:
0255+  1F19 7F            dec d
0256+  1F1A 0A D4 1E      jmp _gettxt_loop
0257+  1F1D             _gettxt_end:
0258+  1F1D 19 00         mov al, 0
0259+  1F1F 3E            mov [d], al        ; terminate string
0260+  1F20 E7            pop d
0261+  1F21 E4            pop a
0262+  1F22 09            ret
0263+  1F23             
0264+  1F23             ;-----------------------------------------------------------------------------
0265+  1F23             ; PRINT NEW LINE
0266+  1F23             ;-----------------------------------------------------------------------------
0267+  1F23             printnl:
0268+  1F23 D7            push a
0269+  1F24 10 00 0A      mov a, $0A00
0270+  1F27 05 03         syscall sys_io
0271+  1F29 10 00 0D      mov a, $0D00
0272+  1F2C 05 03         syscall sys_io
0273+  1F2E E4            pop a
0274+  1F2F 09            ret
0275+  1F30             
0276+  1F30             ;-----------------------------------------------------------------------------
0277+  1F30             ; _strtoint
0278+  1F30             ; 4 digit hex string number in d
0279+  1F30             ; integer returned in A
0280+  1F30             ;-----------------------------------------------------------------------------
0281+  1F30             _strtointx:
0282+  1F30 D8            push b
0283+  1F31 32            mov bl, [d]
0284+  1F32 37            mov bh, bl
0285+  1F33 33 01 00      mov bl, [d + 1]
0286+  1F36 07 EA 1D      call _atoi        ; convert to int in AL
0287+  1F39 23            mov ah, al        ; move to AH
0288+  1F3A 33 02 00      mov bl, [d + 2]
0289+  1F3D 37            mov bh, bl
0290+  1F3E 33 03 00      mov bl, [d + 3]
0291+  1F41 07 EA 1D      call _atoi        ; convert to int in AL
0292+  1F44 E5            pop b
0293+  1F45 09            ret
0294+  1F46             
0295+  1F46             ;-----------------------------------------------------------------------------
0296+  1F46             ; _strtoint
0297+  1F46             ; 5 digit base10 string number in d
0298+  1F46             ; integer returned in A
0299+  1F46             ;-----------------------------------------------------------------------------
0300+  1F46             _strtoint:
0301+  1F46 E2            push si
0302+  1F47 D8            push b
0303+  1F48 D9            push c
0304+  1F49 DA            push d
0305+  1F4A 07 8C 1D      call _strlen      ; get string length in C
0306+  1F4D 7E            dec c
0307+  1F4E FD 4E         mov si, d
0308+  1F50 12            mov a, c
0309+  1F51 FD 99         shl a
0310+  1F53 3B C2 20      mov d, table_power
0311+  1F56 59            add d, a
0312+  1F57 38 00 00      mov c, 0
0313+  1F5A             _strtoint_L0:
0314+  1F5A F6            lodsb      ; load ASCII to al
0315+  1F5B B9 00         cmp al, 0
0316+  1F5D C6 70 1F      je _strtoint_end
0317+  1F60 6F 30         sub al, $30    ; make into integer
0318+  1F62 22 00         mov ah, 0
0319+  1F64 2A            mov b, [d]
0320+  1F65 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1F66 11            mov a, b
0322+  1F67 28            mov b, c
0323+  1F68 54            add a, b
0324+  1F69 39            mov c, a
0325+  1F6A 63 02 00      sub d, 2
0326+  1F6D 0A 5A 1F      jmp _strtoint_L0
0327+  1F70             _strtoint_end:
0328+  1F70 12            mov a, c
0329+  1F71 E7            pop d
0330+  1F72 E6            pop c
0331+  1F73 E5            pop b
0332+  1F74 EF            pop si
0333+  1F75 09            ret
0334+  1F76             
0335+  1F76             ;-----------------------------------------------------------------------------
0336+  1F76             ; PRINT NULL TERMINATED STRING
0337+  1F76             ; pointer in D
0338+  1F76             ;-----------------------------------------------------------------------------
0339+  1F76             _puts:
0340+  1F76 D7            push a
0341+  1F77 DA            push d
0342+  1F78             _puts_L1:
0343+  1F78 1E            mov al, [d]
0344+  1F79 B9 00         cmp al, 0
0345+  1F7B C6 87 1F      jz _puts_END
0346+  1F7E 23            mov ah, al
0347+  1F7F 19 00         mov al, 0
0348+  1F81 05 03         syscall sys_io
0349+  1F83 79            inc d
0350+  1F84 0A 78 1F      jmp _puts_L1
0351+  1F87             _puts_END:
0352+  1F87 E7            pop d
0353+  1F88 E4            pop a
0354+  1F89 09            ret
0355+  1F8A             
0356+  1F8A             ;-----------------------------------------------------------------------------
0357+  1F8A             ; PRINT N SIZE STRING
0358+  1F8A             ; pointer in D
0359+  1F8A             ; size in C
0360+  1F8A             ;-----------------------------------------------------------------------------
0361+  1F8A             _putsn:
0362+  1F8A DB            push al
0363+  1F8B DA            push d
0364+  1F8C D9            push c
0365+  1F8D             _putsn_L0:
0366+  1F8D 1E            mov al, [d]
0367+  1F8E 23            mov ah, al
0368+  1F8F 19 00         mov al, 0
0369+  1F91 05 03         syscall sys_io
0370+  1F93 79            inc d
0371+  1F94 7E            dec c  
0372+  1F95 C2 00 00      cmp c, 0
0373+  1F98 C7 8D 1F      jne _putsn_L0
0374+  1F9B             _putsn_end:
0375+  1F9B E6            pop c
0376+  1F9C E7            pop d
0377+  1F9D E8            pop al
0378+  1F9E 09            ret
0379+  1F9F             
0380+  1F9F             ;-----------------------------------------------------------------------------
0381+  1F9F             ; print 16bit decimal number
0382+  1F9F             ; input number in A
0383+  1F9F             ;-----------------------------------------------------------------------------
0384+  1F9F             print_u16d:
0385+  1F9F D7            push a
0386+  1FA0 D8            push b
0387+  1FA1 26 10 27      mov b, 10000
0388+  1FA4 AE            div a, b      ; get 10000's coeff.
0389+  1FA5 07 C7 1F      call print_number
0390+  1FA8 11            mov a, b
0391+  1FA9 26 E8 03      mov b, 1000
0392+  1FAC AE            div a, b      ; get 1000's coeff.
0393+  1FAD 07 C7 1F      call print_number
0394+  1FB0 11            mov a, b
0395+  1FB1 26 64 00      mov b, 100
0396+  1FB4 AE            div a, b
0397+  1FB5 07 C7 1F      call print_number
0398+  1FB8 11            mov a, b
0399+  1FB9 26 0A 00      mov b, 10
0400+  1FBC AE            div a, b
0401+  1FBD 07 C7 1F      call print_number
0402+  1FC0 1B            mov al, bl      ; 1's coeff in bl
0403+  1FC1 07 C7 1F      call print_number
0404+  1FC4 E5            pop b
0405+  1FC5 E4            pop a
0406+  1FC6 09            ret
0407+  1FC7             
0408+  1FC7             ;-----------------------------------------------------------------------------
0409+  1FC7             ; print AL
0410+  1FC7             ;-----------------------------------------------------------------------------
0411+  1FC7             print_number:
0412+  1FC7 6A 30         add al, $30
0413+  1FC9 23            mov ah, al
0414+  1FCA 07 2C 1E      call _putchar
0415+  1FCD 09            ret
0416+  1FCE             
0417+  1FCE             ;-----------------------------------------------------------------------------
0418+  1FCE             ; PRINT 16BIT HEX INTEGER
0419+  1FCE             ; integer value in reg B
0420+  1FCE             ;-----------------------------------------------------------------------------
0421+  1FCE             print_u16x:
0422+  1FCE D7            push a
0423+  1FCF D8            push b
0424+  1FD0 DD            push bl
0425+  1FD1 30            mov bl, bh
0426+  1FD2 07 FA 1D      call _itoa        ; convert bh to char in A
0427+  1FD5 2F            mov bl, al        ; save al
0428+  1FD6 19 00         mov al, 0
0429+  1FD8 05 03         syscall sys_io        ; display AH
0430+  1FDA 24            mov ah, bl        ; retrieve al
0431+  1FDB 19 00         mov al, 0
0432+  1FDD 05 03         syscall sys_io        ; display AL
0433+  1FDF             
0434+  1FDF EA            pop bl
0435+  1FE0 07 FA 1D      call _itoa        ; convert bh to char in A
0436+  1FE3 2F            mov bl, al        ; save al
0437+  1FE4 19 00         mov al, 0
0438+  1FE6 05 03         syscall sys_io        ; display AH
0439+  1FE8 24            mov ah, bl        ; retrieve al
0440+  1FE9 19 00         mov al, 0
0441+  1FEB 05 03         syscall sys_io        ; display AL
0442+  1FED             
0443+  1FED E5            pop b
0444+  1FEE E4            pop a
0445+  1FEF 09            ret
0446+  1FF0             
0447+  1FF0             ;-----------------------------------------------------------------------------
0448+  1FF0             ; INPUT 16BIT HEX INTEGER
0449+  1FF0             ; read 16bit integer into A
0450+  1FF0             ;-----------------------------------------------------------------------------
0451+  1FF0             scan_u16x:
0452+  1FF0 F8 10 00      enter 16
0453+  1FF3 D8            push b
0454+  1FF4 DA            push d
0455+  1FF5             
0456+  1FF5 FA F1 FF      lea d, [bp + -15]
0457+  1FF8 07 33 1E      call _gets        ; get number
0458+  1FFB             
0459+  1FFB 32            mov bl, [d]
0460+  1FFC 37            mov bh, bl
0461+  1FFD 33 01 00      mov bl, [d + 1]
0462+  2000 07 EA 1D      call _atoi        ; convert to int in AL
0463+  2003 23            mov ah, al        ; move to AH
0464+  2004             
0465+  2004 33 02 00      mov bl, [d + 2]
0466+  2007 37            mov bh, bl
0467+  2008 33 03 00      mov bl, [d + 3]
0468+  200B 07 EA 1D      call _atoi        ; convert to int in AL
0469+  200E             
0470+  200E E7            pop d
0471+  200F E5            pop b
0472+  2010 F9            leave
0473+  2011 09            ret
0474+  2012             
0475+  2012             ;-----------------------------------------------------------------------------
0476+  2012             ; PRINT 8bit HEX INTEGER
0477+  2012             ; integer value in reg bl
0478+  2012             ;-----------------------------------------------------------------------------
0479+  2012             print_u8x:
0480+  2012 D7            push a
0481+  2013 DD            push bl
0482+  2014             
0483+  2014 07 FA 1D      call _itoa        ; convert bl to char in A
0484+  2017 2F            mov bl, al        ; save al
0485+  2018 19 00         mov al, 0
0486+  201A 05 03         syscall sys_io        ; display AH
0487+  201C 24            mov ah, bl        ; retrieve al
0488+  201D 19 00         mov al, 0
0489+  201F 05 03         syscall sys_io        ; display AL
0490+  2021             
0491+  2021 EA            pop bl
0492+  2022 E4            pop a
0493+  2023 09            ret
0494+  2024             
0495+  2024             ;-----------------------------------------------------------------------------
0496+  2024             ; print 8bit decimal unsigned number
0497+  2024             ; input number in AL
0498+  2024             ;-----------------------------------------------------------------------------
0499+  2024             print_u8d:
0500+  2024 D7            push a
0501+  2025 D8            push b
0502+  2026             
0503+  2026 22 00         mov ah, 0
0504+  2028 26 64 00      mov b, 100
0505+  202B AE            div a, b
0506+  202C D8            push b      ; save remainder
0507+  202D B9 00         cmp al, 0
0508+  202F C6 39 20      je skip100
0509+  2032 6A 30         add al, $30
0510+  2034 23            mov ah, al
0511+  2035 19 00         mov al, 0
0512+  2037 05 03         syscall sys_io  ; print coeff
0513+  2039             skip100:
0514+  2039 E4            pop a
0515+  203A 22 00         mov ah, 0
0516+  203C 26 0A 00      mov b, 10
0517+  203F AE            div a, b
0518+  2040 D8            push b      ; save remainder
0519+  2041 B9 00         cmp al, 0
0520+  2043 C6 4D 20      je skip10
0521+  2046 6A 30         add al, $30
0522+  2048 23            mov ah, al
0523+  2049 19 00         mov al, 0
0524+  204B 05 03         syscall sys_io  ; print coeff
0525+  204D             skip10:
0526+  204D E4            pop a
0527+  204E 1B            mov al, bl
0528+  204F 6A 30         add al, $30
0529+  2051 23            mov ah, al
0530+  2052 19 00         mov al, 0
0531+  2054 05 03         syscall sys_io  ; print coeff
0532+  2056 E5            pop b
0533+  2057 E4            pop a
0534+  2058 09            ret
0535+  2059             
0536+  2059             ;-----------------------------------------------------------------------------
0537+  2059             ; INPUT 8BIT HEX INTEGER
0538+  2059             ; read 8bit integer into AL
0539+  2059             ;-----------------------------------------------------------------------------
0540+  2059             scan_u8x:
0541+  2059 F8 04 00      enter 4
0542+  205C D8            push b
0543+  205D DA            push d
0544+  205E             
0545+  205E FA FD FF      lea d, [bp + -3]
0546+  2061 07 33 1E      call _gets        ; get number
0547+  2064             
0548+  2064 32            mov bl, [d]
0549+  2065 37            mov bh, bl
0550+  2066 33 01 00      mov bl, [d + 1]
0551+  2069 07 EA 1D      call _atoi        ; convert to int in AL
0552+  206C             
0553+  206C E7            pop d
0554+  206D E5            pop b
0555+  206E F9            leave
0556+  206F 09            ret
0557+  2070             
0558+  2070             ;-----------------------------------------------------------------------------
0559+  2070             ; input decimal number
0560+  2070             ; result in A
0561+  2070             ; 655'\0'
0562+  2070             ; low--------high
0563+  2070             ;-----------------------------------------------------------------------------
0564+  2070             scan_u16d:
0565+  2070 F8 08 00      enter 8
0566+  2073 E2            push si
0567+  2074 D8            push b
0568+  2075 D9            push c
0569+  2076 DA            push d
0570+  2077 FA F9 FF      lea d, [bp +- 7]
0571+  207A 07 33 1E      call _gets
0572+  207D 07 8C 1D      call _strlen      ; get string length in C
0573+  2080 7E            dec c
0574+  2081 FD 4E         mov si, d
0575+  2083 12            mov a, c
0576+  2084 FD 99         shl a
0577+  2086 3B C2 20      mov d, table_power
0578+  2089 59            add d, a
0579+  208A 38 00 00      mov c, 0
0580+  208D             mul_loop:
0581+  208D F6            lodsb      ; load ASCII to al
0582+  208E B9 00         cmp al, 0
0583+  2090 C6 A3 20      je mul_exit
0584+  2093 6F 30         sub al, $30    ; make into integer
0585+  2095 22 00         mov ah, 0
0586+  2097 2A            mov b, [d]
0587+  2098 AC            mul a, b      ; result in B since it fits in 16bits
0588+  2099 11            mov a, b
0589+  209A 28            mov b, c
0590+  209B 54            add a, b
0591+  209C 39            mov c, a
0592+  209D 63 02 00      sub d, 2
0593+  20A0 0A 8D 20      jmp mul_loop
0594+  20A3             mul_exit:
0595+  20A3 12            mov a, c
0596+  20A4 E7            pop d
0597+  20A5 E6            pop c
0598+  20A6 E5            pop b
0599+  20A7 EF            pop si
0600+  20A8 F9            leave
0601+  20A9 09            ret
0602+  20AA             
0603+  20AA 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  20AE 34 35 36 37 
0603+  20B2 38 39 41 42 
0603+  20B6 43 44 45 46 
0604+  20BA 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  20BE 1B 5B 48 00 
0605+  20C2             
0606+  20C2             table_power:
0607+  20C2 01 00         .dw 1
0608+  20C4 0A 00         .dw 10
0609+  20C6 64 00         .dw 100
0610+  20C8 E8 03         .dw 1000
0611+  20CA 10 27         .dw 100004677   20CC             ; --- END INLINE ASM BLOCK
4678   20CC             
4679   20CC F9            leave
4680   20CD 09            ret
4681   20CE             
4682   20CE             test0:
4683   20CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4684   20D1             ; $i 
4685   20D1             ; $pass 
4686   20D1 10 01 00      mov a, $1
4687   20D4 45 FD FF      mov [bp + -3], a
4688   20D7 52 04 00      sub sp, 4
4689   20DA             ;; for (i = 0; i < 5; i++){ 
4690   20DA             _for62_init:
4691   20DA FA FF FF      lea d, [bp + -1] ; $i
4692   20DD DA            push d
4693   20DE 26 00 00      mov b, $0
4694   20E1 E7            pop d
4695   20E2 FD 43         mov [d], b
4696   20E4             _for62_cond:
4697   20E4 FA FF FF      lea d, [bp + -1] ; $i
4698   20E7 2A            mov b, [d]
4699   20E8             ; START RELATIONAL
4700   20E8 D7            push a
4701   20E9 11            mov a, b
4702   20EA 26 05 00      mov b, $5
4703   20ED B0            cmp a, b
4704   20EE FD 73         slt ; <= (signed)
4705   20F0 E4            pop a
4706   20F1             ; END RELATIONAL
4707   20F1 C0 00 00      cmp b, 0
4708   20F4 C6 39 21      je _for62_exit
4709   20F7             _for62_block:
4710   20F7             ;; gca1[i] = 'A' + i; 
4711   20F7 3B 39 30      mov d, _gca1_data ; $gca1
4712   20FA D7            push a
4713   20FB DA            push d
4714   20FC FA FF FF      lea d, [bp + -1] ; $i
4715   20FF 2A            mov b, [d]
4716   2100 E7            pop d
4717   2101 5A            add d, b
4718   2102 E4            pop a
4719   2103 DA            push d
4720   2104 26 41 00      mov b, $41
4721   2107             ; START TERMS
4722   2107 D7            push a
4723   2108 11            mov a, b
4724   2109 FA FF FF      lea d, [bp + -1] ; $i
4725   210C 2A            mov b, [d]
4726   210D 56            add b, a
4727   210E E4            pop a
4728   210F             ; END TERMS
4729   210F E7            pop d
4730   2110 FD 3E         mov [d], bl
4731   2112             ;; gia1[i] = i; 
4732   2112 3B 3E 30      mov d, _gia1_data ; $gia1
4733   2115 D7            push a
4734   2116 DA            push d
4735   2117 FA FF FF      lea d, [bp + -1] ; $i
4736   211A 2A            mov b, [d]
4737   211B E7            pop d
4738   211C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4739   2120 E4            pop a
4740   2121 DA            push d
4741   2122 FA FF FF      lea d, [bp + -1] ; $i
4742   2125 2A            mov b, [d]
4743   2126 E7            pop d
4744   2127 FD 43         mov [d], b
4745   2129             _for62_update:
4746   2129 FA FF FF      lea d, [bp + -1] ; $i
4747   212C 2A            mov b, [d]
4748   212D D8            push b
4749   212E FD 77         inc b
4750   2130 FA FF FF      lea d, [bp + -1] ; $i
4751   2133 FD 43         mov [d], b
4752   2135 E5            pop b
4753   2136 0A E4 20      jmp _for62_cond
4754   2139             _for62_exit:
4755   2139             ;; for (i = 0; i < 5; i++){ 
4756   2139             _for63_init:
4757   2139 FA FF FF      lea d, [bp + -1] ; $i
4758   213C DA            push d
4759   213D 26 00 00      mov b, $0
4760   2140 E7            pop d
4761   2141 FD 43         mov [d], b
4762   2143             _for63_cond:
4763   2143 FA FF FF      lea d, [bp + -1] ; $i
4764   2146 2A            mov b, [d]
4765   2147             ; START RELATIONAL
4766   2147 D7            push a
4767   2148 11            mov a, b
4768   2149 26 05 00      mov b, $5
4769   214C B0            cmp a, b
4770   214D FD 73         slt ; <= (signed)
4771   214F E4            pop a
4772   2150             ; END RELATIONAL
4773   2150 C0 00 00      cmp b, 0
4774   2153 C6 CC 21      je _for63_exit
4775   2156             _for63_block:
4776   2156             ;; if(gca1[i] != 'A' + i){ 
4777   2156             _if64_cond:
4778   2156 3B 39 30      mov d, _gca1_data ; $gca1
4779   2159 D7            push a
4780   215A DA            push d
4781   215B FA FF FF      lea d, [bp + -1] ; $i
4782   215E 2A            mov b, [d]
4783   215F E7            pop d
4784   2160 5A            add d, b
4785   2161 E4            pop a
4786   2162 32            mov bl, [d]
4787   2163 A7 00         mov bh, 0
4788   2165             ; START RELATIONAL
4789   2165 D7            push a
4790   2166 11            mov a, b
4791   2167 26 41 00      mov b, $41
4792   216A             ; START TERMS
4793   216A D7            push a
4794   216B 11            mov a, b
4795   216C FA FF FF      lea d, [bp + -1] ; $i
4796   216F 2A            mov b, [d]
4797   2170 56            add b, a
4798   2171 E4            pop a
4799   2172             ; END TERMS
4800   2172 B0            cmp a, b
4801   2173 FD 72         sneq ; !=
4802   2175 E4            pop a
4803   2176             ; END RELATIONAL
4804   2176 C0 00 00      cmp b, 0
4805   2179 C6 8C 21      je _if64_exit
4806   217C             _if64_true:
4807   217C             ;; pass = 0; 
4808   217C FA FD FF      lea d, [bp + -3] ; $pass
4809   217F DA            push d
4810   2180 26 00 00      mov b, $0
4811   2183 E7            pop d
4812   2184 FD 43         mov [d], b
4813   2186             ;; break; 
4814   2186 0A CC 21      jmp _for63_exit ; for break
4815   2189 0A 8C 21      jmp _if64_exit
4816   218C             _if64_exit:
4817   218C             ;; if(gia1[i] != i){ 
4818   218C             _if65_cond:
4819   218C 3B 3E 30      mov d, _gia1_data ; $gia1
4820   218F D7            push a
4821   2190 DA            push d
4822   2191 FA FF FF      lea d, [bp + -1] ; $i
4823   2194 2A            mov b, [d]
4824   2195 E7            pop d
4825   2196 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4826   219A E4            pop a
4827   219B 2A            mov b, [d]
4828   219C             ; START RELATIONAL
4829   219C D7            push a
4830   219D 11            mov a, b
4831   219E FA FF FF      lea d, [bp + -1] ; $i
4832   21A1 2A            mov b, [d]
4833   21A2 B0            cmp a, b
4834   21A3 FD 72         sneq ; !=
4835   21A5 E4            pop a
4836   21A6             ; END RELATIONAL
4837   21A6 C0 00 00      cmp b, 0
4838   21A9 C6 BC 21      je _if65_exit
4839   21AC             _if65_true:
4840   21AC             ;; pass = 0; 
4841   21AC FA FD FF      lea d, [bp + -3] ; $pass
4842   21AF DA            push d
4843   21B0 26 00 00      mov b, $0
4844   21B3 E7            pop d
4845   21B4 FD 43         mov [d], b
4846   21B6             ;; break; 
4847   21B6 0A CC 21      jmp _for63_exit ; for break
4848   21B9 0A BC 21      jmp _if65_exit
4849   21BC             _if65_exit:
4850   21BC             _for63_update:
4851   21BC FA FF FF      lea d, [bp + -1] ; $i
4852   21BF 2A            mov b, [d]
4853   21C0 D8            push b
4854   21C1 FD 77         inc b
4855   21C3 FA FF FF      lea d, [bp + -1] ; $i
4856   21C6 FD 43         mov [d], b
4857   21C8 E5            pop b
4858   21C9 0A 43 21      jmp _for63_cond
4859   21CC             _for63_exit:
4860   21CC             ;; return pass; 
4861   21CC FA FD FF      lea d, [bp + -3] ; $pass
4862   21CF 2A            mov b, [d]
4863   21D0 F9            leave
4864   21D1 09            ret
4865   21D2             
4866   21D2             test1:
4867   21D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4868   21D5             ; $i 
4869   21D5             ; $j 
4870   21D5             ; $pass 
4871   21D5 10 01 00      mov a, $1
4872   21D8 45 FB FF      mov [bp + -5], a
4873   21DB 52 06 00      sub sp, 6
4874   21DE             ;; for (i = 0; i < 5; i++){ 
4875   21DE             _for66_init:
4876   21DE FA FF FF      lea d, [bp + -1] ; $i
4877   21E1 DA            push d
4878   21E2 26 00 00      mov b, $0
4879   21E5 E7            pop d
4880   21E6 FD 43         mov [d], b
4881   21E8             _for66_cond:
4882   21E8 FA FF FF      lea d, [bp + -1] ; $i
4883   21EB 2A            mov b, [d]
4884   21EC             ; START RELATIONAL
4885   21EC D7            push a
4886   21ED 11            mov a, b
4887   21EE 26 05 00      mov b, $5
4888   21F1 B0            cmp a, b
4889   21F2 FD 73         slt ; <= (signed)
4890   21F4 E4            pop a
4891   21F5             ; END RELATIONAL
4892   21F5 C0 00 00      cmp b, 0
4893   21F8 C6 8E 22      je _for66_exit
4894   21FB             _for66_block:
4895   21FB             ;; for (j = 0; j < 5; j++){ 
4896   21FB             _for67_init:
4897   21FB FA FD FF      lea d, [bp + -3] ; $j
4898   21FE DA            push d
4899   21FF 26 00 00      mov b, $0
4900   2202 E7            pop d
4901   2203 FD 43         mov [d], b
4902   2205             _for67_cond:
4903   2205 FA FD FF      lea d, [bp + -3] ; $j
4904   2208 2A            mov b, [d]
4905   2209             ; START RELATIONAL
4906   2209 D7            push a
4907   220A 11            mov a, b
4908   220B 26 05 00      mov b, $5
4909   220E B0            cmp a, b
4910   220F FD 73         slt ; <= (signed)
4911   2211 E4            pop a
4912   2212             ; END RELATIONAL
4913   2212 C0 00 00      cmp b, 0
4914   2215 C6 7E 22      je _for67_exit
4915   2218             _for67_block:
4916   2218             ;; gca2[i][j] = 'A' + i + j; 
4917   2218 3B 48 30      mov d, _gca2_data ; $gca2
4918   221B D7            push a
4919   221C DA            push d
4920   221D FA FF FF      lea d, [bp + -1] ; $i
4921   2220 2A            mov b, [d]
4922   2221 E7            pop d
4923   2222 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
4924   2226 DA            push d
4925   2227 FA FD FF      lea d, [bp + -3] ; $j
4926   222A 2A            mov b, [d]
4927   222B E7            pop d
4928   222C 5A            add d, b
4929   222D E4            pop a
4930   222E DA            push d
4931   222F 26 41 00      mov b, $41
4932   2232             ; START TERMS
4933   2232 D7            push a
4934   2233 11            mov a, b
4935   2234 FA FF FF      lea d, [bp + -1] ; $i
4936   2237 2A            mov b, [d]
4937   2238 56            add b, a
4938   2239 11            mov a, b
4939   223A FA FD FF      lea d, [bp + -3] ; $j
4940   223D 2A            mov b, [d]
4941   223E 56            add b, a
4942   223F E4            pop a
4943   2240             ; END TERMS
4944   2240 E7            pop d
4945   2241 FD 3E         mov [d], bl
4946   2243             ;; gia2[i][j] = i * j; 
4947   2243 3B 61 30      mov d, _gia2_data ; $gia2
4948   2246 D7            push a
4949   2247 DA            push d
4950   2248 FA FF FF      lea d, [bp + -1] ; $i
4951   224B 2A            mov b, [d]
4952   224C E7            pop d
4953   224D FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
4954   2251 DA            push d
4955   2252 FA FD FF      lea d, [bp + -3] ; $j
4956   2255 2A            mov b, [d]
4957   2256 E7            pop d
4958   2257 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4959   225B E4            pop a
4960   225C DA            push d
4961   225D FA FF FF      lea d, [bp + -1] ; $i
4962   2260 2A            mov b, [d]
4963   2261             ; START FACTORS
4964   2261 D7            push a
4965   2262 11            mov a, b
4966   2263 FA FD FF      lea d, [bp + -3] ; $j
4967   2266 2A            mov b, [d]
4968   2267 AC            mul a, b ; *
4969   2268 11            mov a, b
4970   2269 27            mov b, a
4971   226A E4            pop a
4972   226B             ; END FACTORS
4973   226B E7            pop d
4974   226C FD 43         mov [d], b
4975   226E             _for67_update:
4976   226E FA FD FF      lea d, [bp + -3] ; $j
4977   2271 2A            mov b, [d]
4978   2272 D8            push b
4979   2273 FD 77         inc b
4980   2275 FA FD FF      lea d, [bp + -3] ; $j
4981   2278 FD 43         mov [d], b
4982   227A E5            pop b
4983   227B 0A 05 22      jmp _for67_cond
4984   227E             _for67_exit:
4985   227E             _for66_update:
4986   227E FA FF FF      lea d, [bp + -1] ; $i
4987   2281 2A            mov b, [d]
4988   2282 D8            push b
4989   2283 FD 77         inc b
4990   2285 FA FF FF      lea d, [bp + -1] ; $i
4991   2288 FD 43         mov [d], b
4992   228A E5            pop b
4993   228B 0A E8 21      jmp _for66_cond
4994   228E             _for66_exit:
4995   228E             ;; for (i = 0; i < 5; i++){ 
4996   228E             _for68_init:
4997   228E FA FF FF      lea d, [bp + -1] ; $i
4998   2291 DA            push d
4999   2292 26 00 00      mov b, $0
5000   2295 E7            pop d
5001   2296 FD 43         mov [d], b
5002   2298             _for68_cond:
5003   2298 FA FF FF      lea d, [bp + -1] ; $i
5004   229B 2A            mov b, [d]
5005   229C             ; START RELATIONAL
5006   229C D7            push a
5007   229D 11            mov a, b
5008   229E 26 05 00      mov b, $5
5009   22A1 B0            cmp a, b
5010   22A2 FD 73         slt ; <= (signed)
5011   22A4 E4            pop a
5012   22A5             ; END RELATIONAL
5013   22A5 C0 00 00      cmp b, 0
5014   22A8 C6 72 23      je _for68_exit
5015   22AB             _for68_block:
5016   22AB             ;; for (j = 0; j < 5; j++){ 
5017   22AB             _for69_init:
5018   22AB FA FD FF      lea d, [bp + -3] ; $j
5019   22AE DA            push d
5020   22AF 26 00 00      mov b, $0
5021   22B2 E7            pop d
5022   22B3 FD 43         mov [d], b
5023   22B5             _for69_cond:
5024   22B5 FA FD FF      lea d, [bp + -3] ; $j
5025   22B8 2A            mov b, [d]
5026   22B9             ; START RELATIONAL
5027   22B9 D7            push a
5028   22BA 11            mov a, b
5029   22BB 26 05 00      mov b, $5
5030   22BE B0            cmp a, b
5031   22BF FD 73         slt ; <= (signed)
5032   22C1 E4            pop a
5033   22C2             ; END RELATIONAL
5034   22C2 C0 00 00      cmp b, 0
5035   22C5 C6 62 23      je _for69_exit
5036   22C8             _for69_block:
5037   22C8             ;; if(gca2[i][j] != 'A' + i + j){ 
5038   22C8             _if70_cond:
5039   22C8 3B 48 30      mov d, _gca2_data ; $gca2
5040   22CB D7            push a
5041   22CC DA            push d
5042   22CD FA FF FF      lea d, [bp + -1] ; $i
5043   22D0 2A            mov b, [d]
5044   22D1 E7            pop d
5045   22D2 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
5046   22D6 DA            push d
5047   22D7 FA FD FF      lea d, [bp + -3] ; $j
5048   22DA 2A            mov b, [d]
5049   22DB E7            pop d
5050   22DC 5A            add d, b
5051   22DD E4            pop a
5052   22DE 32            mov bl, [d]
5053   22DF A7 00         mov bh, 0
5054   22E1             ; START RELATIONAL
5055   22E1 D7            push a
5056   22E2 11            mov a, b
5057   22E3 26 41 00      mov b, $41
5058   22E6             ; START TERMS
5059   22E6 D7            push a
5060   22E7 11            mov a, b
5061   22E8 FA FF FF      lea d, [bp + -1] ; $i
5062   22EB 2A            mov b, [d]
5063   22EC 56            add b, a
5064   22ED 11            mov a, b
5065   22EE FA FD FF      lea d, [bp + -3] ; $j
5066   22F1 2A            mov b, [d]
5067   22F2 56            add b, a
5068   22F3 E4            pop a
5069   22F4             ; END TERMS
5070   22F4 B0            cmp a, b
5071   22F5 FD 72         sneq ; !=
5072   22F7 E4            pop a
5073   22F8             ; END RELATIONAL
5074   22F8 C0 00 00      cmp b, 0
5075   22FB C6 0E 23      je _if70_exit
5076   22FE             _if70_true:
5077   22FE             ;; pass = 0; 
5078   22FE FA FB FF      lea d, [bp + -5] ; $pass
5079   2301 DA            push d
5080   2302 26 00 00      mov b, $0
5081   2305 E7            pop d
5082   2306 FD 43         mov [d], b
5083   2308             ;; break; 
5084   2308 0A 62 23      jmp _for69_exit ; for break
5085   230B 0A 0E 23      jmp _if70_exit
5086   230E             _if70_exit:
5087   230E             ;; if(gia2[i][j] != i * j){ 
5088   230E             _if71_cond:
5089   230E 3B 61 30      mov d, _gia2_data ; $gia2
5090   2311 D7            push a
5091   2312 DA            push d
5092   2313 FA FF FF      lea d, [bp + -1] ; $i
5093   2316 2A            mov b, [d]
5094   2317 E7            pop d
5095   2318 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
5096   231C DA            push d
5097   231D FA FD FF      lea d, [bp + -3] ; $j
5098   2320 2A            mov b, [d]
5099   2321 E7            pop d
5100   2322 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5101   2326 E4            pop a
5102   2327 2A            mov b, [d]
5103   2328             ; START RELATIONAL
5104   2328 D7            push a
5105   2329 11            mov a, b
5106   232A FA FF FF      lea d, [bp + -1] ; $i
5107   232D 2A            mov b, [d]
5108   232E             ; START FACTORS
5109   232E D7            push a
5110   232F 11            mov a, b
5111   2330 FA FD FF      lea d, [bp + -3] ; $j
5112   2333 2A            mov b, [d]
5113   2334 AC            mul a, b ; *
5114   2335 11            mov a, b
5115   2336 27            mov b, a
5116   2337 E4            pop a
5117   2338             ; END FACTORS
5118   2338 B0            cmp a, b
5119   2339 FD 72         sneq ; !=
5120   233B E4            pop a
5121   233C             ; END RELATIONAL
5122   233C C0 00 00      cmp b, 0
5123   233F C6 52 23      je _if71_exit
5124   2342             _if71_true:
5125   2342             ;; pass = 0; 
5126   2342 FA FB FF      lea d, [bp + -5] ; $pass
5127   2345 DA            push d
5128   2346 26 00 00      mov b, $0
5129   2349 E7            pop d
5130   234A FD 43         mov [d], b
5131   234C             ;; break; 
5132   234C 0A 62 23      jmp _for69_exit ; for break
5133   234F 0A 52 23      jmp _if71_exit
5134   2352             _if71_exit:
5135   2352             _for69_update:
5136   2352 FA FD FF      lea d, [bp + -3] ; $j
5137   2355 2A            mov b, [d]
5138   2356 D8            push b
5139   2357 FD 77         inc b
5140   2359 FA FD FF      lea d, [bp + -3] ; $j
5141   235C FD 43         mov [d], b
5142   235E E5            pop b
5143   235F 0A B5 22      jmp _for69_cond
5144   2362             _for69_exit:
5145   2362             _for68_update:
5146   2362 FA FF FF      lea d, [bp + -1] ; $i
5147   2365 2A            mov b, [d]
5148   2366 D8            push b
5149   2367 FD 77         inc b
5150   2369 FA FF FF      lea d, [bp + -1] ; $i
5151   236C FD 43         mov [d], b
5152   236E E5            pop b
5153   236F 0A 98 22      jmp _for68_cond
5154   2372             _for68_exit:
5155   2372             ;; return pass; 
5156   2372 FA FB FF      lea d, [bp + -5] ; $pass
5157   2375 2A            mov b, [d]
5158   2376 F9            leave
5159   2377 09            ret
5160   2378             
5161   2378             test2:
5162   2378 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5163   237B             ; $i 
5164   237B             ; $j 
5165   237B             ; $lca 
5166   237B             ; $lia 
5167   237B             ; $pass 
5168   237B 10 01 00      mov a, $1
5169   237E 45 EC FF      mov [bp + -20], a
5170   2381 52 15 00      sub sp, 21
5171   2384             ;; for (i = 0; i < 5; i++){ 
5172   2384             _for72_init:
5173   2384 FA FF FF      lea d, [bp + -1] ; $i
5174   2387 DA            push d
5175   2388 26 00 00      mov b, $0
5176   238B E7            pop d
5177   238C FD 43         mov [d], b
5178   238E             _for72_cond:
5179   238E FA FF FF      lea d, [bp + -1] ; $i
5180   2391 2A            mov b, [d]
5181   2392             ; START RELATIONAL
5182   2392 D7            push a
5183   2393 11            mov a, b
5184   2394 26 05 00      mov b, $5
5185   2397 B0            cmp a, b
5186   2398 FD 73         slt ; <= (signed)
5187   239A E4            pop a
5188   239B             ; END RELATIONAL
5189   239B C0 00 00      cmp b, 0
5190   239E C6 F3 23      je _for72_exit
5191   23A1             _for72_block:
5192   23A1             ;; lca[i] = 'A' + i + j; 
5193   23A1 FA F8 FF      lea d, [bp + -8] ; $lca
5194   23A4 D7            push a
5195   23A5 DA            push d
5196   23A6 FA FF FF      lea d, [bp + -1] ; $i
5197   23A9 2A            mov b, [d]
5198   23AA E7            pop d
5199   23AB 5A            add d, b
5200   23AC E4            pop a
5201   23AD DA            push d
5202   23AE 26 41 00      mov b, $41
5203   23B1             ; START TERMS
5204   23B1 D7            push a
5205   23B2 11            mov a, b
5206   23B3 FA FF FF      lea d, [bp + -1] ; $i
5207   23B6 2A            mov b, [d]
5208   23B7 56            add b, a
5209   23B8 11            mov a, b
5210   23B9 FA FD FF      lea d, [bp + -3] ; $j
5211   23BC 2A            mov b, [d]
5212   23BD 56            add b, a
5213   23BE E4            pop a
5214   23BF             ; END TERMS
5215   23BF E7            pop d
5216   23C0 FD 3E         mov [d], bl
5217   23C2             ;; lia[i] = i * j; 
5218   23C2 FA EE FF      lea d, [bp + -18] ; $lia
5219   23C5 D7            push a
5220   23C6 DA            push d
5221   23C7 FA FF FF      lea d, [bp + -1] ; $i
5222   23CA 2A            mov b, [d]
5223   23CB E7            pop d
5224   23CC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5225   23D0 E4            pop a
5226   23D1 DA            push d
5227   23D2 FA FF FF      lea d, [bp + -1] ; $i
5228   23D5 2A            mov b, [d]
5229   23D6             ; START FACTORS
5230   23D6 D7            push a
5231   23D7 11            mov a, b
5232   23D8 FA FD FF      lea d, [bp + -3] ; $j
5233   23DB 2A            mov b, [d]
5234   23DC AC            mul a, b ; *
5235   23DD 11            mov a, b
5236   23DE 27            mov b, a
5237   23DF E4            pop a
5238   23E0             ; END FACTORS
5239   23E0 E7            pop d
5240   23E1 FD 43         mov [d], b
5241   23E3             _for72_update:
5242   23E3 FA FF FF      lea d, [bp + -1] ; $i
5243   23E6 2A            mov b, [d]
5244   23E7 D8            push b
5245   23E8 FD 77         inc b
5246   23EA FA FF FF      lea d, [bp + -1] ; $i
5247   23ED FD 43         mov [d], b
5248   23EF E5            pop b
5249   23F0 0A 8E 23      jmp _for72_cond
5250   23F3             _for72_exit:
5251   23F3             ;; for (i = 0; i < 5; i++){ 
5252   23F3             _for73_init:
5253   23F3 FA FF FF      lea d, [bp + -1] ; $i
5254   23F6 DA            push d
5255   23F7 26 00 00      mov b, $0
5256   23FA E7            pop d
5257   23FB FD 43         mov [d], b
5258   23FD             _for73_cond:
5259   23FD FA FF FF      lea d, [bp + -1] ; $i
5260   2400 2A            mov b, [d]
5261   2401             ; START RELATIONAL
5262   2401 D7            push a
5263   2402 11            mov a, b
5264   2403 26 05 00      mov b, $5
5265   2406 B0            cmp a, b
5266   2407 FD 73         slt ; <= (signed)
5267   2409 E4            pop a
5268   240A             ; END RELATIONAL
5269   240A C0 00 00      cmp b, 0
5270   240D C6 96 24      je _for73_exit
5271   2410             _for73_block:
5272   2410             ;; if(lca[i] != 'A' + i + j){ 
5273   2410             _if74_cond:
5274   2410 FA F8 FF      lea d, [bp + -8] ; $lca
5275   2413 D7            push a
5276   2414 DA            push d
5277   2415 FA FF FF      lea d, [bp + -1] ; $i
5278   2418 2A            mov b, [d]
5279   2419 E7            pop d
5280   241A 5A            add d, b
5281   241B E4            pop a
5282   241C 32            mov bl, [d]
5283   241D A7 00         mov bh, 0
5284   241F             ; START RELATIONAL
5285   241F D7            push a
5286   2420 11            mov a, b
5287   2421 26 41 00      mov b, $41
5288   2424             ; START TERMS
5289   2424 D7            push a
5290   2425 11            mov a, b
5291   2426 FA FF FF      lea d, [bp + -1] ; $i
5292   2429 2A            mov b, [d]
5293   242A 56            add b, a
5294   242B 11            mov a, b
5295   242C FA FD FF      lea d, [bp + -3] ; $j
5296   242F 2A            mov b, [d]
5297   2430 56            add b, a
5298   2431 E4            pop a
5299   2432             ; END TERMS
5300   2432 B0            cmp a, b
5301   2433 FD 72         sneq ; !=
5302   2435 E4            pop a
5303   2436             ; END RELATIONAL
5304   2436 C0 00 00      cmp b, 0
5305   2439 C6 4C 24      je _if74_exit
5306   243C             _if74_true:
5307   243C             ;; pass = 0; 
5308   243C FA EC FF      lea d, [bp + -20] ; $pass
5309   243F DA            push d
5310   2440 26 00 00      mov b, $0
5311   2443 E7            pop d
5312   2444 FD 43         mov [d], b
5313   2446             ;; break; 
5314   2446 0A 96 24      jmp _for73_exit ; for break
5315   2449 0A 4C 24      jmp _if74_exit
5316   244C             _if74_exit:
5317   244C             ;; if(lia[i] != i * j){ 
5318   244C             _if75_cond:
5319   244C FA EE FF      lea d, [bp + -18] ; $lia
5320   244F D7            push a
5321   2450 DA            push d
5322   2451 FA FF FF      lea d, [bp + -1] ; $i
5323   2454 2A            mov b, [d]
5324   2455 E7            pop d
5325   2456 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5326   245A E4            pop a
5327   245B 2A            mov b, [d]
5328   245C             ; START RELATIONAL
5329   245C D7            push a
5330   245D 11            mov a, b
5331   245E FA FF FF      lea d, [bp + -1] ; $i
5332   2461 2A            mov b, [d]
5333   2462             ; START FACTORS
5334   2462 D7            push a
5335   2463 11            mov a, b
5336   2464 FA FD FF      lea d, [bp + -3] ; $j
5337   2467 2A            mov b, [d]
5338   2468 AC            mul a, b ; *
5339   2469 11            mov a, b
5340   246A 27            mov b, a
5341   246B E4            pop a
5342   246C             ; END FACTORS
5343   246C B0            cmp a, b
5344   246D FD 72         sneq ; !=
5345   246F E4            pop a
5346   2470             ; END RELATIONAL
5347   2470 C0 00 00      cmp b, 0
5348   2473 C6 86 24      je _if75_exit
5349   2476             _if75_true:
5350   2476             ;; pass = 0; 
5351   2476 FA EC FF      lea d, [bp + -20] ; $pass
5352   2479 DA            push d
5353   247A 26 00 00      mov b, $0
5354   247D E7            pop d
5355   247E FD 43         mov [d], b
5356   2480             ;; break; 
5357   2480 0A 96 24      jmp _for73_exit ; for break
5358   2483 0A 86 24      jmp _if75_exit
5359   2486             _if75_exit:
5360   2486             _for73_update:
5361   2486 FA FF FF      lea d, [bp + -1] ; $i
5362   2489 2A            mov b, [d]
5363   248A D8            push b
5364   248B FD 77         inc b
5365   248D FA FF FF      lea d, [bp + -1] ; $i
5366   2490 FD 43         mov [d], b
5367   2492 E5            pop b
5368   2493 0A FD 23      jmp _for73_cond
5369   2496             _for73_exit:
5370   2496             ;; return pass; 
5371   2496 FA EC FF      lea d, [bp + -20] ; $pass
5372   2499 2A            mov b, [d]
5373   249A F9            leave
5374   249B 09            ret
5375   249C             
5376   249C             test3:
5377   249C F8 00 00      enter 0 ; (push bp; mov bp, sp)
5378   249F             ; $i 
5379   249F             ; $j 
5380   249F             ; $lca 
5381   249F             ; $lia 
5382   249F             ; $pass 
5383   249F 10 01 00      mov a, $1
5384   24A2 45 B0 FF      mov [bp + -80], a
5385   24A5 52 51 00      sub sp, 81
5386   24A8             ;; for (i = 0; i < 5; i++){ 
5387   24A8             _for76_init:
5388   24A8 FA FF FF      lea d, [bp + -1] ; $i
5389   24AB DA            push d
5390   24AC 26 00 00      mov b, $0
5391   24AF E7            pop d
5392   24B0 FD 43         mov [d], b
5393   24B2             _for76_cond:
5394   24B2 FA FF FF      lea d, [bp + -1] ; $i
5395   24B5 2A            mov b, [d]
5396   24B6             ; START RELATIONAL
5397   24B6 D7            push a
5398   24B7 11            mov a, b
5399   24B8 26 05 00      mov b, $5
5400   24BB B0            cmp a, b
5401   24BC FD 73         slt ; <= (signed)
5402   24BE E4            pop a
5403   24BF             ; END RELATIONAL
5404   24BF C0 00 00      cmp b, 0
5405   24C2 C6 58 25      je _for76_exit
5406   24C5             _for76_block:
5407   24C5             ;; for (j = 0; j < 5; j++){ 
5408   24C5             _for77_init:
5409   24C5 FA FD FF      lea d, [bp + -3] ; $j
5410   24C8 DA            push d
5411   24C9 26 00 00      mov b, $0
5412   24CC E7            pop d
5413   24CD FD 43         mov [d], b
5414   24CF             _for77_cond:
5415   24CF FA FD FF      lea d, [bp + -3] ; $j
5416   24D2 2A            mov b, [d]
5417   24D3             ; START RELATIONAL
5418   24D3 D7            push a
5419   24D4 11            mov a, b
5420   24D5 26 05 00      mov b, $5
5421   24D8 B0            cmp a, b
5422   24D9 FD 73         slt ; <= (signed)
5423   24DB E4            pop a
5424   24DC             ; END RELATIONAL
5425   24DC C0 00 00      cmp b, 0
5426   24DF C6 48 25      je _for77_exit
5427   24E2             _for77_block:
5428   24E2             ;; lca[i][j] = 'A' + i + j; 
5429   24E2 FA E4 FF      lea d, [bp + -28] ; $lca
5430   24E5 D7            push a
5431   24E6 DA            push d
5432   24E7 FA FF FF      lea d, [bp + -1] ; $i
5433   24EA 2A            mov b, [d]
5434   24EB E7            pop d
5435   24EC FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
5436   24F0 DA            push d
5437   24F1 FA FD FF      lea d, [bp + -3] ; $j
5438   24F4 2A            mov b, [d]
5439   24F5 E7            pop d
5440   24F6 5A            add d, b
5441   24F7 E4            pop a
5442   24F8 DA            push d
5443   24F9 26 41 00      mov b, $41
5444   24FC             ; START TERMS
5445   24FC D7            push a
5446   24FD 11            mov a, b
5447   24FE FA FF FF      lea d, [bp + -1] ; $i
5448   2501 2A            mov b, [d]
5449   2502 56            add b, a
5450   2503 11            mov a, b
5451   2504 FA FD FF      lea d, [bp + -3] ; $j
5452   2507 2A            mov b, [d]
5453   2508 56            add b, a
5454   2509 E4            pop a
5455   250A             ; END TERMS
5456   250A E7            pop d
5457   250B FD 3E         mov [d], bl
5458   250D             ;; lia[i][j] = i * j; 
5459   250D FA B2 FF      lea d, [bp + -78] ; $lia
5460   2510 D7            push a
5461   2511 DA            push d
5462   2512 FA FF FF      lea d, [bp + -1] ; $i
5463   2515 2A            mov b, [d]
5464   2516 E7            pop d
5465   2517 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
5466   251B DA            push d
5467   251C FA FD FF      lea d, [bp + -3] ; $j
5468   251F 2A            mov b, [d]
5469   2520 E7            pop d
5470   2521 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5471   2525 E4            pop a
5472   2526 DA            push d
5473   2527 FA FF FF      lea d, [bp + -1] ; $i
5474   252A 2A            mov b, [d]
5475   252B             ; START FACTORS
5476   252B D7            push a
5477   252C 11            mov a, b
5478   252D FA FD FF      lea d, [bp + -3] ; $j
5479   2530 2A            mov b, [d]
5480   2531 AC            mul a, b ; *
5481   2532 11            mov a, b
5482   2533 27            mov b, a
5483   2534 E4            pop a
5484   2535             ; END FACTORS
5485   2535 E7            pop d
5486   2536 FD 43         mov [d], b
5487   2538             _for77_update:
5488   2538 FA FD FF      lea d, [bp + -3] ; $j
5489   253B 2A            mov b, [d]
5490   253C D8            push b
5491   253D FD 77         inc b
5492   253F FA FD FF      lea d, [bp + -3] ; $j
5493   2542 FD 43         mov [d], b
5494   2544 E5            pop b
5495   2545 0A CF 24      jmp _for77_cond
5496   2548             _for77_exit:
5497   2548             _for76_update:
5498   2548 FA FF FF      lea d, [bp + -1] ; $i
5499   254B 2A            mov b, [d]
5500   254C D8            push b
5501   254D FD 77         inc b
5502   254F FA FF FF      lea d, [bp + -1] ; $i
5503   2552 FD 43         mov [d], b
5504   2554 E5            pop b
5505   2555 0A B2 24      jmp _for76_cond
5506   2558             _for76_exit:
5507   2558             ;; for (i = 0; i < 5; i++){ 
5508   2558             _for78_init:
5509   2558 FA FF FF      lea d, [bp + -1] ; $i
5510   255B DA            push d
5511   255C 26 00 00      mov b, $0
5512   255F E7            pop d
5513   2560 FD 43         mov [d], b
5514   2562             _for78_cond:
5515   2562 FA FF FF      lea d, [bp + -1] ; $i
5516   2565 2A            mov b, [d]
5517   2566             ; START RELATIONAL
5518   2566 D7            push a
5519   2567 11            mov a, b
5520   2568 26 05 00      mov b, $5
5521   256B B0            cmp a, b
5522   256C FD 73         slt ; <= (signed)
5523   256E E4            pop a
5524   256F             ; END RELATIONAL
5525   256F C0 00 00      cmp b, 0
5526   2572 C6 3C 26      je _for78_exit
5527   2575             _for78_block:
5528   2575             ;; for (j = 0; j < 5; j++){ 
5529   2575             _for79_init:
5530   2575 FA FD FF      lea d, [bp + -3] ; $j
5531   2578 DA            push d
5532   2579 26 00 00      mov b, $0
5533   257C E7            pop d
5534   257D FD 43         mov [d], b
5535   257F             _for79_cond:
5536   257F FA FD FF      lea d, [bp + -3] ; $j
5537   2582 2A            mov b, [d]
5538   2583             ; START RELATIONAL
5539   2583 D7            push a
5540   2584 11            mov a, b
5541   2585 26 05 00      mov b, $5
5542   2588 B0            cmp a, b
5543   2589 FD 73         slt ; <= (signed)
5544   258B E4            pop a
5545   258C             ; END RELATIONAL
5546   258C C0 00 00      cmp b, 0
5547   258F C6 2C 26      je _for79_exit
5548   2592             _for79_block:
5549   2592             ;; if(lca[i][j] != 'A' + i + j){ 
5550   2592             _if80_cond:
5551   2592 FA E4 FF      lea d, [bp + -28] ; $lca
5552   2595 D7            push a
5553   2596 DA            push d
5554   2597 FA FF FF      lea d, [bp + -1] ; $i
5555   259A 2A            mov b, [d]
5556   259B E7            pop d
5557   259C FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
5558   25A0 DA            push d
5559   25A1 FA FD FF      lea d, [bp + -3] ; $j
5560   25A4 2A            mov b, [d]
5561   25A5 E7            pop d
5562   25A6 5A            add d, b
5563   25A7 E4            pop a
5564   25A8 32            mov bl, [d]
5565   25A9 A7 00         mov bh, 0
5566   25AB             ; START RELATIONAL
5567   25AB D7            push a
5568   25AC 11            mov a, b
5569   25AD 26 41 00      mov b, $41
5570   25B0             ; START TERMS
5571   25B0 D7            push a
5572   25B1 11            mov a, b
5573   25B2 FA FF FF      lea d, [bp + -1] ; $i
5574   25B5 2A            mov b, [d]
5575   25B6 56            add b, a
5576   25B7 11            mov a, b
5577   25B8 FA FD FF      lea d, [bp + -3] ; $j
5578   25BB 2A            mov b, [d]
5579   25BC 56            add b, a
5580   25BD E4            pop a
5581   25BE             ; END TERMS
5582   25BE B0            cmp a, b
5583   25BF FD 72         sneq ; !=
5584   25C1 E4            pop a
5585   25C2             ; END RELATIONAL
5586   25C2 C0 00 00      cmp b, 0
5587   25C5 C6 D8 25      je _if80_exit
5588   25C8             _if80_true:
5589   25C8             ;; pass = 0; 
5590   25C8 FA B0 FF      lea d, [bp + -80] ; $pass
5591   25CB DA            push d
5592   25CC 26 00 00      mov b, $0
5593   25CF E7            pop d
5594   25D0 FD 43         mov [d], b
5595   25D2             ;; break; 
5596   25D2 0A 2C 26      jmp _for79_exit ; for break
5597   25D5 0A D8 25      jmp _if80_exit
5598   25D8             _if80_exit:
5599   25D8             ;; if(lia[i][j] != i * j){ 
5600   25D8             _if81_cond:
5601   25D8 FA B2 FF      lea d, [bp + -78] ; $lia
5602   25DB D7            push a
5603   25DC DA            push d
5604   25DD FA FF FF      lea d, [bp + -1] ; $i
5605   25E0 2A            mov b, [d]
5606   25E1 E7            pop d
5607   25E2 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
5608   25E6 DA            push d
5609   25E7 FA FD FF      lea d, [bp + -3] ; $j
5610   25EA 2A            mov b, [d]
5611   25EB E7            pop d
5612   25EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5613   25F0 E4            pop a
5614   25F1 2A            mov b, [d]
5615   25F2             ; START RELATIONAL
5616   25F2 D7            push a
5617   25F3 11            mov a, b
5618   25F4 FA FF FF      lea d, [bp + -1] ; $i
5619   25F7 2A            mov b, [d]
5620   25F8             ; START FACTORS
5621   25F8 D7            push a
5622   25F9 11            mov a, b
5623   25FA FA FD FF      lea d, [bp + -3] ; $j
5624   25FD 2A            mov b, [d]
5625   25FE AC            mul a, b ; *
5626   25FF 11            mov a, b
5627   2600 27            mov b, a
5628   2601 E4            pop a
5629   2602             ; END FACTORS
5630   2602 B0            cmp a, b
5631   2603 FD 72         sneq ; !=
5632   2605 E4            pop a
5633   2606             ; END RELATIONAL
5634   2606 C0 00 00      cmp b, 0
5635   2609 C6 1C 26      je _if81_exit
5636   260C             _if81_true:
5637   260C             ;; pass = 0; 
5638   260C FA B0 FF      lea d, [bp + -80] ; $pass
5639   260F DA            push d
5640   2610 26 00 00      mov b, $0
5641   2613 E7            pop d
5642   2614 FD 43         mov [d], b
5643   2616             ;; break; 
5644   2616 0A 2C 26      jmp _for79_exit ; for break
5645   2619 0A 1C 26      jmp _if81_exit
5646   261C             _if81_exit:
5647   261C             _for79_update:
5648   261C FA FD FF      lea d, [bp + -3] ; $j
5649   261F 2A            mov b, [d]
5650   2620 D8            push b
5651   2621 FD 77         inc b
5652   2623 FA FD FF      lea d, [bp + -3] ; $j
5653   2626 FD 43         mov [d], b
5654   2628 E5            pop b
5655   2629 0A 7F 25      jmp _for79_cond
5656   262C             _for79_exit:
5657   262C             _for78_update:
5658   262C FA FF FF      lea d, [bp + -1] ; $i
5659   262F 2A            mov b, [d]
5660   2630 D8            push b
5661   2631 FD 77         inc b
5662   2633 FA FF FF      lea d, [bp + -1] ; $i
5663   2636 FD 43         mov [d], b
5664   2638 E5            pop b
5665   2639 0A 62 25      jmp _for78_cond
5666   263C             _for78_exit:
5667   263C             ;; return pass; 
5668   263C FA B0 FF      lea d, [bp + -80] ; $pass
5669   263F 2A            mov b, [d]
5670   2640 F9            leave
5671   2641 09            ret
5672   2642             
5673   2642             test4:
5674   2642 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5675   2645             ; $a 
5676   2645             ; $b 
5677   2645             ; $c 
5678   2645             ; $result 
5679   2645             ; $pass 
5680   2645 10 01 00      mov a, $1
5681   2648 45 F7 FF      mov [bp + -9], a
5682   264B 52 0A 00      sub sp, 10
5683   264E             ;; result = 1 && 1 && 1; 
5684   264E FA F9 FF      lea d, [bp + -7] ; $result
5685   2651 DA            push d
5686   2652 26 01 00      mov b, $1
5687   2655 D7            push a
5688   2656 11            mov a, b
5689   2657 26 01 00      mov b, $1
5690   265A FD A7         sand a, b ; &&
5691   265C 11            mov a, b
5692   265D 26 01 00      mov b, $1
5693   2660 FD A7         sand a, b ; &&
5694   2662 E4            pop a
5695   2663 E7            pop d
5696   2664 FD 43         mov [d], b
5697   2666             ;; pass = pass && result == 1; 
5698   2666 FA F7 FF      lea d, [bp + -9] ; $pass
5699   2669 DA            push d
5700   266A FA F7 FF      lea d, [bp + -9] ; $pass
5701   266D 2A            mov b, [d]
5702   266E D7            push a
5703   266F 11            mov a, b
5704   2670 FA F9 FF      lea d, [bp + -7] ; $result
5705   2673 2A            mov b, [d]
5706   2674             ; START RELATIONAL
5707   2674 D7            push a
5708   2675 11            mov a, b
5709   2676 26 01 00      mov b, $1
5710   2679 B0            cmp a, b
5711   267A FD 71         seq ; ==
5712   267C E4            pop a
5713   267D             ; END RELATIONAL
5714   267D FD A7         sand a, b ; &&
5715   267F E4            pop a
5716   2680 E7            pop d
5717   2681 FD 43         mov [d], b
5718   2683             ;; result = 1 && 0 && 1; 
5719   2683 FA F9 FF      lea d, [bp + -7] ; $result
5720   2686 DA            push d
5721   2687 26 01 00      mov b, $1
5722   268A D7            push a
5723   268B 11            mov a, b
5724   268C 26 00 00      mov b, $0
5725   268F FD A7         sand a, b ; &&
5726   2691 11            mov a, b
5727   2692 26 01 00      mov b, $1
5728   2695 FD A7         sand a, b ; &&
5729   2697 E4            pop a
5730   2698 E7            pop d
5731   2699 FD 43         mov [d], b
5732   269B             ;; pass = pass && result == 0; 
5733   269B FA F7 FF      lea d, [bp + -9] ; $pass
5734   269E DA            push d
5735   269F FA F7 FF      lea d, [bp + -9] ; $pass
5736   26A2 2A            mov b, [d]
5737   26A3 D7            push a
5738   26A4 11            mov a, b
5739   26A5 FA F9 FF      lea d, [bp + -7] ; $result
5740   26A8 2A            mov b, [d]
5741   26A9             ; START RELATIONAL
5742   26A9 D7            push a
5743   26AA 11            mov a, b
5744   26AB 26 00 00      mov b, $0
5745   26AE B0            cmp a, b
5746   26AF FD 71         seq ; ==
5747   26B1 E4            pop a
5748   26B2             ; END RELATIONAL
5749   26B2 FD A7         sand a, b ; &&
5750   26B4 E4            pop a
5751   26B5 E7            pop d
5752   26B6 FD 43         mov [d], b
5753   26B8             ;; result = 1 || 1 || 1; 
5754   26B8 FA F9 FF      lea d, [bp + -7] ; $result
5755   26BB DA            push d
5756   26BC 26 01 00      mov b, $1
5757   26BF D7            push a
5758   26C0 11            mov a, b
5759   26C1 26 01 00      mov b, $1
5760   26C4 FD A8         sor a, b ; ||
5761   26C6 11            mov a, b
5762   26C7 26 01 00      mov b, $1
5763   26CA FD A8         sor a, b ; ||
5764   26CC E4            pop a
5765   26CD E7            pop d
5766   26CE FD 43         mov [d], b
5767   26D0             ;; pass = pass && result == 1; 
5768   26D0 FA F7 FF      lea d, [bp + -9] ; $pass
5769   26D3 DA            push d
5770   26D4 FA F7 FF      lea d, [bp + -9] ; $pass
5771   26D7 2A            mov b, [d]
5772   26D8 D7            push a
5773   26D9 11            mov a, b
5774   26DA FA F9 FF      lea d, [bp + -7] ; $result
5775   26DD 2A            mov b, [d]
5776   26DE             ; START RELATIONAL
5777   26DE D7            push a
5778   26DF 11            mov a, b
5779   26E0 26 01 00      mov b, $1
5780   26E3 B0            cmp a, b
5781   26E4 FD 71         seq ; ==
5782   26E6 E4            pop a
5783   26E7             ; END RELATIONAL
5784   26E7 FD A7         sand a, b ; &&
5785   26E9 E4            pop a
5786   26EA E7            pop d
5787   26EB FD 43         mov [d], b
5788   26ED             ;; result = 0 || 1 || 0; 
5789   26ED FA F9 FF      lea d, [bp + -7] ; $result
5790   26F0 DA            push d
5791   26F1 26 00 00      mov b, $0
5792   26F4 D7            push a
5793   26F5 11            mov a, b
5794   26F6 26 01 00      mov b, $1
5795   26F9 FD A8         sor a, b ; ||
5796   26FB 11            mov a, b
5797   26FC 26 00 00      mov b, $0
5798   26FF FD A8         sor a, b ; ||
5799   2701 E4            pop a
5800   2702 E7            pop d
5801   2703 FD 43         mov [d], b
5802   2705             ;; pass = pass && result == 1; 
5803   2705 FA F7 FF      lea d, [bp + -9] ; $pass
5804   2708 DA            push d
5805   2709 FA F7 FF      lea d, [bp + -9] ; $pass
5806   270C 2A            mov b, [d]
5807   270D D7            push a
5808   270E 11            mov a, b
5809   270F FA F9 FF      lea d, [bp + -7] ; $result
5810   2712 2A            mov b, [d]
5811   2713             ; START RELATIONAL
5812   2713 D7            push a
5813   2714 11            mov a, b
5814   2715 26 01 00      mov b, $1
5815   2718 B0            cmp a, b
5816   2719 FD 71         seq ; ==
5817   271B E4            pop a
5818   271C             ; END RELATIONAL
5819   271C FD A7         sand a, b ; &&
5820   271E E4            pop a
5821   271F E7            pop d
5822   2720 FD 43         mov [d], b
5823   2722             ;; result = 1 || 0 && 1; 
5824   2722 FA F9 FF      lea d, [bp + -7] ; $result
5825   2725 DA            push d
5826   2726 26 01 00      mov b, $1
5827   2729 D7            push a
5828   272A 11            mov a, b
5829   272B 26 00 00      mov b, $0
5830   272E D7            push a
5831   272F 11            mov a, b
5832   2730 26 01 00      mov b, $1
5833   2733 FD A7         sand a, b ; &&
5834   2735 E4            pop a
5835   2736 FD A8         sor a, b ; ||
5836   2738 E4            pop a
5837   2739 E7            pop d
5838   273A FD 43         mov [d], b
5839   273C             ;; pass = pass && result == 1; 
5840   273C FA F7 FF      lea d, [bp + -9] ; $pass
5841   273F DA            push d
5842   2740 FA F7 FF      lea d, [bp + -9] ; $pass
5843   2743 2A            mov b, [d]
5844   2744 D7            push a
5845   2745 11            mov a, b
5846   2746 FA F9 FF      lea d, [bp + -7] ; $result
5847   2749 2A            mov b, [d]
5848   274A             ; START RELATIONAL
5849   274A D7            push a
5850   274B 11            mov a, b
5851   274C 26 01 00      mov b, $1
5852   274F B0            cmp a, b
5853   2750 FD 71         seq ; ==
5854   2752 E4            pop a
5855   2753             ; END RELATIONAL
5856   2753 FD A7         sand a, b ; &&
5857   2755 E4            pop a
5858   2756 E7            pop d
5859   2757 FD 43         mov [d], b
5860   2759             ;; result = 0 || 0 || 0; 
5861   2759 FA F9 FF      lea d, [bp + -7] ; $result
5862   275C DA            push d
5863   275D 26 00 00      mov b, $0
5864   2760 D7            push a
5865   2761 11            mov a, b
5866   2762 26 00 00      mov b, $0
5867   2765 FD A8         sor a, b ; ||
5868   2767 11            mov a, b
5869   2768 26 00 00      mov b, $0
5870   276B FD A8         sor a, b ; ||
5871   276D E4            pop a
5872   276E E7            pop d
5873   276F FD 43         mov [d], b
5874   2771             ;; pass = pass && result == 0; 
5875   2771 FA F7 FF      lea d, [bp + -9] ; $pass
5876   2774 DA            push d
5877   2775 FA F7 FF      lea d, [bp + -9] ; $pass
5878   2778 2A            mov b, [d]
5879   2779 D7            push a
5880   277A 11            mov a, b
5881   277B FA F9 FF      lea d, [bp + -7] ; $result
5882   277E 2A            mov b, [d]
5883   277F             ; START RELATIONAL
5884   277F D7            push a
5885   2780 11            mov a, b
5886   2781 26 00 00      mov b, $0
5887   2784 B0            cmp a, b
5888   2785 FD 71         seq ; ==
5889   2787 E4            pop a
5890   2788             ; END RELATIONAL
5891   2788 FD A7         sand a, b ; &&
5892   278A E4            pop a
5893   278B E7            pop d
5894   278C FD 43         mov [d], b
5895   278E             ;; a = 1; b = 1; c = 1; 
5896   278E FA FF FF      lea d, [bp + -1] ; $a
5897   2791 DA            push d
5898   2792 26 01 00      mov b, $1
5899   2795 E7            pop d
5900   2796 FD 43         mov [d], b
5901   2798             ;; b = 1; c = 1; 
5902   2798 FA FD FF      lea d, [bp + -3] ; $b
5903   279B DA            push d
5904   279C 26 01 00      mov b, $1
5905   279F E7            pop d
5906   27A0 FD 43         mov [d], b
5907   27A2             ;; c = 1; 
5908   27A2 FA FB FF      lea d, [bp + -5] ; $c
5909   27A5 DA            push d
5910   27A6 26 01 00      mov b, $1
5911   27A9 E7            pop d
5912   27AA FD 43         mov [d], b
5913   27AC             ;; result = a && b && c; 
5914   27AC FA F9 FF      lea d, [bp + -7] ; $result
5915   27AF DA            push d
5916   27B0 FA FF FF      lea d, [bp + -1] ; $a
5917   27B3 2A            mov b, [d]
5918   27B4 D7            push a
5919   27B5 11            mov a, b
5920   27B6 FA FD FF      lea d, [bp + -3] ; $b
5921   27B9 2A            mov b, [d]
5922   27BA FD A7         sand a, b ; &&
5923   27BC 11            mov a, b
5924   27BD FA FB FF      lea d, [bp + -5] ; $c
5925   27C0 2A            mov b, [d]
5926   27C1 FD A7         sand a, b ; &&
5927   27C3 E4            pop a
5928   27C4 E7            pop d
5929   27C5 FD 43         mov [d], b
5930   27C7             ;; pass = pass && result == 1; 
5931   27C7 FA F7 FF      lea d, [bp + -9] ; $pass
5932   27CA DA            push d
5933   27CB FA F7 FF      lea d, [bp + -9] ; $pass
5934   27CE 2A            mov b, [d]
5935   27CF D7            push a
5936   27D0 11            mov a, b
5937   27D1 FA F9 FF      lea d, [bp + -7] ; $result
5938   27D4 2A            mov b, [d]
5939   27D5             ; START RELATIONAL
5940   27D5 D7            push a
5941   27D6 11            mov a, b
5942   27D7 26 01 00      mov b, $1
5943   27DA B0            cmp a, b
5944   27DB FD 71         seq ; ==
5945   27DD E4            pop a
5946   27DE             ; END RELATIONAL
5947   27DE FD A7         sand a, b ; &&
5948   27E0 E4            pop a
5949   27E1 E7            pop d
5950   27E2 FD 43         mov [d], b
5951   27E4             ;; a = 1; b = 0; c = 1; 
5952   27E4 FA FF FF      lea d, [bp + -1] ; $a
5953   27E7 DA            push d
5954   27E8 26 01 00      mov b, $1
5955   27EB E7            pop d
5956   27EC FD 43         mov [d], b
5957   27EE             ;; b = 0; c = 1; 
5958   27EE FA FD FF      lea d, [bp + -3] ; $b
5959   27F1 DA            push d
5960   27F2 26 00 00      mov b, $0
5961   27F5 E7            pop d
5962   27F6 FD 43         mov [d], b
5963   27F8             ;; c = 1; 
5964   27F8 FA FB FF      lea d, [bp + -5] ; $c
5965   27FB DA            push d
5966   27FC 26 01 00      mov b, $1
5967   27FF E7            pop d
5968   2800 FD 43         mov [d], b
5969   2802             ;; result = a && b && c; 
5970   2802 FA F9 FF      lea d, [bp + -7] ; $result
5971   2805 DA            push d
5972   2806 FA FF FF      lea d, [bp + -1] ; $a
5973   2809 2A            mov b, [d]
5974   280A D7            push a
5975   280B 11            mov a, b
5976   280C FA FD FF      lea d, [bp + -3] ; $b
5977   280F 2A            mov b, [d]
5978   2810 FD A7         sand a, b ; &&
5979   2812 11            mov a, b
5980   2813 FA FB FF      lea d, [bp + -5] ; $c
5981   2816 2A            mov b, [d]
5982   2817 FD A7         sand a, b ; &&
5983   2819 E4            pop a
5984   281A E7            pop d
5985   281B FD 43         mov [d], b
5986   281D             ;; pass = pass && result == 0; 
5987   281D FA F7 FF      lea d, [bp + -9] ; $pass
5988   2820 DA            push d
5989   2821 FA F7 FF      lea d, [bp + -9] ; $pass
5990   2824 2A            mov b, [d]
5991   2825 D7            push a
5992   2826 11            mov a, b
5993   2827 FA F9 FF      lea d, [bp + -7] ; $result
5994   282A 2A            mov b, [d]
5995   282B             ; START RELATIONAL
5996   282B D7            push a
5997   282C 11            mov a, b
5998   282D 26 00 00      mov b, $0
5999   2830 B0            cmp a, b
6000   2831 FD 71         seq ; ==
6001   2833 E4            pop a
6002   2834             ; END RELATIONAL
6003   2834 FD A7         sand a, b ; &&
6004   2836 E4            pop a
6005   2837 E7            pop d
6006   2838 FD 43         mov [d], b
6007   283A             ;; a = 1; b = 1; c = 1; 
6008   283A FA FF FF      lea d, [bp + -1] ; $a
6009   283D DA            push d
6010   283E 26 01 00      mov b, $1
6011   2841 E7            pop d
6012   2842 FD 43         mov [d], b
6013   2844             ;; b = 1; c = 1; 
6014   2844 FA FD FF      lea d, [bp + -3] ; $b
6015   2847 DA            push d
6016   2848 26 01 00      mov b, $1
6017   284B E7            pop d
6018   284C FD 43         mov [d], b
6019   284E             ;; c = 1; 
6020   284E FA FB FF      lea d, [bp + -5] ; $c
6021   2851 DA            push d
6022   2852 26 01 00      mov b, $1
6023   2855 E7            pop d
6024   2856 FD 43         mov [d], b
6025   2858             ;; result = a || b || b; 
6026   2858 FA F9 FF      lea d, [bp + -7] ; $result
6027   285B DA            push d
6028   285C FA FF FF      lea d, [bp + -1] ; $a
6029   285F 2A            mov b, [d]
6030   2860 D7            push a
6031   2861 11            mov a, b
6032   2862 FA FD FF      lea d, [bp + -3] ; $b
6033   2865 2A            mov b, [d]
6034   2866 FD A8         sor a, b ; ||
6035   2868 11            mov a, b
6036   2869 FA FD FF      lea d, [bp + -3] ; $b
6037   286C 2A            mov b, [d]
6038   286D FD A8         sor a, b ; ||
6039   286F E4            pop a
6040   2870 E7            pop d
6041   2871 FD 43         mov [d], b
6042   2873             ;; pass = pass && result == 1; 
6043   2873 FA F7 FF      lea d, [bp + -9] ; $pass
6044   2876 DA            push d
6045   2877 FA F7 FF      lea d, [bp + -9] ; $pass
6046   287A 2A            mov b, [d]
6047   287B D7            push a
6048   287C 11            mov a, b
6049   287D FA F9 FF      lea d, [bp + -7] ; $result
6050   2880 2A            mov b, [d]
6051   2881             ; START RELATIONAL
6052   2881 D7            push a
6053   2882 11            mov a, b
6054   2883 26 01 00      mov b, $1
6055   2886 B0            cmp a, b
6056   2887 FD 71         seq ; ==
6057   2889 E4            pop a
6058   288A             ; END RELATIONAL
6059   288A FD A7         sand a, b ; &&
6060   288C E4            pop a
6061   288D E7            pop d
6062   288E FD 43         mov [d], b
6063   2890             ;; a = 0; b = 1; c = 0; 
6064   2890 FA FF FF      lea d, [bp + -1] ; $a
6065   2893 DA            push d
6066   2894 26 00 00      mov b, $0
6067   2897 E7            pop d
6068   2898 FD 43         mov [d], b
6069   289A             ;; b = 1; c = 0; 
6070   289A FA FD FF      lea d, [bp + -3] ; $b
6071   289D DA            push d
6072   289E 26 01 00      mov b, $1
6073   28A1 E7            pop d
6074   28A2 FD 43         mov [d], b
6075   28A4             ;; c = 0; 
6076   28A4 FA FB FF      lea d, [bp + -5] ; $c
6077   28A7 DA            push d
6078   28A8 26 00 00      mov b, $0
6079   28AB E7            pop d
6080   28AC FD 43         mov [d], b
6081   28AE             ;; result = a || b || b; 
6082   28AE FA F9 FF      lea d, [bp + -7] ; $result
6083   28B1 DA            push d
6084   28B2 FA FF FF      lea d, [bp + -1] ; $a
6085   28B5 2A            mov b, [d]
6086   28B6 D7            push a
6087   28B7 11            mov a, b
6088   28B8 FA FD FF      lea d, [bp + -3] ; $b
6089   28BB 2A            mov b, [d]
6090   28BC FD A8         sor a, b ; ||
6091   28BE 11            mov a, b
6092   28BF FA FD FF      lea d, [bp + -3] ; $b
6093   28C2 2A            mov b, [d]
6094   28C3 FD A8         sor a, b ; ||
6095   28C5 E4            pop a
6096   28C6 E7            pop d
6097   28C7 FD 43         mov [d], b
6098   28C9             ;; pass = pass && result == 1; 
6099   28C9 FA F7 FF      lea d, [bp + -9] ; $pass
6100   28CC DA            push d
6101   28CD FA F7 FF      lea d, [bp + -9] ; $pass
6102   28D0 2A            mov b, [d]
6103   28D1 D7            push a
6104   28D2 11            mov a, b
6105   28D3 FA F9 FF      lea d, [bp + -7] ; $result
6106   28D6 2A            mov b, [d]
6107   28D7             ; START RELATIONAL
6108   28D7 D7            push a
6109   28D8 11            mov a, b
6110   28D9 26 01 00      mov b, $1
6111   28DC B0            cmp a, b
6112   28DD FD 71         seq ; ==
6113   28DF E4            pop a
6114   28E0             ; END RELATIONAL
6115   28E0 FD A7         sand a, b ; &&
6116   28E2 E4            pop a
6117   28E3 E7            pop d
6118   28E4 FD 43         mov [d], b
6119   28E6             ;; a = 1; b = 0; c = 1; 
6120   28E6 FA FF FF      lea d, [bp + -1] ; $a
6121   28E9 DA            push d
6122   28EA 26 01 00      mov b, $1
6123   28ED E7            pop d
6124   28EE FD 43         mov [d], b
6125   28F0             ;; b = 0; c = 1; 
6126   28F0 FA FD FF      lea d, [bp + -3] ; $b
6127   28F3 DA            push d
6128   28F4 26 00 00      mov b, $0
6129   28F7 E7            pop d
6130   28F8 FD 43         mov [d], b
6131   28FA             ;; c = 1; 
6132   28FA FA FB FF      lea d, [bp + -5] ; $c
6133   28FD DA            push d
6134   28FE 26 01 00      mov b, $1
6135   2901 E7            pop d
6136   2902 FD 43         mov [d], b
6137   2904             ;; result = a || b && b; 
6138   2904 FA F9 FF      lea d, [bp + -7] ; $result
6139   2907 DA            push d
6140   2908 FA FF FF      lea d, [bp + -1] ; $a
6141   290B 2A            mov b, [d]
6142   290C D7            push a
6143   290D 11            mov a, b
6144   290E FA FD FF      lea d, [bp + -3] ; $b
6145   2911 2A            mov b, [d]
6146   2912 D7            push a
6147   2913 11            mov a, b
6148   2914 FA FD FF      lea d, [bp + -3] ; $b
6149   2917 2A            mov b, [d]
6150   2918 FD A7         sand a, b ; &&
6151   291A E4            pop a
6152   291B FD A8         sor a, b ; ||
6153   291D E4            pop a
6154   291E E7            pop d
6155   291F FD 43         mov [d], b
6156   2921             ;; pass = pass && result == 1; 
6157   2921 FA F7 FF      lea d, [bp + -9] ; $pass
6158   2924 DA            push d
6159   2925 FA F7 FF      lea d, [bp + -9] ; $pass
6160   2928 2A            mov b, [d]
6161   2929 D7            push a
6162   292A 11            mov a, b
6163   292B FA F9 FF      lea d, [bp + -7] ; $result
6164   292E 2A            mov b, [d]
6165   292F             ; START RELATIONAL
6166   292F D7            push a
6167   2930 11            mov a, b
6168   2931 26 01 00      mov b, $1
6169   2934 B0            cmp a, b
6170   2935 FD 71         seq ; ==
6171   2937 E4            pop a
6172   2938             ; END RELATIONAL
6173   2938 FD A7         sand a, b ; &&
6174   293A E4            pop a
6175   293B E7            pop d
6176   293C FD 43         mov [d], b
6177   293E             ;; a = 0; b = 0; c = 0; 
6178   293E FA FF FF      lea d, [bp + -1] ; $a
6179   2941 DA            push d
6180   2942 26 00 00      mov b, $0
6181   2945 E7            pop d
6182   2946 FD 43         mov [d], b
6183   2948             ;; b = 0; c = 0; 
6184   2948 FA FD FF      lea d, [bp + -3] ; $b
6185   294B DA            push d
6186   294C 26 00 00      mov b, $0
6187   294F E7            pop d
6188   2950 FD 43         mov [d], b
6189   2952             ;; c = 0; 
6190   2952 FA FB FF      lea d, [bp + -5] ; $c
6191   2955 DA            push d
6192   2956 26 00 00      mov b, $0
6193   2959 E7            pop d
6194   295A FD 43         mov [d], b
6195   295C             ;; result = a || b || b; 
6196   295C FA F9 FF      lea d, [bp + -7] ; $result
6197   295F DA            push d
6198   2960 FA FF FF      lea d, [bp + -1] ; $a
6199   2963 2A            mov b, [d]
6200   2964 D7            push a
6201   2965 11            mov a, b
6202   2966 FA FD FF      lea d, [bp + -3] ; $b
6203   2969 2A            mov b, [d]
6204   296A FD A8         sor a, b ; ||
6205   296C 11            mov a, b
6206   296D FA FD FF      lea d, [bp + -3] ; $b
6207   2970 2A            mov b, [d]
6208   2971 FD A8         sor a, b ; ||
6209   2973 E4            pop a
6210   2974 E7            pop d
6211   2975 FD 43         mov [d], b
6212   2977             ;; pass = pass && result == 0; 
6213   2977 FA F7 FF      lea d, [bp + -9] ; $pass
6214   297A DA            push d
6215   297B FA F7 FF      lea d, [bp + -9] ; $pass
6216   297E 2A            mov b, [d]
6217   297F D7            push a
6218   2980 11            mov a, b
6219   2981 FA F9 FF      lea d, [bp + -7] ; $result
6220   2984 2A            mov b, [d]
6221   2985             ; START RELATIONAL
6222   2985 D7            push a
6223   2986 11            mov a, b
6224   2987 26 00 00      mov b, $0
6225   298A B0            cmp a, b
6226   298B FD 71         seq ; ==
6227   298D E4            pop a
6228   298E             ; END RELATIONAL
6229   298E FD A7         sand a, b ; &&
6230   2990 E4            pop a
6231   2991 E7            pop d
6232   2992 FD 43         mov [d], b
6233   2994             ;; return pass; 
6234   2994 FA F7 FF      lea d, [bp + -9] ; $pass
6235   2997 2A            mov b, [d]
6236   2998 F9            leave
6237   2999 09            ret
6238   299A             
6239   299A             test5:
6240   299A F8 00 00      enter 0 ; (push bp; mov bp, sp)
6241   299D             ; $pass 
6242   299D             ; $i 
6243   299D             ; $j 
6244   299D             ; $k 
6245   299D             ; $a1 
6246   299D             ; $a2 
6247   299D             ; $a3 
6248   299D 52 26 00      sub sp, 38
6249   29A0             ;; i = 1; 
6250   29A0 FA FD FF      lea d, [bp + -3] ; $i
6251   29A3 DA            push d
6252   29A4 26 01 00      mov b, $1
6253   29A7 E7            pop d
6254   29A8 FD 43         mov [d], b
6255   29AA             ;; j = 1; 
6256   29AA FA FB FF      lea d, [bp + -5] ; $j
6257   29AD DA            push d
6258   29AE 26 01 00      mov b, $1
6259   29B1 E7            pop d
6260   29B2 FD 43         mov [d], b
6261   29B4             ;; k = 1; 
6262   29B4 FA F9 FF      lea d, [bp + -7] ; $k
6263   29B7 DA            push d
6264   29B8 26 01 00      mov b, $1
6265   29BB E7            pop d
6266   29BC FD 43         mov [d], b
6267   29BE             ;; a1[3] = 1; 
6268   29BE FA EF FF      lea d, [bp + -17] ; $a1
6269   29C1 D7            push a
6270   29C2 DA            push d
6271   29C3 26 03 00      mov b, $3
6272   29C6 E7            pop d
6273   29C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6274   29CB E4            pop a
6275   29CC DA            push d
6276   29CD 26 01 00      mov b, $1
6277   29D0 E7            pop d
6278   29D1 FD 43         mov [d], b
6279   29D3             ;; a2[2] = 1; 
6280   29D3 FA E5 FF      lea d, [bp + -27] ; $a2
6281   29D6 D7            push a
6282   29D7 DA            push d
6283   29D8 26 02 00      mov b, $2
6284   29DB E7            pop d
6285   29DC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6286   29E0 E4            pop a
6287   29E1 DA            push d
6288   29E2 26 01 00      mov b, $1
6289   29E5 E7            pop d
6290   29E6 FD 43         mov [d], b
6291   29E8             ;; a3[a2[a1[i + j + (k && 1) + (1 && 0)] + (i && 1)] + (0 || j)] = 56; 
6292   29E8 FA DB FF      lea d, [bp + -37] ; $a3
6293   29EB D7            push a
6294   29EC DA            push d
6295   29ED FA E5 FF      lea d, [bp + -27] ; $a2
6296   29F0 D7            push a
6297   29F1 DA            push d
6298   29F2 FA EF FF      lea d, [bp + -17] ; $a1
6299   29F5 D7            push a
6300   29F6 DA            push d
6301   29F7 FA FD FF      lea d, [bp + -3] ; $i
6302   29FA 2A            mov b, [d]
6303   29FB             ; START TERMS
6304   29FB D7            push a
6305   29FC 11            mov a, b
6306   29FD FA FB FF      lea d, [bp + -5] ; $j
6307   2A00 2A            mov b, [d]
6308   2A01 56            add b, a
6309   2A02 11            mov a, b
6310   2A03 FA F9 FF      lea d, [bp + -7] ; $k
6311   2A06 2A            mov b, [d]
6312   2A07 D7            push a
6313   2A08 11            mov a, b
6314   2A09 26 01 00      mov b, $1
6315   2A0C FD A7         sand a, b ; &&
6316   2A0E E4            pop a
6317   2A0F 56            add b, a
6318   2A10 11            mov a, b
6319   2A11 26 01 00      mov b, $1
6320   2A14 D7            push a
6321   2A15 11            mov a, b
6322   2A16 26 00 00      mov b, $0
6323   2A19 FD A7         sand a, b ; &&
6324   2A1B E4            pop a
6325   2A1C 56            add b, a
6326   2A1D E4            pop a
6327   2A1E             ; END TERMS
6328   2A1E E7            pop d
6329   2A1F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6330   2A23 E4            pop a
6331   2A24 2A            mov b, [d]
6332   2A25             ; START TERMS
6333   2A25 D7            push a
6334   2A26 11            mov a, b
6335   2A27 FA FD FF      lea d, [bp + -3] ; $i
6336   2A2A 2A            mov b, [d]
6337   2A2B D7            push a
6338   2A2C 11            mov a, b
6339   2A2D 26 01 00      mov b, $1
6340   2A30 FD A7         sand a, b ; &&
6341   2A32 E4            pop a
6342   2A33 56            add b, a
6343   2A34 E4            pop a
6344   2A35             ; END TERMS
6345   2A35 E7            pop d
6346   2A36 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6347   2A3A E4            pop a
6348   2A3B 2A            mov b, [d]
6349   2A3C             ; START TERMS
6350   2A3C D7            push a
6351   2A3D 11            mov a, b
6352   2A3E 26 00 00      mov b, $0
6353   2A41 D7            push a
6354   2A42 11            mov a, b
6355   2A43 FA FB FF      lea d, [bp + -5] ; $j
6356   2A46 2A            mov b, [d]
6357   2A47 FD A8         sor a, b ; ||
6358   2A49 E4            pop a
6359   2A4A 56            add b, a
6360   2A4B E4            pop a
6361   2A4C             ; END TERMS
6362   2A4C E7            pop d
6363   2A4D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6364   2A51 E4            pop a
6365   2A52 DA            push d
6366   2A53 26 38 00      mov b, $38
6367   2A56 E7            pop d
6368   2A57 FD 43         mov [d], b
6369   2A59             ;; pass = a3[2] == 56; 
6370   2A59 FA FF FF      lea d, [bp + -1] ; $pass
6371   2A5C DA            push d
6372   2A5D FA DB FF      lea d, [bp + -37] ; $a3
6373   2A60 D7            push a
6374   2A61 DA            push d
6375   2A62 26 02 00      mov b, $2
6376   2A65 E7            pop d
6377   2A66 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6378   2A6A E4            pop a
6379   2A6B 2A            mov b, [d]
6380   2A6C             ; START RELATIONAL
6381   2A6C D7            push a
6382   2A6D 11            mov a, b
6383   2A6E 26 38 00      mov b, $38
6384   2A71 B0            cmp a, b
6385   2A72 FD 71         seq ; ==
6386   2A74 E4            pop a
6387   2A75             ; END RELATIONAL
6388   2A75 E7            pop d
6389   2A76 FD 43         mov [d], b
6390   2A78             ;; return pass; 
6391   2A78 FA FF FF      lea d, [bp + -1] ; $pass
6392   2A7B 2A            mov b, [d]
6393   2A7C F9            leave
6394   2A7D 09            ret
6395   2A7E             
6396   2A7E             test6:
6397   2A7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
6398   2A81             ; $pass 
6399   2A81 10 01 00      mov a, $1
6400   2A84 45 FF FF      mov [bp + -1], a
6401   2A87             ; $i 
6402   2A87             ; $j 
6403   2A87             ; $k 
6404   2A87 52 08 00      sub sp, 8
6405   2A8A             ;; test6_struct.c1 = 'A'; 
6406   2A8A 3B 93 30      mov d, _test6_struct_data ; $test6_struct
6407   2A8D 58 00 00      add d, 0
6408   2A90 DA            push d
6409   2A91 26 41 00      mov b, $41
6410   2A94 E7            pop d
6411   2A95 FD 3E         mov [d], bl
6412   2A97             ;; pass = pass && test6_struct.c1 == 'A'; 
6413   2A97 FA FF FF      lea d, [bp + -1] ; $pass
6414   2A9A DA            push d
6415   2A9B FA FF FF      lea d, [bp + -1] ; $pass
6416   2A9E 2A            mov b, [d]
6417   2A9F D7            push a
6418   2AA0 11            mov a, b
6419   2AA1 3B 93 30      mov d, _test6_struct_data ; $test6_struct
6420   2AA4 58 00 00      add d, 0
6421   2AA7 32            mov bl, [d]
6422   2AA8 A7 00         mov bh, 0
6423   2AAA             ; START RELATIONAL
6424   2AAA D7            push a
6425   2AAB 11            mov a, b
6426   2AAC 26 41 00      mov b, $41
6427   2AAF B0            cmp a, b
6428   2AB0 FD 71         seq ; ==
6429   2AB2 E4            pop a
6430   2AB3             ; END RELATIONAL
6431   2AB3 FD A7         sand a, b ; &&
6432   2AB5 E4            pop a
6433   2AB6 E7            pop d
6434   2AB7 FD 43         mov [d], b
6435   2AB9             ;; for(i = 0; i < 5; i++){ 
6436   2AB9             _for82_init:
6437   2AB9 FA FD FF      lea d, [bp + -3] ; $i
6438   2ABC DA            push d
6439   2ABD 26 00 00      mov b, $0
6440   2AC0 E7            pop d
6441   2AC1 FD 43         mov [d], b
6442   2AC3             _for82_cond:
6443   2AC3 FA FD FF      lea d, [bp + -3] ; $i
6444   2AC6 2A            mov b, [d]
6445   2AC7             ; START RELATIONAL
6446   2AC7 D7            push a
6447   2AC8 11            mov a, b
6448   2AC9 26 05 00      mov b, $5
6449   2ACC B0            cmp a, b
6450   2ACD FD 73         slt ; <= (signed)
6451   2ACF E4            pop a
6452   2AD0             ; END RELATIONAL
6453   2AD0 C0 00 00      cmp b, 0
6454   2AD3 C6 29 2B      je _for82_exit
6455   2AD6             _for82_block:
6456   2AD6             ;; test6_struct.ca[i] = i; 
6457   2AD6 3B 93 30      mov d, _test6_struct_data ; $test6_struct
6458   2AD9 58 01 00      add d, 1
6459   2ADC D7            push a
6460   2ADD DA            push d
6461   2ADE FA FD FF      lea d, [bp + -3] ; $i
6462   2AE1 2A            mov b, [d]
6463   2AE2 E7            pop d
6464   2AE3 5A            add d, b
6465   2AE4 E4            pop a
6466   2AE5 DA            push d
6467   2AE6 FA FD FF      lea d, [bp + -3] ; $i
6468   2AE9 2A            mov b, [d]
6469   2AEA E7            pop d
6470   2AEB FD 3E         mov [d], bl
6471   2AED             ;; pass = pass && test6_struct.ca[i] == i; 
6472   2AED FA FF FF      lea d, [bp + -1] ; $pass
6473   2AF0 DA            push d
6474   2AF1 FA FF FF      lea d, [bp + -1] ; $pass
6475   2AF4 2A            mov b, [d]
6476   2AF5 D7            push a
6477   2AF6 11            mov a, b
6478   2AF7 3B 93 30      mov d, _test6_struct_data ; $test6_struct
6479   2AFA 58 01 00      add d, 1
6480   2AFD D7            push a
6481   2AFE DA            push d
6482   2AFF FA FD FF      lea d, [bp + -3] ; $i
6483   2B02 2A            mov b, [d]
6484   2B03 E7            pop d
6485   2B04 5A            add d, b
6486   2B05 E4            pop a
6487   2B06 32            mov bl, [d]
6488   2B07 A7 00         mov bh, 0
6489   2B09             ; START RELATIONAL
6490   2B09 D7            push a
6491   2B0A 11            mov a, b
6492   2B0B FA FD FF      lea d, [bp + -3] ; $i
6493   2B0E 2A            mov b, [d]
6494   2B0F B0            cmp a, b
6495   2B10 FD 71         seq ; ==
6496   2B12 E4            pop a
6497   2B13             ; END RELATIONAL
6498   2B13 FD A7         sand a, b ; &&
6499   2B15 E4            pop a
6500   2B16 E7            pop d
6501   2B17 FD 43         mov [d], b
6502   2B19             _for82_update:
6503   2B19 FA FD FF      lea d, [bp + -3] ; $i
6504   2B1C 2A            mov b, [d]
6505   2B1D D8            push b
6506   2B1E FD 77         inc b
6507   2B20 FA FD FF      lea d, [bp + -3] ; $i
6508   2B23 FD 43         mov [d], b
6509   2B25 E5            pop b
6510   2B26 0A C3 2A      jmp _for82_cond
6511   2B29             _for82_exit:
6512   2B29             ;; test6_struct.i1 = 55555; 
6513   2B29 3B 93 30      mov d, _test6_struct_data ; $test6_struct
6514   2B2C 58 06 00      add d, 6
6515   2B2F DA            push d
6516   2B30 26 03 D9      mov b, $d903
6517   2B33 E7            pop d
6518   2B34 FD 43         mov [d], b
6519   2B36             ;; pass = pass && test6_struct.i1 == 55555; 
6520   2B36 FA FF FF      lea d, [bp + -1] ; $pass
6521   2B39 DA            push d
6522   2B3A FA FF FF      lea d, [bp + -1] ; $pass
6523   2B3D 2A            mov b, [d]
6524   2B3E D7            push a
6525   2B3F 11            mov a, b
6526   2B40 3B 93 30      mov d, _test6_struct_data ; $test6_struct
6527   2B43 58 06 00      add d, 6
6528   2B46 2A            mov b, [d]
6529   2B47             ; START RELATIONAL
6530   2B47 D7            push a
6531   2B48 11            mov a, b
6532   2B49 26 03 D9      mov b, $d903
6533   2B4C B0            cmp a, b
6534   2B4D FD 71         seq ; ==
6535   2B4F E4            pop a
6536   2B50             ; END RELATIONAL
6537   2B50 FD A7         sand a, b ; &&
6538   2B52 E4            pop a
6539   2B53 E7            pop d
6540   2B54 FD 43         mov [d], b
6541   2B56             ;; for(i = 0; i < 5; i++){ 
6542   2B56             _for83_init:
6543   2B56 FA FD FF      lea d, [bp + -3] ; $i
6544   2B59 DA            push d
6545   2B5A 26 00 00      mov b, $0
6546   2B5D E7            pop d
6547   2B5E FD 43         mov [d], b
6548   2B60             _for83_cond:
6549   2B60 FA FD FF      lea d, [bp + -3] ; $i
6550   2B63 2A            mov b, [d]
6551   2B64             ; START RELATIONAL
6552   2B64 D7            push a
6553   2B65 11            mov a, b
6554   2B66 26 05 00      mov b, $5
6555   2B69 B0            cmp a, b
6556   2B6A FD 73         slt ; <= (signed)
6557   2B6C E4            pop a
6558   2B6D             ; END RELATIONAL
6559   2B6D C0 00 00      cmp b, 0
6560   2B70 C6 CA 2B      je _for83_exit
6561   2B73             _for83_block:
6562   2B73             ;; test6_struct.ia[i] = i; 
6563   2B73 3B 93 30      mov d, _test6_struct_data ; $test6_struct
6564   2B76 58 08 00      add d, 8
6565   2B79 D7            push a
6566   2B7A DA            push d
6567   2B7B FA FD FF      lea d, [bp + -3] ; $i
6568   2B7E 2A            mov b, [d]
6569   2B7F E7            pop d
6570   2B80 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6571   2B84 E4            pop a
6572   2B85 DA            push d
6573   2B86 FA FD FF      lea d, [bp + -3] ; $i
6574   2B89 2A            mov b, [d]
6575   2B8A E7            pop d
6576   2B8B FD 43         mov [d], b
6577   2B8D             ;; pass = pass && test6_struct.ia[i] == i; 
6578   2B8D FA FF FF      lea d, [bp + -1] ; $pass
6579   2B90 DA            push d
6580   2B91 FA FF FF      lea d, [bp + -1] ; $pass
6581   2B94 2A            mov b, [d]
6582   2B95 D7            push a
6583   2B96 11            mov a, b
6584   2B97 3B 93 30      mov d, _test6_struct_data ; $test6_struct
6585   2B9A 58 08 00      add d, 8
6586   2B9D D7            push a
6587   2B9E DA            push d
6588   2B9F FA FD FF      lea d, [bp + -3] ; $i
6589   2BA2 2A            mov b, [d]
6590   2BA3 E7            pop d
6591   2BA4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6592   2BA8 E4            pop a
6593   2BA9 2A            mov b, [d]
6594   2BAA             ; START RELATIONAL
6595   2BAA D7            push a
6596   2BAB 11            mov a, b
6597   2BAC FA FD FF      lea d, [bp + -3] ; $i
6598   2BAF 2A            mov b, [d]
6599   2BB0 B0            cmp a, b
6600   2BB1 FD 71         seq ; ==
6601   2BB3 E4            pop a
6602   2BB4             ; END RELATIONAL
6603   2BB4 FD A7         sand a, b ; &&
6604   2BB6 E4            pop a
6605   2BB7 E7            pop d
6606   2BB8 FD 43         mov [d], b
6607   2BBA             _for83_update:
6608   2BBA FA FD FF      lea d, [bp + -3] ; $i
6609   2BBD 2A            mov b, [d]
6610   2BBE D8            push b
6611   2BBF FD 77         inc b
6612   2BC1 FA FD FF      lea d, [bp + -3] ; $i
6613   2BC4 FD 43         mov [d], b
6614   2BC6 E5            pop b
6615   2BC7 0A 60 2B      jmp _for83_cond
6616   2BCA             _for83_exit:
6617   2BCA             ;; return pass; 
6618   2BCA FA FF FF      lea d, [bp + -1] ; $pass
6619   2BCD 2A            mov b, [d]
6620   2BCE F9            leave
6621   2BCF 09            ret
6622   2BD0             
6623   2BD0             test7:
6624   2BD0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6625   2BD3             ; $pass 
6626   2BD3 10 01 00      mov a, $1
6627   2BD6 45 FF FF      mov [bp + -1], a
6628   2BD9             ; $i 
6629   2BD9             ; $j 
6630   2BD9             ; $k 
6631   2BD9 52 08 00      sub sp, 8
6632   2BDC             ;; test7_struct.test7_substruct.c1 = 'A'; 
6633   2BDC 3B A5 30      mov d, _test7_struct_data ; $test7_struct
6634   2BDF 58 06 00      add d, 6
6635   2BE2 58 00 00      add d, 0
6636   2BE5 DA            push d
6637   2BE6 26 41 00      mov b, $41
6638   2BE9 E7            pop d
6639   2BEA FD 3E         mov [d], bl
6640   2BEC             ;; pass = pass && test7_struct.test7_substruct.c1 == 'A'; 
6641   2BEC FA FF FF      lea d, [bp + -1] ; $pass
6642   2BEF DA            push d
6643   2BF0 FA FF FF      lea d, [bp + -1] ; $pass
6644   2BF3 2A            mov b, [d]
6645   2BF4 D7            push a
6646   2BF5 11            mov a, b
6647   2BF6 3B A5 30      mov d, _test7_struct_data ; $test7_struct
6648   2BF9 58 06 00      add d, 6
6649   2BFC 58 00 00      add d, 0
6650   2BFF 32            mov bl, [d]
6651   2C00 A7 00         mov bh, 0
6652   2C02             ; START RELATIONAL
6653   2C02 D7            push a
6654   2C03 11            mov a, b
6655   2C04 26 41 00      mov b, $41
6656   2C07 B0            cmp a, b
6657   2C08 FD 71         seq ; ==
6658   2C0A E4            pop a
6659   2C0B             ; END RELATIONAL
6660   2C0B FD A7         sand a, b ; &&
6661   2C0D E4            pop a
6662   2C0E E7            pop d
6663   2C0F FD 43         mov [d], b
6664   2C11             ;; for(i = 0; i < 5; i++){ 
6665   2C11             _for84_init:
6666   2C11 FA FD FF      lea d, [bp + -3] ; $i
6667   2C14 DA            push d
6668   2C15 26 00 00      mov b, $0
6669   2C18 E7            pop d
6670   2C19 FD 43         mov [d], b
6671   2C1B             _for84_cond:
6672   2C1B FA FD FF      lea d, [bp + -3] ; $i
6673   2C1E 2A            mov b, [d]
6674   2C1F             ; START RELATIONAL
6675   2C1F D7            push a
6676   2C20 11            mov a, b
6677   2C21 26 05 00      mov b, $5
6678   2C24 B0            cmp a, b
6679   2C25 FD 73         slt ; <= (signed)
6680   2C27 E4            pop a
6681   2C28             ; END RELATIONAL
6682   2C28 C0 00 00      cmp b, 0
6683   2C2B C6 87 2C      je _for84_exit
6684   2C2E             _for84_block:
6685   2C2E             ;; test7_struct.test7_substruct.ca[i] = i; 
6686   2C2E 3B A5 30      mov d, _test7_struct_data ; $test7_struct
6687   2C31 58 06 00      add d, 6
6688   2C34 58 01 00      add d, 1
6689   2C37 D7            push a
6690   2C38 DA            push d
6691   2C39 FA FD FF      lea d, [bp + -3] ; $i
6692   2C3C 2A            mov b, [d]
6693   2C3D E7            pop d
6694   2C3E 5A            add d, b
6695   2C3F E4            pop a
6696   2C40 DA            push d
6697   2C41 FA FD FF      lea d, [bp + -3] ; $i
6698   2C44 2A            mov b, [d]
6699   2C45 E7            pop d
6700   2C46 FD 3E         mov [d], bl
6701   2C48             ;; pass = pass && test7_struct.test7_substruct.ca[i] == i; 
6702   2C48 FA FF FF      lea d, [bp + -1] ; $pass
6703   2C4B DA            push d
6704   2C4C FA FF FF      lea d, [bp + -1] ; $pass
6705   2C4F 2A            mov b, [d]
6706   2C50 D7            push a
6707   2C51 11            mov a, b
6708   2C52 3B A5 30      mov d, _test7_struct_data ; $test7_struct
6709   2C55 58 06 00      add d, 6
6710   2C58 58 01 00      add d, 1
6711   2C5B D7            push a
6712   2C5C DA            push d
6713   2C5D FA FD FF      lea d, [bp + -3] ; $i
6714   2C60 2A            mov b, [d]
6715   2C61 E7            pop d
6716   2C62 5A            add d, b
6717   2C63 E4            pop a
6718   2C64 32            mov bl, [d]
6719   2C65 A7 00         mov bh, 0
6720   2C67             ; START RELATIONAL
6721   2C67 D7            push a
6722   2C68 11            mov a, b
6723   2C69 FA FD FF      lea d, [bp + -3] ; $i
6724   2C6C 2A            mov b, [d]
6725   2C6D B0            cmp a, b
6726   2C6E FD 71         seq ; ==
6727   2C70 E4            pop a
6728   2C71             ; END RELATIONAL
6729   2C71 FD A7         sand a, b ; &&
6730   2C73 E4            pop a
6731   2C74 E7            pop d
6732   2C75 FD 43         mov [d], b
6733   2C77             _for84_update:
6734   2C77 FA FD FF      lea d, [bp + -3] ; $i
6735   2C7A 2A            mov b, [d]
6736   2C7B D8            push b
6737   2C7C FD 77         inc b
6738   2C7E FA FD FF      lea d, [bp + -3] ; $i
6739   2C81 FD 43         mov [d], b
6740   2C83 E5            pop b
6741   2C84 0A 1B 2C      jmp _for84_cond
6742   2C87             _for84_exit:
6743   2C87             ;; test7_struct.test7_substruct.i1 = 55555; 
6744   2C87 3B A5 30      mov d, _test7_struct_data ; $test7_struct
6745   2C8A 58 06 00      add d, 6
6746   2C8D 58 06 00      add d, 6
6747   2C90 DA            push d
6748   2C91 26 03 D9      mov b, $d903
6749   2C94 E7            pop d
6750   2C95 FD 43         mov [d], b
6751   2C97             ;; pass = pass && test7_struct.test7_substruct.i1 == 55555; 
6752   2C97 FA FF FF      lea d, [bp + -1] ; $pass
6753   2C9A DA            push d
6754   2C9B FA FF FF      lea d, [bp + -1] ; $pass
6755   2C9E 2A            mov b, [d]
6756   2C9F D7            push a
6757   2CA0 11            mov a, b
6758   2CA1 3B A5 30      mov d, _test7_struct_data ; $test7_struct
6759   2CA4 58 06 00      add d, 6
6760   2CA7 58 06 00      add d, 6
6761   2CAA 2A            mov b, [d]
6762   2CAB             ; START RELATIONAL
6763   2CAB D7            push a
6764   2CAC 11            mov a, b
6765   2CAD 26 03 D9      mov b, $d903
6766   2CB0 B0            cmp a, b
6767   2CB1 FD 71         seq ; ==
6768   2CB3 E4            pop a
6769   2CB4             ; END RELATIONAL
6770   2CB4 FD A7         sand a, b ; &&
6771   2CB6 E4            pop a
6772   2CB7 E7            pop d
6773   2CB8 FD 43         mov [d], b
6774   2CBA             ;; for(i = 0; i < 5; i++){ 
6775   2CBA             _for85_init:
6776   2CBA FA FD FF      lea d, [bp + -3] ; $i
6777   2CBD DA            push d
6778   2CBE 26 00 00      mov b, $0
6779   2CC1 E7            pop d
6780   2CC2 FD 43         mov [d], b
6781   2CC4             _for85_cond:
6782   2CC4 FA FD FF      lea d, [bp + -3] ; $i
6783   2CC7 2A            mov b, [d]
6784   2CC8             ; START RELATIONAL
6785   2CC8 D7            push a
6786   2CC9 11            mov a, b
6787   2CCA 26 05 00      mov b, $5
6788   2CCD B0            cmp a, b
6789   2CCE FD 73         slt ; <= (signed)
6790   2CD0 E4            pop a
6791   2CD1             ; END RELATIONAL
6792   2CD1 C0 00 00      cmp b, 0
6793   2CD4 C6 34 2D      je _for85_exit
6794   2CD7             _for85_block:
6795   2CD7             ;; test7_struct.test7_substruct.ia[i] = i; 
6796   2CD7 3B A5 30      mov d, _test7_struct_data ; $test7_struct
6797   2CDA 58 06 00      add d, 6
6798   2CDD 58 08 00      add d, 8
6799   2CE0 D7            push a
6800   2CE1 DA            push d
6801   2CE2 FA FD FF      lea d, [bp + -3] ; $i
6802   2CE5 2A            mov b, [d]
6803   2CE6 E7            pop d
6804   2CE7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6805   2CEB E4            pop a
6806   2CEC DA            push d
6807   2CED FA FD FF      lea d, [bp + -3] ; $i
6808   2CF0 2A            mov b, [d]
6809   2CF1 E7            pop d
6810   2CF2 FD 43         mov [d], b
6811   2CF4             ;; pass = pass && test7_struct.test7_substruct.ia[i] == i; 
6812   2CF4 FA FF FF      lea d, [bp + -1] ; $pass
6813   2CF7 DA            push d
6814   2CF8 FA FF FF      lea d, [bp + -1] ; $pass
6815   2CFB 2A            mov b, [d]
6816   2CFC D7            push a
6817   2CFD 11            mov a, b
6818   2CFE 3B A5 30      mov d, _test7_struct_data ; $test7_struct
6819   2D01 58 06 00      add d, 6
6820   2D04 58 08 00      add d, 8
6821   2D07 D7            push a
6822   2D08 DA            push d
6823   2D09 FA FD FF      lea d, [bp + -3] ; $i
6824   2D0C 2A            mov b, [d]
6825   2D0D E7            pop d
6826   2D0E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6827   2D12 E4            pop a
6828   2D13 2A            mov b, [d]
6829   2D14             ; START RELATIONAL
6830   2D14 D7            push a
6831   2D15 11            mov a, b
6832   2D16 FA FD FF      lea d, [bp + -3] ; $i
6833   2D19 2A            mov b, [d]
6834   2D1A B0            cmp a, b
6835   2D1B FD 71         seq ; ==
6836   2D1D E4            pop a
6837   2D1E             ; END RELATIONAL
6838   2D1E FD A7         sand a, b ; &&
6839   2D20 E4            pop a
6840   2D21 E7            pop d
6841   2D22 FD 43         mov [d], b
6842   2D24             _for85_update:
6843   2D24 FA FD FF      lea d, [bp + -3] ; $i
6844   2D27 2A            mov b, [d]
6845   2D28 D8            push b
6846   2D29 FD 77         inc b
6847   2D2B FA FD FF      lea d, [bp + -3] ; $i
6848   2D2E FD 43         mov [d], b
6849   2D30 E5            pop b
6850   2D31 0A C4 2C      jmp _for85_cond
6851   2D34             _for85_exit:
6852   2D34             ;; return pass; 
6853   2D34 FA FF FF      lea d, [bp + -1] ; $pass
6854   2D37 2A            mov b, [d]
6855   2D38 F9            leave
6856   2D39 09            ret
6857   2D3A             
6858   2D3A             test8:
6859   2D3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
6860   2D3D             ; $pass 
6861   2D3D 10 01 00      mov a, $1
6862   2D40 45 FF FF      mov [bp + -1], a
6863   2D43             ; $i 
6864   2D43             ; $j 
6865   2D43             ; $k 
6866   2D43             ; $test8_struct 
6867   2D43 52 1A 00      sub sp, 26
6868   2D46             ;; test8_struct.c1 = 'A'; 
6869   2D46 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6870   2D49 58 00 00      add d, 0
6871   2D4C DA            push d
6872   2D4D 26 41 00      mov b, $41
6873   2D50 E7            pop d
6874   2D51 FD 3E         mov [d], bl
6875   2D53             ;; pass = pass && test8_struct.c1 == 'A'; 
6876   2D53 FA FF FF      lea d, [bp + -1] ; $pass
6877   2D56 DA            push d
6878   2D57 FA FF FF      lea d, [bp + -1] ; $pass
6879   2D5A 2A            mov b, [d]
6880   2D5B D7            push a
6881   2D5C 11            mov a, b
6882   2D5D FA E7 FF      lea d, [bp + -25] ; $test8_struct
6883   2D60 58 00 00      add d, 0
6884   2D63 32            mov bl, [d]
6885   2D64 A7 00         mov bh, 0
6886   2D66             ; START RELATIONAL
6887   2D66 D7            push a
6888   2D67 11            mov a, b
6889   2D68 26 41 00      mov b, $41
6890   2D6B B0            cmp a, b
6891   2D6C FD 71         seq ; ==
6892   2D6E E4            pop a
6893   2D6F             ; END RELATIONAL
6894   2D6F FD A7         sand a, b ; &&
6895   2D71 E4            pop a
6896   2D72 E7            pop d
6897   2D73 FD 43         mov [d], b
6898   2D75             ;; for(i = 0; i < 5; i++){ 
6899   2D75             _for86_init:
6900   2D75 FA FD FF      lea d, [bp + -3] ; $i
6901   2D78 DA            push d
6902   2D79 26 00 00      mov b, $0
6903   2D7C E7            pop d
6904   2D7D FD 43         mov [d], b
6905   2D7F             _for86_cond:
6906   2D7F FA FD FF      lea d, [bp + -3] ; $i
6907   2D82 2A            mov b, [d]
6908   2D83             ; START RELATIONAL
6909   2D83 D7            push a
6910   2D84 11            mov a, b
6911   2D85 26 05 00      mov b, $5
6912   2D88 B0            cmp a, b
6913   2D89 FD 73         slt ; <= (signed)
6914   2D8B E4            pop a
6915   2D8C             ; END RELATIONAL
6916   2D8C C0 00 00      cmp b, 0
6917   2D8F C6 E5 2D      je _for86_exit
6918   2D92             _for86_block:
6919   2D92             ;; test8_struct.ca[i] = i; 
6920   2D92 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6921   2D95 58 01 00      add d, 1
6922   2D98 D7            push a
6923   2D99 DA            push d
6924   2D9A FA FD FF      lea d, [bp + -3] ; $i
6925   2D9D 2A            mov b, [d]
6926   2D9E E7            pop d
6927   2D9F 5A            add d, b
6928   2DA0 E4            pop a
6929   2DA1 DA            push d
6930   2DA2 FA FD FF      lea d, [bp + -3] ; $i
6931   2DA5 2A            mov b, [d]
6932   2DA6 E7            pop d
6933   2DA7 FD 3E         mov [d], bl
6934   2DA9             ;; pass = pass && test8_struct.ca[i] == i; 
6935   2DA9 FA FF FF      lea d, [bp + -1] ; $pass
6936   2DAC DA            push d
6937   2DAD FA FF FF      lea d, [bp + -1] ; $pass
6938   2DB0 2A            mov b, [d]
6939   2DB1 D7            push a
6940   2DB2 11            mov a, b
6941   2DB3 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6942   2DB6 58 01 00      add d, 1
6943   2DB9 D7            push a
6944   2DBA DA            push d
6945   2DBB FA FD FF      lea d, [bp + -3] ; $i
6946   2DBE 2A            mov b, [d]
6947   2DBF E7            pop d
6948   2DC0 5A            add d, b
6949   2DC1 E4            pop a
6950   2DC2 32            mov bl, [d]
6951   2DC3 A7 00         mov bh, 0
6952   2DC5             ; START RELATIONAL
6953   2DC5 D7            push a
6954   2DC6 11            mov a, b
6955   2DC7 FA FD FF      lea d, [bp + -3] ; $i
6956   2DCA 2A            mov b, [d]
6957   2DCB B0            cmp a, b
6958   2DCC FD 71         seq ; ==
6959   2DCE E4            pop a
6960   2DCF             ; END RELATIONAL
6961   2DCF FD A7         sand a, b ; &&
6962   2DD1 E4            pop a
6963   2DD2 E7            pop d
6964   2DD3 FD 43         mov [d], b
6965   2DD5             _for86_update:
6966   2DD5 FA FD FF      lea d, [bp + -3] ; $i
6967   2DD8 2A            mov b, [d]
6968   2DD9 D8            push b
6969   2DDA FD 77         inc b
6970   2DDC FA FD FF      lea d, [bp + -3] ; $i
6971   2DDF FD 43         mov [d], b
6972   2DE1 E5            pop b
6973   2DE2 0A 7F 2D      jmp _for86_cond
6974   2DE5             _for86_exit:
6975   2DE5             ;; test8_struct.i1 = 55555; 
6976   2DE5 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6977   2DE8 58 06 00      add d, 6
6978   2DEB DA            push d
6979   2DEC 26 03 D9      mov b, $d903
6980   2DEF E7            pop d
6981   2DF0 FD 43         mov [d], b
6982   2DF2             ;; pass = pass && test8_struct.i1 == 55555; 
6983   2DF2 FA FF FF      lea d, [bp + -1] ; $pass
6984   2DF5 DA            push d
6985   2DF6 FA FF FF      lea d, [bp + -1] ; $pass
6986   2DF9 2A            mov b, [d]
6987   2DFA D7            push a
6988   2DFB 11            mov a, b
6989   2DFC FA E7 FF      lea d, [bp + -25] ; $test8_struct
6990   2DFF 58 06 00      add d, 6
6991   2E02 2A            mov b, [d]
6992   2E03             ; START RELATIONAL
6993   2E03 D7            push a
6994   2E04 11            mov a, b
6995   2E05 26 03 D9      mov b, $d903
6996   2E08 B0            cmp a, b
6997   2E09 FD 71         seq ; ==
6998   2E0B E4            pop a
6999   2E0C             ; END RELATIONAL
7000   2E0C FD A7         sand a, b ; &&
7001   2E0E E4            pop a
7002   2E0F E7            pop d
7003   2E10 FD 43         mov [d], b
7004   2E12             ;; for(i = 0; i < 5; i++){ 
7005   2E12             _for87_init:
7006   2E12 FA FD FF      lea d, [bp + -3] ; $i
7007   2E15 DA            push d
7008   2E16 26 00 00      mov b, $0
7009   2E19 E7            pop d
7010   2E1A FD 43         mov [d], b
7011   2E1C             _for87_cond:
7012   2E1C FA FD FF      lea d, [bp + -3] ; $i
7013   2E1F 2A            mov b, [d]
7014   2E20             ; START RELATIONAL
7015   2E20 D7            push a
7016   2E21 11            mov a, b
7017   2E22 26 05 00      mov b, $5
7018   2E25 B0            cmp a, b
7019   2E26 FD 73         slt ; <= (signed)
7020   2E28 E4            pop a
7021   2E29             ; END RELATIONAL
7022   2E29 C0 00 00      cmp b, 0
7023   2E2C C6 86 2E      je _for87_exit
7024   2E2F             _for87_block:
7025   2E2F             ;; test8_struct.ia[i] = i; 
7026   2E2F FA E7 FF      lea d, [bp + -25] ; $test8_struct
7027   2E32 58 08 00      add d, 8
7028   2E35 D7            push a
7029   2E36 DA            push d
7030   2E37 FA FD FF      lea d, [bp + -3] ; $i
7031   2E3A 2A            mov b, [d]
7032   2E3B E7            pop d
7033   2E3C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7034   2E40 E4            pop a
7035   2E41 DA            push d
7036   2E42 FA FD FF      lea d, [bp + -3] ; $i
7037   2E45 2A            mov b, [d]
7038   2E46 E7            pop d
7039   2E47 FD 43         mov [d], b
7040   2E49             ;; pass = pass && test8_struct.ia[i] == i; 
7041   2E49 FA FF FF      lea d, [bp + -1] ; $pass
7042   2E4C DA            push d
7043   2E4D FA FF FF      lea d, [bp + -1] ; $pass
7044   2E50 2A            mov b, [d]
7045   2E51 D7            push a
7046   2E52 11            mov a, b
7047   2E53 FA E7 FF      lea d, [bp + -25] ; $test8_struct
7048   2E56 58 08 00      add d, 8
7049   2E59 D7            push a
7050   2E5A DA            push d
7051   2E5B FA FD FF      lea d, [bp + -3] ; $i
7052   2E5E 2A            mov b, [d]
7053   2E5F E7            pop d
7054   2E60 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7055   2E64 E4            pop a
7056   2E65 2A            mov b, [d]
7057   2E66             ; START RELATIONAL
7058   2E66 D7            push a
7059   2E67 11            mov a, b
7060   2E68 FA FD FF      lea d, [bp + -3] ; $i
7061   2E6B 2A            mov b, [d]
7062   2E6C B0            cmp a, b
7063   2E6D FD 71         seq ; ==
7064   2E6F E4            pop a
7065   2E70             ; END RELATIONAL
7066   2E70 FD A7         sand a, b ; &&
7067   2E72 E4            pop a
7068   2E73 E7            pop d
7069   2E74 FD 43         mov [d], b
7070   2E76             _for87_update:
7071   2E76 FA FD FF      lea d, [bp + -3] ; $i
7072   2E79 2A            mov b, [d]
7073   2E7A D8            push b
7074   2E7B FD 77         inc b
7075   2E7D FA FD FF      lea d, [bp + -3] ; $i
7076   2E80 FD 43         mov [d], b
7077   2E82 E5            pop b
7078   2E83 0A 1C 2E      jmp _for87_cond
7079   2E86             _for87_exit:
7080   2E86             ;; return pass; 
7081   2E86 FA FF FF      lea d, [bp + -1] ; $pass
7082   2E89 2A            mov b, [d]
7083   2E8A F9            leave
7084   2E8B 09            ret
7085   2E8C             
7086   2E8C             test9:
7087   2E8C F8 00 00      enter 0 ; (push bp; mov bp, sp)
7088   2E8F             ; $pass 
7089   2E8F 10 01 00      mov a, $1
7090   2E92 45 FF FF      mov [bp + -1], a
7091   2E95             ; $i 
7092   2E95             ; $j 
7093   2E95             ; $k 
7094   2E95             ; $test9_struct 
7095   2E95 52 2C 00      sub sp, 44
7096   2E98             ;; test9_struct.test9_substruct.c1 = 'A'; 
7097   2E98 FA D5 FF      lea d, [bp + -43] ; $test9_struct
7098   2E9B 58 06 00      add d, 6
7099   2E9E 58 00 00      add d, 0
7100   2EA1 DA            push d
7101   2EA2 26 41 00      mov b, $41
7102   2EA5 E7            pop d
7103   2EA6 FD 3E         mov [d], bl
7104   2EA8             ;; pass = pass && test9_struct.test9_substruct.c1 == 'A'; 
7105   2EA8 FA FF FF      lea d, [bp + -1] ; $pass
7106   2EAB DA            push d
7107   2EAC FA FF FF      lea d, [bp + -1] ; $pass
7108   2EAF 2A            mov b, [d]
7109   2EB0 D7            push a
7110   2EB1 11            mov a, b
7111   2EB2 FA D5 FF      lea d, [bp + -43] ; $test9_struct
7112   2EB5 58 06 00      add d, 6
7113   2EB8 58 00 00      add d, 0
7114   2EBB 32            mov bl, [d]
7115   2EBC A7 00         mov bh, 0
7116   2EBE             ; START RELATIONAL
7117   2EBE D7            push a
7118   2EBF 11            mov a, b
7119   2EC0 26 41 00      mov b, $41
7120   2EC3 B0            cmp a, b
7121   2EC4 FD 71         seq ; ==
7122   2EC6 E4            pop a
7123   2EC7             ; END RELATIONAL
7124   2EC7 FD A7         sand a, b ; &&
7125   2EC9 E4            pop a
7126   2ECA E7            pop d
7127   2ECB FD 43         mov [d], b
7128   2ECD             ;; for(i = 0; i < 5; i++){ 
7129   2ECD             _for88_init:
7130   2ECD FA FD FF      lea d, [bp + -3] ; $i
7131   2ED0 DA            push d
7132   2ED1 26 00 00      mov b, $0
7133   2ED4 E7            pop d
7134   2ED5 FD 43         mov [d], b
7135   2ED7             _for88_cond:
7136   2ED7 FA FD FF      lea d, [bp + -3] ; $i
7137   2EDA 2A            mov b, [d]
7138   2EDB             ; START RELATIONAL
7139   2EDB D7            push a
7140   2EDC 11            mov a, b
7141   2EDD 26 05 00      mov b, $5
7142   2EE0 B0            cmp a, b
7143   2EE1 FD 73         slt ; <= (signed)
7144   2EE3 E4            pop a
7145   2EE4             ; END RELATIONAL
7146   2EE4 C0 00 00      cmp b, 0
7147   2EE7 C6 43 2F      je _for88_exit
7148   2EEA             _for88_block:
7149   2EEA             ;; test9_struct.test9_substruct.ca[i] = i; 
7150   2EEA FA D5 FF      lea d, [bp + -43] ; $test9_struct
7151   2EED 58 06 00      add d, 6
7152   2EF0 58 01 00      add d, 1
7153   2EF3 D7            push a
7154   2EF4 DA            push d
7155   2EF5 FA FD FF      lea d, [bp + -3] ; $i
7156   2EF8 2A            mov b, [d]
7157   2EF9 E7            pop d
7158   2EFA 5A            add d, b
7159   2EFB E4            pop a
7160   2EFC DA            push d
7161   2EFD FA FD FF      lea d, [bp + -3] ; $i
7162   2F00 2A            mov b, [d]
7163   2F01 E7            pop d
7164   2F02 FD 3E         mov [d], bl
7165   2F04             ;; pass = pass && test9_struct.test9_substruct.ca[i] == i; 
7166   2F04 FA FF FF      lea d, [bp + -1] ; $pass
7167   2F07 DA            push d
7168   2F08 FA FF FF      lea d, [bp + -1] ; $pass
7169   2F0B 2A            mov b, [d]
7170   2F0C D7            push a
7171   2F0D 11            mov a, b
7172   2F0E FA D5 FF      lea d, [bp + -43] ; $test9_struct
7173   2F11 58 06 00      add d, 6
7174   2F14 58 01 00      add d, 1
7175   2F17 D7            push a
7176   2F18 DA            push d
7177   2F19 FA FD FF      lea d, [bp + -3] ; $i
7178   2F1C 2A            mov b, [d]
7179   2F1D E7            pop d
7180   2F1E 5A            add d, b
7181   2F1F E4            pop a
7182   2F20 32            mov bl, [d]
7183   2F21 A7 00         mov bh, 0
7184   2F23             ; START RELATIONAL
7185   2F23 D7            push a
7186   2F24 11            mov a, b
7187   2F25 FA FD FF      lea d, [bp + -3] ; $i
7188   2F28 2A            mov b, [d]
7189   2F29 B0            cmp a, b
7190   2F2A FD 71         seq ; ==
7191   2F2C E4            pop a
7192   2F2D             ; END RELATIONAL
7193   2F2D FD A7         sand a, b ; &&
7194   2F2F E4            pop a
7195   2F30 E7            pop d
7196   2F31 FD 43         mov [d], b
7197   2F33             _for88_update:
7198   2F33 FA FD FF      lea d, [bp + -3] ; $i
7199   2F36 2A            mov b, [d]
7200   2F37 D8            push b
7201   2F38 FD 77         inc b
7202   2F3A FA FD FF      lea d, [bp + -3] ; $i
7203   2F3D FD 43         mov [d], b
7204   2F3F E5            pop b
7205   2F40 0A D7 2E      jmp _for88_cond
7206   2F43             _for88_exit:
7207   2F43             ;; test9_struct.test9_substruct.i1 = 55555; 
7208   2F43 FA D5 FF      lea d, [bp + -43] ; $test9_struct
7209   2F46 58 06 00      add d, 6
7210   2F49 58 06 00      add d, 6
7211   2F4C DA            push d
7212   2F4D 26 03 D9      mov b, $d903
7213   2F50 E7            pop d
7214   2F51 FD 43         mov [d], b
7215   2F53             ;; pass = pass && test9_struct.test9_substruct.i1 == 55555; 
7216   2F53 FA FF FF      lea d, [bp + -1] ; $pass
7217   2F56 DA            push d
7218   2F57 FA FF FF      lea d, [bp + -1] ; $pass
7219   2F5A 2A            mov b, [d]
7220   2F5B D7            push a
7221   2F5C 11            mov a, b
7222   2F5D FA D5 FF      lea d, [bp + -43] ; $test9_struct
7223   2F60 58 06 00      add d, 6
7224   2F63 58 06 00      add d, 6
7225   2F66 2A            mov b, [d]
7226   2F67             ; START RELATIONAL
7227   2F67 D7            push a
7228   2F68 11            mov a, b
7229   2F69 26 03 D9      mov b, $d903
7230   2F6C B0            cmp a, b
7231   2F6D FD 71         seq ; ==
7232   2F6F E4            pop a
7233   2F70             ; END RELATIONAL
7234   2F70 FD A7         sand a, b ; &&
7235   2F72 E4            pop a
7236   2F73 E7            pop d
7237   2F74 FD 43         mov [d], b
7238   2F76             ;; for(i = 0; i < 5; i++){ 
7239   2F76             _for89_init:
7240   2F76 FA FD FF      lea d, [bp + -3] ; $i
7241   2F79 DA            push d
7242   2F7A 26 00 00      mov b, $0
7243   2F7D E7            pop d
7244   2F7E FD 43         mov [d], b
7245   2F80             _for89_cond:
7246   2F80 FA FD FF      lea d, [bp + -3] ; $i
7247   2F83 2A            mov b, [d]
7248   2F84             ; START RELATIONAL
7249   2F84 D7            push a
7250   2F85 11            mov a, b
7251   2F86 26 05 00      mov b, $5
7252   2F89 B0            cmp a, b
7253   2F8A FD 73         slt ; <= (signed)
7254   2F8C E4            pop a
7255   2F8D             ; END RELATIONAL
7256   2F8D C0 00 00      cmp b, 0
7257   2F90 C6 F0 2F      je _for89_exit
7258   2F93             _for89_block:
7259   2F93             ;; test9_struct.test9_substruct.ia[i] = i; 
7260   2F93 FA D5 FF      lea d, [bp + -43] ; $test9_struct
7261   2F96 58 06 00      add d, 6
7262   2F99 58 08 00      add d, 8
7263   2F9C D7            push a
7264   2F9D DA            push d
7265   2F9E FA FD FF      lea d, [bp + -3] ; $i
7266   2FA1 2A            mov b, [d]
7267   2FA2 E7            pop d
7268   2FA3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7269   2FA7 E4            pop a
7270   2FA8 DA            push d
7271   2FA9 FA FD FF      lea d, [bp + -3] ; $i
7272   2FAC 2A            mov b, [d]
7273   2FAD E7            pop d
7274   2FAE FD 43         mov [d], b
7275   2FB0             ;; pass = pass && test9_struct.test9_substruct.ia[i] == i; 
7276   2FB0 FA FF FF      lea d, [bp + -1] ; $pass
7277   2FB3 DA            push d
7278   2FB4 FA FF FF      lea d, [bp + -1] ; $pass
7279   2FB7 2A            mov b, [d]
7280   2FB8 D7            push a
7281   2FB9 11            mov a, b
7282   2FBA FA D5 FF      lea d, [bp + -43] ; $test9_struct
7283   2FBD 58 06 00      add d, 6
7284   2FC0 58 08 00      add d, 8
7285   2FC3 D7            push a
7286   2FC4 DA            push d
7287   2FC5 FA FD FF      lea d, [bp + -3] ; $i
7288   2FC8 2A            mov b, [d]
7289   2FC9 E7            pop d
7290   2FCA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7291   2FCE E4            pop a
7292   2FCF 2A            mov b, [d]
7293   2FD0             ; START RELATIONAL
7294   2FD0 D7            push a
7295   2FD1 11            mov a, b
7296   2FD2 FA FD FF      lea d, [bp + -3] ; $i
7297   2FD5 2A            mov b, [d]
7298   2FD6 B0            cmp a, b
7299   2FD7 FD 71         seq ; ==
7300   2FD9 E4            pop a
7301   2FDA             ; END RELATIONAL
7302   2FDA FD A7         sand a, b ; &&
7303   2FDC E4            pop a
7304   2FDD E7            pop d
7305   2FDE FD 43         mov [d], b
7306   2FE0             _for89_update:
7307   2FE0 FA FD FF      lea d, [bp + -3] ; $i
7308   2FE3 2A            mov b, [d]
7309   2FE4 D8            push b
7310   2FE5 FD 77         inc b
7311   2FE7 FA FD FF      lea d, [bp + -3] ; $i
7312   2FEA FD 43         mov [d], b
7313   2FEC E5            pop b
7314   2FED 0A 80 2F      jmp _for89_cond
7315   2FF0             _for89_exit:
7316   2FF0             ;; return pass; 
7317   2FF0 FA FF FF      lea d, [bp + -1] ; $pass
7318   2FF3 2A            mov b, [d]
7319   2FF4 F9            leave
7320   2FF5 09            ret
7321   2FF6             ; --- END TEXT BLOCK
7322   2FF6             
7323   2FF6             ; --- BEGIN DATA BLOCK
7324   2FF6 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
7324   2FFA 45 46 47 48 
7324   2FFE 49 4A 4B 4C 
7324   3002 4D 4E 4F 50 
7324   3006 51 52 53 54 
7324   300A 55 56 57 58 
7324   300E 59 5A 61 62 
7324   3012 63 64 65 66 
7324   3016 67 68 69 6A 
7324   301A 6B 6C 6D 6E 
7324   301E 6F 70 71 72 
7324   3022 73 74 75 76 
7324   3026 77 78 79 7A 
7324   302A 30 31 32 33 
7324   302E 34 35 36 37 
7324   3032 38 39 2B 2F 
7324   3036 00 
7325   3037 F6 2F       _base64_table: .dw _base64_table_data
7326   3039             _gca1_data: 
7327   3039 30 31 32 33 .db $30,$31,$32,$33,$34,
7327   303D 34 
7328   303E             _gia1_data: 
7329   303E 00 00 01 00 .dw 0,1,2,3,4,
7329   3042 02 00 03 00 
7329   3046 04 00 
7330   3048 00 00 00 00 _gca2_data: .fill 25, 0
7330   304C 00 00 00 00 
7330   3050 00 00 00 00 
7330   3054 00 00 00 00 
7330   3058 00 00 00 00 
7330   305C 00 00 00 00 
7330   3060 00 
7331   3061 00 00 00 00 _gia2_data: .fill 50, 0
7331   3065 00 00 00 00 
7331   3069 00 00 00 00 
7331   306D 00 00 00 00 
7331   3071 00 00 00 00 
7331   3075 00 00 00 00 
7331   3079 00 00 00 00 
7331   307D 00 00 00 00 
7331   3081 00 00 00 00 
7331   3085 00 00 00 00 
7331   3089 00 00 00 00 
7331   308D 00 00 00 00 
7331   3091 00 00 
7332   3093 00 00 00 00 _test6_struct_data: .fill 18, 0
7332   3097 00 00 00 00 
7332   309B 00 00 00 00 
7332   309F 00 00 00 00 
7332   30A3 00 00 
7333   30A5 00 00 00 00 _test7_struct_data: .fill 36, 0
7333   30A9 00 00 00 00 
7333   30AD 00 00 00 00 
7333   30B1 00 00 00 00 
7333   30B5 00 00 00 00 
7333   30B9 00 00 00 00 
7333   30BD 00 00 00 00 
7333   30C1 00 00 00 00 
7333   30C5 00 00 00 00 
7334   30C9 54 65 73 74 __s0: .db "Test %d, Result: %d\n", 0
7334   30CD 20 25 64 2C 
7334   30D1 20 52 65 73 
7334   30D5 75 6C 74 3A 
7334   30D9 20 25 64 0A 
7334   30DD 00 
7335   30DE 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
7335   30E2 70 65 63 74 
7335   30E6 65 64 20 66 
7335   30EA 6F 72 6D 61 
7335   30EE 74 20 69 6E 
7335   30F2 20 70 72 69 
7335   30F6 6E 74 66 2E 
7335   30FA 00 
7336   30FB 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
7336   30FF 72 3A 20 55 
7336   3103 6E 6B 6E 6F 
7336   3107 77 6E 20 61 
7336   310B 72 67 75 6D 
7336   310F 65 6E 74 20 
7336   3113 74 79 70 65 
7336   3117 2E 0A 00 
7337   311A 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
7337   311E 1B 5B 48 00 
7338   3122             
7339   3122 24 31       _heap_top: .dw _heap
7340   3124 00          _heap: .db 0
7341   3125             ; --- END DATA BLOCK
7342   3125             
7343   3125             .end
tasm: Number of errors = 0
