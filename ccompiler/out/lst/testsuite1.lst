0001   0000             ; --- FILENAME: ctestsuite/testsuite1
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $pass 
0011   0408             ; $i 
0012   0408             ; $nbr_tests 
0013   0408 10 0A 00      mov a, $a
0014   040B 45 E9 FF      mov [bp + -23], a
0015   040E 52 18 00      sub sp, 24
0016   0411             ;; for(i = 0; i < nbr_tests; i++){ 
0017   0411             _for1_init:
0018   0411 FA EB FF      lea d, [bp + -21] ; $i
0019   0414 DA            push d
0020   0415 26 00 00      mov b, $0
0021   0418 E7            pop d
0022   0419 FD 43         mov [d], b
0023   041B             _for1_cond:
0024   041B FA EB FF      lea d, [bp + -21] ; $i
0025   041E 2A            mov b, [d]
0026   041F             ; START RELATIONAL
0027   041F D7            push a
0028   0420 11            mov a, b
0029   0421 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0030   0424 2A            mov b, [d]
0031   0425 B0            cmp a, b
0032   0426 FD 73         slt ; <= (signed)
0033   0428 E4            pop a
0034   0429             ; END RELATIONAL
0035   0429 C0 00 00      cmp b, 0
0036   042C C6 55 04      je _for1_exit
0037   042F             _for1_block:
0038   042F             ;; pass[i] = -1; 
0039   042F FA ED FF      lea d, [bp + -19] ; $pass
0040   0432 D7            push a
0041   0433 DA            push d
0042   0434 FA EB FF      lea d, [bp + -21] ; $i
0043   0437 2A            mov b, [d]
0044   0438 E7            pop d
0045   0439 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0046   043D E4            pop a
0047   043E DA            push d
0048   043F 26 FF FF      mov b, $ffff
0049   0442 E7            pop d
0050   0443 FD 43         mov [d], b
0051   0445             _for1_update:
0052   0445 FA EB FF      lea d, [bp + -21] ; $i
0053   0448 2A            mov b, [d]
0054   0449 D8            push b
0055   044A FD 77         inc b
0056   044C FA EB FF      lea d, [bp + -21] ; $i
0057   044F FD 43         mov [d], b
0058   0451 E5            pop b
0059   0452 0A 1B 04      jmp _for1_cond
0060   0455             _for1_exit:
0061   0455             ;; pass[0] = test0(); 
0062   0455 FA ED FF      lea d, [bp + -19] ; $pass
0063   0458 D7            push a
0064   0459 DA            push d
0065   045A 26 00 00      mov b, $0
0066   045D E7            pop d
0067   045E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0068   0462 E4            pop a
0069   0463 DA            push d
0070   0464 07 94 1E      call test0
0071   0467 E7            pop d
0072   0468 FD 43         mov [d], b
0073   046A             ;; pass[1] = test1(); 
0074   046A FA ED FF      lea d, [bp + -19] ; $pass
0075   046D D7            push a
0076   046E DA            push d
0077   046F 26 01 00      mov b, $1
0078   0472 E7            pop d
0079   0473 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0080   0477 E4            pop a
0081   0478 DA            push d
0082   0479 07 98 1F      call test1
0083   047C E7            pop d
0084   047D FD 43         mov [d], b
0085   047F             ;; pass[2] = test2(); 
0086   047F FA ED FF      lea d, [bp + -19] ; $pass
0087   0482 D7            push a
0088   0483 DA            push d
0089   0484 26 02 00      mov b, $2
0090   0487 E7            pop d
0091   0488 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0092   048C E4            pop a
0093   048D DA            push d
0094   048E 07 3E 21      call test2
0095   0491 E7            pop d
0096   0492 FD 43         mov [d], b
0097   0494             ;; pass[3] = test3(); 
0098   0494 FA ED FF      lea d, [bp + -19] ; $pass
0099   0497 D7            push a
0100   0498 DA            push d
0101   0499 26 03 00      mov b, $3
0102   049C E7            pop d
0103   049D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0104   04A1 E4            pop a
0105   04A2 DA            push d
0106   04A3 07 62 22      call test3
0107   04A6 E7            pop d
0108   04A7 FD 43         mov [d], b
0109   04A9             ;; pass[4] = test4(); 
0110   04A9 FA ED FF      lea d, [bp + -19] ; $pass
0111   04AC D7            push a
0112   04AD DA            push d
0113   04AE 26 04 00      mov b, $4
0114   04B1 E7            pop d
0115   04B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0116   04B6 E4            pop a
0117   04B7 DA            push d
0118   04B8 07 08 24      call test4
0119   04BB E7            pop d
0120   04BC FD 43         mov [d], b
0121   04BE             ;; pass[5] = test5(); 
0122   04BE FA ED FF      lea d, [bp + -19] ; $pass
0123   04C1 D7            push a
0124   04C2 DA            push d
0125   04C3 26 05 00      mov b, $5
0126   04C6 E7            pop d
0127   04C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0128   04CB E4            pop a
0129   04CC DA            push d
0130   04CD 07 60 27      call test5
0131   04D0 E7            pop d
0132   04D1 FD 43         mov [d], b
0133   04D3             ;; pass[6] = test6(); 
0134   04D3 FA ED FF      lea d, [bp + -19] ; $pass
0135   04D6 D7            push a
0136   04D7 DA            push d
0137   04D8 26 06 00      mov b, $6
0138   04DB E7            pop d
0139   04DC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0140   04E0 E4            pop a
0141   04E1 DA            push d
0142   04E2 07 44 28      call test6
0143   04E5 E7            pop d
0144   04E6 FD 43         mov [d], b
0145   04E8             ;; pass[7] = test7(); 
0146   04E8 FA ED FF      lea d, [bp + -19] ; $pass
0147   04EB D7            push a
0148   04EC DA            push d
0149   04ED 26 07 00      mov b, $7
0150   04F0 E7            pop d
0151   04F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0152   04F5 E4            pop a
0153   04F6 DA            push d
0154   04F7 07 96 29      call test7
0155   04FA E7            pop d
0156   04FB FD 43         mov [d], b
0157   04FD             ;; pass[8] = test8(); 
0158   04FD FA ED FF      lea d, [bp + -19] ; $pass
0159   0500 D7            push a
0160   0501 DA            push d
0161   0502 26 08 00      mov b, $8
0162   0505 E7            pop d
0163   0506 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0164   050A E4            pop a
0165   050B DA            push d
0166   050C 07 00 2B      call test8
0167   050F E7            pop d
0168   0510 FD 43         mov [d], b
0169   0512             ;; pass[9] = test9(); 
0170   0512 FA ED FF      lea d, [bp + -19] ; $pass
0171   0515 D7            push a
0172   0516 DA            push d
0173   0517 26 09 00      mov b, $9
0174   051A E7            pop d
0175   051B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0176   051F E4            pop a
0177   0520 DA            push d
0178   0521 07 52 2C      call test9
0179   0524 E7            pop d
0180   0525 FD 43         mov [d], b
0181   0527             ;; for(i = 0; i < nbr_tests; i++) 
0182   0527             _for2_init:
0183   0527 FA EB FF      lea d, [bp + -21] ; $i
0184   052A DA            push d
0185   052B 26 00 00      mov b, $0
0186   052E E7            pop d
0187   052F FD 43         mov [d], b
0188   0531             _for2_cond:
0189   0531 FA EB FF      lea d, [bp + -21] ; $i
0190   0534 2A            mov b, [d]
0191   0535             ; START RELATIONAL
0192   0535 D7            push a
0193   0536 11            mov a, b
0194   0537 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0195   053A 2A            mov b, [d]
0196   053B B0            cmp a, b
0197   053C FD 73         slt ; <= (signed)
0198   053E E4            pop a
0199   053F             ; END RELATIONAL
0200   053F C0 00 00      cmp b, 0
0201   0542 C6 7B 05      je _for2_exit
0202   0545             _for2_block:
0203   0545             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0204   0545 FA ED FF      lea d, [bp + -19] ; $pass
0205   0548 D7            push a
0206   0549 DA            push d
0207   054A FA EB FF      lea d, [bp + -21] ; $i
0208   054D 2A            mov b, [d]
0209   054E E7            pop d
0210   054F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0211   0553 E4            pop a
0212   0554 2A            mov b, [d]
0213   0555 FD AB         swp b
0214   0557 D8            push b
0215   0558 FA EB FF      lea d, [bp + -21] ; $i
0216   055B 2A            mov b, [d]
0217   055C FD AB         swp b
0218   055E D8            push b
0219   055F 26 8F 2E      mov b, __s0 ; "Test %d, Result: %d\n"
0220   0562 FD AB         swp b
0221   0564 D8            push b
0222   0565 07 1F 12      call printf
0223   0568 51 06 00      add sp, 6
0224   056B             _for2_update:
0225   056B FA EB FF      lea d, [bp + -21] ; $i
0226   056E 2A            mov b, [d]
0227   056F D8            push b
0228   0570 FD 77         inc b
0229   0572 FA EB FF      lea d, [bp + -21] ; $i
0230   0575 FD 43         mov [d], b
0231   0577 E5            pop b
0232   0578 0A 31 05      jmp _for2_cond
0233   057B             _for2_exit:
0234   057B 05 0B         syscall sys_terminate_proc
0235   057D             
0236   057D             strcpy:
0237   057D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0238   0580             ; $psrc 
0239   0580             ; $pdest 
0240   0580 52 04 00      sub sp, 4
0241   0583             ;; psrc = src; 
0242   0583 FA FF FF      lea d, [bp + -1] ; $psrc
0243   0586 DA            push d
0244   0587 FA 07 00      lea d, [bp + 7] ; $src
0245   058A 2A            mov b, [d]
0246   058B E7            pop d
0247   058C FD 43         mov [d], b
0248   058E             ;; pdest = dest; 
0249   058E FA FD FF      lea d, [bp + -3] ; $pdest
0250   0591 DA            push d
0251   0592 FA 05 00      lea d, [bp + 5] ; $dest
0252   0595 2A            mov b, [d]
0253   0596 E7            pop d
0254   0597 FD 43         mov [d], b
0255   0599             ;; while(*psrc) *pdest++ = *psrc++; 
0256   0599             _while3_cond:
0257   0599 FA FF FF      lea d, [bp + -1] ; $psrc
0258   059C 2A            mov b, [d]
0259   059D 74            mov d, b
0260   059E 32            mov bl, [d]
0261   059F A7 00         mov bh, 0
0262   05A1 C0 00 00      cmp b, 0
0263   05A4 C6 CC 05      je _while3_exit
0264   05A7             _while3_block:
0265   05A7             ;; *pdest++ = *psrc++; 
0266   05A7 FA FD FF      lea d, [bp + -3] ; $pdest
0267   05AA 2A            mov b, [d]
0268   05AB D8            push b
0269   05AC FD 77         inc b
0270   05AE FA FD FF      lea d, [bp + -3] ; $pdest
0271   05B1 FD 43         mov [d], b
0272   05B3 E5            pop b
0273   05B4 D8            push b
0274   05B5 FA FF FF      lea d, [bp + -1] ; $psrc
0275   05B8 2A            mov b, [d]
0276   05B9 D8            push b
0277   05BA FD 77         inc b
0278   05BC FA FF FF      lea d, [bp + -1] ; $psrc
0279   05BF FD 43         mov [d], b
0280   05C1 E5            pop b
0281   05C2 74            mov d, b
0282   05C3 32            mov bl, [d]
0283   05C4 A7 00         mov bh, 0
0284   05C6 E7            pop d
0285   05C7 FD 3E         mov [d], bl
0286   05C9 0A 99 05      jmp _while3_cond
0287   05CC             _while3_exit:
0288   05CC             ;; *pdest = '\0'; 
0289   05CC FA FD FF      lea d, [bp + -3] ; $pdest
0290   05CF 2A            mov b, [d]
0291   05D0 D8            push b
0292   05D1 26 00 00      mov b, $0
0293   05D4 E7            pop d
0294   05D5 FD 3E         mov [d], bl
0295   05D7 F9            leave
0296   05D8 09            ret
0297   05D9             
0298   05D9             strcmp:
0299   05D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0300   05DC             ;; while (*s1 && (*s1 == *s2)) { 
0301   05DC             _while4_cond:
0302   05DC FA 05 00      lea d, [bp + 5] ; $s1
0303   05DF 2A            mov b, [d]
0304   05E0 74            mov d, b
0305   05E1 32            mov bl, [d]
0306   05E2 A7 00         mov bh, 0
0307   05E4 D7            push a
0308   05E5 11            mov a, b
0309   05E6 FA 05 00      lea d, [bp + 5] ; $s1
0310   05E9 2A            mov b, [d]
0311   05EA 74            mov d, b
0312   05EB 32            mov bl, [d]
0313   05EC A7 00         mov bh, 0
0314   05EE             ; START RELATIONAL
0315   05EE D7            push a
0316   05EF 11            mov a, b
0317   05F0 FA 07 00      lea d, [bp + 7] ; $s2
0318   05F3 2A            mov b, [d]
0319   05F4 74            mov d, b
0320   05F5 32            mov bl, [d]
0321   05F6 A7 00         mov bh, 0
0322   05F8 B0            cmp a, b
0323   05F9 FD 71         seq ; ==
0324   05FB E4            pop a
0325   05FC             ; END RELATIONAL
0326   05FC FD A7         sand a, b ; &&
0327   05FE E4            pop a
0328   05FF C0 00 00      cmp b, 0
0329   0602 C6 22 06      je _while4_exit
0330   0605             _while4_block:
0331   0605             ;; s1++; 
0332   0605 FA 05 00      lea d, [bp + 5] ; $s1
0333   0608 2A            mov b, [d]
0334   0609 D8            push b
0335   060A FD 77         inc b
0336   060C FA 05 00      lea d, [bp + 5] ; $s1
0337   060F FD 43         mov [d], b
0338   0611 E5            pop b
0339   0612             ;; s2++; 
0340   0612 FA 07 00      lea d, [bp + 7] ; $s2
0341   0615 2A            mov b, [d]
0342   0616 D8            push b
0343   0617 FD 77         inc b
0344   0619 FA 07 00      lea d, [bp + 7] ; $s2
0345   061C FD 43         mov [d], b
0346   061E E5            pop b
0347   061F 0A DC 05      jmp _while4_cond
0348   0622             _while4_exit:
0349   0622             ;; return *s1 - *s2; 
0350   0622 FA 05 00      lea d, [bp + 5] ; $s1
0351   0625 2A            mov b, [d]
0352   0626 74            mov d, b
0353   0627 32            mov bl, [d]
0354   0628 A7 00         mov bh, 0
0355   062A             ; START TERMS
0356   062A D7            push a
0357   062B 11            mov a, b
0358   062C FA 07 00      lea d, [bp + 7] ; $s2
0359   062F 2A            mov b, [d]
0360   0630 74            mov d, b
0361   0631 32            mov bl, [d]
0362   0632 A7 00         mov bh, 0
0363   0634 60            sub a, b
0364   0635 27            mov b, a
0365   0636 E4            pop a
0366   0637             ; END TERMS
0367   0637 F9            leave
0368   0638 09            ret
0369   0639             
0370   0639             strcat:
0371   0639 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0372   063C             ; $dest_len 
0373   063C             ; $i 
0374   063C 52 04 00      sub sp, 4
0375   063F             ;; dest_len = strlen(dest); 
0376   063F FA FF FF      lea d, [bp + -1] ; $dest_len
0377   0642 DA            push d
0378   0643 FA 05 00      lea d, [bp + 5] ; $dest
0379   0646 2A            mov b, [d]
0380   0647 FD AB         swp b
0381   0649 D8            push b
0382   064A 07 EC 06      call strlen
0383   064D 51 02 00      add sp, 2
0384   0650 E7            pop d
0385   0651 FD 43         mov [d], b
0386   0653             ;; for (i = 0; src[i] != 0; i=i+1) { 
0387   0653             _for5_init:
0388   0653 FA FD FF      lea d, [bp + -3] ; $i
0389   0656 DA            push d
0390   0657 26 00 00      mov b, $0
0391   065A E7            pop d
0392   065B FD 43         mov [d], b
0393   065D             _for5_cond:
0394   065D FA 07 00      lea d, [bp + 7] ; $src
0395   0660 FD 2A         mov d, [d]
0396   0662 D7            push a
0397   0663 DA            push d
0398   0664 FA FD FF      lea d, [bp + -3] ; $i
0399   0667 2A            mov b, [d]
0400   0668 E7            pop d
0401   0669 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0402   066D E4            pop a
0403   066E 32            mov bl, [d]
0404   066F A7 00         mov bh, 0
0405   0671             ; START RELATIONAL
0406   0671 D7            push a
0407   0672 11            mov a, b
0408   0673 26 00 00      mov b, $0
0409   0676 B0            cmp a, b
0410   0677 FD 72         sneq ; !=
0411   0679 E4            pop a
0412   067A             ; END RELATIONAL
0413   067A C0 00 00      cmp b, 0
0414   067D C6 C6 06      je _for5_exit
0415   0680             _for5_block:
0416   0680             ;; dest[dest_len + i] = src[i]; 
0417   0680 FA 05 00      lea d, [bp + 5] ; $dest
0418   0683 FD 2A         mov d, [d]
0419   0685 D7            push a
0420   0686 DA            push d
0421   0687 FA FF FF      lea d, [bp + -1] ; $dest_len
0422   068A 2A            mov b, [d]
0423   068B             ; START TERMS
0424   068B D7            push a
0425   068C 11            mov a, b
0426   068D FA FD FF      lea d, [bp + -3] ; $i
0427   0690 2A            mov b, [d]
0428   0691 56            add b, a
0429   0692 E4            pop a
0430   0693             ; END TERMS
0431   0693 E7            pop d
0432   0694 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0433   0698 E4            pop a
0434   0699 DA            push d
0435   069A FA 07 00      lea d, [bp + 7] ; $src
0436   069D FD 2A         mov d, [d]
0437   069F D7            push a
0438   06A0 DA            push d
0439   06A1 FA FD FF      lea d, [bp + -3] ; $i
0440   06A4 2A            mov b, [d]
0441   06A5 E7            pop d
0442   06A6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0443   06AA E4            pop a
0444   06AB 32            mov bl, [d]
0445   06AC A7 00         mov bh, 0
0446   06AE E7            pop d
0447   06AF FD 3E         mov [d], bl
0448   06B1             _for5_update:
0449   06B1 FA FD FF      lea d, [bp + -3] ; $i
0450   06B4 DA            push d
0451   06B5 FA FD FF      lea d, [bp + -3] ; $i
0452   06B8 2A            mov b, [d]
0453   06B9             ; START TERMS
0454   06B9 D7            push a
0455   06BA 11            mov a, b
0456   06BB 26 01 00      mov b, $1
0457   06BE 56            add b, a
0458   06BF E4            pop a
0459   06C0             ; END TERMS
0460   06C0 E7            pop d
0461   06C1 FD 43         mov [d], b
0462   06C3 0A 5D 06      jmp _for5_cond
0463   06C6             _for5_exit:
0464   06C6             ;; dest[dest_len + i] = 0; 
0465   06C6 FA 05 00      lea d, [bp + 5] ; $dest
0466   06C9 FD 2A         mov d, [d]
0467   06CB D7            push a
0468   06CC DA            push d
0469   06CD FA FF FF      lea d, [bp + -1] ; $dest_len
0470   06D0 2A            mov b, [d]
0471   06D1             ; START TERMS
0472   06D1 D7            push a
0473   06D2 11            mov a, b
0474   06D3 FA FD FF      lea d, [bp + -3] ; $i
0475   06D6 2A            mov b, [d]
0476   06D7 56            add b, a
0477   06D8 E4            pop a
0478   06D9             ; END TERMS
0479   06D9 E7            pop d
0480   06DA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0481   06DE E4            pop a
0482   06DF DA            push d
0483   06E0 26 00 00      mov b, $0
0484   06E3 E7            pop d
0485   06E4 FD 3E         mov [d], bl
0486   06E6             ;; return dest; 
0487   06E6 FA 05 00      lea d, [bp + 5] ; $dest
0488   06E9 2A            mov b, [d]
0489   06EA F9            leave
0490   06EB 09            ret
0491   06EC             
0492   06EC             strlen:
0493   06EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0494   06EF             ; $length 
0495   06EF 52 02 00      sub sp, 2
0496   06F2             ;; length = 0; 
0497   06F2 FA FF FF      lea d, [bp + -1] ; $length
0498   06F5 DA            push d
0499   06F6 26 00 00      mov b, $0
0500   06F9 E7            pop d
0501   06FA FD 43         mov [d], b
0502   06FC             ;; while (str[length] != 0) { 
0503   06FC             _while6_cond:
0504   06FC FA 05 00      lea d, [bp + 5] ; $str
0505   06FF FD 2A         mov d, [d]
0506   0701 D7            push a
0507   0702 DA            push d
0508   0703 FA FF FF      lea d, [bp + -1] ; $length
0509   0706 2A            mov b, [d]
0510   0707 E7            pop d
0511   0708 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0512   070C E4            pop a
0513   070D 32            mov bl, [d]
0514   070E A7 00         mov bh, 0
0515   0710             ; START RELATIONAL
0516   0710 D7            push a
0517   0711 11            mov a, b
0518   0712 26 00 00      mov b, $0
0519   0715 B0            cmp a, b
0520   0716 FD 72         sneq ; !=
0521   0718 E4            pop a
0522   0719             ; END RELATIONAL
0523   0719 C0 00 00      cmp b, 0
0524   071C C6 2F 07      je _while6_exit
0525   071F             _while6_block:
0526   071F             ;; length++; 
0527   071F FA FF FF      lea d, [bp + -1] ; $length
0528   0722 2A            mov b, [d]
0529   0723 D8            push b
0530   0724 FD 77         inc b
0531   0726 FA FF FF      lea d, [bp + -1] ; $length
0532   0729 FD 43         mov [d], b
0533   072B E5            pop b
0534   072C 0A FC 06      jmp _while6_cond
0535   072F             _while6_exit:
0536   072F             ;; return length; 
0537   072F FA FF FF      lea d, [bp + -1] ; $length
0538   0732 2A            mov b, [d]
0539   0733 F9            leave
0540   0734 09            ret
0541   0735             
0542   0735             exit:
0543   0735 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0544   0738             
0545   0738             ; --- BEGIN INLINE ASM BLOCK
0546   0738 05 0B         syscall sys_terminate_proc
0547   073A             ; --- END INLINE ASM BLOCK
0548   073A             
0549   073A F9            leave
0550   073B 09            ret
0551   073C             
0552   073C             atoi:
0553   073C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0554   073F             ; $result 
0555   073F 10 00 00      mov a, $0
0556   0742 45 FF FF      mov [bp + -1], a
0557   0745             ; $sign 
0558   0745 10 01 00      mov a, $1
0559   0748 45 FD FF      mov [bp + -3], a
0560   074B 52 04 00      sub sp, 4
0561   074E             ;; while (*str == ' ') str++; 
0562   074E             _while7_cond:
0563   074E FA 05 00      lea d, [bp + 5] ; $str
0564   0751 2A            mov b, [d]
0565   0752 74            mov d, b
0566   0753 32            mov bl, [d]
0567   0754 A7 00         mov bh, 0
0568   0756             ; START RELATIONAL
0569   0756 D7            push a
0570   0757 11            mov a, b
0571   0758 26 20 00      mov b, $20
0572   075B B0            cmp a, b
0573   075C FD 71         seq ; ==
0574   075E E4            pop a
0575   075F             ; END RELATIONAL
0576   075F C0 00 00      cmp b, 0
0577   0762 C6 75 07      je _while7_exit
0578   0765             _while7_block:
0579   0765             ;; str++; 
0580   0765 FA 05 00      lea d, [bp + 5] ; $str
0581   0768 2A            mov b, [d]
0582   0769 D8            push b
0583   076A FD 77         inc b
0584   076C FA 05 00      lea d, [bp + 5] ; $str
0585   076F FD 43         mov [d], b
0586   0771 E5            pop b
0587   0772 0A 4E 07      jmp _while7_cond
0588   0775             _while7_exit:
0589   0775             ;; if (*str == '-' || *str == '+') { 
0590   0775             _if8_cond:
0591   0775 FA 05 00      lea d, [bp + 5] ; $str
0592   0778 2A            mov b, [d]
0593   0779 74            mov d, b
0594   077A 32            mov bl, [d]
0595   077B A7 00         mov bh, 0
0596   077D             ; START RELATIONAL
0597   077D D7            push a
0598   077E 11            mov a, b
0599   077F 26 2D 00      mov b, $2d
0600   0782 B0            cmp a, b
0601   0783 FD 71         seq ; ==
0602   0785 E4            pop a
0603   0786             ; END RELATIONAL
0604   0786 D7            push a
0605   0787 11            mov a, b
0606   0788 FA 05 00      lea d, [bp + 5] ; $str
0607   078B 2A            mov b, [d]
0608   078C 74            mov d, b
0609   078D 32            mov bl, [d]
0610   078E A7 00         mov bh, 0
0611   0790             ; START RELATIONAL
0612   0790 D7            push a
0613   0791 11            mov a, b
0614   0792 26 2B 00      mov b, $2b
0615   0795 B0            cmp a, b
0616   0796 FD 71         seq ; ==
0617   0798 E4            pop a
0618   0799             ; END RELATIONAL
0619   0799 FD A8         sor a, b ; ||
0620   079B E4            pop a
0621   079C C0 00 00      cmp b, 0
0622   079F C6 D6 07      je _if8_exit
0623   07A2             _if8_true:
0624   07A2             ;; if (*str == '-') sign = -1; 
0625   07A2             _if9_cond:
0626   07A2 FA 05 00      lea d, [bp + 5] ; $str
0627   07A5 2A            mov b, [d]
0628   07A6 74            mov d, b
0629   07A7 32            mov bl, [d]
0630   07A8 A7 00         mov bh, 0
0631   07AA             ; START RELATIONAL
0632   07AA D7            push a
0633   07AB 11            mov a, b
0634   07AC 26 2D 00      mov b, $2d
0635   07AF B0            cmp a, b
0636   07B0 FD 71         seq ; ==
0637   07B2 E4            pop a
0638   07B3             ; END RELATIONAL
0639   07B3 C0 00 00      cmp b, 0
0640   07B6 C6 C6 07      je _if9_exit
0641   07B9             _if9_true:
0642   07B9             ;; sign = -1; 
0643   07B9 FA FD FF      lea d, [bp + -3] ; $sign
0644   07BC DA            push d
0645   07BD 26 FF FF      mov b, $ffff
0646   07C0 E7            pop d
0647   07C1 FD 43         mov [d], b
0648   07C3 0A C6 07      jmp _if9_exit
0649   07C6             _if9_exit:
0650   07C6             ;; str++; 
0651   07C6 FA 05 00      lea d, [bp + 5] ; $str
0652   07C9 2A            mov b, [d]
0653   07CA D8            push b
0654   07CB FD 77         inc b
0655   07CD FA 05 00      lea d, [bp + 5] ; $str
0656   07D0 FD 43         mov [d], b
0657   07D2 E5            pop b
0658   07D3 0A D6 07      jmp _if8_exit
0659   07D6             _if8_exit:
0660   07D6             ;; while (*str >= '0' && *str <= '9') { 
0661   07D6             _while10_cond:
0662   07D6 FA 05 00      lea d, [bp + 5] ; $str
0663   07D9 2A            mov b, [d]
0664   07DA 74            mov d, b
0665   07DB 32            mov bl, [d]
0666   07DC A7 00         mov bh, 0
0667   07DE             ; START RELATIONAL
0668   07DE D7            push a
0669   07DF 11            mov a, b
0670   07E0 26 30 00      mov b, $30
0671   07E3 B0            cmp a, b
0672   07E4 FD 82         sgeu ; >= (unsigned)
0673   07E6 E4            pop a
0674   07E7             ; END RELATIONAL
0675   07E7 D7            push a
0676   07E8 11            mov a, b
0677   07E9 FA 05 00      lea d, [bp + 5] ; $str
0678   07EC 2A            mov b, [d]
0679   07ED 74            mov d, b
0680   07EE 32            mov bl, [d]
0681   07EF A7 00         mov bh, 0
0682   07F1             ; START RELATIONAL
0683   07F1 D7            push a
0684   07F2 11            mov a, b
0685   07F3 26 39 00      mov b, $39
0686   07F6 B0            cmp a, b
0687   07F7 FD 76         sleu ; <= (unsigned)
0688   07F9 E4            pop a
0689   07FA             ; END RELATIONAL
0690   07FA FD A7         sand a, b ; &&
0691   07FC E4            pop a
0692   07FD C0 00 00      cmp b, 0
0693   0800 C6 3B 08      je _while10_exit
0694   0803             _while10_block:
0695   0803             ;; result = result * 10 + (*str - '0'); 
0696   0803 FA FF FF      lea d, [bp + -1] ; $result
0697   0806 DA            push d
0698   0807 FA FF FF      lea d, [bp + -1] ; $result
0699   080A 2A            mov b, [d]
0700   080B             ; START FACTORS
0701   080B D7            push a
0702   080C 11            mov a, b
0703   080D 26 0A 00      mov b, $a
0704   0810 AC            mul a, b ; *
0705   0811 11            mov a, b
0706   0812 27            mov b, a
0707   0813 E4            pop a
0708   0814             ; END FACTORS
0709   0814             ; START TERMS
0710   0814 D7            push a
0711   0815 11            mov a, b
0712   0816 FA 05 00      lea d, [bp + 5] ; $str
0713   0819 2A            mov b, [d]
0714   081A 74            mov d, b
0715   081B 32            mov bl, [d]
0716   081C A7 00         mov bh, 0
0717   081E             ; START TERMS
0718   081E D7            push a
0719   081F 11            mov a, b
0720   0820 26 30 00      mov b, $30
0721   0823 60            sub a, b
0722   0824 27            mov b, a
0723   0825 E4            pop a
0724   0826             ; END TERMS
0725   0826 56            add b, a
0726   0827 E4            pop a
0727   0828             ; END TERMS
0728   0828 E7            pop d
0729   0829 FD 43         mov [d], b
0730   082B             ;; str++; 
0731   082B FA 05 00      lea d, [bp + 5] ; $str
0732   082E 2A            mov b, [d]
0733   082F D8            push b
0734   0830 FD 77         inc b
0735   0832 FA 05 00      lea d, [bp + 5] ; $str
0736   0835 FD 43         mov [d], b
0737   0837 E5            pop b
0738   0838 0A D6 07      jmp _while10_cond
0739   083B             _while10_exit:
0740   083B             ;; return sign * result; 
0741   083B FA FD FF      lea d, [bp + -3] ; $sign
0742   083E 2A            mov b, [d]
0743   083F             ; START FACTORS
0744   083F D7            push a
0745   0840 11            mov a, b
0746   0841 FA FF FF      lea d, [bp + -1] ; $result
0747   0844 2A            mov b, [d]
0748   0845 AC            mul a, b ; *
0749   0846 11            mov a, b
0750   0847 27            mov b, a
0751   0848 E4            pop a
0752   0849             ; END FACTORS
0753   0849 F9            leave
0754   084A 09            ret
0755   084B             
0756   084B             rand:
0757   084B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0758   084E             ; $sec 
0759   084E 52 02 00      sub sp, 2
0760   0851             
0761   0851             ; --- BEGIN INLINE ASM BLOCK
0762   0851 19 00         mov al, 0
0763   0853 05 01         syscall sys_rtc					
0764   0855 1A            mov al, ah
0765   0856 FA FF FF      lea d, [bp + -1] ; $sec
0766   0859 1E            mov al, [d]
0767   085A 22 00         mov ah, 0
0768   085C             ; --- END INLINE ASM BLOCK
0769   085C             
0770   085C             ;; return sec; 
0771   085C FA FF FF      lea d, [bp + -1] ; $sec
0772   085F 2A            mov b, [d]
0773   0860 F9            leave
0774   0861 09            ret
0775   0862             
0776   0862             srand:
0777   0862 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0778   0865 F9            leave
0779   0866 09            ret
0780   0867             
0781   0867             malloc:
0782   0867 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0783   086A F9            leave
0784   086B 09            ret
0785   086C             
0786   086C             calloc:
0787   086C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0788   086F F9            leave
0789   0870 09            ret
0790   0871             
0791   0871             realloc:
0792   0871 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0793   0874 F9            leave
0794   0875 09            ret
0795   0876             
0796   0876             alloc:
0797   0876 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0798   0879             ;; heap_top = heap_top + bytes; 
0799   0879 3B E8 2E      mov d, _heap_top ; $heap_top
0800   087C DA            push d
0801   087D 3B E8 2E      mov d, _heap_top ; $heap_top
0802   0880 2A            mov b, [d]
0803   0881             ; START TERMS
0804   0881 D7            push a
0805   0882 11            mov a, b
0806   0883 FA 05 00      lea d, [bp + 5] ; $bytes
0807   0886 2A            mov b, [d]
0808   0887 56            add b, a
0809   0888 E4            pop a
0810   0889             ; END TERMS
0811   0889 E7            pop d
0812   088A FD 43         mov [d], b
0813   088C             ;; return heap_top - bytes; 
0814   088C 3B E8 2E      mov d, _heap_top ; $heap_top
0815   088F 2A            mov b, [d]
0816   0890             ; START TERMS
0817   0890 D7            push a
0818   0891 11            mov a, b
0819   0892 FA 05 00      lea d, [bp + 5] ; $bytes
0820   0895 2A            mov b, [d]
0821   0896 60            sub a, b
0822   0897 27            mov b, a
0823   0898 E4            pop a
0824   0899             ; END TERMS
0825   0899 F9            leave
0826   089A 09            ret
0827   089B             
0828   089B             free:
0829   089B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0830   089E             ;; return heap_top = heap_top - bytes; 
0831   089E 3B E8 2E      mov d, _heap_top ; $heap_top
0832   08A1 DA            push d
0833   08A2 3B E8 2E      mov d, _heap_top ; $heap_top
0834   08A5 2A            mov b, [d]
0835   08A6             ; START TERMS
0836   08A6 D7            push a
0837   08A7 11            mov a, b
0838   08A8 FA 05 00      lea d, [bp + 5] ; $bytes
0839   08AB 2A            mov b, [d]
0840   08AC 60            sub a, b
0841   08AD 27            mov b, a
0842   08AE E4            pop a
0843   08AF             ; END TERMS
0844   08AF E7            pop d
0845   08B0 FD 43         mov [d], b
0846   08B2 F9            leave
0847   08B3 09            ret
0848   08B4             
0849   08B4             base64_encode:
0850   08B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0851   08B7             ; $i 
0852   08B7 10 00 00      mov a, $0
0853   08BA 45 FF FF      mov [bp + -1], a
0854   08BD             ; $j 
0855   08BD 10 00 00      mov a, $0
0856   08C0 45 FD FF      mov [bp + -3], a
0857   08C3             ; $k 
0858   08C3             ; $input_len 
0859   08C3             ; $input_buffer 
0860   08C3             ; $output_buffer 
0861   08C3 52 0F 00      sub sp, 15
0862   08C6             ;; input_len = strlen(input); 
0863   08C6 FA F9 FF      lea d, [bp + -7] ; $input_len
0864   08C9 DA            push d
0865   08CA FA 05 00      lea d, [bp + 5] ; $input
0866   08CD 2A            mov b, [d]
0867   08CE FD AB         swp b
0868   08D0 D8            push b
0869   08D1 07 EC 06      call strlen
0870   08D4 51 02 00      add sp, 2
0871   08D7 E7            pop d
0872   08D8 FD 43         mov [d], b
0873   08DA             ;; while (input_len--) { 
0874   08DA             _while11_cond:
0875   08DA FA F9 FF      lea d, [bp + -7] ; $input_len
0876   08DD 2A            mov b, [d]
0877   08DE D8            push b
0878   08DF FD 7D         dec b
0879   08E1 FA F9 FF      lea d, [bp + -7] ; $input_len
0880   08E4 FD 43         mov [d], b
0881   08E6 E5            pop b
0882   08E7 C0 00 00      cmp b, 0
0883   08EA C6 9E 0A      je _while11_exit
0884   08ED             _while11_block:
0885   08ED             ;; input_buffer[i++] = *(input++); 
0886   08ED FA F6 FF      lea d, [bp + -10] ; $input_buffer
0887   08F0 D7            push a
0888   08F1 DA            push d
0889   08F2 FA FF FF      lea d, [bp + -1] ; $i
0890   08F5 2A            mov b, [d]
0891   08F6 D8            push b
0892   08F7 FD 77         inc b
0893   08F9 FA FF FF      lea d, [bp + -1] ; $i
0894   08FC FD 43         mov [d], b
0895   08FE E5            pop b
0896   08FF E7            pop d
0897   0900 5A            add d, b
0898   0901 E4            pop a
0899   0902 DA            push d
0900   0903 FA 05 00      lea d, [bp + 5] ; $input
0901   0906 2A            mov b, [d]
0902   0907 D8            push b
0903   0908 FD 77         inc b
0904   090A FA 05 00      lea d, [bp + 5] ; $input
0905   090D FD 43         mov [d], b
0906   090F E5            pop b
0907   0910 74            mov d, b
0908   0911 32            mov bl, [d]
0909   0912 A7 00         mov bh, 0
0910   0914 E7            pop d
0911   0915 FD 3E         mov [d], bl
0912   0917             ;; if (i == 3) { 
0913   0917             _if12_cond:
0914   0917 FA FF FF      lea d, [bp + -1] ; $i
0915   091A 2A            mov b, [d]
0916   091B             ; START RELATIONAL
0917   091B D7            push a
0918   091C 11            mov a, b
0919   091D 26 03 00      mov b, $3
0920   0920 B0            cmp a, b
0921   0921 FD 71         seq ; ==
0922   0923 E4            pop a
0923   0924             ; END RELATIONAL
0924   0924 C0 00 00      cmp b, 0
0925   0927 C6 9B 0A      je _if12_exit
0926   092A             _if12_true:
0927   092A             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0928   092A FA F2 FF      lea d, [bp + -14] ; $output_buffer
0929   092D D7            push a
0930   092E DA            push d
0931   092F 26 00 00      mov b, $0
0932   0932 E7            pop d
0933   0933 5A            add d, b
0934   0934 E4            pop a
0935   0935 DA            push d
0936   0936 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0937   0939 D7            push a
0938   093A DA            push d
0939   093B 26 00 00      mov b, $0
0940   093E E7            pop d
0941   093F 5A            add d, b
0942   0940 E4            pop a
0943   0941 32            mov bl, [d]
0944   0942 A7 00         mov bh, 0
0945   0944 D7            push a
0946   0945 11            mov a, b
0947   0946 26 FC 00      mov b, $fc
0948   0949 86            and a, b ; &
0949   094A 27            mov b, a
0950   094B E4            pop a
0951   094C             ; START SHIFT
0952   094C D7            push a
0953   094D 11            mov a, b
0954   094E 26 02 00      mov b, $2
0955   0951 FD 39         mov c, b
0956   0953 A5            ashr a, cl
0957   0954 27            mov b, a
0958   0955 E4            pop a
0959   0956             ; END SHIFT
0960   0956 E7            pop d
0961   0957 FD 3E         mov [d], bl
0962   0959             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0963   0959 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0964   095C D7            push a
0965   095D DA            push d
0966   095E 26 01 00      mov b, $1
0967   0961 E7            pop d
0968   0962 5A            add d, b
0969   0963 E4            pop a
0970   0964 DA            push d
0971   0965 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0972   0968 D7            push a
0973   0969 DA            push d
0974   096A 26 00 00      mov b, $0
0975   096D E7            pop d
0976   096E 5A            add d, b
0977   096F E4            pop a
0978   0970 32            mov bl, [d]
0979   0971 A7 00         mov bh, 0
0980   0973 D7            push a
0981   0974 11            mov a, b
0982   0975 26 03 00      mov b, $3
0983   0978 86            and a, b ; &
0984   0979 27            mov b, a
0985   097A E4            pop a
0986   097B             ; START SHIFT
0987   097B D7            push a
0988   097C 11            mov a, b
0989   097D 26 04 00      mov b, $4
0990   0980 FD 39         mov c, b
0991   0982 9D            shl a, cl
0992   0983 27            mov b, a
0993   0984 E4            pop a
0994   0985             ; END SHIFT
0995   0985             ; START TERMS
0996   0985 D7            push a
0997   0986 11            mov a, b
0998   0987 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0999   098A D7            push a
1000   098B DA            push d
1001   098C 26 01 00      mov b, $1
1002   098F E7            pop d
1003   0990 5A            add d, b
1004   0991 E4            pop a
1005   0992 32            mov bl, [d]
1006   0993 A7 00         mov bh, 0
1007   0995 D7            push a
1008   0996 11            mov a, b
1009   0997 26 F0 00      mov b, $f0
1010   099A 86            and a, b ; &
1011   099B 27            mov b, a
1012   099C E4            pop a
1013   099D             ; START SHIFT
1014   099D D7            push a
1015   099E 11            mov a, b
1016   099F 26 04 00      mov b, $4
1017   09A2 FD 39         mov c, b
1018   09A4 A5            ashr a, cl
1019   09A5 27            mov b, a
1020   09A6 E4            pop a
1021   09A7             ; END SHIFT
1022   09A7 56            add b, a
1023   09A8 E4            pop a
1024   09A9             ; END TERMS
1025   09A9 E7            pop d
1026   09AA FD 3E         mov [d], bl
1027   09AC             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1028   09AC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1029   09AF D7            push a
1030   09B0 DA            push d
1031   09B1 26 02 00      mov b, $2
1032   09B4 E7            pop d
1033   09B5 5A            add d, b
1034   09B6 E4            pop a
1035   09B7 DA            push d
1036   09B8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1037   09BB D7            push a
1038   09BC DA            push d
1039   09BD 26 01 00      mov b, $1
1040   09C0 E7            pop d
1041   09C1 5A            add d, b
1042   09C2 E4            pop a
1043   09C3 32            mov bl, [d]
1044   09C4 A7 00         mov bh, 0
1045   09C6 D7            push a
1046   09C7 11            mov a, b
1047   09C8 26 0F 00      mov b, $f
1048   09CB 86            and a, b ; &
1049   09CC 27            mov b, a
1050   09CD E4            pop a
1051   09CE             ; START SHIFT
1052   09CE D7            push a
1053   09CF 11            mov a, b
1054   09D0 26 02 00      mov b, $2
1055   09D3 FD 39         mov c, b
1056   09D5 9D            shl a, cl
1057   09D6 27            mov b, a
1058   09D7 E4            pop a
1059   09D8             ; END SHIFT
1060   09D8             ; START TERMS
1061   09D8 D7            push a
1062   09D9 11            mov a, b
1063   09DA FA F6 FF      lea d, [bp + -10] ; $input_buffer
1064   09DD D7            push a
1065   09DE DA            push d
1066   09DF 26 02 00      mov b, $2
1067   09E2 E7            pop d
1068   09E3 5A            add d, b
1069   09E4 E4            pop a
1070   09E5 32            mov bl, [d]
1071   09E6 A7 00         mov bh, 0
1072   09E8 D7            push a
1073   09E9 11            mov a, b
1074   09EA 26 C0 00      mov b, $c0
1075   09ED 86            and a, b ; &
1076   09EE 27            mov b, a
1077   09EF E4            pop a
1078   09F0             ; START SHIFT
1079   09F0 D7            push a
1080   09F1 11            mov a, b
1081   09F2 26 06 00      mov b, $6
1082   09F5 FD 39         mov c, b
1083   09F7 A5            ashr a, cl
1084   09F8 27            mov b, a
1085   09F9 E4            pop a
1086   09FA             ; END SHIFT
1087   09FA 56            add b, a
1088   09FB E4            pop a
1089   09FC             ; END TERMS
1090   09FC E7            pop d
1091   09FD FD 3E         mov [d], bl
1092   09FF             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
1093   09FF FA F2 FF      lea d, [bp + -14] ; $output_buffer
1094   0A02 D7            push a
1095   0A03 DA            push d
1096   0A04 26 03 00      mov b, $3
1097   0A07 E7            pop d
1098   0A08 5A            add d, b
1099   0A09 E4            pop a
1100   0A0A DA            push d
1101   0A0B FA F6 FF      lea d, [bp + -10] ; $input_buffer
1102   0A0E D7            push a
1103   0A0F DA            push d
1104   0A10 26 02 00      mov b, $2
1105   0A13 E7            pop d
1106   0A14 5A            add d, b
1107   0A15 E4            pop a
1108   0A16 32            mov bl, [d]
1109   0A17 A7 00         mov bh, 0
1110   0A19 D7            push a
1111   0A1A 11            mov a, b
1112   0A1B 26 3F 00      mov b, $3f
1113   0A1E 86            and a, b ; &
1114   0A1F 27            mov b, a
1115   0A20 E4            pop a
1116   0A21 E7            pop d
1117   0A22 FD 3E         mov [d], bl
1118   0A24             ;; for (i = 0; i < 4; i++) { 
1119   0A24             _for13_init:
1120   0A24 FA FF FF      lea d, [bp + -1] ; $i
1121   0A27 DA            push d
1122   0A28 26 00 00      mov b, $0
1123   0A2B E7            pop d
1124   0A2C FD 43         mov [d], b
1125   0A2E             _for13_cond:
1126   0A2E FA FF FF      lea d, [bp + -1] ; $i
1127   0A31 2A            mov b, [d]
1128   0A32             ; START RELATIONAL
1129   0A32 D7            push a
1130   0A33 11            mov a, b
1131   0A34 26 04 00      mov b, $4
1132   0A37 B0            cmp a, b
1133   0A38 FD 73         slt ; <= (signed)
1134   0A3A E4            pop a
1135   0A3B             ; END RELATIONAL
1136   0A3B C0 00 00      cmp b, 0
1137   0A3E C6 8E 0A      je _for13_exit
1138   0A41             _for13_block:
1139   0A41             ;; output[j++] = base64_table[output_buffer[i]]; 
1140   0A41 FA 07 00      lea d, [bp + 7] ; $output
1141   0A44 FD 2A         mov d, [d]
1142   0A46 D7            push a
1143   0A47 DA            push d
1144   0A48 FA FD FF      lea d, [bp + -3] ; $j
1145   0A4B 2A            mov b, [d]
1146   0A4C D8            push b
1147   0A4D FD 77         inc b
1148   0A4F FA FD FF      lea d, [bp + -3] ; $j
1149   0A52 FD 43         mov [d], b
1150   0A54 E5            pop b
1151   0A55 E7            pop d
1152   0A56 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1153   0A5A E4            pop a
1154   0A5B DA            push d
1155   0A5C 3B FD 2D      mov d, _base64_table ; $base64_table
1156   0A5F FD 2A         mov d, [d]
1157   0A61 D7            push a
1158   0A62 DA            push d
1159   0A63 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1160   0A66 D7            push a
1161   0A67 DA            push d
1162   0A68 FA FF FF      lea d, [bp + -1] ; $i
1163   0A6B 2A            mov b, [d]
1164   0A6C E7            pop d
1165   0A6D 5A            add d, b
1166   0A6E E4            pop a
1167   0A6F 32            mov bl, [d]
1168   0A70 A7 00         mov bh, 0
1169   0A72 E7            pop d
1170   0A73 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1171   0A77 E4            pop a
1172   0A78 32            mov bl, [d]
1173   0A79 A7 00         mov bh, 0
1174   0A7B E7            pop d
1175   0A7C FD 3E         mov [d], bl
1176   0A7E             _for13_update:
1177   0A7E FA FF FF      lea d, [bp + -1] ; $i
1178   0A81 2A            mov b, [d]
1179   0A82 D8            push b
1180   0A83 FD 77         inc b
1181   0A85 FA FF FF      lea d, [bp + -1] ; $i
1182   0A88 FD 43         mov [d], b
1183   0A8A E5            pop b
1184   0A8B 0A 2E 0A      jmp _for13_cond
1185   0A8E             _for13_exit:
1186   0A8E             ;; i = 0; 
1187   0A8E FA FF FF      lea d, [bp + -1] ; $i
1188   0A91 DA            push d
1189   0A92 26 00 00      mov b, $0
1190   0A95 E7            pop d
1191   0A96 FD 43         mov [d], b
1192   0A98 0A 9B 0A      jmp _if12_exit
1193   0A9B             _if12_exit:
1194   0A9B 0A DA 08      jmp _while11_cond
1195   0A9E             _while11_exit:
1196   0A9E             ;; if (i) { 
1197   0A9E             _if14_cond:
1198   0A9E FA FF FF      lea d, [bp + -1] ; $i
1199   0AA1 2A            mov b, [d]
1200   0AA2 C0 00 00      cmp b, 0
1201   0AA5 C6 73 0C      je _if14_exit
1202   0AA8             _if14_true:
1203   0AA8             ;; for (k = i; k < 3; k++) { 
1204   0AA8             _for15_init:
1205   0AA8 FA FB FF      lea d, [bp + -5] ; $k
1206   0AAB DA            push d
1207   0AAC FA FF FF      lea d, [bp + -1] ; $i
1208   0AAF 2A            mov b, [d]
1209   0AB0 E7            pop d
1210   0AB1 FD 43         mov [d], b
1211   0AB3             _for15_cond:
1212   0AB3 FA FB FF      lea d, [bp + -5] ; $k
1213   0AB6 2A            mov b, [d]
1214   0AB7             ; START RELATIONAL
1215   0AB7 D7            push a
1216   0AB8 11            mov a, b
1217   0AB9 26 03 00      mov b, $3
1218   0ABC B0            cmp a, b
1219   0ABD FD 73         slt ; <= (signed)
1220   0ABF E4            pop a
1221   0AC0             ; END RELATIONAL
1222   0AC0 C0 00 00      cmp b, 0
1223   0AC3 C6 E9 0A      je _for15_exit
1224   0AC6             _for15_block:
1225   0AC6             ;; input_buffer[k] = '\0'; 
1226   0AC6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1227   0AC9 D7            push a
1228   0ACA DA            push d
1229   0ACB FA FB FF      lea d, [bp + -5] ; $k
1230   0ACE 2A            mov b, [d]
1231   0ACF E7            pop d
1232   0AD0 5A            add d, b
1233   0AD1 E4            pop a
1234   0AD2 DA            push d
1235   0AD3 26 00 00      mov b, $0
1236   0AD6 E7            pop d
1237   0AD7 FD 3E         mov [d], bl
1238   0AD9             _for15_update:
1239   0AD9 FA FB FF      lea d, [bp + -5] ; $k
1240   0ADC 2A            mov b, [d]
1241   0ADD D8            push b
1242   0ADE FD 77         inc b
1243   0AE0 FA FB FF      lea d, [bp + -5] ; $k
1244   0AE3 FD 43         mov [d], b
1245   0AE5 E5            pop b
1246   0AE6 0A B3 0A      jmp _for15_cond
1247   0AE9             _for15_exit:
1248   0AE9             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1249   0AE9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1250   0AEC D7            push a
1251   0AED DA            push d
1252   0AEE 26 00 00      mov b, $0
1253   0AF1 E7            pop d
1254   0AF2 5A            add d, b
1255   0AF3 E4            pop a
1256   0AF4 DA            push d
1257   0AF5 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1258   0AF8 D7            push a
1259   0AF9 DA            push d
1260   0AFA 26 00 00      mov b, $0
1261   0AFD E7            pop d
1262   0AFE 5A            add d, b
1263   0AFF E4            pop a
1264   0B00 32            mov bl, [d]
1265   0B01 A7 00         mov bh, 0
1266   0B03 D7            push a
1267   0B04 11            mov a, b
1268   0B05 26 FC 00      mov b, $fc
1269   0B08 86            and a, b ; &
1270   0B09 27            mov b, a
1271   0B0A E4            pop a
1272   0B0B             ; START SHIFT
1273   0B0B D7            push a
1274   0B0C 11            mov a, b
1275   0B0D 26 02 00      mov b, $2
1276   0B10 FD 39         mov c, b
1277   0B12 A5            ashr a, cl
1278   0B13 27            mov b, a
1279   0B14 E4            pop a
1280   0B15             ; END SHIFT
1281   0B15 E7            pop d
1282   0B16 FD 3E         mov [d], bl
1283   0B18             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1284   0B18 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1285   0B1B D7            push a
1286   0B1C DA            push d
1287   0B1D 26 01 00      mov b, $1
1288   0B20 E7            pop d
1289   0B21 5A            add d, b
1290   0B22 E4            pop a
1291   0B23 DA            push d
1292   0B24 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1293   0B27 D7            push a
1294   0B28 DA            push d
1295   0B29 26 00 00      mov b, $0
1296   0B2C E7            pop d
1297   0B2D 5A            add d, b
1298   0B2E E4            pop a
1299   0B2F 32            mov bl, [d]
1300   0B30 A7 00         mov bh, 0
1301   0B32 D7            push a
1302   0B33 11            mov a, b
1303   0B34 26 03 00      mov b, $3
1304   0B37 86            and a, b ; &
1305   0B38 27            mov b, a
1306   0B39 E4            pop a
1307   0B3A             ; START SHIFT
1308   0B3A D7            push a
1309   0B3B 11            mov a, b
1310   0B3C 26 04 00      mov b, $4
1311   0B3F FD 39         mov c, b
1312   0B41 9D            shl a, cl
1313   0B42 27            mov b, a
1314   0B43 E4            pop a
1315   0B44             ; END SHIFT
1316   0B44             ; START TERMS
1317   0B44 D7            push a
1318   0B45 11            mov a, b
1319   0B46 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1320   0B49 D7            push a
1321   0B4A DA            push d
1322   0B4B 26 01 00      mov b, $1
1323   0B4E E7            pop d
1324   0B4F 5A            add d, b
1325   0B50 E4            pop a
1326   0B51 32            mov bl, [d]
1327   0B52 A7 00         mov bh, 0
1328   0B54 D7            push a
1329   0B55 11            mov a, b
1330   0B56 26 F0 00      mov b, $f0
1331   0B59 86            and a, b ; &
1332   0B5A 27            mov b, a
1333   0B5B E4            pop a
1334   0B5C             ; START SHIFT
1335   0B5C D7            push a
1336   0B5D 11            mov a, b
1337   0B5E 26 04 00      mov b, $4
1338   0B61 FD 39         mov c, b
1339   0B63 A5            ashr a, cl
1340   0B64 27            mov b, a
1341   0B65 E4            pop a
1342   0B66             ; END SHIFT
1343   0B66 56            add b, a
1344   0B67 E4            pop a
1345   0B68             ; END TERMS
1346   0B68 E7            pop d
1347   0B69 FD 3E         mov [d], bl
1348   0B6B             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1349   0B6B FA F2 FF      lea d, [bp + -14] ; $output_buffer
1350   0B6E D7            push a
1351   0B6F DA            push d
1352   0B70 26 02 00      mov b, $2
1353   0B73 E7            pop d
1354   0B74 5A            add d, b
1355   0B75 E4            pop a
1356   0B76 DA            push d
1357   0B77 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1358   0B7A D7            push a
1359   0B7B DA            push d
1360   0B7C 26 01 00      mov b, $1
1361   0B7F E7            pop d
1362   0B80 5A            add d, b
1363   0B81 E4            pop a
1364   0B82 32            mov bl, [d]
1365   0B83 A7 00         mov bh, 0
1366   0B85 D7            push a
1367   0B86 11            mov a, b
1368   0B87 26 0F 00      mov b, $f
1369   0B8A 86            and a, b ; &
1370   0B8B 27            mov b, a
1371   0B8C E4            pop a
1372   0B8D             ; START SHIFT
1373   0B8D D7            push a
1374   0B8E 11            mov a, b
1375   0B8F 26 02 00      mov b, $2
1376   0B92 FD 39         mov c, b
1377   0B94 9D            shl a, cl
1378   0B95 27            mov b, a
1379   0B96 E4            pop a
1380   0B97             ; END SHIFT
1381   0B97             ; START TERMS
1382   0B97 D7            push a
1383   0B98 11            mov a, b
1384   0B99 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1385   0B9C D7            push a
1386   0B9D DA            push d
1387   0B9E 26 02 00      mov b, $2
1388   0BA1 E7            pop d
1389   0BA2 5A            add d, b
1390   0BA3 E4            pop a
1391   0BA4 32            mov bl, [d]
1392   0BA5 A7 00         mov bh, 0
1393   0BA7 D7            push a
1394   0BA8 11            mov a, b
1395   0BA9 26 C0 00      mov b, $c0
1396   0BAC 86            and a, b ; &
1397   0BAD 27            mov b, a
1398   0BAE E4            pop a
1399   0BAF             ; START SHIFT
1400   0BAF D7            push a
1401   0BB0 11            mov a, b
1402   0BB1 26 06 00      mov b, $6
1403   0BB4 FD 39         mov c, b
1404   0BB6 A5            ashr a, cl
1405   0BB7 27            mov b, a
1406   0BB8 E4            pop a
1407   0BB9             ; END SHIFT
1408   0BB9 56            add b, a
1409   0BBA E4            pop a
1410   0BBB             ; END TERMS
1411   0BBB E7            pop d
1412   0BBC FD 3E         mov [d], bl
1413   0BBE             ;; for (k = 0; k < i + 1; k++) { 
1414   0BBE             _for16_init:
1415   0BBE FA FB FF      lea d, [bp + -5] ; $k
1416   0BC1 DA            push d
1417   0BC2 26 00 00      mov b, $0
1418   0BC5 E7            pop d
1419   0BC6 FD 43         mov [d], b
1420   0BC8             _for16_cond:
1421   0BC8 FA FB FF      lea d, [bp + -5] ; $k
1422   0BCB 2A            mov b, [d]
1423   0BCC             ; START RELATIONAL
1424   0BCC D7            push a
1425   0BCD 11            mov a, b
1426   0BCE FA FF FF      lea d, [bp + -1] ; $i
1427   0BD1 2A            mov b, [d]
1428   0BD2             ; START TERMS
1429   0BD2 D7            push a
1430   0BD3 11            mov a, b
1431   0BD4 26 01 00      mov b, $1
1432   0BD7 56            add b, a
1433   0BD8 E4            pop a
1434   0BD9             ; END TERMS
1435   0BD9 B0            cmp a, b
1436   0BDA FD 73         slt ; <= (signed)
1437   0BDC E4            pop a
1438   0BDD             ; END RELATIONAL
1439   0BDD C0 00 00      cmp b, 0
1440   0BE0 C6 30 0C      je _for16_exit
1441   0BE3             _for16_block:
1442   0BE3             ;; output[j++] = base64_table[output_buffer[k]]; 
1443   0BE3 FA 07 00      lea d, [bp + 7] ; $output
1444   0BE6 FD 2A         mov d, [d]
1445   0BE8 D7            push a
1446   0BE9 DA            push d
1447   0BEA FA FD FF      lea d, [bp + -3] ; $j
1448   0BED 2A            mov b, [d]
1449   0BEE D8            push b
1450   0BEF FD 77         inc b
1451   0BF1 FA FD FF      lea d, [bp + -3] ; $j
1452   0BF4 FD 43         mov [d], b
1453   0BF6 E5            pop b
1454   0BF7 E7            pop d
1455   0BF8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1456   0BFC E4            pop a
1457   0BFD DA            push d
1458   0BFE 3B FD 2D      mov d, _base64_table ; $base64_table
1459   0C01 FD 2A         mov d, [d]
1460   0C03 D7            push a
1461   0C04 DA            push d
1462   0C05 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1463   0C08 D7            push a
1464   0C09 DA            push d
1465   0C0A FA FB FF      lea d, [bp + -5] ; $k
1466   0C0D 2A            mov b, [d]
1467   0C0E E7            pop d
1468   0C0F 5A            add d, b
1469   0C10 E4            pop a
1470   0C11 32            mov bl, [d]
1471   0C12 A7 00         mov bh, 0
1472   0C14 E7            pop d
1473   0C15 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1474   0C19 E4            pop a
1475   0C1A 32            mov bl, [d]
1476   0C1B A7 00         mov bh, 0
1477   0C1D E7            pop d
1478   0C1E FD 3E         mov [d], bl
1479   0C20             _for16_update:
1480   0C20 FA FB FF      lea d, [bp + -5] ; $k
1481   0C23 2A            mov b, [d]
1482   0C24 D8            push b
1483   0C25 FD 77         inc b
1484   0C27 FA FB FF      lea d, [bp + -5] ; $k
1485   0C2A FD 43         mov [d], b
1486   0C2C E5            pop b
1487   0C2D 0A C8 0B      jmp _for16_cond
1488   0C30             _for16_exit:
1489   0C30             ;; while (i++ < 3) { 
1490   0C30             _while17_cond:
1491   0C30 FA FF FF      lea d, [bp + -1] ; $i
1492   0C33 2A            mov b, [d]
1493   0C34 D8            push b
1494   0C35 FD 77         inc b
1495   0C37 FA FF FF      lea d, [bp + -1] ; $i
1496   0C3A FD 43         mov [d], b
1497   0C3C E5            pop b
1498   0C3D             ; START RELATIONAL
1499   0C3D D7            push a
1500   0C3E 11            mov a, b
1501   0C3F 26 03 00      mov b, $3
1502   0C42 B0            cmp a, b
1503   0C43 FD 73         slt ; <= (signed)
1504   0C45 E4            pop a
1505   0C46             ; END RELATIONAL
1506   0C46 C0 00 00      cmp b, 0
1507   0C49 C6 70 0C      je _while17_exit
1508   0C4C             _while17_block:
1509   0C4C             ;; output[j++] = '='; 
1510   0C4C FA 07 00      lea d, [bp + 7] ; $output
1511   0C4F FD 2A         mov d, [d]
1512   0C51 D7            push a
1513   0C52 DA            push d
1514   0C53 FA FD FF      lea d, [bp + -3] ; $j
1515   0C56 2A            mov b, [d]
1516   0C57 D8            push b
1517   0C58 FD 77         inc b
1518   0C5A FA FD FF      lea d, [bp + -3] ; $j
1519   0C5D FD 43         mov [d], b
1520   0C5F E5            pop b
1521   0C60 E7            pop d
1522   0C61 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1523   0C65 E4            pop a
1524   0C66 DA            push d
1525   0C67 26 3D 00      mov b, $3d
1526   0C6A E7            pop d
1527   0C6B FD 3E         mov [d], bl
1528   0C6D 0A 30 0C      jmp _while17_cond
1529   0C70             _while17_exit:
1530   0C70 0A 73 0C      jmp _if14_exit
1531   0C73             _if14_exit:
1532   0C73             ;; output[j] = '\0'; 
1533   0C73 FA 07 00      lea d, [bp + 7] ; $output
1534   0C76 FD 2A         mov d, [d]
1535   0C78 D7            push a
1536   0C79 DA            push d
1537   0C7A FA FD FF      lea d, [bp + -3] ; $j
1538   0C7D 2A            mov b, [d]
1539   0C7E E7            pop d
1540   0C7F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1541   0C83 E4            pop a
1542   0C84 DA            push d
1543   0C85 26 00 00      mov b, $0
1544   0C88 E7            pop d
1545   0C89 FD 3E         mov [d], bl
1546   0C8B F9            leave
1547   0C8C 09            ret
1548   0C8D             
1549   0C8D             base64_char_value:
1550   0C8D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1551   0C90             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1552   0C90             _if18_cond:
1553   0C90 FA 05 00      lea d, [bp + 5] ; $c
1554   0C93 32            mov bl, [d]
1555   0C94 A7 00         mov bh, 0
1556   0C96             ; START RELATIONAL
1557   0C96 D7            push a
1558   0C97 11            mov a, b
1559   0C98 26 41 00      mov b, $41
1560   0C9B B0            cmp a, b
1561   0C9C FD 80         sge ; >=
1562   0C9E E4            pop a
1563   0C9F             ; END RELATIONAL
1564   0C9F D7            push a
1565   0CA0 11            mov a, b
1566   0CA1 FA 05 00      lea d, [bp + 5] ; $c
1567   0CA4 32            mov bl, [d]
1568   0CA5 A7 00         mov bh, 0
1569   0CA7             ; START RELATIONAL
1570   0CA7 D7            push a
1571   0CA8 11            mov a, b
1572   0CA9 26 5A 00      mov b, $5a
1573   0CAC B0            cmp a, b
1574   0CAD FD 74         sle ; <=
1575   0CAF E4            pop a
1576   0CB0             ; END RELATIONAL
1577   0CB0 FD A7         sand a, b ; &&
1578   0CB2 E4            pop a
1579   0CB3 C0 00 00      cmp b, 0
1580   0CB6 C6 CC 0C      je _if18_exit
1581   0CB9             _if18_true:
1582   0CB9             ;; return c - 'A'; 
1583   0CB9 FA 05 00      lea d, [bp + 5] ; $c
1584   0CBC 32            mov bl, [d]
1585   0CBD A7 00         mov bh, 0
1586   0CBF             ; START TERMS
1587   0CBF D7            push a
1588   0CC0 11            mov a, b
1589   0CC1 26 41 00      mov b, $41
1590   0CC4 60            sub a, b
1591   0CC5 27            mov b, a
1592   0CC6 E4            pop a
1593   0CC7             ; END TERMS
1594   0CC7 F9            leave
1595   0CC8 09            ret
1596   0CC9 0A CC 0C      jmp _if18_exit
1597   0CCC             _if18_exit:
1598   0CCC             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1599   0CCC             _if19_cond:
1600   0CCC FA 05 00      lea d, [bp + 5] ; $c
1601   0CCF 32            mov bl, [d]
1602   0CD0 A7 00         mov bh, 0
1603   0CD2             ; START RELATIONAL
1604   0CD2 D7            push a
1605   0CD3 11            mov a, b
1606   0CD4 26 61 00      mov b, $61
1607   0CD7 B0            cmp a, b
1608   0CD8 FD 80         sge ; >=
1609   0CDA E4            pop a
1610   0CDB             ; END RELATIONAL
1611   0CDB D7            push a
1612   0CDC 11            mov a, b
1613   0CDD FA 05 00      lea d, [bp + 5] ; $c
1614   0CE0 32            mov bl, [d]
1615   0CE1 A7 00         mov bh, 0
1616   0CE3             ; START RELATIONAL
1617   0CE3 D7            push a
1618   0CE4 11            mov a, b
1619   0CE5 26 7A 00      mov b, $7a
1620   0CE8 B0            cmp a, b
1621   0CE9 FD 74         sle ; <=
1622   0CEB E4            pop a
1623   0CEC             ; END RELATIONAL
1624   0CEC FD A7         sand a, b ; &&
1625   0CEE E4            pop a
1626   0CEF C0 00 00      cmp b, 0
1627   0CF2 C6 0D 0D      je _if19_exit
1628   0CF5             _if19_true:
1629   0CF5             ;; return c - 'a' + 26; 
1630   0CF5 FA 05 00      lea d, [bp + 5] ; $c
1631   0CF8 32            mov bl, [d]
1632   0CF9 A7 00         mov bh, 0
1633   0CFB             ; START TERMS
1634   0CFB D7            push a
1635   0CFC 11            mov a, b
1636   0CFD 26 61 00      mov b, $61
1637   0D00 60            sub a, b
1638   0D01 27            mov b, a
1639   0D02 11            mov a, b
1640   0D03 26 1A 00      mov b, $1a
1641   0D06 56            add b, a
1642   0D07 E4            pop a
1643   0D08             ; END TERMS
1644   0D08 F9            leave
1645   0D09 09            ret
1646   0D0A 0A 0D 0D      jmp _if19_exit
1647   0D0D             _if19_exit:
1648   0D0D             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1649   0D0D             _if20_cond:
1650   0D0D FA 05 00      lea d, [bp + 5] ; $c
1651   0D10 32            mov bl, [d]
1652   0D11 A7 00         mov bh, 0
1653   0D13             ; START RELATIONAL
1654   0D13 D7            push a
1655   0D14 11            mov a, b
1656   0D15 26 30 00      mov b, $30
1657   0D18 B0            cmp a, b
1658   0D19 FD 80         sge ; >=
1659   0D1B E4            pop a
1660   0D1C             ; END RELATIONAL
1661   0D1C D7            push a
1662   0D1D 11            mov a, b
1663   0D1E FA 05 00      lea d, [bp + 5] ; $c
1664   0D21 32            mov bl, [d]
1665   0D22 A7 00         mov bh, 0
1666   0D24             ; START RELATIONAL
1667   0D24 D7            push a
1668   0D25 11            mov a, b
1669   0D26 26 39 00      mov b, $39
1670   0D29 B0            cmp a, b
1671   0D2A FD 74         sle ; <=
1672   0D2C E4            pop a
1673   0D2D             ; END RELATIONAL
1674   0D2D FD A7         sand a, b ; &&
1675   0D2F E4            pop a
1676   0D30 C0 00 00      cmp b, 0
1677   0D33 C6 4E 0D      je _if20_exit
1678   0D36             _if20_true:
1679   0D36             ;; return c - '0' + 52; 
1680   0D36 FA 05 00      lea d, [bp + 5] ; $c
1681   0D39 32            mov bl, [d]
1682   0D3A A7 00         mov bh, 0
1683   0D3C             ; START TERMS
1684   0D3C D7            push a
1685   0D3D 11            mov a, b
1686   0D3E 26 30 00      mov b, $30
1687   0D41 60            sub a, b
1688   0D42 27            mov b, a
1689   0D43 11            mov a, b
1690   0D44 26 34 00      mov b, $34
1691   0D47 56            add b, a
1692   0D48 E4            pop a
1693   0D49             ; END TERMS
1694   0D49 F9            leave
1695   0D4A 09            ret
1696   0D4B 0A 4E 0D      jmp _if20_exit
1697   0D4E             _if20_exit:
1698   0D4E             ;; if (c == '+') return 62; 
1699   0D4E             _if21_cond:
1700   0D4E FA 05 00      lea d, [bp + 5] ; $c
1701   0D51 32            mov bl, [d]
1702   0D52 A7 00         mov bh, 0
1703   0D54             ; START RELATIONAL
1704   0D54 D7            push a
1705   0D55 11            mov a, b
1706   0D56 26 2B 00      mov b, $2b
1707   0D59 B0            cmp a, b
1708   0D5A FD 71         seq ; ==
1709   0D5C E4            pop a
1710   0D5D             ; END RELATIONAL
1711   0D5D C0 00 00      cmp b, 0
1712   0D60 C6 6B 0D      je _if21_exit
1713   0D63             _if21_true:
1714   0D63             ;; return 62; 
1715   0D63 26 3E 00      mov b, $3e
1716   0D66 F9            leave
1717   0D67 09            ret
1718   0D68 0A 6B 0D      jmp _if21_exit
1719   0D6B             _if21_exit:
1720   0D6B             ;; if (c == '/') return 63; 
1721   0D6B             _if22_cond:
1722   0D6B FA 05 00      lea d, [bp + 5] ; $c
1723   0D6E 32            mov bl, [d]
1724   0D6F A7 00         mov bh, 0
1725   0D71             ; START RELATIONAL
1726   0D71 D7            push a
1727   0D72 11            mov a, b
1728   0D73 26 2F 00      mov b, $2f
1729   0D76 B0            cmp a, b
1730   0D77 FD 71         seq ; ==
1731   0D79 E4            pop a
1732   0D7A             ; END RELATIONAL
1733   0D7A C0 00 00      cmp b, 0
1734   0D7D C6 88 0D      je _if22_exit
1735   0D80             _if22_true:
1736   0D80             ;; return 63; 
1737   0D80 26 3F 00      mov b, $3f
1738   0D83 F9            leave
1739   0D84 09            ret
1740   0D85 0A 88 0D      jmp _if22_exit
1741   0D88             _if22_exit:
1742   0D88             ;; return -1; 
1743   0D88 26 FF FF      mov b, $ffff
1744   0D8B F9            leave
1745   0D8C 09            ret
1746   0D8D             
1747   0D8D             base64_decode:
1748   0D8D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1749   0D90             ; $i 
1750   0D90 10 00 00      mov a, $0
1751   0D93 45 FF FF      mov [bp + -1], a
1752   0D96             ; $j 
1753   0D96 10 00 00      mov a, $0
1754   0D99 45 FD FF      mov [bp + -3], a
1755   0D9C             ; $k 
1756   0D9C 10 00 00      mov a, $0
1757   0D9F 45 FB FF      mov [bp + -5], a
1758   0DA2             ; $input_len 
1759   0DA2             ; $input_buffer 
1760   0DA2             ; $output_buffer 
1761   0DA2 52 0F 00      sub sp, 15
1762   0DA5             ;; input_len = strlen(input); 
1763   0DA5 FA F9 FF      lea d, [bp + -7] ; $input_len
1764   0DA8 DA            push d
1765   0DA9 FA 05 00      lea d, [bp + 5] ; $input
1766   0DAC 2A            mov b, [d]
1767   0DAD FD AB         swp b
1768   0DAF D8            push b
1769   0DB0 07 EC 06      call strlen
1770   0DB3 51 02 00      add sp, 2
1771   0DB6 E7            pop d
1772   0DB7 FD 43         mov [d], b
1773   0DB9             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1774   0DB9             _while23_cond:
1775   0DB9 FA F9 FF      lea d, [bp + -7] ; $input_len
1776   0DBC 2A            mov b, [d]
1777   0DBD D8            push b
1778   0DBE FD 7D         dec b
1779   0DC0 FA F9 FF      lea d, [bp + -7] ; $input_len
1780   0DC3 FD 43         mov [d], b
1781   0DC5 E5            pop b
1782   0DC6 D7            push a
1783   0DC7 11            mov a, b
1784   0DC8 FA 05 00      lea d, [bp + 5] ; $input
1785   0DCB FD 2A         mov d, [d]
1786   0DCD D7            push a
1787   0DCE DA            push d
1788   0DCF FA FB FF      lea d, [bp + -5] ; $k
1789   0DD2 2A            mov b, [d]
1790   0DD3 E7            pop d
1791   0DD4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1792   0DD8 E4            pop a
1793   0DD9 32            mov bl, [d]
1794   0DDA A7 00         mov bh, 0
1795   0DDC             ; START RELATIONAL
1796   0DDC D7            push a
1797   0DDD 11            mov a, b
1798   0DDE 26 3D 00      mov b, $3d
1799   0DE1 B0            cmp a, b
1800   0DE2 FD 72         sneq ; !=
1801   0DE4 E4            pop a
1802   0DE5             ; END RELATIONAL
1803   0DE5 FD A7         sand a, b ; &&
1804   0DE7 11            mov a, b
1805   0DE8 FA 05 00      lea d, [bp + 5] ; $input
1806   0DEB FD 2A         mov d, [d]
1807   0DED D7            push a
1808   0DEE DA            push d
1809   0DEF FA FB FF      lea d, [bp + -5] ; $k
1810   0DF2 2A            mov b, [d]
1811   0DF3 E7            pop d
1812   0DF4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1813   0DF8 E4            pop a
1814   0DF9 32            mov bl, [d]
1815   0DFA A7 00         mov bh, 0
1816   0DFC DD            push bl
1817   0DFD 07 8D 0C      call base64_char_value
1818   0E00 51 01 00      add sp, 1
1819   0E03             ; START RELATIONAL
1820   0E03 D7            push a
1821   0E04 11            mov a, b
1822   0E05 26 FF FF      mov b, $ffff
1823   0E08 B0            cmp a, b
1824   0E09 FD 72         sneq ; !=
1825   0E0B E4            pop a
1826   0E0C             ; END RELATIONAL
1827   0E0C FD A7         sand a, b ; &&
1828   0E0E E4            pop a
1829   0E0F C0 00 00      cmp b, 0
1830   0E12 C6 FA 0F      je _while23_exit
1831   0E15             _while23_block:
1832   0E15             ;; input_buffer[i++] = input[k++]; 
1833   0E15 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1834   0E18 D7            push a
1835   0E19 DA            push d
1836   0E1A FA FF FF      lea d, [bp + -1] ; $i
1837   0E1D 2A            mov b, [d]
1838   0E1E D8            push b
1839   0E1F FD 77         inc b
1840   0E21 FA FF FF      lea d, [bp + -1] ; $i
1841   0E24 FD 43         mov [d], b
1842   0E26 E5            pop b
1843   0E27 E7            pop d
1844   0E28 5A            add d, b
1845   0E29 E4            pop a
1846   0E2A DA            push d
1847   0E2B FA 05 00      lea d, [bp + 5] ; $input
1848   0E2E FD 2A         mov d, [d]
1849   0E30 D7            push a
1850   0E31 DA            push d
1851   0E32 FA FB FF      lea d, [bp + -5] ; $k
1852   0E35 2A            mov b, [d]
1853   0E36 D8            push b
1854   0E37 FD 77         inc b
1855   0E39 FA FB FF      lea d, [bp + -5] ; $k
1856   0E3C FD 43         mov [d], b
1857   0E3E E5            pop b
1858   0E3F E7            pop d
1859   0E40 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1860   0E44 E4            pop a
1861   0E45 32            mov bl, [d]
1862   0E46 A7 00         mov bh, 0
1863   0E48 E7            pop d
1864   0E49 FD 3E         mov [d], bl
1865   0E4B             ;; if (i == 4) { 
1866   0E4B             _if24_cond:
1867   0E4B FA FF FF      lea d, [bp + -1] ; $i
1868   0E4E 2A            mov b, [d]
1869   0E4F             ; START RELATIONAL
1870   0E4F D7            push a
1871   0E50 11            mov a, b
1872   0E51 26 04 00      mov b, $4
1873   0E54 B0            cmp a, b
1874   0E55 FD 71         seq ; ==
1875   0E57 E4            pop a
1876   0E58             ; END RELATIONAL
1877   0E58 C0 00 00      cmp b, 0
1878   0E5B C6 F7 0F      je _if24_exit
1879   0E5E             _if24_true:
1880   0E5E             ;; for (i = 0; i < 4; i++) { 
1881   0E5E             _for25_init:
1882   0E5E FA FF FF      lea d, [bp + -1] ; $i
1883   0E61 DA            push d
1884   0E62 26 00 00      mov b, $0
1885   0E65 E7            pop d
1886   0E66 FD 43         mov [d], b
1887   0E68             _for25_cond:
1888   0E68 FA FF FF      lea d, [bp + -1] ; $i
1889   0E6B 2A            mov b, [d]
1890   0E6C             ; START RELATIONAL
1891   0E6C D7            push a
1892   0E6D 11            mov a, b
1893   0E6E 26 04 00      mov b, $4
1894   0E71 B0            cmp a, b
1895   0E72 FD 73         slt ; <= (signed)
1896   0E74 E4            pop a
1897   0E75             ; END RELATIONAL
1898   0E75 C0 00 00      cmp b, 0
1899   0E78 C6 B1 0E      je _for25_exit
1900   0E7B             _for25_block:
1901   0E7B             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1902   0E7B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1903   0E7E D7            push a
1904   0E7F DA            push d
1905   0E80 FA FF FF      lea d, [bp + -1] ; $i
1906   0E83 2A            mov b, [d]
1907   0E84 E7            pop d
1908   0E85 5A            add d, b
1909   0E86 E4            pop a
1910   0E87 DA            push d
1911   0E88 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1912   0E8B D7            push a
1913   0E8C DA            push d
1914   0E8D FA FF FF      lea d, [bp + -1] ; $i
1915   0E90 2A            mov b, [d]
1916   0E91 E7            pop d
1917   0E92 5A            add d, b
1918   0E93 E4            pop a
1919   0E94 32            mov bl, [d]
1920   0E95 A7 00         mov bh, 0
1921   0E97 DD            push bl
1922   0E98 07 8D 0C      call base64_char_value
1923   0E9B 51 01 00      add sp, 1
1924   0E9E E7            pop d
1925   0E9F FD 3E         mov [d], bl
1926   0EA1             _for25_update:
1927   0EA1 FA FF FF      lea d, [bp + -1] ; $i
1928   0EA4 2A            mov b, [d]
1929   0EA5 D8            push b
1930   0EA6 FD 77         inc b
1931   0EA8 FA FF FF      lea d, [bp + -1] ; $i
1932   0EAB FD 43         mov [d], b
1933   0EAD E5            pop b
1934   0EAE 0A 68 0E      jmp _for25_cond
1935   0EB1             _for25_exit:
1936   0EB1             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1937   0EB1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1938   0EB4 D7            push a
1939   0EB5 DA            push d
1940   0EB6 26 00 00      mov b, $0
1941   0EB9 E7            pop d
1942   0EBA 5A            add d, b
1943   0EBB E4            pop a
1944   0EBC DA            push d
1945   0EBD FA F5 FF      lea d, [bp + -11] ; $input_buffer
1946   0EC0 D7            push a
1947   0EC1 DA            push d
1948   0EC2 26 00 00      mov b, $0
1949   0EC5 E7            pop d
1950   0EC6 5A            add d, b
1951   0EC7 E4            pop a
1952   0EC8 32            mov bl, [d]
1953   0EC9 A7 00         mov bh, 0
1954   0ECB             ; START SHIFT
1955   0ECB D7            push a
1956   0ECC 11            mov a, b
1957   0ECD 26 02 00      mov b, $2
1958   0ED0 FD 39         mov c, b
1959   0ED2 9D            shl a, cl
1960   0ED3 27            mov b, a
1961   0ED4 E4            pop a
1962   0ED5             ; END SHIFT
1963   0ED5             ; START TERMS
1964   0ED5 D7            push a
1965   0ED6 11            mov a, b
1966   0ED7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1967   0EDA D7            push a
1968   0EDB DA            push d
1969   0EDC 26 01 00      mov b, $1
1970   0EDF E7            pop d
1971   0EE0 5A            add d, b
1972   0EE1 E4            pop a
1973   0EE2 32            mov bl, [d]
1974   0EE3 A7 00         mov bh, 0
1975   0EE5 D7            push a
1976   0EE6 11            mov a, b
1977   0EE7 26 30 00      mov b, $30
1978   0EEA 86            and a, b ; &
1979   0EEB 27            mov b, a
1980   0EEC E4            pop a
1981   0EED             ; START SHIFT
1982   0EED D7            push a
1983   0EEE 11            mov a, b
1984   0EEF 26 04 00      mov b, $4
1985   0EF2 FD 39         mov c, b
1986   0EF4 A5            ashr a, cl
1987   0EF5 27            mov b, a
1988   0EF6 E4            pop a
1989   0EF7             ; END SHIFT
1990   0EF7 56            add b, a
1991   0EF8 E4            pop a
1992   0EF9             ; END TERMS
1993   0EF9 E7            pop d
1994   0EFA FD 3E         mov [d], bl
1995   0EFC             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1996   0EFC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1997   0EFF D7            push a
1998   0F00 DA            push d
1999   0F01 26 01 00      mov b, $1
2000   0F04 E7            pop d
2001   0F05 5A            add d, b
2002   0F06 E4            pop a
2003   0F07 DA            push d
2004   0F08 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2005   0F0B D7            push a
2006   0F0C DA            push d
2007   0F0D 26 01 00      mov b, $1
2008   0F10 E7            pop d
2009   0F11 5A            add d, b
2010   0F12 E4            pop a
2011   0F13 32            mov bl, [d]
2012   0F14 A7 00         mov bh, 0
2013   0F16 D7            push a
2014   0F17 11            mov a, b
2015   0F18 26 0F 00      mov b, $f
2016   0F1B 86            and a, b ; &
2017   0F1C 27            mov b, a
2018   0F1D E4            pop a
2019   0F1E             ; START SHIFT
2020   0F1E D7            push a
2021   0F1F 11            mov a, b
2022   0F20 26 04 00      mov b, $4
2023   0F23 FD 39         mov c, b
2024   0F25 9D            shl a, cl
2025   0F26 27            mov b, a
2026   0F27 E4            pop a
2027   0F28             ; END SHIFT
2028   0F28             ; START TERMS
2029   0F28 D7            push a
2030   0F29 11            mov a, b
2031   0F2A FA F5 FF      lea d, [bp + -11] ; $input_buffer
2032   0F2D D7            push a
2033   0F2E DA            push d
2034   0F2F 26 02 00      mov b, $2
2035   0F32 E7            pop d
2036   0F33 5A            add d, b
2037   0F34 E4            pop a
2038   0F35 32            mov bl, [d]
2039   0F36 A7 00         mov bh, 0
2040   0F38 D7            push a
2041   0F39 11            mov a, b
2042   0F3A 26 3C 00      mov b, $3c
2043   0F3D 86            and a, b ; &
2044   0F3E 27            mov b, a
2045   0F3F E4            pop a
2046   0F40             ; START SHIFT
2047   0F40 D7            push a
2048   0F41 11            mov a, b
2049   0F42 26 02 00      mov b, $2
2050   0F45 FD 39         mov c, b
2051   0F47 A5            ashr a, cl
2052   0F48 27            mov b, a
2053   0F49 E4            pop a
2054   0F4A             ; END SHIFT
2055   0F4A 56            add b, a
2056   0F4B E4            pop a
2057   0F4C             ; END TERMS
2058   0F4C E7            pop d
2059   0F4D FD 3E         mov [d], bl
2060   0F4F             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
2061   0F4F FA F2 FF      lea d, [bp + -14] ; $output_buffer
2062   0F52 D7            push a
2063   0F53 DA            push d
2064   0F54 26 02 00      mov b, $2
2065   0F57 E7            pop d
2066   0F58 5A            add d, b
2067   0F59 E4            pop a
2068   0F5A DA            push d
2069   0F5B FA F5 FF      lea d, [bp + -11] ; $input_buffer
2070   0F5E D7            push a
2071   0F5F DA            push d
2072   0F60 26 02 00      mov b, $2
2073   0F63 E7            pop d
2074   0F64 5A            add d, b
2075   0F65 E4            pop a
2076   0F66 32            mov bl, [d]
2077   0F67 A7 00         mov bh, 0
2078   0F69 D7            push a
2079   0F6A 11            mov a, b
2080   0F6B 26 03 00      mov b, $3
2081   0F6E 86            and a, b ; &
2082   0F6F 27            mov b, a
2083   0F70 E4            pop a
2084   0F71             ; START SHIFT
2085   0F71 D7            push a
2086   0F72 11            mov a, b
2087   0F73 26 06 00      mov b, $6
2088   0F76 FD 39         mov c, b
2089   0F78 9D            shl a, cl
2090   0F79 27            mov b, a
2091   0F7A E4            pop a
2092   0F7B             ; END SHIFT
2093   0F7B             ; START TERMS
2094   0F7B D7            push a
2095   0F7C 11            mov a, b
2096   0F7D FA F5 FF      lea d, [bp + -11] ; $input_buffer
2097   0F80 D7            push a
2098   0F81 DA            push d
2099   0F82 26 03 00      mov b, $3
2100   0F85 E7            pop d
2101   0F86 5A            add d, b
2102   0F87 E4            pop a
2103   0F88 32            mov bl, [d]
2104   0F89 A7 00         mov bh, 0
2105   0F8B 56            add b, a
2106   0F8C E4            pop a
2107   0F8D             ; END TERMS
2108   0F8D E7            pop d
2109   0F8E FD 3E         mov [d], bl
2110   0F90             ;; for (i = 0; i < 3; i++) { 
2111   0F90             _for26_init:
2112   0F90 FA FF FF      lea d, [bp + -1] ; $i
2113   0F93 DA            push d
2114   0F94 26 00 00      mov b, $0
2115   0F97 E7            pop d
2116   0F98 FD 43         mov [d], b
2117   0F9A             _for26_cond:
2118   0F9A FA FF FF      lea d, [bp + -1] ; $i
2119   0F9D 2A            mov b, [d]
2120   0F9E             ; START RELATIONAL
2121   0F9E D7            push a
2122   0F9F 11            mov a, b
2123   0FA0 26 03 00      mov b, $3
2124   0FA3 B0            cmp a, b
2125   0FA4 FD 73         slt ; <= (signed)
2126   0FA6 E4            pop a
2127   0FA7             ; END RELATIONAL
2128   0FA7 C0 00 00      cmp b, 0
2129   0FAA C6 EA 0F      je _for26_exit
2130   0FAD             _for26_block:
2131   0FAD             ;; output[j++] = output_buffer[i]; 
2132   0FAD FA 07 00      lea d, [bp + 7] ; $output
2133   0FB0 FD 2A         mov d, [d]
2134   0FB2 D7            push a
2135   0FB3 DA            push d
2136   0FB4 FA FD FF      lea d, [bp + -3] ; $j
2137   0FB7 2A            mov b, [d]
2138   0FB8 D8            push b
2139   0FB9 FD 77         inc b
2140   0FBB FA FD FF      lea d, [bp + -3] ; $j
2141   0FBE FD 43         mov [d], b
2142   0FC0 E5            pop b
2143   0FC1 E7            pop d
2144   0FC2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2145   0FC6 E4            pop a
2146   0FC7 DA            push d
2147   0FC8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2148   0FCB D7            push a
2149   0FCC DA            push d
2150   0FCD FA FF FF      lea d, [bp + -1] ; $i
2151   0FD0 2A            mov b, [d]
2152   0FD1 E7            pop d
2153   0FD2 5A            add d, b
2154   0FD3 E4            pop a
2155   0FD4 32            mov bl, [d]
2156   0FD5 A7 00         mov bh, 0
2157   0FD7 E7            pop d
2158   0FD8 FD 3E         mov [d], bl
2159   0FDA             _for26_update:
2160   0FDA FA FF FF      lea d, [bp + -1] ; $i
2161   0FDD 2A            mov b, [d]
2162   0FDE D8            push b
2163   0FDF FD 77         inc b
2164   0FE1 FA FF FF      lea d, [bp + -1] ; $i
2165   0FE4 FD 43         mov [d], b
2166   0FE6 E5            pop b
2167   0FE7 0A 9A 0F      jmp _for26_cond
2168   0FEA             _for26_exit:
2169   0FEA             ;; i = 0; 
2170   0FEA FA FF FF      lea d, [bp + -1] ; $i
2171   0FED DA            push d
2172   0FEE 26 00 00      mov b, $0
2173   0FF1 E7            pop d
2174   0FF2 FD 43         mov [d], b
2175   0FF4 0A F7 0F      jmp _if24_exit
2176   0FF7             _if24_exit:
2177   0FF7 0A B9 0D      jmp _while23_cond
2178   0FFA             _while23_exit:
2179   0FFA             ;; if (i) { 
2180   0FFA             _if27_cond:
2181   0FFA FA FF FF      lea d, [bp + -1] ; $i
2182   0FFD 2A            mov b, [d]
2183   0FFE C0 00 00      cmp b, 0
2184   1001 C6 9C 11      je _if27_exit
2185   1004             _if27_true:
2186   1004             ;; for (k = i; k < 4; k++) { 
2187   1004             _for28_init:
2188   1004 FA FB FF      lea d, [bp + -5] ; $k
2189   1007 DA            push d
2190   1008 FA FF FF      lea d, [bp + -1] ; $i
2191   100B 2A            mov b, [d]
2192   100C E7            pop d
2193   100D FD 43         mov [d], b
2194   100F             _for28_cond:
2195   100F FA FB FF      lea d, [bp + -5] ; $k
2196   1012 2A            mov b, [d]
2197   1013             ; START RELATIONAL
2198   1013 D7            push a
2199   1014 11            mov a, b
2200   1015 26 04 00      mov b, $4
2201   1018 B0            cmp a, b
2202   1019 FD 73         slt ; <= (signed)
2203   101B E4            pop a
2204   101C             ; END RELATIONAL
2205   101C C0 00 00      cmp b, 0
2206   101F C6 45 10      je _for28_exit
2207   1022             _for28_block:
2208   1022             ;; input_buffer[k] = 0; 
2209   1022 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2210   1025 D7            push a
2211   1026 DA            push d
2212   1027 FA FB FF      lea d, [bp + -5] ; $k
2213   102A 2A            mov b, [d]
2214   102B E7            pop d
2215   102C 5A            add d, b
2216   102D E4            pop a
2217   102E DA            push d
2218   102F 26 00 00      mov b, $0
2219   1032 E7            pop d
2220   1033 FD 3E         mov [d], bl
2221   1035             _for28_update:
2222   1035 FA FB FF      lea d, [bp + -5] ; $k
2223   1038 2A            mov b, [d]
2224   1039 D8            push b
2225   103A FD 77         inc b
2226   103C FA FB FF      lea d, [bp + -5] ; $k
2227   103F FD 43         mov [d], b
2228   1041 E5            pop b
2229   1042 0A 0F 10      jmp _for28_cond
2230   1045             _for28_exit:
2231   1045             ;; for (k = 0; k < 4; k++) { 
2232   1045             _for29_init:
2233   1045 FA FB FF      lea d, [bp + -5] ; $k
2234   1048 DA            push d
2235   1049 26 00 00      mov b, $0
2236   104C E7            pop d
2237   104D FD 43         mov [d], b
2238   104F             _for29_cond:
2239   104F FA FB FF      lea d, [bp + -5] ; $k
2240   1052 2A            mov b, [d]
2241   1053             ; START RELATIONAL
2242   1053 D7            push a
2243   1054 11            mov a, b
2244   1055 26 04 00      mov b, $4
2245   1058 B0            cmp a, b
2246   1059 FD 73         slt ; <= (signed)
2247   105B E4            pop a
2248   105C             ; END RELATIONAL
2249   105C C0 00 00      cmp b, 0
2250   105F C6 98 10      je _for29_exit
2251   1062             _for29_block:
2252   1062             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2253   1062 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2254   1065 D7            push a
2255   1066 DA            push d
2256   1067 FA FB FF      lea d, [bp + -5] ; $k
2257   106A 2A            mov b, [d]
2258   106B E7            pop d
2259   106C 5A            add d, b
2260   106D E4            pop a
2261   106E DA            push d
2262   106F FA F5 FF      lea d, [bp + -11] ; $input_buffer
2263   1072 D7            push a
2264   1073 DA            push d
2265   1074 FA FB FF      lea d, [bp + -5] ; $k
2266   1077 2A            mov b, [d]
2267   1078 E7            pop d
2268   1079 5A            add d, b
2269   107A E4            pop a
2270   107B 32            mov bl, [d]
2271   107C A7 00         mov bh, 0
2272   107E DD            push bl
2273   107F 07 8D 0C      call base64_char_value
2274   1082 51 01 00      add sp, 1
2275   1085 E7            pop d
2276   1086 FD 3E         mov [d], bl
2277   1088             _for29_update:
2278   1088 FA FB FF      lea d, [bp + -5] ; $k
2279   108B 2A            mov b, [d]
2280   108C D8            push b
2281   108D FD 77         inc b
2282   108F FA FB FF      lea d, [bp + -5] ; $k
2283   1092 FD 43         mov [d], b
2284   1094 E5            pop b
2285   1095 0A 4F 10      jmp _for29_cond
2286   1098             _for29_exit:
2287   1098             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2288   1098 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2289   109B D7            push a
2290   109C DA            push d
2291   109D 26 00 00      mov b, $0
2292   10A0 E7            pop d
2293   10A1 5A            add d, b
2294   10A2 E4            pop a
2295   10A3 DA            push d
2296   10A4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2297   10A7 D7            push a
2298   10A8 DA            push d
2299   10A9 26 00 00      mov b, $0
2300   10AC E7            pop d
2301   10AD 5A            add d, b
2302   10AE E4            pop a
2303   10AF 32            mov bl, [d]
2304   10B0 A7 00         mov bh, 0
2305   10B2             ; START SHIFT
2306   10B2 D7            push a
2307   10B3 11            mov a, b
2308   10B4 26 02 00      mov b, $2
2309   10B7 FD 39         mov c, b
2310   10B9 9D            shl a, cl
2311   10BA 27            mov b, a
2312   10BB E4            pop a
2313   10BC             ; END SHIFT
2314   10BC             ; START TERMS
2315   10BC D7            push a
2316   10BD 11            mov a, b
2317   10BE FA F5 FF      lea d, [bp + -11] ; $input_buffer
2318   10C1 D7            push a
2319   10C2 DA            push d
2320   10C3 26 01 00      mov b, $1
2321   10C6 E7            pop d
2322   10C7 5A            add d, b
2323   10C8 E4            pop a
2324   10C9 32            mov bl, [d]
2325   10CA A7 00         mov bh, 0
2326   10CC D7            push a
2327   10CD 11            mov a, b
2328   10CE 26 30 00      mov b, $30
2329   10D1 86            and a, b ; &
2330   10D2 27            mov b, a
2331   10D3 E4            pop a
2332   10D4             ; START SHIFT
2333   10D4 D7            push a
2334   10D5 11            mov a, b
2335   10D6 26 04 00      mov b, $4
2336   10D9 FD 39         mov c, b
2337   10DB A5            ashr a, cl
2338   10DC 27            mov b, a
2339   10DD E4            pop a
2340   10DE             ; END SHIFT
2341   10DE 56            add b, a
2342   10DF E4            pop a
2343   10E0             ; END TERMS
2344   10E0 E7            pop d
2345   10E1 FD 3E         mov [d], bl
2346   10E3             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2347   10E3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2348   10E6 D7            push a
2349   10E7 DA            push d
2350   10E8 26 01 00      mov b, $1
2351   10EB E7            pop d
2352   10EC 5A            add d, b
2353   10ED E4            pop a
2354   10EE DA            push d
2355   10EF FA F5 FF      lea d, [bp + -11] ; $input_buffer
2356   10F2 D7            push a
2357   10F3 DA            push d
2358   10F4 26 01 00      mov b, $1
2359   10F7 E7            pop d
2360   10F8 5A            add d, b
2361   10F9 E4            pop a
2362   10FA 32            mov bl, [d]
2363   10FB A7 00         mov bh, 0
2364   10FD D7            push a
2365   10FE 11            mov a, b
2366   10FF 26 0F 00      mov b, $f
2367   1102 86            and a, b ; &
2368   1103 27            mov b, a
2369   1104 E4            pop a
2370   1105             ; START SHIFT
2371   1105 D7            push a
2372   1106 11            mov a, b
2373   1107 26 04 00      mov b, $4
2374   110A FD 39         mov c, b
2375   110C 9D            shl a, cl
2376   110D 27            mov b, a
2377   110E E4            pop a
2378   110F             ; END SHIFT
2379   110F             ; START TERMS
2380   110F D7            push a
2381   1110 11            mov a, b
2382   1111 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2383   1114 D7            push a
2384   1115 DA            push d
2385   1116 26 02 00      mov b, $2
2386   1119 E7            pop d
2387   111A 5A            add d, b
2388   111B E4            pop a
2389   111C 32            mov bl, [d]
2390   111D A7 00         mov bh, 0
2391   111F D7            push a
2392   1120 11            mov a, b
2393   1121 26 3C 00      mov b, $3c
2394   1124 86            and a, b ; &
2395   1125 27            mov b, a
2396   1126 E4            pop a
2397   1127             ; START SHIFT
2398   1127 D7            push a
2399   1128 11            mov a, b
2400   1129 26 02 00      mov b, $2
2401   112C FD 39         mov c, b
2402   112E A5            ashr a, cl
2403   112F 27            mov b, a
2404   1130 E4            pop a
2405   1131             ; END SHIFT
2406   1131 56            add b, a
2407   1132 E4            pop a
2408   1133             ; END TERMS
2409   1133 E7            pop d
2410   1134 FD 3E         mov [d], bl
2411   1136             ;; for (k = 0; k < i - 1; k++) { 
2412   1136             _for30_init:
2413   1136 FA FB FF      lea d, [bp + -5] ; $k
2414   1139 DA            push d
2415   113A 26 00 00      mov b, $0
2416   113D E7            pop d
2417   113E FD 43         mov [d], b
2418   1140             _for30_cond:
2419   1140 FA FB FF      lea d, [bp + -5] ; $k
2420   1143 2A            mov b, [d]
2421   1144             ; START RELATIONAL
2422   1144 D7            push a
2423   1145 11            mov a, b
2424   1146 FA FF FF      lea d, [bp + -1] ; $i
2425   1149 2A            mov b, [d]
2426   114A             ; START TERMS
2427   114A D7            push a
2428   114B 11            mov a, b
2429   114C 26 01 00      mov b, $1
2430   114F 60            sub a, b
2431   1150 27            mov b, a
2432   1151 E4            pop a
2433   1152             ; END TERMS
2434   1152 B0            cmp a, b
2435   1153 FD 73         slt ; <= (signed)
2436   1155 E4            pop a
2437   1156             ; END RELATIONAL
2438   1156 C0 00 00      cmp b, 0
2439   1159 C6 99 11      je _for30_exit
2440   115C             _for30_block:
2441   115C             ;; output[j++] = output_buffer[k]; 
2442   115C FA 07 00      lea d, [bp + 7] ; $output
2443   115F FD 2A         mov d, [d]
2444   1161 D7            push a
2445   1162 DA            push d
2446   1163 FA FD FF      lea d, [bp + -3] ; $j
2447   1166 2A            mov b, [d]
2448   1167 D8            push b
2449   1168 FD 77         inc b
2450   116A FA FD FF      lea d, [bp + -3] ; $j
2451   116D FD 43         mov [d], b
2452   116F E5            pop b
2453   1170 E7            pop d
2454   1171 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2455   1175 E4            pop a
2456   1176 DA            push d
2457   1177 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2458   117A D7            push a
2459   117B DA            push d
2460   117C FA FB FF      lea d, [bp + -5] ; $k
2461   117F 2A            mov b, [d]
2462   1180 E7            pop d
2463   1181 5A            add d, b
2464   1182 E4            pop a
2465   1183 32            mov bl, [d]
2466   1184 A7 00         mov bh, 0
2467   1186 E7            pop d
2468   1187 FD 3E         mov [d], bl
2469   1189             _for30_update:
2470   1189 FA FB FF      lea d, [bp + -5] ; $k
2471   118C 2A            mov b, [d]
2472   118D D8            push b
2473   118E FD 77         inc b
2474   1190 FA FB FF      lea d, [bp + -5] ; $k
2475   1193 FD 43         mov [d], b
2476   1195 E5            pop b
2477   1196 0A 40 11      jmp _for30_cond
2478   1199             _for30_exit:
2479   1199 0A 9C 11      jmp _if27_exit
2480   119C             _if27_exit:
2481   119C             ;; output[j] = '\0'; 
2482   119C FA 07 00      lea d, [bp + 7] ; $output
2483   119F FD 2A         mov d, [d]
2484   11A1 D7            push a
2485   11A2 DA            push d
2486   11A3 FA FD FF      lea d, [bp + -3] ; $j
2487   11A6 2A            mov b, [d]
2488   11A7 E7            pop d
2489   11A8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2490   11AC E4            pop a
2491   11AD DA            push d
2492   11AE 26 00 00      mov b, $0
2493   11B1 E7            pop d
2494   11B2 FD 3E         mov [d], bl
2495   11B4 F9            leave
2496   11B5 09            ret
2497   11B6             
2498   11B6             va_start:
2499   11B6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2500   11B9             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2501   11B9 FA 05 00      lea d, [bp + 5] ; $argp
2502   11BC FD 2A         mov d, [d]
2503   11BE 58 00 00      add d, 0
2504   11C1 DA            push d
2505   11C2 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2506   11C5 2A            mov b, [d]
2507   11C6             ; START TERMS
2508   11C6 D7            push a
2509   11C7 11            mov a, b
2510   11C8 26 02 00      mov b, 2
2511   11CB 56            add b, a
2512   11CC E4            pop a
2513   11CD             ; END TERMS
2514   11CD E7            pop d
2515   11CE FD 43         mov [d], b
2516   11D0 F9            leave
2517   11D1 09            ret
2518   11D2             
2519   11D2             va_arg:
2520   11D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2521   11D5             ; $p 
2522   11D5 52 02 00      sub sp, 2
2523   11D8             ;; p = argp->current_arg; 
2524   11D8 FA FF FF      lea d, [bp + -1] ; $p
2525   11DB DA            push d
2526   11DC FA 05 00      lea d, [bp + 5] ; $argp
2527   11DF FD 2A         mov d, [d]
2528   11E1 58 00 00      add d, 0
2529   11E4 2A            mov b, [d]
2530   11E5 E7            pop d
2531   11E6 FD 43         mov [d], b
2532   11E8             ;; argp->current_arg = argp->current_arg + size; 
2533   11E8 FA 05 00      lea d, [bp + 5] ; $argp
2534   11EB FD 2A         mov d, [d]
2535   11ED 58 00 00      add d, 0
2536   11F0 DA            push d
2537   11F1 FA 05 00      lea d, [bp + 5] ; $argp
2538   11F4 FD 2A         mov d, [d]
2539   11F6 58 00 00      add d, 0
2540   11F9 2A            mov b, [d]
2541   11FA             ; START TERMS
2542   11FA D7            push a
2543   11FB 11            mov a, b
2544   11FC FA 07 00      lea d, [bp + 7] ; $size
2545   11FF 2A            mov b, [d]
2546   1200 56            add b, a
2547   1201 E4            pop a
2548   1202             ; END TERMS
2549   1202 E7            pop d
2550   1203 FD 43         mov [d], b
2551   1205             ;; return p; 
2552   1205 FA FF FF      lea d, [bp + -1] ; $p
2553   1208 2A            mov b, [d]
2554   1209 F9            leave
2555   120A 09            ret
2556   120B             
2557   120B             va_end:
2558   120B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2559   120E             ;; argp->current_arg =   0   ; 
2560   120E FA 05 00      lea d, [bp + 5] ; $argp
2561   1211 FD 2A         mov d, [d]
2562   1213 58 00 00      add d, 0
2563   1216 DA            push d
2564   1217 26 00 00      mov b, $0
2565   121A E7            pop d
2566   121B FD 43         mov [d], b
2567   121D F9            leave
2568   121E 09            ret
2569   121F             
2570   121F             printf:
2571   121F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2572   1222             ; $p 
2573   1222             ; $fp 
2574   1222             ; $i 
2575   1222 52 06 00      sub sp, 6
2576   1225             ;; fp = format; 
2577   1225 FA FD FF      lea d, [bp + -3] ; $fp
2578   1228 DA            push d
2579   1229 FA 05 00      lea d, [bp + 5] ; $format
2580   122C 2A            mov b, [d]
2581   122D E7            pop d
2582   122E FD 43         mov [d], b
2583   1230             ;; p = &format + 2; 
2584   1230 FA FF FF      lea d, [bp + -1] ; $p
2585   1233 DA            push d
2586   1234 FA 05 00      lea d, [bp + 5] ; $format
2587   1237 2D            mov b, d
2588   1238             ; START TERMS
2589   1238 D7            push a
2590   1239 11            mov a, b
2591   123A 26 02 00      mov b, $2
2592   123D 56            add b, a
2593   123E E4            pop a
2594   123F             ; END TERMS
2595   123F E7            pop d
2596   1240 FD 43         mov [d], b
2597   1242             ;; for(;;){ 
2598   1242             _for31_init:
2599   1242             _for31_cond:
2600   1242             _for31_block:
2601   1242             ;; if(!*fp) break; 
2602   1242             _if32_cond:
2603   1242 FA FD FF      lea d, [bp + -3] ; $fp
2604   1245 2A            mov b, [d]
2605   1246 74            mov d, b
2606   1247 32            mov bl, [d]
2607   1248 A7 00         mov bh, 0
2608   124A C0 00 00      cmp b, 0
2609   124D FD 71         seq ; !
2610   124F C0 00 00      cmp b, 0
2611   1252 C6 5B 12      je _if32_else
2612   1255             _if32_true:
2613   1255             ;; break; 
2614   1255 0A 64 14      jmp _for31_exit ; for break
2615   1258 0A 61 14      jmp _if32_exit
2616   125B             _if32_else:
2617   125B             ;; if(*fp == '%'){ 
2618   125B             _if33_cond:
2619   125B FA FD FF      lea d, [bp + -3] ; $fp
2620   125E 2A            mov b, [d]
2621   125F 74            mov d, b
2622   1260 32            mov bl, [d]
2623   1261 A7 00         mov bh, 0
2624   1263             ; START RELATIONAL
2625   1263 D7            push a
2626   1264 11            mov a, b
2627   1265 26 25 00      mov b, $25
2628   1268 B0            cmp a, b
2629   1269 FD 71         seq ; ==
2630   126B E4            pop a
2631   126C             ; END RELATIONAL
2632   126C C0 00 00      cmp b, 0
2633   126F C6 45 14      je _if33_else
2634   1272             _if33_true:
2635   1272             ;; fp++; 
2636   1272 FA FD FF      lea d, [bp + -3] ; $fp
2637   1275 2A            mov b, [d]
2638   1276 D8            push b
2639   1277 FD 77         inc b
2640   1279 FA FD FF      lea d, [bp + -3] ; $fp
2641   127C FD 43         mov [d], b
2642   127E E5            pop b
2643   127F             ;; switch(*fp){ 
2644   127F             _switch34_expr:
2645   127F FA FD FF      lea d, [bp + -3] ; $fp
2646   1282 2A            mov b, [d]
2647   1283 74            mov d, b
2648   1284 32            mov bl, [d]
2649   1285 A7 00         mov bh, 0
2650   1287             _switch34_comparisons:
2651   1287 C1 6C         cmp bl, $6c
2652   1289 C6 B5 12      je _switch34_case0
2653   128C C1 4C         cmp bl, $4c
2654   128E C6 B5 12      je _switch34_case1
2655   1291 C1 64         cmp bl, $64
2656   1293 C6 85 13      je _switch34_case2
2657   1296 C1 69         cmp bl, $69
2658   1298 C6 85 13      je _switch34_case3
2659   129B C1 75         cmp bl, $75
2660   129D C6 A9 13      je _switch34_case4
2661   12A0 C1 78         cmp bl, $78
2662   12A2 C6 CD 13      je _switch34_case5
2663   12A5 C1 63         cmp bl, $63
2664   12A7 C6 EB 13      je _switch34_case6
2665   12AA C1 73         cmp bl, $73
2666   12AC C6 0A 14      je _switch34_case7
2667   12AF 0A 29 14      jmp _switch34_default
2668   12B2 0A 35 14      jmp _switch34_exit
2669   12B5             _switch34_case0:
2670   12B5             _switch34_case1:
2671   12B5             ;; fp++; 
2672   12B5 FA FD FF      lea d, [bp + -3] ; $fp
2673   12B8 2A            mov b, [d]
2674   12B9 D8            push b
2675   12BA FD 77         inc b
2676   12BC FA FD FF      lea d, [bp + -3] ; $fp
2677   12BF FD 43         mov [d], b
2678   12C1 E5            pop b
2679   12C2             ;; if(*fp == 'd' || *fp == 'i') 
2680   12C2             _if35_cond:
2681   12C2 FA FD FF      lea d, [bp + -3] ; $fp
2682   12C5 2A            mov b, [d]
2683   12C6 74            mov d, b
2684   12C7 32            mov bl, [d]
2685   12C8 A7 00         mov bh, 0
2686   12CA             ; START RELATIONAL
2687   12CA D7            push a
2688   12CB 11            mov a, b
2689   12CC 26 64 00      mov b, $64
2690   12CF B0            cmp a, b
2691   12D0 FD 71         seq ; ==
2692   12D2 E4            pop a
2693   12D3             ; END RELATIONAL
2694   12D3 D7            push a
2695   12D4 11            mov a, b
2696   12D5 FA FD FF      lea d, [bp + -3] ; $fp
2697   12D8 2A            mov b, [d]
2698   12D9 74            mov d, b
2699   12DA 32            mov bl, [d]
2700   12DB A7 00         mov bh, 0
2701   12DD             ; START RELATIONAL
2702   12DD D7            push a
2703   12DE 11            mov a, b
2704   12DF 26 69 00      mov b, $69
2705   12E2 B0            cmp a, b
2706   12E3 FD 71         seq ; ==
2707   12E5 E4            pop a
2708   12E6             ; END RELATIONAL
2709   12E6 FD A8         sor a, b ; ||
2710   12E8 E4            pop a
2711   12E9 C0 00 00      cmp b, 0
2712   12EC C6 03 13      je _if35_else
2713   12EF             _if35_true:
2714   12EF             ;; print_signed_long(*(long *)p); 
2715   12EF FD 79         mov g, b
2716   12F1 28            mov b, c
2717   12F2 FD AB         swp b
2718   12F4 D8            push b
2719   12F5 FD 27         mov b, g
2720   12F7 FD AB         swp b
2721   12F9 D8            push b
2722   12FA 07 F2 16      call print_signed_long
2723   12FD 51 04 00      add sp, 4
2724   1300 0A 70 13      jmp _if35_exit
2725   1303             _if35_else:
2726   1303             ;; if(*fp == 'u') 
2727   1303             _if36_cond:
2728   1303 FA FD FF      lea d, [bp + -3] ; $fp
2729   1306 2A            mov b, [d]
2730   1307 74            mov d, b
2731   1308 32            mov bl, [d]
2732   1309 A7 00         mov bh, 0
2733   130B             ; START RELATIONAL
2734   130B D7            push a
2735   130C 11            mov a, b
2736   130D 26 75 00      mov b, $75
2737   1310 B0            cmp a, b
2738   1311 FD 71         seq ; ==
2739   1313 E4            pop a
2740   1314             ; END RELATIONAL
2741   1314 C0 00 00      cmp b, 0
2742   1317 C6 2E 13      je _if36_else
2743   131A             _if36_true:
2744   131A             ;; print_unsigned_long(*(unsigned long *)p); 
2745   131A FD 79         mov g, b
2746   131C 28            mov b, c
2747   131D FD AB         swp b
2748   131F D8            push b
2749   1320 FD 27         mov b, g
2750   1322 FD AB         swp b
2751   1324 D8            push b
2752   1325 07 44 18      call print_unsigned_long
2753   1328 51 04 00      add sp, 4
2754   132B 0A 70 13      jmp _if36_exit
2755   132E             _if36_else:
2756   132E             ;; if(*fp == 'x') 
2757   132E             _if37_cond:
2758   132E FA FD FF      lea d, [bp + -3] ; $fp
2759   1331 2A            mov b, [d]
2760   1332 74            mov d, b
2761   1333 32            mov bl, [d]
2762   1334 A7 00         mov bh, 0
2763   1336             ; START RELATIONAL
2764   1336 D7            push a
2765   1337 11            mov a, b
2766   1338 26 78 00      mov b, $78
2767   133B B0            cmp a, b
2768   133C FD 71         seq ; ==
2769   133E E4            pop a
2770   133F             ; END RELATIONAL
2771   133F C0 00 00      cmp b, 0
2772   1342 C6 64 13      je _if37_else
2773   1345             _if37_true:
2774   1345             ;; printx32(*(long int *)p); 
2775   1345 FA FF FF      lea d, [bp + -1] ; $p
2776   1348 2A            mov b, [d]
2777   1349 74            mov d, b
2778   134A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2779   134D FD 39         mov c, b ; And place it into C
2780   134F 2A            mov b, [d] ; Lower Word in B
2781   1350 FD 79         mov g, b
2782   1352 28            mov b, c
2783   1353 FD AB         swp b
2784   1355 D8            push b
2785   1356 FD 27         mov b, g
2786   1358 FD AB         swp b
2787   135A D8            push b
2788   135B 07 7B 14      call printx32
2789   135E 51 04 00      add sp, 4
2790   1361 0A 70 13      jmp _if37_exit
2791   1364             _if37_else:
2792   1364             ;; err("Unexpected format in printf."); 
2793   1364 26 A4 2E      mov b, __s1 ; "Unexpected format in printf."
2794   1367 FD AB         swp b
2795   1369 D8            push b
2796   136A 07 66 14      call err
2797   136D 51 02 00      add sp, 2
2798   1370             _if37_exit:
2799   1370             _if36_exit:
2800   1370             _if35_exit:
2801   1370             ;; p = p + 4; 
2802   1370 FA FF FF      lea d, [bp + -1] ; $p
2803   1373 DA            push d
2804   1374 FA FF FF      lea d, [bp + -1] ; $p
2805   1377 2A            mov b, [d]
2806   1378             ; START TERMS
2807   1378 D7            push a
2808   1379 11            mov a, b
2809   137A 26 04 00      mov b, $4
2810   137D 56            add b, a
2811   137E E4            pop a
2812   137F             ; END TERMS
2813   137F E7            pop d
2814   1380 FD 43         mov [d], b
2815   1382             ;; break; 
2816   1382 0A 35 14      jmp _switch34_exit ; case break
2817   1385             _switch34_case2:
2818   1385             _switch34_case3:
2819   1385             ;; print_signed(*(int*)p); 
2820   1385 FA FF FF      lea d, [bp + -1] ; $p
2821   1388 2A            mov b, [d]
2822   1389 74            mov d, b
2823   138A 2A            mov b, [d]
2824   138B FD AB         swp b
2825   138D D8            push b
2826   138E 07 02 16      call print_signed
2827   1391 51 02 00      add sp, 2
2828   1394             ;; p = p + 2; 
2829   1394 FA FF FF      lea d, [bp + -1] ; $p
2830   1397 DA            push d
2831   1398 FA FF FF      lea d, [bp + -1] ; $p
2832   139B 2A            mov b, [d]
2833   139C             ; START TERMS
2834   139C D7            push a
2835   139D 11            mov a, b
2836   139E 26 02 00      mov b, $2
2837   13A1 56            add b, a
2838   13A2 E4            pop a
2839   13A3             ; END TERMS
2840   13A3 E7            pop d
2841   13A4 FD 43         mov [d], b
2842   13A6             ;; break; 
2843   13A6 0A 35 14      jmp _switch34_exit ; case break
2844   13A9             _switch34_case4:
2845   13A9             ;; print_unsigned(*(unsigned int*)p); 
2846   13A9 FA FF FF      lea d, [bp + -1] ; $p
2847   13AC 2A            mov b, [d]
2848   13AD 74            mov d, b
2849   13AE 2A            mov b, [d]
2850   13AF FD AB         swp b
2851   13B1 D8            push b
2852   13B2 07 41 19      call print_unsigned
2853   13B5 51 02 00      add sp, 2
2854   13B8             ;; p = p + 2; 
2855   13B8 FA FF FF      lea d, [bp + -1] ; $p
2856   13BB DA            push d
2857   13BC FA FF FF      lea d, [bp + -1] ; $p
2858   13BF 2A            mov b, [d]
2859   13C0             ; START TERMS
2860   13C0 D7            push a
2861   13C1 11            mov a, b
2862   13C2 26 02 00      mov b, $2
2863   13C5 56            add b, a
2864   13C6 E4            pop a
2865   13C7             ; END TERMS
2866   13C7 E7            pop d
2867   13C8 FD 43         mov [d], b
2868   13CA             ;; break; 
2869   13CA 0A 35 14      jmp _switch34_exit ; case break
2870   13CD             _switch34_case5:
2871   13CD             
2872   13CD             ; --- BEGIN INLINE ASM BLOCK
2873   13CD FA FF FF      lea d, [bp + -1] ; $p
2874   13D0 FD 2A         mov d, [d]
2875   13D2 2A            mov b, [d]
2876   13D3 07 94 1D      call print_u16x
2877   13D6             ; --- END INLINE ASM BLOCK
2878   13D6             
2879   13D6             ;; p = p + 2; 
2880   13D6 FA FF FF      lea d, [bp + -1] ; $p
2881   13D9 DA            push d
2882   13DA FA FF FF      lea d, [bp + -1] ; $p
2883   13DD 2A            mov b, [d]
2884   13DE             ; START TERMS
2885   13DE D7            push a
2886   13DF 11            mov a, b
2887   13E0 26 02 00      mov b, $2
2888   13E3 56            add b, a
2889   13E4 E4            pop a
2890   13E5             ; END TERMS
2891   13E5 E7            pop d
2892   13E6 FD 43         mov [d], b
2893   13E8             ;; break; 
2894   13E8 0A 35 14      jmp _switch34_exit ; case break
2895   13EB             _switch34_case6:
2896   13EB             
2897   13EB             ; --- BEGIN INLINE ASM BLOCK
2898   13EB FA FF FF      lea d, [bp + -1] ; $p
2899   13EE FD 2A         mov d, [d]
2900   13F0 1E            mov al, [d]
2901   13F1 23            mov ah, al
2902   13F2 07 F2 1B      call _putchar
2903   13F5             ; --- END INLINE ASM BLOCK
2904   13F5             
2905   13F5             ;; p = p + 2; 
2906   13F5 FA FF FF      lea d, [bp + -1] ; $p
2907   13F8 DA            push d
2908   13F9 FA FF FF      lea d, [bp + -1] ; $p
2909   13FC 2A            mov b, [d]
2910   13FD             ; START TERMS
2911   13FD D7            push a
2912   13FE 11            mov a, b
2913   13FF 26 02 00      mov b, $2
2914   1402 56            add b, a
2915   1403 E4            pop a
2916   1404             ; END TERMS
2917   1404 E7            pop d
2918   1405 FD 43         mov [d], b
2919   1407             ;; break; 
2920   1407 0A 35 14      jmp _switch34_exit ; case break
2921   140A             _switch34_case7:
2922   140A             
2923   140A             ; --- BEGIN INLINE ASM BLOCK
2924   140A FA FF FF      lea d, [bp + -1] ; $p
2925   140D FD 2A         mov d, [d]
2926   140F FD 2A         mov d, [d]
2927   1411 07 3C 1D      call _puts
2928   1414             ; --- END INLINE ASM BLOCK
2929   1414             
2930   1414             ;; p = p + 2; 
2931   1414 FA FF FF      lea d, [bp + -1] ; $p
2932   1417 DA            push d
2933   1418 FA FF FF      lea d, [bp + -1] ; $p
2934   141B 2A            mov b, [d]
2935   141C             ; START TERMS
2936   141C D7            push a
2937   141D 11            mov a, b
2938   141E 26 02 00      mov b, $2
2939   1421 56            add b, a
2940   1422 E4            pop a
2941   1423             ; END TERMS
2942   1423 E7            pop d
2943   1424 FD 43         mov [d], b
2944   1426             ;; break; 
2945   1426 0A 35 14      jmp _switch34_exit ; case break
2946   1429             _switch34_default:
2947   1429             ;; print("Error: Unknown argument type.\n"); 
2948   1429 26 C1 2E      mov b, __s2 ; "Error: Unknown argument type.\n"
2949   142C FD AB         swp b
2950   142E D8            push b
2951   142F 07 59 1A      call print
2952   1432 51 02 00      add sp, 2
2953   1435             _switch34_exit:
2954   1435             ;; fp++; 
2955   1435 FA FD FF      lea d, [bp + -3] ; $fp
2956   1438 2A            mov b, [d]
2957   1439 D8            push b
2958   143A FD 77         inc b
2959   143C FA FD FF      lea d, [bp + -3] ; $fp
2960   143F FD 43         mov [d], b
2961   1441 E5            pop b
2962   1442 0A 61 14      jmp _if33_exit
2963   1445             _if33_else:
2964   1445             ;; putchar(*fp); 
2965   1445 FA FD FF      lea d, [bp + -3] ; $fp
2966   1448 2A            mov b, [d]
2967   1449 74            mov d, b
2968   144A 32            mov bl, [d]
2969   144B A7 00         mov bh, 0
2970   144D DD            push bl
2971   144E 07 11 1A      call putchar
2972   1451 51 01 00      add sp, 1
2973   1454             ;; fp++; 
2974   1454 FA FD FF      lea d, [bp + -3] ; $fp
2975   1457 2A            mov b, [d]
2976   1458 D8            push b
2977   1459 FD 77         inc b
2978   145B FA FD FF      lea d, [bp + -3] ; $fp
2979   145E FD 43         mov [d], b
2980   1460 E5            pop b
2981   1461             _if33_exit:
2982   1461             _if32_exit:
2983   1461             _for31_update:
2984   1461 0A 42 12      jmp _for31_cond
2985   1464             _for31_exit:
2986   1464 F9            leave
2987   1465 09            ret
2988   1466             
2989   1466             err:
2990   1466 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2991   1469             ;; print(e); 
2992   1469 FA 05 00      lea d, [bp + 5] ; $e
2993   146C 2A            mov b, [d]
2994   146D FD AB         swp b
2995   146F D8            push b
2996   1470 07 59 1A      call print
2997   1473 51 02 00      add sp, 2
2998   1476             ;; exit(); 
2999   1476 07 35 07      call exit
3000   1479 F9            leave
3001   147A 09            ret
3002   147B             
3003   147B             printx32:
3004   147B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3005   147E             
3006   147E             ; --- BEGIN INLINE ASM BLOCK
3007   147E FA 05 00      lea d, [bp + 5] ; $hex
3008   1481 2B 02 00      mov b, [d+2]
3009   1484 07 94 1D      call print_u16x
3010   1487 2A            mov b, [d]
3011   1488 07 94 1D      call print_u16x
3012   148B             ; --- END INLINE ASM BLOCK
3013   148B             
3014   148B F9            leave
3015   148C 09            ret
3016   148D             
3017   148D             printx16:
3018   148D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3019   1490             
3020   1490             ; --- BEGIN INLINE ASM BLOCK
3021   1490 FA 05 00      lea d, [bp + 5] ; $hex
3022   1493 2A            mov b, [d]
3023   1494 07 94 1D      call print_u16x
3024   1497             ; --- END INLINE ASM BLOCK
3025   1497             
3026   1497 F9            leave
3027   1498 09            ret
3028   1499             
3029   1499             printx8:
3030   1499 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3031   149C             
3032   149C             ; --- BEGIN INLINE ASM BLOCK
3033   149C FA 05 00      lea d, [bp + 5] ; $hex
3034   149F 32            mov bl, [d]
3035   14A0 07 D8 1D      call print_u8x
3036   14A3             ; --- END INLINE ASM BLOCK
3037   14A3             
3038   14A3 F9            leave
3039   14A4 09            ret
3040   14A5             
3041   14A5             hex_to_int:
3042   14A5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3043   14A8             ; $value 
3044   14A8 10 00 00      mov a, $0
3045   14AB 45 FF FF      mov [bp + -1], a
3046   14AE             ; $i 
3047   14AE             ; $hex_char 
3048   14AE             ; $len 
3049   14AE 52 07 00      sub sp, 7
3050   14B1             ;; len = strlen(hex_string); 
3051   14B1 FA FA FF      lea d, [bp + -6] ; $len
3052   14B4 DA            push d
3053   14B5 FA 05 00      lea d, [bp + 5] ; $hex_string
3054   14B8 2A            mov b, [d]
3055   14B9 FD AB         swp b
3056   14BB D8            push b
3057   14BC 07 EC 06      call strlen
3058   14BF 51 02 00      add sp, 2
3059   14C2 E7            pop d
3060   14C3 FD 43         mov [d], b
3061   14C5             ;; for (i = 0; i < len; i++) { 
3062   14C5             _for38_init:
3063   14C5 FA FD FF      lea d, [bp + -3] ; $i
3064   14C8 DA            push d
3065   14C9 26 00 00      mov b, $0
3066   14CC E7            pop d
3067   14CD FD 43         mov [d], b
3068   14CF             _for38_cond:
3069   14CF FA FD FF      lea d, [bp + -3] ; $i
3070   14D2 2A            mov b, [d]
3071   14D3             ; START RELATIONAL
3072   14D3 D7            push a
3073   14D4 11            mov a, b
3074   14D5 FA FA FF      lea d, [bp + -6] ; $len
3075   14D8 2A            mov b, [d]
3076   14D9 B0            cmp a, b
3077   14DA FD 73         slt ; <= (signed)
3078   14DC E4            pop a
3079   14DD             ; END RELATIONAL
3080   14DD C0 00 00      cmp b, 0
3081   14E0 C6 E2 15      je _for38_exit
3082   14E3             _for38_block:
3083   14E3             ;; hex_char = hex_string[i]; 
3084   14E3 FA FC FF      lea d, [bp + -4] ; $hex_char
3085   14E6 DA            push d
3086   14E7 FA 05 00      lea d, [bp + 5] ; $hex_string
3087   14EA FD 2A         mov d, [d]
3088   14EC D7            push a
3089   14ED DA            push d
3090   14EE FA FD FF      lea d, [bp + -3] ; $i
3091   14F1 2A            mov b, [d]
3092   14F2 E7            pop d
3093   14F3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3094   14F7 E4            pop a
3095   14F8 32            mov bl, [d]
3096   14F9 A7 00         mov bh, 0
3097   14FB E7            pop d
3098   14FC FD 3E         mov [d], bl
3099   14FE             ;; if (hex_char >= 'a' && hex_char <= 'f')  
3100   14FE             _if39_cond:
3101   14FE FA FC FF      lea d, [bp + -4] ; $hex_char
3102   1501 32            mov bl, [d]
3103   1502 A7 00         mov bh, 0
3104   1504             ; START RELATIONAL
3105   1504 D7            push a
3106   1505 11            mov a, b
3107   1506 26 61 00      mov b, $61
3108   1509 B0            cmp a, b
3109   150A FD 80         sge ; >=
3110   150C E4            pop a
3111   150D             ; END RELATIONAL
3112   150D D7            push a
3113   150E 11            mov a, b
3114   150F FA FC FF      lea d, [bp + -4] ; $hex_char
3115   1512 32            mov bl, [d]
3116   1513 A7 00         mov bh, 0
3117   1515             ; START RELATIONAL
3118   1515 D7            push a
3119   1516 11            mov a, b
3120   1517 26 66 00      mov b, $66
3121   151A B0            cmp a, b
3122   151B FD 74         sle ; <=
3123   151D E4            pop a
3124   151E             ; END RELATIONAL
3125   151E FD A7         sand a, b ; &&
3126   1520 E4            pop a
3127   1521 C0 00 00      cmp b, 0
3128   1524 C6 55 15      je _if39_else
3129   1527             _if39_true:
3130   1527             ;; value = (value * 16) + (hex_char - 'a' + 10); 
3131   1527 FA FF FF      lea d, [bp + -1] ; $value
3132   152A DA            push d
3133   152B FA FF FF      lea d, [bp + -1] ; $value
3134   152E 2A            mov b, [d]
3135   152F             ; START FACTORS
3136   152F D7            push a
3137   1530 11            mov a, b
3138   1531 26 10 00      mov b, $10
3139   1534 AC            mul a, b ; *
3140   1535 11            mov a, b
3141   1536 27            mov b, a
3142   1537 E4            pop a
3143   1538             ; END FACTORS
3144   1538             ; START TERMS
3145   1538 D7            push a
3146   1539 11            mov a, b
3147   153A FA FC FF      lea d, [bp + -4] ; $hex_char
3148   153D 32            mov bl, [d]
3149   153E A7 00         mov bh, 0
3150   1540             ; START TERMS
3151   1540 D7            push a
3152   1541 11            mov a, b
3153   1542 26 61 00      mov b, $61
3154   1545 60            sub a, b
3155   1546 27            mov b, a
3156   1547 11            mov a, b
3157   1548 26 0A 00      mov b, $a
3158   154B 56            add b, a
3159   154C E4            pop a
3160   154D             ; END TERMS
3161   154D 56            add b, a
3162   154E E4            pop a
3163   154F             ; END TERMS
3164   154F E7            pop d
3165   1550 FD 43         mov [d], b
3166   1552 0A D2 15      jmp _if39_exit
3167   1555             _if39_else:
3168   1555             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3169   1555             _if40_cond:
3170   1555 FA FC FF      lea d, [bp + -4] ; $hex_char
3171   1558 32            mov bl, [d]
3172   1559 A7 00         mov bh, 0
3173   155B             ; START RELATIONAL
3174   155B D7            push a
3175   155C 11            mov a, b
3176   155D 26 41 00      mov b, $41
3177   1560 B0            cmp a, b
3178   1561 FD 80         sge ; >=
3179   1563 E4            pop a
3180   1564             ; END RELATIONAL
3181   1564 D7            push a
3182   1565 11            mov a, b
3183   1566 FA FC FF      lea d, [bp + -4] ; $hex_char
3184   1569 32            mov bl, [d]
3185   156A A7 00         mov bh, 0
3186   156C             ; START RELATIONAL
3187   156C D7            push a
3188   156D 11            mov a, b
3189   156E 26 46 00      mov b, $46
3190   1571 B0            cmp a, b
3191   1572 FD 74         sle ; <=
3192   1574 E4            pop a
3193   1575             ; END RELATIONAL
3194   1575 FD A7         sand a, b ; &&
3195   1577 E4            pop a
3196   1578 C0 00 00      cmp b, 0
3197   157B C6 AC 15      je _if40_else
3198   157E             _if40_true:
3199   157E             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3200   157E FA FF FF      lea d, [bp + -1] ; $value
3201   1581 DA            push d
3202   1582 FA FF FF      lea d, [bp + -1] ; $value
3203   1585 2A            mov b, [d]
3204   1586             ; START FACTORS
3205   1586 D7            push a
3206   1587 11            mov a, b
3207   1588 26 10 00      mov b, $10
3208   158B AC            mul a, b ; *
3209   158C 11            mov a, b
3210   158D 27            mov b, a
3211   158E E4            pop a
3212   158F             ; END FACTORS
3213   158F             ; START TERMS
3214   158F D7            push a
3215   1590 11            mov a, b
3216   1591 FA FC FF      lea d, [bp + -4] ; $hex_char
3217   1594 32            mov bl, [d]
3218   1595 A7 00         mov bh, 0
3219   1597             ; START TERMS
3220   1597 D7            push a
3221   1598 11            mov a, b
3222   1599 26 41 00      mov b, $41
3223   159C 60            sub a, b
3224   159D 27            mov b, a
3225   159E 11            mov a, b
3226   159F 26 0A 00      mov b, $a
3227   15A2 56            add b, a
3228   15A3 E4            pop a
3229   15A4             ; END TERMS
3230   15A4 56            add b, a
3231   15A5 E4            pop a
3232   15A6             ; END TERMS
3233   15A6 E7            pop d
3234   15A7 FD 43         mov [d], b
3235   15A9 0A D2 15      jmp _if40_exit
3236   15AC             _if40_else:
3237   15AC             ;; value = (value * 16) + (hex_char - '0'); 
3238   15AC FA FF FF      lea d, [bp + -1] ; $value
3239   15AF DA            push d
3240   15B0 FA FF FF      lea d, [bp + -1] ; $value
3241   15B3 2A            mov b, [d]
3242   15B4             ; START FACTORS
3243   15B4 D7            push a
3244   15B5 11            mov a, b
3245   15B6 26 10 00      mov b, $10
3246   15B9 AC            mul a, b ; *
3247   15BA 11            mov a, b
3248   15BB 27            mov b, a
3249   15BC E4            pop a
3250   15BD             ; END FACTORS
3251   15BD             ; START TERMS
3252   15BD D7            push a
3253   15BE 11            mov a, b
3254   15BF FA FC FF      lea d, [bp + -4] ; $hex_char
3255   15C2 32            mov bl, [d]
3256   15C3 A7 00         mov bh, 0
3257   15C5             ; START TERMS
3258   15C5 D7            push a
3259   15C6 11            mov a, b
3260   15C7 26 30 00      mov b, $30
3261   15CA 60            sub a, b
3262   15CB 27            mov b, a
3263   15CC E4            pop a
3264   15CD             ; END TERMS
3265   15CD 56            add b, a
3266   15CE E4            pop a
3267   15CF             ; END TERMS
3268   15CF E7            pop d
3269   15D0 FD 43         mov [d], b
3270   15D2             _if40_exit:
3271   15D2             _if39_exit:
3272   15D2             _for38_update:
3273   15D2 FA FD FF      lea d, [bp + -3] ; $i
3274   15D5 2A            mov b, [d]
3275   15D6 D8            push b
3276   15D7 FD 77         inc b
3277   15D9 FA FD FF      lea d, [bp + -3] ; $i
3278   15DC FD 43         mov [d], b
3279   15DE E5            pop b
3280   15DF 0A CF 14      jmp _for38_cond
3281   15E2             _for38_exit:
3282   15E2             ;; return value; 
3283   15E2 FA FF FF      lea d, [bp + -1] ; $value
3284   15E5 2A            mov b, [d]
3285   15E6 F9            leave
3286   15E7 09            ret
3287   15E8             
3288   15E8             gets:
3289   15E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3290   15EB             
3291   15EB             ; --- BEGIN INLINE ASM BLOCK
3292   15EB FA 05 00      lea d, [bp + 5] ; $s
3293   15EE 15            mov a, [d]
3294   15EF 3C            mov d, a
3295   15F0 07 F9 1B      call _gets
3296   15F3             ; --- END INLINE ASM BLOCK
3297   15F3             
3298   15F3             ;; return strlen(s); 
3299   15F3 FA 05 00      lea d, [bp + 5] ; $s
3300   15F6 2A            mov b, [d]
3301   15F7 FD AB         swp b
3302   15F9 D8            push b
3303   15FA 07 EC 06      call strlen
3304   15FD 51 02 00      add sp, 2
3305   1600 F9            leave
3306   1601 09            ret
3307   1602             
3308   1602             print_signed:
3309   1602 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3310   1605             ; $digits 
3311   1605             ; $i 
3312   1605 10 00 00      mov a, $0
3313   1608 45 FA FF      mov [bp + -6], a
3314   160B 52 07 00      sub sp, 7
3315   160E             ;; if (num < 0) { 
3316   160E             _if41_cond:
3317   160E FA 05 00      lea d, [bp + 5] ; $num
3318   1611 2A            mov b, [d]
3319   1612             ; START RELATIONAL
3320   1612 D7            push a
3321   1613 11            mov a, b
3322   1614 26 00 00      mov b, $0
3323   1617 B0            cmp a, b
3324   1618 FD 73         slt ; <= (signed)
3325   161A E4            pop a
3326   161B             ; END RELATIONAL
3327   161B C0 00 00      cmp b, 0
3328   161E C6 3B 16      je _if41_else
3329   1621             _if41_true:
3330   1621             ;; putchar('-'); 
3331   1621 26 2D 00      mov b, $2d
3332   1624 DD            push bl
3333   1625 07 11 1A      call putchar
3334   1628 51 01 00      add sp, 1
3335   162B             ;; num = -num; 
3336   162B FA 05 00      lea d, [bp + 5] ; $num
3337   162E DA            push d
3338   162F FA 05 00      lea d, [bp + 5] ; $num
3339   1632 2A            mov b, [d]
3340   1633 FD 97         neg b
3341   1635 E7            pop d
3342   1636 FD 43         mov [d], b
3343   1638 0A 5D 16      jmp _if41_exit
3344   163B             _if41_else:
3345   163B             ;; if (num == 0) { 
3346   163B             _if42_cond:
3347   163B FA 05 00      lea d, [bp + 5] ; $num
3348   163E 2A            mov b, [d]
3349   163F             ; START RELATIONAL
3350   163F D7            push a
3351   1640 11            mov a, b
3352   1641 26 00 00      mov b, $0
3353   1644 B0            cmp a, b
3354   1645 FD 71         seq ; ==
3355   1647 E4            pop a
3356   1648             ; END RELATIONAL
3357   1648 C0 00 00      cmp b, 0
3358   164B C6 5D 16      je _if42_exit
3359   164E             _if42_true:
3360   164E             ;; putchar('0'); 
3361   164E 26 30 00      mov b, $30
3362   1651 DD            push bl
3363   1652 07 11 1A      call putchar
3364   1655 51 01 00      add sp, 1
3365   1658             ;; return; 
3366   1658 F9            leave
3367   1659 09            ret
3368   165A 0A 5D 16      jmp _if42_exit
3369   165D             _if42_exit:
3370   165D             _if41_exit:
3371   165D             ;; while (num > 0) { 
3372   165D             _while43_cond:
3373   165D FA 05 00      lea d, [bp + 5] ; $num
3374   1660 2A            mov b, [d]
3375   1661             ; START RELATIONAL
3376   1661 D7            push a
3377   1662 11            mov a, b
3378   1663 26 00 00      mov b, $0
3379   1666 B0            cmp a, b
3380   1667 FD 7F         sgt ; >
3381   1669 E4            pop a
3382   166A             ; END RELATIONAL
3383   166A C0 00 00      cmp b, 0
3384   166D C6 B7 16      je _while43_exit
3385   1670             _while43_block:
3386   1670             ;; digits[i] = '0' + (num % 10); 
3387   1670 FA FC FF      lea d, [bp + -4] ; $digits
3388   1673 D7            push a
3389   1674 DA            push d
3390   1675 FA FA FF      lea d, [bp + -6] ; $i
3391   1678 2A            mov b, [d]
3392   1679 E7            pop d
3393   167A 5A            add d, b
3394   167B E4            pop a
3395   167C DA            push d
3396   167D 26 30 00      mov b, $30
3397   1680             ; START TERMS
3398   1680 D7            push a
3399   1681 11            mov a, b
3400   1682 FA 05 00      lea d, [bp + 5] ; $num
3401   1685 2A            mov b, [d]
3402   1686             ; START FACTORS
3403   1686 D7            push a
3404   1687 11            mov a, b
3405   1688 26 0A 00      mov b, $a
3406   168B AE            div a, b ; 
3407   168C 11            mov a, b
3408   168D 27            mov b, a
3409   168E E4            pop a
3410   168F             ; END FACTORS
3411   168F 56            add b, a
3412   1690 E4            pop a
3413   1691             ; END TERMS
3414   1691 E7            pop d
3415   1692 FD 3E         mov [d], bl
3416   1694             ;; num = num / 10; 
3417   1694 FA 05 00      lea d, [bp + 5] ; $num
3418   1697 DA            push d
3419   1698 FA 05 00      lea d, [bp + 5] ; $num
3420   169B 2A            mov b, [d]
3421   169C             ; START FACTORS
3422   169C D7            push a
3423   169D 11            mov a, b
3424   169E 26 0A 00      mov b, $a
3425   16A1 AE            div a, b
3426   16A2 27            mov b, a
3427   16A3 E4            pop a
3428   16A4             ; END FACTORS
3429   16A4 E7            pop d
3430   16A5 FD 43         mov [d], b
3431   16A7             ;; i++; 
3432   16A7 FA FA FF      lea d, [bp + -6] ; $i
3433   16AA 2A            mov b, [d]
3434   16AB D8            push b
3435   16AC FD 77         inc b
3436   16AE FA FA FF      lea d, [bp + -6] ; $i
3437   16B1 FD 43         mov [d], b
3438   16B3 E5            pop b
3439   16B4 0A 5D 16      jmp _while43_cond
3440   16B7             _while43_exit:
3441   16B7             ;; while (i > 0) { 
3442   16B7             _while44_cond:
3443   16B7 FA FA FF      lea d, [bp + -6] ; $i
3444   16BA 2A            mov b, [d]
3445   16BB             ; START RELATIONAL
3446   16BB D7            push a
3447   16BC 11            mov a, b
3448   16BD 26 00 00      mov b, $0
3449   16C0 B0            cmp a, b
3450   16C1 FD 7F         sgt ; >
3451   16C3 E4            pop a
3452   16C4             ; END RELATIONAL
3453   16C4 C0 00 00      cmp b, 0
3454   16C7 C6 F0 16      je _while44_exit
3455   16CA             _while44_block:
3456   16CA             ;; i--; 
3457   16CA FA FA FF      lea d, [bp + -6] ; $i
3458   16CD 2A            mov b, [d]
3459   16CE D8            push b
3460   16CF FD 7D         dec b
3461   16D1 FA FA FF      lea d, [bp + -6] ; $i
3462   16D4 FD 43         mov [d], b
3463   16D6 E5            pop b
3464   16D7             ;; putchar(digits[i]); 
3465   16D7 FA FC FF      lea d, [bp + -4] ; $digits
3466   16DA D7            push a
3467   16DB DA            push d
3468   16DC FA FA FF      lea d, [bp + -6] ; $i
3469   16DF 2A            mov b, [d]
3470   16E0 E7            pop d
3471   16E1 5A            add d, b
3472   16E2 E4            pop a
3473   16E3 32            mov bl, [d]
3474   16E4 A7 00         mov bh, 0
3475   16E6 DD            push bl
3476   16E7 07 11 1A      call putchar
3477   16EA 51 01 00      add sp, 1
3478   16ED 0A B7 16      jmp _while44_cond
3479   16F0             _while44_exit:
3480   16F0 F9            leave
3481   16F1 09            ret
3482   16F2             
3483   16F2             print_signed_long:
3484   16F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3485   16F5             ; $digits 
3486   16F5             ; $i 
3487   16F5 10 00 00      mov a, $0
3488   16F8 45 F5 FF      mov [bp + -11], a
3489   16FB 52 0C 00      sub sp, 12
3490   16FE             ;; if (num < 0) { 
3491   16FE             _if45_cond:
3492   16FE FA 05 00      lea d, [bp + 5] ; $num
3493   1701 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3494   1704 FD 39         mov c, b ; And place it into C
3495   1706 2A            mov b, [d] ; Lower Word in B
3496   1707             ; START RELATIONAL
3497   1707 D7            push a
3498   1708 FD D8         push g
3499   170A 11            mov a, b
3500   170B FD 7A         mov g, c
3501   170D 26 00 00      mov b, $0
3502   1710 4D            mov si, a
3503   1711 11            mov a, b
3504   1712 4F            mov di, a
3505   1713 FD 12         mov a, g
3506   1715 28            mov b, c
3507   1716 B0            cmp a, b
3508   1717 FD 75         slu ; <
3509   1719 D8            push b
3510   171A 28            mov b, c
3511   171B FD 71         seq ; ==
3512   171D D8            push b
3513   171E 50            mov a, di
3514   171F 27            mov b, a
3515   1720 4E            mov a, si
3516   1721 B0            cmp a, b
3517   1722 FD 75         slu ; <
3518   1724 E4            pop a
3519   1725 FD 92         and b, a
3520   1727 E4            pop a
3521   1728 FD 70         or b, a
3522   172A               
3523   172A FD F1         pop g
3524   172C E4            pop a
3525   172D             ; END RELATIONAL
3526   172D C0 00 00      cmp b, 0
3527   1730 C6 57 17      je _if45_else
3528   1733             _if45_true:
3529   1733             ;; putchar('-'); 
3530   1733 26 2D 00      mov b, $2d
3531   1736 DD            push bl
3532   1737 07 11 1A      call putchar
3533   173A 51 01 00      add sp, 1
3534   173D             ;; num = -num; 
3535   173D FA 05 00      lea d, [bp + 5] ; $num
3536   1740 DA            push d
3537   1741 FA 05 00      lea d, [bp + 5] ; $num
3538   1744 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3539   1747 FD 39         mov c, b ; And place it into C
3540   1749 2A            mov b, [d] ; Lower Word in B
3541   174A FD 97         neg b
3542   174C E7            pop d
3543   174D FD 43         mov [d], b
3544   174F 28            mov b, c
3545   1750 FD 44 02 00   mov [d + 2], b
3546   1754 0A 8E 17      jmp _if45_exit
3547   1757             _if45_else:
3548   1757             ;; if (num == 0) { 
3549   1757             _if46_cond:
3550   1757 FA 05 00      lea d, [bp + 5] ; $num
3551   175A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3552   175D FD 39         mov c, b ; And place it into C
3553   175F 2A            mov b, [d] ; Lower Word in B
3554   1760             ; START RELATIONAL
3555   1760 D7            push a
3556   1761 FD D8         push g
3557   1763 11            mov a, b
3558   1764 FD 7A         mov g, c
3559   1766 26 00 00      mov b, $0
3560   1769 B0            cmp a, b
3561   176A FD 71         seq ; ==
3562   176C D8            push b
3563   176D 12            mov a, c
3564   176E FD 27         mov b, g
3565   1770 B0            cmp a, b
3566   1771 FD 71         seq ; ==
3567   1773 E4            pop a
3568   1774 FD A7         sand a, b
3569   1776 FD F1         pop g
3570   1778 E4            pop a
3571   1779             ; END RELATIONAL
3572   1779 C0 00 00      cmp b, 0
3573   177C C6 8E 17      je _if46_exit
3574   177F             _if46_true:
3575   177F             ;; putchar('0'); 
3576   177F 26 30 00      mov b, $30
3577   1782 DD            push bl
3578   1783 07 11 1A      call putchar
3579   1786 51 01 00      add sp, 1
3580   1789             ;; return; 
3581   1789 F9            leave
3582   178A 09            ret
3583   178B 0A 8E 17      jmp _if46_exit
3584   178E             _if46_exit:
3585   178E             _if45_exit:
3586   178E             ;; while (num > 0) { 
3587   178E             _while47_cond:
3588   178E FA 05 00      lea d, [bp + 5] ; $num
3589   1791 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3590   1794 FD 39         mov c, b ; And place it into C
3591   1796 2A            mov b, [d] ; Lower Word in B
3592   1797             ; START RELATIONAL
3593   1797 D7            push a
3594   1798 FD D8         push g
3595   179A 11            mov a, b
3596   179B FD 7A         mov g, c
3597   179D 26 00 00      mov b, $0
3598   17A0 B0            cmp a, b
3599   17A1 FD 7F         sgt ; >
3600   17A3 FD F1         pop g
3601   17A5 E4            pop a
3602   17A6             ; END RELATIONAL
3603   17A6 C0 00 00      cmp b, 0
3604   17A9 C6 09 18      je _while47_exit
3605   17AC             _while47_block:
3606   17AC             ;; digits[i] = '0' + (num % 10); 
3607   17AC FA F7 FF      lea d, [bp + -9] ; $digits
3608   17AF D7            push a
3609   17B0 DA            push d
3610   17B1 FA F5 FF      lea d, [bp + -11] ; $i
3611   17B4 2A            mov b, [d]
3612   17B5 E7            pop d
3613   17B6 5A            add d, b
3614   17B7 E4            pop a
3615   17B8 DA            push d
3616   17B9 26 30 00      mov b, $30
3617   17BC             ; START TERMS
3618   17BC D7            push a
3619   17BD 11            mov a, b
3620   17BE FA 05 00      lea d, [bp + 5] ; $num
3621   17C1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3622   17C4 FD 39         mov c, b ; And place it into C
3623   17C6 2A            mov b, [d] ; Lower Word in B
3624   17C7             ; START FACTORS
3625   17C7 D7            push a
3626   17C8 11            mov a, b
3627   17C9 26 0A 00      mov b, $a
3628   17CC AE            div a, b ; 
3629   17CD 11            mov a, b
3630   17CE 27            mov b, a
3631   17CF E4            pop a
3632   17D0             ; END FACTORS
3633   17D0 54            add a, b
3634   17D1 D7            push a
3635   17D2 FD 12         mov a, g
3636   17D4 28            mov b, c
3637   17D5 5C            adc a, b
3638   17D6 39            mov c, a
3639   17D7 E5            pop b
3640   17D8 E4            pop a
3641   17D9             ; END TERMS
3642   17D9 E7            pop d
3643   17DA FD 3E         mov [d], bl
3644   17DC             ;; num = num / 10; 
3645   17DC FA 05 00      lea d, [bp + 5] ; $num
3646   17DF DA            push d
3647   17E0 FA 05 00      lea d, [bp + 5] ; $num
3648   17E3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3649   17E6 FD 39         mov c, b ; And place it into C
3650   17E8 2A            mov b, [d] ; Lower Word in B
3651   17E9             ; START FACTORS
3652   17E9 D7            push a
3653   17EA 11            mov a, b
3654   17EB 26 0A 00      mov b, $a
3655   17EE AE            div a, b
3656   17EF 27            mov b, a
3657   17F0 E4            pop a
3658   17F1             ; END FACTORS
3659   17F1 E7            pop d
3660   17F2 FD 43         mov [d], b
3661   17F4 28            mov b, c
3662   17F5 FD 44 02 00   mov [d + 2], b
3663   17F9             ;; i++; 
3664   17F9 FA F5 FF      lea d, [bp + -11] ; $i
3665   17FC 2A            mov b, [d]
3666   17FD D8            push b
3667   17FE FD 77         inc b
3668   1800 FA F5 FF      lea d, [bp + -11] ; $i
3669   1803 FD 43         mov [d], b
3670   1805 E5            pop b
3671   1806 0A 8E 17      jmp _while47_cond
3672   1809             _while47_exit:
3673   1809             ;; while (i > 0) { 
3674   1809             _while48_cond:
3675   1809 FA F5 FF      lea d, [bp + -11] ; $i
3676   180C 2A            mov b, [d]
3677   180D             ; START RELATIONAL
3678   180D D7            push a
3679   180E 11            mov a, b
3680   180F 26 00 00      mov b, $0
3681   1812 B0            cmp a, b
3682   1813 FD 7F         sgt ; >
3683   1815 E4            pop a
3684   1816             ; END RELATIONAL
3685   1816 C0 00 00      cmp b, 0
3686   1819 C6 42 18      je _while48_exit
3687   181C             _while48_block:
3688   181C             ;; i--; 
3689   181C FA F5 FF      lea d, [bp + -11] ; $i
3690   181F 2A            mov b, [d]
3691   1820 D8            push b
3692   1821 FD 7D         dec b
3693   1823 FA F5 FF      lea d, [bp + -11] ; $i
3694   1826 FD 43         mov [d], b
3695   1828 E5            pop b
3696   1829             ;; putchar(digits[i]); 
3697   1829 FA F7 FF      lea d, [bp + -9] ; $digits
3698   182C D7            push a
3699   182D DA            push d
3700   182E FA F5 FF      lea d, [bp + -11] ; $i
3701   1831 2A            mov b, [d]
3702   1832 E7            pop d
3703   1833 5A            add d, b
3704   1834 E4            pop a
3705   1835 32            mov bl, [d]
3706   1836 A7 00         mov bh, 0
3707   1838 DD            push bl
3708   1839 07 11 1A      call putchar
3709   183C 51 01 00      add sp, 1
3710   183F 0A 09 18      jmp _while48_cond
3711   1842             _while48_exit:
3712   1842 F9            leave
3713   1843 09            ret
3714   1844             
3715   1844             print_unsigned_long:
3716   1844 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3717   1847             ; $digits 
3718   1847             ; $i 
3719   1847 52 0C 00      sub sp, 12
3720   184A             ;; i = 0; 
3721   184A FA F5 FF      lea d, [bp + -11] ; $i
3722   184D DA            push d
3723   184E 26 00 00      mov b, $0
3724   1851 E7            pop d
3725   1852 FD 43         mov [d], b
3726   1854             ;; if(num == 0){ 
3727   1854             _if49_cond:
3728   1854 FA 05 00      lea d, [bp + 5] ; $num
3729   1857 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3730   185A FD 39         mov c, b ; And place it into C
3731   185C 2A            mov b, [d] ; Lower Word in B
3732   185D             ; START RELATIONAL
3733   185D D7            push a
3734   185E FD D8         push g
3735   1860 11            mov a, b
3736   1861 FD 7A         mov g, c
3737   1863 26 00 00      mov b, $0
3738   1866 B0            cmp a, b
3739   1867 FD 71         seq ; ==
3740   1869 D8            push b
3741   186A 12            mov a, c
3742   186B FD 27         mov b, g
3743   186D B0            cmp a, b
3744   186E FD 71         seq ; ==
3745   1870 E4            pop a
3746   1871 FD A7         sand a, b
3747   1873 FD F1         pop g
3748   1875 E4            pop a
3749   1876             ; END RELATIONAL
3750   1876 C0 00 00      cmp b, 0
3751   1879 C6 8B 18      je _if49_exit
3752   187C             _if49_true:
3753   187C             ;; putchar('0'); 
3754   187C 26 30 00      mov b, $30
3755   187F DD            push bl
3756   1880 07 11 1A      call putchar
3757   1883 51 01 00      add sp, 1
3758   1886             ;; return; 
3759   1886 F9            leave
3760   1887 09            ret
3761   1888 0A 8B 18      jmp _if49_exit
3762   188B             _if49_exit:
3763   188B             ;; while (num > 0) { 
3764   188B             _while50_cond:
3765   188B FA 05 00      lea d, [bp + 5] ; $num
3766   188E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3767   1891 FD 39         mov c, b ; And place it into C
3768   1893 2A            mov b, [d] ; Lower Word in B
3769   1894             ; START RELATIONAL
3770   1894 D7            push a
3771   1895 FD D8         push g
3772   1897 11            mov a, b
3773   1898 FD 7A         mov g, c
3774   189A 26 00 00      mov b, $0
3775   189D B0            cmp a, b
3776   189E FD 81         sgu ; > (unsigned)
3777   18A0 FD F1         pop g
3778   18A2 E4            pop a
3779   18A3             ; END RELATIONAL
3780   18A3 C0 00 00      cmp b, 0
3781   18A6 C6 06 19      je _while50_exit
3782   18A9             _while50_block:
3783   18A9             ;; digits[i] = '0' + (num % 10); 
3784   18A9 FA F7 FF      lea d, [bp + -9] ; $digits
3785   18AC D7            push a
3786   18AD DA            push d
3787   18AE FA F5 FF      lea d, [bp + -11] ; $i
3788   18B1 2A            mov b, [d]
3789   18B2 E7            pop d
3790   18B3 5A            add d, b
3791   18B4 E4            pop a
3792   18B5 DA            push d
3793   18B6 26 30 00      mov b, $30
3794   18B9             ; START TERMS
3795   18B9 D7            push a
3796   18BA 11            mov a, b
3797   18BB FA 05 00      lea d, [bp + 5] ; $num
3798   18BE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3799   18C1 FD 39         mov c, b ; And place it into C
3800   18C3 2A            mov b, [d] ; Lower Word in B
3801   18C4             ; START FACTORS
3802   18C4 D7            push a
3803   18C5 11            mov a, b
3804   18C6 26 0A 00      mov b, $a
3805   18C9 AE            div a, b ; 
3806   18CA 11            mov a, b
3807   18CB 27            mov b, a
3808   18CC E4            pop a
3809   18CD             ; END FACTORS
3810   18CD 54            add a, b
3811   18CE D7            push a
3812   18CF FD 12         mov a, g
3813   18D1 28            mov b, c
3814   18D2 5C            adc a, b
3815   18D3 39            mov c, a
3816   18D4 E5            pop b
3817   18D5 E4            pop a
3818   18D6             ; END TERMS
3819   18D6 E7            pop d
3820   18D7 FD 3E         mov [d], bl
3821   18D9             ;; num = num / 10; 
3822   18D9 FA 05 00      lea d, [bp + 5] ; $num
3823   18DC DA            push d
3824   18DD FA 05 00      lea d, [bp + 5] ; $num
3825   18E0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3826   18E3 FD 39         mov c, b ; And place it into C
3827   18E5 2A            mov b, [d] ; Lower Word in B
3828   18E6             ; START FACTORS
3829   18E6 D7            push a
3830   18E7 11            mov a, b
3831   18E8 26 0A 00      mov b, $a
3832   18EB AE            div a, b
3833   18EC 27            mov b, a
3834   18ED E4            pop a
3835   18EE             ; END FACTORS
3836   18EE E7            pop d
3837   18EF FD 43         mov [d], b
3838   18F1 28            mov b, c
3839   18F2 FD 44 02 00   mov [d + 2], b
3840   18F6             ;; i++; 
3841   18F6 FA F5 FF      lea d, [bp + -11] ; $i
3842   18F9 2A            mov b, [d]
3843   18FA D8            push b
3844   18FB FD 77         inc b
3845   18FD FA F5 FF      lea d, [bp + -11] ; $i
3846   1900 FD 43         mov [d], b
3847   1902 E5            pop b
3848   1903 0A 8B 18      jmp _while50_cond
3849   1906             _while50_exit:
3850   1906             ;; while (i > 0) { 
3851   1906             _while51_cond:
3852   1906 FA F5 FF      lea d, [bp + -11] ; $i
3853   1909 2A            mov b, [d]
3854   190A             ; START RELATIONAL
3855   190A D7            push a
3856   190B 11            mov a, b
3857   190C 26 00 00      mov b, $0
3858   190F B0            cmp a, b
3859   1910 FD 7F         sgt ; >
3860   1912 E4            pop a
3861   1913             ; END RELATIONAL
3862   1913 C0 00 00      cmp b, 0
3863   1916 C6 3F 19      je _while51_exit
3864   1919             _while51_block:
3865   1919             ;; i--; 
3866   1919 FA F5 FF      lea d, [bp + -11] ; $i
3867   191C 2A            mov b, [d]
3868   191D D8            push b
3869   191E FD 7D         dec b
3870   1920 FA F5 FF      lea d, [bp + -11] ; $i
3871   1923 FD 43         mov [d], b
3872   1925 E5            pop b
3873   1926             ;; putchar(digits[i]); 
3874   1926 FA F7 FF      lea d, [bp + -9] ; $digits
3875   1929 D7            push a
3876   192A DA            push d
3877   192B FA F5 FF      lea d, [bp + -11] ; $i
3878   192E 2A            mov b, [d]
3879   192F E7            pop d
3880   1930 5A            add d, b
3881   1931 E4            pop a
3882   1932 32            mov bl, [d]
3883   1933 A7 00         mov bh, 0
3884   1935 DD            push bl
3885   1936 07 11 1A      call putchar
3886   1939 51 01 00      add sp, 1
3887   193C 0A 06 19      jmp _while51_cond
3888   193F             _while51_exit:
3889   193F F9            leave
3890   1940 09            ret
3891   1941             
3892   1941             print_unsigned:
3893   1941 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3894   1944             ; $digits 
3895   1944             ; $i 
3896   1944 52 07 00      sub sp, 7
3897   1947             ;; i = 0; 
3898   1947 FA FA FF      lea d, [bp + -6] ; $i
3899   194A DA            push d
3900   194B 26 00 00      mov b, $0
3901   194E E7            pop d
3902   194F FD 43         mov [d], b
3903   1951             ;; if(num == 0){ 
3904   1951             _if52_cond:
3905   1951 FA 05 00      lea d, [bp + 5] ; $num
3906   1954 2A            mov b, [d]
3907   1955             ; START RELATIONAL
3908   1955 D7            push a
3909   1956 11            mov a, b
3910   1957 26 00 00      mov b, $0
3911   195A B0            cmp a, b
3912   195B FD 71         seq ; ==
3913   195D E4            pop a
3914   195E             ; END RELATIONAL
3915   195E C0 00 00      cmp b, 0
3916   1961 C6 73 19      je _if52_exit
3917   1964             _if52_true:
3918   1964             ;; putchar('0'); 
3919   1964 26 30 00      mov b, $30
3920   1967 DD            push bl
3921   1968 07 11 1A      call putchar
3922   196B 51 01 00      add sp, 1
3923   196E             ;; return; 
3924   196E F9            leave
3925   196F 09            ret
3926   1970 0A 73 19      jmp _if52_exit
3927   1973             _if52_exit:
3928   1973             ;; while (num > 0) { 
3929   1973             _while53_cond:
3930   1973 FA 05 00      lea d, [bp + 5] ; $num
3931   1976 2A            mov b, [d]
3932   1977             ; START RELATIONAL
3933   1977 D7            push a
3934   1978 11            mov a, b
3935   1979 26 00 00      mov b, $0
3936   197C B0            cmp a, b
3937   197D FD 81         sgu ; > (unsigned)
3938   197F E4            pop a
3939   1980             ; END RELATIONAL
3940   1980 C0 00 00      cmp b, 0
3941   1983 C6 CD 19      je _while53_exit
3942   1986             _while53_block:
3943   1986             ;; digits[i] = '0' + (num % 10); 
3944   1986 FA FC FF      lea d, [bp + -4] ; $digits
3945   1989 D7            push a
3946   198A DA            push d
3947   198B FA FA FF      lea d, [bp + -6] ; $i
3948   198E 2A            mov b, [d]
3949   198F E7            pop d
3950   1990 5A            add d, b
3951   1991 E4            pop a
3952   1992 DA            push d
3953   1993 26 30 00      mov b, $30
3954   1996             ; START TERMS
3955   1996 D7            push a
3956   1997 11            mov a, b
3957   1998 FA 05 00      lea d, [bp + 5] ; $num
3958   199B 2A            mov b, [d]
3959   199C             ; START FACTORS
3960   199C D7            push a
3961   199D 11            mov a, b
3962   199E 26 0A 00      mov b, $a
3963   19A1 AE            div a, b ; 
3964   19A2 11            mov a, b
3965   19A3 27            mov b, a
3966   19A4 E4            pop a
3967   19A5             ; END FACTORS
3968   19A5 56            add b, a
3969   19A6 E4            pop a
3970   19A7             ; END TERMS
3971   19A7 E7            pop d
3972   19A8 FD 3E         mov [d], bl
3973   19AA             ;; num = num / 10; 
3974   19AA FA 05 00      lea d, [bp + 5] ; $num
3975   19AD DA            push d
3976   19AE FA 05 00      lea d, [bp + 5] ; $num
3977   19B1 2A            mov b, [d]
3978   19B2             ; START FACTORS
3979   19B2 D7            push a
3980   19B3 11            mov a, b
3981   19B4 26 0A 00      mov b, $a
3982   19B7 AE            div a, b
3983   19B8 27            mov b, a
3984   19B9 E4            pop a
3985   19BA             ; END FACTORS
3986   19BA E7            pop d
3987   19BB FD 43         mov [d], b
3988   19BD             ;; i++; 
3989   19BD FA FA FF      lea d, [bp + -6] ; $i
3990   19C0 2A            mov b, [d]
3991   19C1 D8            push b
3992   19C2 FD 77         inc b
3993   19C4 FA FA FF      lea d, [bp + -6] ; $i
3994   19C7 FD 43         mov [d], b
3995   19C9 E5            pop b
3996   19CA 0A 73 19      jmp _while53_cond
3997   19CD             _while53_exit:
3998   19CD             ;; while (i > 0) { 
3999   19CD             _while54_cond:
4000   19CD FA FA FF      lea d, [bp + -6] ; $i
4001   19D0 2A            mov b, [d]
4002   19D1             ; START RELATIONAL
4003   19D1 D7            push a
4004   19D2 11            mov a, b
4005   19D3 26 00 00      mov b, $0
4006   19D6 B0            cmp a, b
4007   19D7 FD 7F         sgt ; >
4008   19D9 E4            pop a
4009   19DA             ; END RELATIONAL
4010   19DA C0 00 00      cmp b, 0
4011   19DD C6 06 1A      je _while54_exit
4012   19E0             _while54_block:
4013   19E0             ;; i--; 
4014   19E0 FA FA FF      lea d, [bp + -6] ; $i
4015   19E3 2A            mov b, [d]
4016   19E4 D8            push b
4017   19E5 FD 7D         dec b
4018   19E7 FA FA FF      lea d, [bp + -6] ; $i
4019   19EA FD 43         mov [d], b
4020   19EC E5            pop b
4021   19ED             ;; putchar(digits[i]); 
4022   19ED FA FC FF      lea d, [bp + -4] ; $digits
4023   19F0 D7            push a
4024   19F1 DA            push d
4025   19F2 FA FA FF      lea d, [bp + -6] ; $i
4026   19F5 2A            mov b, [d]
4027   19F6 E7            pop d
4028   19F7 5A            add d, b
4029   19F8 E4            pop a
4030   19F9 32            mov bl, [d]
4031   19FA A7 00         mov bh, 0
4032   19FC DD            push bl
4033   19FD 07 11 1A      call putchar
4034   1A00 51 01 00      add sp, 1
4035   1A03 0A CD 19      jmp _while54_cond
4036   1A06             _while54_exit:
4037   1A06 F9            leave
4038   1A07 09            ret
4039   1A08             
4040   1A08             date:
4041   1A08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4042   1A0B             
4043   1A0B             ; --- BEGIN INLINE ASM BLOCK
4044   1A0B 19 00         mov al, 0 
4045   1A0D 05 07         syscall sys_datetime
4046   1A0F             ; --- END INLINE ASM BLOCK
4047   1A0F             
4048   1A0F F9            leave
4049   1A10 09            ret
4050   1A11             
4051   1A11             putchar:
4052   1A11 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4053   1A14             
4054   1A14             ; --- BEGIN INLINE ASM BLOCK
4055   1A14 FA 05 00      lea d, [bp + 5] ; $c
4056   1A17 1E            mov al, [d]
4057   1A18 23            mov ah, al
4058   1A19 07 F2 1B      call _putchar
4059   1A1C             ; --- END INLINE ASM BLOCK
4060   1A1C             
4061   1A1C F9            leave
4062   1A1D 09            ret
4063   1A1E             
4064   1A1E             getchar:
4065   1A1E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4066   1A21             ; $c 
4067   1A21 52 01 00      sub sp, 1
4068   1A24             
4069   1A24             ; --- BEGIN INLINE ASM BLOCK
4070   1A24 07 EB 1B      call getch
4071   1A27 1A            mov al, ah
4072   1A28 FA 00 00      lea d, [bp + 0] ; $c
4073   1A2B 3E            mov [d], al
4074   1A2C             ; --- END INLINE ASM BLOCK
4075   1A2C             
4076   1A2C             ;; return c; 
4077   1A2C FA 00 00      lea d, [bp + 0] ; $c
4078   1A2F 32            mov bl, [d]
4079   1A30 A7 00         mov bh, 0
4080   1A32 F9            leave
4081   1A33 09            ret
4082   1A34             
4083   1A34             scann:
4084   1A34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4085   1A37             ; $m 
4086   1A37 52 02 00      sub sp, 2
4087   1A3A             
4088   1A3A             ; --- BEGIN INLINE ASM BLOCK
4089   1A3A 07 36 1E      call scan_u16d
4090   1A3D FA FF FF      lea d, [bp + -1] ; $m
4091   1A40 43            mov [d], a
4092   1A41             ; --- END INLINE ASM BLOCK
4093   1A41             
4094   1A41             ;; return m; 
4095   1A41 FA FF FF      lea d, [bp + -1] ; $m
4096   1A44 2A            mov b, [d]
4097   1A45 F9            leave
4098   1A46 09            ret
4099   1A47             
4100   1A47             puts:
4101   1A47 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4102   1A4A             
4103   1A4A             ; --- BEGIN INLINE ASM BLOCK
4104   1A4A FA 05 00      lea d, [bp + 5] ; $s
4105   1A4D 15            mov a, [d]
4106   1A4E 3C            mov d, a
4107   1A4F 07 3C 1D      call _puts
4108   1A52 10 00 0A      mov a, $0A00
4109   1A55 05 03         syscall sys_io
4110   1A57             ; --- END INLINE ASM BLOCK
4111   1A57             
4112   1A57 F9            leave
4113   1A58 09            ret
4114   1A59             
4115   1A59             print:
4116   1A59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4117   1A5C             
4118   1A5C             ; --- BEGIN INLINE ASM BLOCK
4119   1A5C FA 05 00      lea d, [bp + 5] ; $s
4120   1A5F FD 2A         mov d, [d]
4121   1A61 07 3C 1D      call _puts
4122   1A64             ; --- END INLINE ASM BLOCK
4123   1A64             
4124   1A64 F9            leave
4125   1A65 09            ret
4126   1A66             
4127   1A66             loadfile:
4128   1A66 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4129   1A69             
4130   1A69             ; --- BEGIN INLINE ASM BLOCK
4131   1A69 FA 07 00      lea d, [bp + 7] ; $destination
4132   1A6C 15            mov a, [d]
4133   1A6D 4F            mov di, a
4134   1A6E FA 05 00      lea d, [bp + 5] ; $filename
4135   1A71 FD 2A         mov d, [d]
4136   1A73 19 14         mov al, 20
4137   1A75 05 04         syscall sys_filesystem
4138   1A77             ; --- END INLINE ASM BLOCK
4139   1A77             
4140   1A77 F9            leave
4141   1A78 09            ret
4142   1A79             
4143   1A79             create_file:
4144   1A79 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4145   1A7C F9            leave
4146   1A7D 09            ret
4147   1A7E             
4148   1A7E             delete_file:
4149   1A7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4150   1A81             
4151   1A81             ; --- BEGIN INLINE ASM BLOCK
4152   1A81 FA 05 00      lea d, [bp + 5] ; $filename
4153   1A84 19 0A         mov al, 10
4154   1A86 05 04         syscall sys_filesystem
4155   1A88             ; --- END INLINE ASM BLOCK
4156   1A88             
4157   1A88 F9            leave
4158   1A89 09            ret
4159   1A8A             
4160   1A8A             fopen:
4161   1A8A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4162   1A8D F9            leave
4163   1A8E 09            ret
4164   1A8F             
4165   1A8F             fclose:
4166   1A8F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4167   1A92 F9            leave
4168   1A93 09            ret
4169   1A94             
4170   1A94             load_hex:
4171   1A94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4172   1A97             ; $temp 
4173   1A97 52 02 00      sub sp, 2
4174   1A9A             ;; temp = alloc(32768); 
4175   1A9A FA FF FF      lea d, [bp + -1] ; $temp
4176   1A9D DA            push d
4177   1A9E 26 00 80      mov b, $8000
4178   1AA1 FD AB         swp b
4179   1AA3 D8            push b
4180   1AA4 07 76 08      call alloc
4181   1AA7 51 02 00      add sp, 2
4182   1AAA E7            pop d
4183   1AAB FD 43         mov [d], b
4184   1AAD             
4185   1AAD             ; --- BEGIN INLINE ASM BLOCK
4186   1AAD               
4187   1AAD               
4188   1AAD               
4189   1AAD               
4190   1AAD               
4191   1AAD             _load_hex:
4192   1AAD D7            push a
4193   1AAE D8            push b
4194   1AAF DA            push d
4195   1AB0 E2            push si
4196   1AB1 E3            push di
4197   1AB2 52 00 80      sub sp, $8000      
4198   1AB5 38 00 00      mov c, 0
4199   1AB8 48            mov a, sp
4200   1AB9 77            inc a
4201   1ABA 3C            mov d, a          
4202   1ABB 07 F9 1B      call _gets        
4203   1ABE 4D            mov si, a
4204   1ABF             __load_hex_loop:
4205   1ABF F6            lodsb             
4206   1AC0 B9 00         cmp al, 0         
4207   1AC2 C6 D0 1A      jz __load_hex_ret
4208   1AC5 36            mov bh, al
4209   1AC6 F6            lodsb
4210   1AC7 2F            mov bl, al
4211   1AC8 07 AF 1B      call _atoi        
4212   1ACB F7            stosb             
4213   1ACC 78            inc c
4214   1ACD 0A BF 1A      jmp __load_hex_loop
4215   1AD0             __load_hex_ret:
4216   1AD0 51 00 80      add sp, $8000
4217   1AD3 F0            pop di
4218   1AD4 EF            pop si
4219   1AD5 E7            pop d
4220   1AD6 E5            pop b
4221   1AD7 E4            pop a
4222   1AD8             ; --- END INLINE ASM BLOCK
4223   1AD8             
4224   1AD8 F9            leave
4225   1AD9 09            ret
4226   1ADA             
4227   1ADA             getparam:
4228   1ADA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4229   1ADD             ; $data 
4230   1ADD 52 01 00      sub sp, 1
4231   1AE0             
4232   1AE0             ; --- BEGIN INLINE ASM BLOCK
4233   1AE0 19 04         mov al, 4
4234   1AE2 FA 05 00      lea d, [bp + 5] ; $address
4235   1AE5 FD 2A         mov d, [d]
4236   1AE7 05 0C         syscall sys_system
4237   1AE9 FA 00 00      lea d, [bp + 0] ; $data
4238   1AEC FD 3E         mov [d], bl
4239   1AEE             ; --- END INLINE ASM BLOCK
4240   1AEE             
4241   1AEE             ;; return data; 
4242   1AEE FA 00 00      lea d, [bp + 0] ; $data
4243   1AF1 32            mov bl, [d]
4244   1AF2 A7 00         mov bh, 0
4245   1AF4 F9            leave
4246   1AF5 09            ret
4247   1AF6             
4248   1AF6             clear:
4249   1AF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4250   1AF9             ;; print("\033[2J\033[H"); 
4251   1AF9 26 E0 2E      mov b, __s3 ; "\033[2J\033[H"
4252   1AFC FD AB         swp b
4253   1AFE D8            push b
4254   1AFF 07 59 1A      call print
4255   1B02 51 02 00      add sp, 2
4256   1B05 F9            leave
4257   1B06 09            ret
4258   1B07             
4259   1B07             include_stdio_asm:
4260   1B07 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4261   1B0A             
4262   1B0A             ; --- BEGIN INLINE ASM BLOCK
4263   1B0A             .include "lib/asm/stdio.asm"
0001+  1B0A             ;-----------------------------------------------------------------------------
0002+  1B0A             ; stdio.s
0003+  1B0A             ;-----------------------------------------------------------------------------
0004+  1B0A             .include "lib/asm/string.asm"
0001++ 1B0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1B0A             ; string.s
0003++ 1B0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1B0A             
0005++ 1B0A             
0006++ 1B0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1B0A             ; _strrev
0008++ 1B0A             ; reverse a string
0009++ 1B0A             ; D = string address
0010++ 1B0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1B0A             ; 01234
0012++ 1B0A             _strrev:
0013++ 1B0A 4B          	pusha
0014++ 1B0B 07 51 1B    	call _strlen	; length in C
0015++ 1B0E 12          	mov a, c
0016++ 1B0F AF 01 00    	cmp a, 1
0017++ 1B12 D0 2C 1B    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1B15 7D          	dec a
0019++ 1B16 FD 4E       	mov si, d	; beginning of string
0020++ 1B18 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1B1A 59          	add d, a	; end of string
0022++ 1B1B 12          	mov a, c
0023++ 1B1C FD 9B       	shr a		; divide by 2
0024++ 1B1E 39          	mov c, a	; C now counts the steps
0025++ 1B1F             _strrev_L0:
0026++ 1B1F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1B20 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1B21 3E          	mov [d], al	; store left char into right side
0029++ 1B22 1B          	mov al, bl
0030++ 1B23 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1B24 7E          	dec c
0032++ 1B25 7F          	dec d
0033++ 1B26 C2 00 00    	cmp c, 0
0034++ 1B29 C7 1F 1B    	jne _strrev_L0
0035++ 1B2C             _strrev_end:
0036++ 1B2C 4C          	popa
0037++ 1B2D 09          	ret
0038++ 1B2E             	
0039++ 1B2E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1B2E             ; _strchr
0041++ 1B2E             ; search string in D for char in AL
0042++ 1B2E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1B2E             _strchr:
0044++ 1B2E             _strchr_L0:
0045++ 1B2E 32          	mov bl, [d]
0046++ 1B2F C1 00       	cmp bl, 0
0047++ 1B31 C6 3C 1B    	je _strchr_end
0048++ 1B34 BA          	cmp al, bl
0049++ 1B35 C6 3C 1B    	je _strchr_end
0050++ 1B38 79          	inc d
0051++ 1B39 0A 2E 1B    	jmp _strchr_L0
0052++ 1B3C             _strchr_end:
0053++ 1B3C 1B          	mov al, bl
0054++ 1B3D 09          	ret
0055++ 1B3E             
0056++ 1B3E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1B3E             ; _strstr
0058++ 1B3E             ; find sub-string
0059++ 1B3E             ; str1 in SI
0060++ 1B3E             ; str2 in DI
0061++ 1B3E             ; SI points to end of source string
0062++ 1B3E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1B3E             _strstr:
0064++ 1B3E DB          	push al
0065++ 1B3F DA          	push d
0066++ 1B40 E3          	push di
0067++ 1B41             _strstr_loop:
0068++ 1B41 F3          	cmpsb					; compare a byte of the strings
0069++ 1B42 C7 4D 1B    	jne _strstr_ret
0070++ 1B45 FC 00 00    	lea d, [di + 0]
0071++ 1B48 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1B4A C7 41 1B    	jne _strstr_loop				; equal chars but not at end
0073++ 1B4D             _strstr_ret:
0074++ 1B4D F0          	pop di
0075++ 1B4E E7          	pop d
0076++ 1B4F E8          	pop al
0077++ 1B50 09          	ret
0078++ 1B51             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1B51             ; length of null terminated string
0080++ 1B51             ; result in C
0081++ 1B51             ; pointer in D
0082++ 1B51             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1B51             _strlen:
0084++ 1B51 DA          	push d
0085++ 1B52 38 00 00    	mov c, 0
0086++ 1B55             _strlen_L1:
0087++ 1B55 BD 00       	cmp byte [d], 0
0088++ 1B57 C6 5F 1B    	je _strlen_ret
0089++ 1B5A 79          	inc d
0090++ 1B5B 78          	inc c
0091++ 1B5C 0A 55 1B    	jmp _strlen_L1
0092++ 1B5F             _strlen_ret:
0093++ 1B5F E7          	pop d
0094++ 1B60 09          	ret
0095++ 1B61             
0096++ 1B61             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1B61             ; STRCMP
0098++ 1B61             ; compare two strings
0099++ 1B61             ; str1 in SI
0100++ 1B61             ; str2 in DI
0101++ 1B61             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1B61             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1B61             _strcmp:
0104++ 1B61 DB          	push al
0105++ 1B62 DA          	push d
0106++ 1B63 E3          	push di
0107++ 1B64 E2          	push si
0108++ 1B65             _strcmp_loop:
0109++ 1B65 F3          	cmpsb					; compare a byte of the strings
0110++ 1B66 C7 71 1B    	jne _strcmp_ret
0111++ 1B69 FB FF FF    	lea d, [si +- 1]
0112++ 1B6C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1B6E C7 65 1B    	jne _strcmp_loop				; equal chars but not at end
0114++ 1B71             _strcmp_ret:
0115++ 1B71 EF          	pop si
0116++ 1B72 F0          	pop di
0117++ 1B73 E7          	pop d
0118++ 1B74 E8          	pop al
0119++ 1B75 09          	ret
0120++ 1B76             
0121++ 1B76             
0122++ 1B76             ; STRCPY
0123++ 1B76             ; copy null terminated string from SI to DI
0124++ 1B76             ; source in SI
0125++ 1B76             ; destination in DI
0126++ 1B76             _strcpy:
0127++ 1B76 E2          	push si
0128++ 1B77 E3          	push di
0129++ 1B78 DB          	push al
0130++ 1B79             _strcpy_L1:
0131++ 1B79 F6          	lodsb
0132++ 1B7A F7          	stosb
0133++ 1B7B B9 00       	cmp al, 0
0134++ 1B7D C7 79 1B    	jne _strcpy_L1
0135++ 1B80             _strcpy_end:
0136++ 1B80 E8          	pop al
0137++ 1B81 F0          	pop di
0138++ 1B82 EF          	pop si
0139++ 1B83 09          	ret
0140++ 1B84             
0141++ 1B84             ; STRCAT
0142++ 1B84             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1B84             ; source in SI
0144++ 1B84             ; destination in DI
0145++ 1B84             _strcat:
0146++ 1B84 E2          	push si
0147++ 1B85 E3          	push di
0148++ 1B86 D7          	push a
0149++ 1B87 DA          	push d
0150++ 1B88 50          	mov a, di
0151++ 1B89 3C          	mov d, a
0152++ 1B8A             _strcat_goto_end_L1:
0153++ 1B8A BD 00       	cmp byte[d], 0
0154++ 1B8C C6 93 1B    	je _strcat_start
0155++ 1B8F 79          	inc d
0156++ 1B90 0A 8A 1B    	jmp _strcat_goto_end_L1
0157++ 1B93             _strcat_start:
0158++ 1B93 FD 50       	mov di, d
0159++ 1B95             _strcat_L1:
0160++ 1B95 F6          	lodsb
0161++ 1B96 F7          	stosb
0162++ 1B97 B9 00       	cmp al, 0
0163++ 1B99 C7 95 1B    	jne _strcat_L1
0164++ 1B9C             _strcat_end:
0165++ 1B9C E7          	pop d
0166++ 1B9D E4          	pop a
0167++ 1B9E F0          	pop di
0168++ 1B9F EF          	pop si
0169++ 1BA0 09          	ret
0170++ 1BA1             
0171++ 1BA1             
0005+  1BA1             
0006+  1BA1             ;-----------------------------------------------------------------------------
0007+  1BA1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1BA1             ; ASCII in BL
0009+  1BA1             ; result in AL
0010+  1BA1             ; ascii for F = 0100 0110
0011+  1BA1             ; ascii for 9 = 0011 1001
0012+  1BA1             ;-----------------------------------------------------------------------------
0013+  1BA1             hex_ascii_encode:
0014+  1BA1 1B            mov al, bl
0015+  1BA2 93 40         test al, $40        ; test if letter or number
0016+  1BA4 C7 AA 1B      jnz hex_letter
0017+  1BA7 87 0F         and al, $0F        ; get number
0018+  1BA9 09            ret
0019+  1BAA             hex_letter:
0020+  1BAA 87 0F         and al, $0F        ; get letter
0021+  1BAC 6A 09         add al, 9
0022+  1BAE 09            ret
0023+  1BAF             
0024+  1BAF             ;-----------------------------------------------------------------------------
0025+  1BAF             ; ATOI
0026+  1BAF             ; 2 letter hex string in B
0027+  1BAF             ; 8bit integer returned in AL
0028+  1BAF             ;-----------------------------------------------------------------------------
0029+  1BAF             _atoi:
0030+  1BAF D8            push b
0031+  1BB0 07 A1 1B      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1BB3 30            mov bl, bh
0033+  1BB4 DB            push al          ; save a
0034+  1BB5 07 A1 1B      call hex_ascii_encode
0035+  1BB8 EA            pop bl  
0036+  1BB9 FD 9E 04      shl al, 4
0037+  1BBC 8C            or al, bl
0038+  1BBD E5            pop b
0039+  1BBE 09            ret  
0040+  1BBF             
0041+  1BBF             ;-----------------------------------------------------------------------------
0042+  1BBF             ; scanf
0043+  1BBF             ; no need for explanations!
0044+  1BBF             ;-----------------------------------------------------------------------------
0045+  1BBF             scanf:
0046+  1BBF 09            ret
0047+  1BC0             
0048+  1BC0             ;-----------------------------------------------------------------------------
0049+  1BC0             ; ITOA
0050+  1BC0             ; 8bit value in BL
0051+  1BC0             ; 2 byte ASCII result in A
0052+  1BC0             ;-----------------------------------------------------------------------------
0053+  1BC0             _itoa:
0054+  1BC0 DA            push d
0055+  1BC1 D8            push b
0056+  1BC2 A7 00         mov bh, 0
0057+  1BC4 FD A4 04      shr bl, 4  
0058+  1BC7 74            mov d, b
0059+  1BC8 1F 70 1E      mov al, [d + s_hex_digits]
0060+  1BCB 23            mov ah, al
0061+  1BCC               
0062+  1BCC E5            pop b
0063+  1BCD D8            push b
0064+  1BCE A7 00         mov bh, 0
0065+  1BD0 FD 87 0F      and bl, $0F
0066+  1BD3 74            mov d, b
0067+  1BD4 1F 70 1E      mov al, [d + s_hex_digits]
0068+  1BD7 E5            pop b
0069+  1BD8 E7            pop d
0070+  1BD9 09            ret
0071+  1BDA             
0072+  1BDA             ;-----------------------------------------------------------------------------
0073+  1BDA             ; HEX STRING TO BINARY
0074+  1BDA             ; di = destination address
0075+  1BDA             ; si = source
0076+  1BDA             ;-----------------------------------------------------------------------------
0077+  1BDA             _hex_to_int:
0078+  1BDA             _hex_to_int_L1:
0079+  1BDA F6            lodsb          ; load from [SI] to AL
0080+  1BDB B9 00         cmp al, 0        ; check if ASCII 0
0081+  1BDD C6 EA 1B      jz _hex_to_int_ret
0082+  1BE0 36            mov bh, al
0083+  1BE1 F6            lodsb
0084+  1BE2 2F            mov bl, al
0085+  1BE3 07 AF 1B      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1BE6 F7            stosb          ; store AL to [DI]
0087+  1BE7 0A DA 1B      jmp _hex_to_int_L1
0088+  1BEA             _hex_to_int_ret:
0089+  1BEA 09            ret    
0090+  1BEB             
0091+  1BEB             ;-----------------------------------------------------------------------------
0092+  1BEB             ; GETCHAR
0093+  1BEB             ; char in ah
0094+  1BEB             ;-----------------------------------------------------------------------------
0095+  1BEB             getch:
0096+  1BEB DB            push al
0097+  1BEC             getch_retry:
0098+  1BEC 19 01         mov al, 1
0099+  1BEE 05 03         syscall sys_io      ; receive in AH
0100+  1BF0 E8            pop al
0101+  1BF1 09            ret
0102+  1BF2             
0103+  1BF2             ;-----------------------------------------------------------------------------
0104+  1BF2             ; PUTCHAR
0105+  1BF2             ; char in ah
0106+  1BF2             ;-----------------------------------------------------------------------------
0107+  1BF2             _putchar:
0108+  1BF2 D7            push a
0109+  1BF3 19 00         mov al, 0
0110+  1BF5 05 03         syscall sys_io      ; char in AH
0111+  1BF7 E4            pop a
0112+  1BF8 09            ret
0113+  1BF9             
0114+  1BF9             ;-----------------------------------------------------------------------------
0115+  1BF9             ;; INPUT A STRING
0116+  1BF9             ;; terminates with null
0117+  1BF9             ;; pointer in D
0118+  1BF9             ;-----------------------------------------------------------------------------
0119+  1BF9             _gets:
0120+  1BF9 D7            push a
0121+  1BFA DA            push d
0122+  1BFB             _gets_loop:
0123+  1BFB 19 01         mov al, 1
0124+  1BFD 05 03         syscall sys_io      ; receive in AH
0125+  1BFF B9 00         cmp al, 0        ; check error code (AL)
0126+  1C01 C6 FB 1B      je _gets_loop      ; if no char received, retry
0127+  1C04             
0128+  1C04 76 1B         cmp ah, 27
0129+  1C06 C6 27 1C      je _gets_ansi_esc
0130+  1C09 76 0A         cmp ah, $0A        ; LF
0131+  1C0B C6 92 1C      je _gets_end
0132+  1C0E 76 0D         cmp ah, $0D        ; CR
0133+  1C10 C6 92 1C      je _gets_end
0134+  1C13 76 5C         cmp ah, $5C        ; '\\'
0135+  1C15 C6 53 1C      je _gets_escape
0136+  1C18               
0137+  1C18 76 08         cmp ah, $08      ; check for backspace
0138+  1C1A C6 23 1C      je _gets_backspace
0139+  1C1D             
0140+  1C1D 1A            mov al, ah
0141+  1C1E 3E            mov [d], al
0142+  1C1F 79            inc d
0143+  1C20 0A FB 1B      jmp _gets_loop
0144+  1C23             _gets_backspace:
0145+  1C23 7F            dec d
0146+  1C24 0A FB 1B      jmp _gets_loop
0147+  1C27             _gets_ansi_esc:
0148+  1C27 19 01         mov al, 1
0149+  1C29 05 03         syscall sys_io        ; receive in AH without echo
0150+  1C2B B9 00         cmp al, 0          ; check error code (AL)
0151+  1C2D C6 27 1C      je _gets_ansi_esc    ; if no char received, retry
0152+  1C30 76 5B         cmp ah, '['
0153+  1C32 C7 FB 1B      jne _gets_loop
0154+  1C35             _gets_ansi_esc_2:
0155+  1C35 19 01         mov al, 1
0156+  1C37 05 03         syscall sys_io          ; receive in AH without echo
0157+  1C39 B9 00         cmp al, 0            ; check error code (AL)
0158+  1C3B C6 35 1C      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1C3E 76 44         cmp ah, 'D'
0160+  1C40 C6 4B 1C      je _gets_left_arrow
0161+  1C43 76 43         cmp ah, 'C'
0162+  1C45 C6 4F 1C      je _gets_right_arrow
0163+  1C48 0A FB 1B      jmp _gets_loop
0164+  1C4B             _gets_left_arrow:
0165+  1C4B 7F            dec d
0166+  1C4C 0A FB 1B      jmp _gets_loop
0167+  1C4F             _gets_right_arrow:
0168+  1C4F 79            inc d
0169+  1C50 0A FB 1B      jmp _gets_loop
0170+  1C53             _gets_escape:
0171+  1C53 19 01         mov al, 1
0172+  1C55 05 03         syscall sys_io      ; receive in AH
0173+  1C57 B9 00         cmp al, 0        ; check error code (AL)
0174+  1C59 C6 53 1C      je _gets_escape      ; if no char received, retry
0175+  1C5C 76 6E         cmp ah, 'n'
0176+  1C5E C6 7D 1C      je _gets_LF
0177+  1C61 76 72         cmp ah, 'r'
0178+  1C63 C6 84 1C      je _gets_CR
0179+  1C66 76 30         cmp ah, '0'
0180+  1C68 C6 8B 1C      je _gets_NULL
0181+  1C6B 76 5C         cmp ah, $5C  ; '\'
0182+  1C6D C6 76 1C      je _gets_slash
0183+  1C70 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1C71 3E            mov [d], al
0185+  1C72 79            inc d
0186+  1C73 0A FB 1B      jmp _gets_loop
0187+  1C76             _gets_slash:
0188+  1C76 19 5C         mov al, $5C
0189+  1C78 3E            mov [d], al
0190+  1C79 79            inc d
0191+  1C7A 0A FB 1B      jmp _gets_loop
0192+  1C7D             _gets_LF:
0193+  1C7D 19 0A         mov al, $0A
0194+  1C7F 3E            mov [d], al
0195+  1C80 79            inc d
0196+  1C81 0A FB 1B      jmp _gets_loop
0197+  1C84             _gets_CR:
0198+  1C84 19 0D         mov al, $0D
0199+  1C86 3E            mov [d], al
0200+  1C87 79            inc d
0201+  1C88 0A FB 1B      jmp _gets_loop
0202+  1C8B             _gets_NULL:
0203+  1C8B 19 00         mov al, $00
0204+  1C8D 3E            mov [d], al
0205+  1C8E 79            inc d
0206+  1C8F 0A FB 1B      jmp _gets_loop
0207+  1C92             _gets_end:
0208+  1C92 19 00         mov al, 0
0209+  1C94 3E            mov [d], al        ; terminate string
0210+  1C95 E7            pop d
0211+  1C96 E4            pop a
0212+  1C97 09            ret
0213+  1C98             
0214+  1C98             ;-----------------------------------------------------------------------------
0215+  1C98             ;; INPUT TEXT
0216+  1C98             ;; terminated with CTRL+D
0217+  1C98             ;; pointer in D
0218+  1C98             ;-----------------------------------------------------------------------------
0219+  1C98             _gettxt:
0220+  1C98 D7            push a
0221+  1C99 DA            push d
0222+  1C9A             _gettxt_loop:
0223+  1C9A 19 01         mov al, 1
0224+  1C9C 05 03         syscall sys_io      ; receive in AH
0225+  1C9E B9 00         cmp al, 0        ; check error code (AL)
0226+  1CA0 C6 9A 1C      je _gettxt_loop    ; if no char received, retry
0227+  1CA3 76 04         cmp ah, 4      ; EOT
0228+  1CA5 C6 E3 1C      je _gettxt_end
0229+  1CA8 76 08         cmp ah, $08      ; check for backspace
0230+  1CAA C6 DF 1C      je _gettxt_backspace
0231+  1CAD 76 5C         cmp ah, $5C        ; '\'
0232+  1CAF C6 B8 1C      je _gettxt_escape
0233+  1CB2 1A            mov al, ah
0234+  1CB3 3E            mov [d], al
0235+  1CB4 79            inc d
0236+  1CB5 0A 9A 1C      jmp _gettxt_loop
0237+  1CB8             _gettxt_escape:
0238+  1CB8 19 01         mov al, 1
0239+  1CBA 05 03         syscall sys_io      ; receive in AH
0240+  1CBC B9 00         cmp al, 0        ; check error code (AL)
0241+  1CBE C6 B8 1C      je _gettxt_escape    ; if no char received, retry
0242+  1CC1 76 6E         cmp ah, 'n'
0243+  1CC3 C6 D1 1C      je _gettxt_LF
0244+  1CC6 76 72         cmp ah, 'r'
0245+  1CC8 C6 D8 1C      je _gettxt_CR
0246+  1CCB 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  1CCC 3E            mov [d], al
0248+  1CCD 79            inc d
0249+  1CCE 0A 9A 1C      jmp _gettxt_loop
0250+  1CD1             _gettxt_LF:
0251+  1CD1 19 0A         mov al, $0A
0252+  1CD3 3E            mov [d], al
0253+  1CD4 79            inc d
0254+  1CD5 0A 9A 1C      jmp _gettxt_loop
0255+  1CD8             _gettxt_CR:
0256+  1CD8 19 0D         mov al, $0D
0257+  1CDA 3E            mov [d], al
0258+  1CDB 79            inc d
0259+  1CDC 0A 9A 1C      jmp _gettxt_loop
0260+  1CDF             _gettxt_backspace:
0261+  1CDF 7F            dec d
0262+  1CE0 0A 9A 1C      jmp _gettxt_loop
0263+  1CE3             _gettxt_end:
0264+  1CE3 19 00         mov al, 0
0265+  1CE5 3E            mov [d], al        ; terminate string
0266+  1CE6 E7            pop d
0267+  1CE7 E4            pop a
0268+  1CE8 09            ret
0269+  1CE9             
0270+  1CE9             ;-----------------------------------------------------------------------------
0271+  1CE9             ; PRINT NEW LINE
0272+  1CE9             ;-----------------------------------------------------------------------------
0273+  1CE9             printnl:
0274+  1CE9 D7            push a
0275+  1CEA 10 00 0A      mov a, $0A00
0276+  1CED 05 03         syscall sys_io
0277+  1CEF 10 00 0D      mov a, $0D00
0278+  1CF2 05 03         syscall sys_io
0279+  1CF4 E4            pop a
0280+  1CF5 09            ret
0281+  1CF6             
0282+  1CF6             ;-----------------------------------------------------------------------------
0283+  1CF6             ; _strtoint
0284+  1CF6             ; 4 digit hex string number in d
0285+  1CF6             ; integer returned in A
0286+  1CF6             ;-----------------------------------------------------------------------------
0287+  1CF6             _strtointx:
0288+  1CF6 D8            push b
0289+  1CF7 32            mov bl, [d]
0290+  1CF8 37            mov bh, bl
0291+  1CF9 33 01 00      mov bl, [d + 1]
0292+  1CFC 07 AF 1B      call _atoi        ; convert to int in AL
0293+  1CFF 23            mov ah, al        ; move to AH
0294+  1D00 33 02 00      mov bl, [d + 2]
0295+  1D03 37            mov bh, bl
0296+  1D04 33 03 00      mov bl, [d + 3]
0297+  1D07 07 AF 1B      call _atoi        ; convert to int in AL
0298+  1D0A E5            pop b
0299+  1D0B 09            ret
0300+  1D0C             
0301+  1D0C             ;-----------------------------------------------------------------------------
0302+  1D0C             ; _strtoint
0303+  1D0C             ; 5 digit base10 string number in d
0304+  1D0C             ; integer returned in A
0305+  1D0C             ;-----------------------------------------------------------------------------
0306+  1D0C             _strtoint:
0307+  1D0C E2            push si
0308+  1D0D D8            push b
0309+  1D0E D9            push c
0310+  1D0F DA            push d
0311+  1D10 07 51 1B      call _strlen      ; get string length in C
0312+  1D13 7E            dec c
0313+  1D14 FD 4E         mov si, d
0314+  1D16 12            mov a, c
0315+  1D17 FD 99         shl a
0316+  1D19 3B 88 1E      mov d, table_power
0317+  1D1C 59            add d, a
0318+  1D1D 38 00 00      mov c, 0
0319+  1D20             _strtoint_L0:
0320+  1D20 F6            lodsb      ; load ASCII to al
0321+  1D21 B9 00         cmp al, 0
0322+  1D23 C6 36 1D      je _strtoint_end
0323+  1D26 6F 30         sub al, $30    ; make into integer
0324+  1D28 22 00         mov ah, 0
0325+  1D2A 2A            mov b, [d]
0326+  1D2B AC            mul a, b      ; result in B since it fits in 16bits
0327+  1D2C 11            mov a, b
0328+  1D2D 28            mov b, c
0329+  1D2E 54            add a, b
0330+  1D2F 39            mov c, a
0331+  1D30 63 02 00      sub d, 2
0332+  1D33 0A 20 1D      jmp _strtoint_L0
0333+  1D36             _strtoint_end:
0334+  1D36 12            mov a, c
0335+  1D37 E7            pop d
0336+  1D38 E6            pop c
0337+  1D39 E5            pop b
0338+  1D3A EF            pop si
0339+  1D3B 09            ret
0340+  1D3C             
0341+  1D3C             ;-----------------------------------------------------------------------------
0342+  1D3C             ; PRINT NULL TERMINATED STRING
0343+  1D3C             ; pointer in D
0344+  1D3C             ;-----------------------------------------------------------------------------
0345+  1D3C             _puts:
0346+  1D3C D7            push a
0347+  1D3D DA            push d
0348+  1D3E             _puts_L1:
0349+  1D3E 1E            mov al, [d]
0350+  1D3F B9 00         cmp al, 0
0351+  1D41 C6 4D 1D      jz _puts_END
0352+  1D44 23            mov ah, al
0353+  1D45 19 00         mov al, 0
0354+  1D47 05 03         syscall sys_io
0355+  1D49 79            inc d
0356+  1D4A 0A 3E 1D      jmp _puts_L1
0357+  1D4D             _puts_END:
0358+  1D4D E7            pop d
0359+  1D4E E4            pop a
0360+  1D4F 09            ret
0361+  1D50             
0362+  1D50             ;-----------------------------------------------------------------------------
0363+  1D50             ; PRINT N SIZE STRING
0364+  1D50             ; pointer in D
0365+  1D50             ; size in C
0366+  1D50             ;-----------------------------------------------------------------------------
0367+  1D50             _putsn:
0368+  1D50 DB            push al
0369+  1D51 DA            push d
0370+  1D52 D9            push c
0371+  1D53             _putsn_L0:
0372+  1D53 1E            mov al, [d]
0373+  1D54 23            mov ah, al
0374+  1D55 19 00         mov al, 0
0375+  1D57 05 03         syscall sys_io
0376+  1D59 79            inc d
0377+  1D5A 7E            dec c  
0378+  1D5B C2 00 00      cmp c, 0
0379+  1D5E C7 53 1D      jne _putsn_L0
0380+  1D61             _putsn_end:
0381+  1D61 E6            pop c
0382+  1D62 E7            pop d
0383+  1D63 E8            pop al
0384+  1D64 09            ret
0385+  1D65             
0386+  1D65             ;-----------------------------------------------------------------------------
0387+  1D65             ; print 16bit decimal number
0388+  1D65             ; input number in A
0389+  1D65             ;-----------------------------------------------------------------------------
0390+  1D65             print_u16d:
0391+  1D65 D7            push a
0392+  1D66 D8            push b
0393+  1D67 26 10 27      mov b, 10000
0394+  1D6A AE            div a, b      ; get 10000's coeff.
0395+  1D6B 07 8D 1D      call print_number
0396+  1D6E 11            mov a, b
0397+  1D6F 26 E8 03      mov b, 1000
0398+  1D72 AE            div a, b      ; get 1000's coeff.
0399+  1D73 07 8D 1D      call print_number
0400+  1D76 11            mov a, b
0401+  1D77 26 64 00      mov b, 100
0402+  1D7A AE            div a, b
0403+  1D7B 07 8D 1D      call print_number
0404+  1D7E 11            mov a, b
0405+  1D7F 26 0A 00      mov b, 10
0406+  1D82 AE            div a, b
0407+  1D83 07 8D 1D      call print_number
0408+  1D86 1B            mov al, bl      ; 1's coeff in bl
0409+  1D87 07 8D 1D      call print_number
0410+  1D8A E5            pop b
0411+  1D8B E4            pop a
0412+  1D8C 09            ret
0413+  1D8D             
0414+  1D8D             ;-----------------------------------------------------------------------------
0415+  1D8D             ; print AL
0416+  1D8D             ;-----------------------------------------------------------------------------
0417+  1D8D             print_number:
0418+  1D8D 6A 30         add al, $30
0419+  1D8F 23            mov ah, al
0420+  1D90 07 F2 1B      call _putchar
0421+  1D93 09            ret
0422+  1D94             
0423+  1D94             ;-----------------------------------------------------------------------------
0424+  1D94             ; PRINT 16BIT HEX INTEGER
0425+  1D94             ; integer value in reg B
0426+  1D94             ;-----------------------------------------------------------------------------
0427+  1D94             print_u16x:
0428+  1D94 D7            push a
0429+  1D95 D8            push b
0430+  1D96 DD            push bl
0431+  1D97 30            mov bl, bh
0432+  1D98 07 C0 1B      call _itoa        ; convert bh to char in A
0433+  1D9B 2F            mov bl, al        ; save al
0434+  1D9C 19 00         mov al, 0
0435+  1D9E 05 03         syscall sys_io        ; display AH
0436+  1DA0 24            mov ah, bl        ; retrieve al
0437+  1DA1 19 00         mov al, 0
0438+  1DA3 05 03         syscall sys_io        ; display AL
0439+  1DA5             
0440+  1DA5 EA            pop bl
0441+  1DA6 07 C0 1B      call _itoa        ; convert bh to char in A
0442+  1DA9 2F            mov bl, al        ; save al
0443+  1DAA 19 00         mov al, 0
0444+  1DAC 05 03         syscall sys_io        ; display AH
0445+  1DAE 24            mov ah, bl        ; retrieve al
0446+  1DAF 19 00         mov al, 0
0447+  1DB1 05 03         syscall sys_io        ; display AL
0448+  1DB3             
0449+  1DB3 E5            pop b
0450+  1DB4 E4            pop a
0451+  1DB5 09            ret
0452+  1DB6             
0453+  1DB6             ;-----------------------------------------------------------------------------
0454+  1DB6             ; INPUT 16BIT HEX INTEGER
0455+  1DB6             ; read 16bit integer into A
0456+  1DB6             ;-----------------------------------------------------------------------------
0457+  1DB6             scan_u16x:
0458+  1DB6 F8 10 00      enter 16
0459+  1DB9 D8            push b
0460+  1DBA DA            push d
0461+  1DBB             
0462+  1DBB FA F1 FF      lea d, [bp + -15]
0463+  1DBE 07 F9 1B      call _gets        ; get number
0464+  1DC1             
0465+  1DC1 32            mov bl, [d]
0466+  1DC2 37            mov bh, bl
0467+  1DC3 33 01 00      mov bl, [d + 1]
0468+  1DC6 07 AF 1B      call _atoi        ; convert to int in AL
0469+  1DC9 23            mov ah, al        ; move to AH
0470+  1DCA             
0471+  1DCA 33 02 00      mov bl, [d + 2]
0472+  1DCD 37            mov bh, bl
0473+  1DCE 33 03 00      mov bl, [d + 3]
0474+  1DD1 07 AF 1B      call _atoi        ; convert to int in AL
0475+  1DD4             
0476+  1DD4 E7            pop d
0477+  1DD5 E5            pop b
0478+  1DD6 F9            leave
0479+  1DD7 09            ret
0480+  1DD8             
0481+  1DD8             ;-----------------------------------------------------------------------------
0482+  1DD8             ; PRINT 8bit HEX INTEGER
0483+  1DD8             ; integer value in reg bl
0484+  1DD8             ;-----------------------------------------------------------------------------
0485+  1DD8             print_u8x:
0486+  1DD8 D7            push a
0487+  1DD9 DD            push bl
0488+  1DDA             
0489+  1DDA 07 C0 1B      call _itoa        ; convert bl to char in A
0490+  1DDD 2F            mov bl, al        ; save al
0491+  1DDE 19 00         mov al, 0
0492+  1DE0 05 03         syscall sys_io        ; display AH
0493+  1DE2 24            mov ah, bl        ; retrieve al
0494+  1DE3 19 00         mov al, 0
0495+  1DE5 05 03         syscall sys_io        ; display AL
0496+  1DE7             
0497+  1DE7 EA            pop bl
0498+  1DE8 E4            pop a
0499+  1DE9 09            ret
0500+  1DEA             
0501+  1DEA             ;-----------------------------------------------------------------------------
0502+  1DEA             ; print 8bit decimal unsigned number
0503+  1DEA             ; input number in AL
0504+  1DEA             ;-----------------------------------------------------------------------------
0505+  1DEA             print_u8d:
0506+  1DEA D7            push a
0507+  1DEB D8            push b
0508+  1DEC             
0509+  1DEC 22 00         mov ah, 0
0510+  1DEE 26 64 00      mov b, 100
0511+  1DF1 AE            div a, b
0512+  1DF2 D8            push b      ; save remainder
0513+  1DF3 B9 00         cmp al, 0
0514+  1DF5 C6 FF 1D      je skip100
0515+  1DF8 6A 30         add al, $30
0516+  1DFA 23            mov ah, al
0517+  1DFB 19 00         mov al, 0
0518+  1DFD 05 03         syscall sys_io  ; print coeff
0519+  1DFF             skip100:
0520+  1DFF E4            pop a
0521+  1E00 22 00         mov ah, 0
0522+  1E02 26 0A 00      mov b, 10
0523+  1E05 AE            div a, b
0524+  1E06 D8            push b      ; save remainder
0525+  1E07 B9 00         cmp al, 0
0526+  1E09 C6 13 1E      je skip10
0527+  1E0C 6A 30         add al, $30
0528+  1E0E 23            mov ah, al
0529+  1E0F 19 00         mov al, 0
0530+  1E11 05 03         syscall sys_io  ; print coeff
0531+  1E13             skip10:
0532+  1E13 E4            pop a
0533+  1E14 1B            mov al, bl
0534+  1E15 6A 30         add al, $30
0535+  1E17 23            mov ah, al
0536+  1E18 19 00         mov al, 0
0537+  1E1A 05 03         syscall sys_io  ; print coeff
0538+  1E1C E5            pop b
0539+  1E1D E4            pop a
0540+  1E1E 09            ret
0541+  1E1F             
0542+  1E1F             ;-----------------------------------------------------------------------------
0543+  1E1F             ; INPUT 8BIT HEX INTEGER
0544+  1E1F             ; read 8bit integer into AL
0545+  1E1F             ;-----------------------------------------------------------------------------
0546+  1E1F             scan_u8x:
0547+  1E1F F8 04 00      enter 4
0548+  1E22 D8            push b
0549+  1E23 DA            push d
0550+  1E24             
0551+  1E24 FA FD FF      lea d, [bp + -3]
0552+  1E27 07 F9 1B      call _gets        ; get number
0553+  1E2A             
0554+  1E2A 32            mov bl, [d]
0555+  1E2B 37            mov bh, bl
0556+  1E2C 33 01 00      mov bl, [d + 1]
0557+  1E2F 07 AF 1B      call _atoi        ; convert to int in AL
0558+  1E32             
0559+  1E32 E7            pop d
0560+  1E33 E5            pop b
0561+  1E34 F9            leave
0562+  1E35 09            ret
0563+  1E36             
0564+  1E36             ;-----------------------------------------------------------------------------
0565+  1E36             ; input decimal number
0566+  1E36             ; result in A
0567+  1E36             ; 655'\0'
0568+  1E36             ; low--------high
0569+  1E36             ;-----------------------------------------------------------------------------
0570+  1E36             scan_u16d:
0571+  1E36 F8 08 00      enter 8
0572+  1E39 E2            push si
0573+  1E3A D8            push b
0574+  1E3B D9            push c
0575+  1E3C DA            push d
0576+  1E3D FA F9 FF      lea d, [bp +- 7]
0577+  1E40 07 F9 1B      call _gets
0578+  1E43 07 51 1B      call _strlen      ; get string length in C
0579+  1E46 7E            dec c
0580+  1E47 FD 4E         mov si, d
0581+  1E49 12            mov a, c
0582+  1E4A FD 99         shl a
0583+  1E4C 3B 88 1E      mov d, table_power
0584+  1E4F 59            add d, a
0585+  1E50 38 00 00      mov c, 0
0586+  1E53             mul_loop:
0587+  1E53 F6            lodsb      ; load ASCII to al
0588+  1E54 B9 00         cmp al, 0
0589+  1E56 C6 69 1E      je mul_exit
0590+  1E59 6F 30         sub al, $30    ; make into integer
0591+  1E5B 22 00         mov ah, 0
0592+  1E5D 2A            mov b, [d]
0593+  1E5E AC            mul a, b      ; result in B since it fits in 16bits
0594+  1E5F 11            mov a, b
0595+  1E60 28            mov b, c
0596+  1E61 54            add a, b
0597+  1E62 39            mov c, a
0598+  1E63 63 02 00      sub d, 2
0599+  1E66 0A 53 1E      jmp mul_loop
0600+  1E69             mul_exit:
0601+  1E69 12            mov a, c
0602+  1E6A E7            pop d
0603+  1E6B E6            pop c
0604+  1E6C E5            pop b
0605+  1E6D EF            pop si
0606+  1E6E F9            leave
0607+  1E6F 09            ret
0608+  1E70             
0609+  1E70 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1E74 34 35 36 37 
0609+  1E78 38 39 41 42 
0609+  1E7C 43 44 45 46 
0610+  1E80 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1E84 1B 5B 48 00 
0611+  1E88             
0612+  1E88             table_power:
0613+  1E88 01 00         .dw 1
0614+  1E8A 0A 00         .dw 10
0615+  1E8C 64 00         .dw 100
0616+  1E8E E8 03         .dw 1000
0617+  1E90 10 27         .dw 100004264   1E92             ; --- END INLINE ASM BLOCK
4265   1E92             
4266   1E92 F9            leave
4267   1E93 09            ret
4268   1E94             
4269   1E94             test0:
4270   1E94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4271   1E97             ; $i 
4272   1E97             ; $pass 
4273   1E97 10 01 00      mov a, $1
4274   1E9A 45 FD FF      mov [bp + -3], a
4275   1E9D 52 04 00      sub sp, 4
4276   1EA0             ;; for (i = 0; i < 5; i++){ 
4277   1EA0             _for55_init:
4278   1EA0 FA FF FF      lea d, [bp + -1] ; $i
4279   1EA3 DA            push d
4280   1EA4 26 00 00      mov b, $0
4281   1EA7 E7            pop d
4282   1EA8 FD 43         mov [d], b
4283   1EAA             _for55_cond:
4284   1EAA FA FF FF      lea d, [bp + -1] ; $i
4285   1EAD 2A            mov b, [d]
4286   1EAE             ; START RELATIONAL
4287   1EAE D7            push a
4288   1EAF 11            mov a, b
4289   1EB0 26 05 00      mov b, $5
4290   1EB3 B0            cmp a, b
4291   1EB4 FD 73         slt ; <= (signed)
4292   1EB6 E4            pop a
4293   1EB7             ; END RELATIONAL
4294   1EB7 C0 00 00      cmp b, 0
4295   1EBA C6 FF 1E      je _for55_exit
4296   1EBD             _for55_block:
4297   1EBD             ;; gca1[i] = 'A' + i; 
4298   1EBD 3B FF 2D      mov d, _gca1_data ; $gca1
4299   1EC0 D7            push a
4300   1EC1 DA            push d
4301   1EC2 FA FF FF      lea d, [bp + -1] ; $i
4302   1EC5 2A            mov b, [d]
4303   1EC6 E7            pop d
4304   1EC7 5A            add d, b
4305   1EC8 E4            pop a
4306   1EC9 DA            push d
4307   1ECA 26 41 00      mov b, $41
4308   1ECD             ; START TERMS
4309   1ECD D7            push a
4310   1ECE 11            mov a, b
4311   1ECF FA FF FF      lea d, [bp + -1] ; $i
4312   1ED2 2A            mov b, [d]
4313   1ED3 56            add b, a
4314   1ED4 E4            pop a
4315   1ED5             ; END TERMS
4316   1ED5 E7            pop d
4317   1ED6 FD 3E         mov [d], bl
4318   1ED8             ;; gia1[i] = i; 
4319   1ED8 3B 04 2E      mov d, _gia1_data ; $gia1
4320   1EDB D7            push a
4321   1EDC DA            push d
4322   1EDD FA FF FF      lea d, [bp + -1] ; $i
4323   1EE0 2A            mov b, [d]
4324   1EE1 E7            pop d
4325   1EE2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4326   1EE6 E4            pop a
4327   1EE7 DA            push d
4328   1EE8 FA FF FF      lea d, [bp + -1] ; $i
4329   1EEB 2A            mov b, [d]
4330   1EEC E7            pop d
4331   1EED FD 43         mov [d], b
4332   1EEF             _for55_update:
4333   1EEF FA FF FF      lea d, [bp + -1] ; $i
4334   1EF2 2A            mov b, [d]
4335   1EF3 D8            push b
4336   1EF4 FD 77         inc b
4337   1EF6 FA FF FF      lea d, [bp + -1] ; $i
4338   1EF9 FD 43         mov [d], b
4339   1EFB E5            pop b
4340   1EFC 0A AA 1E      jmp _for55_cond
4341   1EFF             _for55_exit:
4342   1EFF             ;; for (i = 0; i < 5; i++){ 
4343   1EFF             _for56_init:
4344   1EFF FA FF FF      lea d, [bp + -1] ; $i
4345   1F02 DA            push d
4346   1F03 26 00 00      mov b, $0
4347   1F06 E7            pop d
4348   1F07 FD 43         mov [d], b
4349   1F09             _for56_cond:
4350   1F09 FA FF FF      lea d, [bp + -1] ; $i
4351   1F0C 2A            mov b, [d]
4352   1F0D             ; START RELATIONAL
4353   1F0D D7            push a
4354   1F0E 11            mov a, b
4355   1F0F 26 05 00      mov b, $5
4356   1F12 B0            cmp a, b
4357   1F13 FD 73         slt ; <= (signed)
4358   1F15 E4            pop a
4359   1F16             ; END RELATIONAL
4360   1F16 C0 00 00      cmp b, 0
4361   1F19 C6 92 1F      je _for56_exit
4362   1F1C             _for56_block:
4363   1F1C             ;; if(gca1[i] != 'A' + i){ 
4364   1F1C             _if57_cond:
4365   1F1C 3B FF 2D      mov d, _gca1_data ; $gca1
4366   1F1F D7            push a
4367   1F20 DA            push d
4368   1F21 FA FF FF      lea d, [bp + -1] ; $i
4369   1F24 2A            mov b, [d]
4370   1F25 E7            pop d
4371   1F26 5A            add d, b
4372   1F27 E4            pop a
4373   1F28 32            mov bl, [d]
4374   1F29 A7 00         mov bh, 0
4375   1F2B             ; START RELATIONAL
4376   1F2B D7            push a
4377   1F2C 11            mov a, b
4378   1F2D 26 41 00      mov b, $41
4379   1F30             ; START TERMS
4380   1F30 D7            push a
4381   1F31 11            mov a, b
4382   1F32 FA FF FF      lea d, [bp + -1] ; $i
4383   1F35 2A            mov b, [d]
4384   1F36 56            add b, a
4385   1F37 E4            pop a
4386   1F38             ; END TERMS
4387   1F38 B0            cmp a, b
4388   1F39 FD 72         sneq ; !=
4389   1F3B E4            pop a
4390   1F3C             ; END RELATIONAL
4391   1F3C C0 00 00      cmp b, 0
4392   1F3F C6 52 1F      je _if57_exit
4393   1F42             _if57_true:
4394   1F42             ;; pass = 0; 
4395   1F42 FA FD FF      lea d, [bp + -3] ; $pass
4396   1F45 DA            push d
4397   1F46 26 00 00      mov b, $0
4398   1F49 E7            pop d
4399   1F4A FD 43         mov [d], b
4400   1F4C             ;; break; 
4401   1F4C 0A 92 1F      jmp _for56_exit ; for break
4402   1F4F 0A 52 1F      jmp _if57_exit
4403   1F52             _if57_exit:
4404   1F52             ;; if(gia1[i] != i){ 
4405   1F52             _if58_cond:
4406   1F52 3B 04 2E      mov d, _gia1_data ; $gia1
4407   1F55 D7            push a
4408   1F56 DA            push d
4409   1F57 FA FF FF      lea d, [bp + -1] ; $i
4410   1F5A 2A            mov b, [d]
4411   1F5B E7            pop d
4412   1F5C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4413   1F60 E4            pop a
4414   1F61 2A            mov b, [d]
4415   1F62             ; START RELATIONAL
4416   1F62 D7            push a
4417   1F63 11            mov a, b
4418   1F64 FA FF FF      lea d, [bp + -1] ; $i
4419   1F67 2A            mov b, [d]
4420   1F68 B0            cmp a, b
4421   1F69 FD 72         sneq ; !=
4422   1F6B E4            pop a
4423   1F6C             ; END RELATIONAL
4424   1F6C C0 00 00      cmp b, 0
4425   1F6F C6 82 1F      je _if58_exit
4426   1F72             _if58_true:
4427   1F72             ;; pass = 0; 
4428   1F72 FA FD FF      lea d, [bp + -3] ; $pass
4429   1F75 DA            push d
4430   1F76 26 00 00      mov b, $0
4431   1F79 E7            pop d
4432   1F7A FD 43         mov [d], b
4433   1F7C             ;; break; 
4434   1F7C 0A 92 1F      jmp _for56_exit ; for break
4435   1F7F 0A 82 1F      jmp _if58_exit
4436   1F82             _if58_exit:
4437   1F82             _for56_update:
4438   1F82 FA FF FF      lea d, [bp + -1] ; $i
4439   1F85 2A            mov b, [d]
4440   1F86 D8            push b
4441   1F87 FD 77         inc b
4442   1F89 FA FF FF      lea d, [bp + -1] ; $i
4443   1F8C FD 43         mov [d], b
4444   1F8E E5            pop b
4445   1F8F 0A 09 1F      jmp _for56_cond
4446   1F92             _for56_exit:
4447   1F92             ;; return pass; 
4448   1F92 FA FD FF      lea d, [bp + -3] ; $pass
4449   1F95 2A            mov b, [d]
4450   1F96 F9            leave
4451   1F97 09            ret
4452   1F98             
4453   1F98             test1:
4454   1F98 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4455   1F9B             ; $i 
4456   1F9B             ; $j 
4457   1F9B             ; $pass 
4458   1F9B 10 01 00      mov a, $1
4459   1F9E 45 FB FF      mov [bp + -5], a
4460   1FA1 52 06 00      sub sp, 6
4461   1FA4             ;; for (i = 0; i < 5; i++){ 
4462   1FA4             _for59_init:
4463   1FA4 FA FF FF      lea d, [bp + -1] ; $i
4464   1FA7 DA            push d
4465   1FA8 26 00 00      mov b, $0
4466   1FAB E7            pop d
4467   1FAC FD 43         mov [d], b
4468   1FAE             _for59_cond:
4469   1FAE FA FF FF      lea d, [bp + -1] ; $i
4470   1FB1 2A            mov b, [d]
4471   1FB2             ; START RELATIONAL
4472   1FB2 D7            push a
4473   1FB3 11            mov a, b
4474   1FB4 26 05 00      mov b, $5
4475   1FB7 B0            cmp a, b
4476   1FB8 FD 73         slt ; <= (signed)
4477   1FBA E4            pop a
4478   1FBB             ; END RELATIONAL
4479   1FBB C0 00 00      cmp b, 0
4480   1FBE C6 54 20      je _for59_exit
4481   1FC1             _for59_block:
4482   1FC1             ;; for (j = 0; j < 5; j++){ 
4483   1FC1             _for60_init:
4484   1FC1 FA FD FF      lea d, [bp + -3] ; $j
4485   1FC4 DA            push d
4486   1FC5 26 00 00      mov b, $0
4487   1FC8 E7            pop d
4488   1FC9 FD 43         mov [d], b
4489   1FCB             _for60_cond:
4490   1FCB FA FD FF      lea d, [bp + -3] ; $j
4491   1FCE 2A            mov b, [d]
4492   1FCF             ; START RELATIONAL
4493   1FCF D7            push a
4494   1FD0 11            mov a, b
4495   1FD1 26 05 00      mov b, $5
4496   1FD4 B0            cmp a, b
4497   1FD5 FD 73         slt ; <= (signed)
4498   1FD7 E4            pop a
4499   1FD8             ; END RELATIONAL
4500   1FD8 C0 00 00      cmp b, 0
4501   1FDB C6 44 20      je _for60_exit
4502   1FDE             _for60_block:
4503   1FDE             ;; gca2[i][j] = 'A' + i + j; 
4504   1FDE 3B 0E 2E      mov d, _gca2_data ; $gca2
4505   1FE1 D7            push a
4506   1FE2 DA            push d
4507   1FE3 FA FF FF      lea d, [bp + -1] ; $i
4508   1FE6 2A            mov b, [d]
4509   1FE7 E7            pop d
4510   1FE8 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
4511   1FEC DA            push d
4512   1FED FA FD FF      lea d, [bp + -3] ; $j
4513   1FF0 2A            mov b, [d]
4514   1FF1 E7            pop d
4515   1FF2 5A            add d, b
4516   1FF3 E4            pop a
4517   1FF4 DA            push d
4518   1FF5 26 41 00      mov b, $41
4519   1FF8             ; START TERMS
4520   1FF8 D7            push a
4521   1FF9 11            mov a, b
4522   1FFA FA FF FF      lea d, [bp + -1] ; $i
4523   1FFD 2A            mov b, [d]
4524   1FFE 56            add b, a
4525   1FFF 11            mov a, b
4526   2000 FA FD FF      lea d, [bp + -3] ; $j
4527   2003 2A            mov b, [d]
4528   2004 56            add b, a
4529   2005 E4            pop a
4530   2006             ; END TERMS
4531   2006 E7            pop d
4532   2007 FD 3E         mov [d], bl
4533   2009             ;; gia2[i][j] = i * j; 
4534   2009 3B 27 2E      mov d, _gia2_data ; $gia2
4535   200C D7            push a
4536   200D DA            push d
4537   200E FA FF FF      lea d, [bp + -1] ; $i
4538   2011 2A            mov b, [d]
4539   2012 E7            pop d
4540   2013 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
4541   2017 DA            push d
4542   2018 FA FD FF      lea d, [bp + -3] ; $j
4543   201B 2A            mov b, [d]
4544   201C E7            pop d
4545   201D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4546   2021 E4            pop a
4547   2022 DA            push d
4548   2023 FA FF FF      lea d, [bp + -1] ; $i
4549   2026 2A            mov b, [d]
4550   2027             ; START FACTORS
4551   2027 D7            push a
4552   2028 11            mov a, b
4553   2029 FA FD FF      lea d, [bp + -3] ; $j
4554   202C 2A            mov b, [d]
4555   202D AC            mul a, b ; *
4556   202E 11            mov a, b
4557   202F 27            mov b, a
4558   2030 E4            pop a
4559   2031             ; END FACTORS
4560   2031 E7            pop d
4561   2032 FD 43         mov [d], b
4562   2034             _for60_update:
4563   2034 FA FD FF      lea d, [bp + -3] ; $j
4564   2037 2A            mov b, [d]
4565   2038 D8            push b
4566   2039 FD 77         inc b
4567   203B FA FD FF      lea d, [bp + -3] ; $j
4568   203E FD 43         mov [d], b
4569   2040 E5            pop b
4570   2041 0A CB 1F      jmp _for60_cond
4571   2044             _for60_exit:
4572   2044             _for59_update:
4573   2044 FA FF FF      lea d, [bp + -1] ; $i
4574   2047 2A            mov b, [d]
4575   2048 D8            push b
4576   2049 FD 77         inc b
4577   204B FA FF FF      lea d, [bp + -1] ; $i
4578   204E FD 43         mov [d], b
4579   2050 E5            pop b
4580   2051 0A AE 1F      jmp _for59_cond
4581   2054             _for59_exit:
4582   2054             ;; for (i = 0; i < 5; i++){ 
4583   2054             _for61_init:
4584   2054 FA FF FF      lea d, [bp + -1] ; $i
4585   2057 DA            push d
4586   2058 26 00 00      mov b, $0
4587   205B E7            pop d
4588   205C FD 43         mov [d], b
4589   205E             _for61_cond:
4590   205E FA FF FF      lea d, [bp + -1] ; $i
4591   2061 2A            mov b, [d]
4592   2062             ; START RELATIONAL
4593   2062 D7            push a
4594   2063 11            mov a, b
4595   2064 26 05 00      mov b, $5
4596   2067 B0            cmp a, b
4597   2068 FD 73         slt ; <= (signed)
4598   206A E4            pop a
4599   206B             ; END RELATIONAL
4600   206B C0 00 00      cmp b, 0
4601   206E C6 38 21      je _for61_exit
4602   2071             _for61_block:
4603   2071             ;; for (j = 0; j < 5; j++){ 
4604   2071             _for62_init:
4605   2071 FA FD FF      lea d, [bp + -3] ; $j
4606   2074 DA            push d
4607   2075 26 00 00      mov b, $0
4608   2078 E7            pop d
4609   2079 FD 43         mov [d], b
4610   207B             _for62_cond:
4611   207B FA FD FF      lea d, [bp + -3] ; $j
4612   207E 2A            mov b, [d]
4613   207F             ; START RELATIONAL
4614   207F D7            push a
4615   2080 11            mov a, b
4616   2081 26 05 00      mov b, $5
4617   2084 B0            cmp a, b
4618   2085 FD 73         slt ; <= (signed)
4619   2087 E4            pop a
4620   2088             ; END RELATIONAL
4621   2088 C0 00 00      cmp b, 0
4622   208B C6 28 21      je _for62_exit
4623   208E             _for62_block:
4624   208E             ;; if(gca2[i][j] != 'A' + i + j){ 
4625   208E             _if63_cond:
4626   208E 3B 0E 2E      mov d, _gca2_data ; $gca2
4627   2091 D7            push a
4628   2092 DA            push d
4629   2093 FA FF FF      lea d, [bp + -1] ; $i
4630   2096 2A            mov b, [d]
4631   2097 E7            pop d
4632   2098 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
4633   209C DA            push d
4634   209D FA FD FF      lea d, [bp + -3] ; $j
4635   20A0 2A            mov b, [d]
4636   20A1 E7            pop d
4637   20A2 5A            add d, b
4638   20A3 E4            pop a
4639   20A4 32            mov bl, [d]
4640   20A5 A7 00         mov bh, 0
4641   20A7             ; START RELATIONAL
4642   20A7 D7            push a
4643   20A8 11            mov a, b
4644   20A9 26 41 00      mov b, $41
4645   20AC             ; START TERMS
4646   20AC D7            push a
4647   20AD 11            mov a, b
4648   20AE FA FF FF      lea d, [bp + -1] ; $i
4649   20B1 2A            mov b, [d]
4650   20B2 56            add b, a
4651   20B3 11            mov a, b
4652   20B4 FA FD FF      lea d, [bp + -3] ; $j
4653   20B7 2A            mov b, [d]
4654   20B8 56            add b, a
4655   20B9 E4            pop a
4656   20BA             ; END TERMS
4657   20BA B0            cmp a, b
4658   20BB FD 72         sneq ; !=
4659   20BD E4            pop a
4660   20BE             ; END RELATIONAL
4661   20BE C0 00 00      cmp b, 0
4662   20C1 C6 D4 20      je _if63_exit
4663   20C4             _if63_true:
4664   20C4             ;; pass = 0; 
4665   20C4 FA FB FF      lea d, [bp + -5] ; $pass
4666   20C7 DA            push d
4667   20C8 26 00 00      mov b, $0
4668   20CB E7            pop d
4669   20CC FD 43         mov [d], b
4670   20CE             ;; break; 
4671   20CE 0A 28 21      jmp _for62_exit ; for break
4672   20D1 0A D4 20      jmp _if63_exit
4673   20D4             _if63_exit:
4674   20D4             ;; if(gia2[i][j] != i * j){ 
4675   20D4             _if64_cond:
4676   20D4 3B 27 2E      mov d, _gia2_data ; $gia2
4677   20D7 D7            push a
4678   20D8 DA            push d
4679   20D9 FA FF FF      lea d, [bp + -1] ; $i
4680   20DC 2A            mov b, [d]
4681   20DD E7            pop d
4682   20DE FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
4683   20E2 DA            push d
4684   20E3 FA FD FF      lea d, [bp + -3] ; $j
4685   20E6 2A            mov b, [d]
4686   20E7 E7            pop d
4687   20E8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4688   20EC E4            pop a
4689   20ED 2A            mov b, [d]
4690   20EE             ; START RELATIONAL
4691   20EE D7            push a
4692   20EF 11            mov a, b
4693   20F0 FA FF FF      lea d, [bp + -1] ; $i
4694   20F3 2A            mov b, [d]
4695   20F4             ; START FACTORS
4696   20F4 D7            push a
4697   20F5 11            mov a, b
4698   20F6 FA FD FF      lea d, [bp + -3] ; $j
4699   20F9 2A            mov b, [d]
4700   20FA AC            mul a, b ; *
4701   20FB 11            mov a, b
4702   20FC 27            mov b, a
4703   20FD E4            pop a
4704   20FE             ; END FACTORS
4705   20FE B0            cmp a, b
4706   20FF FD 72         sneq ; !=
4707   2101 E4            pop a
4708   2102             ; END RELATIONAL
4709   2102 C0 00 00      cmp b, 0
4710   2105 C6 18 21      je _if64_exit
4711   2108             _if64_true:
4712   2108             ;; pass = 0; 
4713   2108 FA FB FF      lea d, [bp + -5] ; $pass
4714   210B DA            push d
4715   210C 26 00 00      mov b, $0
4716   210F E7            pop d
4717   2110 FD 43         mov [d], b
4718   2112             ;; break; 
4719   2112 0A 28 21      jmp _for62_exit ; for break
4720   2115 0A 18 21      jmp _if64_exit
4721   2118             _if64_exit:
4722   2118             _for62_update:
4723   2118 FA FD FF      lea d, [bp + -3] ; $j
4724   211B 2A            mov b, [d]
4725   211C D8            push b
4726   211D FD 77         inc b
4727   211F FA FD FF      lea d, [bp + -3] ; $j
4728   2122 FD 43         mov [d], b
4729   2124 E5            pop b
4730   2125 0A 7B 20      jmp _for62_cond
4731   2128             _for62_exit:
4732   2128             _for61_update:
4733   2128 FA FF FF      lea d, [bp + -1] ; $i
4734   212B 2A            mov b, [d]
4735   212C D8            push b
4736   212D FD 77         inc b
4737   212F FA FF FF      lea d, [bp + -1] ; $i
4738   2132 FD 43         mov [d], b
4739   2134 E5            pop b
4740   2135 0A 5E 20      jmp _for61_cond
4741   2138             _for61_exit:
4742   2138             ;; return pass; 
4743   2138 FA FB FF      lea d, [bp + -5] ; $pass
4744   213B 2A            mov b, [d]
4745   213C F9            leave
4746   213D 09            ret
4747   213E             
4748   213E             test2:
4749   213E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4750   2141             ; $i 
4751   2141             ; $j 
4752   2141             ; $lca 
4753   2141             ; $lia 
4754   2141             ; $pass 
4755   2141 10 01 00      mov a, $1
4756   2144 45 EC FF      mov [bp + -20], a
4757   2147 52 15 00      sub sp, 21
4758   214A             ;; for (i = 0; i < 5; i++){ 
4759   214A             _for65_init:
4760   214A FA FF FF      lea d, [bp + -1] ; $i
4761   214D DA            push d
4762   214E 26 00 00      mov b, $0
4763   2151 E7            pop d
4764   2152 FD 43         mov [d], b
4765   2154             _for65_cond:
4766   2154 FA FF FF      lea d, [bp + -1] ; $i
4767   2157 2A            mov b, [d]
4768   2158             ; START RELATIONAL
4769   2158 D7            push a
4770   2159 11            mov a, b
4771   215A 26 05 00      mov b, $5
4772   215D B0            cmp a, b
4773   215E FD 73         slt ; <= (signed)
4774   2160 E4            pop a
4775   2161             ; END RELATIONAL
4776   2161 C0 00 00      cmp b, 0
4777   2164 C6 B9 21      je _for65_exit
4778   2167             _for65_block:
4779   2167             ;; lca[i] = 'A' + i + j; 
4780   2167 FA F8 FF      lea d, [bp + -8] ; $lca
4781   216A D7            push a
4782   216B DA            push d
4783   216C FA FF FF      lea d, [bp + -1] ; $i
4784   216F 2A            mov b, [d]
4785   2170 E7            pop d
4786   2171 5A            add d, b
4787   2172 E4            pop a
4788   2173 DA            push d
4789   2174 26 41 00      mov b, $41
4790   2177             ; START TERMS
4791   2177 D7            push a
4792   2178 11            mov a, b
4793   2179 FA FF FF      lea d, [bp + -1] ; $i
4794   217C 2A            mov b, [d]
4795   217D 56            add b, a
4796   217E 11            mov a, b
4797   217F FA FD FF      lea d, [bp + -3] ; $j
4798   2182 2A            mov b, [d]
4799   2183 56            add b, a
4800   2184 E4            pop a
4801   2185             ; END TERMS
4802   2185 E7            pop d
4803   2186 FD 3E         mov [d], bl
4804   2188             ;; lia[i] = i * j; 
4805   2188 FA EE FF      lea d, [bp + -18] ; $lia
4806   218B D7            push a
4807   218C DA            push d
4808   218D FA FF FF      lea d, [bp + -1] ; $i
4809   2190 2A            mov b, [d]
4810   2191 E7            pop d
4811   2192 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4812   2196 E4            pop a
4813   2197 DA            push d
4814   2198 FA FF FF      lea d, [bp + -1] ; $i
4815   219B 2A            mov b, [d]
4816   219C             ; START FACTORS
4817   219C D7            push a
4818   219D 11            mov a, b
4819   219E FA FD FF      lea d, [bp + -3] ; $j
4820   21A1 2A            mov b, [d]
4821   21A2 AC            mul a, b ; *
4822   21A3 11            mov a, b
4823   21A4 27            mov b, a
4824   21A5 E4            pop a
4825   21A6             ; END FACTORS
4826   21A6 E7            pop d
4827   21A7 FD 43         mov [d], b
4828   21A9             _for65_update:
4829   21A9 FA FF FF      lea d, [bp + -1] ; $i
4830   21AC 2A            mov b, [d]
4831   21AD D8            push b
4832   21AE FD 77         inc b
4833   21B0 FA FF FF      lea d, [bp + -1] ; $i
4834   21B3 FD 43         mov [d], b
4835   21B5 E5            pop b
4836   21B6 0A 54 21      jmp _for65_cond
4837   21B9             _for65_exit:
4838   21B9             ;; for (i = 0; i < 5; i++){ 
4839   21B9             _for66_init:
4840   21B9 FA FF FF      lea d, [bp + -1] ; $i
4841   21BC DA            push d
4842   21BD 26 00 00      mov b, $0
4843   21C0 E7            pop d
4844   21C1 FD 43         mov [d], b
4845   21C3             _for66_cond:
4846   21C3 FA FF FF      lea d, [bp + -1] ; $i
4847   21C6 2A            mov b, [d]
4848   21C7             ; START RELATIONAL
4849   21C7 D7            push a
4850   21C8 11            mov a, b
4851   21C9 26 05 00      mov b, $5
4852   21CC B0            cmp a, b
4853   21CD FD 73         slt ; <= (signed)
4854   21CF E4            pop a
4855   21D0             ; END RELATIONAL
4856   21D0 C0 00 00      cmp b, 0
4857   21D3 C6 5C 22      je _for66_exit
4858   21D6             _for66_block:
4859   21D6             ;; if(lca[i] != 'A' + i + j){ 
4860   21D6             _if67_cond:
4861   21D6 FA F8 FF      lea d, [bp + -8] ; $lca
4862   21D9 D7            push a
4863   21DA DA            push d
4864   21DB FA FF FF      lea d, [bp + -1] ; $i
4865   21DE 2A            mov b, [d]
4866   21DF E7            pop d
4867   21E0 5A            add d, b
4868   21E1 E4            pop a
4869   21E2 32            mov bl, [d]
4870   21E3 A7 00         mov bh, 0
4871   21E5             ; START RELATIONAL
4872   21E5 D7            push a
4873   21E6 11            mov a, b
4874   21E7 26 41 00      mov b, $41
4875   21EA             ; START TERMS
4876   21EA D7            push a
4877   21EB 11            mov a, b
4878   21EC FA FF FF      lea d, [bp + -1] ; $i
4879   21EF 2A            mov b, [d]
4880   21F0 56            add b, a
4881   21F1 11            mov a, b
4882   21F2 FA FD FF      lea d, [bp + -3] ; $j
4883   21F5 2A            mov b, [d]
4884   21F6 56            add b, a
4885   21F7 E4            pop a
4886   21F8             ; END TERMS
4887   21F8 B0            cmp a, b
4888   21F9 FD 72         sneq ; !=
4889   21FB E4            pop a
4890   21FC             ; END RELATIONAL
4891   21FC C0 00 00      cmp b, 0
4892   21FF C6 12 22      je _if67_exit
4893   2202             _if67_true:
4894   2202             ;; pass = 0; 
4895   2202 FA EC FF      lea d, [bp + -20] ; $pass
4896   2205 DA            push d
4897   2206 26 00 00      mov b, $0
4898   2209 E7            pop d
4899   220A FD 43         mov [d], b
4900   220C             ;; break; 
4901   220C 0A 5C 22      jmp _for66_exit ; for break
4902   220F 0A 12 22      jmp _if67_exit
4903   2212             _if67_exit:
4904   2212             ;; if(lia[i] != i * j){ 
4905   2212             _if68_cond:
4906   2212 FA EE FF      lea d, [bp + -18] ; $lia
4907   2215 D7            push a
4908   2216 DA            push d
4909   2217 FA FF FF      lea d, [bp + -1] ; $i
4910   221A 2A            mov b, [d]
4911   221B E7            pop d
4912   221C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4913   2220 E4            pop a
4914   2221 2A            mov b, [d]
4915   2222             ; START RELATIONAL
4916   2222 D7            push a
4917   2223 11            mov a, b
4918   2224 FA FF FF      lea d, [bp + -1] ; $i
4919   2227 2A            mov b, [d]
4920   2228             ; START FACTORS
4921   2228 D7            push a
4922   2229 11            mov a, b
4923   222A FA FD FF      lea d, [bp + -3] ; $j
4924   222D 2A            mov b, [d]
4925   222E AC            mul a, b ; *
4926   222F 11            mov a, b
4927   2230 27            mov b, a
4928   2231 E4            pop a
4929   2232             ; END FACTORS
4930   2232 B0            cmp a, b
4931   2233 FD 72         sneq ; !=
4932   2235 E4            pop a
4933   2236             ; END RELATIONAL
4934   2236 C0 00 00      cmp b, 0
4935   2239 C6 4C 22      je _if68_exit
4936   223C             _if68_true:
4937   223C             ;; pass = 0; 
4938   223C FA EC FF      lea d, [bp + -20] ; $pass
4939   223F DA            push d
4940   2240 26 00 00      mov b, $0
4941   2243 E7            pop d
4942   2244 FD 43         mov [d], b
4943   2246             ;; break; 
4944   2246 0A 5C 22      jmp _for66_exit ; for break
4945   2249 0A 4C 22      jmp _if68_exit
4946   224C             _if68_exit:
4947   224C             _for66_update:
4948   224C FA FF FF      lea d, [bp + -1] ; $i
4949   224F 2A            mov b, [d]
4950   2250 D8            push b
4951   2251 FD 77         inc b
4952   2253 FA FF FF      lea d, [bp + -1] ; $i
4953   2256 FD 43         mov [d], b
4954   2258 E5            pop b
4955   2259 0A C3 21      jmp _for66_cond
4956   225C             _for66_exit:
4957   225C             ;; return pass; 
4958   225C FA EC FF      lea d, [bp + -20] ; $pass
4959   225F 2A            mov b, [d]
4960   2260 F9            leave
4961   2261 09            ret
4962   2262             
4963   2262             test3:
4964   2262 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4965   2265             ; $i 
4966   2265             ; $j 
4967   2265             ; $lca 
4968   2265             ; $lia 
4969   2265             ; $pass 
4970   2265 10 01 00      mov a, $1
4971   2268 45 B0 FF      mov [bp + -80], a
4972   226B 52 51 00      sub sp, 81
4973   226E             ;; for (i = 0; i < 5; i++){ 
4974   226E             _for69_init:
4975   226E FA FF FF      lea d, [bp + -1] ; $i
4976   2271 DA            push d
4977   2272 26 00 00      mov b, $0
4978   2275 E7            pop d
4979   2276 FD 43         mov [d], b
4980   2278             _for69_cond:
4981   2278 FA FF FF      lea d, [bp + -1] ; $i
4982   227B 2A            mov b, [d]
4983   227C             ; START RELATIONAL
4984   227C D7            push a
4985   227D 11            mov a, b
4986   227E 26 05 00      mov b, $5
4987   2281 B0            cmp a, b
4988   2282 FD 73         slt ; <= (signed)
4989   2284 E4            pop a
4990   2285             ; END RELATIONAL
4991   2285 C0 00 00      cmp b, 0
4992   2288 C6 1E 23      je _for69_exit
4993   228B             _for69_block:
4994   228B             ;; for (j = 0; j < 5; j++){ 
4995   228B             _for70_init:
4996   228B FA FD FF      lea d, [bp + -3] ; $j
4997   228E DA            push d
4998   228F 26 00 00      mov b, $0
4999   2292 E7            pop d
5000   2293 FD 43         mov [d], b
5001   2295             _for70_cond:
5002   2295 FA FD FF      lea d, [bp + -3] ; $j
5003   2298 2A            mov b, [d]
5004   2299             ; START RELATIONAL
5005   2299 D7            push a
5006   229A 11            mov a, b
5007   229B 26 05 00      mov b, $5
5008   229E B0            cmp a, b
5009   229F FD 73         slt ; <= (signed)
5010   22A1 E4            pop a
5011   22A2             ; END RELATIONAL
5012   22A2 C0 00 00      cmp b, 0
5013   22A5 C6 0E 23      je _for70_exit
5014   22A8             _for70_block:
5015   22A8             ;; lca[i][j] = 'A' + i + j; 
5016   22A8 FA E4 FF      lea d, [bp + -28] ; $lca
5017   22AB D7            push a
5018   22AC DA            push d
5019   22AD FA FF FF      lea d, [bp + -1] ; $i
5020   22B0 2A            mov b, [d]
5021   22B1 E7            pop d
5022   22B2 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
5023   22B6 DA            push d
5024   22B7 FA FD FF      lea d, [bp + -3] ; $j
5025   22BA 2A            mov b, [d]
5026   22BB E7            pop d
5027   22BC 5A            add d, b
5028   22BD E4            pop a
5029   22BE DA            push d
5030   22BF 26 41 00      mov b, $41
5031   22C2             ; START TERMS
5032   22C2 D7            push a
5033   22C3 11            mov a, b
5034   22C4 FA FF FF      lea d, [bp + -1] ; $i
5035   22C7 2A            mov b, [d]
5036   22C8 56            add b, a
5037   22C9 11            mov a, b
5038   22CA FA FD FF      lea d, [bp + -3] ; $j
5039   22CD 2A            mov b, [d]
5040   22CE 56            add b, a
5041   22CF E4            pop a
5042   22D0             ; END TERMS
5043   22D0 E7            pop d
5044   22D1 FD 3E         mov [d], bl
5045   22D3             ;; lia[i][j] = i * j; 
5046   22D3 FA B2 FF      lea d, [bp + -78] ; $lia
5047   22D6 D7            push a
5048   22D7 DA            push d
5049   22D8 FA FF FF      lea d, [bp + -1] ; $i
5050   22DB 2A            mov b, [d]
5051   22DC E7            pop d
5052   22DD FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
5053   22E1 DA            push d
5054   22E2 FA FD FF      lea d, [bp + -3] ; $j
5055   22E5 2A            mov b, [d]
5056   22E6 E7            pop d
5057   22E7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5058   22EB E4            pop a
5059   22EC DA            push d
5060   22ED FA FF FF      lea d, [bp + -1] ; $i
5061   22F0 2A            mov b, [d]
5062   22F1             ; START FACTORS
5063   22F1 D7            push a
5064   22F2 11            mov a, b
5065   22F3 FA FD FF      lea d, [bp + -3] ; $j
5066   22F6 2A            mov b, [d]
5067   22F7 AC            mul a, b ; *
5068   22F8 11            mov a, b
5069   22F9 27            mov b, a
5070   22FA E4            pop a
5071   22FB             ; END FACTORS
5072   22FB E7            pop d
5073   22FC FD 43         mov [d], b
5074   22FE             _for70_update:
5075   22FE FA FD FF      lea d, [bp + -3] ; $j
5076   2301 2A            mov b, [d]
5077   2302 D8            push b
5078   2303 FD 77         inc b
5079   2305 FA FD FF      lea d, [bp + -3] ; $j
5080   2308 FD 43         mov [d], b
5081   230A E5            pop b
5082   230B 0A 95 22      jmp _for70_cond
5083   230E             _for70_exit:
5084   230E             _for69_update:
5085   230E FA FF FF      lea d, [bp + -1] ; $i
5086   2311 2A            mov b, [d]
5087   2312 D8            push b
5088   2313 FD 77         inc b
5089   2315 FA FF FF      lea d, [bp + -1] ; $i
5090   2318 FD 43         mov [d], b
5091   231A E5            pop b
5092   231B 0A 78 22      jmp _for69_cond
5093   231E             _for69_exit:
5094   231E             ;; for (i = 0; i < 5; i++){ 
5095   231E             _for71_init:
5096   231E FA FF FF      lea d, [bp + -1] ; $i
5097   2321 DA            push d
5098   2322 26 00 00      mov b, $0
5099   2325 E7            pop d
5100   2326 FD 43         mov [d], b
5101   2328             _for71_cond:
5102   2328 FA FF FF      lea d, [bp + -1] ; $i
5103   232B 2A            mov b, [d]
5104   232C             ; START RELATIONAL
5105   232C D7            push a
5106   232D 11            mov a, b
5107   232E 26 05 00      mov b, $5
5108   2331 B0            cmp a, b
5109   2332 FD 73         slt ; <= (signed)
5110   2334 E4            pop a
5111   2335             ; END RELATIONAL
5112   2335 C0 00 00      cmp b, 0
5113   2338 C6 02 24      je _for71_exit
5114   233B             _for71_block:
5115   233B             ;; for (j = 0; j < 5; j++){ 
5116   233B             _for72_init:
5117   233B FA FD FF      lea d, [bp + -3] ; $j
5118   233E DA            push d
5119   233F 26 00 00      mov b, $0
5120   2342 E7            pop d
5121   2343 FD 43         mov [d], b
5122   2345             _for72_cond:
5123   2345 FA FD FF      lea d, [bp + -3] ; $j
5124   2348 2A            mov b, [d]
5125   2349             ; START RELATIONAL
5126   2349 D7            push a
5127   234A 11            mov a, b
5128   234B 26 05 00      mov b, $5
5129   234E B0            cmp a, b
5130   234F FD 73         slt ; <= (signed)
5131   2351 E4            pop a
5132   2352             ; END RELATIONAL
5133   2352 C0 00 00      cmp b, 0
5134   2355 C6 F2 23      je _for72_exit
5135   2358             _for72_block:
5136   2358             ;; if(lca[i][j] != 'A' + i + j){ 
5137   2358             _if73_cond:
5138   2358 FA E4 FF      lea d, [bp + -28] ; $lca
5139   235B D7            push a
5140   235C DA            push d
5141   235D FA FF FF      lea d, [bp + -1] ; $i
5142   2360 2A            mov b, [d]
5143   2361 E7            pop d
5144   2362 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
5145   2366 DA            push d
5146   2367 FA FD FF      lea d, [bp + -3] ; $j
5147   236A 2A            mov b, [d]
5148   236B E7            pop d
5149   236C 5A            add d, b
5150   236D E4            pop a
5151   236E 32            mov bl, [d]
5152   236F A7 00         mov bh, 0
5153   2371             ; START RELATIONAL
5154   2371 D7            push a
5155   2372 11            mov a, b
5156   2373 26 41 00      mov b, $41
5157   2376             ; START TERMS
5158   2376 D7            push a
5159   2377 11            mov a, b
5160   2378 FA FF FF      lea d, [bp + -1] ; $i
5161   237B 2A            mov b, [d]
5162   237C 56            add b, a
5163   237D 11            mov a, b
5164   237E FA FD FF      lea d, [bp + -3] ; $j
5165   2381 2A            mov b, [d]
5166   2382 56            add b, a
5167   2383 E4            pop a
5168   2384             ; END TERMS
5169   2384 B0            cmp a, b
5170   2385 FD 72         sneq ; !=
5171   2387 E4            pop a
5172   2388             ; END RELATIONAL
5173   2388 C0 00 00      cmp b, 0
5174   238B C6 9E 23      je _if73_exit
5175   238E             _if73_true:
5176   238E             ;; pass = 0; 
5177   238E FA B0 FF      lea d, [bp + -80] ; $pass
5178   2391 DA            push d
5179   2392 26 00 00      mov b, $0
5180   2395 E7            pop d
5181   2396 FD 43         mov [d], b
5182   2398             ;; break; 
5183   2398 0A F2 23      jmp _for72_exit ; for break
5184   239B 0A 9E 23      jmp _if73_exit
5185   239E             _if73_exit:
5186   239E             ;; if(lia[i][j] != i * j){ 
5187   239E             _if74_cond:
5188   239E FA B2 FF      lea d, [bp + -78] ; $lia
5189   23A1 D7            push a
5190   23A2 DA            push d
5191   23A3 FA FF FF      lea d, [bp + -1] ; $i
5192   23A6 2A            mov b, [d]
5193   23A7 E7            pop d
5194   23A8 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
5195   23AC DA            push d
5196   23AD FA FD FF      lea d, [bp + -3] ; $j
5197   23B0 2A            mov b, [d]
5198   23B1 E7            pop d
5199   23B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5200   23B6 E4            pop a
5201   23B7 2A            mov b, [d]
5202   23B8             ; START RELATIONAL
5203   23B8 D7            push a
5204   23B9 11            mov a, b
5205   23BA FA FF FF      lea d, [bp + -1] ; $i
5206   23BD 2A            mov b, [d]
5207   23BE             ; START FACTORS
5208   23BE D7            push a
5209   23BF 11            mov a, b
5210   23C0 FA FD FF      lea d, [bp + -3] ; $j
5211   23C3 2A            mov b, [d]
5212   23C4 AC            mul a, b ; *
5213   23C5 11            mov a, b
5214   23C6 27            mov b, a
5215   23C7 E4            pop a
5216   23C8             ; END FACTORS
5217   23C8 B0            cmp a, b
5218   23C9 FD 72         sneq ; !=
5219   23CB E4            pop a
5220   23CC             ; END RELATIONAL
5221   23CC C0 00 00      cmp b, 0
5222   23CF C6 E2 23      je _if74_exit
5223   23D2             _if74_true:
5224   23D2             ;; pass = 0; 
5225   23D2 FA B0 FF      lea d, [bp + -80] ; $pass
5226   23D5 DA            push d
5227   23D6 26 00 00      mov b, $0
5228   23D9 E7            pop d
5229   23DA FD 43         mov [d], b
5230   23DC             ;; break; 
5231   23DC 0A F2 23      jmp _for72_exit ; for break
5232   23DF 0A E2 23      jmp _if74_exit
5233   23E2             _if74_exit:
5234   23E2             _for72_update:
5235   23E2 FA FD FF      lea d, [bp + -3] ; $j
5236   23E5 2A            mov b, [d]
5237   23E6 D8            push b
5238   23E7 FD 77         inc b
5239   23E9 FA FD FF      lea d, [bp + -3] ; $j
5240   23EC FD 43         mov [d], b
5241   23EE E5            pop b
5242   23EF 0A 45 23      jmp _for72_cond
5243   23F2             _for72_exit:
5244   23F2             _for71_update:
5245   23F2 FA FF FF      lea d, [bp + -1] ; $i
5246   23F5 2A            mov b, [d]
5247   23F6 D8            push b
5248   23F7 FD 77         inc b
5249   23F9 FA FF FF      lea d, [bp + -1] ; $i
5250   23FC FD 43         mov [d], b
5251   23FE E5            pop b
5252   23FF 0A 28 23      jmp _for71_cond
5253   2402             _for71_exit:
5254   2402             ;; return pass; 
5255   2402 FA B0 FF      lea d, [bp + -80] ; $pass
5256   2405 2A            mov b, [d]
5257   2406 F9            leave
5258   2407 09            ret
5259   2408             
5260   2408             test4:
5261   2408 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5262   240B             ; $a 
5263   240B             ; $b 
5264   240B             ; $c 
5265   240B             ; $result 
5266   240B             ; $pass 
5267   240B 10 01 00      mov a, $1
5268   240E 45 F7 FF      mov [bp + -9], a
5269   2411 52 0A 00      sub sp, 10
5270   2414             ;; result = 1 && 1 && 1; 
5271   2414 FA F9 FF      lea d, [bp + -7] ; $result
5272   2417 DA            push d
5273   2418 26 01 00      mov b, $1
5274   241B D7            push a
5275   241C 11            mov a, b
5276   241D 26 01 00      mov b, $1
5277   2420 FD A7         sand a, b ; &&
5278   2422 11            mov a, b
5279   2423 26 01 00      mov b, $1
5280   2426 FD A7         sand a, b ; &&
5281   2428 E4            pop a
5282   2429 E7            pop d
5283   242A FD 43         mov [d], b
5284   242C             ;; pass = pass && result == 1; 
5285   242C FA F7 FF      lea d, [bp + -9] ; $pass
5286   242F DA            push d
5287   2430 FA F7 FF      lea d, [bp + -9] ; $pass
5288   2433 2A            mov b, [d]
5289   2434 D7            push a
5290   2435 11            mov a, b
5291   2436 FA F9 FF      lea d, [bp + -7] ; $result
5292   2439 2A            mov b, [d]
5293   243A             ; START RELATIONAL
5294   243A D7            push a
5295   243B 11            mov a, b
5296   243C 26 01 00      mov b, $1
5297   243F B0            cmp a, b
5298   2440 FD 71         seq ; ==
5299   2442 E4            pop a
5300   2443             ; END RELATIONAL
5301   2443 FD A7         sand a, b ; &&
5302   2445 E4            pop a
5303   2446 E7            pop d
5304   2447 FD 43         mov [d], b
5305   2449             ;; result = 1 && 0 && 1; 
5306   2449 FA F9 FF      lea d, [bp + -7] ; $result
5307   244C DA            push d
5308   244D 26 01 00      mov b, $1
5309   2450 D7            push a
5310   2451 11            mov a, b
5311   2452 26 00 00      mov b, $0
5312   2455 FD A7         sand a, b ; &&
5313   2457 11            mov a, b
5314   2458 26 01 00      mov b, $1
5315   245B FD A7         sand a, b ; &&
5316   245D E4            pop a
5317   245E E7            pop d
5318   245F FD 43         mov [d], b
5319   2461             ;; pass = pass && result == 0; 
5320   2461 FA F7 FF      lea d, [bp + -9] ; $pass
5321   2464 DA            push d
5322   2465 FA F7 FF      lea d, [bp + -9] ; $pass
5323   2468 2A            mov b, [d]
5324   2469 D7            push a
5325   246A 11            mov a, b
5326   246B FA F9 FF      lea d, [bp + -7] ; $result
5327   246E 2A            mov b, [d]
5328   246F             ; START RELATIONAL
5329   246F D7            push a
5330   2470 11            mov a, b
5331   2471 26 00 00      mov b, $0
5332   2474 B0            cmp a, b
5333   2475 FD 71         seq ; ==
5334   2477 E4            pop a
5335   2478             ; END RELATIONAL
5336   2478 FD A7         sand a, b ; &&
5337   247A E4            pop a
5338   247B E7            pop d
5339   247C FD 43         mov [d], b
5340   247E             ;; result = 1 || 1 || 1; 
5341   247E FA F9 FF      lea d, [bp + -7] ; $result
5342   2481 DA            push d
5343   2482 26 01 00      mov b, $1
5344   2485 D7            push a
5345   2486 11            mov a, b
5346   2487 26 01 00      mov b, $1
5347   248A FD A8         sor a, b ; ||
5348   248C 11            mov a, b
5349   248D 26 01 00      mov b, $1
5350   2490 FD A8         sor a, b ; ||
5351   2492 E4            pop a
5352   2493 E7            pop d
5353   2494 FD 43         mov [d], b
5354   2496             ;; pass = pass && result == 1; 
5355   2496 FA F7 FF      lea d, [bp + -9] ; $pass
5356   2499 DA            push d
5357   249A FA F7 FF      lea d, [bp + -9] ; $pass
5358   249D 2A            mov b, [d]
5359   249E D7            push a
5360   249F 11            mov a, b
5361   24A0 FA F9 FF      lea d, [bp + -7] ; $result
5362   24A3 2A            mov b, [d]
5363   24A4             ; START RELATIONAL
5364   24A4 D7            push a
5365   24A5 11            mov a, b
5366   24A6 26 01 00      mov b, $1
5367   24A9 B0            cmp a, b
5368   24AA FD 71         seq ; ==
5369   24AC E4            pop a
5370   24AD             ; END RELATIONAL
5371   24AD FD A7         sand a, b ; &&
5372   24AF E4            pop a
5373   24B0 E7            pop d
5374   24B1 FD 43         mov [d], b
5375   24B3             ;; result = 0 || 1 || 0; 
5376   24B3 FA F9 FF      lea d, [bp + -7] ; $result
5377   24B6 DA            push d
5378   24B7 26 00 00      mov b, $0
5379   24BA D7            push a
5380   24BB 11            mov a, b
5381   24BC 26 01 00      mov b, $1
5382   24BF FD A8         sor a, b ; ||
5383   24C1 11            mov a, b
5384   24C2 26 00 00      mov b, $0
5385   24C5 FD A8         sor a, b ; ||
5386   24C7 E4            pop a
5387   24C8 E7            pop d
5388   24C9 FD 43         mov [d], b
5389   24CB             ;; pass = pass && result == 1; 
5390   24CB FA F7 FF      lea d, [bp + -9] ; $pass
5391   24CE DA            push d
5392   24CF FA F7 FF      lea d, [bp + -9] ; $pass
5393   24D2 2A            mov b, [d]
5394   24D3 D7            push a
5395   24D4 11            mov a, b
5396   24D5 FA F9 FF      lea d, [bp + -7] ; $result
5397   24D8 2A            mov b, [d]
5398   24D9             ; START RELATIONAL
5399   24D9 D7            push a
5400   24DA 11            mov a, b
5401   24DB 26 01 00      mov b, $1
5402   24DE B0            cmp a, b
5403   24DF FD 71         seq ; ==
5404   24E1 E4            pop a
5405   24E2             ; END RELATIONAL
5406   24E2 FD A7         sand a, b ; &&
5407   24E4 E4            pop a
5408   24E5 E7            pop d
5409   24E6 FD 43         mov [d], b
5410   24E8             ;; result = 1 || 0 && 1; 
5411   24E8 FA F9 FF      lea d, [bp + -7] ; $result
5412   24EB DA            push d
5413   24EC 26 01 00      mov b, $1
5414   24EF D7            push a
5415   24F0 11            mov a, b
5416   24F1 26 00 00      mov b, $0
5417   24F4 D7            push a
5418   24F5 11            mov a, b
5419   24F6 26 01 00      mov b, $1
5420   24F9 FD A7         sand a, b ; &&
5421   24FB E4            pop a
5422   24FC FD A8         sor a, b ; ||
5423   24FE E4            pop a
5424   24FF E7            pop d
5425   2500 FD 43         mov [d], b
5426   2502             ;; pass = pass && result == 1; 
5427   2502 FA F7 FF      lea d, [bp + -9] ; $pass
5428   2505 DA            push d
5429   2506 FA F7 FF      lea d, [bp + -9] ; $pass
5430   2509 2A            mov b, [d]
5431   250A D7            push a
5432   250B 11            mov a, b
5433   250C FA F9 FF      lea d, [bp + -7] ; $result
5434   250F 2A            mov b, [d]
5435   2510             ; START RELATIONAL
5436   2510 D7            push a
5437   2511 11            mov a, b
5438   2512 26 01 00      mov b, $1
5439   2515 B0            cmp a, b
5440   2516 FD 71         seq ; ==
5441   2518 E4            pop a
5442   2519             ; END RELATIONAL
5443   2519 FD A7         sand a, b ; &&
5444   251B E4            pop a
5445   251C E7            pop d
5446   251D FD 43         mov [d], b
5447   251F             ;; result = 0 || 0 || 0; 
5448   251F FA F9 FF      lea d, [bp + -7] ; $result
5449   2522 DA            push d
5450   2523 26 00 00      mov b, $0
5451   2526 D7            push a
5452   2527 11            mov a, b
5453   2528 26 00 00      mov b, $0
5454   252B FD A8         sor a, b ; ||
5455   252D 11            mov a, b
5456   252E 26 00 00      mov b, $0
5457   2531 FD A8         sor a, b ; ||
5458   2533 E4            pop a
5459   2534 E7            pop d
5460   2535 FD 43         mov [d], b
5461   2537             ;; pass = pass && result == 0; 
5462   2537 FA F7 FF      lea d, [bp + -9] ; $pass
5463   253A DA            push d
5464   253B FA F7 FF      lea d, [bp + -9] ; $pass
5465   253E 2A            mov b, [d]
5466   253F D7            push a
5467   2540 11            mov a, b
5468   2541 FA F9 FF      lea d, [bp + -7] ; $result
5469   2544 2A            mov b, [d]
5470   2545             ; START RELATIONAL
5471   2545 D7            push a
5472   2546 11            mov a, b
5473   2547 26 00 00      mov b, $0
5474   254A B0            cmp a, b
5475   254B FD 71         seq ; ==
5476   254D E4            pop a
5477   254E             ; END RELATIONAL
5478   254E FD A7         sand a, b ; &&
5479   2550 E4            pop a
5480   2551 E7            pop d
5481   2552 FD 43         mov [d], b
5482   2554             ;; a = 1; b = 1; c = 1; 
5483   2554 FA FF FF      lea d, [bp + -1] ; $a
5484   2557 DA            push d
5485   2558 26 01 00      mov b, $1
5486   255B E7            pop d
5487   255C FD 43         mov [d], b
5488   255E             ;; b = 1; c = 1; 
5489   255E FA FD FF      lea d, [bp + -3] ; $b
5490   2561 DA            push d
5491   2562 26 01 00      mov b, $1
5492   2565 E7            pop d
5493   2566 FD 43         mov [d], b
5494   2568             ;; c = 1; 
5495   2568 FA FB FF      lea d, [bp + -5] ; $c
5496   256B DA            push d
5497   256C 26 01 00      mov b, $1
5498   256F E7            pop d
5499   2570 FD 43         mov [d], b
5500   2572             ;; result = a && b && c; 
5501   2572 FA F9 FF      lea d, [bp + -7] ; $result
5502   2575 DA            push d
5503   2576 FA FF FF      lea d, [bp + -1] ; $a
5504   2579 2A            mov b, [d]
5505   257A D7            push a
5506   257B 11            mov a, b
5507   257C FA FD FF      lea d, [bp + -3] ; $b
5508   257F 2A            mov b, [d]
5509   2580 FD A7         sand a, b ; &&
5510   2582 11            mov a, b
5511   2583 FA FB FF      lea d, [bp + -5] ; $c
5512   2586 2A            mov b, [d]
5513   2587 FD A7         sand a, b ; &&
5514   2589 E4            pop a
5515   258A E7            pop d
5516   258B FD 43         mov [d], b
5517   258D             ;; pass = pass && result == 1; 
5518   258D FA F7 FF      lea d, [bp + -9] ; $pass
5519   2590 DA            push d
5520   2591 FA F7 FF      lea d, [bp + -9] ; $pass
5521   2594 2A            mov b, [d]
5522   2595 D7            push a
5523   2596 11            mov a, b
5524   2597 FA F9 FF      lea d, [bp + -7] ; $result
5525   259A 2A            mov b, [d]
5526   259B             ; START RELATIONAL
5527   259B D7            push a
5528   259C 11            mov a, b
5529   259D 26 01 00      mov b, $1
5530   25A0 B0            cmp a, b
5531   25A1 FD 71         seq ; ==
5532   25A3 E4            pop a
5533   25A4             ; END RELATIONAL
5534   25A4 FD A7         sand a, b ; &&
5535   25A6 E4            pop a
5536   25A7 E7            pop d
5537   25A8 FD 43         mov [d], b
5538   25AA             ;; a = 1; b = 0; c = 1; 
5539   25AA FA FF FF      lea d, [bp + -1] ; $a
5540   25AD DA            push d
5541   25AE 26 01 00      mov b, $1
5542   25B1 E7            pop d
5543   25B2 FD 43         mov [d], b
5544   25B4             ;; b = 0; c = 1; 
5545   25B4 FA FD FF      lea d, [bp + -3] ; $b
5546   25B7 DA            push d
5547   25B8 26 00 00      mov b, $0
5548   25BB E7            pop d
5549   25BC FD 43         mov [d], b
5550   25BE             ;; c = 1; 
5551   25BE FA FB FF      lea d, [bp + -5] ; $c
5552   25C1 DA            push d
5553   25C2 26 01 00      mov b, $1
5554   25C5 E7            pop d
5555   25C6 FD 43         mov [d], b
5556   25C8             ;; result = a && b && c; 
5557   25C8 FA F9 FF      lea d, [bp + -7] ; $result
5558   25CB DA            push d
5559   25CC FA FF FF      lea d, [bp + -1] ; $a
5560   25CF 2A            mov b, [d]
5561   25D0 D7            push a
5562   25D1 11            mov a, b
5563   25D2 FA FD FF      lea d, [bp + -3] ; $b
5564   25D5 2A            mov b, [d]
5565   25D6 FD A7         sand a, b ; &&
5566   25D8 11            mov a, b
5567   25D9 FA FB FF      lea d, [bp + -5] ; $c
5568   25DC 2A            mov b, [d]
5569   25DD FD A7         sand a, b ; &&
5570   25DF E4            pop a
5571   25E0 E7            pop d
5572   25E1 FD 43         mov [d], b
5573   25E3             ;; pass = pass && result == 0; 
5574   25E3 FA F7 FF      lea d, [bp + -9] ; $pass
5575   25E6 DA            push d
5576   25E7 FA F7 FF      lea d, [bp + -9] ; $pass
5577   25EA 2A            mov b, [d]
5578   25EB D7            push a
5579   25EC 11            mov a, b
5580   25ED FA F9 FF      lea d, [bp + -7] ; $result
5581   25F0 2A            mov b, [d]
5582   25F1             ; START RELATIONAL
5583   25F1 D7            push a
5584   25F2 11            mov a, b
5585   25F3 26 00 00      mov b, $0
5586   25F6 B0            cmp a, b
5587   25F7 FD 71         seq ; ==
5588   25F9 E4            pop a
5589   25FA             ; END RELATIONAL
5590   25FA FD A7         sand a, b ; &&
5591   25FC E4            pop a
5592   25FD E7            pop d
5593   25FE FD 43         mov [d], b
5594   2600             ;; a = 1; b = 1; c = 1; 
5595   2600 FA FF FF      lea d, [bp + -1] ; $a
5596   2603 DA            push d
5597   2604 26 01 00      mov b, $1
5598   2607 E7            pop d
5599   2608 FD 43         mov [d], b
5600   260A             ;; b = 1; c = 1; 
5601   260A FA FD FF      lea d, [bp + -3] ; $b
5602   260D DA            push d
5603   260E 26 01 00      mov b, $1
5604   2611 E7            pop d
5605   2612 FD 43         mov [d], b
5606   2614             ;; c = 1; 
5607   2614 FA FB FF      lea d, [bp + -5] ; $c
5608   2617 DA            push d
5609   2618 26 01 00      mov b, $1
5610   261B E7            pop d
5611   261C FD 43         mov [d], b
5612   261E             ;; result = a || b || b; 
5613   261E FA F9 FF      lea d, [bp + -7] ; $result
5614   2621 DA            push d
5615   2622 FA FF FF      lea d, [bp + -1] ; $a
5616   2625 2A            mov b, [d]
5617   2626 D7            push a
5618   2627 11            mov a, b
5619   2628 FA FD FF      lea d, [bp + -3] ; $b
5620   262B 2A            mov b, [d]
5621   262C FD A8         sor a, b ; ||
5622   262E 11            mov a, b
5623   262F FA FD FF      lea d, [bp + -3] ; $b
5624   2632 2A            mov b, [d]
5625   2633 FD A8         sor a, b ; ||
5626   2635 E4            pop a
5627   2636 E7            pop d
5628   2637 FD 43         mov [d], b
5629   2639             ;; pass = pass && result == 1; 
5630   2639 FA F7 FF      lea d, [bp + -9] ; $pass
5631   263C DA            push d
5632   263D FA F7 FF      lea d, [bp + -9] ; $pass
5633   2640 2A            mov b, [d]
5634   2641 D7            push a
5635   2642 11            mov a, b
5636   2643 FA F9 FF      lea d, [bp + -7] ; $result
5637   2646 2A            mov b, [d]
5638   2647             ; START RELATIONAL
5639   2647 D7            push a
5640   2648 11            mov a, b
5641   2649 26 01 00      mov b, $1
5642   264C B0            cmp a, b
5643   264D FD 71         seq ; ==
5644   264F E4            pop a
5645   2650             ; END RELATIONAL
5646   2650 FD A7         sand a, b ; &&
5647   2652 E4            pop a
5648   2653 E7            pop d
5649   2654 FD 43         mov [d], b
5650   2656             ;; a = 0; b = 1; c = 0; 
5651   2656 FA FF FF      lea d, [bp + -1] ; $a
5652   2659 DA            push d
5653   265A 26 00 00      mov b, $0
5654   265D E7            pop d
5655   265E FD 43         mov [d], b
5656   2660             ;; b = 1; c = 0; 
5657   2660 FA FD FF      lea d, [bp + -3] ; $b
5658   2663 DA            push d
5659   2664 26 01 00      mov b, $1
5660   2667 E7            pop d
5661   2668 FD 43         mov [d], b
5662   266A             ;; c = 0; 
5663   266A FA FB FF      lea d, [bp + -5] ; $c
5664   266D DA            push d
5665   266E 26 00 00      mov b, $0
5666   2671 E7            pop d
5667   2672 FD 43         mov [d], b
5668   2674             ;; result = a || b || b; 
5669   2674 FA F9 FF      lea d, [bp + -7] ; $result
5670   2677 DA            push d
5671   2678 FA FF FF      lea d, [bp + -1] ; $a
5672   267B 2A            mov b, [d]
5673   267C D7            push a
5674   267D 11            mov a, b
5675   267E FA FD FF      lea d, [bp + -3] ; $b
5676   2681 2A            mov b, [d]
5677   2682 FD A8         sor a, b ; ||
5678   2684 11            mov a, b
5679   2685 FA FD FF      lea d, [bp + -3] ; $b
5680   2688 2A            mov b, [d]
5681   2689 FD A8         sor a, b ; ||
5682   268B E4            pop a
5683   268C E7            pop d
5684   268D FD 43         mov [d], b
5685   268F             ;; pass = pass && result == 1; 
5686   268F FA F7 FF      lea d, [bp + -9] ; $pass
5687   2692 DA            push d
5688   2693 FA F7 FF      lea d, [bp + -9] ; $pass
5689   2696 2A            mov b, [d]
5690   2697 D7            push a
5691   2698 11            mov a, b
5692   2699 FA F9 FF      lea d, [bp + -7] ; $result
5693   269C 2A            mov b, [d]
5694   269D             ; START RELATIONAL
5695   269D D7            push a
5696   269E 11            mov a, b
5697   269F 26 01 00      mov b, $1
5698   26A2 B0            cmp a, b
5699   26A3 FD 71         seq ; ==
5700   26A5 E4            pop a
5701   26A6             ; END RELATIONAL
5702   26A6 FD A7         sand a, b ; &&
5703   26A8 E4            pop a
5704   26A9 E7            pop d
5705   26AA FD 43         mov [d], b
5706   26AC             ;; a = 1; b = 0; c = 1; 
5707   26AC FA FF FF      lea d, [bp + -1] ; $a
5708   26AF DA            push d
5709   26B0 26 01 00      mov b, $1
5710   26B3 E7            pop d
5711   26B4 FD 43         mov [d], b
5712   26B6             ;; b = 0; c = 1; 
5713   26B6 FA FD FF      lea d, [bp + -3] ; $b
5714   26B9 DA            push d
5715   26BA 26 00 00      mov b, $0
5716   26BD E7            pop d
5717   26BE FD 43         mov [d], b
5718   26C0             ;; c = 1; 
5719   26C0 FA FB FF      lea d, [bp + -5] ; $c
5720   26C3 DA            push d
5721   26C4 26 01 00      mov b, $1
5722   26C7 E7            pop d
5723   26C8 FD 43         mov [d], b
5724   26CA             ;; result = a || b && b; 
5725   26CA FA F9 FF      lea d, [bp + -7] ; $result
5726   26CD DA            push d
5727   26CE FA FF FF      lea d, [bp + -1] ; $a
5728   26D1 2A            mov b, [d]
5729   26D2 D7            push a
5730   26D3 11            mov a, b
5731   26D4 FA FD FF      lea d, [bp + -3] ; $b
5732   26D7 2A            mov b, [d]
5733   26D8 D7            push a
5734   26D9 11            mov a, b
5735   26DA FA FD FF      lea d, [bp + -3] ; $b
5736   26DD 2A            mov b, [d]
5737   26DE FD A7         sand a, b ; &&
5738   26E0 E4            pop a
5739   26E1 FD A8         sor a, b ; ||
5740   26E3 E4            pop a
5741   26E4 E7            pop d
5742   26E5 FD 43         mov [d], b
5743   26E7             ;; pass = pass && result == 1; 
5744   26E7 FA F7 FF      lea d, [bp + -9] ; $pass
5745   26EA DA            push d
5746   26EB FA F7 FF      lea d, [bp + -9] ; $pass
5747   26EE 2A            mov b, [d]
5748   26EF D7            push a
5749   26F0 11            mov a, b
5750   26F1 FA F9 FF      lea d, [bp + -7] ; $result
5751   26F4 2A            mov b, [d]
5752   26F5             ; START RELATIONAL
5753   26F5 D7            push a
5754   26F6 11            mov a, b
5755   26F7 26 01 00      mov b, $1
5756   26FA B0            cmp a, b
5757   26FB FD 71         seq ; ==
5758   26FD E4            pop a
5759   26FE             ; END RELATIONAL
5760   26FE FD A7         sand a, b ; &&
5761   2700 E4            pop a
5762   2701 E7            pop d
5763   2702 FD 43         mov [d], b
5764   2704             ;; a = 0; b = 0; c = 0; 
5765   2704 FA FF FF      lea d, [bp + -1] ; $a
5766   2707 DA            push d
5767   2708 26 00 00      mov b, $0
5768   270B E7            pop d
5769   270C FD 43         mov [d], b
5770   270E             ;; b = 0; c = 0; 
5771   270E FA FD FF      lea d, [bp + -3] ; $b
5772   2711 DA            push d
5773   2712 26 00 00      mov b, $0
5774   2715 E7            pop d
5775   2716 FD 43         mov [d], b
5776   2718             ;; c = 0; 
5777   2718 FA FB FF      lea d, [bp + -5] ; $c
5778   271B DA            push d
5779   271C 26 00 00      mov b, $0
5780   271F E7            pop d
5781   2720 FD 43         mov [d], b
5782   2722             ;; result = a || b || b; 
5783   2722 FA F9 FF      lea d, [bp + -7] ; $result
5784   2725 DA            push d
5785   2726 FA FF FF      lea d, [bp + -1] ; $a
5786   2729 2A            mov b, [d]
5787   272A D7            push a
5788   272B 11            mov a, b
5789   272C FA FD FF      lea d, [bp + -3] ; $b
5790   272F 2A            mov b, [d]
5791   2730 FD A8         sor a, b ; ||
5792   2732 11            mov a, b
5793   2733 FA FD FF      lea d, [bp + -3] ; $b
5794   2736 2A            mov b, [d]
5795   2737 FD A8         sor a, b ; ||
5796   2739 E4            pop a
5797   273A E7            pop d
5798   273B FD 43         mov [d], b
5799   273D             ;; pass = pass && result == 0; 
5800   273D FA F7 FF      lea d, [bp + -9] ; $pass
5801   2740 DA            push d
5802   2741 FA F7 FF      lea d, [bp + -9] ; $pass
5803   2744 2A            mov b, [d]
5804   2745 D7            push a
5805   2746 11            mov a, b
5806   2747 FA F9 FF      lea d, [bp + -7] ; $result
5807   274A 2A            mov b, [d]
5808   274B             ; START RELATIONAL
5809   274B D7            push a
5810   274C 11            mov a, b
5811   274D 26 00 00      mov b, $0
5812   2750 B0            cmp a, b
5813   2751 FD 71         seq ; ==
5814   2753 E4            pop a
5815   2754             ; END RELATIONAL
5816   2754 FD A7         sand a, b ; &&
5817   2756 E4            pop a
5818   2757 E7            pop d
5819   2758 FD 43         mov [d], b
5820   275A             ;; return pass; 
5821   275A FA F7 FF      lea d, [bp + -9] ; $pass
5822   275D 2A            mov b, [d]
5823   275E F9            leave
5824   275F 09            ret
5825   2760             
5826   2760             test5:
5827   2760 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5828   2763             ; $pass 
5829   2763             ; $i 
5830   2763             ; $j 
5831   2763             ; $k 
5832   2763             ; $a1 
5833   2763             ; $a2 
5834   2763             ; $a3 
5835   2763 52 26 00      sub sp, 38
5836   2766             ;; i = 1; 
5837   2766 FA FD FF      lea d, [bp + -3] ; $i
5838   2769 DA            push d
5839   276A 26 01 00      mov b, $1
5840   276D E7            pop d
5841   276E FD 43         mov [d], b
5842   2770             ;; j = 1; 
5843   2770 FA FB FF      lea d, [bp + -5] ; $j
5844   2773 DA            push d
5845   2774 26 01 00      mov b, $1
5846   2777 E7            pop d
5847   2778 FD 43         mov [d], b
5848   277A             ;; k = 1; 
5849   277A FA F9 FF      lea d, [bp + -7] ; $k
5850   277D DA            push d
5851   277E 26 01 00      mov b, $1
5852   2781 E7            pop d
5853   2782 FD 43         mov [d], b
5854   2784             ;; a1[3] = 1; 
5855   2784 FA EF FF      lea d, [bp + -17] ; $a1
5856   2787 D7            push a
5857   2788 DA            push d
5858   2789 26 03 00      mov b, $3
5859   278C E7            pop d
5860   278D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5861   2791 E4            pop a
5862   2792 DA            push d
5863   2793 26 01 00      mov b, $1
5864   2796 E7            pop d
5865   2797 FD 43         mov [d], b
5866   2799             ;; a2[2] = 1; 
5867   2799 FA E5 FF      lea d, [bp + -27] ; $a2
5868   279C D7            push a
5869   279D DA            push d
5870   279E 26 02 00      mov b, $2
5871   27A1 E7            pop d
5872   27A2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5873   27A6 E4            pop a
5874   27A7 DA            push d
5875   27A8 26 01 00      mov b, $1
5876   27AB E7            pop d
5877   27AC FD 43         mov [d], b
5878   27AE             ;; a3[a2[a1[i + j + (k && 1) + (1 && 0)] + (i && 1)] + (0 || j)] = 56; 
5879   27AE FA DB FF      lea d, [bp + -37] ; $a3
5880   27B1 D7            push a
5881   27B2 DA            push d
5882   27B3 FA E5 FF      lea d, [bp + -27] ; $a2
5883   27B6 D7            push a
5884   27B7 DA            push d
5885   27B8 FA EF FF      lea d, [bp + -17] ; $a1
5886   27BB D7            push a
5887   27BC DA            push d
5888   27BD FA FD FF      lea d, [bp + -3] ; $i
5889   27C0 2A            mov b, [d]
5890   27C1             ; START TERMS
5891   27C1 D7            push a
5892   27C2 11            mov a, b
5893   27C3 FA FB FF      lea d, [bp + -5] ; $j
5894   27C6 2A            mov b, [d]
5895   27C7 56            add b, a
5896   27C8 11            mov a, b
5897   27C9 FA F9 FF      lea d, [bp + -7] ; $k
5898   27CC 2A            mov b, [d]
5899   27CD D7            push a
5900   27CE 11            mov a, b
5901   27CF 26 01 00      mov b, $1
5902   27D2 FD A7         sand a, b ; &&
5903   27D4 E4            pop a
5904   27D5 56            add b, a
5905   27D6 11            mov a, b
5906   27D7 26 01 00      mov b, $1
5907   27DA D7            push a
5908   27DB 11            mov a, b
5909   27DC 26 00 00      mov b, $0
5910   27DF FD A7         sand a, b ; &&
5911   27E1 E4            pop a
5912   27E2 56            add b, a
5913   27E3 E4            pop a
5914   27E4             ; END TERMS
5915   27E4 E7            pop d
5916   27E5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5917   27E9 E4            pop a
5918   27EA 2A            mov b, [d]
5919   27EB             ; START TERMS
5920   27EB D7            push a
5921   27EC 11            mov a, b
5922   27ED FA FD FF      lea d, [bp + -3] ; $i
5923   27F0 2A            mov b, [d]
5924   27F1 D7            push a
5925   27F2 11            mov a, b
5926   27F3 26 01 00      mov b, $1
5927   27F6 FD A7         sand a, b ; &&
5928   27F8 E4            pop a
5929   27F9 56            add b, a
5930   27FA E4            pop a
5931   27FB             ; END TERMS
5932   27FB E7            pop d
5933   27FC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5934   2800 E4            pop a
5935   2801 2A            mov b, [d]
5936   2802             ; START TERMS
5937   2802 D7            push a
5938   2803 11            mov a, b
5939   2804 26 00 00      mov b, $0
5940   2807 D7            push a
5941   2808 11            mov a, b
5942   2809 FA FB FF      lea d, [bp + -5] ; $j
5943   280C 2A            mov b, [d]
5944   280D FD A8         sor a, b ; ||
5945   280F E4            pop a
5946   2810 56            add b, a
5947   2811 E4            pop a
5948   2812             ; END TERMS
5949   2812 E7            pop d
5950   2813 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5951   2817 E4            pop a
5952   2818 DA            push d
5953   2819 26 38 00      mov b, $38
5954   281C E7            pop d
5955   281D FD 43         mov [d], b
5956   281F             ;; pass = a3[2] == 56; 
5957   281F FA FF FF      lea d, [bp + -1] ; $pass
5958   2822 DA            push d
5959   2823 FA DB FF      lea d, [bp + -37] ; $a3
5960   2826 D7            push a
5961   2827 DA            push d
5962   2828 26 02 00      mov b, $2
5963   282B E7            pop d
5964   282C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5965   2830 E4            pop a
5966   2831 2A            mov b, [d]
5967   2832             ; START RELATIONAL
5968   2832 D7            push a
5969   2833 11            mov a, b
5970   2834 26 38 00      mov b, $38
5971   2837 B0            cmp a, b
5972   2838 FD 71         seq ; ==
5973   283A E4            pop a
5974   283B             ; END RELATIONAL
5975   283B E7            pop d
5976   283C FD 43         mov [d], b
5977   283E             ;; return pass; 
5978   283E FA FF FF      lea d, [bp + -1] ; $pass
5979   2841 2A            mov b, [d]
5980   2842 F9            leave
5981   2843 09            ret
5982   2844             
5983   2844             test6:
5984   2844 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5985   2847             ; $pass 
5986   2847 10 01 00      mov a, $1
5987   284A 45 FF FF      mov [bp + -1], a
5988   284D             ; $i 
5989   284D             ; $j 
5990   284D             ; $k 
5991   284D 52 08 00      sub sp, 8
5992   2850             ;; test6_struct.c1 = 'A'; 
5993   2850 3B 59 2E      mov d, _test6_struct_data ; $test6_struct
5994   2853 58 00 00      add d, 0
5995   2856 DA            push d
5996   2857 26 41 00      mov b, $41
5997   285A E7            pop d
5998   285B FD 3E         mov [d], bl
5999   285D             ;; pass = pass && test6_struct.c1 == 'A'; 
6000   285D FA FF FF      lea d, [bp + -1] ; $pass
6001   2860 DA            push d
6002   2861 FA FF FF      lea d, [bp + -1] ; $pass
6003   2864 2A            mov b, [d]
6004   2865 D7            push a
6005   2866 11            mov a, b
6006   2867 3B 59 2E      mov d, _test6_struct_data ; $test6_struct
6007   286A 58 00 00      add d, 0
6008   286D 32            mov bl, [d]
6009   286E A7 00         mov bh, 0
6010   2870             ; START RELATIONAL
6011   2870 D7            push a
6012   2871 11            mov a, b
6013   2872 26 41 00      mov b, $41
6014   2875 B0            cmp a, b
6015   2876 FD 71         seq ; ==
6016   2878 E4            pop a
6017   2879             ; END RELATIONAL
6018   2879 FD A7         sand a, b ; &&
6019   287B E4            pop a
6020   287C E7            pop d
6021   287D FD 43         mov [d], b
6022   287F             ;; for(i = 0; i < 5; i++){ 
6023   287F             _for75_init:
6024   287F FA FD FF      lea d, [bp + -3] ; $i
6025   2882 DA            push d
6026   2883 26 00 00      mov b, $0
6027   2886 E7            pop d
6028   2887 FD 43         mov [d], b
6029   2889             _for75_cond:
6030   2889 FA FD FF      lea d, [bp + -3] ; $i
6031   288C 2A            mov b, [d]
6032   288D             ; START RELATIONAL
6033   288D D7            push a
6034   288E 11            mov a, b
6035   288F 26 05 00      mov b, $5
6036   2892 B0            cmp a, b
6037   2893 FD 73         slt ; <= (signed)
6038   2895 E4            pop a
6039   2896             ; END RELATIONAL
6040   2896 C0 00 00      cmp b, 0
6041   2899 C6 EF 28      je _for75_exit
6042   289C             _for75_block:
6043   289C             ;; test6_struct.ca[i] = i; 
6044   289C 3B 59 2E      mov d, _test6_struct_data ; $test6_struct
6045   289F 58 01 00      add d, 1
6046   28A2 D7            push a
6047   28A3 DA            push d
6048   28A4 FA FD FF      lea d, [bp + -3] ; $i
6049   28A7 2A            mov b, [d]
6050   28A8 E7            pop d
6051   28A9 5A            add d, b
6052   28AA E4            pop a
6053   28AB DA            push d
6054   28AC FA FD FF      lea d, [bp + -3] ; $i
6055   28AF 2A            mov b, [d]
6056   28B0 E7            pop d
6057   28B1 FD 3E         mov [d], bl
6058   28B3             ;; pass = pass && test6_struct.ca[i] == i; 
6059   28B3 FA FF FF      lea d, [bp + -1] ; $pass
6060   28B6 DA            push d
6061   28B7 FA FF FF      lea d, [bp + -1] ; $pass
6062   28BA 2A            mov b, [d]
6063   28BB D7            push a
6064   28BC 11            mov a, b
6065   28BD 3B 59 2E      mov d, _test6_struct_data ; $test6_struct
6066   28C0 58 01 00      add d, 1
6067   28C3 D7            push a
6068   28C4 DA            push d
6069   28C5 FA FD FF      lea d, [bp + -3] ; $i
6070   28C8 2A            mov b, [d]
6071   28C9 E7            pop d
6072   28CA 5A            add d, b
6073   28CB E4            pop a
6074   28CC 32            mov bl, [d]
6075   28CD A7 00         mov bh, 0
6076   28CF             ; START RELATIONAL
6077   28CF D7            push a
6078   28D0 11            mov a, b
6079   28D1 FA FD FF      lea d, [bp + -3] ; $i
6080   28D4 2A            mov b, [d]
6081   28D5 B0            cmp a, b
6082   28D6 FD 71         seq ; ==
6083   28D8 E4            pop a
6084   28D9             ; END RELATIONAL
6085   28D9 FD A7         sand a, b ; &&
6086   28DB E4            pop a
6087   28DC E7            pop d
6088   28DD FD 43         mov [d], b
6089   28DF             _for75_update:
6090   28DF FA FD FF      lea d, [bp + -3] ; $i
6091   28E2 2A            mov b, [d]
6092   28E3 D8            push b
6093   28E4 FD 77         inc b
6094   28E6 FA FD FF      lea d, [bp + -3] ; $i
6095   28E9 FD 43         mov [d], b
6096   28EB E5            pop b
6097   28EC 0A 89 28      jmp _for75_cond
6098   28EF             _for75_exit:
6099   28EF             ;; test6_struct.i1 = 55555; 
6100   28EF 3B 59 2E      mov d, _test6_struct_data ; $test6_struct
6101   28F2 58 06 00      add d, 6
6102   28F5 DA            push d
6103   28F6 26 03 D9      mov b, $d903
6104   28F9 E7            pop d
6105   28FA FD 43         mov [d], b
6106   28FC             ;; pass = pass && test6_struct.i1 == 55555; 
6107   28FC FA FF FF      lea d, [bp + -1] ; $pass
6108   28FF DA            push d
6109   2900 FA FF FF      lea d, [bp + -1] ; $pass
6110   2903 2A            mov b, [d]
6111   2904 D7            push a
6112   2905 11            mov a, b
6113   2906 3B 59 2E      mov d, _test6_struct_data ; $test6_struct
6114   2909 58 06 00      add d, 6
6115   290C 2A            mov b, [d]
6116   290D             ; START RELATIONAL
6117   290D D7            push a
6118   290E 11            mov a, b
6119   290F 26 03 D9      mov b, $d903
6120   2912 B0            cmp a, b
6121   2913 FD 71         seq ; ==
6122   2915 E4            pop a
6123   2916             ; END RELATIONAL
6124   2916 FD A7         sand a, b ; &&
6125   2918 E4            pop a
6126   2919 E7            pop d
6127   291A FD 43         mov [d], b
6128   291C             ;; for(i = 0; i < 5; i++){ 
6129   291C             _for76_init:
6130   291C FA FD FF      lea d, [bp + -3] ; $i
6131   291F DA            push d
6132   2920 26 00 00      mov b, $0
6133   2923 E7            pop d
6134   2924 FD 43         mov [d], b
6135   2926             _for76_cond:
6136   2926 FA FD FF      lea d, [bp + -3] ; $i
6137   2929 2A            mov b, [d]
6138   292A             ; START RELATIONAL
6139   292A D7            push a
6140   292B 11            mov a, b
6141   292C 26 05 00      mov b, $5
6142   292F B0            cmp a, b
6143   2930 FD 73         slt ; <= (signed)
6144   2932 E4            pop a
6145   2933             ; END RELATIONAL
6146   2933 C0 00 00      cmp b, 0
6147   2936 C6 90 29      je _for76_exit
6148   2939             _for76_block:
6149   2939             ;; test6_struct.ia[i] = i; 
6150   2939 3B 59 2E      mov d, _test6_struct_data ; $test6_struct
6151   293C 58 08 00      add d, 8
6152   293F D7            push a
6153   2940 DA            push d
6154   2941 FA FD FF      lea d, [bp + -3] ; $i
6155   2944 2A            mov b, [d]
6156   2945 E7            pop d
6157   2946 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6158   294A E4            pop a
6159   294B DA            push d
6160   294C FA FD FF      lea d, [bp + -3] ; $i
6161   294F 2A            mov b, [d]
6162   2950 E7            pop d
6163   2951 FD 43         mov [d], b
6164   2953             ;; pass = pass && test6_struct.ia[i] == i; 
6165   2953 FA FF FF      lea d, [bp + -1] ; $pass
6166   2956 DA            push d
6167   2957 FA FF FF      lea d, [bp + -1] ; $pass
6168   295A 2A            mov b, [d]
6169   295B D7            push a
6170   295C 11            mov a, b
6171   295D 3B 59 2E      mov d, _test6_struct_data ; $test6_struct
6172   2960 58 08 00      add d, 8
6173   2963 D7            push a
6174   2964 DA            push d
6175   2965 FA FD FF      lea d, [bp + -3] ; $i
6176   2968 2A            mov b, [d]
6177   2969 E7            pop d
6178   296A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6179   296E E4            pop a
6180   296F 2A            mov b, [d]
6181   2970             ; START RELATIONAL
6182   2970 D7            push a
6183   2971 11            mov a, b
6184   2972 FA FD FF      lea d, [bp + -3] ; $i
6185   2975 2A            mov b, [d]
6186   2976 B0            cmp a, b
6187   2977 FD 71         seq ; ==
6188   2979 E4            pop a
6189   297A             ; END RELATIONAL
6190   297A FD A7         sand a, b ; &&
6191   297C E4            pop a
6192   297D E7            pop d
6193   297E FD 43         mov [d], b
6194   2980             _for76_update:
6195   2980 FA FD FF      lea d, [bp + -3] ; $i
6196   2983 2A            mov b, [d]
6197   2984 D8            push b
6198   2985 FD 77         inc b
6199   2987 FA FD FF      lea d, [bp + -3] ; $i
6200   298A FD 43         mov [d], b
6201   298C E5            pop b
6202   298D 0A 26 29      jmp _for76_cond
6203   2990             _for76_exit:
6204   2990             ;; return pass; 
6205   2990 FA FF FF      lea d, [bp + -1] ; $pass
6206   2993 2A            mov b, [d]
6207   2994 F9            leave
6208   2995 09            ret
6209   2996             
6210   2996             test7:
6211   2996 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6212   2999             ; $pass 
6213   2999 10 01 00      mov a, $1
6214   299C 45 FF FF      mov [bp + -1], a
6215   299F             ; $i 
6216   299F             ; $j 
6217   299F             ; $k 
6218   299F 52 08 00      sub sp, 8
6219   29A2             ;; test7_struct.test7_substruct.c1 = 'A'; 
6220   29A2 3B 6B 2E      mov d, _test7_struct_data ; $test7_struct
6221   29A5 58 06 00      add d, 6
6222   29A8 58 00 00      add d, 0
6223   29AB DA            push d
6224   29AC 26 41 00      mov b, $41
6225   29AF E7            pop d
6226   29B0 FD 3E         mov [d], bl
6227   29B2             ;; pass = pass && test7_struct.test7_substruct.c1 == 'A'; 
6228   29B2 FA FF FF      lea d, [bp + -1] ; $pass
6229   29B5 DA            push d
6230   29B6 FA FF FF      lea d, [bp + -1] ; $pass
6231   29B9 2A            mov b, [d]
6232   29BA D7            push a
6233   29BB 11            mov a, b
6234   29BC 3B 6B 2E      mov d, _test7_struct_data ; $test7_struct
6235   29BF 58 06 00      add d, 6
6236   29C2 58 00 00      add d, 0
6237   29C5 32            mov bl, [d]
6238   29C6 A7 00         mov bh, 0
6239   29C8             ; START RELATIONAL
6240   29C8 D7            push a
6241   29C9 11            mov a, b
6242   29CA 26 41 00      mov b, $41
6243   29CD B0            cmp a, b
6244   29CE FD 71         seq ; ==
6245   29D0 E4            pop a
6246   29D1             ; END RELATIONAL
6247   29D1 FD A7         sand a, b ; &&
6248   29D3 E4            pop a
6249   29D4 E7            pop d
6250   29D5 FD 43         mov [d], b
6251   29D7             ;; for(i = 0; i < 5; i++){ 
6252   29D7             _for77_init:
6253   29D7 FA FD FF      lea d, [bp + -3] ; $i
6254   29DA DA            push d
6255   29DB 26 00 00      mov b, $0
6256   29DE E7            pop d
6257   29DF FD 43         mov [d], b
6258   29E1             _for77_cond:
6259   29E1 FA FD FF      lea d, [bp + -3] ; $i
6260   29E4 2A            mov b, [d]
6261   29E5             ; START RELATIONAL
6262   29E5 D7            push a
6263   29E6 11            mov a, b
6264   29E7 26 05 00      mov b, $5
6265   29EA B0            cmp a, b
6266   29EB FD 73         slt ; <= (signed)
6267   29ED E4            pop a
6268   29EE             ; END RELATIONAL
6269   29EE C0 00 00      cmp b, 0
6270   29F1 C6 4D 2A      je _for77_exit
6271   29F4             _for77_block:
6272   29F4             ;; test7_struct.test7_substruct.ca[i] = i; 
6273   29F4 3B 6B 2E      mov d, _test7_struct_data ; $test7_struct
6274   29F7 58 06 00      add d, 6
6275   29FA 58 01 00      add d, 1
6276   29FD D7            push a
6277   29FE DA            push d
6278   29FF FA FD FF      lea d, [bp + -3] ; $i
6279   2A02 2A            mov b, [d]
6280   2A03 E7            pop d
6281   2A04 5A            add d, b
6282   2A05 E4            pop a
6283   2A06 DA            push d
6284   2A07 FA FD FF      lea d, [bp + -3] ; $i
6285   2A0A 2A            mov b, [d]
6286   2A0B E7            pop d
6287   2A0C FD 3E         mov [d], bl
6288   2A0E             ;; pass = pass && test7_struct.test7_substruct.ca[i] == i; 
6289   2A0E FA FF FF      lea d, [bp + -1] ; $pass
6290   2A11 DA            push d
6291   2A12 FA FF FF      lea d, [bp + -1] ; $pass
6292   2A15 2A            mov b, [d]
6293   2A16 D7            push a
6294   2A17 11            mov a, b
6295   2A18 3B 6B 2E      mov d, _test7_struct_data ; $test7_struct
6296   2A1B 58 06 00      add d, 6
6297   2A1E 58 01 00      add d, 1
6298   2A21 D7            push a
6299   2A22 DA            push d
6300   2A23 FA FD FF      lea d, [bp + -3] ; $i
6301   2A26 2A            mov b, [d]
6302   2A27 E7            pop d
6303   2A28 5A            add d, b
6304   2A29 E4            pop a
6305   2A2A 32            mov bl, [d]
6306   2A2B A7 00         mov bh, 0
6307   2A2D             ; START RELATIONAL
6308   2A2D D7            push a
6309   2A2E 11            mov a, b
6310   2A2F FA FD FF      lea d, [bp + -3] ; $i
6311   2A32 2A            mov b, [d]
6312   2A33 B0            cmp a, b
6313   2A34 FD 71         seq ; ==
6314   2A36 E4            pop a
6315   2A37             ; END RELATIONAL
6316   2A37 FD A7         sand a, b ; &&
6317   2A39 E4            pop a
6318   2A3A E7            pop d
6319   2A3B FD 43         mov [d], b
6320   2A3D             _for77_update:
6321   2A3D FA FD FF      lea d, [bp + -3] ; $i
6322   2A40 2A            mov b, [d]
6323   2A41 D8            push b
6324   2A42 FD 77         inc b
6325   2A44 FA FD FF      lea d, [bp + -3] ; $i
6326   2A47 FD 43         mov [d], b
6327   2A49 E5            pop b
6328   2A4A 0A E1 29      jmp _for77_cond
6329   2A4D             _for77_exit:
6330   2A4D             ;; test7_struct.test7_substruct.i1 = 55555; 
6331   2A4D 3B 6B 2E      mov d, _test7_struct_data ; $test7_struct
6332   2A50 58 06 00      add d, 6
6333   2A53 58 06 00      add d, 6
6334   2A56 DA            push d
6335   2A57 26 03 D9      mov b, $d903
6336   2A5A E7            pop d
6337   2A5B FD 43         mov [d], b
6338   2A5D             ;; pass = pass && test7_struct.test7_substruct.i1 == 55555; 
6339   2A5D FA FF FF      lea d, [bp + -1] ; $pass
6340   2A60 DA            push d
6341   2A61 FA FF FF      lea d, [bp + -1] ; $pass
6342   2A64 2A            mov b, [d]
6343   2A65 D7            push a
6344   2A66 11            mov a, b
6345   2A67 3B 6B 2E      mov d, _test7_struct_data ; $test7_struct
6346   2A6A 58 06 00      add d, 6
6347   2A6D 58 06 00      add d, 6
6348   2A70 2A            mov b, [d]
6349   2A71             ; START RELATIONAL
6350   2A71 D7            push a
6351   2A72 11            mov a, b
6352   2A73 26 03 D9      mov b, $d903
6353   2A76 B0            cmp a, b
6354   2A77 FD 71         seq ; ==
6355   2A79 E4            pop a
6356   2A7A             ; END RELATIONAL
6357   2A7A FD A7         sand a, b ; &&
6358   2A7C E4            pop a
6359   2A7D E7            pop d
6360   2A7E FD 43         mov [d], b
6361   2A80             ;; for(i = 0; i < 5; i++){ 
6362   2A80             _for78_init:
6363   2A80 FA FD FF      lea d, [bp + -3] ; $i
6364   2A83 DA            push d
6365   2A84 26 00 00      mov b, $0
6366   2A87 E7            pop d
6367   2A88 FD 43         mov [d], b
6368   2A8A             _for78_cond:
6369   2A8A FA FD FF      lea d, [bp + -3] ; $i
6370   2A8D 2A            mov b, [d]
6371   2A8E             ; START RELATIONAL
6372   2A8E D7            push a
6373   2A8F 11            mov a, b
6374   2A90 26 05 00      mov b, $5
6375   2A93 B0            cmp a, b
6376   2A94 FD 73         slt ; <= (signed)
6377   2A96 E4            pop a
6378   2A97             ; END RELATIONAL
6379   2A97 C0 00 00      cmp b, 0
6380   2A9A C6 FA 2A      je _for78_exit
6381   2A9D             _for78_block:
6382   2A9D             ;; test7_struct.test7_substruct.ia[i] = i; 
6383   2A9D 3B 6B 2E      mov d, _test7_struct_data ; $test7_struct
6384   2AA0 58 06 00      add d, 6
6385   2AA3 58 08 00      add d, 8
6386   2AA6 D7            push a
6387   2AA7 DA            push d
6388   2AA8 FA FD FF      lea d, [bp + -3] ; $i
6389   2AAB 2A            mov b, [d]
6390   2AAC E7            pop d
6391   2AAD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6392   2AB1 E4            pop a
6393   2AB2 DA            push d
6394   2AB3 FA FD FF      lea d, [bp + -3] ; $i
6395   2AB6 2A            mov b, [d]
6396   2AB7 E7            pop d
6397   2AB8 FD 43         mov [d], b
6398   2ABA             ;; pass = pass && test7_struct.test7_substruct.ia[i] == i; 
6399   2ABA FA FF FF      lea d, [bp + -1] ; $pass
6400   2ABD DA            push d
6401   2ABE FA FF FF      lea d, [bp + -1] ; $pass
6402   2AC1 2A            mov b, [d]
6403   2AC2 D7            push a
6404   2AC3 11            mov a, b
6405   2AC4 3B 6B 2E      mov d, _test7_struct_data ; $test7_struct
6406   2AC7 58 06 00      add d, 6
6407   2ACA 58 08 00      add d, 8
6408   2ACD D7            push a
6409   2ACE DA            push d
6410   2ACF FA FD FF      lea d, [bp + -3] ; $i
6411   2AD2 2A            mov b, [d]
6412   2AD3 E7            pop d
6413   2AD4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6414   2AD8 E4            pop a
6415   2AD9 2A            mov b, [d]
6416   2ADA             ; START RELATIONAL
6417   2ADA D7            push a
6418   2ADB 11            mov a, b
6419   2ADC FA FD FF      lea d, [bp + -3] ; $i
6420   2ADF 2A            mov b, [d]
6421   2AE0 B0            cmp a, b
6422   2AE1 FD 71         seq ; ==
6423   2AE3 E4            pop a
6424   2AE4             ; END RELATIONAL
6425   2AE4 FD A7         sand a, b ; &&
6426   2AE6 E4            pop a
6427   2AE7 E7            pop d
6428   2AE8 FD 43         mov [d], b
6429   2AEA             _for78_update:
6430   2AEA FA FD FF      lea d, [bp + -3] ; $i
6431   2AED 2A            mov b, [d]
6432   2AEE D8            push b
6433   2AEF FD 77         inc b
6434   2AF1 FA FD FF      lea d, [bp + -3] ; $i
6435   2AF4 FD 43         mov [d], b
6436   2AF6 E5            pop b
6437   2AF7 0A 8A 2A      jmp _for78_cond
6438   2AFA             _for78_exit:
6439   2AFA             ;; return pass; 
6440   2AFA FA FF FF      lea d, [bp + -1] ; $pass
6441   2AFD 2A            mov b, [d]
6442   2AFE F9            leave
6443   2AFF 09            ret
6444   2B00             
6445   2B00             test8:
6446   2B00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6447   2B03             ; $pass 
6448   2B03 10 01 00      mov a, $1
6449   2B06 45 FF FF      mov [bp + -1], a
6450   2B09             ; $i 
6451   2B09             ; $j 
6452   2B09             ; $k 
6453   2B09             ; $test8_struct 
6454   2B09 52 1A 00      sub sp, 26
6455   2B0C             ;; test8_struct.c1 = 'A'; 
6456   2B0C FA E7 FF      lea d, [bp + -25] ; $test8_struct
6457   2B0F 58 00 00      add d, 0
6458   2B12 DA            push d
6459   2B13 26 41 00      mov b, $41
6460   2B16 E7            pop d
6461   2B17 FD 3E         mov [d], bl
6462   2B19             ;; pass = pass && test8_struct.c1 == 'A'; 
6463   2B19 FA FF FF      lea d, [bp + -1] ; $pass
6464   2B1C DA            push d
6465   2B1D FA FF FF      lea d, [bp + -1] ; $pass
6466   2B20 2A            mov b, [d]
6467   2B21 D7            push a
6468   2B22 11            mov a, b
6469   2B23 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6470   2B26 58 00 00      add d, 0
6471   2B29 32            mov bl, [d]
6472   2B2A A7 00         mov bh, 0
6473   2B2C             ; START RELATIONAL
6474   2B2C D7            push a
6475   2B2D 11            mov a, b
6476   2B2E 26 41 00      mov b, $41
6477   2B31 B0            cmp a, b
6478   2B32 FD 71         seq ; ==
6479   2B34 E4            pop a
6480   2B35             ; END RELATIONAL
6481   2B35 FD A7         sand a, b ; &&
6482   2B37 E4            pop a
6483   2B38 E7            pop d
6484   2B39 FD 43         mov [d], b
6485   2B3B             ;; for(i = 0; i < 5; i++){ 
6486   2B3B             _for79_init:
6487   2B3B FA FD FF      lea d, [bp + -3] ; $i
6488   2B3E DA            push d
6489   2B3F 26 00 00      mov b, $0
6490   2B42 E7            pop d
6491   2B43 FD 43         mov [d], b
6492   2B45             _for79_cond:
6493   2B45 FA FD FF      lea d, [bp + -3] ; $i
6494   2B48 2A            mov b, [d]
6495   2B49             ; START RELATIONAL
6496   2B49 D7            push a
6497   2B4A 11            mov a, b
6498   2B4B 26 05 00      mov b, $5
6499   2B4E B0            cmp a, b
6500   2B4F FD 73         slt ; <= (signed)
6501   2B51 E4            pop a
6502   2B52             ; END RELATIONAL
6503   2B52 C0 00 00      cmp b, 0
6504   2B55 C6 AB 2B      je _for79_exit
6505   2B58             _for79_block:
6506   2B58             ;; test8_struct.ca[i] = i; 
6507   2B58 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6508   2B5B 58 01 00      add d, 1
6509   2B5E D7            push a
6510   2B5F DA            push d
6511   2B60 FA FD FF      lea d, [bp + -3] ; $i
6512   2B63 2A            mov b, [d]
6513   2B64 E7            pop d
6514   2B65 5A            add d, b
6515   2B66 E4            pop a
6516   2B67 DA            push d
6517   2B68 FA FD FF      lea d, [bp + -3] ; $i
6518   2B6B 2A            mov b, [d]
6519   2B6C E7            pop d
6520   2B6D FD 3E         mov [d], bl
6521   2B6F             ;; pass = pass && test8_struct.ca[i] == i; 
6522   2B6F FA FF FF      lea d, [bp + -1] ; $pass
6523   2B72 DA            push d
6524   2B73 FA FF FF      lea d, [bp + -1] ; $pass
6525   2B76 2A            mov b, [d]
6526   2B77 D7            push a
6527   2B78 11            mov a, b
6528   2B79 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6529   2B7C 58 01 00      add d, 1
6530   2B7F D7            push a
6531   2B80 DA            push d
6532   2B81 FA FD FF      lea d, [bp + -3] ; $i
6533   2B84 2A            mov b, [d]
6534   2B85 E7            pop d
6535   2B86 5A            add d, b
6536   2B87 E4            pop a
6537   2B88 32            mov bl, [d]
6538   2B89 A7 00         mov bh, 0
6539   2B8B             ; START RELATIONAL
6540   2B8B D7            push a
6541   2B8C 11            mov a, b
6542   2B8D FA FD FF      lea d, [bp + -3] ; $i
6543   2B90 2A            mov b, [d]
6544   2B91 B0            cmp a, b
6545   2B92 FD 71         seq ; ==
6546   2B94 E4            pop a
6547   2B95             ; END RELATIONAL
6548   2B95 FD A7         sand a, b ; &&
6549   2B97 E4            pop a
6550   2B98 E7            pop d
6551   2B99 FD 43         mov [d], b
6552   2B9B             _for79_update:
6553   2B9B FA FD FF      lea d, [bp + -3] ; $i
6554   2B9E 2A            mov b, [d]
6555   2B9F D8            push b
6556   2BA0 FD 77         inc b
6557   2BA2 FA FD FF      lea d, [bp + -3] ; $i
6558   2BA5 FD 43         mov [d], b
6559   2BA7 E5            pop b
6560   2BA8 0A 45 2B      jmp _for79_cond
6561   2BAB             _for79_exit:
6562   2BAB             ;; test8_struct.i1 = 55555; 
6563   2BAB FA E7 FF      lea d, [bp + -25] ; $test8_struct
6564   2BAE 58 06 00      add d, 6
6565   2BB1 DA            push d
6566   2BB2 26 03 D9      mov b, $d903
6567   2BB5 E7            pop d
6568   2BB6 FD 43         mov [d], b
6569   2BB8             ;; pass = pass && test8_struct.i1 == 55555; 
6570   2BB8 FA FF FF      lea d, [bp + -1] ; $pass
6571   2BBB DA            push d
6572   2BBC FA FF FF      lea d, [bp + -1] ; $pass
6573   2BBF 2A            mov b, [d]
6574   2BC0 D7            push a
6575   2BC1 11            mov a, b
6576   2BC2 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6577   2BC5 58 06 00      add d, 6
6578   2BC8 2A            mov b, [d]
6579   2BC9             ; START RELATIONAL
6580   2BC9 D7            push a
6581   2BCA 11            mov a, b
6582   2BCB 26 03 D9      mov b, $d903
6583   2BCE B0            cmp a, b
6584   2BCF FD 71         seq ; ==
6585   2BD1 E4            pop a
6586   2BD2             ; END RELATIONAL
6587   2BD2 FD A7         sand a, b ; &&
6588   2BD4 E4            pop a
6589   2BD5 E7            pop d
6590   2BD6 FD 43         mov [d], b
6591   2BD8             ;; for(i = 0; i < 5; i++){ 
6592   2BD8             _for80_init:
6593   2BD8 FA FD FF      lea d, [bp + -3] ; $i
6594   2BDB DA            push d
6595   2BDC 26 00 00      mov b, $0
6596   2BDF E7            pop d
6597   2BE0 FD 43         mov [d], b
6598   2BE2             _for80_cond:
6599   2BE2 FA FD FF      lea d, [bp + -3] ; $i
6600   2BE5 2A            mov b, [d]
6601   2BE6             ; START RELATIONAL
6602   2BE6 D7            push a
6603   2BE7 11            mov a, b
6604   2BE8 26 05 00      mov b, $5
6605   2BEB B0            cmp a, b
6606   2BEC FD 73         slt ; <= (signed)
6607   2BEE E4            pop a
6608   2BEF             ; END RELATIONAL
6609   2BEF C0 00 00      cmp b, 0
6610   2BF2 C6 4C 2C      je _for80_exit
6611   2BF5             _for80_block:
6612   2BF5             ;; test8_struct.ia[i] = i; 
6613   2BF5 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6614   2BF8 58 08 00      add d, 8
6615   2BFB D7            push a
6616   2BFC DA            push d
6617   2BFD FA FD FF      lea d, [bp + -3] ; $i
6618   2C00 2A            mov b, [d]
6619   2C01 E7            pop d
6620   2C02 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6621   2C06 E4            pop a
6622   2C07 DA            push d
6623   2C08 FA FD FF      lea d, [bp + -3] ; $i
6624   2C0B 2A            mov b, [d]
6625   2C0C E7            pop d
6626   2C0D FD 43         mov [d], b
6627   2C0F             ;; pass = pass && test8_struct.ia[i] == i; 
6628   2C0F FA FF FF      lea d, [bp + -1] ; $pass
6629   2C12 DA            push d
6630   2C13 FA FF FF      lea d, [bp + -1] ; $pass
6631   2C16 2A            mov b, [d]
6632   2C17 D7            push a
6633   2C18 11            mov a, b
6634   2C19 FA E7 FF      lea d, [bp + -25] ; $test8_struct
6635   2C1C 58 08 00      add d, 8
6636   2C1F D7            push a
6637   2C20 DA            push d
6638   2C21 FA FD FF      lea d, [bp + -3] ; $i
6639   2C24 2A            mov b, [d]
6640   2C25 E7            pop d
6641   2C26 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6642   2C2A E4            pop a
6643   2C2B 2A            mov b, [d]
6644   2C2C             ; START RELATIONAL
6645   2C2C D7            push a
6646   2C2D 11            mov a, b
6647   2C2E FA FD FF      lea d, [bp + -3] ; $i
6648   2C31 2A            mov b, [d]
6649   2C32 B0            cmp a, b
6650   2C33 FD 71         seq ; ==
6651   2C35 E4            pop a
6652   2C36             ; END RELATIONAL
6653   2C36 FD A7         sand a, b ; &&
6654   2C38 E4            pop a
6655   2C39 E7            pop d
6656   2C3A FD 43         mov [d], b
6657   2C3C             _for80_update:
6658   2C3C FA FD FF      lea d, [bp + -3] ; $i
6659   2C3F 2A            mov b, [d]
6660   2C40 D8            push b
6661   2C41 FD 77         inc b
6662   2C43 FA FD FF      lea d, [bp + -3] ; $i
6663   2C46 FD 43         mov [d], b
6664   2C48 E5            pop b
6665   2C49 0A E2 2B      jmp _for80_cond
6666   2C4C             _for80_exit:
6667   2C4C             ;; return pass; 
6668   2C4C FA FF FF      lea d, [bp + -1] ; $pass
6669   2C4F 2A            mov b, [d]
6670   2C50 F9            leave
6671   2C51 09            ret
6672   2C52             
6673   2C52             test9:
6674   2C52 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6675   2C55             ; $pass 
6676   2C55 10 01 00      mov a, $1
6677   2C58 45 FF FF      mov [bp + -1], a
6678   2C5B             ; $i 
6679   2C5B             ; $j 
6680   2C5B             ; $k 
6681   2C5B             ; $test9_struct 
6682   2C5B 52 2C 00      sub sp, 44
6683   2C5E             ;; test9_struct.test9_substruct.c1 = 'A'; 
6684   2C5E FA D5 FF      lea d, [bp + -43] ; $test9_struct
6685   2C61 58 06 00      add d, 6
6686   2C64 58 00 00      add d, 0
6687   2C67 DA            push d
6688   2C68 26 41 00      mov b, $41
6689   2C6B E7            pop d
6690   2C6C FD 3E         mov [d], bl
6691   2C6E             ;; pass = pass && test9_struct.test9_substruct.c1 == 'A'; 
6692   2C6E FA FF FF      lea d, [bp + -1] ; $pass
6693   2C71 DA            push d
6694   2C72 FA FF FF      lea d, [bp + -1] ; $pass
6695   2C75 2A            mov b, [d]
6696   2C76 D7            push a
6697   2C77 11            mov a, b
6698   2C78 FA D5 FF      lea d, [bp + -43] ; $test9_struct
6699   2C7B 58 06 00      add d, 6
6700   2C7E 58 00 00      add d, 0
6701   2C81 32            mov bl, [d]
6702   2C82 A7 00         mov bh, 0
6703   2C84             ; START RELATIONAL
6704   2C84 D7            push a
6705   2C85 11            mov a, b
6706   2C86 26 41 00      mov b, $41
6707   2C89 B0            cmp a, b
6708   2C8A FD 71         seq ; ==
6709   2C8C E4            pop a
6710   2C8D             ; END RELATIONAL
6711   2C8D FD A7         sand a, b ; &&
6712   2C8F E4            pop a
6713   2C90 E7            pop d
6714   2C91 FD 43         mov [d], b
6715   2C93             ;; for(i = 0; i < 5; i++){ 
6716   2C93             _for81_init:
6717   2C93 FA FD FF      lea d, [bp + -3] ; $i
6718   2C96 DA            push d
6719   2C97 26 00 00      mov b, $0
6720   2C9A E7            pop d
6721   2C9B FD 43         mov [d], b
6722   2C9D             _for81_cond:
6723   2C9D FA FD FF      lea d, [bp + -3] ; $i
6724   2CA0 2A            mov b, [d]
6725   2CA1             ; START RELATIONAL
6726   2CA1 D7            push a
6727   2CA2 11            mov a, b
6728   2CA3 26 05 00      mov b, $5
6729   2CA6 B0            cmp a, b
6730   2CA7 FD 73         slt ; <= (signed)
6731   2CA9 E4            pop a
6732   2CAA             ; END RELATIONAL
6733   2CAA C0 00 00      cmp b, 0
6734   2CAD C6 09 2D      je _for81_exit
6735   2CB0             _for81_block:
6736   2CB0             ;; test9_struct.test9_substruct.ca[i] = i; 
6737   2CB0 FA D5 FF      lea d, [bp + -43] ; $test9_struct
6738   2CB3 58 06 00      add d, 6
6739   2CB6 58 01 00      add d, 1
6740   2CB9 D7            push a
6741   2CBA DA            push d
6742   2CBB FA FD FF      lea d, [bp + -3] ; $i
6743   2CBE 2A            mov b, [d]
6744   2CBF E7            pop d
6745   2CC0 5A            add d, b
6746   2CC1 E4            pop a
6747   2CC2 DA            push d
6748   2CC3 FA FD FF      lea d, [bp + -3] ; $i
6749   2CC6 2A            mov b, [d]
6750   2CC7 E7            pop d
6751   2CC8 FD 3E         mov [d], bl
6752   2CCA             ;; pass = pass && test9_struct.test9_substruct.ca[i] == i; 
6753   2CCA FA FF FF      lea d, [bp + -1] ; $pass
6754   2CCD DA            push d
6755   2CCE FA FF FF      lea d, [bp + -1] ; $pass
6756   2CD1 2A            mov b, [d]
6757   2CD2 D7            push a
6758   2CD3 11            mov a, b
6759   2CD4 FA D5 FF      lea d, [bp + -43] ; $test9_struct
6760   2CD7 58 06 00      add d, 6
6761   2CDA 58 01 00      add d, 1
6762   2CDD D7            push a
6763   2CDE DA            push d
6764   2CDF FA FD FF      lea d, [bp + -3] ; $i
6765   2CE2 2A            mov b, [d]
6766   2CE3 E7            pop d
6767   2CE4 5A            add d, b
6768   2CE5 E4            pop a
6769   2CE6 32            mov bl, [d]
6770   2CE7 A7 00         mov bh, 0
6771   2CE9             ; START RELATIONAL
6772   2CE9 D7            push a
6773   2CEA 11            mov a, b
6774   2CEB FA FD FF      lea d, [bp + -3] ; $i
6775   2CEE 2A            mov b, [d]
6776   2CEF B0            cmp a, b
6777   2CF0 FD 71         seq ; ==
6778   2CF2 E4            pop a
6779   2CF3             ; END RELATIONAL
6780   2CF3 FD A7         sand a, b ; &&
6781   2CF5 E4            pop a
6782   2CF6 E7            pop d
6783   2CF7 FD 43         mov [d], b
6784   2CF9             _for81_update:
6785   2CF9 FA FD FF      lea d, [bp + -3] ; $i
6786   2CFC 2A            mov b, [d]
6787   2CFD D8            push b
6788   2CFE FD 77         inc b
6789   2D00 FA FD FF      lea d, [bp + -3] ; $i
6790   2D03 FD 43         mov [d], b
6791   2D05 E5            pop b
6792   2D06 0A 9D 2C      jmp _for81_cond
6793   2D09             _for81_exit:
6794   2D09             ;; test9_struct.test9_substruct.i1 = 55555; 
6795   2D09 FA D5 FF      lea d, [bp + -43] ; $test9_struct
6796   2D0C 58 06 00      add d, 6
6797   2D0F 58 06 00      add d, 6
6798   2D12 DA            push d
6799   2D13 26 03 D9      mov b, $d903
6800   2D16 E7            pop d
6801   2D17 FD 43         mov [d], b
6802   2D19             ;; pass = pass && test9_struct.test9_substruct.i1 == 55555; 
6803   2D19 FA FF FF      lea d, [bp + -1] ; $pass
6804   2D1C DA            push d
6805   2D1D FA FF FF      lea d, [bp + -1] ; $pass
6806   2D20 2A            mov b, [d]
6807   2D21 D7            push a
6808   2D22 11            mov a, b
6809   2D23 FA D5 FF      lea d, [bp + -43] ; $test9_struct
6810   2D26 58 06 00      add d, 6
6811   2D29 58 06 00      add d, 6
6812   2D2C 2A            mov b, [d]
6813   2D2D             ; START RELATIONAL
6814   2D2D D7            push a
6815   2D2E 11            mov a, b
6816   2D2F 26 03 D9      mov b, $d903
6817   2D32 B0            cmp a, b
6818   2D33 FD 71         seq ; ==
6819   2D35 E4            pop a
6820   2D36             ; END RELATIONAL
6821   2D36 FD A7         sand a, b ; &&
6822   2D38 E4            pop a
6823   2D39 E7            pop d
6824   2D3A FD 43         mov [d], b
6825   2D3C             ;; for(i = 0; i < 5; i++){ 
6826   2D3C             _for82_init:
6827   2D3C FA FD FF      lea d, [bp + -3] ; $i
6828   2D3F DA            push d
6829   2D40 26 00 00      mov b, $0
6830   2D43 E7            pop d
6831   2D44 FD 43         mov [d], b
6832   2D46             _for82_cond:
6833   2D46 FA FD FF      lea d, [bp + -3] ; $i
6834   2D49 2A            mov b, [d]
6835   2D4A             ; START RELATIONAL
6836   2D4A D7            push a
6837   2D4B 11            mov a, b
6838   2D4C 26 05 00      mov b, $5
6839   2D4F B0            cmp a, b
6840   2D50 FD 73         slt ; <= (signed)
6841   2D52 E4            pop a
6842   2D53             ; END RELATIONAL
6843   2D53 C0 00 00      cmp b, 0
6844   2D56 C6 B6 2D      je _for82_exit
6845   2D59             _for82_block:
6846   2D59             ;; test9_struct.test9_substruct.ia[i] = i; 
6847   2D59 FA D5 FF      lea d, [bp + -43] ; $test9_struct
6848   2D5C 58 06 00      add d, 6
6849   2D5F 58 08 00      add d, 8
6850   2D62 D7            push a
6851   2D63 DA            push d
6852   2D64 FA FD FF      lea d, [bp + -3] ; $i
6853   2D67 2A            mov b, [d]
6854   2D68 E7            pop d
6855   2D69 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6856   2D6D E4            pop a
6857   2D6E DA            push d
6858   2D6F FA FD FF      lea d, [bp + -3] ; $i
6859   2D72 2A            mov b, [d]
6860   2D73 E7            pop d
6861   2D74 FD 43         mov [d], b
6862   2D76             ;; pass = pass && test9_struct.test9_substruct.ia[i] == i; 
6863   2D76 FA FF FF      lea d, [bp + -1] ; $pass
6864   2D79 DA            push d
6865   2D7A FA FF FF      lea d, [bp + -1] ; $pass
6866   2D7D 2A            mov b, [d]
6867   2D7E D7            push a
6868   2D7F 11            mov a, b
6869   2D80 FA D5 FF      lea d, [bp + -43] ; $test9_struct
6870   2D83 58 06 00      add d, 6
6871   2D86 58 08 00      add d, 8
6872   2D89 D7            push a
6873   2D8A DA            push d
6874   2D8B FA FD FF      lea d, [bp + -3] ; $i
6875   2D8E 2A            mov b, [d]
6876   2D8F E7            pop d
6877   2D90 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6878   2D94 E4            pop a
6879   2D95 2A            mov b, [d]
6880   2D96             ; START RELATIONAL
6881   2D96 D7            push a
6882   2D97 11            mov a, b
6883   2D98 FA FD FF      lea d, [bp + -3] ; $i
6884   2D9B 2A            mov b, [d]
6885   2D9C B0            cmp a, b
6886   2D9D FD 71         seq ; ==
6887   2D9F E4            pop a
6888   2DA0             ; END RELATIONAL
6889   2DA0 FD A7         sand a, b ; &&
6890   2DA2 E4            pop a
6891   2DA3 E7            pop d
6892   2DA4 FD 43         mov [d], b
6893   2DA6             _for82_update:
6894   2DA6 FA FD FF      lea d, [bp + -3] ; $i
6895   2DA9 2A            mov b, [d]
6896   2DAA D8            push b
6897   2DAB FD 77         inc b
6898   2DAD FA FD FF      lea d, [bp + -3] ; $i
6899   2DB0 FD 43         mov [d], b
6900   2DB2 E5            pop b
6901   2DB3 0A 46 2D      jmp _for82_cond
6902   2DB6             _for82_exit:
6903   2DB6             ;; return pass; 
6904   2DB6 FA FF FF      lea d, [bp + -1] ; $pass
6905   2DB9 2A            mov b, [d]
6906   2DBA F9            leave
6907   2DBB 09            ret
6908   2DBC             ; --- END TEXT BLOCK
6909   2DBC             
6910   2DBC             ; --- BEGIN DATA BLOCK
6911   2DBC 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
6911   2DC0 45 46 47 48 
6911   2DC4 49 4A 4B 4C 
6911   2DC8 4D 4E 4F 50 
6911   2DCC 51 52 53 54 
6911   2DD0 55 56 57 58 
6911   2DD4 59 5A 61 62 
6911   2DD8 63 64 65 66 
6911   2DDC 67 68 69 6A 
6911   2DE0 6B 6C 6D 6E 
6911   2DE4 6F 70 71 72 
6911   2DE8 73 74 75 76 
6911   2DEC 77 78 79 7A 
6911   2DF0 30 31 32 33 
6911   2DF4 34 35 36 37 
6911   2DF8 38 39 2B 2F 
6911   2DFC 00 
6912   2DFD BC 2D       _base64_table: .dw _base64_table_data
6913   2DFF             _gca1_data: 
6914   2DFF 30 31 32 33 .db $30,$31,$32,$33,$34,
6914   2E03 34 
6915   2E04             _gia1_data: 
6916   2E04 00 00 01 00 .dw 0,1,2,3,4,
6916   2E08 02 00 03 00 
6916   2E0C 04 00 
6917   2E0E 00 00 00 00 _gca2_data: .fill 25, 0
6917   2E12 00 00 00 00 
6917   2E16 00 00 00 00 
6917   2E1A 00 00 00 00 
6917   2E1E 00 00 00 00 
6917   2E22 00 00 00 00 
6917   2E26 00 
6918   2E27 00 00 00 00 _gia2_data: .fill 50, 0
6918   2E2B 00 00 00 00 
6918   2E2F 00 00 00 00 
6918   2E33 00 00 00 00 
6918   2E37 00 00 00 00 
6918   2E3B 00 00 00 00 
6918   2E3F 00 00 00 00 
6918   2E43 00 00 00 00 
6918   2E47 00 00 00 00 
6918   2E4B 00 00 00 00 
6918   2E4F 00 00 00 00 
6918   2E53 00 00 00 00 
6918   2E57 00 00 
6919   2E59 00 00 00 00 _test6_struct_data: .fill 18, 0
6919   2E5D 00 00 00 00 
6919   2E61 00 00 00 00 
6919   2E65 00 00 00 00 
6919   2E69 00 00 
6920   2E6B 00 00 00 00 _test7_struct_data: .fill 36, 0
6920   2E6F 00 00 00 00 
6920   2E73 00 00 00 00 
6920   2E77 00 00 00 00 
6920   2E7B 00 00 00 00 
6920   2E7F 00 00 00 00 
6920   2E83 00 00 00 00 
6920   2E87 00 00 00 00 
6920   2E8B 00 00 00 00 
6921   2E8F 54 65 73 74 __s0: .db "Test %d, Result: %d\n", 0
6921   2E93 20 25 64 2C 
6921   2E97 20 52 65 73 
6921   2E9B 75 6C 74 3A 
6921   2E9F 20 25 64 0A 
6921   2EA3 00 
6922   2EA4 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
6922   2EA8 70 65 63 74 
6922   2EAC 65 64 20 66 
6922   2EB0 6F 72 6D 61 
6922   2EB4 74 20 69 6E 
6922   2EB8 20 70 72 69 
6922   2EBC 6E 74 66 2E 
6922   2EC0 00 
6923   2EC1 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
6923   2EC5 72 3A 20 55 
6923   2EC9 6E 6B 6E 6F 
6923   2ECD 77 6E 20 61 
6923   2ED1 72 67 75 6D 
6923   2ED5 65 6E 74 20 
6923   2ED9 74 79 70 65 
6923   2EDD 2E 0A 00 
6924   2EE0 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
6924   2EE4 1B 5B 48 00 
6925   2EE8             
6926   2EE8 EA 2E       _heap_top: .dw _heap
6927   2EEA 00          _heap: .db 0
6928   2EEB             ; --- END DATA BLOCK
6929   2EEB             
6930   2EEB             .end
tasm: Number of errors = 0
