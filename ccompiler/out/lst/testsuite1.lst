0001   0000             ; --- FILENAME: ctestsuite/testsuite1
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; int pass[10]; 
0011   0408 52 14 00      sub sp, 20 ; pass
0012   040B             ;; int i; 
0013   040B 52 02 00      sub sp, 2 ; i
0014   040E             ;; int nbr_tests = 10; 
0015   040E 52 02 00      sub sp, 2 ; nbr_tests
0016   0411             ; --- START LOCAL VAR INITIALIZATION
0017   0411 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0018   0414 DA            push d
0019   0415 26 0A 00      mov b, $a
0020   0418 E7            pop d
0021   0419 FD 43         mov [d], b
0022   041B             ; --- END LOCAL VAR INITIALIZATION
0023   041B             ;; for(i = 0; i < nbr_tests; i++){ 
0024   041B             _for1_init:
0025   041B FA EB FF      lea d, [bp + -21] ; $i
0026   041E DA            push d
0027   041F 26 00 00      mov b, $0
0028   0422 E7            pop d
0029   0423 FD 43         mov [d], b
0030   0425             _for1_cond:
0031   0425 FA EB FF      lea d, [bp + -21] ; $i
0032   0428 2A            mov b, [d]
0033   0429             ; START RELATIONAL
0034   0429 D7            push a
0035   042A 11            mov a, b
0036   042B FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0037   042E 2A            mov b, [d]
0038   042F B0            cmp a, b
0039   0430 FD 73         slt ; < (signed)
0040   0432 E4            pop a
0041   0433             ; END RELATIONAL
0042   0433 C0 00 00      cmp b, 0
0043   0436 C6 5F 04      je _for1_exit
0044   0439             _for1_block:
0045   0439             ;; pass[i] = -1; 
0046   0439 FA ED FF      lea d, [bp + -19] ; $pass
0047   043C D7            push a
0048   043D DA            push d
0049   043E FA EB FF      lea d, [bp + -21] ; $i
0050   0441 2A            mov b, [d]
0051   0442 E7            pop d
0052   0443 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0053   0447 E4            pop a
0054   0448 DA            push d
0055   0449 26 FF FF      mov b, $ffff
0056   044C E7            pop d
0057   044D FD 43         mov [d], b
0058   044F             _for1_update:
0059   044F FA EB FF      lea d, [bp + -21] ; $i
0060   0452 2A            mov b, [d]
0061   0453 D8            push b
0062   0454 FD 77         inc b
0063   0456 FA EB FF      lea d, [bp + -21] ; $i
0064   0459 FD 43         mov [d], b
0065   045B E5            pop b
0066   045C 0A 25 04      jmp _for1_cond
0067   045F             _for1_exit:
0068   045F             ;; pass[0] = test0(); 
0069   045F FA ED FF      lea d, [bp + -19] ; $pass
0070   0462 D7            push a
0071   0463 DA            push d
0072   0464 26 00 00      mov b, $0
0073   0467 E7            pop d
0074   0468 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0075   046C E4            pop a
0076   046D DA            push d
0077   046E 07 B8 1A      call test0
0078   0471 E7            pop d
0079   0472 FD 43         mov [d], b
0080   0474             ;; pass[1] = test1(); 
0081   0474 FA ED FF      lea d, [bp + -19] ; $pass
0082   0477 D7            push a
0083   0478 DA            push d
0084   0479 26 01 00      mov b, $1
0085   047C E7            pop d
0086   047D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0087   0481 E4            pop a
0088   0482 DA            push d
0089   0483 07 C3 1B      call test1
0090   0486 E7            pop d
0091   0487 FD 43         mov [d], b
0092   0489             ;; pass[2] = test2(); 
0093   0489 FA ED FF      lea d, [bp + -19] ; $pass
0094   048C D7            push a
0095   048D DA            push d
0096   048E 26 02 00      mov b, $2
0097   0491 E7            pop d
0098   0492 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0099   0496 E4            pop a
0100   0497 DA            push d
0101   0498 07 73 1D      call test2
0102   049B E7            pop d
0103   049C FD 43         mov [d], b
0104   049E             ;; pass[3] = test3(); 
0105   049E FA ED FF      lea d, [bp + -19] ; $pass
0106   04A1 D7            push a
0107   04A2 DA            push d
0108   04A3 26 03 00      mov b, $3
0109   04A6 E7            pop d
0110   04A7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0111   04AB E4            pop a
0112   04AC DA            push d
0113   04AD 07 A7 1E      call test3
0114   04B0 E7            pop d
0115   04B1 FD 43         mov [d], b
0116   04B3             ;; pass[4] = test4(); 
0117   04B3 FA ED FF      lea d, [bp + -19] ; $pass
0118   04B6 D7            push a
0119   04B7 DA            push d
0120   04B8 26 04 00      mov b, $4
0121   04BB E7            pop d
0122   04BC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0123   04C0 E4            pop a
0124   04C1 DA            push d
0125   04C2 07 5D 20      call test4
0126   04C5 E7            pop d
0127   04C6 FD 43         mov [d], b
0128   04C8             ;; pass[5] = test5(); 
0129   04C8 FA ED FF      lea d, [bp + -19] ; $pass
0130   04CB D7            push a
0131   04CC DA            push d
0132   04CD 26 05 00      mov b, $5
0133   04D0 E7            pop d
0134   04D1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0135   04D5 E4            pop a
0136   04D6 DA            push d
0137   04D7 07 C5 23      call test5
0138   04DA E7            pop d
0139   04DB FD 43         mov [d], b
0140   04DD             ;; pass[6] = test6(); 
0141   04DD FA ED FF      lea d, [bp + -19] ; $pass
0142   04E0 D7            push a
0143   04E1 DA            push d
0144   04E2 26 06 00      mov b, $6
0145   04E5 E7            pop d
0146   04E6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0147   04EA E4            pop a
0148   04EB DA            push d
0149   04EC 07 BB 24      call test6
0150   04EF E7            pop d
0151   04F0 FD 43         mov [d], b
0152   04F2             ;; pass[7] = test7(); 
0153   04F2 FA ED FF      lea d, [bp + -19] ; $pass
0154   04F5 D7            push a
0155   04F6 DA            push d
0156   04F7 26 07 00      mov b, $7
0157   04FA E7            pop d
0158   04FB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0159   04FF E4            pop a
0160   0500 DA            push d
0161   0501 07 1A 26      call test7
0162   0504 E7            pop d
0163   0505 FD 43         mov [d], b
0164   0507             ;; pass[8] = test8(); 
0165   0507 FA ED FF      lea d, [bp + -19] ; $pass
0166   050A D7            push a
0167   050B DA            push d
0168   050C 26 08 00      mov b, $8
0169   050F E7            pop d
0170   0510 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0171   0514 E4            pop a
0172   0515 DA            push d
0173   0516 07 91 27      call test8
0174   0519 E7            pop d
0175   051A FD 43         mov [d], b
0176   051C             ;; pass[9] = test9(); 
0177   051C FA ED FF      lea d, [bp + -19] ; $pass
0178   051F D7            push a
0179   0520 DA            push d
0180   0521 26 09 00      mov b, $9
0181   0524 E7            pop d
0182   0525 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0183   0529 E4            pop a
0184   052A DA            push d
0185   052B 07 F3 28      call test9
0186   052E E7            pop d
0187   052F FD 43         mov [d], b
0188   0531             ;; for(i = 0; i < nbr_tests; i++) 
0189   0531             _for2_init:
0190   0531 FA EB FF      lea d, [bp + -21] ; $i
0191   0534 DA            push d
0192   0535 26 00 00      mov b, $0
0193   0538 E7            pop d
0194   0539 FD 43         mov [d], b
0195   053B             _for2_cond:
0196   053B FA EB FF      lea d, [bp + -21] ; $i
0197   053E 2A            mov b, [d]
0198   053F             ; START RELATIONAL
0199   053F D7            push a
0200   0540 11            mov a, b
0201   0541 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0202   0544 2A            mov b, [d]
0203   0545 B0            cmp a, b
0204   0546 FD 73         slt ; < (signed)
0205   0548 E4            pop a
0206   0549             ; END RELATIONAL
0207   0549 C0 00 00      cmp b, 0
0208   054C C6 85 05      je _for2_exit
0209   054F             _for2_block:
0210   054F             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0211   054F FA ED FF      lea d, [bp + -19] ; $pass
0212   0552 D7            push a
0213   0553 DA            push d
0214   0554 FA EB FF      lea d, [bp + -21] ; $i
0215   0557 2A            mov b, [d]
0216   0558 E7            pop d
0217   0559 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0218   055D E4            pop a
0219   055E 2A            mov b, [d]
0220   055F FD AB         swp b
0221   0561 D8            push b
0222   0562 FA EB FF      lea d, [bp + -21] ; $i
0223   0565 2A            mov b, [d]
0224   0566 FD AB         swp b
0225   0568 D8            push b
0226   0569 26 FD 2A      mov b, _s0 ; "Test %d, Result: %d\n"
0227   056C FD AB         swp b
0228   056E D8            push b
0229   056F 07 2B 09      call printf
0230   0572 51 06 00      add sp, 6
0231   0575             _for2_update:
0232   0575 FA EB FF      lea d, [bp + -21] ; $i
0233   0578 2A            mov b, [d]
0234   0579 D8            push b
0235   057A FD 77         inc b
0236   057C FA EB FF      lea d, [bp + -21] ; $i
0237   057F FD 43         mov [d], b
0238   0581 E5            pop b
0239   0582 0A 3B 05      jmp _for2_cond
0240   0585             _for2_exit:
0241   0585 05 0B         syscall sys_terminate_proc
0242   0587             
0243   0587             strcpy:
0244   0587 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0245   058A             ;; char *psrc; 
0246   058A 52 02 00      sub sp, 2 ; psrc
0247   058D             ;; char *pdest; 
0248   058D 52 02 00      sub sp, 2 ; pdest
0249   0590             ;; psrc = src; 
0250   0590 FA FF FF      lea d, [bp + -1] ; $psrc
0251   0593 DA            push d
0252   0594 FA 07 00      lea d, [bp + 7] ; $src
0253   0597 2A            mov b, [d]
0254   0598 E7            pop d
0255   0599 FD 43         mov [d], b
0256   059B             ;; pdest = dest; 
0257   059B FA FD FF      lea d, [bp + -3] ; $pdest
0258   059E DA            push d
0259   059F FA 05 00      lea d, [bp + 5] ; $dest
0260   05A2 2A            mov b, [d]
0261   05A3 E7            pop d
0262   05A4 FD 43         mov [d], b
0263   05A6             ;; while(*psrc) *pdest++ = *psrc++; 
0264   05A6             _while3_cond:
0265   05A6 FA FF FF      lea d, [bp + -1] ; $psrc
0266   05A9 2A            mov b, [d]
0267   05AA 74            mov d, b
0268   05AB 32            mov bl, [d]
0269   05AC A7 00         mov bh, 0
0270   05AE C0 00 00      cmp b, 0
0271   05B1 C6 D9 05      je _while3_exit
0272   05B4             _while3_block:
0273   05B4             ;; *pdest++ = *psrc++; 
0274   05B4 FA FD FF      lea d, [bp + -3] ; $pdest
0275   05B7 2A            mov b, [d]
0276   05B8 D8            push b
0277   05B9 FD 77         inc b
0278   05BB FA FD FF      lea d, [bp + -3] ; $pdest
0279   05BE FD 43         mov [d], b
0280   05C0 E5            pop b
0281   05C1 D8            push b
0282   05C2 FA FF FF      lea d, [bp + -1] ; $psrc
0283   05C5 2A            mov b, [d]
0284   05C6 D8            push b
0285   05C7 FD 77         inc b
0286   05C9 FA FF FF      lea d, [bp + -1] ; $psrc
0287   05CC FD 43         mov [d], b
0288   05CE E5            pop b
0289   05CF 74            mov d, b
0290   05D0 32            mov bl, [d]
0291   05D1 A7 00         mov bh, 0
0292   05D3 E7            pop d
0293   05D4 FD 3E         mov [d], bl
0294   05D6 0A A6 05      jmp _while3_cond
0295   05D9             _while3_exit:
0296   05D9             ;; *pdest = '\0'; 
0297   05D9 FA FD FF      lea d, [bp + -3] ; $pdest
0298   05DC 2A            mov b, [d]
0299   05DD D8            push b
0300   05DE 26 00 00      mov b, $0
0301   05E1 E7            pop d
0302   05E2 FD 3E         mov [d], bl
0303   05E4 F9            leave
0304   05E5 09            ret
0305   05E6             
0306   05E6             strcmp:
0307   05E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0308   05E9             ;; while (*s1 && (*s1 == *s2)) { 
0309   05E9             _while4_cond:
0310   05E9 FA 05 00      lea d, [bp + 5] ; $s1
0311   05EC 2A            mov b, [d]
0312   05ED 74            mov d, b
0313   05EE 32            mov bl, [d]
0314   05EF A7 00         mov bh, 0
0315   05F1 D7            push a
0316   05F2 11            mov a, b
0317   05F3 FA 05 00      lea d, [bp + 5] ; $s1
0318   05F6 2A            mov b, [d]
0319   05F7 74            mov d, b
0320   05F8 32            mov bl, [d]
0321   05F9 A7 00         mov bh, 0
0322   05FB             ; START RELATIONAL
0323   05FB D7            push a
0324   05FC 11            mov a, b
0325   05FD FA 07 00      lea d, [bp + 7] ; $s2
0326   0600 2A            mov b, [d]
0327   0601 74            mov d, b
0328   0602 32            mov bl, [d]
0329   0603 A7 00         mov bh, 0
0330   0605 B0            cmp a, b
0331   0606 FD 71         seq ; ==
0332   0608 E4            pop a
0333   0609             ; END RELATIONAL
0334   0609 FD A7         sand a, b
0335   060B E4            pop a
0336   060C C0 00 00      cmp b, 0
0337   060F C6 2F 06      je _while4_exit
0338   0612             _while4_block:
0339   0612             ;; s1++; 
0340   0612 FA 05 00      lea d, [bp + 5] ; $s1
0341   0615 2A            mov b, [d]
0342   0616 D8            push b
0343   0617 FD 77         inc b
0344   0619 FA 05 00      lea d, [bp + 5] ; $s1
0345   061C FD 43         mov [d], b
0346   061E E5            pop b
0347   061F             ;; s2++; 
0348   061F FA 07 00      lea d, [bp + 7] ; $s2
0349   0622 2A            mov b, [d]
0350   0623 D8            push b
0351   0624 FD 77         inc b
0352   0626 FA 07 00      lea d, [bp + 7] ; $s2
0353   0629 FD 43         mov [d], b
0354   062B E5            pop b
0355   062C 0A E9 05      jmp _while4_cond
0356   062F             _while4_exit:
0357   062F             ;; return *s1 - *s2; 
0358   062F FA 05 00      lea d, [bp + 5] ; $s1
0359   0632 2A            mov b, [d]
0360   0633 74            mov d, b
0361   0634 32            mov bl, [d]
0362   0635 A7 00         mov bh, 0
0363   0637             ; START TERMS
0364   0637 D7            push a
0365   0638 11            mov a, b
0366   0639 FA 07 00      lea d, [bp + 7] ; $s2
0367   063C 2A            mov b, [d]
0368   063D 74            mov d, b
0369   063E 32            mov bl, [d]
0370   063F A7 00         mov bh, 0
0371   0641 60            sub a, b
0372   0642 27            mov b, a
0373   0643 E4            pop a
0374   0644             ; END TERMS
0375   0644 F9            leave
0376   0645 09            ret
0377   0646             
0378   0646             strncmp:
0379   0646 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0380   0649 F9            leave
0381   064A 09            ret
0382   064B             
0383   064B             strcat:
0384   064B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0385   064E             ;; int dest_len; 
0386   064E 52 02 00      sub sp, 2 ; dest_len
0387   0651             ;; int i; 
0388   0651 52 02 00      sub sp, 2 ; i
0389   0654             ;; dest_len = strlen(dest); 
0390   0654 FA FF FF      lea d, [bp + -1] ; $dest_len
0391   0657 DA            push d
0392   0658 FA 05 00      lea d, [bp + 5] ; $dest
0393   065B 2A            mov b, [d]
0394   065C FD AB         swp b
0395   065E D8            push b
0396   065F 07 01 07      call strlen
0397   0662 51 02 00      add sp, 2
0398   0665 E7            pop d
0399   0666 FD 43         mov [d], b
0400   0668             ;; for (i = 0; src[i] != 0; i=i+1) { 
0401   0668             _for5_init:
0402   0668 FA FD FF      lea d, [bp + -3] ; $i
0403   066B DA            push d
0404   066C 26 00 00      mov b, $0
0405   066F E7            pop d
0406   0670 FD 43         mov [d], b
0407   0672             _for5_cond:
0408   0672 FA 07 00      lea d, [bp + 7] ; $src
0409   0675 FD 2A         mov d, [d]
0410   0677 D7            push a
0411   0678 DA            push d
0412   0679 FA FD FF      lea d, [bp + -3] ; $i
0413   067C 2A            mov b, [d]
0414   067D E7            pop d
0415   067E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0416   0682 E4            pop a
0417   0683 32            mov bl, [d]
0418   0684 A7 00         mov bh, 0
0419   0686             ; START RELATIONAL
0420   0686 D7            push a
0421   0687 11            mov a, b
0422   0688 26 00 00      mov b, $0
0423   068B B0            cmp a, b
0424   068C FD 72         sneq ; !=
0425   068E E4            pop a
0426   068F             ; END RELATIONAL
0427   068F C0 00 00      cmp b, 0
0428   0692 C6 DB 06      je _for5_exit
0429   0695             _for5_block:
0430   0695             ;; dest[dest_len + i] = src[i]; 
0431   0695 FA 05 00      lea d, [bp + 5] ; $dest
0432   0698 FD 2A         mov d, [d]
0433   069A D7            push a
0434   069B DA            push d
0435   069C FA FF FF      lea d, [bp + -1] ; $dest_len
0436   069F 2A            mov b, [d]
0437   06A0             ; START TERMS
0438   06A0 D7            push a
0439   06A1 11            mov a, b
0440   06A2 FA FD FF      lea d, [bp + -3] ; $i
0441   06A5 2A            mov b, [d]
0442   06A6 56            add b, a
0443   06A7 E4            pop a
0444   06A8             ; END TERMS
0445   06A8 E7            pop d
0446   06A9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0447   06AD E4            pop a
0448   06AE DA            push d
0449   06AF FA 07 00      lea d, [bp + 7] ; $src
0450   06B2 FD 2A         mov d, [d]
0451   06B4 D7            push a
0452   06B5 DA            push d
0453   06B6 FA FD FF      lea d, [bp + -3] ; $i
0454   06B9 2A            mov b, [d]
0455   06BA E7            pop d
0456   06BB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0457   06BF E4            pop a
0458   06C0 32            mov bl, [d]
0459   06C1 A7 00         mov bh, 0
0460   06C3 E7            pop d
0461   06C4 FD 3E         mov [d], bl
0462   06C6             _for5_update:
0463   06C6 FA FD FF      lea d, [bp + -3] ; $i
0464   06C9 DA            push d
0465   06CA FA FD FF      lea d, [bp + -3] ; $i
0466   06CD 2A            mov b, [d]
0467   06CE             ; START TERMS
0468   06CE D7            push a
0469   06CF 11            mov a, b
0470   06D0 26 01 00      mov b, $1
0471   06D3 56            add b, a
0472   06D4 E4            pop a
0473   06D5             ; END TERMS
0474   06D5 E7            pop d
0475   06D6 FD 43         mov [d], b
0476   06D8 0A 72 06      jmp _for5_cond
0477   06DB             _for5_exit:
0478   06DB             ;; dest[dest_len + i] = 0; 
0479   06DB FA 05 00      lea d, [bp + 5] ; $dest
0480   06DE FD 2A         mov d, [d]
0481   06E0 D7            push a
0482   06E1 DA            push d
0483   06E2 FA FF FF      lea d, [bp + -1] ; $dest_len
0484   06E5 2A            mov b, [d]
0485   06E6             ; START TERMS
0486   06E6 D7            push a
0487   06E7 11            mov a, b
0488   06E8 FA FD FF      lea d, [bp + -3] ; $i
0489   06EB 2A            mov b, [d]
0490   06EC 56            add b, a
0491   06ED E4            pop a
0492   06EE             ; END TERMS
0493   06EE E7            pop d
0494   06EF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0495   06F3 E4            pop a
0496   06F4 DA            push d
0497   06F5 26 00 00      mov b, $0
0498   06F8 E7            pop d
0499   06F9 FD 3E         mov [d], bl
0500   06FB             ;; return dest; 
0501   06FB FA 05 00      lea d, [bp + 5] ; $dest
0502   06FE 2A            mov b, [d]
0503   06FF F9            leave
0504   0700 09            ret
0505   0701             
0506   0701             strlen:
0507   0701 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0508   0704             ;; int length; 
0509   0704 52 02 00      sub sp, 2 ; length
0510   0707             ;; length = 0; 
0511   0707 FA FF FF      lea d, [bp + -1] ; $length
0512   070A DA            push d
0513   070B 26 00 00      mov b, $0
0514   070E E7            pop d
0515   070F FD 43         mov [d], b
0516   0711             ;; while (str[length] != 0) { 
0517   0711             _while6_cond:
0518   0711 FA 05 00      lea d, [bp + 5] ; $str
0519   0714 FD 2A         mov d, [d]
0520   0716 D7            push a
0521   0717 DA            push d
0522   0718 FA FF FF      lea d, [bp + -1] ; $length
0523   071B 2A            mov b, [d]
0524   071C E7            pop d
0525   071D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0526   0721 E4            pop a
0527   0722 32            mov bl, [d]
0528   0723 A7 00         mov bh, 0
0529   0725             ; START RELATIONAL
0530   0725 D7            push a
0531   0726 11            mov a, b
0532   0727 26 00 00      mov b, $0
0533   072A B0            cmp a, b
0534   072B FD 72         sneq ; !=
0535   072D E4            pop a
0536   072E             ; END RELATIONAL
0537   072E C0 00 00      cmp b, 0
0538   0731 C6 44 07      je _while6_exit
0539   0734             _while6_block:
0540   0734             ;; length++; 
0541   0734 FA FF FF      lea d, [bp + -1] ; $length
0542   0737 2A            mov b, [d]
0543   0738 D8            push b
0544   0739 FD 77         inc b
0545   073B FA FF FF      lea d, [bp + -1] ; $length
0546   073E FD 43         mov [d], b
0547   0740 E5            pop b
0548   0741 0A 11 07      jmp _while6_cond
0549   0744             _while6_exit:
0550   0744             ;; return length; 
0551   0744 FA FF FF      lea d, [bp + -1] ; $length
0552   0747 2A            mov b, [d]
0553   0748 F9            leave
0554   0749 09            ret
0555   074A             
0556   074A             exit:
0557   074A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0558   074D             
0559   074D             ; --- BEGIN INLINE ASM BLOCK
0560   074D 05 0B         syscall sys_terminate_proc
0561   074F             ; --- END INLINE ASM BLOCK
0562   074F             
0563   074F F9            leave
0564   0750 09            ret
0565   0751             
0566   0751             memset:
0567   0751 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0568   0754             ;; int i; 
0569   0754 52 02 00      sub sp, 2 ; i
0570   0757             ;; for(i = 0; i < size; i++){ 
0571   0757             _for7_init:
0572   0757 FA FF FF      lea d, [bp + -1] ; $i
0573   075A DA            push d
0574   075B 26 00 00      mov b, $0
0575   075E E7            pop d
0576   075F FD 43         mov [d], b
0577   0761             _for7_cond:
0578   0761 FA FF FF      lea d, [bp + -1] ; $i
0579   0764 2A            mov b, [d]
0580   0765             ; START RELATIONAL
0581   0765 D7            push a
0582   0766 11            mov a, b
0583   0767 FA 08 00      lea d, [bp + 8] ; $size
0584   076A 2A            mov b, [d]
0585   076B B0            cmp a, b
0586   076C FD 73         slt ; < (signed)
0587   076E E4            pop a
0588   076F             ; END RELATIONAL
0589   076F C0 00 00      cmp b, 0
0590   0772 C6 9B 07      je _for7_exit
0591   0775             _for7_block:
0592   0775             ;; *(s+i) = c; 
0593   0775 FA 05 00      lea d, [bp + 5] ; $s
0594   0778 2A            mov b, [d]
0595   0779             ; START TERMS
0596   0779 D7            push a
0597   077A 11            mov a, b
0598   077B FA FF FF      lea d, [bp + -1] ; $i
0599   077E 2A            mov b, [d]
0600   077F 56            add b, a
0601   0780 E4            pop a
0602   0781             ; END TERMS
0603   0781 D8            push b
0604   0782 FA 07 00      lea d, [bp + 7] ; $c
0605   0785 32            mov bl, [d]
0606   0786 A7 00         mov bh, 0
0607   0788 E7            pop d
0608   0789 FD 3E         mov [d], bl
0609   078B             _for7_update:
0610   078B FA FF FF      lea d, [bp + -1] ; $i
0611   078E 2A            mov b, [d]
0612   078F D8            push b
0613   0790 FD 77         inc b
0614   0792 FA FF FF      lea d, [bp + -1] ; $i
0615   0795 FD 43         mov [d], b
0616   0797 E5            pop b
0617   0798 0A 61 07      jmp _for7_cond
0618   079B             _for7_exit:
0619   079B             ;; return s; 
0620   079B FA 05 00      lea d, [bp + 5] ; $s
0621   079E 2A            mov b, [d]
0622   079F F9            leave
0623   07A0 09            ret
0624   07A1             
0625   07A1             atoi:
0626   07A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0627   07A4             ;; int result = 0;  // Initialize result 
0628   07A4 52 02 00      sub sp, 2 ; result
0629   07A7             ; --- START LOCAL VAR INITIALIZATION
0630   07A7 FA FF FF      lea d, [bp + -1] ; $result
0631   07AA DA            push d
0632   07AB 26 00 00      mov b, $0
0633   07AE E7            pop d
0634   07AF FD 43         mov [d], b
0635   07B1             ; --- END LOCAL VAR INITIALIZATION
0636   07B1             ;; int sign = 1;    // Initialize sign as positive 
0637   07B1 52 02 00      sub sp, 2 ; sign
0638   07B4             ; --- START LOCAL VAR INITIALIZATION
0639   07B4 FA FD FF      lea d, [bp + -3] ; $sign
0640   07B7 DA            push d
0641   07B8 26 01 00      mov b, $1
0642   07BB E7            pop d
0643   07BC FD 43         mov [d], b
0644   07BE             ; --- END LOCAL VAR INITIALIZATION
0645   07BE             ;; while (*str == ' ') str++; 
0646   07BE             _while8_cond:
0647   07BE FA 05 00      lea d, [bp + 5] ; $str
0648   07C1 2A            mov b, [d]
0649   07C2 74            mov d, b
0650   07C3 32            mov bl, [d]
0651   07C4 A7 00         mov bh, 0
0652   07C6             ; START RELATIONAL
0653   07C6 D7            push a
0654   07C7 11            mov a, b
0655   07C8 26 20 00      mov b, $20
0656   07CB B0            cmp a, b
0657   07CC FD 71         seq ; ==
0658   07CE E4            pop a
0659   07CF             ; END RELATIONAL
0660   07CF C0 00 00      cmp b, 0
0661   07D2 C6 E5 07      je _while8_exit
0662   07D5             _while8_block:
0663   07D5             ;; str++; 
0664   07D5 FA 05 00      lea d, [bp + 5] ; $str
0665   07D8 2A            mov b, [d]
0666   07D9 D8            push b
0667   07DA FD 77         inc b
0668   07DC FA 05 00      lea d, [bp + 5] ; $str
0669   07DF FD 43         mov [d], b
0670   07E1 E5            pop b
0671   07E2 0A BE 07      jmp _while8_cond
0672   07E5             _while8_exit:
0673   07E5             ;; if (*str == '-' || *str == '+') { 
0674   07E5             _if9_cond:
0675   07E5 FA 05 00      lea d, [bp + 5] ; $str
0676   07E8 2A            mov b, [d]
0677   07E9 74            mov d, b
0678   07EA 32            mov bl, [d]
0679   07EB A7 00         mov bh, 0
0680   07ED             ; START RELATIONAL
0681   07ED D7            push a
0682   07EE 11            mov a, b
0683   07EF 26 2D 00      mov b, $2d
0684   07F2 B0            cmp a, b
0685   07F3 FD 71         seq ; ==
0686   07F5 E4            pop a
0687   07F6             ; END RELATIONAL
0688   07F6 D7            push a
0689   07F7 11            mov a, b
0690   07F8 FA 05 00      lea d, [bp + 5] ; $str
0691   07FB 2A            mov b, [d]
0692   07FC 74            mov d, b
0693   07FD 32            mov bl, [d]
0694   07FE A7 00         mov bh, 0
0695   0800             ; START RELATIONAL
0696   0800 D7            push a
0697   0801 11            mov a, b
0698   0802 26 2B 00      mov b, $2b
0699   0805 B0            cmp a, b
0700   0806 FD 71         seq ; ==
0701   0808 E4            pop a
0702   0809             ; END RELATIONAL
0703   0809 FD A8         sor a, b ; ||
0704   080B E4            pop a
0705   080C C0 00 00      cmp b, 0
0706   080F C6 46 08      je _if9_exit
0707   0812             _if9_true:
0708   0812             ;; if (*str == '-') sign = -1; 
0709   0812             _if10_cond:
0710   0812 FA 05 00      lea d, [bp + 5] ; $str
0711   0815 2A            mov b, [d]
0712   0816 74            mov d, b
0713   0817 32            mov bl, [d]
0714   0818 A7 00         mov bh, 0
0715   081A             ; START RELATIONAL
0716   081A D7            push a
0717   081B 11            mov a, b
0718   081C 26 2D 00      mov b, $2d
0719   081F B0            cmp a, b
0720   0820 FD 71         seq ; ==
0721   0822 E4            pop a
0722   0823             ; END RELATIONAL
0723   0823 C0 00 00      cmp b, 0
0724   0826 C6 36 08      je _if10_exit
0725   0829             _if10_true:
0726   0829             ;; sign = -1; 
0727   0829 FA FD FF      lea d, [bp + -3] ; $sign
0728   082C DA            push d
0729   082D 26 FF FF      mov b, $ffff
0730   0830 E7            pop d
0731   0831 FD 43         mov [d], b
0732   0833 0A 36 08      jmp _if10_exit
0733   0836             _if10_exit:
0734   0836             ;; str++; 
0735   0836 FA 05 00      lea d, [bp + 5] ; $str
0736   0839 2A            mov b, [d]
0737   083A D8            push b
0738   083B FD 77         inc b
0739   083D FA 05 00      lea d, [bp + 5] ; $str
0740   0840 FD 43         mov [d], b
0741   0842 E5            pop b
0742   0843 0A 46 08      jmp _if9_exit
0743   0846             _if9_exit:
0744   0846             ;; while (*str >= '0' && *str <= '9') { 
0745   0846             _while11_cond:
0746   0846 FA 05 00      lea d, [bp + 5] ; $str
0747   0849 2A            mov b, [d]
0748   084A 74            mov d, b
0749   084B 32            mov bl, [d]
0750   084C A7 00         mov bh, 0
0751   084E             ; START RELATIONAL
0752   084E D7            push a
0753   084F 11            mov a, b
0754   0850 26 30 00      mov b, $30
0755   0853 B0            cmp a, b
0756   0854 FD 82         sgeu ; >= (unsigned)
0757   0856 E4            pop a
0758   0857             ; END RELATIONAL
0759   0857 D7            push a
0760   0858 11            mov a, b
0761   0859 FA 05 00      lea d, [bp + 5] ; $str
0762   085C 2A            mov b, [d]
0763   085D 74            mov d, b
0764   085E 32            mov bl, [d]
0765   085F A7 00         mov bh, 0
0766   0861             ; START RELATIONAL
0767   0861 D7            push a
0768   0862 11            mov a, b
0769   0863 26 39 00      mov b, $39
0770   0866 B0            cmp a, b
0771   0867 FD 75         slu ; <= (unsigned)
0772   0869 E4            pop a
0773   086A             ; END RELATIONAL
0774   086A FD A7         sand a, b
0775   086C E4            pop a
0776   086D C0 00 00      cmp b, 0
0777   0870 C6 AB 08      je _while11_exit
0778   0873             _while11_block:
0779   0873             ;; result = result * 10 + (*str - '0'); 
0780   0873 FA FF FF      lea d, [bp + -1] ; $result
0781   0876 DA            push d
0782   0877 FA FF FF      lea d, [bp + -1] ; $result
0783   087A 2A            mov b, [d]
0784   087B             ; START FACTORS
0785   087B D7            push a
0786   087C 11            mov a, b
0787   087D 26 0A 00      mov b, $a
0788   0880 AC            mul a, b ; *
0789   0881 11            mov a, b
0790   0882 27            mov b, a
0791   0883 E4            pop a
0792   0884             ; END FACTORS
0793   0884             ; START TERMS
0794   0884 D7            push a
0795   0885 11            mov a, b
0796   0886 FA 05 00      lea d, [bp + 5] ; $str
0797   0889 2A            mov b, [d]
0798   088A 74            mov d, b
0799   088B 32            mov bl, [d]
0800   088C A7 00         mov bh, 0
0801   088E             ; START TERMS
0802   088E D7            push a
0803   088F 11            mov a, b
0804   0890 26 30 00      mov b, $30
0805   0893 60            sub a, b
0806   0894 27            mov b, a
0807   0895 E4            pop a
0808   0896             ; END TERMS
0809   0896 56            add b, a
0810   0897 E4            pop a
0811   0898             ; END TERMS
0812   0898 E7            pop d
0813   0899 FD 43         mov [d], b
0814   089B             ;; str++; 
0815   089B FA 05 00      lea d, [bp + 5] ; $str
0816   089E 2A            mov b, [d]
0817   089F D8            push b
0818   08A0 FD 77         inc b
0819   08A2 FA 05 00      lea d, [bp + 5] ; $str
0820   08A5 FD 43         mov [d], b
0821   08A7 E5            pop b
0822   08A8 0A 46 08      jmp _while11_cond
0823   08AB             _while11_exit:
0824   08AB             ;; return sign * result; 
0825   08AB FA FD FF      lea d, [bp + -3] ; $sign
0826   08AE 2A            mov b, [d]
0827   08AF             ; START FACTORS
0828   08AF D7            push a
0829   08B0 11            mov a, b
0830   08B1 FA FF FF      lea d, [bp + -1] ; $result
0831   08B4 2A            mov b, [d]
0832   08B5 AC            mul a, b ; *
0833   08B6 11            mov a, b
0834   08B7 27            mov b, a
0835   08B8 E4            pop a
0836   08B9             ; END FACTORS
0837   08B9 F9            leave
0838   08BA 09            ret
0839   08BB             
0840   08BB             rand:
0841   08BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0842   08BE             ;; int  sec; 
0843   08BE 52 02 00      sub sp, 2 ; sec
0844   08C1             
0845   08C1             ; --- BEGIN INLINE ASM BLOCK
0846   08C1 19 00         mov al, 0
0847   08C3 05 01         syscall sys_rtc					
0848   08C5 1A            mov al, ah
0849   08C6 FA FF FF      lea d, [bp + -1] ; $sec
0850   08C9 1E            mov al, [d]
0851   08CA 22 00         mov ah, 0
0852   08CC             ; --- END INLINE ASM BLOCK
0853   08CC             
0854   08CC             ;; return sec; 
0855   08CC FA FF FF      lea d, [bp + -1] ; $sec
0856   08CF 2A            mov b, [d]
0857   08D0 F9            leave
0858   08D1 09            ret
0859   08D2             
0860   08D2             alloc:
0861   08D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0862   08D5             ;; heap_top = heap_top + bytes; 
0863   08D5 3B 56 2B      mov d, _heap_top ; $heap_top
0864   08D8 DA            push d
0865   08D9 3B 56 2B      mov d, _heap_top ; $heap_top
0866   08DC 2A            mov b, [d]
0867   08DD             ; START TERMS
0868   08DD D7            push a
0869   08DE 11            mov a, b
0870   08DF FA 05 00      lea d, [bp + 5] ; $bytes
0871   08E2 2A            mov b, [d]
0872   08E3 56            add b, a
0873   08E4 E4            pop a
0874   08E5             ; END TERMS
0875   08E5 E7            pop d
0876   08E6 FD 43         mov [d], b
0877   08E8             ;; return heap_top - bytes; 
0878   08E8 3B 56 2B      mov d, _heap_top ; $heap_top
0879   08EB 2A            mov b, [d]
0880   08EC             ; START TERMS
0881   08EC D7            push a
0882   08ED 11            mov a, b
0883   08EE FA 05 00      lea d, [bp + 5] ; $bytes
0884   08F1 2A            mov b, [d]
0885   08F2 60            sub a, b
0886   08F3 27            mov b, a
0887   08F4 E4            pop a
0888   08F5             ; END TERMS
0889   08F5 F9            leave
0890   08F6 09            ret
0891   08F7             
0892   08F7             free:
0893   08F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0894   08FA             ;; return heap_top = heap_top - bytes; 
0895   08FA 3B 56 2B      mov d, _heap_top ; $heap_top
0896   08FD DA            push d
0897   08FE 3B 56 2B      mov d, _heap_top ; $heap_top
0898   0901 2A            mov b, [d]
0899   0902             ; START TERMS
0900   0902 D7            push a
0901   0903 11            mov a, b
0902   0904 FA 05 00      lea d, [bp + 5] ; $bytes
0903   0907 2A            mov b, [d]
0904   0908 60            sub a, b
0905   0909 27            mov b, a
0906   090A E4            pop a
0907   090B             ; END TERMS
0908   090B E7            pop d
0909   090C FD 43         mov [d], b
0910   090E F9            leave
0911   090F 09            ret
0912   0910             
0913   0910             fopen:
0914   0910 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0915   0913             ;; FILE *fp; 
0916   0913 52 02 00      sub sp, 2 ; fp
0917   0916             ;; fp = alloc(sizeof(int)); 
0918   0916 FA FF FF      lea d, [bp + -1] ; $fp
0919   0919 DA            push d
0920   091A 26 02 00      mov b, 2
0921   091D FD AB         swp b
0922   091F D8            push b
0923   0920 07 D2 08      call alloc
0924   0923 51 02 00      add sp, 2
0925   0926 E7            pop d
0926   0927 FD 43         mov [d], b
0927   0929 F9            leave
0928   092A 09            ret
0929   092B             
0930   092B             printf:
0931   092B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0932   092E             ;; char *p, *format_p; 
0933   092E 52 02 00      sub sp, 2 ; p
0934   0931 52 02 00      sub sp, 2 ; format_p
0935   0934             ;; format_p = format; 
0936   0934 FA FD FF      lea d, [bp + -3] ; $format_p
0937   0937 DA            push d
0938   0938 FA 05 00      lea d, [bp + 5] ; $format
0939   093B 2A            mov b, [d]
0940   093C E7            pop d
0941   093D FD 43         mov [d], b
0942   093F             ;; p = &format + 2; 
0943   093F FA FF FF      lea d, [bp + -1] ; $p
0944   0942 DA            push d
0945   0943 FA 05 00      lea d, [bp + 5] ; $format
0946   0946 2D            mov b, d
0947   0947             ; START TERMS
0948   0947 D7            push a
0949   0948 11            mov a, b
0950   0949 26 02 00      mov b, $2
0951   094C 56            add b, a
0952   094D E4            pop a
0953   094E             ; END TERMS
0954   094E E7            pop d
0955   094F FD 43         mov [d], b
0956   0951             ;; for(;;){ 
0957   0951             _for12_init:
0958   0951             _for12_cond:
0959   0951             _for12_block:
0960   0951             ;; if(!*format_p) break; 
0961   0951             _if13_cond:
0962   0951 FA FD FF      lea d, [bp + -3] ; $format_p
0963   0954 2A            mov b, [d]
0964   0955 74            mov d, b
0965   0956 32            mov bl, [d]
0966   0957 A7 00         mov bh, 0
0967   0959 C0 00 00      cmp b, 0
0968   095C FD 71         seq ; !
0969   095E C0 00 00      cmp b, 0
0970   0961 C6 6A 09      je _if13_else
0971   0964             _if13_true:
0972   0964             ;; break; 
0973   0964 0A 91 0B      jmp _for12_exit ; for break
0974   0967 0A 8E 0B      jmp _if13_exit
0975   096A             _if13_else:
0976   096A             ;; if(*format_p == '%'){ 
0977   096A             _if14_cond:
0978   096A FA FD FF      lea d, [bp + -3] ; $format_p
0979   096D 2A            mov b, [d]
0980   096E 74            mov d, b
0981   096F 32            mov bl, [d]
0982   0970 A7 00         mov bh, 0
0983   0972             ; START RELATIONAL
0984   0972 D7            push a
0985   0973 11            mov a, b
0986   0974 26 25 00      mov b, $25
0987   0977 B0            cmp a, b
0988   0978 FD 71         seq ; ==
0989   097A E4            pop a
0990   097B             ; END RELATIONAL
0991   097B C0 00 00      cmp b, 0
0992   097E C6 72 0B      je _if14_else
0993   0981             _if14_true:
0994   0981             ;; format_p++; 
0995   0981 FA FD FF      lea d, [bp + -3] ; $format_p
0996   0984 2A            mov b, [d]
0997   0985 D8            push b
0998   0986 FD 77         inc b
0999   0988 FA FD FF      lea d, [bp + -3] ; $format_p
1000   098B FD 43         mov [d], b
1001   098D E5            pop b
1002   098E             ;; switch(*format_p){ 
1003   098E             _switch15_expr:
1004   098E FA FD FF      lea d, [bp + -3] ; $format_p
1005   0991 2A            mov b, [d]
1006   0992 74            mov d, b
1007   0993 32            mov bl, [d]
1008   0994 A7 00         mov bh, 0
1009   0996             _switch15_comparisons:
1010   0996 C1 6C         cmp bl, $6c
1011   0998 C6 C4 09      je _switch15_case0
1012   099B C1 4C         cmp bl, $4c
1013   099D C6 C4 09      je _switch15_case1
1014   09A0 C1 64         cmp bl, $64
1015   09A2 C6 B2 0A      je _switch15_case2
1016   09A5 C1 69         cmp bl, $69
1017   09A7 C6 B2 0A      je _switch15_case3
1018   09AA C1 75         cmp bl, $75
1019   09AC C6 D6 0A      je _switch15_case4
1020   09AF C1 78         cmp bl, $78
1021   09B1 C6 FA 0A      je _switch15_case5
1022   09B4 C1 63         cmp bl, $63
1023   09B6 C6 18 0B      je _switch15_case6
1024   09B9 C1 73         cmp bl, $73
1025   09BB C6 37 0B      je _switch15_case7
1026   09BE 0A 56 0B      jmp _switch15_default
1027   09C1 0A 62 0B      jmp _switch15_exit
1028   09C4             _switch15_case0:
1029   09C4             _switch15_case1:
1030   09C4             ;; format_p++; 
1031   09C4 FA FD FF      lea d, [bp + -3] ; $format_p
1032   09C7 2A            mov b, [d]
1033   09C8 D8            push b
1034   09C9 FD 77         inc b
1035   09CB FA FD FF      lea d, [bp + -3] ; $format_p
1036   09CE FD 43         mov [d], b
1037   09D0 E5            pop b
1038   09D1             ;; if(*format_p == 'd' || *format_p == 'i') 
1039   09D1             _if16_cond:
1040   09D1 FA FD FF      lea d, [bp + -3] ; $format_p
1041   09D4 2A            mov b, [d]
1042   09D5 74            mov d, b
1043   09D6 32            mov bl, [d]
1044   09D7 A7 00         mov bh, 0
1045   09D9             ; START RELATIONAL
1046   09D9 D7            push a
1047   09DA 11            mov a, b
1048   09DB 26 64 00      mov b, $64
1049   09DE B0            cmp a, b
1050   09DF FD 71         seq ; ==
1051   09E1 E4            pop a
1052   09E2             ; END RELATIONAL
1053   09E2 D7            push a
1054   09E3 11            mov a, b
1055   09E4 FA FD FF      lea d, [bp + -3] ; $format_p
1056   09E7 2A            mov b, [d]
1057   09E8 74            mov d, b
1058   09E9 32            mov bl, [d]
1059   09EA A7 00         mov bh, 0
1060   09EC             ; START RELATIONAL
1061   09EC D7            push a
1062   09ED 11            mov a, b
1063   09EE 26 69 00      mov b, $69
1064   09F1 B0            cmp a, b
1065   09F2 FD 71         seq ; ==
1066   09F4 E4            pop a
1067   09F5             ; END RELATIONAL
1068   09F5 FD A8         sor a, b ; ||
1069   09F7 E4            pop a
1070   09F8 C0 00 00      cmp b, 0
1071   09FB C6 20 0A      je _if16_else
1072   09FE             _if16_true:
1073   09FE             ;; print_signed_long(*(long *)p); 
1074   09FE FA FF FF      lea d, [bp + -1] ; $p
1075   0A01 2A            mov b, [d]
1076   0A02 AB            snex b
1077   0A03 FD 39         mov c, b
1078   0A05 74            mov d, b
1079   0A06 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1080   0A09 FD 39         mov c, b ; And place it into C
1081   0A0B 2A            mov b, [d] ; Lower Word in B
1082   0A0C FD 79         mov g, b
1083   0A0E 28            mov b, c
1084   0A0F FD AB         swp b
1085   0A11 D8            push b
1086   0A12 FD 27         mov b, g
1087   0A14 FD AB         swp b
1088   0A16 D8            push b
1089   0A17 07 77 10      call print_signed_long
1090   0A1A 51 04 00      add sp, 4
1091   0A1D 0A 9D 0A      jmp _if16_exit
1092   0A20             _if16_else:
1093   0A20             ;; if(*format_p == 'u') 
1094   0A20             _if17_cond:
1095   0A20 FA FD FF      lea d, [bp + -3] ; $format_p
1096   0A23 2A            mov b, [d]
1097   0A24 74            mov d, b
1098   0A25 32            mov bl, [d]
1099   0A26 A7 00         mov bh, 0
1100   0A28             ; START RELATIONAL
1101   0A28 D7            push a
1102   0A29 11            mov a, b
1103   0A2A 26 75 00      mov b, $75
1104   0A2D B0            cmp a, b
1105   0A2E FD 71         seq ; ==
1106   0A30 E4            pop a
1107   0A31             ; END RELATIONAL
1108   0A31 C0 00 00      cmp b, 0
1109   0A34 C6 5B 0A      je _if17_else
1110   0A37             _if17_true:
1111   0A37             ;; print_unsigned_long(*(unsigned long *)p); 
1112   0A37 FA FF FF      lea d, [bp + -1] ; $p
1113   0A3A 2A            mov b, [d]
1114   0A3B A7 00         mov bh, 0
1115   0A3D 38 00 00      mov c, 0
1116   0A40 74            mov d, b
1117   0A41 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1118   0A44 FD 39         mov c, b ; And place it into C
1119   0A46 2A            mov b, [d] ; Lower Word in B
1120   0A47 FD 79         mov g, b
1121   0A49 28            mov b, c
1122   0A4A FD AB         swp b
1123   0A4C D8            push b
1124   0A4D FD 27         mov b, g
1125   0A4F FD AB         swp b
1126   0A51 D8            push b
1127   0A52 07 B7 13      call print_unsigned_long
1128   0A55 51 04 00      add sp, 4
1129   0A58 0A 9D 0A      jmp _if17_exit
1130   0A5B             _if17_else:
1131   0A5B             ;; if(*format_p == 'x') 
1132   0A5B             _if18_cond:
1133   0A5B FA FD FF      lea d, [bp + -3] ; $format_p
1134   0A5E 2A            mov b, [d]
1135   0A5F 74            mov d, b
1136   0A60 32            mov bl, [d]
1137   0A61 A7 00         mov bh, 0
1138   0A63             ; START RELATIONAL
1139   0A63 D7            push a
1140   0A64 11            mov a, b
1141   0A65 26 78 00      mov b, $78
1142   0A68 B0            cmp a, b
1143   0A69 FD 71         seq ; ==
1144   0A6B E4            pop a
1145   0A6C             ; END RELATIONAL
1146   0A6C C0 00 00      cmp b, 0
1147   0A6F C6 91 0A      je _if18_else
1148   0A72             _if18_true:
1149   0A72             ;; printx32(*(long int *)p); 
1150   0A72 FA FF FF      lea d, [bp + -1] ; $p
1151   0A75 2A            mov b, [d]
1152   0A76 74            mov d, b
1153   0A77 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1154   0A7A FD 39         mov c, b ; And place it into C
1155   0A7C 2A            mov b, [d] ; Lower Word in B
1156   0A7D FD 79         mov g, b
1157   0A7F 28            mov b, c
1158   0A80 FD AB         swp b
1159   0A82 D8            push b
1160   0A83 FD 27         mov b, g
1161   0A85 FD AB         swp b
1162   0A87 D8            push b
1163   0A88 07 EC 0D      call printx32
1164   0A8B 51 04 00      add sp, 4
1165   0A8E 0A 9D 0A      jmp _if18_exit
1166   0A91             _if18_else:
1167   0A91             ;; err("Unexpected format in printf."); 
1168   0A91 26 12 2B      mov b, _s1 ; "Unexpected format in printf."
1169   0A94 FD AB         swp b
1170   0A96 D8            push b
1171   0A97 07 DA 0D      call err
1172   0A9A 51 02 00      add sp, 2
1173   0A9D             _if18_exit:
1174   0A9D             _if17_exit:
1175   0A9D             _if16_exit:
1176   0A9D             ;; p = p + 4; 
1177   0A9D FA FF FF      lea d, [bp + -1] ; $p
1178   0AA0 DA            push d
1179   0AA1 FA FF FF      lea d, [bp + -1] ; $p
1180   0AA4 2A            mov b, [d]
1181   0AA5             ; START TERMS
1182   0AA5 D7            push a
1183   0AA6 11            mov a, b
1184   0AA7 26 04 00      mov b, $4
1185   0AAA 56            add b, a
1186   0AAB E4            pop a
1187   0AAC             ; END TERMS
1188   0AAC E7            pop d
1189   0AAD FD 43         mov [d], b
1190   0AAF             ;; break; 
1191   0AAF 0A 62 0B      jmp _switch15_exit ; case break
1192   0AB2             _switch15_case2:
1193   0AB2             _switch15_case3:
1194   0AB2             ;; print_signed(*(int*)p); 
1195   0AB2 FA FF FF      lea d, [bp + -1] ; $p
1196   0AB5 2A            mov b, [d]
1197   0AB6 74            mov d, b
1198   0AB7 2A            mov b, [d]
1199   0AB8 FD AB         swp b
1200   0ABA D8            push b
1201   0ABB 07 80 0F      call print_signed
1202   0ABE 51 02 00      add sp, 2
1203   0AC1             ;; p = p + 2; 
1204   0AC1 FA FF FF      lea d, [bp + -1] ; $p
1205   0AC4 DA            push d
1206   0AC5 FA FF FF      lea d, [bp + -1] ; $p
1207   0AC8 2A            mov b, [d]
1208   0AC9             ; START TERMS
1209   0AC9 D7            push a
1210   0ACA 11            mov a, b
1211   0ACB 26 02 00      mov b, $2
1212   0ACE 56            add b, a
1213   0ACF E4            pop a
1214   0AD0             ; END TERMS
1215   0AD0 E7            pop d
1216   0AD1 FD 43         mov [d], b
1217   0AD3             ;; break; 
1218   0AD3 0A 62 0B      jmp _switch15_exit ; case break
1219   0AD6             _switch15_case4:
1220   0AD6             ;; print_unsigned(*(unsigned int*)p); 
1221   0AD6 FA FF FF      lea d, [bp + -1] ; $p
1222   0AD9 2A            mov b, [d]
1223   0ADA 74            mov d, b
1224   0ADB 2A            mov b, [d]
1225   0ADC FD AB         swp b
1226   0ADE D8            push b
1227   0ADF 07 B2 15      call print_unsigned
1228   0AE2 51 02 00      add sp, 2
1229   0AE5             ;; p = p + 2; 
1230   0AE5 FA FF FF      lea d, [bp + -1] ; $p
1231   0AE8 DA            push d
1232   0AE9 FA FF FF      lea d, [bp + -1] ; $p
1233   0AEC 2A            mov b, [d]
1234   0AED             ; START TERMS
1235   0AED D7            push a
1236   0AEE 11            mov a, b
1237   0AEF 26 02 00      mov b, $2
1238   0AF2 56            add b, a
1239   0AF3 E4            pop a
1240   0AF4             ; END TERMS
1241   0AF4 E7            pop d
1242   0AF5 FD 43         mov [d], b
1243   0AF7             ;; break; 
1244   0AF7 0A 62 0B      jmp _switch15_exit ; case break
1245   0AFA             _switch15_case5:
1246   0AFA             
1247   0AFA             ; --- BEGIN INLINE ASM BLOCK
1248   0AFA FA FF FF      lea d, [bp + -1] ; $p
1249   0AFD FD 2A         mov d, [d]
1250   0AFF 2A            mov b, [d]
1251   0B00 07 B8 19      call print_u16x
1252   0B03             ; --- END INLINE ASM BLOCK
1253   0B03             
1254   0B03             ;; p = p + 2; 
1255   0B03 FA FF FF      lea d, [bp + -1] ; $p
1256   0B06 DA            push d
1257   0B07 FA FF FF      lea d, [bp + -1] ; $p
1258   0B0A 2A            mov b, [d]
1259   0B0B             ; START TERMS
1260   0B0B D7            push a
1261   0B0C 11            mov a, b
1262   0B0D 26 02 00      mov b, $2
1263   0B10 56            add b, a
1264   0B11 E4            pop a
1265   0B12             ; END TERMS
1266   0B12 E7            pop d
1267   0B13 FD 43         mov [d], b
1268   0B15             ;; break; 
1269   0B15 0A 62 0B      jmp _switch15_exit ; case break
1270   0B18             _switch15_case6:
1271   0B18             
1272   0B18             ; --- BEGIN INLINE ASM BLOCK
1273   0B18 FA FF FF      lea d, [bp + -1] ; $p
1274   0B1B FD 2A         mov d, [d]
1275   0B1D 1E            mov al, [d]
1276   0B1E 23            mov ah, al
1277   0B1F 07 16 18      call _putchar
1278   0B22             ; --- END INLINE ASM BLOCK
1279   0B22             
1280   0B22             ;; p = p + 2; 
1281   0B22 FA FF FF      lea d, [bp + -1] ; $p
1282   0B25 DA            push d
1283   0B26 FA FF FF      lea d, [bp + -1] ; $p
1284   0B29 2A            mov b, [d]
1285   0B2A             ; START TERMS
1286   0B2A D7            push a
1287   0B2B 11            mov a, b
1288   0B2C 26 02 00      mov b, $2
1289   0B2F 56            add b, a
1290   0B30 E4            pop a
1291   0B31             ; END TERMS
1292   0B31 E7            pop d
1293   0B32 FD 43         mov [d], b
1294   0B34             ;; break; 
1295   0B34 0A 62 0B      jmp _switch15_exit ; case break
1296   0B37             _switch15_case7:
1297   0B37             
1298   0B37             ; --- BEGIN INLINE ASM BLOCK
1299   0B37 FA FF FF      lea d, [bp + -1] ; $p
1300   0B3A FD 2A         mov d, [d]
1301   0B3C FD 2A         mov d, [d]
1302   0B3E 07 60 19      call _puts
1303   0B41             ; --- END INLINE ASM BLOCK
1304   0B41             
1305   0B41             ;; p = p + 2; 
1306   0B41 FA FF FF      lea d, [bp + -1] ; $p
1307   0B44 DA            push d
1308   0B45 FA FF FF      lea d, [bp + -1] ; $p
1309   0B48 2A            mov b, [d]
1310   0B49             ; START TERMS
1311   0B49 D7            push a
1312   0B4A 11            mov a, b
1313   0B4B 26 02 00      mov b, $2
1314   0B4E 56            add b, a
1315   0B4F E4            pop a
1316   0B50             ; END TERMS
1317   0B50 E7            pop d
1318   0B51 FD 43         mov [d], b
1319   0B53             ;; break; 
1320   0B53 0A 62 0B      jmp _switch15_exit ; case break
1321   0B56             _switch15_default:
1322   0B56             ;; print("Error: Unknown argument type.\n"); 
1323   0B56 26 2F 2B      mov b, _s2 ; "Error: Unknown argument type.\n"
1324   0B59 FD AB         swp b
1325   0B5B D8            push b
1326   0B5C 07 CD 16      call print
1327   0B5F 51 02 00      add sp, 2
1328   0B62             _switch15_exit:
1329   0B62             ;; format_p++; 
1330   0B62 FA FD FF      lea d, [bp + -3] ; $format_p
1331   0B65 2A            mov b, [d]
1332   0B66 D8            push b
1333   0B67 FD 77         inc b
1334   0B69 FA FD FF      lea d, [bp + -3] ; $format_p
1335   0B6C FD 43         mov [d], b
1336   0B6E E5            pop b
1337   0B6F 0A 8E 0B      jmp _if14_exit
1338   0B72             _if14_else:
1339   0B72             ;; putchar(*format_p); 
1340   0B72 FA FD FF      lea d, [bp + -3] ; $format_p
1341   0B75 2A            mov b, [d]
1342   0B76 74            mov d, b
1343   0B77 32            mov bl, [d]
1344   0B78 A7 00         mov bh, 0
1345   0B7A DD            push bl
1346   0B7B 07 85 16      call putchar
1347   0B7E 51 01 00      add sp, 1
1348   0B81             ;; format_p++; 
1349   0B81 FA FD FF      lea d, [bp + -3] ; $format_p
1350   0B84 2A            mov b, [d]
1351   0B85 D8            push b
1352   0B86 FD 77         inc b
1353   0B88 FA FD FF      lea d, [bp + -3] ; $format_p
1354   0B8B FD 43         mov [d], b
1355   0B8D E5            pop b
1356   0B8E             _if14_exit:
1357   0B8E             _if13_exit:
1358   0B8E             _for12_update:
1359   0B8E 0A 51 09      jmp _for12_cond
1360   0B91             _for12_exit:
1361   0B91 F9            leave
1362   0B92 09            ret
1363   0B93             
1364   0B93             scanf:
1365   0B93 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1366   0B96             ;; char *p, *format_p; 
1367   0B96 52 02 00      sub sp, 2 ; p
1368   0B99 52 02 00      sub sp, 2 ; format_p
1369   0B9C             ;; char c; 
1370   0B9C 52 01 00      sub sp, 1 ; c
1371   0B9F             ;; int i; 
1372   0B9F 52 02 00      sub sp, 2 ; i
1373   0BA2             ;; char input_string[  512                    ]; 
1374   0BA2 52 00 02      sub sp, 512 ; input_string
1375   0BA5             ;; format_p = format; 
1376   0BA5 FA FD FF      lea d, [bp + -3] ; $format_p
1377   0BA8 DA            push d
1378   0BA9 FA 05 00      lea d, [bp + 5] ; $format
1379   0BAC 2A            mov b, [d]
1380   0BAD E7            pop d
1381   0BAE FD 43         mov [d], b
1382   0BB0             ;; p = &format + 2; 
1383   0BB0 FA FF FF      lea d, [bp + -1] ; $p
1384   0BB3 DA            push d
1385   0BB4 FA 05 00      lea d, [bp + 5] ; $format
1386   0BB7 2D            mov b, d
1387   0BB8             ; START TERMS
1388   0BB8 D7            push a
1389   0BB9 11            mov a, b
1390   0BBA 26 02 00      mov b, $2
1391   0BBD 56            add b, a
1392   0BBE E4            pop a
1393   0BBF             ; END TERMS
1394   0BBF E7            pop d
1395   0BC0 FD 43         mov [d], b
1396   0BC2             ;; for(;;){ 
1397   0BC2             _for19_init:
1398   0BC2             _for19_cond:
1399   0BC2             _for19_block:
1400   0BC2             ;; if(!*format_p) break; 
1401   0BC2             _if20_cond:
1402   0BC2 FA FD FF      lea d, [bp + -3] ; $format_p
1403   0BC5 2A            mov b, [d]
1404   0BC6 74            mov d, b
1405   0BC7 32            mov bl, [d]
1406   0BC8 A7 00         mov bh, 0
1407   0BCA C0 00 00      cmp b, 0
1408   0BCD FD 71         seq ; !
1409   0BCF C0 00 00      cmp b, 0
1410   0BD2 C6 DB 0B      je _if20_else
1411   0BD5             _if20_true:
1412   0BD5             ;; break; 
1413   0BD5 0A D8 0D      jmp _for19_exit ; for break
1414   0BD8 0A D5 0D      jmp _if20_exit
1415   0BDB             _if20_else:
1416   0BDB             ;; if(*format_p == '%'){ 
1417   0BDB             _if21_cond:
1418   0BDB FA FD FF      lea d, [bp + -3] ; $format_p
1419   0BDE 2A            mov b, [d]
1420   0BDF 74            mov d, b
1421   0BE0 32            mov bl, [d]
1422   0BE1 A7 00         mov bh, 0
1423   0BE3             ; START RELATIONAL
1424   0BE3 D7            push a
1425   0BE4 11            mov a, b
1426   0BE5 26 25 00      mov b, $25
1427   0BE8 B0            cmp a, b
1428   0BE9 FD 71         seq ; ==
1429   0BEB E4            pop a
1430   0BEC             ; END RELATIONAL
1431   0BEC C0 00 00      cmp b, 0
1432   0BEF C6 B9 0D      je _if21_else
1433   0BF2             _if21_true:
1434   0BF2             ;; format_p++; 
1435   0BF2 FA FD FF      lea d, [bp + -3] ; $format_p
1436   0BF5 2A            mov b, [d]
1437   0BF6 D8            push b
1438   0BF7 FD 77         inc b
1439   0BF9 FA FD FF      lea d, [bp + -3] ; $format_p
1440   0BFC FD 43         mov [d], b
1441   0BFE E5            pop b
1442   0BFF             ;; switch(*format_p){ 
1443   0BFF             _switch22_expr:
1444   0BFF FA FD FF      lea d, [bp + -3] ; $format_p
1445   0C02 2A            mov b, [d]
1446   0C03 74            mov d, b
1447   0C04 32            mov bl, [d]
1448   0C05 A7 00         mov bh, 0
1449   0C07             _switch22_comparisons:
1450   0C07 C1 6C         cmp bl, $6c
1451   0C09 C6 35 0C      je _switch22_case0
1452   0C0C C1 4C         cmp bl, $4c
1453   0C0E C6 35 0C      je _switch22_case1
1454   0C11 C1 64         cmp bl, $64
1455   0C13 C6 C7 0C      je _switch22_case2
1456   0C16 C1 69         cmp bl, $69
1457   0C18 C6 C7 0C      je _switch22_case3
1458   0C1B C1 75         cmp bl, $75
1459   0C1D C6 F4 0C      je _switch22_case4
1460   0C20 C1 78         cmp bl, $78
1461   0C22 C6 21 0D      je _switch22_case5
1462   0C25 C1 63         cmp bl, $63
1463   0C27 C6 36 0D      je _switch22_case6
1464   0C2A C1 73         cmp bl, $73
1465   0C2C C6 65 0D      je _switch22_case7
1466   0C2F 0A 9D 0D      jmp _switch22_default
1467   0C32 0A A9 0D      jmp _switch22_exit
1468   0C35             _switch22_case0:
1469   0C35             _switch22_case1:
1470   0C35             ;; format_p++; 
1471   0C35 FA FD FF      lea d, [bp + -3] ; $format_p
1472   0C38 2A            mov b, [d]
1473   0C39 D8            push b
1474   0C3A FD 77         inc b
1475   0C3C FA FD FF      lea d, [bp + -3] ; $format_p
1476   0C3F FD 43         mov [d], b
1477   0C41 E5            pop b
1478   0C42             ;; if(*format_p == 'd' || *format_p == 'i'); 
1479   0C42             _if23_cond:
1480   0C42 FA FD FF      lea d, [bp + -3] ; $format_p
1481   0C45 2A            mov b, [d]
1482   0C46 74            mov d, b
1483   0C47 32            mov bl, [d]
1484   0C48 A7 00         mov bh, 0
1485   0C4A             ; START RELATIONAL
1486   0C4A D7            push a
1487   0C4B 11            mov a, b
1488   0C4C 26 64 00      mov b, $64
1489   0C4F B0            cmp a, b
1490   0C50 FD 71         seq ; ==
1491   0C52 E4            pop a
1492   0C53             ; END RELATIONAL
1493   0C53 D7            push a
1494   0C54 11            mov a, b
1495   0C55 FA FD FF      lea d, [bp + -3] ; $format_p
1496   0C58 2A            mov b, [d]
1497   0C59 74            mov d, b
1498   0C5A 32            mov bl, [d]
1499   0C5B A7 00         mov bh, 0
1500   0C5D             ; START RELATIONAL
1501   0C5D D7            push a
1502   0C5E 11            mov a, b
1503   0C5F 26 69 00      mov b, $69
1504   0C62 B0            cmp a, b
1505   0C63 FD 71         seq ; ==
1506   0C65 E4            pop a
1507   0C66             ; END RELATIONAL
1508   0C66 FD A8         sor a, b ; ||
1509   0C68 E4            pop a
1510   0C69 C0 00 00      cmp b, 0
1511   0C6C C6 72 0C      je _if23_else
1512   0C6F             _if23_true:
1513   0C6F             ;; ; 
1514   0C6F 0A B2 0C      jmp _if23_exit
1515   0C72             _if23_else:
1516   0C72             ;; if(*format_p == 'u'); 
1517   0C72             _if24_cond:
1518   0C72 FA FD FF      lea d, [bp + -3] ; $format_p
1519   0C75 2A            mov b, [d]
1520   0C76 74            mov d, b
1521   0C77 32            mov bl, [d]
1522   0C78 A7 00         mov bh, 0
1523   0C7A             ; START RELATIONAL
1524   0C7A D7            push a
1525   0C7B 11            mov a, b
1526   0C7C 26 75 00      mov b, $75
1527   0C7F B0            cmp a, b
1528   0C80 FD 71         seq ; ==
1529   0C82 E4            pop a
1530   0C83             ; END RELATIONAL
1531   0C83 C0 00 00      cmp b, 0
1532   0C86 C6 8C 0C      je _if24_else
1533   0C89             _if24_true:
1534   0C89             ;; ; 
1535   0C89 0A B2 0C      jmp _if24_exit
1536   0C8C             _if24_else:
1537   0C8C             ;; if(*format_p == 'x'); 
1538   0C8C             _if25_cond:
1539   0C8C FA FD FF      lea d, [bp + -3] ; $format_p
1540   0C8F 2A            mov b, [d]
1541   0C90 74            mov d, b
1542   0C91 32            mov bl, [d]
1543   0C92 A7 00         mov bh, 0
1544   0C94             ; START RELATIONAL
1545   0C94 D7            push a
1546   0C95 11            mov a, b
1547   0C96 26 78 00      mov b, $78
1548   0C99 B0            cmp a, b
1549   0C9A FD 71         seq ; ==
1550   0C9C E4            pop a
1551   0C9D             ; END RELATIONAL
1552   0C9D C0 00 00      cmp b, 0
1553   0CA0 C6 A6 0C      je _if25_else
1554   0CA3             _if25_true:
1555   0CA3             ;; ; 
1556   0CA3 0A B2 0C      jmp _if25_exit
1557   0CA6             _if25_else:
1558   0CA6             ;; err("Unexpected format in printf."); 
1559   0CA6 26 12 2B      mov b, _s1 ; "Unexpected format in printf."
1560   0CA9 FD AB         swp b
1561   0CAB D8            push b
1562   0CAC 07 DA 0D      call err
1563   0CAF 51 02 00      add sp, 2
1564   0CB2             _if25_exit:
1565   0CB2             _if24_exit:
1566   0CB2             _if23_exit:
1567   0CB2             ;; p = p + 4; 
1568   0CB2 FA FF FF      lea d, [bp + -1] ; $p
1569   0CB5 DA            push d
1570   0CB6 FA FF FF      lea d, [bp + -1] ; $p
1571   0CB9 2A            mov b, [d]
1572   0CBA             ; START TERMS
1573   0CBA D7            push a
1574   0CBB 11            mov a, b
1575   0CBC 26 04 00      mov b, $4
1576   0CBF 56            add b, a
1577   0CC0 E4            pop a
1578   0CC1             ; END TERMS
1579   0CC1 E7            pop d
1580   0CC2 FD 43         mov [d], b
1581   0CC4             ;; break; 
1582   0CC4 0A A9 0D      jmp _switch22_exit ; case break
1583   0CC7             _switch22_case2:
1584   0CC7             _switch22_case3:
1585   0CC7             ;; i = scann(); 
1586   0CC7 FA FA FF      lea d, [bp + -6] ; $i
1587   0CCA DA            push d
1588   0CCB 07 A8 16      call scann
1589   0CCE E7            pop d
1590   0CCF FD 43         mov [d], b
1591   0CD1             ;; **(int **)p = i; 
1592   0CD1 FA FF FF      lea d, [bp + -1] ; $p
1593   0CD4 2A            mov b, [d]
1594   0CD5 74            mov d, b
1595   0CD6 2A            mov b, [d]
1596   0CD7 D8            push b
1597   0CD8 FA FA FF      lea d, [bp + -6] ; $i
1598   0CDB 2A            mov b, [d]
1599   0CDC E7            pop d
1600   0CDD FD 43         mov [d], b
1601   0CDF             ;; p = p + 2; 
1602   0CDF FA FF FF      lea d, [bp + -1] ; $p
1603   0CE2 DA            push d
1604   0CE3 FA FF FF      lea d, [bp + -1] ; $p
1605   0CE6 2A            mov b, [d]
1606   0CE7             ; START TERMS
1607   0CE7 D7            push a
1608   0CE8 11            mov a, b
1609   0CE9 26 02 00      mov b, $2
1610   0CEC 56            add b, a
1611   0CED E4            pop a
1612   0CEE             ; END TERMS
1613   0CEE E7            pop d
1614   0CEF FD 43         mov [d], b
1615   0CF1             ;; break; 
1616   0CF1 0A A9 0D      jmp _switch22_exit ; case break
1617   0CF4             _switch22_case4:
1618   0CF4             ;; i = scann(); 
1619   0CF4 FA FA FF      lea d, [bp + -6] ; $i
1620   0CF7 DA            push d
1621   0CF8 07 A8 16      call scann
1622   0CFB E7            pop d
1623   0CFC FD 43         mov [d], b
1624   0CFE             ;; **(int **)p = i; 
1625   0CFE FA FF FF      lea d, [bp + -1] ; $p
1626   0D01 2A            mov b, [d]
1627   0D02 74            mov d, b
1628   0D03 2A            mov b, [d]
1629   0D04 D8            push b
1630   0D05 FA FA FF      lea d, [bp + -6] ; $i
1631   0D08 2A            mov b, [d]
1632   0D09 E7            pop d
1633   0D0A FD 43         mov [d], b
1634   0D0C             ;; p = p + 2; 
1635   0D0C FA FF FF      lea d, [bp + -1] ; $p
1636   0D0F DA            push d
1637   0D10 FA FF FF      lea d, [bp + -1] ; $p
1638   0D13 2A            mov b, [d]
1639   0D14             ; START TERMS
1640   0D14 D7            push a
1641   0D15 11            mov a, b
1642   0D16 26 02 00      mov b, $2
1643   0D19 56            add b, a
1644   0D1A E4            pop a
1645   0D1B             ; END TERMS
1646   0D1B E7            pop d
1647   0D1C FD 43         mov [d], b
1648   0D1E             ;; break; 
1649   0D1E 0A A9 0D      jmp _switch22_exit ; case break
1650   0D21             _switch22_case5:
1651   0D21             ;; p = p + 2; 
1652   0D21 FA FF FF      lea d, [bp + -1] ; $p
1653   0D24 DA            push d
1654   0D25 FA FF FF      lea d, [bp + -1] ; $p
1655   0D28 2A            mov b, [d]
1656   0D29             ; START TERMS
1657   0D29 D7            push a
1658   0D2A 11            mov a, b
1659   0D2B 26 02 00      mov b, $2
1660   0D2E 56            add b, a
1661   0D2F E4            pop a
1662   0D30             ; END TERMS
1663   0D30 E7            pop d
1664   0D31 FD 43         mov [d], b
1665   0D33             ;; break; 
1666   0D33 0A A9 0D      jmp _switch22_exit ; case break
1667   0D36             _switch22_case6:
1668   0D36             ;; c = getchar(); 
1669   0D36 FA FC FF      lea d, [bp + -4] ; $c
1670   0D39 DA            push d
1671   0D3A 07 92 16      call getchar
1672   0D3D E7            pop d
1673   0D3E FD 3E         mov [d], bl
1674   0D40             ;; **(char **)p = c; 
1675   0D40 FA FF FF      lea d, [bp + -1] ; $p
1676   0D43 2A            mov b, [d]
1677   0D44 74            mov d, b
1678   0D45 2A            mov b, [d]
1679   0D46 D8            push b
1680   0D47 FA FC FF      lea d, [bp + -4] ; $c
1681   0D4A 32            mov bl, [d]
1682   0D4B A7 00         mov bh, 0
1683   0D4D E7            pop d
1684   0D4E FD 43         mov [d], b
1685   0D50             ;; p = p + 2; 
1686   0D50 FA FF FF      lea d, [bp + -1] ; $p
1687   0D53 DA            push d
1688   0D54 FA FF FF      lea d, [bp + -1] ; $p
1689   0D57 2A            mov b, [d]
1690   0D58             ; START TERMS
1691   0D58 D7            push a
1692   0D59 11            mov a, b
1693   0D5A 26 02 00      mov b, $2
1694   0D5D 56            add b, a
1695   0D5E E4            pop a
1696   0D5F             ; END TERMS
1697   0D5F E7            pop d
1698   0D60 FD 43         mov [d], b
1699   0D62             ;; break; 
1700   0D62 0A A9 0D      jmp _switch22_exit ; case break
1701   0D65             _switch22_case7:
1702   0D65             ;; gets(input_string); 
1703   0D65 FA FA FD      lea d, [bp + -518] ; $input_string
1704   0D68 2D            mov b, d
1705   0D69 FD AB         swp b
1706   0D6B D8            push b
1707   0D6C 07 66 0F      call gets
1708   0D6F 51 02 00      add sp, 2
1709   0D72             ;; strcpy(*(char **)p, input_string); 
1710   0D72 FA FA FD      lea d, [bp + -518] ; $input_string
1711   0D75 2D            mov b, d
1712   0D76 FD AB         swp b
1713   0D78 D8            push b
1714   0D79 FA FF FF      lea d, [bp + -1] ; $p
1715   0D7C 2A            mov b, [d]
1716   0D7D 74            mov d, b
1717   0D7E 2A            mov b, [d]
1718   0D7F FD AB         swp b
1719   0D81 D8            push b
1720   0D82 07 87 05      call strcpy
1721   0D85 51 04 00      add sp, 4
1722   0D88             ;; p = p + 2; 
1723   0D88 FA FF FF      lea d, [bp + -1] ; $p
1724   0D8B DA            push d
1725   0D8C FA FF FF      lea d, [bp + -1] ; $p
1726   0D8F 2A            mov b, [d]
1727   0D90             ; START TERMS
1728   0D90 D7            push a
1729   0D91 11            mov a, b
1730   0D92 26 02 00      mov b, $2
1731   0D95 56            add b, a
1732   0D96 E4            pop a
1733   0D97             ; END TERMS
1734   0D97 E7            pop d
1735   0D98 FD 43         mov [d], b
1736   0D9A             ;; break; 
1737   0D9A 0A A9 0D      jmp _switch22_exit ; case break
1738   0D9D             _switch22_default:
1739   0D9D             ;; print("Error: Unknown argument type.\n"); 
1740   0D9D 26 2F 2B      mov b, _s2 ; "Error: Unknown argument type.\n"
1741   0DA0 FD AB         swp b
1742   0DA2 D8            push b
1743   0DA3 07 CD 16      call print
1744   0DA6 51 02 00      add sp, 2
1745   0DA9             _switch22_exit:
1746   0DA9             ;; format_p++; 
1747   0DA9 FA FD FF      lea d, [bp + -3] ; $format_p
1748   0DAC 2A            mov b, [d]
1749   0DAD D8            push b
1750   0DAE FD 77         inc b
1751   0DB0 FA FD FF      lea d, [bp + -3] ; $format_p
1752   0DB3 FD 43         mov [d], b
1753   0DB5 E5            pop b
1754   0DB6 0A D5 0D      jmp _if21_exit
1755   0DB9             _if21_else:
1756   0DB9             ;; putchar(*format_p); 
1757   0DB9 FA FD FF      lea d, [bp + -3] ; $format_p
1758   0DBC 2A            mov b, [d]
1759   0DBD 74            mov d, b
1760   0DBE 32            mov bl, [d]
1761   0DBF A7 00         mov bh, 0
1762   0DC1 DD            push bl
1763   0DC2 07 85 16      call putchar
1764   0DC5 51 01 00      add sp, 1
1765   0DC8             ;; format_p++; 
1766   0DC8 FA FD FF      lea d, [bp + -3] ; $format_p
1767   0DCB 2A            mov b, [d]
1768   0DCC D8            push b
1769   0DCD FD 77         inc b
1770   0DCF FA FD FF      lea d, [bp + -3] ; $format_p
1771   0DD2 FD 43         mov [d], b
1772   0DD4 E5            pop b
1773   0DD5             _if21_exit:
1774   0DD5             _if20_exit:
1775   0DD5             _for19_update:
1776   0DD5 0A C2 0B      jmp _for19_cond
1777   0DD8             _for19_exit:
1778   0DD8 F9            leave
1779   0DD9 09            ret
1780   0DDA             
1781   0DDA             err:
1782   0DDA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1783   0DDD             ;; print(e); 
1784   0DDD FA 05 00      lea d, [bp + 5] ; $e
1785   0DE0 2A            mov b, [d]
1786   0DE1 FD AB         swp b
1787   0DE3 D8            push b
1788   0DE4 07 CD 16      call print
1789   0DE7 51 02 00      add sp, 2
1790   0DEA F9            leave
1791   0DEB 09            ret
1792   0DEC             
1793   0DEC             printx32:
1794   0DEC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1795   0DEF             
1796   0DEF             ; --- BEGIN INLINE ASM BLOCK
1797   0DEF FA 05 00      lea d, [bp + 5] ; $hex
1798   0DF2 2B 02 00      mov b, [d+2]
1799   0DF5 07 B8 19      call print_u16x
1800   0DF8 2A            mov b, [d]
1801   0DF9 07 B8 19      call print_u16x
1802   0DFC             ; --- END INLINE ASM BLOCK
1803   0DFC             
1804   0DFC F9            leave
1805   0DFD 09            ret
1806   0DFE             
1807   0DFE             printx16:
1808   0DFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1809   0E01             
1810   0E01             ; --- BEGIN INLINE ASM BLOCK
1811   0E01 FA 05 00      lea d, [bp + 5] ; $hex
1812   0E04 2A            mov b, [d]
1813   0E05 07 B8 19      call print_u16x
1814   0E08             ; --- END INLINE ASM BLOCK
1815   0E08             
1816   0E08 F9            leave
1817   0E09 09            ret
1818   0E0A             
1819   0E0A             printx8:
1820   0E0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1821   0E0D             
1822   0E0D             ; --- BEGIN INLINE ASM BLOCK
1823   0E0D FA 05 00      lea d, [bp + 5] ; $hex
1824   0E10 32            mov bl, [d]
1825   0E11 07 FC 19      call print_u8x
1826   0E14             ; --- END INLINE ASM BLOCK
1827   0E14             
1828   0E14 F9            leave
1829   0E15 09            ret
1830   0E16             
1831   0E16             hex_str_to_int:
1832   0E16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1833   0E19             ;; int value = 0; 
1834   0E19 52 02 00      sub sp, 2 ; value
1835   0E1C             ; --- START LOCAL VAR INITIALIZATION
1836   0E1C FA FF FF      lea d, [bp + -1] ; $value
1837   0E1F DA            push d
1838   0E20 26 00 00      mov b, $0
1839   0E23 E7            pop d
1840   0E24 FD 43         mov [d], b
1841   0E26             ; --- END LOCAL VAR INITIALIZATION
1842   0E26             ;; int i; 
1843   0E26 52 02 00      sub sp, 2 ; i
1844   0E29             ;; char hex_char; 
1845   0E29 52 01 00      sub sp, 1 ; hex_char
1846   0E2C             ;; int len; 
1847   0E2C 52 02 00      sub sp, 2 ; len
1848   0E2F             ;; len = strlen(hex_string); 
1849   0E2F FA FA FF      lea d, [bp + -6] ; $len
1850   0E32 DA            push d
1851   0E33 FA 05 00      lea d, [bp + 5] ; $hex_string
1852   0E36 2A            mov b, [d]
1853   0E37 FD AB         swp b
1854   0E39 D8            push b
1855   0E3A 07 01 07      call strlen
1856   0E3D 51 02 00      add sp, 2
1857   0E40 E7            pop d
1858   0E41 FD 43         mov [d], b
1859   0E43             ;; for (i = 0; i < len; i++) { 
1860   0E43             _for26_init:
1861   0E43 FA FD FF      lea d, [bp + -3] ; $i
1862   0E46 DA            push d
1863   0E47 26 00 00      mov b, $0
1864   0E4A E7            pop d
1865   0E4B FD 43         mov [d], b
1866   0E4D             _for26_cond:
1867   0E4D FA FD FF      lea d, [bp + -3] ; $i
1868   0E50 2A            mov b, [d]
1869   0E51             ; START RELATIONAL
1870   0E51 D7            push a
1871   0E52 11            mov a, b
1872   0E53 FA FA FF      lea d, [bp + -6] ; $len
1873   0E56 2A            mov b, [d]
1874   0E57 B0            cmp a, b
1875   0E58 FD 73         slt ; < (signed)
1876   0E5A E4            pop a
1877   0E5B             ; END RELATIONAL
1878   0E5B C0 00 00      cmp b, 0
1879   0E5E C6 60 0F      je _for26_exit
1880   0E61             _for26_block:
1881   0E61             ;; hex_char = hex_string[i]; 
1882   0E61 FA FC FF      lea d, [bp + -4] ; $hex_char
1883   0E64 DA            push d
1884   0E65 FA 05 00      lea d, [bp + 5] ; $hex_string
1885   0E68 FD 2A         mov d, [d]
1886   0E6A D7            push a
1887   0E6B DA            push d
1888   0E6C FA FD FF      lea d, [bp + -3] ; $i
1889   0E6F 2A            mov b, [d]
1890   0E70 E7            pop d
1891   0E71 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1892   0E75 E4            pop a
1893   0E76 32            mov bl, [d]
1894   0E77 A7 00         mov bh, 0
1895   0E79 E7            pop d
1896   0E7A FD 3E         mov [d], bl
1897   0E7C             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1898   0E7C             _if27_cond:
1899   0E7C FA FC FF      lea d, [bp + -4] ; $hex_char
1900   0E7F 32            mov bl, [d]
1901   0E80 A7 00         mov bh, 0
1902   0E82             ; START RELATIONAL
1903   0E82 D7            push a
1904   0E83 11            mov a, b
1905   0E84 26 61 00      mov b, $61
1906   0E87 B0            cmp a, b
1907   0E88 FD 80         sge ; >=
1908   0E8A E4            pop a
1909   0E8B             ; END RELATIONAL
1910   0E8B D7            push a
1911   0E8C 11            mov a, b
1912   0E8D FA FC FF      lea d, [bp + -4] ; $hex_char
1913   0E90 32            mov bl, [d]
1914   0E91 A7 00         mov bh, 0
1915   0E93             ; START RELATIONAL
1916   0E93 D7            push a
1917   0E94 11            mov a, b
1918   0E95 26 66 00      mov b, $66
1919   0E98 B0            cmp a, b
1920   0E99 FD 73         slt ; <= (signed)
1921   0E9B E4            pop a
1922   0E9C             ; END RELATIONAL
1923   0E9C FD A7         sand a, b
1924   0E9E E4            pop a
1925   0E9F C0 00 00      cmp b, 0
1926   0EA2 C6 D3 0E      je _if27_else
1927   0EA5             _if27_true:
1928   0EA5             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1929   0EA5 FA FF FF      lea d, [bp + -1] ; $value
1930   0EA8 DA            push d
1931   0EA9 FA FF FF      lea d, [bp + -1] ; $value
1932   0EAC 2A            mov b, [d]
1933   0EAD             ; START FACTORS
1934   0EAD D7            push a
1935   0EAE 11            mov a, b
1936   0EAF 26 10 00      mov b, $10
1937   0EB2 AC            mul a, b ; *
1938   0EB3 11            mov a, b
1939   0EB4 27            mov b, a
1940   0EB5 E4            pop a
1941   0EB6             ; END FACTORS
1942   0EB6             ; START TERMS
1943   0EB6 D7            push a
1944   0EB7 11            mov a, b
1945   0EB8 FA FC FF      lea d, [bp + -4] ; $hex_char
1946   0EBB 32            mov bl, [d]
1947   0EBC A7 00         mov bh, 0
1948   0EBE             ; START TERMS
1949   0EBE D7            push a
1950   0EBF 11            mov a, b
1951   0EC0 26 61 00      mov b, $61
1952   0EC3 60            sub a, b
1953   0EC4 27            mov b, a
1954   0EC5 11            mov a, b
1955   0EC6 26 0A 00      mov b, $a
1956   0EC9 56            add b, a
1957   0ECA E4            pop a
1958   0ECB             ; END TERMS
1959   0ECB 56            add b, a
1960   0ECC E4            pop a
1961   0ECD             ; END TERMS
1962   0ECD E7            pop d
1963   0ECE FD 43         mov [d], b
1964   0ED0 0A 50 0F      jmp _if27_exit
1965   0ED3             _if27_else:
1966   0ED3             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1967   0ED3             _if28_cond:
1968   0ED3 FA FC FF      lea d, [bp + -4] ; $hex_char
1969   0ED6 32            mov bl, [d]
1970   0ED7 A7 00         mov bh, 0
1971   0ED9             ; START RELATIONAL
1972   0ED9 D7            push a
1973   0EDA 11            mov a, b
1974   0EDB 26 41 00      mov b, $41
1975   0EDE B0            cmp a, b
1976   0EDF FD 80         sge ; >=
1977   0EE1 E4            pop a
1978   0EE2             ; END RELATIONAL
1979   0EE2 D7            push a
1980   0EE3 11            mov a, b
1981   0EE4 FA FC FF      lea d, [bp + -4] ; $hex_char
1982   0EE7 32            mov bl, [d]
1983   0EE8 A7 00         mov bh, 0
1984   0EEA             ; START RELATIONAL
1985   0EEA D7            push a
1986   0EEB 11            mov a, b
1987   0EEC 26 46 00      mov b, $46
1988   0EEF B0            cmp a, b
1989   0EF0 FD 73         slt ; <= (signed)
1990   0EF2 E4            pop a
1991   0EF3             ; END RELATIONAL
1992   0EF3 FD A7         sand a, b
1993   0EF5 E4            pop a
1994   0EF6 C0 00 00      cmp b, 0
1995   0EF9 C6 2A 0F      je _if28_else
1996   0EFC             _if28_true:
1997   0EFC             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1998   0EFC FA FF FF      lea d, [bp + -1] ; $value
1999   0EFF DA            push d
2000   0F00 FA FF FF      lea d, [bp + -1] ; $value
2001   0F03 2A            mov b, [d]
2002   0F04             ; START FACTORS
2003   0F04 D7            push a
2004   0F05 11            mov a, b
2005   0F06 26 10 00      mov b, $10
2006   0F09 AC            mul a, b ; *
2007   0F0A 11            mov a, b
2008   0F0B 27            mov b, a
2009   0F0C E4            pop a
2010   0F0D             ; END FACTORS
2011   0F0D             ; START TERMS
2012   0F0D D7            push a
2013   0F0E 11            mov a, b
2014   0F0F FA FC FF      lea d, [bp + -4] ; $hex_char
2015   0F12 32            mov bl, [d]
2016   0F13 A7 00         mov bh, 0
2017   0F15             ; START TERMS
2018   0F15 D7            push a
2019   0F16 11            mov a, b
2020   0F17 26 41 00      mov b, $41
2021   0F1A 60            sub a, b
2022   0F1B 27            mov b, a
2023   0F1C 11            mov a, b
2024   0F1D 26 0A 00      mov b, $a
2025   0F20 56            add b, a
2026   0F21 E4            pop a
2027   0F22             ; END TERMS
2028   0F22 56            add b, a
2029   0F23 E4            pop a
2030   0F24             ; END TERMS
2031   0F24 E7            pop d
2032   0F25 FD 43         mov [d], b
2033   0F27 0A 50 0F      jmp _if28_exit
2034   0F2A             _if28_else:
2035   0F2A             ;; value = (value * 16) + (hex_char - '0'); 
2036   0F2A FA FF FF      lea d, [bp + -1] ; $value
2037   0F2D DA            push d
2038   0F2E FA FF FF      lea d, [bp + -1] ; $value
2039   0F31 2A            mov b, [d]
2040   0F32             ; START FACTORS
2041   0F32 D7            push a
2042   0F33 11            mov a, b
2043   0F34 26 10 00      mov b, $10
2044   0F37 AC            mul a, b ; *
2045   0F38 11            mov a, b
2046   0F39 27            mov b, a
2047   0F3A E4            pop a
2048   0F3B             ; END FACTORS
2049   0F3B             ; START TERMS
2050   0F3B D7            push a
2051   0F3C 11            mov a, b
2052   0F3D FA FC FF      lea d, [bp + -4] ; $hex_char
2053   0F40 32            mov bl, [d]
2054   0F41 A7 00         mov bh, 0
2055   0F43             ; START TERMS
2056   0F43 D7            push a
2057   0F44 11            mov a, b
2058   0F45 26 30 00      mov b, $30
2059   0F48 60            sub a, b
2060   0F49 27            mov b, a
2061   0F4A E4            pop a
2062   0F4B             ; END TERMS
2063   0F4B 56            add b, a
2064   0F4C E4            pop a
2065   0F4D             ; END TERMS
2066   0F4D E7            pop d
2067   0F4E FD 43         mov [d], b
2068   0F50             _if28_exit:
2069   0F50             _if27_exit:
2070   0F50             _for26_update:
2071   0F50 FA FD FF      lea d, [bp + -3] ; $i
2072   0F53 2A            mov b, [d]
2073   0F54 D8            push b
2074   0F55 FD 77         inc b
2075   0F57 FA FD FF      lea d, [bp + -3] ; $i
2076   0F5A FD 43         mov [d], b
2077   0F5C E5            pop b
2078   0F5D 0A 4D 0E      jmp _for26_cond
2079   0F60             _for26_exit:
2080   0F60             ;; return value; 
2081   0F60 FA FF FF      lea d, [bp + -1] ; $value
2082   0F63 2A            mov b, [d]
2083   0F64 F9            leave
2084   0F65 09            ret
2085   0F66             
2086   0F66             gets:
2087   0F66 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2088   0F69             
2089   0F69             ; --- BEGIN INLINE ASM BLOCK
2090   0F69 FA 05 00      lea d, [bp + 5] ; $s
2091   0F6C 15            mov a, [d]
2092   0F6D 3C            mov d, a
2093   0F6E 07 1D 18      call _gets
2094   0F71             ; --- END INLINE ASM BLOCK
2095   0F71             
2096   0F71             ;; return strlen(s); 
2097   0F71 FA 05 00      lea d, [bp + 5] ; $s
2098   0F74 2A            mov b, [d]
2099   0F75 FD AB         swp b
2100   0F77 D8            push b
2101   0F78 07 01 07      call strlen
2102   0F7B 51 02 00      add sp, 2
2103   0F7E F9            leave
2104   0F7F 09            ret
2105   0F80             
2106   0F80             print_signed:
2107   0F80 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2108   0F83             ;; char digits[5]; 
2109   0F83 52 05 00      sub sp, 5 ; digits
2110   0F86             ;; int i = 0; 
2111   0F86 52 02 00      sub sp, 2 ; i
2112   0F89             ; --- START LOCAL VAR INITIALIZATION
2113   0F89 FA FA FF      lea d, [bp + -6] ; $i
2114   0F8C DA            push d
2115   0F8D 26 00 00      mov b, $0
2116   0F90 E7            pop d
2117   0F91 FD 43         mov [d], b
2118   0F93             ; --- END LOCAL VAR INITIALIZATION
2119   0F93             ;; if (num < 0) { 
2120   0F93             _if29_cond:
2121   0F93 FA 05 00      lea d, [bp + 5] ; $num
2122   0F96 2A            mov b, [d]
2123   0F97             ; START RELATIONAL
2124   0F97 D7            push a
2125   0F98 11            mov a, b
2126   0F99 26 00 00      mov b, $0
2127   0F9C B0            cmp a, b
2128   0F9D FD 73         slt ; < (signed)
2129   0F9F E4            pop a
2130   0FA0             ; END RELATIONAL
2131   0FA0 C0 00 00      cmp b, 0
2132   0FA3 C6 C0 0F      je _if29_else
2133   0FA6             _if29_true:
2134   0FA6             ;; putchar('-'); 
2135   0FA6 26 2D 00      mov b, $2d
2136   0FA9 DD            push bl
2137   0FAA 07 85 16      call putchar
2138   0FAD 51 01 00      add sp, 1
2139   0FB0             ;; num = -num; 
2140   0FB0 FA 05 00      lea d, [bp + 5] ; $num
2141   0FB3 DA            push d
2142   0FB4 FA 05 00      lea d, [bp + 5] ; $num
2143   0FB7 2A            mov b, [d]
2144   0FB8 FD 97         neg b
2145   0FBA E7            pop d
2146   0FBB FD 43         mov [d], b
2147   0FBD 0A E2 0F      jmp _if29_exit
2148   0FC0             _if29_else:
2149   0FC0             ;; if (num == 0) { 
2150   0FC0             _if30_cond:
2151   0FC0 FA 05 00      lea d, [bp + 5] ; $num
2152   0FC3 2A            mov b, [d]
2153   0FC4             ; START RELATIONAL
2154   0FC4 D7            push a
2155   0FC5 11            mov a, b
2156   0FC6 26 00 00      mov b, $0
2157   0FC9 B0            cmp a, b
2158   0FCA FD 71         seq ; ==
2159   0FCC E4            pop a
2160   0FCD             ; END RELATIONAL
2161   0FCD C0 00 00      cmp b, 0
2162   0FD0 C6 E2 0F      je _if30_exit
2163   0FD3             _if30_true:
2164   0FD3             ;; putchar('0'); 
2165   0FD3 26 30 00      mov b, $30
2166   0FD6 DD            push bl
2167   0FD7 07 85 16      call putchar
2168   0FDA 51 01 00      add sp, 1
2169   0FDD             ;; return; 
2170   0FDD F9            leave
2171   0FDE 09            ret
2172   0FDF 0A E2 0F      jmp _if30_exit
2173   0FE2             _if30_exit:
2174   0FE2             _if29_exit:
2175   0FE2             ;; while (num > 0) { 
2176   0FE2             _while31_cond:
2177   0FE2 FA 05 00      lea d, [bp + 5] ; $num
2178   0FE5 2A            mov b, [d]
2179   0FE6             ; START RELATIONAL
2180   0FE6 D7            push a
2181   0FE7 11            mov a, b
2182   0FE8 26 00 00      mov b, $0
2183   0FEB B0            cmp a, b
2184   0FEC FD 7F         sgt ; >
2185   0FEE E4            pop a
2186   0FEF             ; END RELATIONAL
2187   0FEF C0 00 00      cmp b, 0
2188   0FF2 C6 3C 10      je _while31_exit
2189   0FF5             _while31_block:
2190   0FF5             ;; digits[i] = '0' + (num % 10); 
2191   0FF5 FA FC FF      lea d, [bp + -4] ; $digits
2192   0FF8 D7            push a
2193   0FF9 DA            push d
2194   0FFA FA FA FF      lea d, [bp + -6] ; $i
2195   0FFD 2A            mov b, [d]
2196   0FFE E7            pop d
2197   0FFF 5A            add d, b
2198   1000 E4            pop a
2199   1001 DA            push d
2200   1002 26 30 00      mov b, $30
2201   1005             ; START TERMS
2202   1005 D7            push a
2203   1006 11            mov a, b
2204   1007 FA 05 00      lea d, [bp + 5] ; $num
2205   100A 2A            mov b, [d]
2206   100B             ; START FACTORS
2207   100B D7            push a
2208   100C 11            mov a, b
2209   100D 26 0A 00      mov b, $a
2210   1010 AE            div a, b ; 
2211   1011 11            mov a, b
2212   1012 27            mov b, a
2213   1013 E4            pop a
2214   1014             ; END FACTORS
2215   1014 56            add b, a
2216   1015 E4            pop a
2217   1016             ; END TERMS
2218   1016 E7            pop d
2219   1017 FD 3E         mov [d], bl
2220   1019             ;; num = num / 10; 
2221   1019 FA 05 00      lea d, [bp + 5] ; $num
2222   101C DA            push d
2223   101D FA 05 00      lea d, [bp + 5] ; $num
2224   1020 2A            mov b, [d]
2225   1021             ; START FACTORS
2226   1021 D7            push a
2227   1022 11            mov a, b
2228   1023 26 0A 00      mov b, $a
2229   1026 AE            div a, b
2230   1027 27            mov b, a
2231   1028 E4            pop a
2232   1029             ; END FACTORS
2233   1029 E7            pop d
2234   102A FD 43         mov [d], b
2235   102C             ;; i++; 
2236   102C FA FA FF      lea d, [bp + -6] ; $i
2237   102F 2A            mov b, [d]
2238   1030 D8            push b
2239   1031 FD 77         inc b
2240   1033 FA FA FF      lea d, [bp + -6] ; $i
2241   1036 FD 43         mov [d], b
2242   1038 E5            pop b
2243   1039 0A E2 0F      jmp _while31_cond
2244   103C             _while31_exit:
2245   103C             ;; while (i > 0) { 
2246   103C             _while32_cond:
2247   103C FA FA FF      lea d, [bp + -6] ; $i
2248   103F 2A            mov b, [d]
2249   1040             ; START RELATIONAL
2250   1040 D7            push a
2251   1041 11            mov a, b
2252   1042 26 00 00      mov b, $0
2253   1045 B0            cmp a, b
2254   1046 FD 7F         sgt ; >
2255   1048 E4            pop a
2256   1049             ; END RELATIONAL
2257   1049 C0 00 00      cmp b, 0
2258   104C C6 75 10      je _while32_exit
2259   104F             _while32_block:
2260   104F             ;; i--; 
2261   104F FA FA FF      lea d, [bp + -6] ; $i
2262   1052 2A            mov b, [d]
2263   1053 D8            push b
2264   1054 FD 7D         dec b
2265   1056 FA FA FF      lea d, [bp + -6] ; $i
2266   1059 FD 43         mov [d], b
2267   105B E5            pop b
2268   105C             ;; putchar(digits[i]); 
2269   105C FA FC FF      lea d, [bp + -4] ; $digits
2270   105F D7            push a
2271   1060 DA            push d
2272   1061 FA FA FF      lea d, [bp + -6] ; $i
2273   1064 2A            mov b, [d]
2274   1065 E7            pop d
2275   1066 5A            add d, b
2276   1067 E4            pop a
2277   1068 32            mov bl, [d]
2278   1069 A7 00         mov bh, 0
2279   106B DD            push bl
2280   106C 07 85 16      call putchar
2281   106F 51 01 00      add sp, 1
2282   1072 0A 3C 10      jmp _while32_cond
2283   1075             _while32_exit:
2284   1075 F9            leave
2285   1076 09            ret
2286   1077             
2287   1077             print_signed_long:
2288   1077 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2289   107A             ;; char digits[10]; 
2290   107A 52 0A 00      sub sp, 10 ; digits
2291   107D             ;; int i = 0; 
2292   107D 52 02 00      sub sp, 2 ; i
2293   1080             ; --- START LOCAL VAR INITIALIZATION
2294   1080 FA F5 FF      lea d, [bp + -11] ; $i
2295   1083 DA            push d
2296   1084 26 00 00      mov b, $0
2297   1087 E7            pop d
2298   1088 FD 43         mov [d], b
2299   108A             ; --- END LOCAL VAR INITIALIZATION
2300   108A             ;; if (num < 0) { 
2301   108A             _if33_cond:
2302   108A FA 05 00      lea d, [bp + 5] ; $num
2303   108D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2304   1090 FD 39         mov c, b ; And place it into C
2305   1092 2A            mov b, [d] ; Lower Word in B
2306   1093             ; START RELATIONAL
2307   1093 D7            push a
2308   1094 FD D8         push g
2309   1096 11            mov a, b
2310   1097 FD 7A         mov g, c
2311   1099 26 00 00      mov b, $0
2312   109C 38 00 00      mov c, 0
2313   109F FD AF 00 00   cmp32 ga, cb
2313   10A3 00 00 00 00 
2313   10A7 00 00 00 00 
2313   10AB 00 00 00 00 
2313   10AF 00 00 00 00 
2313   10B3 00 00 00 00 
2313   10B7 00 00 00 00 
2313   10BB 00 00 00 00 
2313   10BF 00 00 00 00 
2313   10C3 00 00 00 00 
2313   10C7 00 00 00 00 
2313   10CB 00 00 00 00 
2313   10CF 00 00 00 00 
2313   10D3 00 00 00 00 
2313   10D7 00 00 00 00 
2313   10DB 00 00 00 00 
2313   10DF 00 00 00 00 
2313   10E3 00 00 00 00 
2313   10E7 00 00 00 00 
2313   10EB 00 00 00 00 
2313   10EF 00 00 00 00 
2313   10F3 00 00 00 00 
2313   10F7 00 00 00 00 
2313   10FB 00 00 00 00 
2313   10FF 00 00 00 00 
2313   1103 00 00 00 00 
2313   1107 00 00 00 00 
2313   110B 00 00 00 00 
2313   110F 00 00 00 00 
2313   1113 00 00 00 00 
2313   1117 00 00 00 00 
2313   111B 00 00 00 00 
2313   111F 00 00 00 00 
2313   1123 00 00 00 00 
2313   1127 00 00 00 00 
2313   112B 00 00 00 00 
2313   112F 00 00 00 00 
2313   1133 00 00 00 00 
2313   1137 00 00 00 00 
2313   113B 00 00 00 00 
2313   113F 00 00 00 00 
2313   1143 00 00 00 00 
2313   1147 00 00 00 00 
2313   114B 00 00 00 00 
2313   114F 00 00 00 00 
2313   1153 00 00 00 00 
2313   1157 00 00 00 00 
2313   115B 00 00 00 00 
2313   115F 00 00 00 00 
2313   1163 00 00 00 00 
2313   1167 00 00 00 00 
2313   116B 00 00 00 00 
2313   116F 00 00 00 00 
2313   1173 00 00 00 00 
2313   1177 00 00 00 00 
2313   117B 00 00 00 00 
2313   117F 00 00 00 00 
2313   1183 00 00 00 00 
2313   1187 00 00 00 00 
2313   118B 00 00 00 00 
2313   118F 00 00 00 00 
2313   1193 00 00 00 00 
2313   1197 00 00 00 00 
2313   119B 00 00 00 00 
2313   119F 00 
2314   11A0 FD 73         slt ; <
2315   11A2 FD F1         pop g
2316   11A4 E4            pop a
2317   11A5             ; END RELATIONAL
2318   11A5 C0 00 00      cmp b, 0
2319   11A8 C6 CF 11      je _if33_else
2320   11AB             _if33_true:
2321   11AB             ;; putchar('-'); 
2322   11AB 26 2D 00      mov b, $2d
2323   11AE DD            push bl
2324   11AF 07 85 16      call putchar
2325   11B2 51 01 00      add sp, 1
2326   11B5             ;; num = -num; 
2327   11B5 FA 05 00      lea d, [bp + 5] ; $num
2328   11B8 DA            push d
2329   11B9 FA 05 00      lea d, [bp + 5] ; $num
2330   11BC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2331   11BF FD 39         mov c, b ; And place it into C
2332   11C1 2A            mov b, [d] ; Lower Word in B
2333   11C2 FD 97         neg b
2334   11C4 E7            pop d
2335   11C5 FD 43         mov [d], b
2336   11C7 28            mov b, c
2337   11C8 FD 44 02 00   mov [d + 2], b
2338   11CC 0A FF 12      jmp _if33_exit
2339   11CF             _if33_else:
2340   11CF             ;; if (num == 0) { 
2341   11CF             _if34_cond:
2342   11CF FA 05 00      lea d, [bp + 5] ; $num
2343   11D2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2344   11D5 FD 39         mov c, b ; And place it into C
2345   11D7 2A            mov b, [d] ; Lower Word in B
2346   11D8             ; START RELATIONAL
2347   11D8 D7            push a
2348   11D9 FD D8         push g
2349   11DB 11            mov a, b
2350   11DC FD 7A         mov g, c
2351   11DE 26 00 00      mov b, $0
2352   11E1 38 00 00      mov c, 0
2353   11E4 FD AF 00 00   cmp32 ga, cb
2353   11E8 00 00 00 00 
2353   11EC 00 00 00 00 
2353   11F0 00 00 00 00 
2353   11F4 00 00 00 00 
2353   11F8 00 00 00 00 
2353   11FC 00 00 00 00 
2353   1200 00 00 00 00 
2353   1204 00 00 00 00 
2353   1208 00 00 00 00 
2353   120C 00 00 00 00 
2353   1210 00 00 00 00 
2353   1214 00 00 00 00 
2353   1218 00 00 00 00 
2353   121C 00 00 00 00 
2353   1220 00 00 00 00 
2353   1224 00 00 00 00 
2353   1228 00 00 00 00 
2353   122C 00 00 00 00 
2353   1230 00 00 00 00 
2353   1234 00 00 00 00 
2353   1238 00 00 00 00 
2353   123C 00 00 00 00 
2353   1240 00 00 00 00 
2353   1244 00 00 00 00 
2353   1248 00 00 00 00 
2353   124C 00 00 00 00 
2353   1250 00 00 00 00 
2353   1254 00 00 00 00 
2353   1258 00 00 00 00 
2353   125C 00 00 00 00 
2353   1260 00 00 00 00 
2353   1264 00 00 00 00 
2353   1268 00 00 00 00 
2353   126C 00 00 00 00 
2353   1270 00 00 00 00 
2353   1274 00 00 00 00 
2353   1278 00 00 00 00 
2353   127C 00 00 00 00 
2353   1280 00 00 00 00 
2353   1284 00 00 00 00 
2353   1288 00 00 00 00 
2353   128C 00 00 00 00 
2353   1290 00 00 00 00 
2353   1294 00 00 00 00 
2353   1298 00 00 00 00 
2353   129C 00 00 00 00 
2353   12A0 00 00 00 00 
2353   12A4 00 00 00 00 
2353   12A8 00 00 00 00 
2353   12AC 00 00 00 00 
2353   12B0 00 00 00 00 
2353   12B4 00 00 00 00 
2353   12B8 00 00 00 00 
2353   12BC 00 00 00 00 
2353   12C0 00 00 00 00 
2353   12C4 00 00 00 00 
2353   12C8 00 00 00 00 
2353   12CC 00 00 00 00 
2353   12D0 00 00 00 00 
2353   12D4 00 00 00 00 
2353   12D8 00 00 00 00 
2353   12DC 00 00 00 00 
2353   12E0 00 00 00 00 
2353   12E4 00 
2354   12E5 FD 71         seq ; ==
2355   12E7 FD F1         pop g
2356   12E9 E4            pop a
2357   12EA             ; END RELATIONAL
2358   12EA C0 00 00      cmp b, 0
2359   12ED C6 FF 12      je _if34_exit
2360   12F0             _if34_true:
2361   12F0             ;; putchar('0'); 
2362   12F0 26 30 00      mov b, $30
2363   12F3 DD            push bl
2364   12F4 07 85 16      call putchar
2365   12F7 51 01 00      add sp, 1
2366   12FA             ;; return; 
2367   12FA F9            leave
2368   12FB 09            ret
2369   12FC 0A FF 12      jmp _if34_exit
2370   12FF             _if34_exit:
2371   12FF             _if33_exit:
2372   12FF             ;; while (num > 0) { 
2373   12FF             _while35_cond:
2374   12FF FA 05 00      lea d, [bp + 5] ; $num
2375   1302 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2376   1305 FD 39         mov c, b ; And place it into C
2377   1307 2A            mov b, [d] ; Lower Word in B
2378   1308             ; START RELATIONAL
2379   1308 D7            push a
2380   1309 FD D8         push g
2381   130B 11            mov a, b
2382   130C FD 7A         mov g, c
2383   130E 26 00 00      mov b, $0
2384   1311 38 00 00      mov c, 0
2385   1314 FD 7F         sgt
2386   1316 FD F1         pop g
2387   1318 E4            pop a
2388   1319             ; END RELATIONAL
2389   1319 C0 00 00      cmp b, 0
2390   131C C6 7C 13      je _while35_exit
2391   131F             _while35_block:
2392   131F             ;; digits[i] = '0' + (num % 10); 
2393   131F FA F7 FF      lea d, [bp + -9] ; $digits
2394   1322 D7            push a
2395   1323 DA            push d
2396   1324 FA F5 FF      lea d, [bp + -11] ; $i
2397   1327 2A            mov b, [d]
2398   1328 E7            pop d
2399   1329 5A            add d, b
2400   132A E4            pop a
2401   132B DA            push d
2402   132C 26 30 00      mov b, $30
2403   132F             ; START TERMS
2404   132F D7            push a
2405   1330 11            mov a, b
2406   1331 FA 05 00      lea d, [bp + 5] ; $num
2407   1334 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2408   1337 FD 39         mov c, b ; And place it into C
2409   1339 2A            mov b, [d] ; Lower Word in B
2410   133A             ; START FACTORS
2411   133A D7            push a
2412   133B 11            mov a, b
2413   133C 26 0A 00      mov b, $a
2414   133F AE            div a, b ; 
2415   1340 11            mov a, b
2416   1341 27            mov b, a
2417   1342 E4            pop a
2418   1343             ; END FACTORS
2419   1343 54            add a, b
2420   1344 D7            push a
2421   1345 FD 12         mov a, g
2422   1347 28            mov b, c
2423   1348 5C            adc a, b
2424   1349 39            mov c, a
2425   134A E5            pop b
2426   134B E4            pop a
2427   134C             ; END TERMS
2428   134C E7            pop d
2429   134D FD 3E         mov [d], bl
2430   134F             ;; num = num / 10; 
2431   134F FA 05 00      lea d, [bp + 5] ; $num
2432   1352 DA            push d
2433   1353 FA 05 00      lea d, [bp + 5] ; $num
2434   1356 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2435   1359 FD 39         mov c, b ; And place it into C
2436   135B 2A            mov b, [d] ; Lower Word in B
2437   135C             ; START FACTORS
2438   135C D7            push a
2439   135D 11            mov a, b
2440   135E 26 0A 00      mov b, $a
2441   1361 AE            div a, b
2442   1362 27            mov b, a
2443   1363 E4            pop a
2444   1364             ; END FACTORS
2445   1364 E7            pop d
2446   1365 FD 43         mov [d], b
2447   1367 28            mov b, c
2448   1368 FD 44 02 00   mov [d + 2], b
2449   136C             ;; i++; 
2450   136C FA F5 FF      lea d, [bp + -11] ; $i
2451   136F 2A            mov b, [d]
2452   1370 D8            push b
2453   1371 FD 77         inc b
2454   1373 FA F5 FF      lea d, [bp + -11] ; $i
2455   1376 FD 43         mov [d], b
2456   1378 E5            pop b
2457   1379 0A FF 12      jmp _while35_cond
2458   137C             _while35_exit:
2459   137C             ;; while (i > 0) { 
2460   137C             _while36_cond:
2461   137C FA F5 FF      lea d, [bp + -11] ; $i
2462   137F 2A            mov b, [d]
2463   1380             ; START RELATIONAL
2464   1380 D7            push a
2465   1381 11            mov a, b
2466   1382 26 00 00      mov b, $0
2467   1385 B0            cmp a, b
2468   1386 FD 7F         sgt ; >
2469   1388 E4            pop a
2470   1389             ; END RELATIONAL
2471   1389 C0 00 00      cmp b, 0
2472   138C C6 B5 13      je _while36_exit
2473   138F             _while36_block:
2474   138F             ;; i--; 
2475   138F FA F5 FF      lea d, [bp + -11] ; $i
2476   1392 2A            mov b, [d]
2477   1393 D8            push b
2478   1394 FD 7D         dec b
2479   1396 FA F5 FF      lea d, [bp + -11] ; $i
2480   1399 FD 43         mov [d], b
2481   139B E5            pop b
2482   139C             ;; putchar(digits[i]); 
2483   139C FA F7 FF      lea d, [bp + -9] ; $digits
2484   139F D7            push a
2485   13A0 DA            push d
2486   13A1 FA F5 FF      lea d, [bp + -11] ; $i
2487   13A4 2A            mov b, [d]
2488   13A5 E7            pop d
2489   13A6 5A            add d, b
2490   13A7 E4            pop a
2491   13A8 32            mov bl, [d]
2492   13A9 A7 00         mov bh, 0
2493   13AB DD            push bl
2494   13AC 07 85 16      call putchar
2495   13AF 51 01 00      add sp, 1
2496   13B2 0A 7C 13      jmp _while36_cond
2497   13B5             _while36_exit:
2498   13B5 F9            leave
2499   13B6 09            ret
2500   13B7             
2501   13B7             print_unsigned_long:
2502   13B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2503   13BA             ;; char digits[10]; 
2504   13BA 52 0A 00      sub sp, 10 ; digits
2505   13BD             ;; int i; 
2506   13BD 52 02 00      sub sp, 2 ; i
2507   13C0             ;; i = 0; 
2508   13C0 FA F5 FF      lea d, [bp + -11] ; $i
2509   13C3 DA            push d
2510   13C4 26 00 00      mov b, $0
2511   13C7 E7            pop d
2512   13C8 FD 43         mov [d], b
2513   13CA             ;; if(num == 0){ 
2514   13CA             _if37_cond:
2515   13CA FA 05 00      lea d, [bp + 5] ; $num
2516   13CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2517   13D0 FD 39         mov c, b ; And place it into C
2518   13D2 2A            mov b, [d] ; Lower Word in B
2519   13D3             ; START RELATIONAL
2520   13D3 D7            push a
2521   13D4 FD D8         push g
2522   13D6 11            mov a, b
2523   13D7 FD 7A         mov g, c
2524   13D9 26 00 00      mov b, $0
2525   13DC 38 00 00      mov c, 0
2526   13DF FD AF 00 00   cmp32 ga, cb
2526   13E3 00 00 00 00 
2526   13E7 00 00 00 00 
2526   13EB 00 00 00 00 
2526   13EF 00 00 00 00 
2526   13F3 00 00 00 00 
2526   13F7 00 00 00 00 
2526   13FB 00 00 00 00 
2526   13FF 00 00 00 00 
2526   1403 00 00 00 00 
2526   1407 00 00 00 00 
2526   140B 00 00 00 00 
2526   140F 00 00 00 00 
2526   1413 00 00 00 00 
2526   1417 00 00 00 00 
2526   141B 00 00 00 00 
2526   141F 00 00 00 00 
2526   1423 00 00 00 00 
2526   1427 00 00 00 00 
2526   142B 00 00 00 00 
2526   142F 00 00 00 00 
2526   1433 00 00 00 00 
2526   1437 00 00 00 00 
2526   143B 00 00 00 00 
2526   143F 00 00 00 00 
2526   1443 00 00 00 00 
2526   1447 00 00 00 00 
2526   144B 00 00 00 00 
2526   144F 00 00 00 00 
2526   1453 00 00 00 00 
2526   1457 00 00 00 00 
2526   145B 00 00 00 00 
2526   145F 00 00 00 00 
2526   1463 00 00 00 00 
2526   1467 00 00 00 00 
2526   146B 00 00 00 00 
2526   146F 00 00 00 00 
2526   1473 00 00 00 00 
2526   1477 00 00 00 00 
2526   147B 00 00 00 00 
2526   147F 00 00 00 00 
2526   1483 00 00 00 00 
2526   1487 00 00 00 00 
2526   148B 00 00 00 00 
2526   148F 00 00 00 00 
2526   1493 00 00 00 00 
2526   1497 00 00 00 00 
2526   149B 00 00 00 00 
2526   149F 00 00 00 00 
2526   14A3 00 00 00 00 
2526   14A7 00 00 00 00 
2526   14AB 00 00 00 00 
2526   14AF 00 00 00 00 
2526   14B3 00 00 00 00 
2526   14B7 00 00 00 00 
2526   14BB 00 00 00 00 
2526   14BF 00 00 00 00 
2526   14C3 00 00 00 00 
2526   14C7 00 00 00 00 
2526   14CB 00 00 00 00 
2526   14CF 00 00 00 00 
2526   14D3 00 00 00 00 
2526   14D7 00 00 00 00 
2526   14DB 00 00 00 00 
2526   14DF 00 
2527   14E0 FD 71         seq ; ==
2528   14E2 FD F1         pop g
2529   14E4 E4            pop a
2530   14E5             ; END RELATIONAL
2531   14E5 C0 00 00      cmp b, 0
2532   14E8 C6 FA 14      je _if37_exit
2533   14EB             _if37_true:
2534   14EB             ;; putchar('0'); 
2535   14EB 26 30 00      mov b, $30
2536   14EE DD            push bl
2537   14EF 07 85 16      call putchar
2538   14F2 51 01 00      add sp, 1
2539   14F5             ;; return; 
2540   14F5 F9            leave
2541   14F6 09            ret
2542   14F7 0A FA 14      jmp _if37_exit
2543   14FA             _if37_exit:
2544   14FA             ;; while (num > 0) { 
2545   14FA             _while38_cond:
2546   14FA FA 05 00      lea d, [bp + 5] ; $num
2547   14FD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2548   1500 FD 39         mov c, b ; And place it into C
2549   1502 2A            mov b, [d] ; Lower Word in B
2550   1503             ; START RELATIONAL
2551   1503 D7            push a
2552   1504 FD D8         push g
2553   1506 11            mov a, b
2554   1507 FD 7A         mov g, c
2555   1509 26 00 00      mov b, $0
2556   150C 38 00 00      mov c, 0
2557   150F FD 81         sgu
2558   1511 FD F1         pop g
2559   1513 E4            pop a
2560   1514             ; END RELATIONAL
2561   1514 C0 00 00      cmp b, 0
2562   1517 C6 77 15      je _while38_exit
2563   151A             _while38_block:
2564   151A             ;; digits[i] = '0' + (num % 10); 
2565   151A FA F7 FF      lea d, [bp + -9] ; $digits
2566   151D D7            push a
2567   151E DA            push d
2568   151F FA F5 FF      lea d, [bp + -11] ; $i
2569   1522 2A            mov b, [d]
2570   1523 E7            pop d
2571   1524 5A            add d, b
2572   1525 E4            pop a
2573   1526 DA            push d
2574   1527 26 30 00      mov b, $30
2575   152A             ; START TERMS
2576   152A D7            push a
2577   152B 11            mov a, b
2578   152C FA 05 00      lea d, [bp + 5] ; $num
2579   152F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2580   1532 FD 39         mov c, b ; And place it into C
2581   1534 2A            mov b, [d] ; Lower Word in B
2582   1535             ; START FACTORS
2583   1535 D7            push a
2584   1536 11            mov a, b
2585   1537 26 0A 00      mov b, $a
2586   153A AE            div a, b ; 
2587   153B 11            mov a, b
2588   153C 27            mov b, a
2589   153D E4            pop a
2590   153E             ; END FACTORS
2591   153E 54            add a, b
2592   153F D7            push a
2593   1540 FD 12         mov a, g
2594   1542 28            mov b, c
2595   1543 5C            adc a, b
2596   1544 39            mov c, a
2597   1545 E5            pop b
2598   1546 E4            pop a
2599   1547             ; END TERMS
2600   1547 E7            pop d
2601   1548 FD 3E         mov [d], bl
2602   154A             ;; num = num / 10; 
2603   154A FA 05 00      lea d, [bp + 5] ; $num
2604   154D DA            push d
2605   154E FA 05 00      lea d, [bp + 5] ; $num
2606   1551 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2607   1554 FD 39         mov c, b ; And place it into C
2608   1556 2A            mov b, [d] ; Lower Word in B
2609   1557             ; START FACTORS
2610   1557 D7            push a
2611   1558 11            mov a, b
2612   1559 26 0A 00      mov b, $a
2613   155C AE            div a, b
2614   155D 27            mov b, a
2615   155E E4            pop a
2616   155F             ; END FACTORS
2617   155F E7            pop d
2618   1560 FD 43         mov [d], b
2619   1562 28            mov b, c
2620   1563 FD 44 02 00   mov [d + 2], b
2621   1567             ;; i++; 
2622   1567 FA F5 FF      lea d, [bp + -11] ; $i
2623   156A 2A            mov b, [d]
2624   156B D8            push b
2625   156C FD 77         inc b
2626   156E FA F5 FF      lea d, [bp + -11] ; $i
2627   1571 FD 43         mov [d], b
2628   1573 E5            pop b
2629   1574 0A FA 14      jmp _while38_cond
2630   1577             _while38_exit:
2631   1577             ;; while (i > 0) { 
2632   1577             _while39_cond:
2633   1577 FA F5 FF      lea d, [bp + -11] ; $i
2634   157A 2A            mov b, [d]
2635   157B             ; START RELATIONAL
2636   157B D7            push a
2637   157C 11            mov a, b
2638   157D 26 00 00      mov b, $0
2639   1580 B0            cmp a, b
2640   1581 FD 7F         sgt ; >
2641   1583 E4            pop a
2642   1584             ; END RELATIONAL
2643   1584 C0 00 00      cmp b, 0
2644   1587 C6 B0 15      je _while39_exit
2645   158A             _while39_block:
2646   158A             ;; i--; 
2647   158A FA F5 FF      lea d, [bp + -11] ; $i
2648   158D 2A            mov b, [d]
2649   158E D8            push b
2650   158F FD 7D         dec b
2651   1591 FA F5 FF      lea d, [bp + -11] ; $i
2652   1594 FD 43         mov [d], b
2653   1596 E5            pop b
2654   1597             ;; putchar(digits[i]); 
2655   1597 FA F7 FF      lea d, [bp + -9] ; $digits
2656   159A D7            push a
2657   159B DA            push d
2658   159C FA F5 FF      lea d, [bp + -11] ; $i
2659   159F 2A            mov b, [d]
2660   15A0 E7            pop d
2661   15A1 5A            add d, b
2662   15A2 E4            pop a
2663   15A3 32            mov bl, [d]
2664   15A4 A7 00         mov bh, 0
2665   15A6 DD            push bl
2666   15A7 07 85 16      call putchar
2667   15AA 51 01 00      add sp, 1
2668   15AD 0A 77 15      jmp _while39_cond
2669   15B0             _while39_exit:
2670   15B0 F9            leave
2671   15B1 09            ret
2672   15B2             
2673   15B2             print_unsigned:
2674   15B2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2675   15B5             ;; char digits[5]; 
2676   15B5 52 05 00      sub sp, 5 ; digits
2677   15B8             ;; int i; 
2678   15B8 52 02 00      sub sp, 2 ; i
2679   15BB             ;; i = 0; 
2680   15BB FA FA FF      lea d, [bp + -6] ; $i
2681   15BE DA            push d
2682   15BF 26 00 00      mov b, $0
2683   15C2 E7            pop d
2684   15C3 FD 43         mov [d], b
2685   15C5             ;; if(num == 0){ 
2686   15C5             _if40_cond:
2687   15C5 FA 05 00      lea d, [bp + 5] ; $num
2688   15C8 2A            mov b, [d]
2689   15C9             ; START RELATIONAL
2690   15C9 D7            push a
2691   15CA 11            mov a, b
2692   15CB 26 00 00      mov b, $0
2693   15CE B0            cmp a, b
2694   15CF FD 71         seq ; ==
2695   15D1 E4            pop a
2696   15D2             ; END RELATIONAL
2697   15D2 C0 00 00      cmp b, 0
2698   15D5 C6 E7 15      je _if40_exit
2699   15D8             _if40_true:
2700   15D8             ;; putchar('0'); 
2701   15D8 26 30 00      mov b, $30
2702   15DB DD            push bl
2703   15DC 07 85 16      call putchar
2704   15DF 51 01 00      add sp, 1
2705   15E2             ;; return; 
2706   15E2 F9            leave
2707   15E3 09            ret
2708   15E4 0A E7 15      jmp _if40_exit
2709   15E7             _if40_exit:
2710   15E7             ;; while (num > 0) { 
2711   15E7             _while41_cond:
2712   15E7 FA 05 00      lea d, [bp + 5] ; $num
2713   15EA 2A            mov b, [d]
2714   15EB             ; START RELATIONAL
2715   15EB D7            push a
2716   15EC 11            mov a, b
2717   15ED 26 00 00      mov b, $0
2718   15F0 B0            cmp a, b
2719   15F1 FD 81         sgu ; > (unsigned)
2720   15F3 E4            pop a
2721   15F4             ; END RELATIONAL
2722   15F4 C0 00 00      cmp b, 0
2723   15F7 C6 41 16      je _while41_exit
2724   15FA             _while41_block:
2725   15FA             ;; digits[i] = '0' + (num % 10); 
2726   15FA FA FC FF      lea d, [bp + -4] ; $digits
2727   15FD D7            push a
2728   15FE DA            push d
2729   15FF FA FA FF      lea d, [bp + -6] ; $i
2730   1602 2A            mov b, [d]
2731   1603 E7            pop d
2732   1604 5A            add d, b
2733   1605 E4            pop a
2734   1606 DA            push d
2735   1607 26 30 00      mov b, $30
2736   160A             ; START TERMS
2737   160A D7            push a
2738   160B 11            mov a, b
2739   160C FA 05 00      lea d, [bp + 5] ; $num
2740   160F 2A            mov b, [d]
2741   1610             ; START FACTORS
2742   1610 D7            push a
2743   1611 11            mov a, b
2744   1612 26 0A 00      mov b, $a
2745   1615 AE            div a, b ; 
2746   1616 11            mov a, b
2747   1617 27            mov b, a
2748   1618 E4            pop a
2749   1619             ; END FACTORS
2750   1619 56            add b, a
2751   161A E4            pop a
2752   161B             ; END TERMS
2753   161B E7            pop d
2754   161C FD 3E         mov [d], bl
2755   161E             ;; num = num / 10; 
2756   161E FA 05 00      lea d, [bp + 5] ; $num
2757   1621 DA            push d
2758   1622 FA 05 00      lea d, [bp + 5] ; $num
2759   1625 2A            mov b, [d]
2760   1626             ; START FACTORS
2761   1626 D7            push a
2762   1627 11            mov a, b
2763   1628 26 0A 00      mov b, $a
2764   162B AE            div a, b
2765   162C 27            mov b, a
2766   162D E4            pop a
2767   162E             ; END FACTORS
2768   162E E7            pop d
2769   162F FD 43         mov [d], b
2770   1631             ;; i++; 
2771   1631 FA FA FF      lea d, [bp + -6] ; $i
2772   1634 2A            mov b, [d]
2773   1635 D8            push b
2774   1636 FD 77         inc b
2775   1638 FA FA FF      lea d, [bp + -6] ; $i
2776   163B FD 43         mov [d], b
2777   163D E5            pop b
2778   163E 0A E7 15      jmp _while41_cond
2779   1641             _while41_exit:
2780   1641             ;; while (i > 0) { 
2781   1641             _while42_cond:
2782   1641 FA FA FF      lea d, [bp + -6] ; $i
2783   1644 2A            mov b, [d]
2784   1645             ; START RELATIONAL
2785   1645 D7            push a
2786   1646 11            mov a, b
2787   1647 26 00 00      mov b, $0
2788   164A B0            cmp a, b
2789   164B FD 7F         sgt ; >
2790   164D E4            pop a
2791   164E             ; END RELATIONAL
2792   164E C0 00 00      cmp b, 0
2793   1651 C6 7A 16      je _while42_exit
2794   1654             _while42_block:
2795   1654             ;; i--; 
2796   1654 FA FA FF      lea d, [bp + -6] ; $i
2797   1657 2A            mov b, [d]
2798   1658 D8            push b
2799   1659 FD 7D         dec b
2800   165B FA FA FF      lea d, [bp + -6] ; $i
2801   165E FD 43         mov [d], b
2802   1660 E5            pop b
2803   1661             ;; putchar(digits[i]); 
2804   1661 FA FC FF      lea d, [bp + -4] ; $digits
2805   1664 D7            push a
2806   1665 DA            push d
2807   1666 FA FA FF      lea d, [bp + -6] ; $i
2808   1669 2A            mov b, [d]
2809   166A E7            pop d
2810   166B 5A            add d, b
2811   166C E4            pop a
2812   166D 32            mov bl, [d]
2813   166E A7 00         mov bh, 0
2814   1670 DD            push bl
2815   1671 07 85 16      call putchar
2816   1674 51 01 00      add sp, 1
2817   1677 0A 41 16      jmp _while42_cond
2818   167A             _while42_exit:
2819   167A F9            leave
2820   167B 09            ret
2821   167C             
2822   167C             date:
2823   167C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2824   167F             
2825   167F             ; --- BEGIN INLINE ASM BLOCK
2826   167F 19 00         mov al, 0 
2827   1681 05 07         syscall sys_datetime
2828   1683             ; --- END INLINE ASM BLOCK
2829   1683             
2830   1683 F9            leave
2831   1684 09            ret
2832   1685             
2833   1685             putchar:
2834   1685 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2835   1688             
2836   1688             ; --- BEGIN INLINE ASM BLOCK
2837   1688 FA 05 00      lea d, [bp + 5] ; $c
2838   168B 1E            mov al, [d]
2839   168C 23            mov ah, al
2840   168D 07 16 18      call _putchar
2841   1690             ; --- END INLINE ASM BLOCK
2842   1690             
2843   1690 F9            leave
2844   1691 09            ret
2845   1692             
2846   1692             getchar:
2847   1692 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2848   1695             ;; char c; 
2849   1695 52 01 00      sub sp, 1 ; c
2850   1698             
2851   1698             ; --- BEGIN INLINE ASM BLOCK
2852   1698 07 0F 18      call getch
2853   169B 1A            mov al, ah
2854   169C FA 00 00      lea d, [bp + 0] ; $c
2855   169F 3E            mov [d], al
2856   16A0             ; --- END INLINE ASM BLOCK
2857   16A0             
2858   16A0             ;; return c; 
2859   16A0 FA 00 00      lea d, [bp + 0] ; $c
2860   16A3 32            mov bl, [d]
2861   16A4 A7 00         mov bh, 0
2862   16A6 F9            leave
2863   16A7 09            ret
2864   16A8             
2865   16A8             scann:
2866   16A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2867   16AB             ;; int m; 
2868   16AB 52 02 00      sub sp, 2 ; m
2869   16AE             
2870   16AE             ; --- BEGIN INLINE ASM BLOCK
2871   16AE 07 5A 1A      call scan_u16d
2872   16B1 FA FF FF      lea d, [bp + -1] ; $m
2873   16B4 43            mov [d], a
2874   16B5             ; --- END INLINE ASM BLOCK
2875   16B5             
2876   16B5             ;; return m; 
2877   16B5 FA FF FF      lea d, [bp + -1] ; $m
2878   16B8 2A            mov b, [d]
2879   16B9 F9            leave
2880   16BA 09            ret
2881   16BB             
2882   16BB             puts:
2883   16BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2884   16BE             
2885   16BE             ; --- BEGIN INLINE ASM BLOCK
2886   16BE FA 05 00      lea d, [bp + 5] ; $s
2887   16C1 15            mov a, [d]
2888   16C2 3C            mov d, a
2889   16C3 07 60 19      call _puts
2890   16C6 10 00 0A      mov a, $0A00
2891   16C9 05 03         syscall sys_io
2892   16CB             ; --- END INLINE ASM BLOCK
2893   16CB             
2894   16CB F9            leave
2895   16CC 09            ret
2896   16CD             
2897   16CD             print:
2898   16CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2899   16D0             
2900   16D0             ; --- BEGIN INLINE ASM BLOCK
2901   16D0 FA 05 00      lea d, [bp + 5] ; $s
2902   16D3 FD 2A         mov d, [d]
2903   16D5 07 60 19      call _puts
2904   16D8             ; --- END INLINE ASM BLOCK
2905   16D8             
2906   16D8 F9            leave
2907   16D9 09            ret
2908   16DA             
2909   16DA             getparam:
2910   16DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2911   16DD             ;; char data; 
2912   16DD 52 01 00      sub sp, 1 ; data
2913   16E0             
2914   16E0             ; --- BEGIN INLINE ASM BLOCK
2915   16E0 19 04         mov al, 4
2916   16E2 FA 05 00      lea d, [bp + 5] ; $address
2917   16E5 FD 2A         mov d, [d]
2918   16E7 05 0C         syscall sys_system
2919   16E9 FA 00 00      lea d, [bp + 0] ; $data
2920   16EC FD 3E         mov [d], bl
2921   16EE             ; --- END INLINE ASM BLOCK
2922   16EE             
2923   16EE             ;; return data; 
2924   16EE FA 00 00      lea d, [bp + 0] ; $data
2925   16F1 32            mov bl, [d]
2926   16F2 A7 00         mov bh, 0
2927   16F4 F9            leave
2928   16F5 09            ret
2929   16F6             
2930   16F6             clear:
2931   16F6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2932   16F9             ;; print("\033[2J\033[H"); 
2933   16F9 26 4E 2B      mov b, _s3 ; "\033[2J\033[H"
2934   16FC FD AB         swp b
2935   16FE D8            push b
2936   16FF 07 CD 16      call print
2937   1702 51 02 00      add sp, 2
2938   1705 F9            leave
2939   1706 09            ret
2940   1707             
2941   1707             abs:
2942   1707 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2943   170A             ;; return i < 0 ? -i : i; 
2944   170A             _ternary43_cond:
2945   170A FA 05 00      lea d, [bp + 5] ; $i
2946   170D 2A            mov b, [d]
2947   170E             ; START RELATIONAL
2948   170E D7            push a
2949   170F 11            mov a, b
2950   1710 26 00 00      mov b, $0
2951   1713 B0            cmp a, b
2952   1714 FD 73         slt ; < (signed)
2953   1716 E4            pop a
2954   1717             ; END RELATIONAL
2955   1717 C0 00 00      cmp b, 0
2956   171A C6 26 17      je _ternary43_false
2957   171D             _ternary43_true:
2958   171D FA 05 00      lea d, [bp + 5] ; $i
2959   1720 2A            mov b, [d]
2960   1721 FD 97         neg b
2961   1723 0A 2A 17      jmp _ternary43_exit
2962   1726             _ternary43_false:
2963   1726 FA 05 00      lea d, [bp + 5] ; $i
2964   1729 2A            mov b, [d]
2965   172A             _ternary43_exit:
2966   172A F9            leave
2967   172B 09            ret
2968   172C             
2969   172C             include_stdio_asm:
2970   172C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2971   172F             
2972   172F             ; --- BEGIN INLINE ASM BLOCK
2973   172F             .include "lib/asm/stdio.asm"
0001+  172F             ;-----------------------------------------------------------------------------
0002+  172F             ; stdio.s
0003+  172F             ;-----------------------------------------------------------------------------
0004+  172F             .include "lib/asm/string.asm"
0001++ 172F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 172F             ; string.s
0003++ 172F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 172F             
0005++ 172F             
0006++ 172F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 172F             ; _strrev
0008++ 172F             ; reverse a string
0009++ 172F             ; D = string address
0010++ 172F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 172F             ; 01234
0012++ 172F             _strrev:
0013++ 172F 4B          	pusha
0014++ 1730 07 76 17    	call _strlen	; length in C
0015++ 1733 12          	mov a, c
0016++ 1734 AF 01 00    	cmp a, 1
0017++ 1737 D0 51 17    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 173A 7D          	dec a
0019++ 173B FD 4E       	mov si, d	; beginning of string
0020++ 173D FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 173F 59          	add d, a	; end of string
0022++ 1740 12          	mov a, c
0023++ 1741 FD 9B       	shr a		; divide by 2
0024++ 1743 39          	mov c, a	; C now counts the steps
0025++ 1744             _strrev_L0:
0026++ 1744 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1745 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1746 3E          	mov [d], al	; store left char into right side
0029++ 1747 1B          	mov al, bl
0030++ 1748 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1749 7E          	dec c
0032++ 174A 7F          	dec d
0033++ 174B C2 00 00    	cmp c, 0
0034++ 174E C7 44 17    	jne _strrev_L0
0035++ 1751             _strrev_end:
0036++ 1751 4C          	popa
0037++ 1752 09          	ret
0038++ 1753             	
0039++ 1753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1753             ; _strchr
0041++ 1753             ; search string in D for char in AL
0042++ 1753             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1753             _strchr:
0044++ 1753             _strchr_L0:
0045++ 1753 32          	mov bl, [d]
0046++ 1754 C1 00       	cmp bl, 0
0047++ 1756 C6 61 17    	je _strchr_end
0048++ 1759 BA          	cmp al, bl
0049++ 175A C6 61 17    	je _strchr_end
0050++ 175D 79          	inc d
0051++ 175E 0A 53 17    	jmp _strchr_L0
0052++ 1761             _strchr_end:
0053++ 1761 1B          	mov al, bl
0054++ 1762 09          	ret
0055++ 1763             
0056++ 1763             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1763             ; _strstr
0058++ 1763             ; find sub-string
0059++ 1763             ; str1 in SI
0060++ 1763             ; str2 in DI
0061++ 1763             ; SI points to end of source string
0062++ 1763             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1763             _strstr:
0064++ 1763 DB          	push al
0065++ 1764 DA          	push d
0066++ 1765 E3          	push di
0067++ 1766             _strstr_loop:
0068++ 1766 F3          	cmpsb					; compare a byte of the strings
0069++ 1767 C7 72 17    	jne _strstr_ret
0070++ 176A FC 00 00    	lea d, [di + 0]
0071++ 176D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 176F C7 66 17    	jne _strstr_loop				; equal chars but not at end
0073++ 1772             _strstr_ret:
0074++ 1772 F0          	pop di
0075++ 1773 E7          	pop d
0076++ 1774 E8          	pop al
0077++ 1775 09          	ret
0078++ 1776             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1776             ; length of null terminated string
0080++ 1776             ; result in C
0081++ 1776             ; pointer in D
0082++ 1776             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1776             _strlen:
0084++ 1776 DA          	push d
0085++ 1777 38 00 00    	mov c, 0
0086++ 177A             _strlen_L1:
0087++ 177A BD 00       	cmp byte [d], 0
0088++ 177C C6 84 17    	je _strlen_ret
0089++ 177F 79          	inc d
0090++ 1780 78          	inc c
0091++ 1781 0A 7A 17    	jmp _strlen_L1
0092++ 1784             _strlen_ret:
0093++ 1784 E7          	pop d
0094++ 1785 09          	ret
0095++ 1786             
0096++ 1786             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1786             ; STRCMP
0098++ 1786             ; compare two strings
0099++ 1786             ; str1 in SI
0100++ 1786             ; str2 in DI
0101++ 1786             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1786             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1786             _strcmp:
0104++ 1786 DB          	push al
0105++ 1787 DA          	push d
0106++ 1788 E3          	push di
0107++ 1789 E2          	push si
0108++ 178A             _strcmp_loop:
0109++ 178A F3          	cmpsb					; compare a byte of the strings
0110++ 178B C7 96 17    	jne _strcmp_ret
0111++ 178E FB FF FF    	lea d, [si +- 1]
0112++ 1791 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1793 C7 8A 17    	jne _strcmp_loop				; equal chars but not at end
0114++ 1796             _strcmp_ret:
0115++ 1796 EF          	pop si
0116++ 1797 F0          	pop di
0117++ 1798 E7          	pop d
0118++ 1799 E8          	pop al
0119++ 179A 09          	ret
0120++ 179B             
0121++ 179B             
0122++ 179B             ; STRCPY
0123++ 179B             ; copy null terminated string from SI to DI
0124++ 179B             ; source in SI
0125++ 179B             ; destination in DI
0126++ 179B             _strcpy:
0127++ 179B E2          	push si
0128++ 179C E3          	push di
0129++ 179D DB          	push al
0130++ 179E             _strcpy_L1:
0131++ 179E F6          	lodsb
0132++ 179F F7          	stosb
0133++ 17A0 B9 00       	cmp al, 0
0134++ 17A2 C7 9E 17    	jne _strcpy_L1
0135++ 17A5             _strcpy_end:
0136++ 17A5 E8          	pop al
0137++ 17A6 F0          	pop di
0138++ 17A7 EF          	pop si
0139++ 17A8 09          	ret
0140++ 17A9             
0141++ 17A9             ; STRCAT
0142++ 17A9             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 17A9             ; source in SI
0144++ 17A9             ; destination in DI
0145++ 17A9             _strcat:
0146++ 17A9 E2          	push si
0147++ 17AA E3          	push di
0148++ 17AB D7          	push a
0149++ 17AC DA          	push d
0150++ 17AD 50          	mov a, di
0151++ 17AE 3C          	mov d, a
0152++ 17AF             _strcat_goto_end_L1:
0153++ 17AF BD 00       	cmp byte[d], 0
0154++ 17B1 C6 B8 17    	je _strcat_start
0155++ 17B4 79          	inc d
0156++ 17B5 0A AF 17    	jmp _strcat_goto_end_L1
0157++ 17B8             _strcat_start:
0158++ 17B8 FD 50       	mov di, d
0159++ 17BA             _strcat_L1:
0160++ 17BA F6          	lodsb
0161++ 17BB F7          	stosb
0162++ 17BC B9 00       	cmp al, 0
0163++ 17BE C7 BA 17    	jne _strcat_L1
0164++ 17C1             _strcat_end:
0165++ 17C1 E7          	pop d
0166++ 17C2 E4          	pop a
0167++ 17C3 F0          	pop di
0168++ 17C4 EF          	pop si
0169++ 17C5 09          	ret
0170++ 17C6             
0171++ 17C6             
0005+  17C6             
0006+  17C6             ;-----------------------------------------------------------------------------
0007+  17C6             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  17C6             ; ASCII in BL
0009+  17C6             ; result in AL
0010+  17C6             ; ascii for F = 0100 0110
0011+  17C6             ; ascii for 9 = 0011 1001
0012+  17C6             ;-----------------------------------------------------------------------------
0013+  17C6             hex_ascii_encode:
0014+  17C6 1B            mov al, bl
0015+  17C7 93 40         test al, $40        ; test if letter or number
0016+  17C9 C7 CF 17      jnz hex_letter
0017+  17CC 87 0F         and al, $0F        ; get number
0018+  17CE 09            ret
0019+  17CF             hex_letter:
0020+  17CF 87 0F         and al, $0F        ; get letter
0021+  17D1 6A 09         add al, 9
0022+  17D3 09            ret
0023+  17D4             
0024+  17D4             ;-----------------------------------------------------------------------------
0025+  17D4             ; ATOI
0026+  17D4             ; 2 letter hex string in B
0027+  17D4             ; 8bit integer returned in AL
0028+  17D4             ;-----------------------------------------------------------------------------
0029+  17D4             _atoi:
0030+  17D4 D8            push b
0031+  17D5 07 C6 17      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  17D8 30            mov bl, bh
0033+  17D9 DB            push al          ; save a
0034+  17DA 07 C6 17      call hex_ascii_encode
0035+  17DD EA            pop bl  
0036+  17DE FD 9E 04      shl al, 4
0037+  17E1 8C            or al, bl
0038+  17E2 E5            pop b
0039+  17E3 09            ret  
0040+  17E4             
0041+  17E4             
0042+  17E4             ;-----------------------------------------------------------------------------
0043+  17E4             ; ITOA
0044+  17E4             ; 8bit value in BL
0045+  17E4             ; 2 byte ASCII result in A
0046+  17E4             ;-----------------------------------------------------------------------------
0047+  17E4             _itoa:
0048+  17E4 DA            push d
0049+  17E5 D8            push b
0050+  17E6 A7 00         mov bh, 0
0051+  17E8 FD A4 04      shr bl, 4  
0052+  17EB 74            mov d, b
0053+  17EC 1F 94 1A      mov al, [d + s_hex_digits]
0054+  17EF 23            mov ah, al
0055+  17F0               
0056+  17F0 E5            pop b
0057+  17F1 D8            push b
0058+  17F2 A7 00         mov bh, 0
0059+  17F4 FD 87 0F      and bl, $0F
0060+  17F7 74            mov d, b
0061+  17F8 1F 94 1A      mov al, [d + s_hex_digits]
0062+  17FB E5            pop b
0063+  17FC E7            pop d
0064+  17FD 09            ret
0065+  17FE             
0066+  17FE             ;-----------------------------------------------------------------------------
0067+  17FE             ; HEX STRING TO BINARY
0068+  17FE             ; di = destination address
0069+  17FE             ; si = source
0070+  17FE             ;-----------------------------------------------------------------------------
0071+  17FE             _hex_to_int:
0072+  17FE             _hex_to_int_L1:
0073+  17FE F6            lodsb          ; load from [SI] to AL
0074+  17FF B9 00         cmp al, 0        ; check if ASCII 0
0075+  1801 C6 0E 18      jz _hex_to_int_ret
0076+  1804 36            mov bh, al
0077+  1805 F6            lodsb
0078+  1806 2F            mov bl, al
0079+  1807 07 D4 17      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  180A F7            stosb          ; store AL to [DI]
0081+  180B 0A FE 17      jmp _hex_to_int_L1
0082+  180E             _hex_to_int_ret:
0083+  180E 09            ret    
0084+  180F             
0085+  180F             ;-----------------------------------------------------------------------------
0086+  180F             ; GETCHAR
0087+  180F             ; char in ah
0088+  180F             ;-----------------------------------------------------------------------------
0089+  180F             getch:
0090+  180F DB            push al
0091+  1810             getch_retry:
0092+  1810 19 01         mov al, 1
0093+  1812 05 03         syscall sys_io      ; receive in AH
0094+  1814 E8            pop al
0095+  1815 09            ret
0096+  1816             
0097+  1816             ;-----------------------------------------------------------------------------
0098+  1816             ; PUTCHAR
0099+  1816             ; char in ah
0100+  1816             ;-----------------------------------------------------------------------------
0101+  1816             _putchar:
0102+  1816 D7            push a
0103+  1817 19 00         mov al, 0
0104+  1819 05 03         syscall sys_io      ; char in AH
0105+  181B E4            pop a
0106+  181C 09            ret
0107+  181D             
0108+  181D             ;-----------------------------------------------------------------------------
0109+  181D             ;; INPUT A STRING
0110+  181D             ;; terminates with null
0111+  181D             ;; pointer in D
0112+  181D             ;-----------------------------------------------------------------------------
0113+  181D             _gets:
0114+  181D D7            push a
0115+  181E DA            push d
0116+  181F             _gets_loop:
0117+  181F 19 01         mov al, 1
0118+  1821 05 03         syscall sys_io      ; receive in AH
0119+  1823 B9 00         cmp al, 0        ; check error code (AL)
0120+  1825 C6 1F 18      je _gets_loop      ; if no char received, retry
0121+  1828             
0122+  1828 76 1B         cmp ah, 27
0123+  182A C6 4B 18      je _gets_ansi_esc
0124+  182D 76 0A         cmp ah, $0A        ; LF
0125+  182F C6 B6 18      je _gets_end
0126+  1832 76 0D         cmp ah, $0D        ; CR
0127+  1834 C6 B6 18      je _gets_end
0128+  1837 76 5C         cmp ah, $5C        ; '\\'
0129+  1839 C6 77 18      je _gets_escape
0130+  183C               
0131+  183C 76 08         cmp ah, $08      ; check for backspace
0132+  183E C6 47 18      je _gets_backspace
0133+  1841             
0134+  1841 1A            mov al, ah
0135+  1842 3E            mov [d], al
0136+  1843 79            inc d
0137+  1844 0A 1F 18      jmp _gets_loop
0138+  1847             _gets_backspace:
0139+  1847 7F            dec d
0140+  1848 0A 1F 18      jmp _gets_loop
0141+  184B             _gets_ansi_esc:
0142+  184B 19 01         mov al, 1
0143+  184D 05 03         syscall sys_io        ; receive in AH without echo
0144+  184F B9 00         cmp al, 0          ; check error code (AL)
0145+  1851 C6 4B 18      je _gets_ansi_esc    ; if no char received, retry
0146+  1854 76 5B         cmp ah, '['
0147+  1856 C7 1F 18      jne _gets_loop
0148+  1859             _gets_ansi_esc_2:
0149+  1859 19 01         mov al, 1
0150+  185B 05 03         syscall sys_io          ; receive in AH without echo
0151+  185D B9 00         cmp al, 0            ; check error code (AL)
0152+  185F C6 59 18      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1862 76 44         cmp ah, 'D'
0154+  1864 C6 6F 18      je _gets_left_arrow
0155+  1867 76 43         cmp ah, 'C'
0156+  1869 C6 73 18      je _gets_right_arrow
0157+  186C 0A 1F 18      jmp _gets_loop
0158+  186F             _gets_left_arrow:
0159+  186F 7F            dec d
0160+  1870 0A 1F 18      jmp _gets_loop
0161+  1873             _gets_right_arrow:
0162+  1873 79            inc d
0163+  1874 0A 1F 18      jmp _gets_loop
0164+  1877             _gets_escape:
0165+  1877 19 01         mov al, 1
0166+  1879 05 03         syscall sys_io      ; receive in AH
0167+  187B B9 00         cmp al, 0        ; check error code (AL)
0168+  187D C6 77 18      je _gets_escape      ; if no char received, retry
0169+  1880 76 6E         cmp ah, 'n'
0170+  1882 C6 A1 18      je _gets_LF
0171+  1885 76 72         cmp ah, 'r'
0172+  1887 C6 A8 18      je _gets_CR
0173+  188A 76 30         cmp ah, '0'
0174+  188C C6 AF 18      je _gets_NULL
0175+  188F 76 5C         cmp ah, $5C  ; '\'
0176+  1891 C6 9A 18      je _gets_slash
0177+  1894 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1895 3E            mov [d], al
0179+  1896 79            inc d
0180+  1897 0A 1F 18      jmp _gets_loop
0181+  189A             _gets_slash:
0182+  189A 19 5C         mov al, $5C
0183+  189C 3E            mov [d], al
0184+  189D 79            inc d
0185+  189E 0A 1F 18      jmp _gets_loop
0186+  18A1             _gets_LF:
0187+  18A1 19 0A         mov al, $0A
0188+  18A3 3E            mov [d], al
0189+  18A4 79            inc d
0190+  18A5 0A 1F 18      jmp _gets_loop
0191+  18A8             _gets_CR:
0192+  18A8 19 0D         mov al, $0D
0193+  18AA 3E            mov [d], al
0194+  18AB 79            inc d
0195+  18AC 0A 1F 18      jmp _gets_loop
0196+  18AF             _gets_NULL:
0197+  18AF 19 00         mov al, $00
0198+  18B1 3E            mov [d], al
0199+  18B2 79            inc d
0200+  18B3 0A 1F 18      jmp _gets_loop
0201+  18B6             _gets_end:
0202+  18B6 19 00         mov al, 0
0203+  18B8 3E            mov [d], al        ; terminate string
0204+  18B9 E7            pop d
0205+  18BA E4            pop a
0206+  18BB 09            ret
0207+  18BC             
0208+  18BC             ;-----------------------------------------------------------------------------
0209+  18BC             ;; INPUT TEXT
0210+  18BC             ;; terminated with CTRL+D
0211+  18BC             ;; pointer in D
0212+  18BC             ;-----------------------------------------------------------------------------
0213+  18BC             _gettxt:
0214+  18BC D7            push a
0215+  18BD DA            push d
0216+  18BE             _gettxt_loop:
0217+  18BE 19 01         mov al, 1
0218+  18C0 05 03         syscall sys_io      ; receive in AH
0219+  18C2 B9 00         cmp al, 0        ; check error code (AL)
0220+  18C4 C6 BE 18      je _gettxt_loop    ; if no char received, retry
0221+  18C7 76 04         cmp ah, 4      ; EOT
0222+  18C9 C6 07 19      je _gettxt_end
0223+  18CC 76 08         cmp ah, $08      ; check for backspace
0224+  18CE C6 03 19      je _gettxt_backspace
0225+  18D1 76 5C         cmp ah, $5C        ; '\'
0226+  18D3 C6 DC 18      je _gettxt_escape
0227+  18D6 1A            mov al, ah
0228+  18D7 3E            mov [d], al
0229+  18D8 79            inc d
0230+  18D9 0A BE 18      jmp _gettxt_loop
0231+  18DC             _gettxt_escape:
0232+  18DC 19 01         mov al, 1
0233+  18DE 05 03         syscall sys_io      ; receive in AH
0234+  18E0 B9 00         cmp al, 0        ; check error code (AL)
0235+  18E2 C6 DC 18      je _gettxt_escape    ; if no char received, retry
0236+  18E5 76 6E         cmp ah, 'n'
0237+  18E7 C6 F5 18      je _gettxt_LF
0238+  18EA 76 72         cmp ah, 'r'
0239+  18EC C6 FC 18      je _gettxt_CR
0240+  18EF 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  18F0 3E            mov [d], al
0242+  18F1 79            inc d
0243+  18F2 0A BE 18      jmp _gettxt_loop
0244+  18F5             _gettxt_LF:
0245+  18F5 19 0A         mov al, $0A
0246+  18F7 3E            mov [d], al
0247+  18F8 79            inc d
0248+  18F9 0A BE 18      jmp _gettxt_loop
0249+  18FC             _gettxt_CR:
0250+  18FC 19 0D         mov al, $0D
0251+  18FE 3E            mov [d], al
0252+  18FF 79            inc d
0253+  1900 0A BE 18      jmp _gettxt_loop
0254+  1903             _gettxt_backspace:
0255+  1903 7F            dec d
0256+  1904 0A BE 18      jmp _gettxt_loop
0257+  1907             _gettxt_end:
0258+  1907 19 00         mov al, 0
0259+  1909 3E            mov [d], al        ; terminate string
0260+  190A E7            pop d
0261+  190B E4            pop a
0262+  190C 09            ret
0263+  190D             
0264+  190D             ;-----------------------------------------------------------------------------
0265+  190D             ; PRINT NEW LINE
0266+  190D             ;-----------------------------------------------------------------------------
0267+  190D             printnl:
0268+  190D D7            push a
0269+  190E 10 00 0A      mov a, $0A00
0270+  1911 05 03         syscall sys_io
0271+  1913 10 00 0D      mov a, $0D00
0272+  1916 05 03         syscall sys_io
0273+  1918 E4            pop a
0274+  1919 09            ret
0275+  191A             
0276+  191A             ;-----------------------------------------------------------------------------
0277+  191A             ; _strtoint
0278+  191A             ; 4 digit hex string number in d
0279+  191A             ; integer returned in A
0280+  191A             ;-----------------------------------------------------------------------------
0281+  191A             _strtointx:
0282+  191A D8            push b
0283+  191B 32            mov bl, [d]
0284+  191C 37            mov bh, bl
0285+  191D 33 01 00      mov bl, [d + 1]
0286+  1920 07 D4 17      call _atoi        ; convert to int in AL
0287+  1923 23            mov ah, al        ; move to AH
0288+  1924 33 02 00      mov bl, [d + 2]
0289+  1927 37            mov bh, bl
0290+  1928 33 03 00      mov bl, [d + 3]
0291+  192B 07 D4 17      call _atoi        ; convert to int in AL
0292+  192E E5            pop b
0293+  192F 09            ret
0294+  1930             
0295+  1930             ;-----------------------------------------------------------------------------
0296+  1930             ; _strtoint
0297+  1930             ; 5 digit base10 string number in d
0298+  1930             ; integer returned in A
0299+  1930             ;-----------------------------------------------------------------------------
0300+  1930             _strtoint:
0301+  1930 E2            push si
0302+  1931 D8            push b
0303+  1932 D9            push c
0304+  1933 DA            push d
0305+  1934 07 76 17      call _strlen      ; get string length in C
0306+  1937 7E            dec c
0307+  1938 FD 4E         mov si, d
0308+  193A 12            mov a, c
0309+  193B FD 99         shl a
0310+  193D 3B AC 1A      mov d, table_power
0311+  1940 59            add d, a
0312+  1941 38 00 00      mov c, 0
0313+  1944             _strtoint_L0:
0314+  1944 F6            lodsb      ; load ASCII to al
0315+  1945 B9 00         cmp al, 0
0316+  1947 C6 5A 19      je _strtoint_end
0317+  194A 6F 30         sub al, $30    ; make into integer
0318+  194C 22 00         mov ah, 0
0319+  194E 2A            mov b, [d]
0320+  194F AC            mul a, b      ; result in B since it fits in 16bits
0321+  1950 11            mov a, b
0322+  1951 28            mov b, c
0323+  1952 54            add a, b
0324+  1953 39            mov c, a
0325+  1954 63 02 00      sub d, 2
0326+  1957 0A 44 19      jmp _strtoint_L0
0327+  195A             _strtoint_end:
0328+  195A 12            mov a, c
0329+  195B E7            pop d
0330+  195C E6            pop c
0331+  195D E5            pop b
0332+  195E EF            pop si
0333+  195F 09            ret
0334+  1960             
0335+  1960             ;-----------------------------------------------------------------------------
0336+  1960             ; PRINT NULL TERMINATED STRING
0337+  1960             ; pointer in D
0338+  1960             ;-----------------------------------------------------------------------------
0339+  1960             _puts:
0340+  1960 D7            push a
0341+  1961 DA            push d
0342+  1962             _puts_L1:
0343+  1962 1E            mov al, [d]
0344+  1963 B9 00         cmp al, 0
0345+  1965 C6 71 19      jz _puts_END
0346+  1968 23            mov ah, al
0347+  1969 19 00         mov al, 0
0348+  196B 05 03         syscall sys_io
0349+  196D 79            inc d
0350+  196E 0A 62 19      jmp _puts_L1
0351+  1971             _puts_END:
0352+  1971 E7            pop d
0353+  1972 E4            pop a
0354+  1973 09            ret
0355+  1974             
0356+  1974             ;-----------------------------------------------------------------------------
0357+  1974             ; PRINT N SIZE STRING
0358+  1974             ; pointer in D
0359+  1974             ; size in C
0360+  1974             ;-----------------------------------------------------------------------------
0361+  1974             _putsn:
0362+  1974 DB            push al
0363+  1975 DA            push d
0364+  1976 D9            push c
0365+  1977             _putsn_L0:
0366+  1977 1E            mov al, [d]
0367+  1978 23            mov ah, al
0368+  1979 19 00         mov al, 0
0369+  197B 05 03         syscall sys_io
0370+  197D 79            inc d
0371+  197E 7E            dec c  
0372+  197F C2 00 00      cmp c, 0
0373+  1982 C7 77 19      jne _putsn_L0
0374+  1985             _putsn_end:
0375+  1985 E6            pop c
0376+  1986 E7            pop d
0377+  1987 E8            pop al
0378+  1988 09            ret
0379+  1989             
0380+  1989             ;-----------------------------------------------------------------------------
0381+  1989             ; print 16bit decimal number
0382+  1989             ; input number in A
0383+  1989             ;-----------------------------------------------------------------------------
0384+  1989             print_u16d:
0385+  1989 D7            push a
0386+  198A D8            push b
0387+  198B 26 10 27      mov b, 10000
0388+  198E AE            div a, b      ; get 10000's coeff.
0389+  198F 07 B1 19      call print_number
0390+  1992 11            mov a, b
0391+  1993 26 E8 03      mov b, 1000
0392+  1996 AE            div a, b      ; get 1000's coeff.
0393+  1997 07 B1 19      call print_number
0394+  199A 11            mov a, b
0395+  199B 26 64 00      mov b, 100
0396+  199E AE            div a, b
0397+  199F 07 B1 19      call print_number
0398+  19A2 11            mov a, b
0399+  19A3 26 0A 00      mov b, 10
0400+  19A6 AE            div a, b
0401+  19A7 07 B1 19      call print_number
0402+  19AA 1B            mov al, bl      ; 1's coeff in bl
0403+  19AB 07 B1 19      call print_number
0404+  19AE E5            pop b
0405+  19AF E4            pop a
0406+  19B0 09            ret
0407+  19B1             
0408+  19B1             ;-----------------------------------------------------------------------------
0409+  19B1             ; print AL
0410+  19B1             ;-----------------------------------------------------------------------------
0411+  19B1             print_number:
0412+  19B1 6A 30         add al, $30
0413+  19B3 23            mov ah, al
0414+  19B4 07 16 18      call _putchar
0415+  19B7 09            ret
0416+  19B8             
0417+  19B8             ;-----------------------------------------------------------------------------
0418+  19B8             ; PRINT 16BIT HEX INTEGER
0419+  19B8             ; integer value in reg B
0420+  19B8             ;-----------------------------------------------------------------------------
0421+  19B8             print_u16x:
0422+  19B8 D7            push a
0423+  19B9 D8            push b
0424+  19BA DD            push bl
0425+  19BB 30            mov bl, bh
0426+  19BC 07 E4 17      call _itoa        ; convert bh to char in A
0427+  19BF 2F            mov bl, al        ; save al
0428+  19C0 19 00         mov al, 0
0429+  19C2 05 03         syscall sys_io        ; display AH
0430+  19C4 24            mov ah, bl        ; retrieve al
0431+  19C5 19 00         mov al, 0
0432+  19C7 05 03         syscall sys_io        ; display AL
0433+  19C9             
0434+  19C9 EA            pop bl
0435+  19CA 07 E4 17      call _itoa        ; convert bh to char in A
0436+  19CD 2F            mov bl, al        ; save al
0437+  19CE 19 00         mov al, 0
0438+  19D0 05 03         syscall sys_io        ; display AH
0439+  19D2 24            mov ah, bl        ; retrieve al
0440+  19D3 19 00         mov al, 0
0441+  19D5 05 03         syscall sys_io        ; display AL
0442+  19D7             
0443+  19D7 E5            pop b
0444+  19D8 E4            pop a
0445+  19D9 09            ret
0446+  19DA             
0447+  19DA             ;-----------------------------------------------------------------------------
0448+  19DA             ; INPUT 16BIT HEX INTEGER
0449+  19DA             ; read 16bit integer into A
0450+  19DA             ;-----------------------------------------------------------------------------
0451+  19DA             scan_u16x:
0452+  19DA F8 10 00      enter 16
0453+  19DD D8            push b
0454+  19DE DA            push d
0455+  19DF             
0456+  19DF FA F1 FF      lea d, [bp + -15]
0457+  19E2 07 1D 18      call _gets        ; get number
0458+  19E5             
0459+  19E5 32            mov bl, [d]
0460+  19E6 37            mov bh, bl
0461+  19E7 33 01 00      mov bl, [d + 1]
0462+  19EA 07 D4 17      call _atoi        ; convert to int in AL
0463+  19ED 23            mov ah, al        ; move to AH
0464+  19EE             
0465+  19EE 33 02 00      mov bl, [d + 2]
0466+  19F1 37            mov bh, bl
0467+  19F2 33 03 00      mov bl, [d + 3]
0468+  19F5 07 D4 17      call _atoi        ; convert to int in AL
0469+  19F8             
0470+  19F8 E7            pop d
0471+  19F9 E5            pop b
0472+  19FA F9            leave
0473+  19FB 09            ret
0474+  19FC             
0475+  19FC             ;-----------------------------------------------------------------------------
0476+  19FC             ; PRINT 8bit HEX INTEGER
0477+  19FC             ; integer value in reg bl
0478+  19FC             ;-----------------------------------------------------------------------------
0479+  19FC             print_u8x:
0480+  19FC D7            push a
0481+  19FD DD            push bl
0482+  19FE             
0483+  19FE 07 E4 17      call _itoa        ; convert bl to char in A
0484+  1A01 2F            mov bl, al        ; save al
0485+  1A02 19 00         mov al, 0
0486+  1A04 05 03         syscall sys_io        ; display AH
0487+  1A06 24            mov ah, bl        ; retrieve al
0488+  1A07 19 00         mov al, 0
0489+  1A09 05 03         syscall sys_io        ; display AL
0490+  1A0B             
0491+  1A0B EA            pop bl
0492+  1A0C E4            pop a
0493+  1A0D 09            ret
0494+  1A0E             
0495+  1A0E             ;-----------------------------------------------------------------------------
0496+  1A0E             ; print 8bit decimal unsigned number
0497+  1A0E             ; input number in AL
0498+  1A0E             ;-----------------------------------------------------------------------------
0499+  1A0E             print_u8d:
0500+  1A0E D7            push a
0501+  1A0F D8            push b
0502+  1A10             
0503+  1A10 22 00         mov ah, 0
0504+  1A12 26 64 00      mov b, 100
0505+  1A15 AE            div a, b
0506+  1A16 D8            push b      ; save remainder
0507+  1A17 B9 00         cmp al, 0
0508+  1A19 C6 23 1A      je skip100
0509+  1A1C 6A 30         add al, $30
0510+  1A1E 23            mov ah, al
0511+  1A1F 19 00         mov al, 0
0512+  1A21 05 03         syscall sys_io  ; print coeff
0513+  1A23             skip100:
0514+  1A23 E4            pop a
0515+  1A24 22 00         mov ah, 0
0516+  1A26 26 0A 00      mov b, 10
0517+  1A29 AE            div a, b
0518+  1A2A D8            push b      ; save remainder
0519+  1A2B B9 00         cmp al, 0
0520+  1A2D C6 37 1A      je skip10
0521+  1A30 6A 30         add al, $30
0522+  1A32 23            mov ah, al
0523+  1A33 19 00         mov al, 0
0524+  1A35 05 03         syscall sys_io  ; print coeff
0525+  1A37             skip10:
0526+  1A37 E4            pop a
0527+  1A38 1B            mov al, bl
0528+  1A39 6A 30         add al, $30
0529+  1A3B 23            mov ah, al
0530+  1A3C 19 00         mov al, 0
0531+  1A3E 05 03         syscall sys_io  ; print coeff
0532+  1A40 E5            pop b
0533+  1A41 E4            pop a
0534+  1A42 09            ret
0535+  1A43             
0536+  1A43             ;-----------------------------------------------------------------------------
0537+  1A43             ; INPUT 8BIT HEX INTEGER
0538+  1A43             ; read 8bit integer into AL
0539+  1A43             ;-----------------------------------------------------------------------------
0540+  1A43             scan_u8x:
0541+  1A43 F8 04 00      enter 4
0542+  1A46 D8            push b
0543+  1A47 DA            push d
0544+  1A48             
0545+  1A48 FA FD FF      lea d, [bp + -3]
0546+  1A4B 07 1D 18      call _gets        ; get number
0547+  1A4E             
0548+  1A4E 32            mov bl, [d]
0549+  1A4F 37            mov bh, bl
0550+  1A50 33 01 00      mov bl, [d + 1]
0551+  1A53 07 D4 17      call _atoi        ; convert to int in AL
0552+  1A56             
0553+  1A56 E7            pop d
0554+  1A57 E5            pop b
0555+  1A58 F9            leave
0556+  1A59 09            ret
0557+  1A5A             
0558+  1A5A             ;-----------------------------------------------------------------------------
0559+  1A5A             ; input decimal number
0560+  1A5A             ; result in A
0561+  1A5A             ; 655'\0'
0562+  1A5A             ; low--------high
0563+  1A5A             ;-----------------------------------------------------------------------------
0564+  1A5A             scan_u16d:
0565+  1A5A F8 08 00      enter 8
0566+  1A5D E2            push si
0567+  1A5E D8            push b
0568+  1A5F D9            push c
0569+  1A60 DA            push d
0570+  1A61 FA F9 FF      lea d, [bp +- 7]
0571+  1A64 07 1D 18      call _gets
0572+  1A67 07 76 17      call _strlen      ; get string length in C
0573+  1A6A 7E            dec c
0574+  1A6B FD 4E         mov si, d
0575+  1A6D 12            mov a, c
0576+  1A6E FD 99         shl a
0577+  1A70 3B AC 1A      mov d, table_power
0578+  1A73 59            add d, a
0579+  1A74 38 00 00      mov c, 0
0580+  1A77             mul_loop:
0581+  1A77 F6            lodsb      ; load ASCII to al
0582+  1A78 B9 00         cmp al, 0
0583+  1A7A C6 8D 1A      je mul_exit
0584+  1A7D 6F 30         sub al, $30    ; make into integer
0585+  1A7F 22 00         mov ah, 0
0586+  1A81 2A            mov b, [d]
0587+  1A82 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1A83 11            mov a, b
0589+  1A84 28            mov b, c
0590+  1A85 54            add a, b
0591+  1A86 39            mov c, a
0592+  1A87 63 02 00      sub d, 2
0593+  1A8A 0A 77 1A      jmp mul_loop
0594+  1A8D             mul_exit:
0595+  1A8D 12            mov a, c
0596+  1A8E E7            pop d
0597+  1A8F E6            pop c
0598+  1A90 E5            pop b
0599+  1A91 EF            pop si
0600+  1A92 F9            leave
0601+  1A93 09            ret
0602+  1A94             
0603+  1A94 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1A98 34 35 36 37 
0603+  1A9C 38 39 41 42 
0603+  1AA0 43 44 45 46 
0604+  1AA4 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1AA8 1B 5B 48 00 
0605+  1AAC             
0606+  1AAC             table_power:
0607+  1AAC 01 00         .dw 1
0608+  1AAE 0A 00         .dw 10
0609+  1AB0 64 00         .dw 100
0610+  1AB2 E8 03         .dw 1000
0611+  1AB4 10 27         .dw 100002974   1AB6             ; --- END INLINE ASM BLOCK
2975   1AB6             
2976   1AB6 F9            leave
2977   1AB7 09            ret
2978   1AB8             
2979   1AB8             test0:
2980   1AB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2981   1ABB             ;; int i; 
2982   1ABB 52 02 00      sub sp, 2 ; i
2983   1ABE             ;; int pass = 1; 
2984   1ABE 52 02 00      sub sp, 2 ; pass
2985   1AC1             ; --- START LOCAL VAR INITIALIZATION
2986   1AC1 FA FD FF      lea d, [bp + -3] ; $pass
2987   1AC4 DA            push d
2988   1AC5 26 01 00      mov b, $1
2989   1AC8 E7            pop d
2990   1AC9 FD 43         mov [d], b
2991   1ACB             ; --- END LOCAL VAR INITIALIZATION
2992   1ACB             ;; for (i = 0; i < 5; i++){ 
2993   1ACB             _for44_init:
2994   1ACB FA FF FF      lea d, [bp + -1] ; $i
2995   1ACE DA            push d
2996   1ACF 26 00 00      mov b, $0
2997   1AD2 E7            pop d
2998   1AD3 FD 43         mov [d], b
2999   1AD5             _for44_cond:
3000   1AD5 FA FF FF      lea d, [bp + -1] ; $i
3001   1AD8 2A            mov b, [d]
3002   1AD9             ; START RELATIONAL
3003   1AD9 D7            push a
3004   1ADA 11            mov a, b
3005   1ADB 26 05 00      mov b, $5
3006   1ADE B0            cmp a, b
3007   1ADF FD 73         slt ; < (signed)
3008   1AE1 E4            pop a
3009   1AE2             ; END RELATIONAL
3010   1AE2 C0 00 00      cmp b, 0
3011   1AE5 C6 2A 1B      je _for44_exit
3012   1AE8             _for44_block:
3013   1AE8             ;; gca1[i] = 'A' + i; 
3014   1AE8 3B 6D 2A      mov d, _gca1_data ; $gca1
3015   1AEB D7            push a
3016   1AEC DA            push d
3017   1AED FA FF FF      lea d, [bp + -1] ; $i
3018   1AF0 2A            mov b, [d]
3019   1AF1 E7            pop d
3020   1AF2 5A            add d, b
3021   1AF3 E4            pop a
3022   1AF4 DA            push d
3023   1AF5 26 41 00      mov b, $41
3024   1AF8             ; START TERMS
3025   1AF8 D7            push a
3026   1AF9 11            mov a, b
3027   1AFA FA FF FF      lea d, [bp + -1] ; $i
3028   1AFD 2A            mov b, [d]
3029   1AFE 56            add b, a
3030   1AFF E4            pop a
3031   1B00             ; END TERMS
3032   1B00 E7            pop d
3033   1B01 FD 3E         mov [d], bl
3034   1B03             ;; gia1[i] = i; 
3035   1B03 3B 72 2A      mov d, _gia1_data ; $gia1
3036   1B06 D7            push a
3037   1B07 DA            push d
3038   1B08 FA FF FF      lea d, [bp + -1] ; $i
3039   1B0B 2A            mov b, [d]
3040   1B0C E7            pop d
3041   1B0D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3042   1B11 E4            pop a
3043   1B12 DA            push d
3044   1B13 FA FF FF      lea d, [bp + -1] ; $i
3045   1B16 2A            mov b, [d]
3046   1B17 E7            pop d
3047   1B18 FD 43         mov [d], b
3048   1B1A             _for44_update:
3049   1B1A FA FF FF      lea d, [bp + -1] ; $i
3050   1B1D 2A            mov b, [d]
3051   1B1E D8            push b
3052   1B1F FD 77         inc b
3053   1B21 FA FF FF      lea d, [bp + -1] ; $i
3054   1B24 FD 43         mov [d], b
3055   1B26 E5            pop b
3056   1B27 0A D5 1A      jmp _for44_cond
3057   1B2A             _for44_exit:
3058   1B2A             ;; for (i = 0; i < 5; i++){ 
3059   1B2A             _for45_init:
3060   1B2A FA FF FF      lea d, [bp + -1] ; $i
3061   1B2D DA            push d
3062   1B2E 26 00 00      mov b, $0
3063   1B31 E7            pop d
3064   1B32 FD 43         mov [d], b
3065   1B34             _for45_cond:
3066   1B34 FA FF FF      lea d, [bp + -1] ; $i
3067   1B37 2A            mov b, [d]
3068   1B38             ; START RELATIONAL
3069   1B38 D7            push a
3070   1B39 11            mov a, b
3071   1B3A 26 05 00      mov b, $5
3072   1B3D B0            cmp a, b
3073   1B3E FD 73         slt ; < (signed)
3074   1B40 E4            pop a
3075   1B41             ; END RELATIONAL
3076   1B41 C0 00 00      cmp b, 0
3077   1B44 C6 BD 1B      je _for45_exit
3078   1B47             _for45_block:
3079   1B47             ;; if(gca1[i] != 'A' + i){ 
3080   1B47             _if46_cond:
3081   1B47 3B 6D 2A      mov d, _gca1_data ; $gca1
3082   1B4A D7            push a
3083   1B4B DA            push d
3084   1B4C FA FF FF      lea d, [bp + -1] ; $i
3085   1B4F 2A            mov b, [d]
3086   1B50 E7            pop d
3087   1B51 5A            add d, b
3088   1B52 E4            pop a
3089   1B53 32            mov bl, [d]
3090   1B54 A7 00         mov bh, 0
3091   1B56             ; START RELATIONAL
3092   1B56 D7            push a
3093   1B57 11            mov a, b
3094   1B58 26 41 00      mov b, $41
3095   1B5B             ; START TERMS
3096   1B5B D7            push a
3097   1B5C 11            mov a, b
3098   1B5D FA FF FF      lea d, [bp + -1] ; $i
3099   1B60 2A            mov b, [d]
3100   1B61 56            add b, a
3101   1B62 E4            pop a
3102   1B63             ; END TERMS
3103   1B63 B0            cmp a, b
3104   1B64 FD 72         sneq ; !=
3105   1B66 E4            pop a
3106   1B67             ; END RELATIONAL
3107   1B67 C0 00 00      cmp b, 0
3108   1B6A C6 7D 1B      je _if46_exit
3109   1B6D             _if46_true:
3110   1B6D             ;; pass = 0; 
3111   1B6D FA FD FF      lea d, [bp + -3] ; $pass
3112   1B70 DA            push d
3113   1B71 26 00 00      mov b, $0
3114   1B74 E7            pop d
3115   1B75 FD 43         mov [d], b
3116   1B77             ;; break; 
3117   1B77 0A BD 1B      jmp _for45_exit ; for break
3118   1B7A 0A 7D 1B      jmp _if46_exit
3119   1B7D             _if46_exit:
3120   1B7D             ;; if(gia1[i] != i){ 
3121   1B7D             _if47_cond:
3122   1B7D 3B 72 2A      mov d, _gia1_data ; $gia1
3123   1B80 D7            push a
3124   1B81 DA            push d
3125   1B82 FA FF FF      lea d, [bp + -1] ; $i
3126   1B85 2A            mov b, [d]
3127   1B86 E7            pop d
3128   1B87 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3129   1B8B E4            pop a
3130   1B8C 2A            mov b, [d]
3131   1B8D             ; START RELATIONAL
3132   1B8D D7            push a
3133   1B8E 11            mov a, b
3134   1B8F FA FF FF      lea d, [bp + -1] ; $i
3135   1B92 2A            mov b, [d]
3136   1B93 B0            cmp a, b
3137   1B94 FD 72         sneq ; !=
3138   1B96 E4            pop a
3139   1B97             ; END RELATIONAL
3140   1B97 C0 00 00      cmp b, 0
3141   1B9A C6 AD 1B      je _if47_exit
3142   1B9D             _if47_true:
3143   1B9D             ;; pass = 0; 
3144   1B9D FA FD FF      lea d, [bp + -3] ; $pass
3145   1BA0 DA            push d
3146   1BA1 26 00 00      mov b, $0
3147   1BA4 E7            pop d
3148   1BA5 FD 43         mov [d], b
3149   1BA7             ;; break; 
3150   1BA7 0A BD 1B      jmp _for45_exit ; for break
3151   1BAA 0A AD 1B      jmp _if47_exit
3152   1BAD             _if47_exit:
3153   1BAD             _for45_update:
3154   1BAD FA FF FF      lea d, [bp + -1] ; $i
3155   1BB0 2A            mov b, [d]
3156   1BB1 D8            push b
3157   1BB2 FD 77         inc b
3158   1BB4 FA FF FF      lea d, [bp + -1] ; $i
3159   1BB7 FD 43         mov [d], b
3160   1BB9 E5            pop b
3161   1BBA 0A 34 1B      jmp _for45_cond
3162   1BBD             _for45_exit:
3163   1BBD             ;; return pass; 
3164   1BBD FA FD FF      lea d, [bp + -3] ; $pass
3165   1BC0 2A            mov b, [d]
3166   1BC1 F9            leave
3167   1BC2 09            ret
3168   1BC3             
3169   1BC3             test1:
3170   1BC3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3171   1BC6             ;; int i, j; 
3172   1BC6 52 02 00      sub sp, 2 ; i
3173   1BC9 52 02 00      sub sp, 2 ; j
3174   1BCC             ;; int pass = 1; 
3175   1BCC 52 02 00      sub sp, 2 ; pass
3176   1BCF             ; --- START LOCAL VAR INITIALIZATION
3177   1BCF FA FB FF      lea d, [bp + -5] ; $pass
3178   1BD2 DA            push d
3179   1BD3 26 01 00      mov b, $1
3180   1BD6 E7            pop d
3181   1BD7 FD 43         mov [d], b
3182   1BD9             ; --- END LOCAL VAR INITIALIZATION
3183   1BD9             ;; for (i = 0; i < 5; i++){ 
3184   1BD9             _for48_init:
3185   1BD9 FA FF FF      lea d, [bp + -1] ; $i
3186   1BDC DA            push d
3187   1BDD 26 00 00      mov b, $0
3188   1BE0 E7            pop d
3189   1BE1 FD 43         mov [d], b
3190   1BE3             _for48_cond:
3191   1BE3 FA FF FF      lea d, [bp + -1] ; $i
3192   1BE6 2A            mov b, [d]
3193   1BE7             ; START RELATIONAL
3194   1BE7 D7            push a
3195   1BE8 11            mov a, b
3196   1BE9 26 05 00      mov b, $5
3197   1BEC B0            cmp a, b
3198   1BED FD 73         slt ; < (signed)
3199   1BEF E4            pop a
3200   1BF0             ; END RELATIONAL
3201   1BF0 C0 00 00      cmp b, 0
3202   1BF3 C6 89 1C      je _for48_exit
3203   1BF6             _for48_block:
3204   1BF6             ;; for (j = 0; j < 5; j++){ 
3205   1BF6             _for49_init:
3206   1BF6 FA FD FF      lea d, [bp + -3] ; $j
3207   1BF9 DA            push d
3208   1BFA 26 00 00      mov b, $0
3209   1BFD E7            pop d
3210   1BFE FD 43         mov [d], b
3211   1C00             _for49_cond:
3212   1C00 FA FD FF      lea d, [bp + -3] ; $j
3213   1C03 2A            mov b, [d]
3214   1C04             ; START RELATIONAL
3215   1C04 D7            push a
3216   1C05 11            mov a, b
3217   1C06 26 05 00      mov b, $5
3218   1C09 B0            cmp a, b
3219   1C0A FD 73         slt ; < (signed)
3220   1C0C E4            pop a
3221   1C0D             ; END RELATIONAL
3222   1C0D C0 00 00      cmp b, 0
3223   1C10 C6 79 1C      je _for49_exit
3224   1C13             _for49_block:
3225   1C13             ;; gca2[i][j] = 'A' + i + j; 
3226   1C13 3B 7C 2A      mov d, _gca2_data ; $gca2
3227   1C16 D7            push a
3228   1C17 DA            push d
3229   1C18 FA FF FF      lea d, [bp + -1] ; $i
3230   1C1B 2A            mov b, [d]
3231   1C1C E7            pop d
3232   1C1D FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
3233   1C21 DA            push d
3234   1C22 FA FD FF      lea d, [bp + -3] ; $j
3235   1C25 2A            mov b, [d]
3236   1C26 E7            pop d
3237   1C27 5A            add d, b
3238   1C28 E4            pop a
3239   1C29 DA            push d
3240   1C2A 26 41 00      mov b, $41
3241   1C2D             ; START TERMS
3242   1C2D D7            push a
3243   1C2E 11            mov a, b
3244   1C2F FA FF FF      lea d, [bp + -1] ; $i
3245   1C32 2A            mov b, [d]
3246   1C33 56            add b, a
3247   1C34 11            mov a, b
3248   1C35 FA FD FF      lea d, [bp + -3] ; $j
3249   1C38 2A            mov b, [d]
3250   1C39 56            add b, a
3251   1C3A E4            pop a
3252   1C3B             ; END TERMS
3253   1C3B E7            pop d
3254   1C3C FD 3E         mov [d], bl
3255   1C3E             ;; gia2[i][j] = i * j; 
3256   1C3E 3B 95 2A      mov d, _gia2_data ; $gia2
3257   1C41 D7            push a
3258   1C42 DA            push d
3259   1C43 FA FF FF      lea d, [bp + -1] ; $i
3260   1C46 2A            mov b, [d]
3261   1C47 E7            pop d
3262   1C48 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3263   1C4C DA            push d
3264   1C4D FA FD FF      lea d, [bp + -3] ; $j
3265   1C50 2A            mov b, [d]
3266   1C51 E7            pop d
3267   1C52 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3268   1C56 E4            pop a
3269   1C57 DA            push d
3270   1C58 FA FF FF      lea d, [bp + -1] ; $i
3271   1C5B 2A            mov b, [d]
3272   1C5C             ; START FACTORS
3273   1C5C D7            push a
3274   1C5D 11            mov a, b
3275   1C5E FA FD FF      lea d, [bp + -3] ; $j
3276   1C61 2A            mov b, [d]
3277   1C62 AC            mul a, b ; *
3278   1C63 11            mov a, b
3279   1C64 27            mov b, a
3280   1C65 E4            pop a
3281   1C66             ; END FACTORS
3282   1C66 E7            pop d
3283   1C67 FD 43         mov [d], b
3284   1C69             _for49_update:
3285   1C69 FA FD FF      lea d, [bp + -3] ; $j
3286   1C6C 2A            mov b, [d]
3287   1C6D D8            push b
3288   1C6E FD 77         inc b
3289   1C70 FA FD FF      lea d, [bp + -3] ; $j
3290   1C73 FD 43         mov [d], b
3291   1C75 E5            pop b
3292   1C76 0A 00 1C      jmp _for49_cond
3293   1C79             _for49_exit:
3294   1C79             _for48_update:
3295   1C79 FA FF FF      lea d, [bp + -1] ; $i
3296   1C7C 2A            mov b, [d]
3297   1C7D D8            push b
3298   1C7E FD 77         inc b
3299   1C80 FA FF FF      lea d, [bp + -1] ; $i
3300   1C83 FD 43         mov [d], b
3301   1C85 E5            pop b
3302   1C86 0A E3 1B      jmp _for48_cond
3303   1C89             _for48_exit:
3304   1C89             ;; for (i = 0; i < 5; i++){ 
3305   1C89             _for50_init:
3306   1C89 FA FF FF      lea d, [bp + -1] ; $i
3307   1C8C DA            push d
3308   1C8D 26 00 00      mov b, $0
3309   1C90 E7            pop d
3310   1C91 FD 43         mov [d], b
3311   1C93             _for50_cond:
3312   1C93 FA FF FF      lea d, [bp + -1] ; $i
3313   1C96 2A            mov b, [d]
3314   1C97             ; START RELATIONAL
3315   1C97 D7            push a
3316   1C98 11            mov a, b
3317   1C99 26 05 00      mov b, $5
3318   1C9C B0            cmp a, b
3319   1C9D FD 73         slt ; < (signed)
3320   1C9F E4            pop a
3321   1CA0             ; END RELATIONAL
3322   1CA0 C0 00 00      cmp b, 0
3323   1CA3 C6 6D 1D      je _for50_exit
3324   1CA6             _for50_block:
3325   1CA6             ;; for (j = 0; j < 5; j++){ 
3326   1CA6             _for51_init:
3327   1CA6 FA FD FF      lea d, [bp + -3] ; $j
3328   1CA9 DA            push d
3329   1CAA 26 00 00      mov b, $0
3330   1CAD E7            pop d
3331   1CAE FD 43         mov [d], b
3332   1CB0             _for51_cond:
3333   1CB0 FA FD FF      lea d, [bp + -3] ; $j
3334   1CB3 2A            mov b, [d]
3335   1CB4             ; START RELATIONAL
3336   1CB4 D7            push a
3337   1CB5 11            mov a, b
3338   1CB6 26 05 00      mov b, $5
3339   1CB9 B0            cmp a, b
3340   1CBA FD 73         slt ; < (signed)
3341   1CBC E4            pop a
3342   1CBD             ; END RELATIONAL
3343   1CBD C0 00 00      cmp b, 0
3344   1CC0 C6 5D 1D      je _for51_exit
3345   1CC3             _for51_block:
3346   1CC3             ;; if(gca2[i][j] != 'A' + i + j){ 
3347   1CC3             _if52_cond:
3348   1CC3 3B 7C 2A      mov d, _gca2_data ; $gca2
3349   1CC6 D7            push a
3350   1CC7 DA            push d
3351   1CC8 FA FF FF      lea d, [bp + -1] ; $i
3352   1CCB 2A            mov b, [d]
3353   1CCC E7            pop d
3354   1CCD FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
3355   1CD1 DA            push d
3356   1CD2 FA FD FF      lea d, [bp + -3] ; $j
3357   1CD5 2A            mov b, [d]
3358   1CD6 E7            pop d
3359   1CD7 5A            add d, b
3360   1CD8 E4            pop a
3361   1CD9 32            mov bl, [d]
3362   1CDA A7 00         mov bh, 0
3363   1CDC             ; START RELATIONAL
3364   1CDC D7            push a
3365   1CDD 11            mov a, b
3366   1CDE 26 41 00      mov b, $41
3367   1CE1             ; START TERMS
3368   1CE1 D7            push a
3369   1CE2 11            mov a, b
3370   1CE3 FA FF FF      lea d, [bp + -1] ; $i
3371   1CE6 2A            mov b, [d]
3372   1CE7 56            add b, a
3373   1CE8 11            mov a, b
3374   1CE9 FA FD FF      lea d, [bp + -3] ; $j
3375   1CEC 2A            mov b, [d]
3376   1CED 56            add b, a
3377   1CEE E4            pop a
3378   1CEF             ; END TERMS
3379   1CEF B0            cmp a, b
3380   1CF0 FD 72         sneq ; !=
3381   1CF2 E4            pop a
3382   1CF3             ; END RELATIONAL
3383   1CF3 C0 00 00      cmp b, 0
3384   1CF6 C6 09 1D      je _if52_exit
3385   1CF9             _if52_true:
3386   1CF9             ;; pass = 0; 
3387   1CF9 FA FB FF      lea d, [bp + -5] ; $pass
3388   1CFC DA            push d
3389   1CFD 26 00 00      mov b, $0
3390   1D00 E7            pop d
3391   1D01 FD 43         mov [d], b
3392   1D03             ;; break; 
3393   1D03 0A 5D 1D      jmp _for51_exit ; for break
3394   1D06 0A 09 1D      jmp _if52_exit
3395   1D09             _if52_exit:
3396   1D09             ;; if(gia2[i][j] != i * j){ 
3397   1D09             _if53_cond:
3398   1D09 3B 95 2A      mov d, _gia2_data ; $gia2
3399   1D0C D7            push a
3400   1D0D DA            push d
3401   1D0E FA FF FF      lea d, [bp + -1] ; $i
3402   1D11 2A            mov b, [d]
3403   1D12 E7            pop d
3404   1D13 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3405   1D17 DA            push d
3406   1D18 FA FD FF      lea d, [bp + -3] ; $j
3407   1D1B 2A            mov b, [d]
3408   1D1C E7            pop d
3409   1D1D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3410   1D21 E4            pop a
3411   1D22 2A            mov b, [d]
3412   1D23             ; START RELATIONAL
3413   1D23 D7            push a
3414   1D24 11            mov a, b
3415   1D25 FA FF FF      lea d, [bp + -1] ; $i
3416   1D28 2A            mov b, [d]
3417   1D29             ; START FACTORS
3418   1D29 D7            push a
3419   1D2A 11            mov a, b
3420   1D2B FA FD FF      lea d, [bp + -3] ; $j
3421   1D2E 2A            mov b, [d]
3422   1D2F AC            mul a, b ; *
3423   1D30 11            mov a, b
3424   1D31 27            mov b, a
3425   1D32 E4            pop a
3426   1D33             ; END FACTORS
3427   1D33 B0            cmp a, b
3428   1D34 FD 72         sneq ; !=
3429   1D36 E4            pop a
3430   1D37             ; END RELATIONAL
3431   1D37 C0 00 00      cmp b, 0
3432   1D3A C6 4D 1D      je _if53_exit
3433   1D3D             _if53_true:
3434   1D3D             ;; pass = 0; 
3435   1D3D FA FB FF      lea d, [bp + -5] ; $pass
3436   1D40 DA            push d
3437   1D41 26 00 00      mov b, $0
3438   1D44 E7            pop d
3439   1D45 FD 43         mov [d], b
3440   1D47             ;; break; 
3441   1D47 0A 5D 1D      jmp _for51_exit ; for break
3442   1D4A 0A 4D 1D      jmp _if53_exit
3443   1D4D             _if53_exit:
3444   1D4D             _for51_update:
3445   1D4D FA FD FF      lea d, [bp + -3] ; $j
3446   1D50 2A            mov b, [d]
3447   1D51 D8            push b
3448   1D52 FD 77         inc b
3449   1D54 FA FD FF      lea d, [bp + -3] ; $j
3450   1D57 FD 43         mov [d], b
3451   1D59 E5            pop b
3452   1D5A 0A B0 1C      jmp _for51_cond
3453   1D5D             _for51_exit:
3454   1D5D             _for50_update:
3455   1D5D FA FF FF      lea d, [bp + -1] ; $i
3456   1D60 2A            mov b, [d]
3457   1D61 D8            push b
3458   1D62 FD 77         inc b
3459   1D64 FA FF FF      lea d, [bp + -1] ; $i
3460   1D67 FD 43         mov [d], b
3461   1D69 E5            pop b
3462   1D6A 0A 93 1C      jmp _for50_cond
3463   1D6D             _for50_exit:
3464   1D6D             ;; return pass; 
3465   1D6D FA FB FF      lea d, [bp + -5] ; $pass
3466   1D70 2A            mov b, [d]
3467   1D71 F9            leave
3468   1D72 09            ret
3469   1D73             
3470   1D73             test2:
3471   1D73 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3472   1D76             ;; int i, j; 
3473   1D76 52 02 00      sub sp, 2 ; i
3474   1D79 52 02 00      sub sp, 2 ; j
3475   1D7C             ;; char lca[5]; 
3476   1D7C 52 05 00      sub sp, 5 ; lca
3477   1D7F             ;; int lia[5]; 
3478   1D7F 52 0A 00      sub sp, 10 ; lia
3479   1D82             ;; int pass = 1; 
3480   1D82 52 02 00      sub sp, 2 ; pass
3481   1D85             ; --- START LOCAL VAR INITIALIZATION
3482   1D85 FA EC FF      lea d, [bp + -20] ; $pass
3483   1D88 DA            push d
3484   1D89 26 01 00      mov b, $1
3485   1D8C E7            pop d
3486   1D8D FD 43         mov [d], b
3487   1D8F             ; --- END LOCAL VAR INITIALIZATION
3488   1D8F             ;; for (i = 0; i < 5; i++){ 
3489   1D8F             _for54_init:
3490   1D8F FA FF FF      lea d, [bp + -1] ; $i
3491   1D92 DA            push d
3492   1D93 26 00 00      mov b, $0
3493   1D96 E7            pop d
3494   1D97 FD 43         mov [d], b
3495   1D99             _for54_cond:
3496   1D99 FA FF FF      lea d, [bp + -1] ; $i
3497   1D9C 2A            mov b, [d]
3498   1D9D             ; START RELATIONAL
3499   1D9D D7            push a
3500   1D9E 11            mov a, b
3501   1D9F 26 05 00      mov b, $5
3502   1DA2 B0            cmp a, b
3503   1DA3 FD 73         slt ; < (signed)
3504   1DA5 E4            pop a
3505   1DA6             ; END RELATIONAL
3506   1DA6 C0 00 00      cmp b, 0
3507   1DA9 C6 FE 1D      je _for54_exit
3508   1DAC             _for54_block:
3509   1DAC             ;; lca[i] = 'A' + i + j; 
3510   1DAC FA F8 FF      lea d, [bp + -8] ; $lca
3511   1DAF D7            push a
3512   1DB0 DA            push d
3513   1DB1 FA FF FF      lea d, [bp + -1] ; $i
3514   1DB4 2A            mov b, [d]
3515   1DB5 E7            pop d
3516   1DB6 5A            add d, b
3517   1DB7 E4            pop a
3518   1DB8 DA            push d
3519   1DB9 26 41 00      mov b, $41
3520   1DBC             ; START TERMS
3521   1DBC D7            push a
3522   1DBD 11            mov a, b
3523   1DBE FA FF FF      lea d, [bp + -1] ; $i
3524   1DC1 2A            mov b, [d]
3525   1DC2 56            add b, a
3526   1DC3 11            mov a, b
3527   1DC4 FA FD FF      lea d, [bp + -3] ; $j
3528   1DC7 2A            mov b, [d]
3529   1DC8 56            add b, a
3530   1DC9 E4            pop a
3531   1DCA             ; END TERMS
3532   1DCA E7            pop d
3533   1DCB FD 3E         mov [d], bl
3534   1DCD             ;; lia[i] = i * j; 
3535   1DCD FA EE FF      lea d, [bp + -18] ; $lia
3536   1DD0 D7            push a
3537   1DD1 DA            push d
3538   1DD2 FA FF FF      lea d, [bp + -1] ; $i
3539   1DD5 2A            mov b, [d]
3540   1DD6 E7            pop d
3541   1DD7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3542   1DDB E4            pop a
3543   1DDC DA            push d
3544   1DDD FA FF FF      lea d, [bp + -1] ; $i
3545   1DE0 2A            mov b, [d]
3546   1DE1             ; START FACTORS
3547   1DE1 D7            push a
3548   1DE2 11            mov a, b
3549   1DE3 FA FD FF      lea d, [bp + -3] ; $j
3550   1DE6 2A            mov b, [d]
3551   1DE7 AC            mul a, b ; *
3552   1DE8 11            mov a, b
3553   1DE9 27            mov b, a
3554   1DEA E4            pop a
3555   1DEB             ; END FACTORS
3556   1DEB E7            pop d
3557   1DEC FD 43         mov [d], b
3558   1DEE             _for54_update:
3559   1DEE FA FF FF      lea d, [bp + -1] ; $i
3560   1DF1 2A            mov b, [d]
3561   1DF2 D8            push b
3562   1DF3 FD 77         inc b
3563   1DF5 FA FF FF      lea d, [bp + -1] ; $i
3564   1DF8 FD 43         mov [d], b
3565   1DFA E5            pop b
3566   1DFB 0A 99 1D      jmp _for54_cond
3567   1DFE             _for54_exit:
3568   1DFE             ;; for (i = 0; i < 5; i++){ 
3569   1DFE             _for55_init:
3570   1DFE FA FF FF      lea d, [bp + -1] ; $i
3571   1E01 DA            push d
3572   1E02 26 00 00      mov b, $0
3573   1E05 E7            pop d
3574   1E06 FD 43         mov [d], b
3575   1E08             _for55_cond:
3576   1E08 FA FF FF      lea d, [bp + -1] ; $i
3577   1E0B 2A            mov b, [d]
3578   1E0C             ; START RELATIONAL
3579   1E0C D7            push a
3580   1E0D 11            mov a, b
3581   1E0E 26 05 00      mov b, $5
3582   1E11 B0            cmp a, b
3583   1E12 FD 73         slt ; < (signed)
3584   1E14 E4            pop a
3585   1E15             ; END RELATIONAL
3586   1E15 C0 00 00      cmp b, 0
3587   1E18 C6 A1 1E      je _for55_exit
3588   1E1B             _for55_block:
3589   1E1B             ;; if(lca[i] != 'A' + i + j){ 
3590   1E1B             _if56_cond:
3591   1E1B FA F8 FF      lea d, [bp + -8] ; $lca
3592   1E1E D7            push a
3593   1E1F DA            push d
3594   1E20 FA FF FF      lea d, [bp + -1] ; $i
3595   1E23 2A            mov b, [d]
3596   1E24 E7            pop d
3597   1E25 5A            add d, b
3598   1E26 E4            pop a
3599   1E27 32            mov bl, [d]
3600   1E28 A7 00         mov bh, 0
3601   1E2A             ; START RELATIONAL
3602   1E2A D7            push a
3603   1E2B 11            mov a, b
3604   1E2C 26 41 00      mov b, $41
3605   1E2F             ; START TERMS
3606   1E2F D7            push a
3607   1E30 11            mov a, b
3608   1E31 FA FF FF      lea d, [bp + -1] ; $i
3609   1E34 2A            mov b, [d]
3610   1E35 56            add b, a
3611   1E36 11            mov a, b
3612   1E37 FA FD FF      lea d, [bp + -3] ; $j
3613   1E3A 2A            mov b, [d]
3614   1E3B 56            add b, a
3615   1E3C E4            pop a
3616   1E3D             ; END TERMS
3617   1E3D B0            cmp a, b
3618   1E3E FD 72         sneq ; !=
3619   1E40 E4            pop a
3620   1E41             ; END RELATIONAL
3621   1E41 C0 00 00      cmp b, 0
3622   1E44 C6 57 1E      je _if56_exit
3623   1E47             _if56_true:
3624   1E47             ;; pass = 0; 
3625   1E47 FA EC FF      lea d, [bp + -20] ; $pass
3626   1E4A DA            push d
3627   1E4B 26 00 00      mov b, $0
3628   1E4E E7            pop d
3629   1E4F FD 43         mov [d], b
3630   1E51             ;; break; 
3631   1E51 0A A1 1E      jmp _for55_exit ; for break
3632   1E54 0A 57 1E      jmp _if56_exit
3633   1E57             _if56_exit:
3634   1E57             ;; if(lia[i] != i * j){ 
3635   1E57             _if57_cond:
3636   1E57 FA EE FF      lea d, [bp + -18] ; $lia
3637   1E5A D7            push a
3638   1E5B DA            push d
3639   1E5C FA FF FF      lea d, [bp + -1] ; $i
3640   1E5F 2A            mov b, [d]
3641   1E60 E7            pop d
3642   1E61 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3643   1E65 E4            pop a
3644   1E66 2A            mov b, [d]
3645   1E67             ; START RELATIONAL
3646   1E67 D7            push a
3647   1E68 11            mov a, b
3648   1E69 FA FF FF      lea d, [bp + -1] ; $i
3649   1E6C 2A            mov b, [d]
3650   1E6D             ; START FACTORS
3651   1E6D D7            push a
3652   1E6E 11            mov a, b
3653   1E6F FA FD FF      lea d, [bp + -3] ; $j
3654   1E72 2A            mov b, [d]
3655   1E73 AC            mul a, b ; *
3656   1E74 11            mov a, b
3657   1E75 27            mov b, a
3658   1E76 E4            pop a
3659   1E77             ; END FACTORS
3660   1E77 B0            cmp a, b
3661   1E78 FD 72         sneq ; !=
3662   1E7A E4            pop a
3663   1E7B             ; END RELATIONAL
3664   1E7B C0 00 00      cmp b, 0
3665   1E7E C6 91 1E      je _if57_exit
3666   1E81             _if57_true:
3667   1E81             ;; pass = 0; 
3668   1E81 FA EC FF      lea d, [bp + -20] ; $pass
3669   1E84 DA            push d
3670   1E85 26 00 00      mov b, $0
3671   1E88 E7            pop d
3672   1E89 FD 43         mov [d], b
3673   1E8B             ;; break; 
3674   1E8B 0A A1 1E      jmp _for55_exit ; for break
3675   1E8E 0A 91 1E      jmp _if57_exit
3676   1E91             _if57_exit:
3677   1E91             _for55_update:
3678   1E91 FA FF FF      lea d, [bp + -1] ; $i
3679   1E94 2A            mov b, [d]
3680   1E95 D8            push b
3681   1E96 FD 77         inc b
3682   1E98 FA FF FF      lea d, [bp + -1] ; $i
3683   1E9B FD 43         mov [d], b
3684   1E9D E5            pop b
3685   1E9E 0A 08 1E      jmp _for55_cond
3686   1EA1             _for55_exit:
3687   1EA1             ;; return pass; 
3688   1EA1 FA EC FF      lea d, [bp + -20] ; $pass
3689   1EA4 2A            mov b, [d]
3690   1EA5 F9            leave
3691   1EA6 09            ret
3692   1EA7             
3693   1EA7             test3:
3694   1EA7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3695   1EAA             ;; int i, j; 
3696   1EAA 52 02 00      sub sp, 2 ; i
3697   1EAD 52 02 00      sub sp, 2 ; j
3698   1EB0             ;; char lca[5][5]; 
3699   1EB0 52 19 00      sub sp, 25 ; lca
3700   1EB3             ;; int lia[5][5]; 
3701   1EB3 52 32 00      sub sp, 50 ; lia
3702   1EB6             ;; int pass = 1; 
3703   1EB6 52 02 00      sub sp, 2 ; pass
3704   1EB9             ; --- START LOCAL VAR INITIALIZATION
3705   1EB9 FA B0 FF      lea d, [bp + -80] ; $pass
3706   1EBC DA            push d
3707   1EBD 26 01 00      mov b, $1
3708   1EC0 E7            pop d
3709   1EC1 FD 43         mov [d], b
3710   1EC3             ; --- END LOCAL VAR INITIALIZATION
3711   1EC3             ;; for (i = 0; i < 5; i++){ 
3712   1EC3             _for58_init:
3713   1EC3 FA FF FF      lea d, [bp + -1] ; $i
3714   1EC6 DA            push d
3715   1EC7 26 00 00      mov b, $0
3716   1ECA E7            pop d
3717   1ECB FD 43         mov [d], b
3718   1ECD             _for58_cond:
3719   1ECD FA FF FF      lea d, [bp + -1] ; $i
3720   1ED0 2A            mov b, [d]
3721   1ED1             ; START RELATIONAL
3722   1ED1 D7            push a
3723   1ED2 11            mov a, b
3724   1ED3 26 05 00      mov b, $5
3725   1ED6 B0            cmp a, b
3726   1ED7 FD 73         slt ; < (signed)
3727   1ED9 E4            pop a
3728   1EDA             ; END RELATIONAL
3729   1EDA C0 00 00      cmp b, 0
3730   1EDD C6 73 1F      je _for58_exit
3731   1EE0             _for58_block:
3732   1EE0             ;; for (j = 0; j < 5; j++){ 
3733   1EE0             _for59_init:
3734   1EE0 FA FD FF      lea d, [bp + -3] ; $j
3735   1EE3 DA            push d
3736   1EE4 26 00 00      mov b, $0
3737   1EE7 E7            pop d
3738   1EE8 FD 43         mov [d], b
3739   1EEA             _for59_cond:
3740   1EEA FA FD FF      lea d, [bp + -3] ; $j
3741   1EED 2A            mov b, [d]
3742   1EEE             ; START RELATIONAL
3743   1EEE D7            push a
3744   1EEF 11            mov a, b
3745   1EF0 26 05 00      mov b, $5
3746   1EF3 B0            cmp a, b
3747   1EF4 FD 73         slt ; < (signed)
3748   1EF6 E4            pop a
3749   1EF7             ; END RELATIONAL
3750   1EF7 C0 00 00      cmp b, 0
3751   1EFA C6 63 1F      je _for59_exit
3752   1EFD             _for59_block:
3753   1EFD             ;; lca[i][j] = 'A' + i + j; 
3754   1EFD FA E4 FF      lea d, [bp + -28] ; $lca
3755   1F00 D7            push a
3756   1F01 DA            push d
3757   1F02 FA FF FF      lea d, [bp + -1] ; $i
3758   1F05 2A            mov b, [d]
3759   1F06 E7            pop d
3760   1F07 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
3761   1F0B DA            push d
3762   1F0C FA FD FF      lea d, [bp + -3] ; $j
3763   1F0F 2A            mov b, [d]
3764   1F10 E7            pop d
3765   1F11 5A            add d, b
3766   1F12 E4            pop a
3767   1F13 DA            push d
3768   1F14 26 41 00      mov b, $41
3769   1F17             ; START TERMS
3770   1F17 D7            push a
3771   1F18 11            mov a, b
3772   1F19 FA FF FF      lea d, [bp + -1] ; $i
3773   1F1C 2A            mov b, [d]
3774   1F1D 56            add b, a
3775   1F1E 11            mov a, b
3776   1F1F FA FD FF      lea d, [bp + -3] ; $j
3777   1F22 2A            mov b, [d]
3778   1F23 56            add b, a
3779   1F24 E4            pop a
3780   1F25             ; END TERMS
3781   1F25 E7            pop d
3782   1F26 FD 3E         mov [d], bl
3783   1F28             ;; lia[i][j] = i * j; 
3784   1F28 FA B2 FF      lea d, [bp + -78] ; $lia
3785   1F2B D7            push a
3786   1F2C DA            push d
3787   1F2D FA FF FF      lea d, [bp + -1] ; $i
3788   1F30 2A            mov b, [d]
3789   1F31 E7            pop d
3790   1F32 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3791   1F36 DA            push d
3792   1F37 FA FD FF      lea d, [bp + -3] ; $j
3793   1F3A 2A            mov b, [d]
3794   1F3B E7            pop d
3795   1F3C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3796   1F40 E4            pop a
3797   1F41 DA            push d
3798   1F42 FA FF FF      lea d, [bp + -1] ; $i
3799   1F45 2A            mov b, [d]
3800   1F46             ; START FACTORS
3801   1F46 D7            push a
3802   1F47 11            mov a, b
3803   1F48 FA FD FF      lea d, [bp + -3] ; $j
3804   1F4B 2A            mov b, [d]
3805   1F4C AC            mul a, b ; *
3806   1F4D 11            mov a, b
3807   1F4E 27            mov b, a
3808   1F4F E4            pop a
3809   1F50             ; END FACTORS
3810   1F50 E7            pop d
3811   1F51 FD 43         mov [d], b
3812   1F53             _for59_update:
3813   1F53 FA FD FF      lea d, [bp + -3] ; $j
3814   1F56 2A            mov b, [d]
3815   1F57 D8            push b
3816   1F58 FD 77         inc b
3817   1F5A FA FD FF      lea d, [bp + -3] ; $j
3818   1F5D FD 43         mov [d], b
3819   1F5F E5            pop b
3820   1F60 0A EA 1E      jmp _for59_cond
3821   1F63             _for59_exit:
3822   1F63             _for58_update:
3823   1F63 FA FF FF      lea d, [bp + -1] ; $i
3824   1F66 2A            mov b, [d]
3825   1F67 D8            push b
3826   1F68 FD 77         inc b
3827   1F6A FA FF FF      lea d, [bp + -1] ; $i
3828   1F6D FD 43         mov [d], b
3829   1F6F E5            pop b
3830   1F70 0A CD 1E      jmp _for58_cond
3831   1F73             _for58_exit:
3832   1F73             ;; for (i = 0; i < 5; i++){ 
3833   1F73             _for60_init:
3834   1F73 FA FF FF      lea d, [bp + -1] ; $i
3835   1F76 DA            push d
3836   1F77 26 00 00      mov b, $0
3837   1F7A E7            pop d
3838   1F7B FD 43         mov [d], b
3839   1F7D             _for60_cond:
3840   1F7D FA FF FF      lea d, [bp + -1] ; $i
3841   1F80 2A            mov b, [d]
3842   1F81             ; START RELATIONAL
3843   1F81 D7            push a
3844   1F82 11            mov a, b
3845   1F83 26 05 00      mov b, $5
3846   1F86 B0            cmp a, b
3847   1F87 FD 73         slt ; < (signed)
3848   1F89 E4            pop a
3849   1F8A             ; END RELATIONAL
3850   1F8A C0 00 00      cmp b, 0
3851   1F8D C6 57 20      je _for60_exit
3852   1F90             _for60_block:
3853   1F90             ;; for (j = 0; j < 5; j++){ 
3854   1F90             _for61_init:
3855   1F90 FA FD FF      lea d, [bp + -3] ; $j
3856   1F93 DA            push d
3857   1F94 26 00 00      mov b, $0
3858   1F97 E7            pop d
3859   1F98 FD 43         mov [d], b
3860   1F9A             _for61_cond:
3861   1F9A FA FD FF      lea d, [bp + -3] ; $j
3862   1F9D 2A            mov b, [d]
3863   1F9E             ; START RELATIONAL
3864   1F9E D7            push a
3865   1F9F 11            mov a, b
3866   1FA0 26 05 00      mov b, $5
3867   1FA3 B0            cmp a, b
3868   1FA4 FD 73         slt ; < (signed)
3869   1FA6 E4            pop a
3870   1FA7             ; END RELATIONAL
3871   1FA7 C0 00 00      cmp b, 0
3872   1FAA C6 47 20      je _for61_exit
3873   1FAD             _for61_block:
3874   1FAD             ;; if(lca[i][j] != 'A' + i + j){ 
3875   1FAD             _if62_cond:
3876   1FAD FA E4 FF      lea d, [bp + -28] ; $lca
3877   1FB0 D7            push a
3878   1FB1 DA            push d
3879   1FB2 FA FF FF      lea d, [bp + -1] ; $i
3880   1FB5 2A            mov b, [d]
3881   1FB6 E7            pop d
3882   1FB7 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
3883   1FBB DA            push d
3884   1FBC FA FD FF      lea d, [bp + -3] ; $j
3885   1FBF 2A            mov b, [d]
3886   1FC0 E7            pop d
3887   1FC1 5A            add d, b
3888   1FC2 E4            pop a
3889   1FC3 32            mov bl, [d]
3890   1FC4 A7 00         mov bh, 0
3891   1FC6             ; START RELATIONAL
3892   1FC6 D7            push a
3893   1FC7 11            mov a, b
3894   1FC8 26 41 00      mov b, $41
3895   1FCB             ; START TERMS
3896   1FCB D7            push a
3897   1FCC 11            mov a, b
3898   1FCD FA FF FF      lea d, [bp + -1] ; $i
3899   1FD0 2A            mov b, [d]
3900   1FD1 56            add b, a
3901   1FD2 11            mov a, b
3902   1FD3 FA FD FF      lea d, [bp + -3] ; $j
3903   1FD6 2A            mov b, [d]
3904   1FD7 56            add b, a
3905   1FD8 E4            pop a
3906   1FD9             ; END TERMS
3907   1FD9 B0            cmp a, b
3908   1FDA FD 72         sneq ; !=
3909   1FDC E4            pop a
3910   1FDD             ; END RELATIONAL
3911   1FDD C0 00 00      cmp b, 0
3912   1FE0 C6 F3 1F      je _if62_exit
3913   1FE3             _if62_true:
3914   1FE3             ;; pass = 0; 
3915   1FE3 FA B0 FF      lea d, [bp + -80] ; $pass
3916   1FE6 DA            push d
3917   1FE7 26 00 00      mov b, $0
3918   1FEA E7            pop d
3919   1FEB FD 43         mov [d], b
3920   1FED             ;; break; 
3921   1FED 0A 47 20      jmp _for61_exit ; for break
3922   1FF0 0A F3 1F      jmp _if62_exit
3923   1FF3             _if62_exit:
3924   1FF3             ;; if(lia[i][j] != i * j){ 
3925   1FF3             _if63_cond:
3926   1FF3 FA B2 FF      lea d, [bp + -78] ; $lia
3927   1FF6 D7            push a
3928   1FF7 DA            push d
3929   1FF8 FA FF FF      lea d, [bp + -1] ; $i
3930   1FFB 2A            mov b, [d]
3931   1FFC E7            pop d
3932   1FFD FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3933   2001 DA            push d
3934   2002 FA FD FF      lea d, [bp + -3] ; $j
3935   2005 2A            mov b, [d]
3936   2006 E7            pop d
3937   2007 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3938   200B E4            pop a
3939   200C 2A            mov b, [d]
3940   200D             ; START RELATIONAL
3941   200D D7            push a
3942   200E 11            mov a, b
3943   200F FA FF FF      lea d, [bp + -1] ; $i
3944   2012 2A            mov b, [d]
3945   2013             ; START FACTORS
3946   2013 D7            push a
3947   2014 11            mov a, b
3948   2015 FA FD FF      lea d, [bp + -3] ; $j
3949   2018 2A            mov b, [d]
3950   2019 AC            mul a, b ; *
3951   201A 11            mov a, b
3952   201B 27            mov b, a
3953   201C E4            pop a
3954   201D             ; END FACTORS
3955   201D B0            cmp a, b
3956   201E FD 72         sneq ; !=
3957   2020 E4            pop a
3958   2021             ; END RELATIONAL
3959   2021 C0 00 00      cmp b, 0
3960   2024 C6 37 20      je _if63_exit
3961   2027             _if63_true:
3962   2027             ;; pass = 0; 
3963   2027 FA B0 FF      lea d, [bp + -80] ; $pass
3964   202A DA            push d
3965   202B 26 00 00      mov b, $0
3966   202E E7            pop d
3967   202F FD 43         mov [d], b
3968   2031             ;; break; 
3969   2031 0A 47 20      jmp _for61_exit ; for break
3970   2034 0A 37 20      jmp _if63_exit
3971   2037             _if63_exit:
3972   2037             _for61_update:
3973   2037 FA FD FF      lea d, [bp + -3] ; $j
3974   203A 2A            mov b, [d]
3975   203B D8            push b
3976   203C FD 77         inc b
3977   203E FA FD FF      lea d, [bp + -3] ; $j
3978   2041 FD 43         mov [d], b
3979   2043 E5            pop b
3980   2044 0A 9A 1F      jmp _for61_cond
3981   2047             _for61_exit:
3982   2047             _for60_update:
3983   2047 FA FF FF      lea d, [bp + -1] ; $i
3984   204A 2A            mov b, [d]
3985   204B D8            push b
3986   204C FD 77         inc b
3987   204E FA FF FF      lea d, [bp + -1] ; $i
3988   2051 FD 43         mov [d], b
3989   2053 E5            pop b
3990   2054 0A 7D 1F      jmp _for60_cond
3991   2057             _for60_exit:
3992   2057             ;; return pass; 
3993   2057 FA B0 FF      lea d, [bp + -80] ; $pass
3994   205A 2A            mov b, [d]
3995   205B F9            leave
3996   205C 09            ret
3997   205D             
3998   205D             test4:
3999   205D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4000   2060             ;; int a, b, c; 
4001   2060 52 02 00      sub sp, 2 ; a
4002   2063 52 02 00      sub sp, 2 ; b
4003   2066 52 02 00      sub sp, 2 ; c
4004   2069             ;; int result; 
4005   2069 52 02 00      sub sp, 2 ; result
4006   206C             ;; int pass = 1; 
4007   206C 52 02 00      sub sp, 2 ; pass
4008   206F             ; --- START LOCAL VAR INITIALIZATION
4009   206F FA F7 FF      lea d, [bp + -9] ; $pass
4010   2072 DA            push d
4011   2073 26 01 00      mov b, $1
4012   2076 E7            pop d
4013   2077 FD 43         mov [d], b
4014   2079             ; --- END LOCAL VAR INITIALIZATION
4015   2079             ;; result = 1 && 1 && 1; 
4016   2079 FA F9 FF      lea d, [bp + -7] ; $result
4017   207C DA            push d
4018   207D 26 01 00      mov b, $1
4019   2080 D7            push a
4020   2081 11            mov a, b
4021   2082 26 01 00      mov b, $1
4022   2085 FD A7         sand a, b
4023   2087 11            mov a, b
4024   2088 26 01 00      mov b, $1
4025   208B FD A7         sand a, b
4026   208D E4            pop a
4027   208E E7            pop d
4028   208F FD 43         mov [d], b
4029   2091             ;; pass = pass && result == 1; 
4030   2091 FA F7 FF      lea d, [bp + -9] ; $pass
4031   2094 DA            push d
4032   2095 FA F7 FF      lea d, [bp + -9] ; $pass
4033   2098 2A            mov b, [d]
4034   2099 D7            push a
4035   209A 11            mov a, b
4036   209B FA F9 FF      lea d, [bp + -7] ; $result
4037   209E 2A            mov b, [d]
4038   209F             ; START RELATIONAL
4039   209F D7            push a
4040   20A0 11            mov a, b
4041   20A1 26 01 00      mov b, $1
4042   20A4 B0            cmp a, b
4043   20A5 FD 71         seq ; ==
4044   20A7 E4            pop a
4045   20A8             ; END RELATIONAL
4046   20A8 FD A7         sand a, b
4047   20AA E4            pop a
4048   20AB E7            pop d
4049   20AC FD 43         mov [d], b
4050   20AE             ;; result = 1 && 0 && 1; 
4051   20AE FA F9 FF      lea d, [bp + -7] ; $result
4052   20B1 DA            push d
4053   20B2 26 01 00      mov b, $1
4054   20B5 D7            push a
4055   20B6 11            mov a, b
4056   20B7 26 00 00      mov b, $0
4057   20BA FD A7         sand a, b
4058   20BC 11            mov a, b
4059   20BD 26 01 00      mov b, $1
4060   20C0 FD A7         sand a, b
4061   20C2 E4            pop a
4062   20C3 E7            pop d
4063   20C4 FD 43         mov [d], b
4064   20C6             ;; pass = pass && result == 0; 
4065   20C6 FA F7 FF      lea d, [bp + -9] ; $pass
4066   20C9 DA            push d
4067   20CA FA F7 FF      lea d, [bp + -9] ; $pass
4068   20CD 2A            mov b, [d]
4069   20CE D7            push a
4070   20CF 11            mov a, b
4071   20D0 FA F9 FF      lea d, [bp + -7] ; $result
4072   20D3 2A            mov b, [d]
4073   20D4             ; START RELATIONAL
4074   20D4 D7            push a
4075   20D5 11            mov a, b
4076   20D6 26 00 00      mov b, $0
4077   20D9 B0            cmp a, b
4078   20DA FD 71         seq ; ==
4079   20DC E4            pop a
4080   20DD             ; END RELATIONAL
4081   20DD FD A7         sand a, b
4082   20DF E4            pop a
4083   20E0 E7            pop d
4084   20E1 FD 43         mov [d], b
4085   20E3             ;; result = 1 || 1 || 1; 
4086   20E3 FA F9 FF      lea d, [bp + -7] ; $result
4087   20E6 DA            push d
4088   20E7 26 01 00      mov b, $1
4089   20EA D7            push a
4090   20EB 11            mov a, b
4091   20EC 26 01 00      mov b, $1
4092   20EF FD A8         sor a, b ; ||
4093   20F1 11            mov a, b
4094   20F2 26 01 00      mov b, $1
4095   20F5 FD A8         sor a, b ; ||
4096   20F7 E4            pop a
4097   20F8 E7            pop d
4098   20F9 FD 43         mov [d], b
4099   20FB             ;; pass = pass && result == 1; 
4100   20FB FA F7 FF      lea d, [bp + -9] ; $pass
4101   20FE DA            push d
4102   20FF FA F7 FF      lea d, [bp + -9] ; $pass
4103   2102 2A            mov b, [d]
4104   2103 D7            push a
4105   2104 11            mov a, b
4106   2105 FA F9 FF      lea d, [bp + -7] ; $result
4107   2108 2A            mov b, [d]
4108   2109             ; START RELATIONAL
4109   2109 D7            push a
4110   210A 11            mov a, b
4111   210B 26 01 00      mov b, $1
4112   210E B0            cmp a, b
4113   210F FD 71         seq ; ==
4114   2111 E4            pop a
4115   2112             ; END RELATIONAL
4116   2112 FD A7         sand a, b
4117   2114 E4            pop a
4118   2115 E7            pop d
4119   2116 FD 43         mov [d], b
4120   2118             ;; result = 0 || 1 || 0; 
4121   2118 FA F9 FF      lea d, [bp + -7] ; $result
4122   211B DA            push d
4123   211C 26 00 00      mov b, $0
4124   211F D7            push a
4125   2120 11            mov a, b
4126   2121 26 01 00      mov b, $1
4127   2124 FD A8         sor a, b ; ||
4128   2126 11            mov a, b
4129   2127 26 00 00      mov b, $0
4130   212A FD A8         sor a, b ; ||
4131   212C E4            pop a
4132   212D E7            pop d
4133   212E FD 43         mov [d], b
4134   2130             ;; pass = pass && result == 1; 
4135   2130 FA F7 FF      lea d, [bp + -9] ; $pass
4136   2133 DA            push d
4137   2134 FA F7 FF      lea d, [bp + -9] ; $pass
4138   2137 2A            mov b, [d]
4139   2138 D7            push a
4140   2139 11            mov a, b
4141   213A FA F9 FF      lea d, [bp + -7] ; $result
4142   213D 2A            mov b, [d]
4143   213E             ; START RELATIONAL
4144   213E D7            push a
4145   213F 11            mov a, b
4146   2140 26 01 00      mov b, $1
4147   2143 B0            cmp a, b
4148   2144 FD 71         seq ; ==
4149   2146 E4            pop a
4150   2147             ; END RELATIONAL
4151   2147 FD A7         sand a, b
4152   2149 E4            pop a
4153   214A E7            pop d
4154   214B FD 43         mov [d], b
4155   214D             ;; result = 1 || 0 && 1; 
4156   214D FA F9 FF      lea d, [bp + -7] ; $result
4157   2150 DA            push d
4158   2151 26 01 00      mov b, $1
4159   2154 D7            push a
4160   2155 11            mov a, b
4161   2156 26 00 00      mov b, $0
4162   2159 D7            push a
4163   215A 11            mov a, b
4164   215B 26 01 00      mov b, $1
4165   215E FD A7         sand a, b
4166   2160 E4            pop a
4167   2161 FD A8         sor a, b ; ||
4168   2163 E4            pop a
4169   2164 E7            pop d
4170   2165 FD 43         mov [d], b
4171   2167             ;; pass = pass && result == 1; 
4172   2167 FA F7 FF      lea d, [bp + -9] ; $pass
4173   216A DA            push d
4174   216B FA F7 FF      lea d, [bp + -9] ; $pass
4175   216E 2A            mov b, [d]
4176   216F D7            push a
4177   2170 11            mov a, b
4178   2171 FA F9 FF      lea d, [bp + -7] ; $result
4179   2174 2A            mov b, [d]
4180   2175             ; START RELATIONAL
4181   2175 D7            push a
4182   2176 11            mov a, b
4183   2177 26 01 00      mov b, $1
4184   217A B0            cmp a, b
4185   217B FD 71         seq ; ==
4186   217D E4            pop a
4187   217E             ; END RELATIONAL
4188   217E FD A7         sand a, b
4189   2180 E4            pop a
4190   2181 E7            pop d
4191   2182 FD 43         mov [d], b
4192   2184             ;; result = 0 || 0 || 0; 
4193   2184 FA F9 FF      lea d, [bp + -7] ; $result
4194   2187 DA            push d
4195   2188 26 00 00      mov b, $0
4196   218B D7            push a
4197   218C 11            mov a, b
4198   218D 26 00 00      mov b, $0
4199   2190 FD A8         sor a, b ; ||
4200   2192 11            mov a, b
4201   2193 26 00 00      mov b, $0
4202   2196 FD A8         sor a, b ; ||
4203   2198 E4            pop a
4204   2199 E7            pop d
4205   219A FD 43         mov [d], b
4206   219C             ;; pass = pass && result == 0; 
4207   219C FA F7 FF      lea d, [bp + -9] ; $pass
4208   219F DA            push d
4209   21A0 FA F7 FF      lea d, [bp + -9] ; $pass
4210   21A3 2A            mov b, [d]
4211   21A4 D7            push a
4212   21A5 11            mov a, b
4213   21A6 FA F9 FF      lea d, [bp + -7] ; $result
4214   21A9 2A            mov b, [d]
4215   21AA             ; START RELATIONAL
4216   21AA D7            push a
4217   21AB 11            mov a, b
4218   21AC 26 00 00      mov b, $0
4219   21AF B0            cmp a, b
4220   21B0 FD 71         seq ; ==
4221   21B2 E4            pop a
4222   21B3             ; END RELATIONAL
4223   21B3 FD A7         sand a, b
4224   21B5 E4            pop a
4225   21B6 E7            pop d
4226   21B7 FD 43         mov [d], b
4227   21B9             ;; a = 1; b = 1; c = 1; 
4228   21B9 FA FF FF      lea d, [bp + -1] ; $a
4229   21BC DA            push d
4230   21BD 26 01 00      mov b, $1
4231   21C0 E7            pop d
4232   21C1 FD 43         mov [d], b
4233   21C3             ;; b = 1; c = 1; 
4234   21C3 FA FD FF      lea d, [bp + -3] ; $b
4235   21C6 DA            push d
4236   21C7 26 01 00      mov b, $1
4237   21CA E7            pop d
4238   21CB FD 43         mov [d], b
4239   21CD             ;; c = 1; 
4240   21CD FA FB FF      lea d, [bp + -5] ; $c
4241   21D0 DA            push d
4242   21D1 26 01 00      mov b, $1
4243   21D4 E7            pop d
4244   21D5 FD 43         mov [d], b
4245   21D7             ;; result = a && b && c; 
4246   21D7 FA F9 FF      lea d, [bp + -7] ; $result
4247   21DA DA            push d
4248   21DB FA FF FF      lea d, [bp + -1] ; $a
4249   21DE 2A            mov b, [d]
4250   21DF D7            push a
4251   21E0 11            mov a, b
4252   21E1 FA FD FF      lea d, [bp + -3] ; $b
4253   21E4 2A            mov b, [d]
4254   21E5 FD A7         sand a, b
4255   21E7 11            mov a, b
4256   21E8 FA FB FF      lea d, [bp + -5] ; $c
4257   21EB 2A            mov b, [d]
4258   21EC FD A7         sand a, b
4259   21EE E4            pop a
4260   21EF E7            pop d
4261   21F0 FD 43         mov [d], b
4262   21F2             ;; pass = pass && result == 1; 
4263   21F2 FA F7 FF      lea d, [bp + -9] ; $pass
4264   21F5 DA            push d
4265   21F6 FA F7 FF      lea d, [bp + -9] ; $pass
4266   21F9 2A            mov b, [d]
4267   21FA D7            push a
4268   21FB 11            mov a, b
4269   21FC FA F9 FF      lea d, [bp + -7] ; $result
4270   21FF 2A            mov b, [d]
4271   2200             ; START RELATIONAL
4272   2200 D7            push a
4273   2201 11            mov a, b
4274   2202 26 01 00      mov b, $1
4275   2205 B0            cmp a, b
4276   2206 FD 71         seq ; ==
4277   2208 E4            pop a
4278   2209             ; END RELATIONAL
4279   2209 FD A7         sand a, b
4280   220B E4            pop a
4281   220C E7            pop d
4282   220D FD 43         mov [d], b
4283   220F             ;; a = 1; b = 0; c = 1; 
4284   220F FA FF FF      lea d, [bp + -1] ; $a
4285   2212 DA            push d
4286   2213 26 01 00      mov b, $1
4287   2216 E7            pop d
4288   2217 FD 43         mov [d], b
4289   2219             ;; b = 0; c = 1; 
4290   2219 FA FD FF      lea d, [bp + -3] ; $b
4291   221C DA            push d
4292   221D 26 00 00      mov b, $0
4293   2220 E7            pop d
4294   2221 FD 43         mov [d], b
4295   2223             ;; c = 1; 
4296   2223 FA FB FF      lea d, [bp + -5] ; $c
4297   2226 DA            push d
4298   2227 26 01 00      mov b, $1
4299   222A E7            pop d
4300   222B FD 43         mov [d], b
4301   222D             ;; result = a && b && c; 
4302   222D FA F9 FF      lea d, [bp + -7] ; $result
4303   2230 DA            push d
4304   2231 FA FF FF      lea d, [bp + -1] ; $a
4305   2234 2A            mov b, [d]
4306   2235 D7            push a
4307   2236 11            mov a, b
4308   2237 FA FD FF      lea d, [bp + -3] ; $b
4309   223A 2A            mov b, [d]
4310   223B FD A7         sand a, b
4311   223D 11            mov a, b
4312   223E FA FB FF      lea d, [bp + -5] ; $c
4313   2241 2A            mov b, [d]
4314   2242 FD A7         sand a, b
4315   2244 E4            pop a
4316   2245 E7            pop d
4317   2246 FD 43         mov [d], b
4318   2248             ;; pass = pass && result == 0; 
4319   2248 FA F7 FF      lea d, [bp + -9] ; $pass
4320   224B DA            push d
4321   224C FA F7 FF      lea d, [bp + -9] ; $pass
4322   224F 2A            mov b, [d]
4323   2250 D7            push a
4324   2251 11            mov a, b
4325   2252 FA F9 FF      lea d, [bp + -7] ; $result
4326   2255 2A            mov b, [d]
4327   2256             ; START RELATIONAL
4328   2256 D7            push a
4329   2257 11            mov a, b
4330   2258 26 00 00      mov b, $0
4331   225B B0            cmp a, b
4332   225C FD 71         seq ; ==
4333   225E E4            pop a
4334   225F             ; END RELATIONAL
4335   225F FD A7         sand a, b
4336   2261 E4            pop a
4337   2262 E7            pop d
4338   2263 FD 43         mov [d], b
4339   2265             ;; a = 1; b = 1; c = 1; 
4340   2265 FA FF FF      lea d, [bp + -1] ; $a
4341   2268 DA            push d
4342   2269 26 01 00      mov b, $1
4343   226C E7            pop d
4344   226D FD 43         mov [d], b
4345   226F             ;; b = 1; c = 1; 
4346   226F FA FD FF      lea d, [bp + -3] ; $b
4347   2272 DA            push d
4348   2273 26 01 00      mov b, $1
4349   2276 E7            pop d
4350   2277 FD 43         mov [d], b
4351   2279             ;; c = 1; 
4352   2279 FA FB FF      lea d, [bp + -5] ; $c
4353   227C DA            push d
4354   227D 26 01 00      mov b, $1
4355   2280 E7            pop d
4356   2281 FD 43         mov [d], b
4357   2283             ;; result = a || b || b; 
4358   2283 FA F9 FF      lea d, [bp + -7] ; $result
4359   2286 DA            push d
4360   2287 FA FF FF      lea d, [bp + -1] ; $a
4361   228A 2A            mov b, [d]
4362   228B D7            push a
4363   228C 11            mov a, b
4364   228D FA FD FF      lea d, [bp + -3] ; $b
4365   2290 2A            mov b, [d]
4366   2291 FD A8         sor a, b ; ||
4367   2293 11            mov a, b
4368   2294 FA FD FF      lea d, [bp + -3] ; $b
4369   2297 2A            mov b, [d]
4370   2298 FD A8         sor a, b ; ||
4371   229A E4            pop a
4372   229B E7            pop d
4373   229C FD 43         mov [d], b
4374   229E             ;; pass = pass && result == 1; 
4375   229E FA F7 FF      lea d, [bp + -9] ; $pass
4376   22A1 DA            push d
4377   22A2 FA F7 FF      lea d, [bp + -9] ; $pass
4378   22A5 2A            mov b, [d]
4379   22A6 D7            push a
4380   22A7 11            mov a, b
4381   22A8 FA F9 FF      lea d, [bp + -7] ; $result
4382   22AB 2A            mov b, [d]
4383   22AC             ; START RELATIONAL
4384   22AC D7            push a
4385   22AD 11            mov a, b
4386   22AE 26 01 00      mov b, $1
4387   22B1 B0            cmp a, b
4388   22B2 FD 71         seq ; ==
4389   22B4 E4            pop a
4390   22B5             ; END RELATIONAL
4391   22B5 FD A7         sand a, b
4392   22B7 E4            pop a
4393   22B8 E7            pop d
4394   22B9 FD 43         mov [d], b
4395   22BB             ;; a = 0; b = 1; c = 0; 
4396   22BB FA FF FF      lea d, [bp + -1] ; $a
4397   22BE DA            push d
4398   22BF 26 00 00      mov b, $0
4399   22C2 E7            pop d
4400   22C3 FD 43         mov [d], b
4401   22C5             ;; b = 1; c = 0; 
4402   22C5 FA FD FF      lea d, [bp + -3] ; $b
4403   22C8 DA            push d
4404   22C9 26 01 00      mov b, $1
4405   22CC E7            pop d
4406   22CD FD 43         mov [d], b
4407   22CF             ;; c = 0; 
4408   22CF FA FB FF      lea d, [bp + -5] ; $c
4409   22D2 DA            push d
4410   22D3 26 00 00      mov b, $0
4411   22D6 E7            pop d
4412   22D7 FD 43         mov [d], b
4413   22D9             ;; result = a || b || b; 
4414   22D9 FA F9 FF      lea d, [bp + -7] ; $result
4415   22DC DA            push d
4416   22DD FA FF FF      lea d, [bp + -1] ; $a
4417   22E0 2A            mov b, [d]
4418   22E1 D7            push a
4419   22E2 11            mov a, b
4420   22E3 FA FD FF      lea d, [bp + -3] ; $b
4421   22E6 2A            mov b, [d]
4422   22E7 FD A8         sor a, b ; ||
4423   22E9 11            mov a, b
4424   22EA FA FD FF      lea d, [bp + -3] ; $b
4425   22ED 2A            mov b, [d]
4426   22EE FD A8         sor a, b ; ||
4427   22F0 E4            pop a
4428   22F1 E7            pop d
4429   22F2 FD 43         mov [d], b
4430   22F4             ;; pass = pass && result == 1; 
4431   22F4 FA F7 FF      lea d, [bp + -9] ; $pass
4432   22F7 DA            push d
4433   22F8 FA F7 FF      lea d, [bp + -9] ; $pass
4434   22FB 2A            mov b, [d]
4435   22FC D7            push a
4436   22FD 11            mov a, b
4437   22FE FA F9 FF      lea d, [bp + -7] ; $result
4438   2301 2A            mov b, [d]
4439   2302             ; START RELATIONAL
4440   2302 D7            push a
4441   2303 11            mov a, b
4442   2304 26 01 00      mov b, $1
4443   2307 B0            cmp a, b
4444   2308 FD 71         seq ; ==
4445   230A E4            pop a
4446   230B             ; END RELATIONAL
4447   230B FD A7         sand a, b
4448   230D E4            pop a
4449   230E E7            pop d
4450   230F FD 43         mov [d], b
4451   2311             ;; a = 1; b = 0; c = 1; 
4452   2311 FA FF FF      lea d, [bp + -1] ; $a
4453   2314 DA            push d
4454   2315 26 01 00      mov b, $1
4455   2318 E7            pop d
4456   2319 FD 43         mov [d], b
4457   231B             ;; b = 0; c = 1; 
4458   231B FA FD FF      lea d, [bp + -3] ; $b
4459   231E DA            push d
4460   231F 26 00 00      mov b, $0
4461   2322 E7            pop d
4462   2323 FD 43         mov [d], b
4463   2325             ;; c = 1; 
4464   2325 FA FB FF      lea d, [bp + -5] ; $c
4465   2328 DA            push d
4466   2329 26 01 00      mov b, $1
4467   232C E7            pop d
4468   232D FD 43         mov [d], b
4469   232F             ;; result = a || b && b; 
4470   232F FA F9 FF      lea d, [bp + -7] ; $result
4471   2332 DA            push d
4472   2333 FA FF FF      lea d, [bp + -1] ; $a
4473   2336 2A            mov b, [d]
4474   2337 D7            push a
4475   2338 11            mov a, b
4476   2339 FA FD FF      lea d, [bp + -3] ; $b
4477   233C 2A            mov b, [d]
4478   233D D7            push a
4479   233E 11            mov a, b
4480   233F FA FD FF      lea d, [bp + -3] ; $b
4481   2342 2A            mov b, [d]
4482   2343 FD A7         sand a, b
4483   2345 E4            pop a
4484   2346 FD A8         sor a, b ; ||
4485   2348 E4            pop a
4486   2349 E7            pop d
4487   234A FD 43         mov [d], b
4488   234C             ;; pass = pass && result == 1; 
4489   234C FA F7 FF      lea d, [bp + -9] ; $pass
4490   234F DA            push d
4491   2350 FA F7 FF      lea d, [bp + -9] ; $pass
4492   2353 2A            mov b, [d]
4493   2354 D7            push a
4494   2355 11            mov a, b
4495   2356 FA F9 FF      lea d, [bp + -7] ; $result
4496   2359 2A            mov b, [d]
4497   235A             ; START RELATIONAL
4498   235A D7            push a
4499   235B 11            mov a, b
4500   235C 26 01 00      mov b, $1
4501   235F B0            cmp a, b
4502   2360 FD 71         seq ; ==
4503   2362 E4            pop a
4504   2363             ; END RELATIONAL
4505   2363 FD A7         sand a, b
4506   2365 E4            pop a
4507   2366 E7            pop d
4508   2367 FD 43         mov [d], b
4509   2369             ;; a = 0; b = 0; c = 0; 
4510   2369 FA FF FF      lea d, [bp + -1] ; $a
4511   236C DA            push d
4512   236D 26 00 00      mov b, $0
4513   2370 E7            pop d
4514   2371 FD 43         mov [d], b
4515   2373             ;; b = 0; c = 0; 
4516   2373 FA FD FF      lea d, [bp + -3] ; $b
4517   2376 DA            push d
4518   2377 26 00 00      mov b, $0
4519   237A E7            pop d
4520   237B FD 43         mov [d], b
4521   237D             ;; c = 0; 
4522   237D FA FB FF      lea d, [bp + -5] ; $c
4523   2380 DA            push d
4524   2381 26 00 00      mov b, $0
4525   2384 E7            pop d
4526   2385 FD 43         mov [d], b
4527   2387             ;; result = a || b || b; 
4528   2387 FA F9 FF      lea d, [bp + -7] ; $result
4529   238A DA            push d
4530   238B FA FF FF      lea d, [bp + -1] ; $a
4531   238E 2A            mov b, [d]
4532   238F D7            push a
4533   2390 11            mov a, b
4534   2391 FA FD FF      lea d, [bp + -3] ; $b
4535   2394 2A            mov b, [d]
4536   2395 FD A8         sor a, b ; ||
4537   2397 11            mov a, b
4538   2398 FA FD FF      lea d, [bp + -3] ; $b
4539   239B 2A            mov b, [d]
4540   239C FD A8         sor a, b ; ||
4541   239E E4            pop a
4542   239F E7            pop d
4543   23A0 FD 43         mov [d], b
4544   23A2             ;; pass = pass && result == 0; 
4545   23A2 FA F7 FF      lea d, [bp + -9] ; $pass
4546   23A5 DA            push d
4547   23A6 FA F7 FF      lea d, [bp + -9] ; $pass
4548   23A9 2A            mov b, [d]
4549   23AA D7            push a
4550   23AB 11            mov a, b
4551   23AC FA F9 FF      lea d, [bp + -7] ; $result
4552   23AF 2A            mov b, [d]
4553   23B0             ; START RELATIONAL
4554   23B0 D7            push a
4555   23B1 11            mov a, b
4556   23B2 26 00 00      mov b, $0
4557   23B5 B0            cmp a, b
4558   23B6 FD 71         seq ; ==
4559   23B8 E4            pop a
4560   23B9             ; END RELATIONAL
4561   23B9 FD A7         sand a, b
4562   23BB E4            pop a
4563   23BC E7            pop d
4564   23BD FD 43         mov [d], b
4565   23BF             ;; return pass; 
4566   23BF FA F7 FF      lea d, [bp + -9] ; $pass
4567   23C2 2A            mov b, [d]
4568   23C3 F9            leave
4569   23C4 09            ret
4570   23C5             
4571   23C5             test5:
4572   23C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4573   23C8             ;; int pass; 
4574   23C8 52 02 00      sub sp, 2 ; pass
4575   23CB             ;; int i, j, k; 
4576   23CB 52 02 00      sub sp, 2 ; i
4577   23CE 52 02 00      sub sp, 2 ; j
4578   23D1 52 02 00      sub sp, 2 ; k
4579   23D4             ;; int a1[5]; 
4580   23D4 52 0A 00      sub sp, 10 ; a1
4581   23D7             ;; int a2[5]; 
4582   23D7 52 0A 00      sub sp, 10 ; a2
4583   23DA             ;; int a3[5]; 
4584   23DA 52 0A 00      sub sp, 10 ; a3
4585   23DD             ;; i = 1; 
4586   23DD FA FD FF      lea d, [bp + -3] ; $i
4587   23E0 DA            push d
4588   23E1 26 01 00      mov b, $1
4589   23E4 E7            pop d
4590   23E5 FD 43         mov [d], b
4591   23E7             ;; j = 1; 
4592   23E7 FA FB FF      lea d, [bp + -5] ; $j
4593   23EA DA            push d
4594   23EB 26 01 00      mov b, $1
4595   23EE E7            pop d
4596   23EF FD 43         mov [d], b
4597   23F1             ;; k = 1; 
4598   23F1 FA F9 FF      lea d, [bp + -7] ; $k
4599   23F4 DA            push d
4600   23F5 26 01 00      mov b, $1
4601   23F8 E7            pop d
4602   23F9 FD 43         mov [d], b
4603   23FB             ;; a1[3] = 1; 
4604   23FB FA EF FF      lea d, [bp + -17] ; $a1
4605   23FE D7            push a
4606   23FF DA            push d
4607   2400 26 03 00      mov b, $3
4608   2403 E7            pop d
4609   2404 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4610   2408 E4            pop a
4611   2409 DA            push d
4612   240A 26 01 00      mov b, $1
4613   240D E7            pop d
4614   240E FD 43         mov [d], b
4615   2410             ;; a2[2] = 1; 
4616   2410 FA E5 FF      lea d, [bp + -27] ; $a2
4617   2413 D7            push a
4618   2414 DA            push d
4619   2415 26 02 00      mov b, $2
4620   2418 E7            pop d
4621   2419 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4622   241D E4            pop a
4623   241E DA            push d
4624   241F 26 01 00      mov b, $1
4625   2422 E7            pop d
4626   2423 FD 43         mov [d], b
4627   2425             ;; a3[a2[a1[i + j + (k && 1) + (1 && 0)] + (i && 1)] + (0 || j)] = 56; 
4628   2425 FA DB FF      lea d, [bp + -37] ; $a3
4629   2428 D7            push a
4630   2429 DA            push d
4631   242A FA E5 FF      lea d, [bp + -27] ; $a2
4632   242D D7            push a
4633   242E DA            push d
4634   242F FA EF FF      lea d, [bp + -17] ; $a1
4635   2432 D7            push a
4636   2433 DA            push d
4637   2434 FA FD FF      lea d, [bp + -3] ; $i
4638   2437 2A            mov b, [d]
4639   2438             ; START TERMS
4640   2438 D7            push a
4641   2439 11            mov a, b
4642   243A FA FB FF      lea d, [bp + -5] ; $j
4643   243D 2A            mov b, [d]
4644   243E 56            add b, a
4645   243F 11            mov a, b
4646   2440 FA F9 FF      lea d, [bp + -7] ; $k
4647   2443 2A            mov b, [d]
4648   2444 D7            push a
4649   2445 11            mov a, b
4650   2446 26 01 00      mov b, $1
4651   2449 FD A7         sand a, b
4652   244B E4            pop a
4653   244C 56            add b, a
4654   244D 11            mov a, b
4655   244E 26 01 00      mov b, $1
4656   2451 D7            push a
4657   2452 11            mov a, b
4658   2453 26 00 00      mov b, $0
4659   2456 FD A7         sand a, b
4660   2458 E4            pop a
4661   2459 56            add b, a
4662   245A E4            pop a
4663   245B             ; END TERMS
4664   245B E7            pop d
4665   245C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4666   2460 E4            pop a
4667   2461 2A            mov b, [d]
4668   2462             ; START TERMS
4669   2462 D7            push a
4670   2463 11            mov a, b
4671   2464 FA FD FF      lea d, [bp + -3] ; $i
4672   2467 2A            mov b, [d]
4673   2468 D7            push a
4674   2469 11            mov a, b
4675   246A 26 01 00      mov b, $1
4676   246D FD A7         sand a, b
4677   246F E4            pop a
4678   2470 56            add b, a
4679   2471 E4            pop a
4680   2472             ; END TERMS
4681   2472 E7            pop d
4682   2473 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4683   2477 E4            pop a
4684   2478 2A            mov b, [d]
4685   2479             ; START TERMS
4686   2479 D7            push a
4687   247A 11            mov a, b
4688   247B 26 00 00      mov b, $0
4689   247E D7            push a
4690   247F 11            mov a, b
4691   2480 FA FB FF      lea d, [bp + -5] ; $j
4692   2483 2A            mov b, [d]
4693   2484 FD A8         sor a, b ; ||
4694   2486 E4            pop a
4695   2487 56            add b, a
4696   2488 E4            pop a
4697   2489             ; END TERMS
4698   2489 E7            pop d
4699   248A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4700   248E E4            pop a
4701   248F DA            push d
4702   2490 26 38 00      mov b, $38
4703   2493 E7            pop d
4704   2494 FD 43         mov [d], b
4705   2496             ;; pass = a3[2] == 56; 
4706   2496 FA FF FF      lea d, [bp + -1] ; $pass
4707   2499 DA            push d
4708   249A FA DB FF      lea d, [bp + -37] ; $a3
4709   249D D7            push a
4710   249E DA            push d
4711   249F 26 02 00      mov b, $2
4712   24A2 E7            pop d
4713   24A3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4714   24A7 E4            pop a
4715   24A8 2A            mov b, [d]
4716   24A9             ; START RELATIONAL
4717   24A9 D7            push a
4718   24AA 11            mov a, b
4719   24AB 26 38 00      mov b, $38
4720   24AE B0            cmp a, b
4721   24AF FD 71         seq ; ==
4722   24B1 E4            pop a
4723   24B2             ; END RELATIONAL
4724   24B2 E7            pop d
4725   24B3 FD 43         mov [d], b
4726   24B5             ;; return pass; 
4727   24B5 FA FF FF      lea d, [bp + -1] ; $pass
4728   24B8 2A            mov b, [d]
4729   24B9 F9            leave
4730   24BA 09            ret
4731   24BB             
4732   24BB             test6:
4733   24BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4734   24BE             ;; int pass = 1; 
4735   24BE 52 02 00      sub sp, 2 ; pass
4736   24C1             ; --- START LOCAL VAR INITIALIZATION
4737   24C1 FA FF FF      lea d, [bp + -1] ; $pass
4738   24C4 DA            push d
4739   24C5 26 01 00      mov b, $1
4740   24C8 E7            pop d
4741   24C9 FD 43         mov [d], b
4742   24CB             ; --- END LOCAL VAR INITIALIZATION
4743   24CB             ;; int i, j, k; 
4744   24CB 52 02 00      sub sp, 2 ; i
4745   24CE 52 02 00      sub sp, 2 ; j
4746   24D1 52 02 00      sub sp, 2 ; k
4747   24D4             ;; test6_struct.c1 = 'A'; 
4748   24D4 3B C7 2A      mov d, _test6_struct_data ; $test6_struct
4749   24D7 58 00 00      add d, 0
4750   24DA DA            push d
4751   24DB 26 41 00      mov b, $41
4752   24DE E7            pop d
4753   24DF FD 3E         mov [d], bl
4754   24E1             ;; pass = pass && test6_struct.c1 == 'A'; 
4755   24E1 FA FF FF      lea d, [bp + -1] ; $pass
4756   24E4 DA            push d
4757   24E5 FA FF FF      lea d, [bp + -1] ; $pass
4758   24E8 2A            mov b, [d]
4759   24E9 D7            push a
4760   24EA 11            mov a, b
4761   24EB 3B C7 2A      mov d, _test6_struct_data ; $test6_struct
4762   24EE 58 00 00      add d, 0
4763   24F1 32            mov bl, [d]
4764   24F2 A7 00         mov bh, 0
4765   24F4             ; START RELATIONAL
4766   24F4 D7            push a
4767   24F5 11            mov a, b
4768   24F6 26 41 00      mov b, $41
4769   24F9 B0            cmp a, b
4770   24FA FD 71         seq ; ==
4771   24FC E4            pop a
4772   24FD             ; END RELATIONAL
4773   24FD FD A7         sand a, b
4774   24FF E4            pop a
4775   2500 E7            pop d
4776   2501 FD 43         mov [d], b
4777   2503             ;; for(i = 0; i < 5; i++){ 
4778   2503             _for64_init:
4779   2503 FA FD FF      lea d, [bp + -3] ; $i
4780   2506 DA            push d
4781   2507 26 00 00      mov b, $0
4782   250A E7            pop d
4783   250B FD 43         mov [d], b
4784   250D             _for64_cond:
4785   250D FA FD FF      lea d, [bp + -3] ; $i
4786   2510 2A            mov b, [d]
4787   2511             ; START RELATIONAL
4788   2511 D7            push a
4789   2512 11            mov a, b
4790   2513 26 05 00      mov b, $5
4791   2516 B0            cmp a, b
4792   2517 FD 73         slt ; < (signed)
4793   2519 E4            pop a
4794   251A             ; END RELATIONAL
4795   251A C0 00 00      cmp b, 0
4796   251D C6 73 25      je _for64_exit
4797   2520             _for64_block:
4798   2520             ;; test6_struct.ca[i] = i; 
4799   2520 3B C7 2A      mov d, _test6_struct_data ; $test6_struct
4800   2523 58 01 00      add d, 1
4801   2526 D7            push a
4802   2527 DA            push d
4803   2528 FA FD FF      lea d, [bp + -3] ; $i
4804   252B 2A            mov b, [d]
4805   252C E7            pop d
4806   252D 5A            add d, b
4807   252E E4            pop a
4808   252F DA            push d
4809   2530 FA FD FF      lea d, [bp + -3] ; $i
4810   2533 2A            mov b, [d]
4811   2534 E7            pop d
4812   2535 FD 3E         mov [d], bl
4813   2537             ;; pass = pass && test6_struct.ca[i] == i; 
4814   2537 FA FF FF      lea d, [bp + -1] ; $pass
4815   253A DA            push d
4816   253B FA FF FF      lea d, [bp + -1] ; $pass
4817   253E 2A            mov b, [d]
4818   253F D7            push a
4819   2540 11            mov a, b
4820   2541 3B C7 2A      mov d, _test6_struct_data ; $test6_struct
4821   2544 58 01 00      add d, 1
4822   2547 D7            push a
4823   2548 DA            push d
4824   2549 FA FD FF      lea d, [bp + -3] ; $i
4825   254C 2A            mov b, [d]
4826   254D E7            pop d
4827   254E 5A            add d, b
4828   254F E4            pop a
4829   2550 32            mov bl, [d]
4830   2551 A7 00         mov bh, 0
4831   2553             ; START RELATIONAL
4832   2553 D7            push a
4833   2554 11            mov a, b
4834   2555 FA FD FF      lea d, [bp + -3] ; $i
4835   2558 2A            mov b, [d]
4836   2559 B0            cmp a, b
4837   255A FD 71         seq ; ==
4838   255C E4            pop a
4839   255D             ; END RELATIONAL
4840   255D FD A7         sand a, b
4841   255F E4            pop a
4842   2560 E7            pop d
4843   2561 FD 43         mov [d], b
4844   2563             _for64_update:
4845   2563 FA FD FF      lea d, [bp + -3] ; $i
4846   2566 2A            mov b, [d]
4847   2567 D8            push b
4848   2568 FD 77         inc b
4849   256A FA FD FF      lea d, [bp + -3] ; $i
4850   256D FD 43         mov [d], b
4851   256F E5            pop b
4852   2570 0A 0D 25      jmp _for64_cond
4853   2573             _for64_exit:
4854   2573             ;; test6_struct.i1 = 55555; 
4855   2573 3B C7 2A      mov d, _test6_struct_data ; $test6_struct
4856   2576 58 06 00      add d, 6
4857   2579 DA            push d
4858   257A 26 03 D9      mov b, $d903
4859   257D E7            pop d
4860   257E FD 43         mov [d], b
4861   2580             ;; pass = pass && test6_struct.i1 == 55555; 
4862   2580 FA FF FF      lea d, [bp + -1] ; $pass
4863   2583 DA            push d
4864   2584 FA FF FF      lea d, [bp + -1] ; $pass
4865   2587 2A            mov b, [d]
4866   2588 D7            push a
4867   2589 11            mov a, b
4868   258A 3B C7 2A      mov d, _test6_struct_data ; $test6_struct
4869   258D 58 06 00      add d, 6
4870   2590 2A            mov b, [d]
4871   2591             ; START RELATIONAL
4872   2591 D7            push a
4873   2592 11            mov a, b
4874   2593 26 03 D9      mov b, $d903
4875   2596 B0            cmp a, b
4876   2597 FD 71         seq ; ==
4877   2599 E4            pop a
4878   259A             ; END RELATIONAL
4879   259A FD A7         sand a, b
4880   259C E4            pop a
4881   259D E7            pop d
4882   259E FD 43         mov [d], b
4883   25A0             ;; for(i = 0; i < 5; i++){ 
4884   25A0             _for65_init:
4885   25A0 FA FD FF      lea d, [bp + -3] ; $i
4886   25A3 DA            push d
4887   25A4 26 00 00      mov b, $0
4888   25A7 E7            pop d
4889   25A8 FD 43         mov [d], b
4890   25AA             _for65_cond:
4891   25AA FA FD FF      lea d, [bp + -3] ; $i
4892   25AD 2A            mov b, [d]
4893   25AE             ; START RELATIONAL
4894   25AE D7            push a
4895   25AF 11            mov a, b
4896   25B0 26 05 00      mov b, $5
4897   25B3 B0            cmp a, b
4898   25B4 FD 73         slt ; < (signed)
4899   25B6 E4            pop a
4900   25B7             ; END RELATIONAL
4901   25B7 C0 00 00      cmp b, 0
4902   25BA C6 14 26      je _for65_exit
4903   25BD             _for65_block:
4904   25BD             ;; test6_struct.ia[i] = i; 
4905   25BD 3B C7 2A      mov d, _test6_struct_data ; $test6_struct
4906   25C0 58 08 00      add d, 8
4907   25C3 D7            push a
4908   25C4 DA            push d
4909   25C5 FA FD FF      lea d, [bp + -3] ; $i
4910   25C8 2A            mov b, [d]
4911   25C9 E7            pop d
4912   25CA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4913   25CE E4            pop a
4914   25CF DA            push d
4915   25D0 FA FD FF      lea d, [bp + -3] ; $i
4916   25D3 2A            mov b, [d]
4917   25D4 E7            pop d
4918   25D5 FD 43         mov [d], b
4919   25D7             ;; pass = pass && test6_struct.ia[i] == i; 
4920   25D7 FA FF FF      lea d, [bp + -1] ; $pass
4921   25DA DA            push d
4922   25DB FA FF FF      lea d, [bp + -1] ; $pass
4923   25DE 2A            mov b, [d]
4924   25DF D7            push a
4925   25E0 11            mov a, b
4926   25E1 3B C7 2A      mov d, _test6_struct_data ; $test6_struct
4927   25E4 58 08 00      add d, 8
4928   25E7 D7            push a
4929   25E8 DA            push d
4930   25E9 FA FD FF      lea d, [bp + -3] ; $i
4931   25EC 2A            mov b, [d]
4932   25ED E7            pop d
4933   25EE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4934   25F2 E4            pop a
4935   25F3 2A            mov b, [d]
4936   25F4             ; START RELATIONAL
4937   25F4 D7            push a
4938   25F5 11            mov a, b
4939   25F6 FA FD FF      lea d, [bp + -3] ; $i
4940   25F9 2A            mov b, [d]
4941   25FA B0            cmp a, b
4942   25FB FD 71         seq ; ==
4943   25FD E4            pop a
4944   25FE             ; END RELATIONAL
4945   25FE FD A7         sand a, b
4946   2600 E4            pop a
4947   2601 E7            pop d
4948   2602 FD 43         mov [d], b
4949   2604             _for65_update:
4950   2604 FA FD FF      lea d, [bp + -3] ; $i
4951   2607 2A            mov b, [d]
4952   2608 D8            push b
4953   2609 FD 77         inc b
4954   260B FA FD FF      lea d, [bp + -3] ; $i
4955   260E FD 43         mov [d], b
4956   2610 E5            pop b
4957   2611 0A AA 25      jmp _for65_cond
4958   2614             _for65_exit:
4959   2614             ;; return pass; 
4960   2614 FA FF FF      lea d, [bp + -1] ; $pass
4961   2617 2A            mov b, [d]
4962   2618 F9            leave
4963   2619 09            ret
4964   261A             
4965   261A             test7:
4966   261A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4967   261D             ;; int pass = 1; 
4968   261D 52 02 00      sub sp, 2 ; pass
4969   2620             ; --- START LOCAL VAR INITIALIZATION
4970   2620 FA FF FF      lea d, [bp + -1] ; $pass
4971   2623 DA            push d
4972   2624 26 01 00      mov b, $1
4973   2627 E7            pop d
4974   2628 FD 43         mov [d], b
4975   262A             ; --- END LOCAL VAR INITIALIZATION
4976   262A             ;; int i, j, k; 
4977   262A 52 02 00      sub sp, 2 ; i
4978   262D 52 02 00      sub sp, 2 ; j
4979   2630 52 02 00      sub sp, 2 ; k
4980   2633             ;; test7_struct.test7_substruct.c1 = 'A'; 
4981   2633 3B D9 2A      mov d, _test7_struct_data ; $test7_struct
4982   2636 58 06 00      add d, 6
4983   2639 58 00 00      add d, 0
4984   263C DA            push d
4985   263D 26 41 00      mov b, $41
4986   2640 E7            pop d
4987   2641 FD 3E         mov [d], bl
4988   2643             ;; pass = pass && test7_struct.test7_substruct.c1 == 'A'; 
4989   2643 FA FF FF      lea d, [bp + -1] ; $pass
4990   2646 DA            push d
4991   2647 FA FF FF      lea d, [bp + -1] ; $pass
4992   264A 2A            mov b, [d]
4993   264B D7            push a
4994   264C 11            mov a, b
4995   264D 3B D9 2A      mov d, _test7_struct_data ; $test7_struct
4996   2650 58 06 00      add d, 6
4997   2653 58 00 00      add d, 0
4998   2656 32            mov bl, [d]
4999   2657 A7 00         mov bh, 0
5000   2659             ; START RELATIONAL
5001   2659 D7            push a
5002   265A 11            mov a, b
5003   265B 26 41 00      mov b, $41
5004   265E B0            cmp a, b
5005   265F FD 71         seq ; ==
5006   2661 E4            pop a
5007   2662             ; END RELATIONAL
5008   2662 FD A7         sand a, b
5009   2664 E4            pop a
5010   2665 E7            pop d
5011   2666 FD 43         mov [d], b
5012   2668             ;; for(i = 0; i < 5; i++){ 
5013   2668             _for66_init:
5014   2668 FA FD FF      lea d, [bp + -3] ; $i
5015   266B DA            push d
5016   266C 26 00 00      mov b, $0
5017   266F E7            pop d
5018   2670 FD 43         mov [d], b
5019   2672             _for66_cond:
5020   2672 FA FD FF      lea d, [bp + -3] ; $i
5021   2675 2A            mov b, [d]
5022   2676             ; START RELATIONAL
5023   2676 D7            push a
5024   2677 11            mov a, b
5025   2678 26 05 00      mov b, $5
5026   267B B0            cmp a, b
5027   267C FD 73         slt ; < (signed)
5028   267E E4            pop a
5029   267F             ; END RELATIONAL
5030   267F C0 00 00      cmp b, 0
5031   2682 C6 DE 26      je _for66_exit
5032   2685             _for66_block:
5033   2685             ;; test7_struct.test7_substruct.ca[i] = i; 
5034   2685 3B D9 2A      mov d, _test7_struct_data ; $test7_struct
5035   2688 58 06 00      add d, 6
5036   268B 58 01 00      add d, 1
5037   268E D7            push a
5038   268F DA            push d
5039   2690 FA FD FF      lea d, [bp + -3] ; $i
5040   2693 2A            mov b, [d]
5041   2694 E7            pop d
5042   2695 5A            add d, b
5043   2696 E4            pop a
5044   2697 DA            push d
5045   2698 FA FD FF      lea d, [bp + -3] ; $i
5046   269B 2A            mov b, [d]
5047   269C E7            pop d
5048   269D FD 3E         mov [d], bl
5049   269F             ;; pass = pass && test7_struct.test7_substruct.ca[i] == i; 
5050   269F FA FF FF      lea d, [bp + -1] ; $pass
5051   26A2 DA            push d
5052   26A3 FA FF FF      lea d, [bp + -1] ; $pass
5053   26A6 2A            mov b, [d]
5054   26A7 D7            push a
5055   26A8 11            mov a, b
5056   26A9 3B D9 2A      mov d, _test7_struct_data ; $test7_struct
5057   26AC 58 06 00      add d, 6
5058   26AF 58 01 00      add d, 1
5059   26B2 D7            push a
5060   26B3 DA            push d
5061   26B4 FA FD FF      lea d, [bp + -3] ; $i
5062   26B7 2A            mov b, [d]
5063   26B8 E7            pop d
5064   26B9 5A            add d, b
5065   26BA E4            pop a
5066   26BB 32            mov bl, [d]
5067   26BC A7 00         mov bh, 0
5068   26BE             ; START RELATIONAL
5069   26BE D7            push a
5070   26BF 11            mov a, b
5071   26C0 FA FD FF      lea d, [bp + -3] ; $i
5072   26C3 2A            mov b, [d]
5073   26C4 B0            cmp a, b
5074   26C5 FD 71         seq ; ==
5075   26C7 E4            pop a
5076   26C8             ; END RELATIONAL
5077   26C8 FD A7         sand a, b
5078   26CA E4            pop a
5079   26CB E7            pop d
5080   26CC FD 43         mov [d], b
5081   26CE             _for66_update:
5082   26CE FA FD FF      lea d, [bp + -3] ; $i
5083   26D1 2A            mov b, [d]
5084   26D2 D8            push b
5085   26D3 FD 77         inc b
5086   26D5 FA FD FF      lea d, [bp + -3] ; $i
5087   26D8 FD 43         mov [d], b
5088   26DA E5            pop b
5089   26DB 0A 72 26      jmp _for66_cond
5090   26DE             _for66_exit:
5091   26DE             ;; test7_struct.test7_substruct.i1 = 55555; 
5092   26DE 3B D9 2A      mov d, _test7_struct_data ; $test7_struct
5093   26E1 58 06 00      add d, 6
5094   26E4 58 06 00      add d, 6
5095   26E7 DA            push d
5096   26E8 26 03 D9      mov b, $d903
5097   26EB E7            pop d
5098   26EC FD 43         mov [d], b
5099   26EE             ;; pass = pass && test7_struct.test7_substruct.i1 == 55555; 
5100   26EE FA FF FF      lea d, [bp + -1] ; $pass
5101   26F1 DA            push d
5102   26F2 FA FF FF      lea d, [bp + -1] ; $pass
5103   26F5 2A            mov b, [d]
5104   26F6 D7            push a
5105   26F7 11            mov a, b
5106   26F8 3B D9 2A      mov d, _test7_struct_data ; $test7_struct
5107   26FB 58 06 00      add d, 6
5108   26FE 58 06 00      add d, 6
5109   2701 2A            mov b, [d]
5110   2702             ; START RELATIONAL
5111   2702 D7            push a
5112   2703 11            mov a, b
5113   2704 26 03 D9      mov b, $d903
5114   2707 B0            cmp a, b
5115   2708 FD 71         seq ; ==
5116   270A E4            pop a
5117   270B             ; END RELATIONAL
5118   270B FD A7         sand a, b
5119   270D E4            pop a
5120   270E E7            pop d
5121   270F FD 43         mov [d], b
5122   2711             ;; for(i = 0; i < 5; i++){ 
5123   2711             _for67_init:
5124   2711 FA FD FF      lea d, [bp + -3] ; $i
5125   2714 DA            push d
5126   2715 26 00 00      mov b, $0
5127   2718 E7            pop d
5128   2719 FD 43         mov [d], b
5129   271B             _for67_cond:
5130   271B FA FD FF      lea d, [bp + -3] ; $i
5131   271E 2A            mov b, [d]
5132   271F             ; START RELATIONAL
5133   271F D7            push a
5134   2720 11            mov a, b
5135   2721 26 05 00      mov b, $5
5136   2724 B0            cmp a, b
5137   2725 FD 73         slt ; < (signed)
5138   2727 E4            pop a
5139   2728             ; END RELATIONAL
5140   2728 C0 00 00      cmp b, 0
5141   272B C6 8B 27      je _for67_exit
5142   272E             _for67_block:
5143   272E             ;; test7_struct.test7_substruct.ia[i] = i; 
5144   272E 3B D9 2A      mov d, _test7_struct_data ; $test7_struct
5145   2731 58 06 00      add d, 6
5146   2734 58 08 00      add d, 8
5147   2737 D7            push a
5148   2738 DA            push d
5149   2739 FA FD FF      lea d, [bp + -3] ; $i
5150   273C 2A            mov b, [d]
5151   273D E7            pop d
5152   273E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5153   2742 E4            pop a
5154   2743 DA            push d
5155   2744 FA FD FF      lea d, [bp + -3] ; $i
5156   2747 2A            mov b, [d]
5157   2748 E7            pop d
5158   2749 FD 43         mov [d], b
5159   274B             ;; pass = pass && test7_struct.test7_substruct.ia[i] == i; 
5160   274B FA FF FF      lea d, [bp + -1] ; $pass
5161   274E DA            push d
5162   274F FA FF FF      lea d, [bp + -1] ; $pass
5163   2752 2A            mov b, [d]
5164   2753 D7            push a
5165   2754 11            mov a, b
5166   2755 3B D9 2A      mov d, _test7_struct_data ; $test7_struct
5167   2758 58 06 00      add d, 6
5168   275B 58 08 00      add d, 8
5169   275E D7            push a
5170   275F DA            push d
5171   2760 FA FD FF      lea d, [bp + -3] ; $i
5172   2763 2A            mov b, [d]
5173   2764 E7            pop d
5174   2765 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5175   2769 E4            pop a
5176   276A 2A            mov b, [d]
5177   276B             ; START RELATIONAL
5178   276B D7            push a
5179   276C 11            mov a, b
5180   276D FA FD FF      lea d, [bp + -3] ; $i
5181   2770 2A            mov b, [d]
5182   2771 B0            cmp a, b
5183   2772 FD 71         seq ; ==
5184   2774 E4            pop a
5185   2775             ; END RELATIONAL
5186   2775 FD A7         sand a, b
5187   2777 E4            pop a
5188   2778 E7            pop d
5189   2779 FD 43         mov [d], b
5190   277B             _for67_update:
5191   277B FA FD FF      lea d, [bp + -3] ; $i
5192   277E 2A            mov b, [d]
5193   277F D8            push b
5194   2780 FD 77         inc b
5195   2782 FA FD FF      lea d, [bp + -3] ; $i
5196   2785 FD 43         mov [d], b
5197   2787 E5            pop b
5198   2788 0A 1B 27      jmp _for67_cond
5199   278B             _for67_exit:
5200   278B             ;; return pass; 
5201   278B FA FF FF      lea d, [bp + -1] ; $pass
5202   278E 2A            mov b, [d]
5203   278F F9            leave
5204   2790 09            ret
5205   2791             
5206   2791             test8:
5207   2791 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5208   2794             ;; int pass = 1; 
5209   2794 52 02 00      sub sp, 2 ; pass
5210   2797             ; --- START LOCAL VAR INITIALIZATION
5211   2797 FA FF FF      lea d, [bp + -1] ; $pass
5212   279A DA            push d
5213   279B 26 01 00      mov b, $1
5214   279E E7            pop d
5215   279F FD 43         mov [d], b
5216   27A1             ; --- END LOCAL VAR INITIALIZATION
5217   27A1             ;; int i, j, k; 
5218   27A1 52 02 00      sub sp, 2 ; i
5219   27A4 52 02 00      sub sp, 2 ; j
5220   27A7 52 02 00      sub sp, 2 ; k
5221   27AA             ;; struct t_test8_struct test8_struct; 
5222   27AA 52 12 00      sub sp, 18 ; test8_struct
5223   27AD             ;; test8_struct.c1 = 'A'; 
5224   27AD FA E7 FF      lea d, [bp + -25] ; $test8_struct
5225   27B0 58 00 00      add d, 0
5226   27B3 DA            push d
5227   27B4 26 41 00      mov b, $41
5228   27B7 E7            pop d
5229   27B8 FD 3E         mov [d], bl
5230   27BA             ;; pass = pass && test8_struct.c1 == 'A'; 
5231   27BA FA FF FF      lea d, [bp + -1] ; $pass
5232   27BD DA            push d
5233   27BE FA FF FF      lea d, [bp + -1] ; $pass
5234   27C1 2A            mov b, [d]
5235   27C2 D7            push a
5236   27C3 11            mov a, b
5237   27C4 FA E7 FF      lea d, [bp + -25] ; $test8_struct
5238   27C7 58 00 00      add d, 0
5239   27CA 32            mov bl, [d]
5240   27CB A7 00         mov bh, 0
5241   27CD             ; START RELATIONAL
5242   27CD D7            push a
5243   27CE 11            mov a, b
5244   27CF 26 41 00      mov b, $41
5245   27D2 B0            cmp a, b
5246   27D3 FD 71         seq ; ==
5247   27D5 E4            pop a
5248   27D6             ; END RELATIONAL
5249   27D6 FD A7         sand a, b
5250   27D8 E4            pop a
5251   27D9 E7            pop d
5252   27DA FD 43         mov [d], b
5253   27DC             ;; for(i = 0; i < 5; i++){ 
5254   27DC             _for68_init:
5255   27DC FA FD FF      lea d, [bp + -3] ; $i
5256   27DF DA            push d
5257   27E0 26 00 00      mov b, $0
5258   27E3 E7            pop d
5259   27E4 FD 43         mov [d], b
5260   27E6             _for68_cond:
5261   27E6 FA FD FF      lea d, [bp + -3] ; $i
5262   27E9 2A            mov b, [d]
5263   27EA             ; START RELATIONAL
5264   27EA D7            push a
5265   27EB 11            mov a, b
5266   27EC 26 05 00      mov b, $5
5267   27EF B0            cmp a, b
5268   27F0 FD 73         slt ; < (signed)
5269   27F2 E4            pop a
5270   27F3             ; END RELATIONAL
5271   27F3 C0 00 00      cmp b, 0
5272   27F6 C6 4C 28      je _for68_exit
5273   27F9             _for68_block:
5274   27F9             ;; test8_struct.ca[i] = i; 
5275   27F9 FA E7 FF      lea d, [bp + -25] ; $test8_struct
5276   27FC 58 01 00      add d, 1
5277   27FF D7            push a
5278   2800 DA            push d
5279   2801 FA FD FF      lea d, [bp + -3] ; $i
5280   2804 2A            mov b, [d]
5281   2805 E7            pop d
5282   2806 5A            add d, b
5283   2807 E4            pop a
5284   2808 DA            push d
5285   2809 FA FD FF      lea d, [bp + -3] ; $i
5286   280C 2A            mov b, [d]
5287   280D E7            pop d
5288   280E FD 3E         mov [d], bl
5289   2810             ;; pass = pass && test8_struct.ca[i] == i; 
5290   2810 FA FF FF      lea d, [bp + -1] ; $pass
5291   2813 DA            push d
5292   2814 FA FF FF      lea d, [bp + -1] ; $pass
5293   2817 2A            mov b, [d]
5294   2818 D7            push a
5295   2819 11            mov a, b
5296   281A FA E7 FF      lea d, [bp + -25] ; $test8_struct
5297   281D 58 01 00      add d, 1
5298   2820 D7            push a
5299   2821 DA            push d
5300   2822 FA FD FF      lea d, [bp + -3] ; $i
5301   2825 2A            mov b, [d]
5302   2826 E7            pop d
5303   2827 5A            add d, b
5304   2828 E4            pop a
5305   2829 32            mov bl, [d]
5306   282A A7 00         mov bh, 0
5307   282C             ; START RELATIONAL
5308   282C D7            push a
5309   282D 11            mov a, b
5310   282E FA FD FF      lea d, [bp + -3] ; $i
5311   2831 2A            mov b, [d]
5312   2832 B0            cmp a, b
5313   2833 FD 71         seq ; ==
5314   2835 E4            pop a
5315   2836             ; END RELATIONAL
5316   2836 FD A7         sand a, b
5317   2838 E4            pop a
5318   2839 E7            pop d
5319   283A FD 43         mov [d], b
5320   283C             _for68_update:
5321   283C FA FD FF      lea d, [bp + -3] ; $i
5322   283F 2A            mov b, [d]
5323   2840 D8            push b
5324   2841 FD 77         inc b
5325   2843 FA FD FF      lea d, [bp + -3] ; $i
5326   2846 FD 43         mov [d], b
5327   2848 E5            pop b
5328   2849 0A E6 27      jmp _for68_cond
5329   284C             _for68_exit:
5330   284C             ;; test8_struct.i1 = 55555; 
5331   284C FA E7 FF      lea d, [bp + -25] ; $test8_struct
5332   284F 58 06 00      add d, 6
5333   2852 DA            push d
5334   2853 26 03 D9      mov b, $d903
5335   2856 E7            pop d
5336   2857 FD 43         mov [d], b
5337   2859             ;; pass = pass && test8_struct.i1 == 55555; 
5338   2859 FA FF FF      lea d, [bp + -1] ; $pass
5339   285C DA            push d
5340   285D FA FF FF      lea d, [bp + -1] ; $pass
5341   2860 2A            mov b, [d]
5342   2861 D7            push a
5343   2862 11            mov a, b
5344   2863 FA E7 FF      lea d, [bp + -25] ; $test8_struct
5345   2866 58 06 00      add d, 6
5346   2869 2A            mov b, [d]
5347   286A             ; START RELATIONAL
5348   286A D7            push a
5349   286B 11            mov a, b
5350   286C 26 03 D9      mov b, $d903
5351   286F B0            cmp a, b
5352   2870 FD 71         seq ; ==
5353   2872 E4            pop a
5354   2873             ; END RELATIONAL
5355   2873 FD A7         sand a, b
5356   2875 E4            pop a
5357   2876 E7            pop d
5358   2877 FD 43         mov [d], b
5359   2879             ;; for(i = 0; i < 5; i++){ 
5360   2879             _for69_init:
5361   2879 FA FD FF      lea d, [bp + -3] ; $i
5362   287C DA            push d
5363   287D 26 00 00      mov b, $0
5364   2880 E7            pop d
5365   2881 FD 43         mov [d], b
5366   2883             _for69_cond:
5367   2883 FA FD FF      lea d, [bp + -3] ; $i
5368   2886 2A            mov b, [d]
5369   2887             ; START RELATIONAL
5370   2887 D7            push a
5371   2888 11            mov a, b
5372   2889 26 05 00      mov b, $5
5373   288C B0            cmp a, b
5374   288D FD 73         slt ; < (signed)
5375   288F E4            pop a
5376   2890             ; END RELATIONAL
5377   2890 C0 00 00      cmp b, 0
5378   2893 C6 ED 28      je _for69_exit
5379   2896             _for69_block:
5380   2896             ;; test8_struct.ia[i] = i; 
5381   2896 FA E7 FF      lea d, [bp + -25] ; $test8_struct
5382   2899 58 08 00      add d, 8
5383   289C D7            push a
5384   289D DA            push d
5385   289E FA FD FF      lea d, [bp + -3] ; $i
5386   28A1 2A            mov b, [d]
5387   28A2 E7            pop d
5388   28A3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5389   28A7 E4            pop a
5390   28A8 DA            push d
5391   28A9 FA FD FF      lea d, [bp + -3] ; $i
5392   28AC 2A            mov b, [d]
5393   28AD E7            pop d
5394   28AE FD 43         mov [d], b
5395   28B0             ;; pass = pass && test8_struct.ia[i] == i; 
5396   28B0 FA FF FF      lea d, [bp + -1] ; $pass
5397   28B3 DA            push d
5398   28B4 FA FF FF      lea d, [bp + -1] ; $pass
5399   28B7 2A            mov b, [d]
5400   28B8 D7            push a
5401   28B9 11            mov a, b
5402   28BA FA E7 FF      lea d, [bp + -25] ; $test8_struct
5403   28BD 58 08 00      add d, 8
5404   28C0 D7            push a
5405   28C1 DA            push d
5406   28C2 FA FD FF      lea d, [bp + -3] ; $i
5407   28C5 2A            mov b, [d]
5408   28C6 E7            pop d
5409   28C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5410   28CB E4            pop a
5411   28CC 2A            mov b, [d]
5412   28CD             ; START RELATIONAL
5413   28CD D7            push a
5414   28CE 11            mov a, b
5415   28CF FA FD FF      lea d, [bp + -3] ; $i
5416   28D2 2A            mov b, [d]
5417   28D3 B0            cmp a, b
5418   28D4 FD 71         seq ; ==
5419   28D6 E4            pop a
5420   28D7             ; END RELATIONAL
5421   28D7 FD A7         sand a, b
5422   28D9 E4            pop a
5423   28DA E7            pop d
5424   28DB FD 43         mov [d], b
5425   28DD             _for69_update:
5426   28DD FA FD FF      lea d, [bp + -3] ; $i
5427   28E0 2A            mov b, [d]
5428   28E1 D8            push b
5429   28E2 FD 77         inc b
5430   28E4 FA FD FF      lea d, [bp + -3] ; $i
5431   28E7 FD 43         mov [d], b
5432   28E9 E5            pop b
5433   28EA 0A 83 28      jmp _for69_cond
5434   28ED             _for69_exit:
5435   28ED             ;; return pass; 
5436   28ED FA FF FF      lea d, [bp + -1] ; $pass
5437   28F0 2A            mov b, [d]
5438   28F1 F9            leave
5439   28F2 09            ret
5440   28F3             
5441   28F3             test9:
5442   28F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5443   28F6             ;; int pass = 1; 
5444   28F6 52 02 00      sub sp, 2 ; pass
5445   28F9             ; --- START LOCAL VAR INITIALIZATION
5446   28F9 FA FF FF      lea d, [bp + -1] ; $pass
5447   28FC DA            push d
5448   28FD 26 01 00      mov b, $1
5449   2900 E7            pop d
5450   2901 FD 43         mov [d], b
5451   2903             ; --- END LOCAL VAR INITIALIZATION
5452   2903             ;; int i, j, k; 
5453   2903 52 02 00      sub sp, 2 ; i
5454   2906 52 02 00      sub sp, 2 ; j
5455   2909 52 02 00      sub sp, 2 ; k
5456   290C             ;; struct t_test9_struct test9_struct; 
5457   290C 52 24 00      sub sp, 36 ; test9_struct
5458   290F             ;; test9_struct.test9_substruct.c1 = 'A'; 
5459   290F FA D5 FF      lea d, [bp + -43] ; $test9_struct
5460   2912 58 06 00      add d, 6
5461   2915 58 00 00      add d, 0
5462   2918 DA            push d
5463   2919 26 41 00      mov b, $41
5464   291C E7            pop d
5465   291D FD 3E         mov [d], bl
5466   291F             ;; pass = pass && test9_struct.test9_substruct.c1 == 'A'; 
5467   291F FA FF FF      lea d, [bp + -1] ; $pass
5468   2922 DA            push d
5469   2923 FA FF FF      lea d, [bp + -1] ; $pass
5470   2926 2A            mov b, [d]
5471   2927 D7            push a
5472   2928 11            mov a, b
5473   2929 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5474   292C 58 06 00      add d, 6
5475   292F 58 00 00      add d, 0
5476   2932 32            mov bl, [d]
5477   2933 A7 00         mov bh, 0
5478   2935             ; START RELATIONAL
5479   2935 D7            push a
5480   2936 11            mov a, b
5481   2937 26 41 00      mov b, $41
5482   293A B0            cmp a, b
5483   293B FD 71         seq ; ==
5484   293D E4            pop a
5485   293E             ; END RELATIONAL
5486   293E FD A7         sand a, b
5487   2940 E4            pop a
5488   2941 E7            pop d
5489   2942 FD 43         mov [d], b
5490   2944             ;; for(i = 0; i < 5; i++){ 
5491   2944             _for70_init:
5492   2944 FA FD FF      lea d, [bp + -3] ; $i
5493   2947 DA            push d
5494   2948 26 00 00      mov b, $0
5495   294B E7            pop d
5496   294C FD 43         mov [d], b
5497   294E             _for70_cond:
5498   294E FA FD FF      lea d, [bp + -3] ; $i
5499   2951 2A            mov b, [d]
5500   2952             ; START RELATIONAL
5501   2952 D7            push a
5502   2953 11            mov a, b
5503   2954 26 05 00      mov b, $5
5504   2957 B0            cmp a, b
5505   2958 FD 73         slt ; < (signed)
5506   295A E4            pop a
5507   295B             ; END RELATIONAL
5508   295B C0 00 00      cmp b, 0
5509   295E C6 BA 29      je _for70_exit
5510   2961             _for70_block:
5511   2961             ;; test9_struct.test9_substruct.ca[i] = i; 
5512   2961 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5513   2964 58 06 00      add d, 6
5514   2967 58 01 00      add d, 1
5515   296A D7            push a
5516   296B DA            push d
5517   296C FA FD FF      lea d, [bp + -3] ; $i
5518   296F 2A            mov b, [d]
5519   2970 E7            pop d
5520   2971 5A            add d, b
5521   2972 E4            pop a
5522   2973 DA            push d
5523   2974 FA FD FF      lea d, [bp + -3] ; $i
5524   2977 2A            mov b, [d]
5525   2978 E7            pop d
5526   2979 FD 3E         mov [d], bl
5527   297B             ;; pass = pass && test9_struct.test9_substruct.ca[i] == i; 
5528   297B FA FF FF      lea d, [bp + -1] ; $pass
5529   297E DA            push d
5530   297F FA FF FF      lea d, [bp + -1] ; $pass
5531   2982 2A            mov b, [d]
5532   2983 D7            push a
5533   2984 11            mov a, b
5534   2985 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5535   2988 58 06 00      add d, 6
5536   298B 58 01 00      add d, 1
5537   298E D7            push a
5538   298F DA            push d
5539   2990 FA FD FF      lea d, [bp + -3] ; $i
5540   2993 2A            mov b, [d]
5541   2994 E7            pop d
5542   2995 5A            add d, b
5543   2996 E4            pop a
5544   2997 32            mov bl, [d]
5545   2998 A7 00         mov bh, 0
5546   299A             ; START RELATIONAL
5547   299A D7            push a
5548   299B 11            mov a, b
5549   299C FA FD FF      lea d, [bp + -3] ; $i
5550   299F 2A            mov b, [d]
5551   29A0 B0            cmp a, b
5552   29A1 FD 71         seq ; ==
5553   29A3 E4            pop a
5554   29A4             ; END RELATIONAL
5555   29A4 FD A7         sand a, b
5556   29A6 E4            pop a
5557   29A7 E7            pop d
5558   29A8 FD 43         mov [d], b
5559   29AA             _for70_update:
5560   29AA FA FD FF      lea d, [bp + -3] ; $i
5561   29AD 2A            mov b, [d]
5562   29AE D8            push b
5563   29AF FD 77         inc b
5564   29B1 FA FD FF      lea d, [bp + -3] ; $i
5565   29B4 FD 43         mov [d], b
5566   29B6 E5            pop b
5567   29B7 0A 4E 29      jmp _for70_cond
5568   29BA             _for70_exit:
5569   29BA             ;; test9_struct.test9_substruct.i1 = 55555; 
5570   29BA FA D5 FF      lea d, [bp + -43] ; $test9_struct
5571   29BD 58 06 00      add d, 6
5572   29C0 58 06 00      add d, 6
5573   29C3 DA            push d
5574   29C4 26 03 D9      mov b, $d903
5575   29C7 E7            pop d
5576   29C8 FD 43         mov [d], b
5577   29CA             ;; pass = pass && test9_struct.test9_substruct.i1 == 55555; 
5578   29CA FA FF FF      lea d, [bp + -1] ; $pass
5579   29CD DA            push d
5580   29CE FA FF FF      lea d, [bp + -1] ; $pass
5581   29D1 2A            mov b, [d]
5582   29D2 D7            push a
5583   29D3 11            mov a, b
5584   29D4 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5585   29D7 58 06 00      add d, 6
5586   29DA 58 06 00      add d, 6
5587   29DD 2A            mov b, [d]
5588   29DE             ; START RELATIONAL
5589   29DE D7            push a
5590   29DF 11            mov a, b
5591   29E0 26 03 D9      mov b, $d903
5592   29E3 B0            cmp a, b
5593   29E4 FD 71         seq ; ==
5594   29E6 E4            pop a
5595   29E7             ; END RELATIONAL
5596   29E7 FD A7         sand a, b
5597   29E9 E4            pop a
5598   29EA E7            pop d
5599   29EB FD 43         mov [d], b
5600   29ED             ;; for(i = 0; i < 5; i++){ 
5601   29ED             _for71_init:
5602   29ED FA FD FF      lea d, [bp + -3] ; $i
5603   29F0 DA            push d
5604   29F1 26 00 00      mov b, $0
5605   29F4 E7            pop d
5606   29F5 FD 43         mov [d], b
5607   29F7             _for71_cond:
5608   29F7 FA FD FF      lea d, [bp + -3] ; $i
5609   29FA 2A            mov b, [d]
5610   29FB             ; START RELATIONAL
5611   29FB D7            push a
5612   29FC 11            mov a, b
5613   29FD 26 05 00      mov b, $5
5614   2A00 B0            cmp a, b
5615   2A01 FD 73         slt ; < (signed)
5616   2A03 E4            pop a
5617   2A04             ; END RELATIONAL
5618   2A04 C0 00 00      cmp b, 0
5619   2A07 C6 67 2A      je _for71_exit
5620   2A0A             _for71_block:
5621   2A0A             ;; test9_struct.test9_substruct.ia[i] = i; 
5622   2A0A FA D5 FF      lea d, [bp + -43] ; $test9_struct
5623   2A0D 58 06 00      add d, 6
5624   2A10 58 08 00      add d, 8
5625   2A13 D7            push a
5626   2A14 DA            push d
5627   2A15 FA FD FF      lea d, [bp + -3] ; $i
5628   2A18 2A            mov b, [d]
5629   2A19 E7            pop d
5630   2A1A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5631   2A1E E4            pop a
5632   2A1F DA            push d
5633   2A20 FA FD FF      lea d, [bp + -3] ; $i
5634   2A23 2A            mov b, [d]
5635   2A24 E7            pop d
5636   2A25 FD 43         mov [d], b
5637   2A27             ;; pass = pass && test9_struct.test9_substruct.ia[i] == i; 
5638   2A27 FA FF FF      lea d, [bp + -1] ; $pass
5639   2A2A DA            push d
5640   2A2B FA FF FF      lea d, [bp + -1] ; $pass
5641   2A2E 2A            mov b, [d]
5642   2A2F D7            push a
5643   2A30 11            mov a, b
5644   2A31 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5645   2A34 58 06 00      add d, 6
5646   2A37 58 08 00      add d, 8
5647   2A3A D7            push a
5648   2A3B DA            push d
5649   2A3C FA FD FF      lea d, [bp + -3] ; $i
5650   2A3F 2A            mov b, [d]
5651   2A40 E7            pop d
5652   2A41 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5653   2A45 E4            pop a
5654   2A46 2A            mov b, [d]
5655   2A47             ; START RELATIONAL
5656   2A47 D7            push a
5657   2A48 11            mov a, b
5658   2A49 FA FD FF      lea d, [bp + -3] ; $i
5659   2A4C 2A            mov b, [d]
5660   2A4D B0            cmp a, b
5661   2A4E FD 71         seq ; ==
5662   2A50 E4            pop a
5663   2A51             ; END RELATIONAL
5664   2A51 FD A7         sand a, b
5665   2A53 E4            pop a
5666   2A54 E7            pop d
5667   2A55 FD 43         mov [d], b
5668   2A57             _for71_update:
5669   2A57 FA FD FF      lea d, [bp + -3] ; $i
5670   2A5A 2A            mov b, [d]
5671   2A5B D8            push b
5672   2A5C FD 77         inc b
5673   2A5E FA FD FF      lea d, [bp + -3] ; $i
5674   2A61 FD 43         mov [d], b
5675   2A63 E5            pop b
5676   2A64 0A F7 29      jmp _for71_cond
5677   2A67             _for71_exit:
5678   2A67             ;; return pass; 
5679   2A67 FA FF FF      lea d, [bp + -1] ; $pass
5680   2A6A 2A            mov b, [d]
5681   2A6B F9            leave
5682   2A6C 09            ret
5683   2A6D             ; --- END TEXT BLOCK
5684   2A6D             
5685   2A6D             ; --- BEGIN DATA BLOCK
5686   2A6D             _gca1_data: 
5687   2A6D 30 31 32 33 .db $30,$31,$32,$33,$34,
5687   2A71 34 
5688   2A72             _gia1_data: 
5689   2A72 00 00 01 00 .dw $0,$1,$2,$3,$4,
5689   2A76 02 00 03 00 
5689   2A7A 04 00 
5690   2A7C 00 00 00 00 _gca2_data: .fill 25, 0
5690   2A80 00 00 00 00 
5690   2A84 00 00 00 00 
5690   2A88 00 00 00 00 
5690   2A8C 00 00 00 00 
5690   2A90 00 00 00 00 
5690   2A94 00 
5691   2A95 00 00 00 00 _gia2_data: .fill 50, 0
5691   2A99 00 00 00 00 
5691   2A9D 00 00 00 00 
5691   2AA1 00 00 00 00 
5691   2AA5 00 00 00 00 
5691   2AA9 00 00 00 00 
5691   2AAD 00 00 00 00 
5691   2AB1 00 00 00 00 
5691   2AB5 00 00 00 00 
5691   2AB9 00 00 00 00 
5691   2ABD 00 00 00 00 
5691   2AC1 00 00 00 00 
5691   2AC5 00 00 
5692   2AC7 00 00 00 00 _test6_struct_data: .fill 18, 0
5692   2ACB 00 00 00 00 
5692   2ACF 00 00 00 00 
5692   2AD3 00 00 00 00 
5692   2AD7 00 00 
5693   2AD9 00 00 00 00 _test7_struct_data: .fill 36, 0
5693   2ADD 00 00 00 00 
5693   2AE1 00 00 00 00 
5693   2AE5 00 00 00 00 
5693   2AE9 00 00 00 00 
5693   2AED 00 00 00 00 
5693   2AF1 00 00 00 00 
5693   2AF5 00 00 00 00 
5693   2AF9 00 00 00 00 
5694   2AFD 54 65 73 74 _s0: .db "Test %d, Result: %d\n", 0
5694   2B01 20 25 64 2C 
5694   2B05 20 52 65 73 
5694   2B09 75 6C 74 3A 
5694   2B0D 20 25 64 0A 
5694   2B11 00 
5695   2B12 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
5695   2B16 70 65 63 74 
5695   2B1A 65 64 20 66 
5695   2B1E 6F 72 6D 61 
5695   2B22 74 20 69 6E 
5695   2B26 20 70 72 69 
5695   2B2A 6E 74 66 2E 
5695   2B2E 00 
5696   2B2F 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
5696   2B33 72 3A 20 55 
5696   2B37 6E 6B 6E 6F 
5696   2B3B 77 6E 20 61 
5696   2B3F 72 67 75 6D 
5696   2B43 65 6E 74 20 
5696   2B47 74 79 70 65 
5696   2B4B 2E 0A 00 
5697   2B4E 1B 5B 32 4A _s3: .db "\033[2J\033[H", 0
5697   2B52 1B 5B 48 00 
5698   2B56             
5699   2B56 58 2B       _heap_top: .dw _heap
5700   2B58 00          _heap: .db 0
5701   2B59             ; --- END DATA BLOCK
5702   2B59             
5703   2B59             .end
tasm: Number of errors = 0
