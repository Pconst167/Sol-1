0001   0000             ; --- FILENAME: ctestsuite/testsuite1
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $pass 
0011   0408             ; $i 
0012   0408             ; $nbr_tests 
0013   0408 10 0A 00      mov a, $a
0014   040B 45 E9 FF      mov [bp + -23], a
0015   040E 52 18 00      sub sp, 24
0016   0411             ;; for(i = 0; i < nbr_tests; i++){ 
0017   0411             _for1_init:
0018   0411 FA EB FF      lea d, [bp + -21] ; $i
0019   0414 DA            push d
0020   0415 26 00 00      mov b, $0
0021   0418 E7            pop d
0022   0419 FD 43         mov [d], b
0023   041B             _for1_cond:
0024   041B FA EB FF      lea d, [bp + -21] ; $i
0025   041E 2A            mov b, [d]
0026   041F             ; START RELATIONAL
0027   041F D7            push a
0028   0420 11            mov a, b
0029   0421 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0030   0424 2A            mov b, [d]
0031   0425 B0            cmp a, b
0032   0426 FD 75         slu ; <= (unsigned)
0033   0428 E4            pop a
0034   0429             ; END RELATIONAL
0035   0429 C0 00 00      cmp b, 0
0036   042C C6 55 04      je _for1_exit
0037   042F             _for1_block:
0038   042F             ;; pass[i] = -1; 
0039   042F FA ED FF      lea d, [bp + -19] ; $pass
0040   0432 D7            push a
0041   0433 DA            push d
0042   0434 FA EB FF      lea d, [bp + -21] ; $i
0043   0437 2A            mov b, [d]
0044   0438 E7            pop d
0045   0439 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0046   043D E4            pop a
0047   043E DA            push d
0048   043F 26 FF FF      mov b, $ffff
0049   0442 E7            pop d
0050   0443 FD 43         mov [d], b
0051   0445             _for1_update:
0052   0445 FA EB FF      lea d, [bp + -21] ; $i
0053   0448 2A            mov b, [d]
0054   0449 D8            push b
0055   044A FD 77         inc b
0056   044C FA EB FF      lea d, [bp + -21] ; $i
0057   044F FD 43         mov [d], b
0058   0451 E5            pop b
0059   0452 0A 1B 04      jmp _for1_cond
0060   0455             _for1_exit:
0061   0455             ;; pass[0] = test0(); 
0062   0455 FA ED FF      lea d, [bp + -19] ; $pass
0063   0458 D7            push a
0064   0459 DA            push d
0065   045A 26 00 00      mov b, $0
0066   045D E7            pop d
0067   045E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0068   0462 E4            pop a
0069   0463 DA            push d
0070   0464 07 8C 15      call test0
0071   0467 E7            pop d
0072   0468 FD 43         mov [d], b
0073   046A             ;; pass[1] = test1(); 
0074   046A FA ED FF      lea d, [bp + -19] ; $pass
0075   046D D7            push a
0076   046E DA            push d
0077   046F 26 01 00      mov b, $1
0078   0472 E7            pop d
0079   0473 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0080   0477 E4            pop a
0081   0478 DA            push d
0082   0479 07 90 16      call test1
0083   047C E7            pop d
0084   047D FD 43         mov [d], b
0085   047F             ;; pass[2] = test2(); 
0086   047F FA ED FF      lea d, [bp + -19] ; $pass
0087   0482 D7            push a
0088   0483 DA            push d
0089   0484 26 02 00      mov b, $2
0090   0487 E7            pop d
0091   0488 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0092   048C E4            pop a
0093   048D DA            push d
0094   048E 07 36 18      call test2
0095   0491 E7            pop d
0096   0492 FD 43         mov [d], b
0097   0494             ;; pass[3] = test3(); 
0098   0494 FA ED FF      lea d, [bp + -19] ; $pass
0099   0497 D7            push a
0100   0498 DA            push d
0101   0499 26 03 00      mov b, $3
0102   049C E7            pop d
0103   049D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0104   04A1 E4            pop a
0105   04A2 DA            push d
0106   04A3 07 5A 19      call test3
0107   04A6 E7            pop d
0108   04A7 FD 43         mov [d], b
0109   04A9             ;; pass[4] = test4(); 
0110   04A9 FA ED FF      lea d, [bp + -19] ; $pass
0111   04AC D7            push a
0112   04AD DA            push d
0113   04AE 26 04 00      mov b, $4
0114   04B1 E7            pop d
0115   04B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0116   04B6 E4            pop a
0117   04B7 DA            push d
0118   04B8 07 00 1B      call test4
0119   04BB E7            pop d
0120   04BC FD 43         mov [d], b
0121   04BE             ;; pass[5] = test5(); 
0122   04BE FA ED FF      lea d, [bp + -19] ; $pass
0123   04C1 D7            push a
0124   04C2 DA            push d
0125   04C3 26 05 00      mov b, $5
0126   04C6 E7            pop d
0127   04C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0128   04CB E4            pop a
0129   04CC DA            push d
0130   04CD 07 58 1E      call test5
0131   04D0 E7            pop d
0132   04D1 FD 43         mov [d], b
0133   04D3             ;; pass[6] = test6(); 
0134   04D3 FA ED FF      lea d, [bp + -19] ; $pass
0135   04D6 D7            push a
0136   04D7 DA            push d
0137   04D8 26 06 00      mov b, $6
0138   04DB E7            pop d
0139   04DC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0140   04E0 E4            pop a
0141   04E1 DA            push d
0142   04E2 07 3C 1F      call test6
0143   04E5 E7            pop d
0144   04E6 FD 43         mov [d], b
0145   04E8             ;; pass[7] = test7(); 
0146   04E8 FA ED FF      lea d, [bp + -19] ; $pass
0147   04EB D7            push a
0148   04EC DA            push d
0149   04ED 26 07 00      mov b, $7
0150   04F0 E7            pop d
0151   04F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0152   04F5 E4            pop a
0153   04F6 DA            push d
0154   04F7 07 8E 20      call test7
0155   04FA E7            pop d
0156   04FB FD 43         mov [d], b
0157   04FD             ;; pass[8] = test8(); 
0158   04FD FA ED FF      lea d, [bp + -19] ; $pass
0159   0500 D7            push a
0160   0501 DA            push d
0161   0502 26 08 00      mov b, $8
0162   0505 E7            pop d
0163   0506 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0164   050A E4            pop a
0165   050B DA            push d
0166   050C 07 F8 21      call test8
0167   050F E7            pop d
0168   0510 FD 43         mov [d], b
0169   0512             ;; pass[9] = test9(); 
0170   0512 FA ED FF      lea d, [bp + -19] ; $pass
0171   0515 D7            push a
0172   0516 DA            push d
0173   0517 26 09 00      mov b, $9
0174   051A E7            pop d
0175   051B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0176   051F E4            pop a
0177   0520 DA            push d
0178   0521 07 4A 23      call test9
0179   0524 E7            pop d
0180   0525 FD 43         mov [d], b
0181   0527             ;; for(i = 0; i < nbr_tests; i++) 
0182   0527             _for2_init:
0183   0527 FA EB FF      lea d, [bp + -21] ; $i
0184   052A DA            push d
0185   052B 26 00 00      mov b, $0
0186   052E E7            pop d
0187   052F FD 43         mov [d], b
0188   0531             _for2_cond:
0189   0531 FA EB FF      lea d, [bp + -21] ; $i
0190   0534 2A            mov b, [d]
0191   0535             ; START RELATIONAL
0192   0535 D7            push a
0193   0536 11            mov a, b
0194   0537 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0195   053A 2A            mov b, [d]
0196   053B B0            cmp a, b
0197   053C FD 75         slu ; <= (unsigned)
0198   053E E4            pop a
0199   053F             ; END RELATIONAL
0200   053F C0 00 00      cmp b, 0
0201   0542 C6 78 05      je _for2_exit
0202   0545             _for2_block:
0203   0545             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0204   0545 FA ED FF      lea d, [bp + -19] ; $pass
0205   0548 D7            push a
0206   0549 DA            push d
0207   054A FA EB FF      lea d, [bp + -21] ; $i
0208   054D 2A            mov b, [d]
0209   054E E7            pop d
0210   054F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0211   0553 E4            pop a
0212   0554 2A            mov b, [d]
0213   0555 FD AB         swp b
0214   0557 D8            push b
0215   0558 FA EB FF      lea d, [bp + -21] ; $i
0216   055B 2A            mov b, [d]
0217   055C FD AB         swp b
0218   055E D8            push b
0219   055F 26 44 25      mov b, __s0 ; "Test %d, Result: %d\n"
0220   0562 FD AB         swp b
0221   0564 D8            push b
0222   0565 07 1A 09      call printf
0223   0568             _for2_update:
0224   0568 FA EB FF      lea d, [bp + -21] ; $i
0225   056B 2A            mov b, [d]
0226   056C D8            push b
0227   056D FD 77         inc b
0228   056F FA EB FF      lea d, [bp + -21] ; $i
0229   0572 FD 43         mov [d], b
0230   0574 E5            pop b
0231   0575 0A 31 05      jmp _for2_cond
0232   0578             _for2_exit:
0233   0578 05 0B         syscall sys_terminate_proc
0234   057A             
0235   057A             strcpy:
0236   057A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0237   057D             ; $psrc 
0238   057D             ; $pdest 
0239   057D 52 04 00      sub sp, 4
0240   0580             ;; psrc = src; 
0241   0580 FA FF FF      lea d, [bp + -1] ; $psrc
0242   0583 DA            push d
0243   0584 FA 07 00      lea d, [bp + 7] ; $src
0244   0587 2A            mov b, [d]
0245   0588 E7            pop d
0246   0589 FD 43         mov [d], b
0247   058B             ;; pdest = dest; 
0248   058B FA FD FF      lea d, [bp + -3] ; $pdest
0249   058E DA            push d
0250   058F FA 05 00      lea d, [bp + 5] ; $dest
0251   0592 2A            mov b, [d]
0252   0593 E7            pop d
0253   0594 FD 43         mov [d], b
0254   0596             ;; while(*psrc) *pdest++ = *psrc++; 
0255   0596             _while3_cond:
0256   0596 FA FF FF      lea d, [bp + -1] ; $psrc
0257   0599 2A            mov b, [d]
0258   059A 74            mov d, b
0259   059B 32            mov bl, [d]
0260   059C A7 00         mov bh, 0
0261   059E C0 00 00      cmp b, 0
0262   05A1 C6 C9 05      je _while3_exit
0263   05A4             _while3_block:
0264   05A4             ;; *pdest++ = *psrc++; 
0265   05A4 FA FD FF      lea d, [bp + -3] ; $pdest
0266   05A7 2A            mov b, [d]
0267   05A8 D8            push b
0268   05A9 FD 77         inc b
0269   05AB FA FD FF      lea d, [bp + -3] ; $pdest
0270   05AE FD 43         mov [d], b
0271   05B0 E5            pop b
0272   05B1 D8            push b
0273   05B2 FA FF FF      lea d, [bp + -1] ; $psrc
0274   05B5 2A            mov b, [d]
0275   05B6 D8            push b
0276   05B7 FD 77         inc b
0277   05B9 FA FF FF      lea d, [bp + -1] ; $psrc
0278   05BC FD 43         mov [d], b
0279   05BE E5            pop b
0280   05BF 74            mov d, b
0281   05C0 32            mov bl, [d]
0282   05C1 A7 00         mov bh, 0
0283   05C3 E7            pop d
0284   05C4 FD 3E         mov [d], bl
0285   05C6 0A 96 05      jmp _while3_cond
0286   05C9             _while3_exit:
0287   05C9             ;; *pdest = '\0'; 
0288   05C9 FA FD FF      lea d, [bp + -3] ; $pdest
0289   05CC 2A            mov b, [d]
0290   05CD D8            push b
0291   05CE 26 00 00      mov b, $0
0292   05D1 E7            pop d
0293   05D2 FD 3E         mov [d], bl
0294   05D4 F9            leave
0295   05D5 09            ret
0296   05D6             
0297   05D6             strcmp:
0298   05D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0299   05D9             ;; while (*s1 && (*s1 == *s2)) { 
0300   05D9             _while4_cond:
0301   05D9 FA 05 00      lea d, [bp + 5] ; $s1
0302   05DC 2A            mov b, [d]
0303   05DD 74            mov d, b
0304   05DE 32            mov bl, [d]
0305   05DF A7 00         mov bh, 0
0306   05E1 D7            push a
0307   05E2 11            mov a, b
0308   05E3 FA 05 00      lea d, [bp + 5] ; $s1
0309   05E6 2A            mov b, [d]
0310   05E7 74            mov d, b
0311   05E8 32            mov bl, [d]
0312   05E9 A7 00         mov bh, 0
0313   05EB             ; START RELATIONAL
0314   05EB D7            push a
0315   05EC 11            mov a, b
0316   05ED FA 07 00      lea d, [bp + 7] ; $s2
0317   05F0 2A            mov b, [d]
0318   05F1 74            mov d, b
0319   05F2 32            mov bl, [d]
0320   05F3 A7 00         mov bh, 0
0321   05F5 B0            cmp a, b
0322   05F6 FD 71         seq ; ==
0323   05F8 E4            pop a
0324   05F9             ; END RELATIONAL
0325   05F9 FD A7         sand a, b ; &&
0326   05FB E4            pop a
0327   05FC C0 00 00      cmp b, 0
0328   05FF C6 1F 06      je _while4_exit
0329   0602             _while4_block:
0330   0602             ;; s1++; 
0331   0602 FA 05 00      lea d, [bp + 5] ; $s1
0332   0605 2A            mov b, [d]
0333   0606 D8            push b
0334   0607 FD 77         inc b
0335   0609 FA 05 00      lea d, [bp + 5] ; $s1
0336   060C FD 43         mov [d], b
0337   060E E5            pop b
0338   060F             ;; s2++; 
0339   060F FA 07 00      lea d, [bp + 7] ; $s2
0340   0612 2A            mov b, [d]
0341   0613 D8            push b
0342   0614 FD 77         inc b
0343   0616 FA 07 00      lea d, [bp + 7] ; $s2
0344   0619 FD 43         mov [d], b
0345   061B E5            pop b
0346   061C 0A D9 05      jmp _while4_cond
0347   061F             _while4_exit:
0348   061F             ;; return *s1 - *s2; 
0349   061F FA 05 00      lea d, [bp + 5] ; $s1
0350   0622 2A            mov b, [d]
0351   0623 74            mov d, b
0352   0624 32            mov bl, [d]
0353   0625 A7 00         mov bh, 0
0354   0627             ; START TERMS
0355   0627 D7            push a
0356   0628 11            mov a, b
0357   0629 FA 07 00      lea d, [bp + 7] ; $s2
0358   062C 2A            mov b, [d]
0359   062D 74            mov d, b
0360   062E 32            mov bl, [d]
0361   062F A7 00         mov bh, 0
0362   0631 60            sub a, b
0363   0632 27            mov b, a
0364   0633 E4            pop a
0365   0634             ; END TERMS
0366   0634 F9            leave
0367   0635 09            ret
0368   0636             
0369   0636             strcat:
0370   0636 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0371   0639             ; $dest_len 
0372   0639             ; $i 
0373   0639 52 04 00      sub sp, 4
0374   063C             ;; dest_len = strlen(dest); 
0375   063C FA FF FF      lea d, [bp + -1] ; $dest_len
0376   063F DA            push d
0377   0640 FA 05 00      lea d, [bp + 5] ; $dest
0378   0643 2A            mov b, [d]
0379   0644 FD AB         swp b
0380   0646 D8            push b
0381   0647 07 E9 06      call strlen
0382   064A 51 02 00      add sp, 2
0383   064D E7            pop d
0384   064E FD 43         mov [d], b
0385   0650             ;; for (i = 0; src[i] != 0; i=i+1) { 
0386   0650             _for5_init:
0387   0650 FA FD FF      lea d, [bp + -3] ; $i
0388   0653 DA            push d
0389   0654 26 00 00      mov b, $0
0390   0657 E7            pop d
0391   0658 FD 43         mov [d], b
0392   065A             _for5_cond:
0393   065A FA 07 00      lea d, [bp + 7] ; $src
0394   065D FD 2A         mov d, [d]
0395   065F D7            push a
0396   0660 DA            push d
0397   0661 FA FD FF      lea d, [bp + -3] ; $i
0398   0664 2A            mov b, [d]
0399   0665 E7            pop d
0400   0666 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0401   066A E4            pop a
0402   066B 32            mov bl, [d]
0403   066C A7 00         mov bh, 0
0404   066E             ; START RELATIONAL
0405   066E D7            push a
0406   066F 11            mov a, b
0407   0670 26 00 00      mov b, $0
0408   0673 B0            cmp a, b
0409   0674 FD 72         sneq ; !=
0410   0676 E4            pop a
0411   0677             ; END RELATIONAL
0412   0677 C0 00 00      cmp b, 0
0413   067A C6 C3 06      je _for5_exit
0414   067D             _for5_block:
0415   067D             ;; dest[dest_len + i] = src[i]; 
0416   067D FA 05 00      lea d, [bp + 5] ; $dest
0417   0680 FD 2A         mov d, [d]
0418   0682 D7            push a
0419   0683 DA            push d
0420   0684 FA FF FF      lea d, [bp + -1] ; $dest_len
0421   0687 2A            mov b, [d]
0422   0688             ; START TERMS
0423   0688 D7            push a
0424   0689 11            mov a, b
0425   068A FA FD FF      lea d, [bp + -3] ; $i
0426   068D 2A            mov b, [d]
0427   068E 56            add b, a
0428   068F E4            pop a
0429   0690             ; END TERMS
0430   0690 E7            pop d
0431   0691 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0432   0695 E4            pop a
0433   0696 DA            push d
0434   0697 FA 07 00      lea d, [bp + 7] ; $src
0435   069A FD 2A         mov d, [d]
0436   069C D7            push a
0437   069D DA            push d
0438   069E FA FD FF      lea d, [bp + -3] ; $i
0439   06A1 2A            mov b, [d]
0440   06A2 E7            pop d
0441   06A3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0442   06A7 E4            pop a
0443   06A8 32            mov bl, [d]
0444   06A9 A7 00         mov bh, 0
0445   06AB E7            pop d
0446   06AC FD 3E         mov [d], bl
0447   06AE             _for5_update:
0448   06AE FA FD FF      lea d, [bp + -3] ; $i
0449   06B1 DA            push d
0450   06B2 FA FD FF      lea d, [bp + -3] ; $i
0451   06B5 2A            mov b, [d]
0452   06B6             ; START TERMS
0453   06B6 D7            push a
0454   06B7 11            mov a, b
0455   06B8 26 01 00      mov b, $1
0456   06BB 56            add b, a
0457   06BC E4            pop a
0458   06BD             ; END TERMS
0459   06BD E7            pop d
0460   06BE FD 43         mov [d], b
0461   06C0 0A 5A 06      jmp _for5_cond
0462   06C3             _for5_exit:
0463   06C3             ;; dest[dest_len + i] = 0; 
0464   06C3 FA 05 00      lea d, [bp + 5] ; $dest
0465   06C6 FD 2A         mov d, [d]
0466   06C8 D7            push a
0467   06C9 DA            push d
0468   06CA FA FF FF      lea d, [bp + -1] ; $dest_len
0469   06CD 2A            mov b, [d]
0470   06CE             ; START TERMS
0471   06CE D7            push a
0472   06CF 11            mov a, b
0473   06D0 FA FD FF      lea d, [bp + -3] ; $i
0474   06D3 2A            mov b, [d]
0475   06D4 56            add b, a
0476   06D5 E4            pop a
0477   06D6             ; END TERMS
0478   06D6 E7            pop d
0479   06D7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0480   06DB E4            pop a
0481   06DC DA            push d
0482   06DD 26 00 00      mov b, $0
0483   06E0 E7            pop d
0484   06E1 FD 3E         mov [d], bl
0485   06E3             ;; return dest; 
0486   06E3 FA 05 00      lea d, [bp + 5] ; $dest
0487   06E6 2A            mov b, [d]
0488   06E7 F9            leave
0489   06E8 09            ret
0490   06E9             
0491   06E9             strlen:
0492   06E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0493   06EC             ; $length 
0494   06EC 52 02 00      sub sp, 2
0495   06EF             ;; length = 0; 
0496   06EF FA FF FF      lea d, [bp + -1] ; $length
0497   06F2 DA            push d
0498   06F3 26 00 00      mov b, $0
0499   06F6 E7            pop d
0500   06F7 FD 43         mov [d], b
0501   06F9             ;; while (str[length] != 0) { 
0502   06F9             _while6_cond:
0503   06F9 FA 05 00      lea d, [bp + 5] ; $str
0504   06FC FD 2A         mov d, [d]
0505   06FE D7            push a
0506   06FF DA            push d
0507   0700 FA FF FF      lea d, [bp + -1] ; $length
0508   0703 2A            mov b, [d]
0509   0704 E7            pop d
0510   0705 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0511   0709 E4            pop a
0512   070A 32            mov bl, [d]
0513   070B A7 00         mov bh, 0
0514   070D             ; START RELATIONAL
0515   070D D7            push a
0516   070E 11            mov a, b
0517   070F 26 00 00      mov b, $0
0518   0712 B0            cmp a, b
0519   0713 FD 72         sneq ; !=
0520   0715 E4            pop a
0521   0716             ; END RELATIONAL
0522   0716 C0 00 00      cmp b, 0
0523   0719 C6 2C 07      je _while6_exit
0524   071C             _while6_block:
0525   071C             ;; length++; 
0526   071C FA FF FF      lea d, [bp + -1] ; $length
0527   071F 2A            mov b, [d]
0528   0720 D8            push b
0529   0721 FD 77         inc b
0530   0723 FA FF FF      lea d, [bp + -1] ; $length
0531   0726 FD 43         mov [d], b
0532   0728 E5            pop b
0533   0729 0A F9 06      jmp _while6_cond
0534   072C             _while6_exit:
0535   072C             ;; return length; 
0536   072C FA FF FF      lea d, [bp + -1] ; $length
0537   072F 2A            mov b, [d]
0538   0730 F9            leave
0539   0731 09            ret
0540   0732             
0541   0732             exit:
0542   0732 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0543   0735             
0544   0735             ; --- BEGIN INLINE ASM BLOCK
0545   0735 05 0B         syscall sys_terminate_proc
0546   0737             ; --- END INLINE ASM BLOCK
0547   0737             
0548   0737 F9            leave
0549   0738 09            ret
0550   0739             
0551   0739             atoi:
0552   0739 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0553   073C             ; $result 
0554   073C 10 00 00      mov a, $0
0555   073F 45 FF FF      mov [bp + -1], a
0556   0742             ; $sign 
0557   0742 10 01 00      mov a, $1
0558   0745 45 FD FF      mov [bp + -3], a
0559   0748 52 04 00      sub sp, 4
0560   074B             ;; while (*str == ' ') str++; 
0561   074B             _while7_cond:
0562   074B FA 05 00      lea d, [bp + 5] ; $str
0563   074E 2A            mov b, [d]
0564   074F 74            mov d, b
0565   0750 32            mov bl, [d]
0566   0751 A7 00         mov bh, 0
0567   0753             ; START RELATIONAL
0568   0753 D7            push a
0569   0754 11            mov a, b
0570   0755 26 20 00      mov b, $20
0571   0758 B0            cmp a, b
0572   0759 FD 71         seq ; ==
0573   075B E4            pop a
0574   075C             ; END RELATIONAL
0575   075C C0 00 00      cmp b, 0
0576   075F C6 72 07      je _while7_exit
0577   0762             _while7_block:
0578   0762             ;; str++; 
0579   0762 FA 05 00      lea d, [bp + 5] ; $str
0580   0765 2A            mov b, [d]
0581   0766 D8            push b
0582   0767 FD 77         inc b
0583   0769 FA 05 00      lea d, [bp + 5] ; $str
0584   076C FD 43         mov [d], b
0585   076E E5            pop b
0586   076F 0A 4B 07      jmp _while7_cond
0587   0772             _while7_exit:
0588   0772             ;; if (*str == '-' || *str == '+') { 
0589   0772             _if8_cond:
0590   0772 FA 05 00      lea d, [bp + 5] ; $str
0591   0775 2A            mov b, [d]
0592   0776 74            mov d, b
0593   0777 32            mov bl, [d]
0594   0778 A7 00         mov bh, 0
0595   077A             ; START RELATIONAL
0596   077A D7            push a
0597   077B 11            mov a, b
0598   077C 26 2D 00      mov b, $2d
0599   077F B0            cmp a, b
0600   0780 FD 71         seq ; ==
0601   0782 E4            pop a
0602   0783             ; END RELATIONAL
0603   0783 D7            push a
0604   0784 11            mov a, b
0605   0785 FA 05 00      lea d, [bp + 5] ; $str
0606   0788 2A            mov b, [d]
0607   0789 74            mov d, b
0608   078A 32            mov bl, [d]
0609   078B A7 00         mov bh, 0
0610   078D             ; START RELATIONAL
0611   078D D7            push a
0612   078E 11            mov a, b
0613   078F 26 2B 00      mov b, $2b
0614   0792 B0            cmp a, b
0615   0793 FD 71         seq ; ==
0616   0795 E4            pop a
0617   0796             ; END RELATIONAL
0618   0796 FD A8         sor a, b ; ||
0619   0798 E4            pop a
0620   0799 C0 00 00      cmp b, 0
0621   079C C6 D3 07      je _if8_exit
0622   079F             _if8_true:
0623   079F             ;; if (*str == '-') sign = -1; 
0624   079F             _if9_cond:
0625   079F FA 05 00      lea d, [bp + 5] ; $str
0626   07A2 2A            mov b, [d]
0627   07A3 74            mov d, b
0628   07A4 32            mov bl, [d]
0629   07A5 A7 00         mov bh, 0
0630   07A7             ; START RELATIONAL
0631   07A7 D7            push a
0632   07A8 11            mov a, b
0633   07A9 26 2D 00      mov b, $2d
0634   07AC B0            cmp a, b
0635   07AD FD 71         seq ; ==
0636   07AF E4            pop a
0637   07B0             ; END RELATIONAL
0638   07B0 C0 00 00      cmp b, 0
0639   07B3 C6 C3 07      je _if9_exit
0640   07B6             _if9_true:
0641   07B6             ;; sign = -1; 
0642   07B6 FA FD FF      lea d, [bp + -3] ; $sign
0643   07B9 DA            push d
0644   07BA 26 FF FF      mov b, $ffff
0645   07BD E7            pop d
0646   07BE FD 43         mov [d], b
0647   07C0 0A C3 07      jmp _if9_exit
0648   07C3             _if9_exit:
0649   07C3             ;; str++; 
0650   07C3 FA 05 00      lea d, [bp + 5] ; $str
0651   07C6 2A            mov b, [d]
0652   07C7 D8            push b
0653   07C8 FD 77         inc b
0654   07CA FA 05 00      lea d, [bp + 5] ; $str
0655   07CD FD 43         mov [d], b
0656   07CF E5            pop b
0657   07D0 0A D3 07      jmp _if8_exit
0658   07D3             _if8_exit:
0659   07D3             ;; while (*str >= '0' && *str <= '9') { 
0660   07D3             _while10_cond:
0661   07D3 FA 05 00      lea d, [bp + 5] ; $str
0662   07D6 2A            mov b, [d]
0663   07D7 74            mov d, b
0664   07D8 32            mov bl, [d]
0665   07D9 A7 00         mov bh, 0
0666   07DB             ; START RELATIONAL
0667   07DB D7            push a
0668   07DC 11            mov a, b
0669   07DD 26 30 00      mov b, $30
0670   07E0 B0            cmp a, b
0671   07E1 FD 82         sgeu ; >= (unsigned)
0672   07E3 E4            pop a
0673   07E4             ; END RELATIONAL
0674   07E4 D7            push a
0675   07E5 11            mov a, b
0676   07E6 FA 05 00      lea d, [bp + 5] ; $str
0677   07E9 2A            mov b, [d]
0678   07EA 74            mov d, b
0679   07EB 32            mov bl, [d]
0680   07EC A7 00         mov bh, 0
0681   07EE             ; START RELATIONAL
0682   07EE D7            push a
0683   07EF 11            mov a, b
0684   07F0 26 39 00      mov b, $39
0685   07F3 B0            cmp a, b
0686   07F4 FD 76         sleu ; <= (unsigned)
0687   07F6 E4            pop a
0688   07F7             ; END RELATIONAL
0689   07F7 FD A7         sand a, b ; &&
0690   07F9 E4            pop a
0691   07FA C0 00 00      cmp b, 0
0692   07FD C6 38 08      je _while10_exit
0693   0800             _while10_block:
0694   0800             ;; result = result * 10 + (*str - '0'); 
0695   0800 FA FF FF      lea d, [bp + -1] ; $result
0696   0803 DA            push d
0697   0804 FA FF FF      lea d, [bp + -1] ; $result
0698   0807 2A            mov b, [d]
0699   0808             ; START FACTORS
0700   0808 D7            push a
0701   0809 11            mov a, b
0702   080A 26 0A 00      mov b, $a
0703   080D AC            mul a, b ; *
0704   080E 11            mov a, b
0705   080F 27            mov b, a
0706   0810 E4            pop a
0707   0811             ; END FACTORS
0708   0811             ; START TERMS
0709   0811 D7            push a
0710   0812 11            mov a, b
0711   0813 FA 05 00      lea d, [bp + 5] ; $str
0712   0816 2A            mov b, [d]
0713   0817 74            mov d, b
0714   0818 32            mov bl, [d]
0715   0819 A7 00         mov bh, 0
0716   081B             ; START TERMS
0717   081B D7            push a
0718   081C 11            mov a, b
0719   081D 26 30 00      mov b, $30
0720   0820 60            sub a, b
0721   0821 27            mov b, a
0722   0822 E4            pop a
0723   0823             ; END TERMS
0724   0823 56            add b, a
0725   0824 E4            pop a
0726   0825             ; END TERMS
0727   0825 E7            pop d
0728   0826 FD 43         mov [d], b
0729   0828             ;; str++; 
0730   0828 FA 05 00      lea d, [bp + 5] ; $str
0731   082B 2A            mov b, [d]
0732   082C D8            push b
0733   082D FD 77         inc b
0734   082F FA 05 00      lea d, [bp + 5] ; $str
0735   0832 FD 43         mov [d], b
0736   0834 E5            pop b
0737   0835 0A D3 07      jmp _while10_cond
0738   0838             _while10_exit:
0739   0838             ;; return sign * result; 
0740   0838 FA FD FF      lea d, [bp + -3] ; $sign
0741   083B 2A            mov b, [d]
0742   083C             ; START FACTORS
0743   083C D7            push a
0744   083D 11            mov a, b
0745   083E FA FF FF      lea d, [bp + -1] ; $result
0746   0841 2A            mov b, [d]
0747   0842 AC            mul a, b ; *
0748   0843 11            mov a, b
0749   0844 27            mov b, a
0750   0845 E4            pop a
0751   0846             ; END FACTORS
0752   0846 F9            leave
0753   0847 09            ret
0754   0848             
0755   0848             rand:
0756   0848 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0757   084B             ; $sec 
0758   084B 52 02 00      sub sp, 2
0759   084E             
0760   084E             ; --- BEGIN INLINE ASM BLOCK
0761   084E 19 00         mov al, 0
0762   0850 05 01         syscall sys_rtc					
0763   0852 1A            mov al, ah
0764   0853 FA FF FF      lea d, [bp + -1] ; $sec
0765   0856 1E            mov al, [d]
0766   0857 22 00         mov ah, 0
0767   0859             ; --- END INLINE ASM BLOCK
0768   0859             
0769   0859             ;; return sec; 
0770   0859 FA FF FF      lea d, [bp + -1] ; $sec
0771   085C 2A            mov b, [d]
0772   085D F9            leave
0773   085E 09            ret
0774   085F             
0775   085F             srand:
0776   085F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0777   0862 F9            leave
0778   0863 09            ret
0779   0864             
0780   0864             malloc:
0781   0864 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0782   0867 F9            leave
0783   0868 09            ret
0784   0869             
0785   0869             calloc:
0786   0869 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0787   086C F9            leave
0788   086D 09            ret
0789   086E             
0790   086E             realloc:
0791   086E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0792   0871 F9            leave
0793   0872 09            ret
0794   0873             
0795   0873             alloc:
0796   0873 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0797   0876             ;; heap_top = heap_top + bytes; 
0798   0876 3B 9D 25      mov d, _heap_top ; $heap_top
0799   0879 DA            push d
0800   087A 3B 9D 25      mov d, _heap_top ; $heap_top
0801   087D 2A            mov b, [d]
0802   087E             ; START TERMS
0803   087E D7            push a
0804   087F 11            mov a, b
0805   0880 FA 05 00      lea d, [bp + 5] ; $bytes
0806   0883 2A            mov b, [d]
0807   0884 56            add b, a
0808   0885 E4            pop a
0809   0886             ; END TERMS
0810   0886 E7            pop d
0811   0887 FD 43         mov [d], b
0812   0889             ;; return heap_top - bytes; 
0813   0889 3B 9D 25      mov d, _heap_top ; $heap_top
0814   088C 2A            mov b, [d]
0815   088D             ; START TERMS
0816   088D D7            push a
0817   088E 11            mov a, b
0818   088F FA 05 00      lea d, [bp + 5] ; $bytes
0819   0892 2A            mov b, [d]
0820   0893 60            sub a, b
0821   0894 27            mov b, a
0822   0895 E4            pop a
0823   0896             ; END TERMS
0824   0896 F9            leave
0825   0897 09            ret
0826   0898             
0827   0898             free:
0828   0898 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0829   089B             ;; return heap_top = heap_top - bytes; 
0830   089B 3B 9D 25      mov d, _heap_top ; $heap_top
0831   089E DA            push d
0832   089F 3B 9D 25      mov d, _heap_top ; $heap_top
0833   08A2 2A            mov b, [d]
0834   08A3             ; START TERMS
0835   08A3 D7            push a
0836   08A4 11            mov a, b
0837   08A5 FA 05 00      lea d, [bp + 5] ; $bytes
0838   08A8 2A            mov b, [d]
0839   08A9 60            sub a, b
0840   08AA 27            mov b, a
0841   08AB E4            pop a
0842   08AC             ; END TERMS
0843   08AC E7            pop d
0844   08AD FD 43         mov [d], b
0845   08AF F9            leave
0846   08B0 09            ret
0847   08B1             
0848   08B1             va_start:
0849   08B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0850   08B4             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
0851   08B4 FA 05 00      lea d, [bp + 5] ; $argp
0852   08B7 FD 2A         mov d, [d]
0853   08B9 58 00 00      add d, 0
0854   08BC DA            push d
0855   08BD FA 07 00      lea d, [bp + 7] ; $first_fixed_param
0856   08C0 2A            mov b, [d]
0857   08C1             ; START TERMS
0858   08C1 D7            push a
0859   08C2 11            mov a, b
0860   08C3 26 02 00      mov b, 2
0861   08C6 56            add b, a
0862   08C7 E4            pop a
0863   08C8             ; END TERMS
0864   08C8 E7            pop d
0865   08C9 FD 43         mov [d], b
0866   08CB F9            leave
0867   08CC 09            ret
0868   08CD             
0869   08CD             va_arg:
0870   08CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0871   08D0             ; $p 
0872   08D0 52 02 00      sub sp, 2
0873   08D3             ;; p = argp->current_arg; 
0874   08D3 FA FF FF      lea d, [bp + -1] ; $p
0875   08D6 DA            push d
0876   08D7 FA 05 00      lea d, [bp + 5] ; $argp
0877   08DA FD 2A         mov d, [d]
0878   08DC 58 00 00      add d, 0
0879   08DF 2A            mov b, [d]
0880   08E0 E7            pop d
0881   08E1 FD 43         mov [d], b
0882   08E3             ;; argp->current_arg = argp->current_arg + size; 
0883   08E3 FA 05 00      lea d, [bp + 5] ; $argp
0884   08E6 FD 2A         mov d, [d]
0885   08E8 58 00 00      add d, 0
0886   08EB DA            push d
0887   08EC FA 05 00      lea d, [bp + 5] ; $argp
0888   08EF FD 2A         mov d, [d]
0889   08F1 58 00 00      add d, 0
0890   08F4 2A            mov b, [d]
0891   08F5             ; START TERMS
0892   08F5 D7            push a
0893   08F6 11            mov a, b
0894   08F7 FA 07 00      lea d, [bp + 7] ; $size
0895   08FA 2A            mov b, [d]
0896   08FB 56            add b, a
0897   08FC E4            pop a
0898   08FD             ; END TERMS
0899   08FD E7            pop d
0900   08FE FD 43         mov [d], b
0901   0900             ;; return p; 
0902   0900 FA FF FF      lea d, [bp + -1] ; $p
0903   0903 2A            mov b, [d]
0904   0904 F9            leave
0905   0905 09            ret
0906   0906             
0907   0906             va_end:
0908   0906 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0909   0909             ;; argp->current_arg =   0   ; 
0910   0909 FA 05 00      lea d, [bp + 5] ; $argp
0911   090C FD 2A         mov d, [d]
0912   090E 58 00 00      add d, 0
0913   0911 DA            push d
0914   0912 26 00 00      mov b, $0
0915   0915 E7            pop d
0916   0916 FD 43         mov [d], b
0917   0918 F9            leave
0918   0919 09            ret
0919   091A             
0920   091A             printf:
0921   091A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0922   091D             ; $p 
0923   091D             ; $fp 
0924   091D             ; $i 
0925   091D 52 06 00      sub sp, 6
0926   0920             ;; fp = format; 
0927   0920 FA FD FF      lea d, [bp + -3] ; $fp
0928   0923 DA            push d
0929   0924 FA 05 00      lea d, [bp + 5] ; $format
0930   0927 2A            mov b, [d]
0931   0928 E7            pop d
0932   0929 FD 43         mov [d], b
0933   092B             ;; p = &format + 2; 
0934   092B FA FF FF      lea d, [bp + -1] ; $p
0935   092E DA            push d
0936   092F FA 05 00      lea d, [bp + 5] ; $format
0937   0932 2D            mov b, d
0938   0933             ; START TERMS
0939   0933 D7            push a
0940   0934 11            mov a, b
0941   0935 26 02 00      mov b, $2
0942   0938 56            add b, a
0943   0939 E4            pop a
0944   093A             ; END TERMS
0945   093A E7            pop d
0946   093B FD 43         mov [d], b
0947   093D             ;; for(;;){ 
0948   093D             _for11_init:
0949   093D             _for11_cond:
0950   093D             _for11_block:
0951   093D             ;; if(!*fp) break; 
0952   093D             _if12_cond:
0953   093D FA FD FF      lea d, [bp + -3] ; $fp
0954   0940 2A            mov b, [d]
0955   0941 74            mov d, b
0956   0942 32            mov bl, [d]
0957   0943 A7 00         mov bh, 0
0958   0945 C0 00 00      cmp b, 0
0959   0948 FD 71         seq ; !
0960   094A C0 00 00      cmp b, 0
0961   094D C6 56 09      je _if12_else
0962   0950             _if12_true:
0963   0950             ;; break; 
0964   0950 0A 5C 0B      jmp _for11_exit ; for break
0965   0953 0A 59 0B      jmp _if12_exit
0966   0956             _if12_else:
0967   0956             ;; if(*fp == '%'){ 
0968   0956             _if13_cond:
0969   0956 FA FD FF      lea d, [bp + -3] ; $fp
0970   0959 2A            mov b, [d]
0971   095A 74            mov d, b
0972   095B 32            mov bl, [d]
0973   095C A7 00         mov bh, 0
0974   095E             ; START RELATIONAL
0975   095E D7            push a
0976   095F 11            mov a, b
0977   0960 26 25 00      mov b, $25
0978   0963 B0            cmp a, b
0979   0964 FD 71         seq ; ==
0980   0966 E4            pop a
0981   0967             ; END RELATIONAL
0982   0967 C0 00 00      cmp b, 0
0983   096A C6 3D 0B      je _if13_else
0984   096D             _if13_true:
0985   096D             ;; fp++; 
0986   096D FA FD FF      lea d, [bp + -3] ; $fp
0987   0970 2A            mov b, [d]
0988   0971 D8            push b
0989   0972 FD 77         inc b
0990   0974 FA FD FF      lea d, [bp + -3] ; $fp
0991   0977 FD 43         mov [d], b
0992   0979 E5            pop b
0993   097A             ;; switch(*fp){ 
0994   097A             _switch14_expr:
0995   097A FA FD FF      lea d, [bp + -3] ; $fp
0996   097D 2A            mov b, [d]
0997   097E 74            mov d, b
0998   097F 32            mov bl, [d]
0999   0980 A7 00         mov bh, 0
1000   0982             _switch14_comparisons:
1001   0982 C1 6C         cmp bl, $6c
1002   0984 C6 B0 09      je _switch14_case0
1003   0987 C1 4C         cmp bl, $4c
1004   0989 C6 B0 09      je _switch14_case1
1005   098C C1 64         cmp bl, $64
1006   098E C6 7D 0A      je _switch14_case2
1007   0991 C1 69         cmp bl, $69
1008   0993 C6 7D 0A      je _switch14_case3
1009   0996 C1 75         cmp bl, $75
1010   0998 C6 A1 0A      je _switch14_case4
1011   099B C1 78         cmp bl, $78
1012   099D C6 C5 0A      je _switch14_case5
1013   09A0 C1 63         cmp bl, $63
1014   09A2 C6 E3 0A      je _switch14_case6
1015   09A5 C1 73         cmp bl, $73
1016   09A7 C6 02 0B      je _switch14_case7
1017   09AA 0A 21 0B      jmp _switch14_default
1018   09AD 0A 2D 0B      jmp _switch14_exit
1019   09B0             _switch14_case0:
1020   09B0             _switch14_case1:
1021   09B0             ;; fp++; 
1022   09B0 FA FD FF      lea d, [bp + -3] ; $fp
1023   09B3 2A            mov b, [d]
1024   09B4 D8            push b
1025   09B5 FD 77         inc b
1026   09B7 FA FD FF      lea d, [bp + -3] ; $fp
1027   09BA FD 43         mov [d], b
1028   09BC E5            pop b
1029   09BD             ;; if(*fp == 'd' || *fp == 'i') 
1030   09BD             _if15_cond:
1031   09BD FA FD FF      lea d, [bp + -3] ; $fp
1032   09C0 2A            mov b, [d]
1033   09C1 74            mov d, b
1034   09C2 32            mov bl, [d]
1035   09C3 A7 00         mov bh, 0
1036   09C5             ; START RELATIONAL
1037   09C5 D7            push a
1038   09C6 11            mov a, b
1039   09C7 26 64 00      mov b, $64
1040   09CA B0            cmp a, b
1041   09CB FD 71         seq ; ==
1042   09CD E4            pop a
1043   09CE             ; END RELATIONAL
1044   09CE D7            push a
1045   09CF 11            mov a, b
1046   09D0 FA FD FF      lea d, [bp + -3] ; $fp
1047   09D3 2A            mov b, [d]
1048   09D4 74            mov d, b
1049   09D5 32            mov bl, [d]
1050   09D6 A7 00         mov bh, 0
1051   09D8             ; START RELATIONAL
1052   09D8 D7            push a
1053   09D9 11            mov a, b
1054   09DA 26 69 00      mov b, $69
1055   09DD B0            cmp a, b
1056   09DE FD 71         seq ; ==
1057   09E0 E4            pop a
1058   09E1             ; END RELATIONAL
1059   09E1 FD A8         sor a, b ; ||
1060   09E3 E4            pop a
1061   09E4 C0 00 00      cmp b, 0
1062   09E7 C6 FE 09      je _if15_else
1063   09EA             _if15_true:
1064   09EA             ;; print_signed_long(*(long *)p); 
1065   09EA FD 79         mov g, b
1066   09EC 28            mov b, c
1067   09ED FD AB         swp b
1068   09EF D8            push b
1069   09F0 FD 27         mov b, g
1070   09F2 FD AB         swp b
1071   09F4 D8            push b
1072   09F5 07 EA 0D      call print_signed_long
1073   09F8 51 04 00      add sp, 4
1074   09FB 0A 68 0A      jmp _if15_exit
1075   09FE             _if15_else:
1076   09FE             ;; if(*fp == 'u') 
1077   09FE             _if16_cond:
1078   09FE FA FD FF      lea d, [bp + -3] ; $fp
1079   0A01 2A            mov b, [d]
1080   0A02 74            mov d, b
1081   0A03 32            mov bl, [d]
1082   0A04 A7 00         mov bh, 0
1083   0A06             ; START RELATIONAL
1084   0A06 D7            push a
1085   0A07 11            mov a, b
1086   0A08 26 75 00      mov b, $75
1087   0A0B B0            cmp a, b
1088   0A0C FD 71         seq ; ==
1089   0A0E E4            pop a
1090   0A0F             ; END RELATIONAL
1091   0A0F C0 00 00      cmp b, 0
1092   0A12 C6 29 0A      je _if16_else
1093   0A15             _if16_true:
1094   0A15             ;; print_unsigned_long(*(unsigned long *)p); 
1095   0A15 FD 79         mov g, b
1096   0A17 28            mov b, c
1097   0A18 FD AB         swp b
1098   0A1A D8            push b
1099   0A1B FD 27         mov b, g
1100   0A1D FD AB         swp b
1101   0A1F D8            push b
1102   0A20 07 3C 0F      call print_unsigned_long
1103   0A23 51 04 00      add sp, 4
1104   0A26 0A 68 0A      jmp _if16_exit
1105   0A29             _if16_else:
1106   0A29             ;; if(*fp == 'x') 
1107   0A29             _if17_cond:
1108   0A29 FA FD FF      lea d, [bp + -3] ; $fp
1109   0A2C 2A            mov b, [d]
1110   0A2D 74            mov d, b
1111   0A2E 32            mov bl, [d]
1112   0A2F A7 00         mov bh, 0
1113   0A31             ; START RELATIONAL
1114   0A31 D7            push a
1115   0A32 11            mov a, b
1116   0A33 26 78 00      mov b, $78
1117   0A36 B0            cmp a, b
1118   0A37 FD 71         seq ; ==
1119   0A39 E4            pop a
1120   0A3A             ; END RELATIONAL
1121   0A3A C0 00 00      cmp b, 0
1122   0A3D C6 5F 0A      je _if17_else
1123   0A40             _if17_true:
1124   0A40             ;; printx32(*(long int *)p); 
1125   0A40 FA FF FF      lea d, [bp + -1] ; $p
1126   0A43 2A            mov b, [d]
1127   0A44 74            mov d, b
1128   0A45 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1129   0A48 FD 39         mov c, b ; And place it into C
1130   0A4A 2A            mov b, [d] ; Lower Word in B
1131   0A4B FD 79         mov g, b
1132   0A4D 28            mov b, c
1133   0A4E FD AB         swp b
1134   0A50 D8            push b
1135   0A51 FD 27         mov b, g
1136   0A53 FD AB         swp b
1137   0A55 D8            push b
1138   0A56 07 73 0B      call printx32
1139   0A59 51 04 00      add sp, 4
1140   0A5C 0A 68 0A      jmp _if17_exit
1141   0A5F             _if17_else:
1142   0A5F             ;; err("Unexpected format in printf."); 
1143   0A5F 26 59 25      mov b, __s1 ; "Unexpected format in printf."
1144   0A62 FD AB         swp b
1145   0A64 D8            push b
1146   0A65 07 5E 0B      call err
1147   0A68             _if17_exit:
1148   0A68             _if16_exit:
1149   0A68             _if15_exit:
1150   0A68             ;; p = p + 4; 
1151   0A68 FA FF FF      lea d, [bp + -1] ; $p
1152   0A6B DA            push d
1153   0A6C FA FF FF      lea d, [bp + -1] ; $p
1154   0A6F 2A            mov b, [d]
1155   0A70             ; START TERMS
1156   0A70 D7            push a
1157   0A71 11            mov a, b
1158   0A72 26 04 00      mov b, $4
1159   0A75 56            add b, a
1160   0A76 E4            pop a
1161   0A77             ; END TERMS
1162   0A77 E7            pop d
1163   0A78 FD 43         mov [d], b
1164   0A7A             ;; break; 
1165   0A7A 0A 2D 0B      jmp _switch14_exit ; case break
1166   0A7D             _switch14_case2:
1167   0A7D             _switch14_case3:
1168   0A7D             ;; print_signed(*(int*)p); 
1169   0A7D FA FF FF      lea d, [bp + -1] ; $p
1170   0A80 2A            mov b, [d]
1171   0A81 74            mov d, b
1172   0A82 2A            mov b, [d]
1173   0A83 FD AB         swp b
1174   0A85 D8            push b
1175   0A86 07 FA 0C      call print_signed
1176   0A89 51 02 00      add sp, 2
1177   0A8C             ;; p = p + 2; 
1178   0A8C FA FF FF      lea d, [bp + -1] ; $p
1179   0A8F DA            push d
1180   0A90 FA FF FF      lea d, [bp + -1] ; $p
1181   0A93 2A            mov b, [d]
1182   0A94             ; START TERMS
1183   0A94 D7            push a
1184   0A95 11            mov a, b
1185   0A96 26 02 00      mov b, $2
1186   0A99 56            add b, a
1187   0A9A E4            pop a
1188   0A9B             ; END TERMS
1189   0A9B E7            pop d
1190   0A9C FD 43         mov [d], b
1191   0A9E             ;; break; 
1192   0A9E 0A 2D 0B      jmp _switch14_exit ; case break
1193   0AA1             _switch14_case4:
1194   0AA1             ;; print_unsigned(*(unsigned int*)p); 
1195   0AA1 FA FF FF      lea d, [bp + -1] ; $p
1196   0AA4 2A            mov b, [d]
1197   0AA5 74            mov d, b
1198   0AA6 2A            mov b, [d]
1199   0AA7 FD AB         swp b
1200   0AA9 D8            push b
1201   0AAA 07 39 10      call print_unsigned
1202   0AAD 51 02 00      add sp, 2
1203   0AB0             ;; p = p + 2; 
1204   0AB0 FA FF FF      lea d, [bp + -1] ; $p
1205   0AB3 DA            push d
1206   0AB4 FA FF FF      lea d, [bp + -1] ; $p
1207   0AB7 2A            mov b, [d]
1208   0AB8             ; START TERMS
1209   0AB8 D7            push a
1210   0AB9 11            mov a, b
1211   0ABA 26 02 00      mov b, $2
1212   0ABD 56            add b, a
1213   0ABE E4            pop a
1214   0ABF             ; END TERMS
1215   0ABF E7            pop d
1216   0AC0 FD 43         mov [d], b
1217   0AC2             ;; break; 
1218   0AC2 0A 2D 0B      jmp _switch14_exit ; case break
1219   0AC5             _switch14_case5:
1220   0AC5             
1221   0AC5             ; --- BEGIN INLINE ASM BLOCK
1222   0AC5 FA FF FF      lea d, [bp + -1] ; $p
1223   0AC8 FD 2A         mov d, [d]
1224   0ACA 2A            mov b, [d]
1225   0ACB 07 8C 14      call print_u16x
1226   0ACE             ; --- END INLINE ASM BLOCK
1227   0ACE             
1228   0ACE             ;; p = p + 2; 
1229   0ACE FA FF FF      lea d, [bp + -1] ; $p
1230   0AD1 DA            push d
1231   0AD2 FA FF FF      lea d, [bp + -1] ; $p
1232   0AD5 2A            mov b, [d]
1233   0AD6             ; START TERMS
1234   0AD6 D7            push a
1235   0AD7 11            mov a, b
1236   0AD8 26 02 00      mov b, $2
1237   0ADB 56            add b, a
1238   0ADC E4            pop a
1239   0ADD             ; END TERMS
1240   0ADD E7            pop d
1241   0ADE FD 43         mov [d], b
1242   0AE0             ;; break; 
1243   0AE0 0A 2D 0B      jmp _switch14_exit ; case break
1244   0AE3             _switch14_case6:
1245   0AE3             
1246   0AE3             ; --- BEGIN INLINE ASM BLOCK
1247   0AE3 FA FF FF      lea d, [bp + -1] ; $p
1248   0AE6 FD 2A         mov d, [d]
1249   0AE8 1E            mov al, [d]
1250   0AE9 23            mov ah, al
1251   0AEA 07 EA 12      call _putchar
1252   0AED             ; --- END INLINE ASM BLOCK
1253   0AED             
1254   0AED             ;; p = p + 2; 
1255   0AED FA FF FF      lea d, [bp + -1] ; $p
1256   0AF0 DA            push d
1257   0AF1 FA FF FF      lea d, [bp + -1] ; $p
1258   0AF4 2A            mov b, [d]
1259   0AF5             ; START TERMS
1260   0AF5 D7            push a
1261   0AF6 11            mov a, b
1262   0AF7 26 02 00      mov b, $2
1263   0AFA 56            add b, a
1264   0AFB E4            pop a
1265   0AFC             ; END TERMS
1266   0AFC E7            pop d
1267   0AFD FD 43         mov [d], b
1268   0AFF             ;; break; 
1269   0AFF 0A 2D 0B      jmp _switch14_exit ; case break
1270   0B02             _switch14_case7:
1271   0B02             
1272   0B02             ; --- BEGIN INLINE ASM BLOCK
1273   0B02 FA FF FF      lea d, [bp + -1] ; $p
1274   0B05 FD 2A         mov d, [d]
1275   0B07 FD 2A         mov d, [d]
1276   0B09 07 34 14      call _puts
1277   0B0C             ; --- END INLINE ASM BLOCK
1278   0B0C             
1279   0B0C             ;; p = p + 2; 
1280   0B0C FA FF FF      lea d, [bp + -1] ; $p
1281   0B0F DA            push d
1282   0B10 FA FF FF      lea d, [bp + -1] ; $p
1283   0B13 2A            mov b, [d]
1284   0B14             ; START TERMS
1285   0B14 D7            push a
1286   0B15 11            mov a, b
1287   0B16 26 02 00      mov b, $2
1288   0B19 56            add b, a
1289   0B1A E4            pop a
1290   0B1B             ; END TERMS
1291   0B1B E7            pop d
1292   0B1C FD 43         mov [d], b
1293   0B1E             ;; break; 
1294   0B1E 0A 2D 0B      jmp _switch14_exit ; case break
1295   0B21             _switch14_default:
1296   0B21             ;; print("Error: Unknown argument type.\n"); 
1297   0B21 26 76 25      mov b, __s2 ; "Error: Unknown argument type.\n"
1298   0B24 FD AB         swp b
1299   0B26 D8            push b
1300   0B27 07 51 11      call print
1301   0B2A 51 02 00      add sp, 2
1302   0B2D             _switch14_exit:
1303   0B2D             ;; fp++; 
1304   0B2D FA FD FF      lea d, [bp + -3] ; $fp
1305   0B30 2A            mov b, [d]
1306   0B31 D8            push b
1307   0B32 FD 77         inc b
1308   0B34 FA FD FF      lea d, [bp + -3] ; $fp
1309   0B37 FD 43         mov [d], b
1310   0B39 E5            pop b
1311   0B3A 0A 59 0B      jmp _if13_exit
1312   0B3D             _if13_else:
1313   0B3D             ;; putchar(*fp); 
1314   0B3D FA FD FF      lea d, [bp + -3] ; $fp
1315   0B40 2A            mov b, [d]
1316   0B41 74            mov d, b
1317   0B42 32            mov bl, [d]
1318   0B43 A7 00         mov bh, 0
1319   0B45 DD            push bl
1320   0B46 07 09 11      call putchar
1321   0B49 51 01 00      add sp, 1
1322   0B4C             ;; fp++; 
1323   0B4C FA FD FF      lea d, [bp + -3] ; $fp
1324   0B4F 2A            mov b, [d]
1325   0B50 D8            push b
1326   0B51 FD 77         inc b
1327   0B53 FA FD FF      lea d, [bp + -3] ; $fp
1328   0B56 FD 43         mov [d], b
1329   0B58 E5            pop b
1330   0B59             _if13_exit:
1331   0B59             _if12_exit:
1332   0B59             _for11_update:
1333   0B59 0A 3D 09      jmp _for11_cond
1334   0B5C             _for11_exit:
1335   0B5C F9            leave
1336   0B5D 09            ret
1337   0B5E             
1338   0B5E             err:
1339   0B5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1340   0B61             ;; print(e); 
1341   0B61 FA 05 00      lea d, [bp + 5] ; $e
1342   0B64 2A            mov b, [d]
1343   0B65 FD AB         swp b
1344   0B67 D8            push b
1345   0B68 07 51 11      call print
1346   0B6B 51 02 00      add sp, 2
1347   0B6E             ;; exit(); 
1348   0B6E 07 32 07      call exit
1349   0B71 F9            leave
1350   0B72 09            ret
1351   0B73             
1352   0B73             printx32:
1353   0B73 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1354   0B76             
1355   0B76             ; --- BEGIN INLINE ASM BLOCK
1356   0B76 FA 05 00      lea d, [bp + 5] ; $hex
1357   0B79 2B 02 00      mov b, [d+2]
1358   0B7C 07 8C 14      call print_u16x
1359   0B7F 2A            mov b, [d]
1360   0B80 07 8C 14      call print_u16x
1361   0B83             ; --- END INLINE ASM BLOCK
1362   0B83             
1363   0B83 F9            leave
1364   0B84 09            ret
1365   0B85             
1366   0B85             printx16:
1367   0B85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1368   0B88             
1369   0B88             ; --- BEGIN INLINE ASM BLOCK
1370   0B88 FA 05 00      lea d, [bp + 5] ; $hex
1371   0B8B 2A            mov b, [d]
1372   0B8C 07 8C 14      call print_u16x
1373   0B8F             ; --- END INLINE ASM BLOCK
1374   0B8F             
1375   0B8F F9            leave
1376   0B90 09            ret
1377   0B91             
1378   0B91             printx8:
1379   0B91 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1380   0B94             
1381   0B94             ; --- BEGIN INLINE ASM BLOCK
1382   0B94 FA 05 00      lea d, [bp + 5] ; $hex
1383   0B97 32            mov bl, [d]
1384   0B98 07 D0 14      call print_u8x
1385   0B9B             ; --- END INLINE ASM BLOCK
1386   0B9B             
1387   0B9B F9            leave
1388   0B9C 09            ret
1389   0B9D             
1390   0B9D             hex_to_int:
1391   0B9D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1392   0BA0             ; $value 
1393   0BA0 10 00 00      mov a, $0
1394   0BA3 45 FF FF      mov [bp + -1], a
1395   0BA6             ; $i 
1396   0BA6             ; $hex_char 
1397   0BA6             ; $len 
1398   0BA6 52 07 00      sub sp, 7
1399   0BA9             ;; len = strlen(hex_string); 
1400   0BA9 FA FA FF      lea d, [bp + -6] ; $len
1401   0BAC DA            push d
1402   0BAD FA 05 00      lea d, [bp + 5] ; $hex_string
1403   0BB0 2A            mov b, [d]
1404   0BB1 FD AB         swp b
1405   0BB3 D8            push b
1406   0BB4 07 E9 06      call strlen
1407   0BB7 51 02 00      add sp, 2
1408   0BBA E7            pop d
1409   0BBB FD 43         mov [d], b
1410   0BBD             ;; for (i = 0; i < len; i++) { 
1411   0BBD             _for18_init:
1412   0BBD FA FD FF      lea d, [bp + -3] ; $i
1413   0BC0 DA            push d
1414   0BC1 26 00 00      mov b, $0
1415   0BC4 E7            pop d
1416   0BC5 FD 43         mov [d], b
1417   0BC7             _for18_cond:
1418   0BC7 FA FD FF      lea d, [bp + -3] ; $i
1419   0BCA 2A            mov b, [d]
1420   0BCB             ; START RELATIONAL
1421   0BCB D7            push a
1422   0BCC 11            mov a, b
1423   0BCD FA FA FF      lea d, [bp + -6] ; $len
1424   0BD0 2A            mov b, [d]
1425   0BD1 B0            cmp a, b
1426   0BD2 FD 75         slu ; <= (unsigned)
1427   0BD4 E4            pop a
1428   0BD5             ; END RELATIONAL
1429   0BD5 C0 00 00      cmp b, 0
1430   0BD8 C6 DA 0C      je _for18_exit
1431   0BDB             _for18_block:
1432   0BDB             ;; hex_char = hex_string[i]; 
1433   0BDB FA FC FF      lea d, [bp + -4] ; $hex_char
1434   0BDE DA            push d
1435   0BDF FA 05 00      lea d, [bp + 5] ; $hex_string
1436   0BE2 FD 2A         mov d, [d]
1437   0BE4 D7            push a
1438   0BE5 DA            push d
1439   0BE6 FA FD FF      lea d, [bp + -3] ; $i
1440   0BE9 2A            mov b, [d]
1441   0BEA E7            pop d
1442   0BEB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1443   0BEF E4            pop a
1444   0BF0 32            mov bl, [d]
1445   0BF1 A7 00         mov bh, 0
1446   0BF3 E7            pop d
1447   0BF4 FD 3E         mov [d], bl
1448   0BF6             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1449   0BF6             _if19_cond:
1450   0BF6 FA FC FF      lea d, [bp + -4] ; $hex_char
1451   0BF9 32            mov bl, [d]
1452   0BFA A7 00         mov bh, 0
1453   0BFC             ; START RELATIONAL
1454   0BFC D7            push a
1455   0BFD 11            mov a, b
1456   0BFE 26 61 00      mov b, $61
1457   0C01 B0            cmp a, b
1458   0C02 FD 80         sge ; >=
1459   0C04 E4            pop a
1460   0C05             ; END RELATIONAL
1461   0C05 D7            push a
1462   0C06 11            mov a, b
1463   0C07 FA FC FF      lea d, [bp + -4] ; $hex_char
1464   0C0A 32            mov bl, [d]
1465   0C0B A7 00         mov bh, 0
1466   0C0D             ; START RELATIONAL
1467   0C0D D7            push a
1468   0C0E 11            mov a, b
1469   0C0F 26 66 00      mov b, $66
1470   0C12 B0            cmp a, b
1471   0C13 FD 74         sle ; <=
1472   0C15 E4            pop a
1473   0C16             ; END RELATIONAL
1474   0C16 FD A7         sand a, b ; &&
1475   0C18 E4            pop a
1476   0C19 C0 00 00      cmp b, 0
1477   0C1C C6 4D 0C      je _if19_else
1478   0C1F             _if19_true:
1479   0C1F             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1480   0C1F FA FF FF      lea d, [bp + -1] ; $value
1481   0C22 DA            push d
1482   0C23 FA FF FF      lea d, [bp + -1] ; $value
1483   0C26 2A            mov b, [d]
1484   0C27             ; START FACTORS
1485   0C27 D7            push a
1486   0C28 11            mov a, b
1487   0C29 26 10 00      mov b, $10
1488   0C2C AC            mul a, b ; *
1489   0C2D 11            mov a, b
1490   0C2E 27            mov b, a
1491   0C2F E4            pop a
1492   0C30             ; END FACTORS
1493   0C30             ; START TERMS
1494   0C30 D7            push a
1495   0C31 11            mov a, b
1496   0C32 FA FC FF      lea d, [bp + -4] ; $hex_char
1497   0C35 32            mov bl, [d]
1498   0C36 A7 00         mov bh, 0
1499   0C38             ; START TERMS
1500   0C38 D7            push a
1501   0C39 11            mov a, b
1502   0C3A 26 61 00      mov b, $61
1503   0C3D 60            sub a, b
1504   0C3E 27            mov b, a
1505   0C3F 11            mov a, b
1506   0C40 26 0A 00      mov b, $a
1507   0C43 56            add b, a
1508   0C44 E4            pop a
1509   0C45             ; END TERMS
1510   0C45 56            add b, a
1511   0C46 E4            pop a
1512   0C47             ; END TERMS
1513   0C47 E7            pop d
1514   0C48 FD 43         mov [d], b
1515   0C4A 0A CA 0C      jmp _if19_exit
1516   0C4D             _if19_else:
1517   0C4D             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1518   0C4D             _if20_cond:
1519   0C4D FA FC FF      lea d, [bp + -4] ; $hex_char
1520   0C50 32            mov bl, [d]
1521   0C51 A7 00         mov bh, 0
1522   0C53             ; START RELATIONAL
1523   0C53 D7            push a
1524   0C54 11            mov a, b
1525   0C55 26 41 00      mov b, $41
1526   0C58 B0            cmp a, b
1527   0C59 FD 80         sge ; >=
1528   0C5B E4            pop a
1529   0C5C             ; END RELATIONAL
1530   0C5C D7            push a
1531   0C5D 11            mov a, b
1532   0C5E FA FC FF      lea d, [bp + -4] ; $hex_char
1533   0C61 32            mov bl, [d]
1534   0C62 A7 00         mov bh, 0
1535   0C64             ; START RELATIONAL
1536   0C64 D7            push a
1537   0C65 11            mov a, b
1538   0C66 26 46 00      mov b, $46
1539   0C69 B0            cmp a, b
1540   0C6A FD 74         sle ; <=
1541   0C6C E4            pop a
1542   0C6D             ; END RELATIONAL
1543   0C6D FD A7         sand a, b ; &&
1544   0C6F E4            pop a
1545   0C70 C0 00 00      cmp b, 0
1546   0C73 C6 A4 0C      je _if20_else
1547   0C76             _if20_true:
1548   0C76             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1549   0C76 FA FF FF      lea d, [bp + -1] ; $value
1550   0C79 DA            push d
1551   0C7A FA FF FF      lea d, [bp + -1] ; $value
1552   0C7D 2A            mov b, [d]
1553   0C7E             ; START FACTORS
1554   0C7E D7            push a
1555   0C7F 11            mov a, b
1556   0C80 26 10 00      mov b, $10
1557   0C83 AC            mul a, b ; *
1558   0C84 11            mov a, b
1559   0C85 27            mov b, a
1560   0C86 E4            pop a
1561   0C87             ; END FACTORS
1562   0C87             ; START TERMS
1563   0C87 D7            push a
1564   0C88 11            mov a, b
1565   0C89 FA FC FF      lea d, [bp + -4] ; $hex_char
1566   0C8C 32            mov bl, [d]
1567   0C8D A7 00         mov bh, 0
1568   0C8F             ; START TERMS
1569   0C8F D7            push a
1570   0C90 11            mov a, b
1571   0C91 26 41 00      mov b, $41
1572   0C94 60            sub a, b
1573   0C95 27            mov b, a
1574   0C96 11            mov a, b
1575   0C97 26 0A 00      mov b, $a
1576   0C9A 56            add b, a
1577   0C9B E4            pop a
1578   0C9C             ; END TERMS
1579   0C9C 56            add b, a
1580   0C9D E4            pop a
1581   0C9E             ; END TERMS
1582   0C9E E7            pop d
1583   0C9F FD 43         mov [d], b
1584   0CA1 0A CA 0C      jmp _if20_exit
1585   0CA4             _if20_else:
1586   0CA4             ;; value = (value * 16) + (hex_char - '0'); 
1587   0CA4 FA FF FF      lea d, [bp + -1] ; $value
1588   0CA7 DA            push d
1589   0CA8 FA FF FF      lea d, [bp + -1] ; $value
1590   0CAB 2A            mov b, [d]
1591   0CAC             ; START FACTORS
1592   0CAC D7            push a
1593   0CAD 11            mov a, b
1594   0CAE 26 10 00      mov b, $10
1595   0CB1 AC            mul a, b ; *
1596   0CB2 11            mov a, b
1597   0CB3 27            mov b, a
1598   0CB4 E4            pop a
1599   0CB5             ; END FACTORS
1600   0CB5             ; START TERMS
1601   0CB5 D7            push a
1602   0CB6 11            mov a, b
1603   0CB7 FA FC FF      lea d, [bp + -4] ; $hex_char
1604   0CBA 32            mov bl, [d]
1605   0CBB A7 00         mov bh, 0
1606   0CBD             ; START TERMS
1607   0CBD D7            push a
1608   0CBE 11            mov a, b
1609   0CBF 26 30 00      mov b, $30
1610   0CC2 60            sub a, b
1611   0CC3 27            mov b, a
1612   0CC4 E4            pop a
1613   0CC5             ; END TERMS
1614   0CC5 56            add b, a
1615   0CC6 E4            pop a
1616   0CC7             ; END TERMS
1617   0CC7 E7            pop d
1618   0CC8 FD 43         mov [d], b
1619   0CCA             _if20_exit:
1620   0CCA             _if19_exit:
1621   0CCA             _for18_update:
1622   0CCA FA FD FF      lea d, [bp + -3] ; $i
1623   0CCD 2A            mov b, [d]
1624   0CCE D8            push b
1625   0CCF FD 77         inc b
1626   0CD1 FA FD FF      lea d, [bp + -3] ; $i
1627   0CD4 FD 43         mov [d], b
1628   0CD6 E5            pop b
1629   0CD7 0A C7 0B      jmp _for18_cond
1630   0CDA             _for18_exit:
1631   0CDA             ;; return value; 
1632   0CDA FA FF FF      lea d, [bp + -1] ; $value
1633   0CDD 2A            mov b, [d]
1634   0CDE F9            leave
1635   0CDF 09            ret
1636   0CE0             
1637   0CE0             gets:
1638   0CE0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1639   0CE3             
1640   0CE3             ; --- BEGIN INLINE ASM BLOCK
1641   0CE3 FA 05 00      lea d, [bp + 5] ; $s
1642   0CE6 15            mov a, [d]
1643   0CE7 3C            mov d, a
1644   0CE8 07 F1 12      call _gets
1645   0CEB             ; --- END INLINE ASM BLOCK
1646   0CEB             
1647   0CEB             ;; return strlen(s); 
1648   0CEB FA 05 00      lea d, [bp + 5] ; $s
1649   0CEE 2A            mov b, [d]
1650   0CEF FD AB         swp b
1651   0CF1 D8            push b
1652   0CF2 07 E9 06      call strlen
1653   0CF5 51 02 00      add sp, 2
1654   0CF8 F9            leave
1655   0CF9 09            ret
1656   0CFA             
1657   0CFA             print_signed:
1658   0CFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1659   0CFD             ; $digits 
1660   0CFD             ; $i 
1661   0CFD 10 00 00      mov a, $0
1662   0D00 45 FA FF      mov [bp + -6], a
1663   0D03 52 07 00      sub sp, 7
1664   0D06             ;; if (num < 0) { 
1665   0D06             _if21_cond:
1666   0D06 FA 05 00      lea d, [bp + 5] ; $num
1667   0D09 2A            mov b, [d]
1668   0D0A             ; START RELATIONAL
1669   0D0A D7            push a
1670   0D0B 11            mov a, b
1671   0D0C 26 00 00      mov b, $0
1672   0D0F B0            cmp a, b
1673   0D10 FD 75         slu ; <= (unsigned)
1674   0D12 E4            pop a
1675   0D13             ; END RELATIONAL
1676   0D13 C0 00 00      cmp b, 0
1677   0D16 C6 33 0D      je _if21_else
1678   0D19             _if21_true:
1679   0D19             ;; putchar('-'); 
1680   0D19 26 2D 00      mov b, $2d
1681   0D1C DD            push bl
1682   0D1D 07 09 11      call putchar
1683   0D20 51 01 00      add sp, 1
1684   0D23             ;; num = -num; 
1685   0D23 FA 05 00      lea d, [bp + 5] ; $num
1686   0D26 DA            push d
1687   0D27 FA 05 00      lea d, [bp + 5] ; $num
1688   0D2A 2A            mov b, [d]
1689   0D2B FD 97         neg b
1690   0D2D E7            pop d
1691   0D2E FD 43         mov [d], b
1692   0D30 0A 55 0D      jmp _if21_exit
1693   0D33             _if21_else:
1694   0D33             ;; if (num == 0) { 
1695   0D33             _if22_cond:
1696   0D33 FA 05 00      lea d, [bp + 5] ; $num
1697   0D36 2A            mov b, [d]
1698   0D37             ; START RELATIONAL
1699   0D37 D7            push a
1700   0D38 11            mov a, b
1701   0D39 26 00 00      mov b, $0
1702   0D3C B0            cmp a, b
1703   0D3D FD 71         seq ; ==
1704   0D3F E4            pop a
1705   0D40             ; END RELATIONAL
1706   0D40 C0 00 00      cmp b, 0
1707   0D43 C6 55 0D      je _if22_exit
1708   0D46             _if22_true:
1709   0D46             ;; putchar('0'); 
1710   0D46 26 30 00      mov b, $30
1711   0D49 DD            push bl
1712   0D4A 07 09 11      call putchar
1713   0D4D 51 01 00      add sp, 1
1714   0D50             ;; return; 
1715   0D50 F9            leave
1716   0D51 09            ret
1717   0D52 0A 55 0D      jmp _if22_exit
1718   0D55             _if22_exit:
1719   0D55             _if21_exit:
1720   0D55             ;; while (num > 0) { 
1721   0D55             _while23_cond:
1722   0D55 FA 05 00      lea d, [bp + 5] ; $num
1723   0D58 2A            mov b, [d]
1724   0D59             ; START RELATIONAL
1725   0D59 D7            push a
1726   0D5A 11            mov a, b
1727   0D5B 26 00 00      mov b, $0
1728   0D5E B0            cmp a, b
1729   0D5F FD 7F         sgt ; >
1730   0D61 E4            pop a
1731   0D62             ; END RELATIONAL
1732   0D62 C0 00 00      cmp b, 0
1733   0D65 C6 AF 0D      je _while23_exit
1734   0D68             _while23_block:
1735   0D68             ;; digits[i] = '0' + (num % 10); 
1736   0D68 FA FC FF      lea d, [bp + -4] ; $digits
1737   0D6B D7            push a
1738   0D6C DA            push d
1739   0D6D FA FA FF      lea d, [bp + -6] ; $i
1740   0D70 2A            mov b, [d]
1741   0D71 E7            pop d
1742   0D72 5A            add d, b
1743   0D73 E4            pop a
1744   0D74 DA            push d
1745   0D75 26 30 00      mov b, $30
1746   0D78             ; START TERMS
1747   0D78 D7            push a
1748   0D79 11            mov a, b
1749   0D7A FA 05 00      lea d, [bp + 5] ; $num
1750   0D7D 2A            mov b, [d]
1751   0D7E             ; START FACTORS
1752   0D7E D7            push a
1753   0D7F 11            mov a, b
1754   0D80 26 0A 00      mov b, $a
1755   0D83 AE            div a, b ; 
1756   0D84 11            mov a, b
1757   0D85 27            mov b, a
1758   0D86 E4            pop a
1759   0D87             ; END FACTORS
1760   0D87 56            add b, a
1761   0D88 E4            pop a
1762   0D89             ; END TERMS
1763   0D89 E7            pop d
1764   0D8A FD 3E         mov [d], bl
1765   0D8C             ;; num = num / 10; 
1766   0D8C FA 05 00      lea d, [bp + 5] ; $num
1767   0D8F DA            push d
1768   0D90 FA 05 00      lea d, [bp + 5] ; $num
1769   0D93 2A            mov b, [d]
1770   0D94             ; START FACTORS
1771   0D94 D7            push a
1772   0D95 11            mov a, b
1773   0D96 26 0A 00      mov b, $a
1774   0D99 AE            div a, b
1775   0D9A 27            mov b, a
1776   0D9B E4            pop a
1777   0D9C             ; END FACTORS
1778   0D9C E7            pop d
1779   0D9D FD 43         mov [d], b
1780   0D9F             ;; i++; 
1781   0D9F FA FA FF      lea d, [bp + -6] ; $i
1782   0DA2 2A            mov b, [d]
1783   0DA3 D8            push b
1784   0DA4 FD 77         inc b
1785   0DA6 FA FA FF      lea d, [bp + -6] ; $i
1786   0DA9 FD 43         mov [d], b
1787   0DAB E5            pop b
1788   0DAC 0A 55 0D      jmp _while23_cond
1789   0DAF             _while23_exit:
1790   0DAF             ;; while (i > 0) { 
1791   0DAF             _while24_cond:
1792   0DAF FA FA FF      lea d, [bp + -6] ; $i
1793   0DB2 2A            mov b, [d]
1794   0DB3             ; START RELATIONAL
1795   0DB3 D7            push a
1796   0DB4 11            mov a, b
1797   0DB5 26 00 00      mov b, $0
1798   0DB8 B0            cmp a, b
1799   0DB9 FD 7F         sgt ; >
1800   0DBB E4            pop a
1801   0DBC             ; END RELATIONAL
1802   0DBC C0 00 00      cmp b, 0
1803   0DBF C6 E8 0D      je _while24_exit
1804   0DC2             _while24_block:
1805   0DC2             ;; i--; 
1806   0DC2 FA FA FF      lea d, [bp + -6] ; $i
1807   0DC5 2A            mov b, [d]
1808   0DC6 D8            push b
1809   0DC7 FD 7D         dec b
1810   0DC9 FA FA FF      lea d, [bp + -6] ; $i
1811   0DCC FD 43         mov [d], b
1812   0DCE E5            pop b
1813   0DCF             ;; putchar(digits[i]); 
1814   0DCF FA FC FF      lea d, [bp + -4] ; $digits
1815   0DD2 D7            push a
1816   0DD3 DA            push d
1817   0DD4 FA FA FF      lea d, [bp + -6] ; $i
1818   0DD7 2A            mov b, [d]
1819   0DD8 E7            pop d
1820   0DD9 5A            add d, b
1821   0DDA E4            pop a
1822   0DDB 32            mov bl, [d]
1823   0DDC A7 00         mov bh, 0
1824   0DDE DD            push bl
1825   0DDF 07 09 11      call putchar
1826   0DE2 51 01 00      add sp, 1
1827   0DE5 0A AF 0D      jmp _while24_cond
1828   0DE8             _while24_exit:
1829   0DE8 F9            leave
1830   0DE9 09            ret
1831   0DEA             
1832   0DEA             print_signed_long:
1833   0DEA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1834   0DED             ; $digits 
1835   0DED             ; $i 
1836   0DED 10 00 00      mov a, $0
1837   0DF0 45 F5 FF      mov [bp + -11], a
1838   0DF3 52 0C 00      sub sp, 12
1839   0DF6             ;; if (num < 0) { 
1840   0DF6             _if25_cond:
1841   0DF6 FA 05 00      lea d, [bp + 5] ; $num
1842   0DF9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1843   0DFC FD 39         mov c, b ; And place it into C
1844   0DFE 2A            mov b, [d] ; Lower Word in B
1845   0DFF             ; START RELATIONAL
1846   0DFF D7            push a
1847   0E00 FD D8         push g
1848   0E02 11            mov a, b
1849   0E03 FD 7A         mov g, c
1850   0E05 26 00 00      mov b, $0
1851   0E08 4D            mov si, a
1852   0E09 11            mov a, b
1853   0E0A 4F            mov di, a
1854   0E0B FD 12         mov a, g
1855   0E0D 28            mov b, c
1856   0E0E B0            cmp a, b
1857   0E0F FD 75         slu ; <
1858   0E11 D8            push b
1859   0E12 28            mov b, c
1860   0E13 FD 71         seq ; ==
1861   0E15 D8            push b
1862   0E16 50            mov a, di
1863   0E17 27            mov b, a
1864   0E18 4E            mov a, si
1865   0E19 B0            cmp a, b
1866   0E1A FD 75         slu ; <
1867   0E1C E4            pop a
1868   0E1D FD 92         and b, a
1869   0E1F E4            pop a
1870   0E20 FD 70         or b, a
1871   0E22               
1872   0E22 FD F1         pop g
1873   0E24 E4            pop a
1874   0E25             ; END RELATIONAL
1875   0E25 C0 00 00      cmp b, 0
1876   0E28 C6 4F 0E      je _if25_else
1877   0E2B             _if25_true:
1878   0E2B             ;; putchar('-'); 
1879   0E2B 26 2D 00      mov b, $2d
1880   0E2E DD            push bl
1881   0E2F 07 09 11      call putchar
1882   0E32 51 01 00      add sp, 1
1883   0E35             ;; num = -num; 
1884   0E35 FA 05 00      lea d, [bp + 5] ; $num
1885   0E38 DA            push d
1886   0E39 FA 05 00      lea d, [bp + 5] ; $num
1887   0E3C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1888   0E3F FD 39         mov c, b ; And place it into C
1889   0E41 2A            mov b, [d] ; Lower Word in B
1890   0E42 FD 97         neg b
1891   0E44 E7            pop d
1892   0E45 FD 43         mov [d], b
1893   0E47 28            mov b, c
1894   0E48 FD 44 02 00   mov [d + 2], b
1895   0E4C 0A 86 0E      jmp _if25_exit
1896   0E4F             _if25_else:
1897   0E4F             ;; if (num == 0) { 
1898   0E4F             _if26_cond:
1899   0E4F FA 05 00      lea d, [bp + 5] ; $num
1900   0E52 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1901   0E55 FD 39         mov c, b ; And place it into C
1902   0E57 2A            mov b, [d] ; Lower Word in B
1903   0E58             ; START RELATIONAL
1904   0E58 D7            push a
1905   0E59 FD D8         push g
1906   0E5B 11            mov a, b
1907   0E5C FD 7A         mov g, c
1908   0E5E 26 00 00      mov b, $0
1909   0E61 B0            cmp a, b
1910   0E62 FD 71         seq ; ==
1911   0E64 D8            push b
1912   0E65 12            mov a, c
1913   0E66 FD 27         mov b, g
1914   0E68 B0            cmp a, b
1915   0E69 FD 71         seq ; ==
1916   0E6B E4            pop a
1917   0E6C FD A7         sand a, b
1918   0E6E FD F1         pop g
1919   0E70 E4            pop a
1920   0E71             ; END RELATIONAL
1921   0E71 C0 00 00      cmp b, 0
1922   0E74 C6 86 0E      je _if26_exit
1923   0E77             _if26_true:
1924   0E77             ;; putchar('0'); 
1925   0E77 26 30 00      mov b, $30
1926   0E7A DD            push bl
1927   0E7B 07 09 11      call putchar
1928   0E7E 51 01 00      add sp, 1
1929   0E81             ;; return; 
1930   0E81 F9            leave
1931   0E82 09            ret
1932   0E83 0A 86 0E      jmp _if26_exit
1933   0E86             _if26_exit:
1934   0E86             _if25_exit:
1935   0E86             ;; while (num > 0) { 
1936   0E86             _while27_cond:
1937   0E86 FA 05 00      lea d, [bp + 5] ; $num
1938   0E89 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1939   0E8C FD 39         mov c, b ; And place it into C
1940   0E8E 2A            mov b, [d] ; Lower Word in B
1941   0E8F             ; START RELATIONAL
1942   0E8F D7            push a
1943   0E90 FD D8         push g
1944   0E92 11            mov a, b
1945   0E93 FD 7A         mov g, c
1946   0E95 26 00 00      mov b, $0
1947   0E98 B0            cmp a, b
1948   0E99 FD 7F         sgt ; >
1949   0E9B FD F1         pop g
1950   0E9D E4            pop a
1951   0E9E             ; END RELATIONAL
1952   0E9E C0 00 00      cmp b, 0
1953   0EA1 C6 01 0F      je _while27_exit
1954   0EA4             _while27_block:
1955   0EA4             ;; digits[i] = '0' + (num % 10); 
1956   0EA4 FA F7 FF      lea d, [bp + -9] ; $digits
1957   0EA7 D7            push a
1958   0EA8 DA            push d
1959   0EA9 FA F5 FF      lea d, [bp + -11] ; $i
1960   0EAC 2A            mov b, [d]
1961   0EAD E7            pop d
1962   0EAE 5A            add d, b
1963   0EAF E4            pop a
1964   0EB0 DA            push d
1965   0EB1 26 30 00      mov b, $30
1966   0EB4             ; START TERMS
1967   0EB4 D7            push a
1968   0EB5 11            mov a, b
1969   0EB6 FA 05 00      lea d, [bp + 5] ; $num
1970   0EB9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1971   0EBC FD 39         mov c, b ; And place it into C
1972   0EBE 2A            mov b, [d] ; Lower Word in B
1973   0EBF             ; START FACTORS
1974   0EBF D7            push a
1975   0EC0 11            mov a, b
1976   0EC1 26 0A 00      mov b, $a
1977   0EC4 AE            div a, b ; 
1978   0EC5 11            mov a, b
1979   0EC6 27            mov b, a
1980   0EC7 E4            pop a
1981   0EC8             ; END FACTORS
1982   0EC8 54            add a, b
1983   0EC9 D7            push a
1984   0ECA FD 12         mov a, g
1985   0ECC 28            mov b, c
1986   0ECD 5C            adc a, b
1987   0ECE 39            mov c, a
1988   0ECF E5            pop b
1989   0ED0 E4            pop a
1990   0ED1             ; END TERMS
1991   0ED1 E7            pop d
1992   0ED2 FD 3E         mov [d], bl
1993   0ED4             ;; num = num / 10; 
1994   0ED4 FA 05 00      lea d, [bp + 5] ; $num
1995   0ED7 DA            push d
1996   0ED8 FA 05 00      lea d, [bp + 5] ; $num
1997   0EDB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1998   0EDE FD 39         mov c, b ; And place it into C
1999   0EE0 2A            mov b, [d] ; Lower Word in B
2000   0EE1             ; START FACTORS
2001   0EE1 D7            push a
2002   0EE2 11            mov a, b
2003   0EE3 26 0A 00      mov b, $a
2004   0EE6 AE            div a, b
2005   0EE7 27            mov b, a
2006   0EE8 E4            pop a
2007   0EE9             ; END FACTORS
2008   0EE9 E7            pop d
2009   0EEA FD 43         mov [d], b
2010   0EEC 28            mov b, c
2011   0EED FD 44 02 00   mov [d + 2], b
2012   0EF1             ;; i++; 
2013   0EF1 FA F5 FF      lea d, [bp + -11] ; $i
2014   0EF4 2A            mov b, [d]
2015   0EF5 D8            push b
2016   0EF6 FD 77         inc b
2017   0EF8 FA F5 FF      lea d, [bp + -11] ; $i
2018   0EFB FD 43         mov [d], b
2019   0EFD E5            pop b
2020   0EFE 0A 86 0E      jmp _while27_cond
2021   0F01             _while27_exit:
2022   0F01             ;; while (i > 0) { 
2023   0F01             _while28_cond:
2024   0F01 FA F5 FF      lea d, [bp + -11] ; $i
2025   0F04 2A            mov b, [d]
2026   0F05             ; START RELATIONAL
2027   0F05 D7            push a
2028   0F06 11            mov a, b
2029   0F07 26 00 00      mov b, $0
2030   0F0A B0            cmp a, b
2031   0F0B FD 7F         sgt ; >
2032   0F0D E4            pop a
2033   0F0E             ; END RELATIONAL
2034   0F0E C0 00 00      cmp b, 0
2035   0F11 C6 3A 0F      je _while28_exit
2036   0F14             _while28_block:
2037   0F14             ;; i--; 
2038   0F14 FA F5 FF      lea d, [bp + -11] ; $i
2039   0F17 2A            mov b, [d]
2040   0F18 D8            push b
2041   0F19 FD 7D         dec b
2042   0F1B FA F5 FF      lea d, [bp + -11] ; $i
2043   0F1E FD 43         mov [d], b
2044   0F20 E5            pop b
2045   0F21             ;; putchar(digits[i]); 
2046   0F21 FA F7 FF      lea d, [bp + -9] ; $digits
2047   0F24 D7            push a
2048   0F25 DA            push d
2049   0F26 FA F5 FF      lea d, [bp + -11] ; $i
2050   0F29 2A            mov b, [d]
2051   0F2A E7            pop d
2052   0F2B 5A            add d, b
2053   0F2C E4            pop a
2054   0F2D 32            mov bl, [d]
2055   0F2E A7 00         mov bh, 0
2056   0F30 DD            push bl
2057   0F31 07 09 11      call putchar
2058   0F34 51 01 00      add sp, 1
2059   0F37 0A 01 0F      jmp _while28_cond
2060   0F3A             _while28_exit:
2061   0F3A F9            leave
2062   0F3B 09            ret
2063   0F3C             
2064   0F3C             print_unsigned_long:
2065   0F3C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2066   0F3F             ; $digits 
2067   0F3F             ; $i 
2068   0F3F 52 0C 00      sub sp, 12
2069   0F42             ;; i = 0; 
2070   0F42 FA F5 FF      lea d, [bp + -11] ; $i
2071   0F45 DA            push d
2072   0F46 26 00 00      mov b, $0
2073   0F49 E7            pop d
2074   0F4A FD 43         mov [d], b
2075   0F4C             ;; if(num == 0){ 
2076   0F4C             _if29_cond:
2077   0F4C FA 05 00      lea d, [bp + 5] ; $num
2078   0F4F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2079   0F52 FD 39         mov c, b ; And place it into C
2080   0F54 2A            mov b, [d] ; Lower Word in B
2081   0F55             ; START RELATIONAL
2082   0F55 D7            push a
2083   0F56 FD D8         push g
2084   0F58 11            mov a, b
2085   0F59 FD 7A         mov g, c
2086   0F5B 26 00 00      mov b, $0
2087   0F5E B0            cmp a, b
2088   0F5F FD 71         seq ; ==
2089   0F61 D8            push b
2090   0F62 12            mov a, c
2091   0F63 FD 27         mov b, g
2092   0F65 B0            cmp a, b
2093   0F66 FD 71         seq ; ==
2094   0F68 E4            pop a
2095   0F69 FD A7         sand a, b
2096   0F6B FD F1         pop g
2097   0F6D E4            pop a
2098   0F6E             ; END RELATIONAL
2099   0F6E C0 00 00      cmp b, 0
2100   0F71 C6 83 0F      je _if29_exit
2101   0F74             _if29_true:
2102   0F74             ;; putchar('0'); 
2103   0F74 26 30 00      mov b, $30
2104   0F77 DD            push bl
2105   0F78 07 09 11      call putchar
2106   0F7B 51 01 00      add sp, 1
2107   0F7E             ;; return; 
2108   0F7E F9            leave
2109   0F7F 09            ret
2110   0F80 0A 83 0F      jmp _if29_exit
2111   0F83             _if29_exit:
2112   0F83             ;; while (num > 0) { 
2113   0F83             _while30_cond:
2114   0F83 FA 05 00      lea d, [bp + 5] ; $num
2115   0F86 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2116   0F89 FD 39         mov c, b ; And place it into C
2117   0F8B 2A            mov b, [d] ; Lower Word in B
2118   0F8C             ; START RELATIONAL
2119   0F8C D7            push a
2120   0F8D FD D8         push g
2121   0F8F 11            mov a, b
2122   0F90 FD 7A         mov g, c
2123   0F92 26 00 00      mov b, $0
2124   0F95 B0            cmp a, b
2125   0F96 FD 81         sgu ; > (unsigned)
2126   0F98 FD F1         pop g
2127   0F9A E4            pop a
2128   0F9B             ; END RELATIONAL
2129   0F9B C0 00 00      cmp b, 0
2130   0F9E C6 FE 0F      je _while30_exit
2131   0FA1             _while30_block:
2132   0FA1             ;; digits[i] = '0' + (num % 10); 
2133   0FA1 FA F7 FF      lea d, [bp + -9] ; $digits
2134   0FA4 D7            push a
2135   0FA5 DA            push d
2136   0FA6 FA F5 FF      lea d, [bp + -11] ; $i
2137   0FA9 2A            mov b, [d]
2138   0FAA E7            pop d
2139   0FAB 5A            add d, b
2140   0FAC E4            pop a
2141   0FAD DA            push d
2142   0FAE 26 30 00      mov b, $30
2143   0FB1             ; START TERMS
2144   0FB1 D7            push a
2145   0FB2 11            mov a, b
2146   0FB3 FA 05 00      lea d, [bp + 5] ; $num
2147   0FB6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2148   0FB9 FD 39         mov c, b ; And place it into C
2149   0FBB 2A            mov b, [d] ; Lower Word in B
2150   0FBC             ; START FACTORS
2151   0FBC D7            push a
2152   0FBD 11            mov a, b
2153   0FBE 26 0A 00      mov b, $a
2154   0FC1 AE            div a, b ; 
2155   0FC2 11            mov a, b
2156   0FC3 27            mov b, a
2157   0FC4 E4            pop a
2158   0FC5             ; END FACTORS
2159   0FC5 54            add a, b
2160   0FC6 D7            push a
2161   0FC7 FD 12         mov a, g
2162   0FC9 28            mov b, c
2163   0FCA 5C            adc a, b
2164   0FCB 39            mov c, a
2165   0FCC E5            pop b
2166   0FCD E4            pop a
2167   0FCE             ; END TERMS
2168   0FCE E7            pop d
2169   0FCF FD 3E         mov [d], bl
2170   0FD1             ;; num = num / 10; 
2171   0FD1 FA 05 00      lea d, [bp + 5] ; $num
2172   0FD4 DA            push d
2173   0FD5 FA 05 00      lea d, [bp + 5] ; $num
2174   0FD8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2175   0FDB FD 39         mov c, b ; And place it into C
2176   0FDD 2A            mov b, [d] ; Lower Word in B
2177   0FDE             ; START FACTORS
2178   0FDE D7            push a
2179   0FDF 11            mov a, b
2180   0FE0 26 0A 00      mov b, $a
2181   0FE3 AE            div a, b
2182   0FE4 27            mov b, a
2183   0FE5 E4            pop a
2184   0FE6             ; END FACTORS
2185   0FE6 E7            pop d
2186   0FE7 FD 43         mov [d], b
2187   0FE9 28            mov b, c
2188   0FEA FD 44 02 00   mov [d + 2], b
2189   0FEE             ;; i++; 
2190   0FEE FA F5 FF      lea d, [bp + -11] ; $i
2191   0FF1 2A            mov b, [d]
2192   0FF2 D8            push b
2193   0FF3 FD 77         inc b
2194   0FF5 FA F5 FF      lea d, [bp + -11] ; $i
2195   0FF8 FD 43         mov [d], b
2196   0FFA E5            pop b
2197   0FFB 0A 83 0F      jmp _while30_cond
2198   0FFE             _while30_exit:
2199   0FFE             ;; while (i > 0) { 
2200   0FFE             _while31_cond:
2201   0FFE FA F5 FF      lea d, [bp + -11] ; $i
2202   1001 2A            mov b, [d]
2203   1002             ; START RELATIONAL
2204   1002 D7            push a
2205   1003 11            mov a, b
2206   1004 26 00 00      mov b, $0
2207   1007 B0            cmp a, b
2208   1008 FD 7F         sgt ; >
2209   100A E4            pop a
2210   100B             ; END RELATIONAL
2211   100B C0 00 00      cmp b, 0
2212   100E C6 37 10      je _while31_exit
2213   1011             _while31_block:
2214   1011             ;; i--; 
2215   1011 FA F5 FF      lea d, [bp + -11] ; $i
2216   1014 2A            mov b, [d]
2217   1015 D8            push b
2218   1016 FD 7D         dec b
2219   1018 FA F5 FF      lea d, [bp + -11] ; $i
2220   101B FD 43         mov [d], b
2221   101D E5            pop b
2222   101E             ;; putchar(digits[i]); 
2223   101E FA F7 FF      lea d, [bp + -9] ; $digits
2224   1021 D7            push a
2225   1022 DA            push d
2226   1023 FA F5 FF      lea d, [bp + -11] ; $i
2227   1026 2A            mov b, [d]
2228   1027 E7            pop d
2229   1028 5A            add d, b
2230   1029 E4            pop a
2231   102A 32            mov bl, [d]
2232   102B A7 00         mov bh, 0
2233   102D DD            push bl
2234   102E 07 09 11      call putchar
2235   1031 51 01 00      add sp, 1
2236   1034 0A FE 0F      jmp _while31_cond
2237   1037             _while31_exit:
2238   1037 F9            leave
2239   1038 09            ret
2240   1039             
2241   1039             print_unsigned:
2242   1039 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2243   103C             ; $digits 
2244   103C             ; $i 
2245   103C 52 07 00      sub sp, 7
2246   103F             ;; i = 0; 
2247   103F FA FA FF      lea d, [bp + -6] ; $i
2248   1042 DA            push d
2249   1043 26 00 00      mov b, $0
2250   1046 E7            pop d
2251   1047 FD 43         mov [d], b
2252   1049             ;; if(num == 0){ 
2253   1049             _if32_cond:
2254   1049 FA 05 00      lea d, [bp + 5] ; $num
2255   104C 2A            mov b, [d]
2256   104D             ; START RELATIONAL
2257   104D D7            push a
2258   104E 11            mov a, b
2259   104F 26 00 00      mov b, $0
2260   1052 B0            cmp a, b
2261   1053 FD 71         seq ; ==
2262   1055 E4            pop a
2263   1056             ; END RELATIONAL
2264   1056 C0 00 00      cmp b, 0
2265   1059 C6 6B 10      je _if32_exit
2266   105C             _if32_true:
2267   105C             ;; putchar('0'); 
2268   105C 26 30 00      mov b, $30
2269   105F DD            push bl
2270   1060 07 09 11      call putchar
2271   1063 51 01 00      add sp, 1
2272   1066             ;; return; 
2273   1066 F9            leave
2274   1067 09            ret
2275   1068 0A 6B 10      jmp _if32_exit
2276   106B             _if32_exit:
2277   106B             ;; while (num > 0) { 
2278   106B             _while33_cond:
2279   106B FA 05 00      lea d, [bp + 5] ; $num
2280   106E 2A            mov b, [d]
2281   106F             ; START RELATIONAL
2282   106F D7            push a
2283   1070 11            mov a, b
2284   1071 26 00 00      mov b, $0
2285   1074 B0            cmp a, b
2286   1075 FD 81         sgu ; > (unsigned)
2287   1077 E4            pop a
2288   1078             ; END RELATIONAL
2289   1078 C0 00 00      cmp b, 0
2290   107B C6 C5 10      je _while33_exit
2291   107E             _while33_block:
2292   107E             ;; digits[i] = '0' + (num % 10); 
2293   107E FA FC FF      lea d, [bp + -4] ; $digits
2294   1081 D7            push a
2295   1082 DA            push d
2296   1083 FA FA FF      lea d, [bp + -6] ; $i
2297   1086 2A            mov b, [d]
2298   1087 E7            pop d
2299   1088 5A            add d, b
2300   1089 E4            pop a
2301   108A DA            push d
2302   108B 26 30 00      mov b, $30
2303   108E             ; START TERMS
2304   108E D7            push a
2305   108F 11            mov a, b
2306   1090 FA 05 00      lea d, [bp + 5] ; $num
2307   1093 2A            mov b, [d]
2308   1094             ; START FACTORS
2309   1094 D7            push a
2310   1095 11            mov a, b
2311   1096 26 0A 00      mov b, $a
2312   1099 AE            div a, b ; 
2313   109A 11            mov a, b
2314   109B 27            mov b, a
2315   109C E4            pop a
2316   109D             ; END FACTORS
2317   109D 56            add b, a
2318   109E E4            pop a
2319   109F             ; END TERMS
2320   109F E7            pop d
2321   10A0 FD 3E         mov [d], bl
2322   10A2             ;; num = num / 10; 
2323   10A2 FA 05 00      lea d, [bp + 5] ; $num
2324   10A5 DA            push d
2325   10A6 FA 05 00      lea d, [bp + 5] ; $num
2326   10A9 2A            mov b, [d]
2327   10AA             ; START FACTORS
2328   10AA D7            push a
2329   10AB 11            mov a, b
2330   10AC 26 0A 00      mov b, $a
2331   10AF AE            div a, b
2332   10B0 27            mov b, a
2333   10B1 E4            pop a
2334   10B2             ; END FACTORS
2335   10B2 E7            pop d
2336   10B3 FD 43         mov [d], b
2337   10B5             ;; i++; 
2338   10B5 FA FA FF      lea d, [bp + -6] ; $i
2339   10B8 2A            mov b, [d]
2340   10B9 D8            push b
2341   10BA FD 77         inc b
2342   10BC FA FA FF      lea d, [bp + -6] ; $i
2343   10BF FD 43         mov [d], b
2344   10C1 E5            pop b
2345   10C2 0A 6B 10      jmp _while33_cond
2346   10C5             _while33_exit:
2347   10C5             ;; while (i > 0) { 
2348   10C5             _while34_cond:
2349   10C5 FA FA FF      lea d, [bp + -6] ; $i
2350   10C8 2A            mov b, [d]
2351   10C9             ; START RELATIONAL
2352   10C9 D7            push a
2353   10CA 11            mov a, b
2354   10CB 26 00 00      mov b, $0
2355   10CE B0            cmp a, b
2356   10CF FD 7F         sgt ; >
2357   10D1 E4            pop a
2358   10D2             ; END RELATIONAL
2359   10D2 C0 00 00      cmp b, 0
2360   10D5 C6 FE 10      je _while34_exit
2361   10D8             _while34_block:
2362   10D8             ;; i--; 
2363   10D8 FA FA FF      lea d, [bp + -6] ; $i
2364   10DB 2A            mov b, [d]
2365   10DC D8            push b
2366   10DD FD 7D         dec b
2367   10DF FA FA FF      lea d, [bp + -6] ; $i
2368   10E2 FD 43         mov [d], b
2369   10E4 E5            pop b
2370   10E5             ;; putchar(digits[i]); 
2371   10E5 FA FC FF      lea d, [bp + -4] ; $digits
2372   10E8 D7            push a
2373   10E9 DA            push d
2374   10EA FA FA FF      lea d, [bp + -6] ; $i
2375   10ED 2A            mov b, [d]
2376   10EE E7            pop d
2377   10EF 5A            add d, b
2378   10F0 E4            pop a
2379   10F1 32            mov bl, [d]
2380   10F2 A7 00         mov bh, 0
2381   10F4 DD            push bl
2382   10F5 07 09 11      call putchar
2383   10F8 51 01 00      add sp, 1
2384   10FB 0A C5 10      jmp _while34_cond
2385   10FE             _while34_exit:
2386   10FE F9            leave
2387   10FF 09            ret
2388   1100             
2389   1100             date:
2390   1100 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2391   1103             
2392   1103             ; --- BEGIN INLINE ASM BLOCK
2393   1103 19 00         mov al, 0 
2394   1105 05 07         syscall sys_datetime
2395   1107             ; --- END INLINE ASM BLOCK
2396   1107             
2397   1107 F9            leave
2398   1108 09            ret
2399   1109             
2400   1109             putchar:
2401   1109 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2402   110C             
2403   110C             ; --- BEGIN INLINE ASM BLOCK
2404   110C FA 05 00      lea d, [bp + 5] ; $c
2405   110F 1E            mov al, [d]
2406   1110 23            mov ah, al
2407   1111 07 EA 12      call _putchar
2408   1114             ; --- END INLINE ASM BLOCK
2409   1114             
2410   1114 F9            leave
2411   1115 09            ret
2412   1116             
2413   1116             getchar:
2414   1116 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2415   1119             ; $c 
2416   1119 52 01 00      sub sp, 1
2417   111C             
2418   111C             ; --- BEGIN INLINE ASM BLOCK
2419   111C 07 E3 12      call getch
2420   111F 1A            mov al, ah
2421   1120 FA 00 00      lea d, [bp + 0] ; $c
2422   1123 3E            mov [d], al
2423   1124             ; --- END INLINE ASM BLOCK
2424   1124             
2425   1124             ;; return c; 
2426   1124 FA 00 00      lea d, [bp + 0] ; $c
2427   1127 32            mov bl, [d]
2428   1128 A7 00         mov bh, 0
2429   112A F9            leave
2430   112B 09            ret
2431   112C             
2432   112C             scann:
2433   112C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2434   112F             ; $m 
2435   112F 52 02 00      sub sp, 2
2436   1132             
2437   1132             ; --- BEGIN INLINE ASM BLOCK
2438   1132 07 2E 15      call scan_u16d
2439   1135 FA FF FF      lea d, [bp + -1] ; $m
2440   1138 43            mov [d], a
2441   1139             ; --- END INLINE ASM BLOCK
2442   1139             
2443   1139             ;; return m; 
2444   1139 FA FF FF      lea d, [bp + -1] ; $m
2445   113C 2A            mov b, [d]
2446   113D F9            leave
2447   113E 09            ret
2448   113F             
2449   113F             puts:
2450   113F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2451   1142             
2452   1142             ; --- BEGIN INLINE ASM BLOCK
2453   1142 FA 05 00      lea d, [bp + 5] ; $s
2454   1145 15            mov a, [d]
2455   1146 3C            mov d, a
2456   1147 07 34 14      call _puts
2457   114A 10 00 0A      mov a, $0A00
2458   114D 05 03         syscall sys_io
2459   114F             ; --- END INLINE ASM BLOCK
2460   114F             
2461   114F F9            leave
2462   1150 09            ret
2463   1151             
2464   1151             print:
2465   1151 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2466   1154             
2467   1154             ; --- BEGIN INLINE ASM BLOCK
2468   1154 FA 05 00      lea d, [bp + 5] ; $s
2469   1157 FD 2A         mov d, [d]
2470   1159 07 34 14      call _puts
2471   115C             ; --- END INLINE ASM BLOCK
2472   115C             
2473   115C F9            leave
2474   115D 09            ret
2475   115E             
2476   115E             loadfile:
2477   115E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2478   1161             
2479   1161             ; --- BEGIN INLINE ASM BLOCK
2480   1161 FA 07 00      lea d, [bp + 7] ; $destination
2481   1164 15            mov a, [d]
2482   1165 4F            mov di, a
2483   1166 FA 05 00      lea d, [bp + 5] ; $filename
2484   1169 FD 2A         mov d, [d]
2485   116B 19 14         mov al, 20
2486   116D 05 04         syscall sys_filesystem
2487   116F             ; --- END INLINE ASM BLOCK
2488   116F             
2489   116F F9            leave
2490   1170 09            ret
2491   1171             
2492   1171             create_file:
2493   1171 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2494   1174 F9            leave
2495   1175 09            ret
2496   1176             
2497   1176             delete_file:
2498   1176 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2499   1179             
2500   1179             ; --- BEGIN INLINE ASM BLOCK
2501   1179 FA 05 00      lea d, [bp + 5] ; $filename
2502   117C 19 0A         mov al, 10
2503   117E 05 04         syscall sys_filesystem
2504   1180             ; --- END INLINE ASM BLOCK
2505   1180             
2506   1180 F9            leave
2507   1181 09            ret
2508   1182             
2509   1182             fopen:
2510   1182 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2511   1185 F9            leave
2512   1186 09            ret
2513   1187             
2514   1187             fclose:
2515   1187 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2516   118A F9            leave
2517   118B 09            ret
2518   118C             
2519   118C             load_hex:
2520   118C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2521   118F             ; $temp 
2522   118F 52 02 00      sub sp, 2
2523   1192             ;; temp = alloc(32768); 
2524   1192 FA FF FF      lea d, [bp + -1] ; $temp
2525   1195 DA            push d
2526   1196 26 00 80      mov b, $8000
2527   1199 FD AB         swp b
2528   119B D8            push b
2529   119C 07 73 08      call alloc
2530   119F 51 02 00      add sp, 2
2531   11A2 E7            pop d
2532   11A3 FD 43         mov [d], b
2533   11A5             
2534   11A5             ; --- BEGIN INLINE ASM BLOCK
2535   11A5               
2536   11A5               
2537   11A5               
2538   11A5               
2539   11A5               
2540   11A5             _load_hex:
2541   11A5 D7            push a
2542   11A6 D8            push b
2543   11A7 DA            push d
2544   11A8 E2            push si
2545   11A9 E3            push di
2546   11AA 52 00 80      sub sp, $8000      
2547   11AD 38 00 00      mov c, 0
2548   11B0 48            mov a, sp
2549   11B1 77            inc a
2550   11B2 3C            mov d, a          
2551   11B3 07 F1 12      call _gets        
2552   11B6 4D            mov si, a
2553   11B7             __load_hex_loop:
2554   11B7 F6            lodsb             
2555   11B8 B9 00         cmp al, 0         
2556   11BA C6 C8 11      jz __load_hex_ret
2557   11BD 36            mov bh, al
2558   11BE F6            lodsb
2559   11BF 2F            mov bl, al
2560   11C0 07 A7 12      call _atoi        
2561   11C3 F7            stosb             
2562   11C4 78            inc c
2563   11C5 0A B7 11      jmp __load_hex_loop
2564   11C8             __load_hex_ret:
2565   11C8 51 00 80      add sp, $8000
2566   11CB F0            pop di
2567   11CC EF            pop si
2568   11CD E7            pop d
2569   11CE E5            pop b
2570   11CF E4            pop a
2571   11D0             ; --- END INLINE ASM BLOCK
2572   11D0             
2573   11D0 F9            leave
2574   11D1 09            ret
2575   11D2             
2576   11D2             getparam:
2577   11D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2578   11D5             ; $data 
2579   11D5 52 01 00      sub sp, 1
2580   11D8             
2581   11D8             ; --- BEGIN INLINE ASM BLOCK
2582   11D8 19 04         mov al, 4
2583   11DA FA 05 00      lea d, [bp + 5] ; $address
2584   11DD FD 2A         mov d, [d]
2585   11DF 05 0C         syscall sys_system
2586   11E1 FA 00 00      lea d, [bp + 0] ; $data
2587   11E4 FD 3E         mov [d], bl
2588   11E6             ; --- END INLINE ASM BLOCK
2589   11E6             
2590   11E6             ;; return data; 
2591   11E6 FA 00 00      lea d, [bp + 0] ; $data
2592   11E9 32            mov bl, [d]
2593   11EA A7 00         mov bh, 0
2594   11EC F9            leave
2595   11ED 09            ret
2596   11EE             
2597   11EE             clear:
2598   11EE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2599   11F1             ;; print("\033[2J\033[H"); 
2600   11F1 26 95 25      mov b, __s3 ; "\033[2J\033[H"
2601   11F4 FD AB         swp b
2602   11F6 D8            push b
2603   11F7 07 51 11      call print
2604   11FA 51 02 00      add sp, 2
2605   11FD F9            leave
2606   11FE 09            ret
2607   11FF             
2608   11FF             include_stdio_asm:
2609   11FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2610   1202             
2611   1202             ; --- BEGIN INLINE ASM BLOCK
2612   1202             .include "lib/asm/stdio.asm"
0001+  1202             ;-----------------------------------------------------------------------------
0002+  1202             ; stdio.s
0003+  1202             ;-----------------------------------------------------------------------------
0004+  1202             .include "lib/asm/string.asm"
0001++ 1202             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1202             ; string.s
0003++ 1202             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1202             
0005++ 1202             
0006++ 1202             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1202             ; _strrev
0008++ 1202             ; reverse a string
0009++ 1202             ; D = string address
0010++ 1202             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1202             ; 01234
0012++ 1202             _strrev:
0013++ 1202 4B          	pusha
0014++ 1203 07 49 12    	call _strlen	; length in C
0015++ 1206 12          	mov a, c
0016++ 1207 AF 01 00    	cmp a, 1
0017++ 120A D0 24 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 120D 7D          	dec a
0019++ 120E FD 4E       	mov si, d	; beginning of string
0020++ 1210 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1212 59          	add d, a	; end of string
0022++ 1213 12          	mov a, c
0023++ 1214 FD 9B       	shr a		; divide by 2
0024++ 1216 39          	mov c, a	; C now counts the steps
0025++ 1217             _strrev_L0:
0026++ 1217 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1218 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1219 3E          	mov [d], al	; store left char into right side
0029++ 121A 1B          	mov al, bl
0030++ 121B F7          	stosb		; store right-side char into left-side; increase DI
0031++ 121C 7E          	dec c
0032++ 121D 7F          	dec d
0033++ 121E C2 00 00    	cmp c, 0
0034++ 1221 C7 17 12    	jne _strrev_L0
0035++ 1224             _strrev_end:
0036++ 1224 4C          	popa
0037++ 1225 09          	ret
0038++ 1226             	
0039++ 1226             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1226             ; _strchr
0041++ 1226             ; search string in D for char in AL
0042++ 1226             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1226             _strchr:
0044++ 1226             _strchr_L0:
0045++ 1226 32          	mov bl, [d]
0046++ 1227 C1 00       	cmp bl, 0
0047++ 1229 C6 34 12    	je _strchr_end
0048++ 122C BA          	cmp al, bl
0049++ 122D C6 34 12    	je _strchr_end
0050++ 1230 79          	inc d
0051++ 1231 0A 26 12    	jmp _strchr_L0
0052++ 1234             _strchr_end:
0053++ 1234 1B          	mov al, bl
0054++ 1235 09          	ret
0055++ 1236             
0056++ 1236             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1236             ; _strstr
0058++ 1236             ; find sub-string
0059++ 1236             ; str1 in SI
0060++ 1236             ; str2 in DI
0061++ 1236             ; SI points to end of source string
0062++ 1236             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1236             _strstr:
0064++ 1236 DB          	push al
0065++ 1237 DA          	push d
0066++ 1238 E3          	push di
0067++ 1239             _strstr_loop:
0068++ 1239 F3          	cmpsb					; compare a byte of the strings
0069++ 123A C7 45 12    	jne _strstr_ret
0070++ 123D FC 00 00    	lea d, [di + 0]
0071++ 1240 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1242 C7 39 12    	jne _strstr_loop				; equal chars but not at end
0073++ 1245             _strstr_ret:
0074++ 1245 F0          	pop di
0075++ 1246 E7          	pop d
0076++ 1247 E8          	pop al
0077++ 1248 09          	ret
0078++ 1249             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1249             ; length of null terminated string
0080++ 1249             ; result in C
0081++ 1249             ; pointer in D
0082++ 1249             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1249             _strlen:
0084++ 1249 DA          	push d
0085++ 124A 38 00 00    	mov c, 0
0086++ 124D             _strlen_L1:
0087++ 124D BD 00       	cmp byte [d], 0
0088++ 124F C6 57 12    	je _strlen_ret
0089++ 1252 79          	inc d
0090++ 1253 78          	inc c
0091++ 1254 0A 4D 12    	jmp _strlen_L1
0092++ 1257             _strlen_ret:
0093++ 1257 E7          	pop d
0094++ 1258 09          	ret
0095++ 1259             
0096++ 1259             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1259             ; STRCMP
0098++ 1259             ; compare two strings
0099++ 1259             ; str1 in SI
0100++ 1259             ; str2 in DI
0101++ 1259             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1259             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1259             _strcmp:
0104++ 1259 DB          	push al
0105++ 125A DA          	push d
0106++ 125B E3          	push di
0107++ 125C E2          	push si
0108++ 125D             _strcmp_loop:
0109++ 125D F3          	cmpsb					; compare a byte of the strings
0110++ 125E C7 69 12    	jne _strcmp_ret
0111++ 1261 FB FF FF    	lea d, [si +- 1]
0112++ 1264 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1266 C7 5D 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 1269             _strcmp_ret:
0115++ 1269 EF          	pop si
0116++ 126A F0          	pop di
0117++ 126B E7          	pop d
0118++ 126C E8          	pop al
0119++ 126D 09          	ret
0120++ 126E             
0121++ 126E             
0122++ 126E             ; STRCPY
0123++ 126E             ; copy null terminated string from SI to DI
0124++ 126E             ; source in SI
0125++ 126E             ; destination in DI
0126++ 126E             _strcpy:
0127++ 126E E2          	push si
0128++ 126F E3          	push di
0129++ 1270 DB          	push al
0130++ 1271             _strcpy_L1:
0131++ 1271 F6          	lodsb
0132++ 1272 F7          	stosb
0133++ 1273 B9 00       	cmp al, 0
0134++ 1275 C7 71 12    	jne _strcpy_L1
0135++ 1278             _strcpy_end:
0136++ 1278 E8          	pop al
0137++ 1279 F0          	pop di
0138++ 127A EF          	pop si
0139++ 127B 09          	ret
0140++ 127C             
0141++ 127C             ; STRCAT
0142++ 127C             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 127C             ; source in SI
0144++ 127C             ; destination in DI
0145++ 127C             _strcat:
0146++ 127C E2          	push si
0147++ 127D E3          	push di
0148++ 127E D7          	push a
0149++ 127F DA          	push d
0150++ 1280 50          	mov a, di
0151++ 1281 3C          	mov d, a
0152++ 1282             _strcat_goto_end_L1:
0153++ 1282 BD 00       	cmp byte[d], 0
0154++ 1284 C6 8B 12    	je _strcat_start
0155++ 1287 79          	inc d
0156++ 1288 0A 82 12    	jmp _strcat_goto_end_L1
0157++ 128B             _strcat_start:
0158++ 128B FD 50       	mov di, d
0159++ 128D             _strcat_L1:
0160++ 128D F6          	lodsb
0161++ 128E F7          	stosb
0162++ 128F B9 00       	cmp al, 0
0163++ 1291 C7 8D 12    	jne _strcat_L1
0164++ 1294             _strcat_end:
0165++ 1294 E7          	pop d
0166++ 1295 E4          	pop a
0167++ 1296 F0          	pop di
0168++ 1297 EF          	pop si
0169++ 1298 09          	ret
0170++ 1299             
0171++ 1299             
0005+  1299             
0006+  1299             ;-----------------------------------------------------------------------------
0007+  1299             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1299             ; ASCII in BL
0009+  1299             ; result in AL
0010+  1299             ; ascii for F = 0100 0110
0011+  1299             ; ascii for 9 = 0011 1001
0012+  1299             ;-----------------------------------------------------------------------------
0013+  1299             hex_ascii_encode:
0014+  1299 1B            mov al, bl
0015+  129A 93 40         test al, $40        ; test if letter or number
0016+  129C C7 A2 12      jnz hex_letter
0017+  129F 87 0F         and al, $0F        ; get number
0018+  12A1 09            ret
0019+  12A2             hex_letter:
0020+  12A2 87 0F         and al, $0F        ; get letter
0021+  12A4 6A 09         add al, 9
0022+  12A6 09            ret
0023+  12A7             
0024+  12A7             ;-----------------------------------------------------------------------------
0025+  12A7             ; ATOI
0026+  12A7             ; 2 letter hex string in B
0027+  12A7             ; 8bit integer returned in AL
0028+  12A7             ;-----------------------------------------------------------------------------
0029+  12A7             _atoi:
0030+  12A7 D8            push b
0031+  12A8 07 99 12      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  12AB 30            mov bl, bh
0033+  12AC DB            push al          ; save a
0034+  12AD 07 99 12      call hex_ascii_encode
0035+  12B0 EA            pop bl  
0036+  12B1 FD 9E 04      shl al, 4
0037+  12B4 8C            or al, bl
0038+  12B5 E5            pop b
0039+  12B6 09            ret  
0040+  12B7             
0041+  12B7             ;-----------------------------------------------------------------------------
0042+  12B7             ; scanf
0043+  12B7             ; no need for explanations!
0044+  12B7             ;-----------------------------------------------------------------------------
0045+  12B7             scanf:
0046+  12B7 09            ret
0047+  12B8             
0048+  12B8             ;-----------------------------------------------------------------------------
0049+  12B8             ; ITOA
0050+  12B8             ; 8bit value in BL
0051+  12B8             ; 2 byte ASCII result in A
0052+  12B8             ;-----------------------------------------------------------------------------
0053+  12B8             _itoa:
0054+  12B8 DA            push d
0055+  12B9 D8            push b
0056+  12BA A7 00         mov bh, 0
0057+  12BC FD A4 04      shr bl, 4  
0058+  12BF 74            mov d, b
0059+  12C0 1F 68 15      mov al, [d + s_hex_digits]
0060+  12C3 23            mov ah, al
0061+  12C4               
0062+  12C4 E5            pop b
0063+  12C5 D8            push b
0064+  12C6 A7 00         mov bh, 0
0065+  12C8 FD 87 0F      and bl, $0F
0066+  12CB 74            mov d, b
0067+  12CC 1F 68 15      mov al, [d + s_hex_digits]
0068+  12CF E5            pop b
0069+  12D0 E7            pop d
0070+  12D1 09            ret
0071+  12D2             
0072+  12D2             ;-----------------------------------------------------------------------------
0073+  12D2             ; HEX STRING TO BINARY
0074+  12D2             ; di = destination address
0075+  12D2             ; si = source
0076+  12D2             ;-----------------------------------------------------------------------------
0077+  12D2             _hex_to_int:
0078+  12D2             _hex_to_int_L1:
0079+  12D2 F6            lodsb          ; load from [SI] to AL
0080+  12D3 B9 00         cmp al, 0        ; check if ASCII 0
0081+  12D5 C6 E2 12      jz _hex_to_int_ret
0082+  12D8 36            mov bh, al
0083+  12D9 F6            lodsb
0084+  12DA 2F            mov bl, al
0085+  12DB 07 A7 12      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  12DE F7            stosb          ; store AL to [DI]
0087+  12DF 0A D2 12      jmp _hex_to_int_L1
0088+  12E2             _hex_to_int_ret:
0089+  12E2 09            ret    
0090+  12E3             
0091+  12E3             ;-----------------------------------------------------------------------------
0092+  12E3             ; GETCHAR
0093+  12E3             ; char in ah
0094+  12E3             ;-----------------------------------------------------------------------------
0095+  12E3             getch:
0096+  12E3 DB            push al
0097+  12E4             getch_retry:
0098+  12E4 19 01         mov al, 1
0099+  12E6 05 03         syscall sys_io      ; receive in AH
0100+  12E8 E8            pop al
0101+  12E9 09            ret
0102+  12EA             
0103+  12EA             ;-----------------------------------------------------------------------------
0104+  12EA             ; PUTCHAR
0105+  12EA             ; char in ah
0106+  12EA             ;-----------------------------------------------------------------------------
0107+  12EA             _putchar:
0108+  12EA D7            push a
0109+  12EB 19 00         mov al, 0
0110+  12ED 05 03         syscall sys_io      ; char in AH
0111+  12EF E4            pop a
0112+  12F0 09            ret
0113+  12F1             
0114+  12F1             ;-----------------------------------------------------------------------------
0115+  12F1             ;; INPUT A STRING
0116+  12F1             ;; terminates with null
0117+  12F1             ;; pointer in D
0118+  12F1             ;-----------------------------------------------------------------------------
0119+  12F1             _gets:
0120+  12F1 D7            push a
0121+  12F2 DA            push d
0122+  12F3             _gets_loop:
0123+  12F3 19 01         mov al, 1
0124+  12F5 05 03         syscall sys_io      ; receive in AH
0125+  12F7 B9 00         cmp al, 0        ; check error code (AL)
0126+  12F9 C6 F3 12      je _gets_loop      ; if no char received, retry
0127+  12FC             
0128+  12FC 76 1B         cmp ah, 27
0129+  12FE C6 1F 13      je _gets_ansi_esc
0130+  1301 76 0A         cmp ah, $0A        ; LF
0131+  1303 C6 8A 13      je _gets_end
0132+  1306 76 0D         cmp ah, $0D        ; CR
0133+  1308 C6 8A 13      je _gets_end
0134+  130B 76 5C         cmp ah, $5C        ; '\\'
0135+  130D C6 4B 13      je _gets_escape
0136+  1310               
0137+  1310 76 08         cmp ah, $08      ; check for backspace
0138+  1312 C6 1B 13      je _gets_backspace
0139+  1315             
0140+  1315 1A            mov al, ah
0141+  1316 3E            mov [d], al
0142+  1317 79            inc d
0143+  1318 0A F3 12      jmp _gets_loop
0144+  131B             _gets_backspace:
0145+  131B 7F            dec d
0146+  131C 0A F3 12      jmp _gets_loop
0147+  131F             _gets_ansi_esc:
0148+  131F 19 01         mov al, 1
0149+  1321 05 03         syscall sys_io        ; receive in AH without echo
0150+  1323 B9 00         cmp al, 0          ; check error code (AL)
0151+  1325 C6 1F 13      je _gets_ansi_esc    ; if no char received, retry
0152+  1328 76 5B         cmp ah, '['
0153+  132A C7 F3 12      jne _gets_loop
0154+  132D             _gets_ansi_esc_2:
0155+  132D 19 01         mov al, 1
0156+  132F 05 03         syscall sys_io          ; receive in AH without echo
0157+  1331 B9 00         cmp al, 0            ; check error code (AL)
0158+  1333 C6 2D 13      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1336 76 44         cmp ah, 'D'
0160+  1338 C6 43 13      je _gets_left_arrow
0161+  133B 76 43         cmp ah, 'C'
0162+  133D C6 47 13      je _gets_right_arrow
0163+  1340 0A F3 12      jmp _gets_loop
0164+  1343             _gets_left_arrow:
0165+  1343 7F            dec d
0166+  1344 0A F3 12      jmp _gets_loop
0167+  1347             _gets_right_arrow:
0168+  1347 79            inc d
0169+  1348 0A F3 12      jmp _gets_loop
0170+  134B             _gets_escape:
0171+  134B 19 01         mov al, 1
0172+  134D 05 03         syscall sys_io      ; receive in AH
0173+  134F B9 00         cmp al, 0        ; check error code (AL)
0174+  1351 C6 4B 13      je _gets_escape      ; if no char received, retry
0175+  1354 76 6E         cmp ah, 'n'
0176+  1356 C6 75 13      je _gets_LF
0177+  1359 76 72         cmp ah, 'r'
0178+  135B C6 7C 13      je _gets_CR
0179+  135E 76 30         cmp ah, '0'
0180+  1360 C6 83 13      je _gets_NULL
0181+  1363 76 5C         cmp ah, $5C  ; '\'
0182+  1365 C6 6E 13      je _gets_slash
0183+  1368 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1369 3E            mov [d], al
0185+  136A 79            inc d
0186+  136B 0A F3 12      jmp _gets_loop
0187+  136E             _gets_slash:
0188+  136E 19 5C         mov al, $5C
0189+  1370 3E            mov [d], al
0190+  1371 79            inc d
0191+  1372 0A F3 12      jmp _gets_loop
0192+  1375             _gets_LF:
0193+  1375 19 0A         mov al, $0A
0194+  1377 3E            mov [d], al
0195+  1378 79            inc d
0196+  1379 0A F3 12      jmp _gets_loop
0197+  137C             _gets_CR:
0198+  137C 19 0D         mov al, $0D
0199+  137E 3E            mov [d], al
0200+  137F 79            inc d
0201+  1380 0A F3 12      jmp _gets_loop
0202+  1383             _gets_NULL:
0203+  1383 19 00         mov al, $00
0204+  1385 3E            mov [d], al
0205+  1386 79            inc d
0206+  1387 0A F3 12      jmp _gets_loop
0207+  138A             _gets_end:
0208+  138A 19 00         mov al, 0
0209+  138C 3E            mov [d], al        ; terminate string
0210+  138D E7            pop d
0211+  138E E4            pop a
0212+  138F 09            ret
0213+  1390             
0214+  1390             ;-----------------------------------------------------------------------------
0215+  1390             ;; INPUT TEXT
0216+  1390             ;; terminated with CTRL+D
0217+  1390             ;; pointer in D
0218+  1390             ;-----------------------------------------------------------------------------
0219+  1390             _gettxt:
0220+  1390 D7            push a
0221+  1391 DA            push d
0222+  1392             _gettxt_loop:
0223+  1392 19 01         mov al, 1
0224+  1394 05 03         syscall sys_io      ; receive in AH
0225+  1396 B9 00         cmp al, 0        ; check error code (AL)
0226+  1398 C6 92 13      je _gettxt_loop    ; if no char received, retry
0227+  139B 76 04         cmp ah, 4      ; EOT
0228+  139D C6 DB 13      je _gettxt_end
0229+  13A0 76 08         cmp ah, $08      ; check for backspace
0230+  13A2 C6 D7 13      je _gettxt_backspace
0231+  13A5 76 5C         cmp ah, $5C        ; '\'
0232+  13A7 C6 B0 13      je _gettxt_escape
0233+  13AA 1A            mov al, ah
0234+  13AB 3E            mov [d], al
0235+  13AC 79            inc d
0236+  13AD 0A 92 13      jmp _gettxt_loop
0237+  13B0             _gettxt_escape:
0238+  13B0 19 01         mov al, 1
0239+  13B2 05 03         syscall sys_io      ; receive in AH
0240+  13B4 B9 00         cmp al, 0        ; check error code (AL)
0241+  13B6 C6 B0 13      je _gettxt_escape    ; if no char received, retry
0242+  13B9 76 6E         cmp ah, 'n'
0243+  13BB C6 C9 13      je _gettxt_LF
0244+  13BE 76 72         cmp ah, 'r'
0245+  13C0 C6 D0 13      je _gettxt_CR
0246+  13C3 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  13C4 3E            mov [d], al
0248+  13C5 79            inc d
0249+  13C6 0A 92 13      jmp _gettxt_loop
0250+  13C9             _gettxt_LF:
0251+  13C9 19 0A         mov al, $0A
0252+  13CB 3E            mov [d], al
0253+  13CC 79            inc d
0254+  13CD 0A 92 13      jmp _gettxt_loop
0255+  13D0             _gettxt_CR:
0256+  13D0 19 0D         mov al, $0D
0257+  13D2 3E            mov [d], al
0258+  13D3 79            inc d
0259+  13D4 0A 92 13      jmp _gettxt_loop
0260+  13D7             _gettxt_backspace:
0261+  13D7 7F            dec d
0262+  13D8 0A 92 13      jmp _gettxt_loop
0263+  13DB             _gettxt_end:
0264+  13DB 19 00         mov al, 0
0265+  13DD 3E            mov [d], al        ; terminate string
0266+  13DE E7            pop d
0267+  13DF E4            pop a
0268+  13E0 09            ret
0269+  13E1             
0270+  13E1             ;-----------------------------------------------------------------------------
0271+  13E1             ; PRINT NEW LINE
0272+  13E1             ;-----------------------------------------------------------------------------
0273+  13E1             printnl:
0274+  13E1 D7            push a
0275+  13E2 10 00 0A      mov a, $0A00
0276+  13E5 05 03         syscall sys_io
0277+  13E7 10 00 0D      mov a, $0D00
0278+  13EA 05 03         syscall sys_io
0279+  13EC E4            pop a
0280+  13ED 09            ret
0281+  13EE             
0282+  13EE             ;-----------------------------------------------------------------------------
0283+  13EE             ; _strtoint
0284+  13EE             ; 4 digit hex string number in d
0285+  13EE             ; integer returned in A
0286+  13EE             ;-----------------------------------------------------------------------------
0287+  13EE             _strtointx:
0288+  13EE D8            push b
0289+  13EF 32            mov bl, [d]
0290+  13F0 37            mov bh, bl
0291+  13F1 33 01 00      mov bl, [d + 1]
0292+  13F4 07 A7 12      call _atoi        ; convert to int in AL
0293+  13F7 23            mov ah, al        ; move to AH
0294+  13F8 33 02 00      mov bl, [d + 2]
0295+  13FB 37            mov bh, bl
0296+  13FC 33 03 00      mov bl, [d + 3]
0297+  13FF 07 A7 12      call _atoi        ; convert to int in AL
0298+  1402 E5            pop b
0299+  1403 09            ret
0300+  1404             
0301+  1404             ;-----------------------------------------------------------------------------
0302+  1404             ; _strtoint
0303+  1404             ; 5 digit base10 string number in d
0304+  1404             ; integer returned in A
0305+  1404             ;-----------------------------------------------------------------------------
0306+  1404             _strtoint:
0307+  1404 E2            push si
0308+  1405 D8            push b
0309+  1406 D9            push c
0310+  1407 DA            push d
0311+  1408 07 49 12      call _strlen      ; get string length in C
0312+  140B 7E            dec c
0313+  140C FD 4E         mov si, d
0314+  140E 12            mov a, c
0315+  140F FD 99         shl a
0316+  1411 3B 80 15      mov d, table_power
0317+  1414 59            add d, a
0318+  1415 38 00 00      mov c, 0
0319+  1418             _strtoint_L0:
0320+  1418 F6            lodsb      ; load ASCII to al
0321+  1419 B9 00         cmp al, 0
0322+  141B C6 2E 14      je _strtoint_end
0323+  141E 6F 30         sub al, $30    ; make into integer
0324+  1420 22 00         mov ah, 0
0325+  1422 2A            mov b, [d]
0326+  1423 AC            mul a, b      ; result in B since it fits in 16bits
0327+  1424 11            mov a, b
0328+  1425 28            mov b, c
0329+  1426 54            add a, b
0330+  1427 39            mov c, a
0331+  1428 63 02 00      sub d, 2
0332+  142B 0A 18 14      jmp _strtoint_L0
0333+  142E             _strtoint_end:
0334+  142E 12            mov a, c
0335+  142F E7            pop d
0336+  1430 E6            pop c
0337+  1431 E5            pop b
0338+  1432 EF            pop si
0339+  1433 09            ret
0340+  1434             
0341+  1434             ;-----------------------------------------------------------------------------
0342+  1434             ; PRINT NULL TERMINATED STRING
0343+  1434             ; pointer in D
0344+  1434             ;-----------------------------------------------------------------------------
0345+  1434             _puts:
0346+  1434 D7            push a
0347+  1435 DA            push d
0348+  1436             _puts_L1:
0349+  1436 1E            mov al, [d]
0350+  1437 B9 00         cmp al, 0
0351+  1439 C6 45 14      jz _puts_END
0352+  143C 23            mov ah, al
0353+  143D 19 00         mov al, 0
0354+  143F 05 03         syscall sys_io
0355+  1441 79            inc d
0356+  1442 0A 36 14      jmp _puts_L1
0357+  1445             _puts_END:
0358+  1445 E7            pop d
0359+  1446 E4            pop a
0360+  1447 09            ret
0361+  1448             
0362+  1448             ;-----------------------------------------------------------------------------
0363+  1448             ; PRINT N SIZE STRING
0364+  1448             ; pointer in D
0365+  1448             ; size in C
0366+  1448             ;-----------------------------------------------------------------------------
0367+  1448             _putsn:
0368+  1448 DB            push al
0369+  1449 DA            push d
0370+  144A D9            push c
0371+  144B             _putsn_L0:
0372+  144B 1E            mov al, [d]
0373+  144C 23            mov ah, al
0374+  144D 19 00         mov al, 0
0375+  144F 05 03         syscall sys_io
0376+  1451 79            inc d
0377+  1452 7E            dec c  
0378+  1453 C2 00 00      cmp c, 0
0379+  1456 C7 4B 14      jne _putsn_L0
0380+  1459             _putsn_end:
0381+  1459 E6            pop c
0382+  145A E7            pop d
0383+  145B E8            pop al
0384+  145C 09            ret
0385+  145D             
0386+  145D             ;-----------------------------------------------------------------------------
0387+  145D             ; print 16bit decimal number
0388+  145D             ; input number in A
0389+  145D             ;-----------------------------------------------------------------------------
0390+  145D             print_u16d:
0391+  145D D7            push a
0392+  145E D8            push b
0393+  145F 26 10 27      mov b, 10000
0394+  1462 AE            div a, b      ; get 10000's coeff.
0395+  1463 07 85 14      call print_number
0396+  1466 11            mov a, b
0397+  1467 26 E8 03      mov b, 1000
0398+  146A AE            div a, b      ; get 1000's coeff.
0399+  146B 07 85 14      call print_number
0400+  146E 11            mov a, b
0401+  146F 26 64 00      mov b, 100
0402+  1472 AE            div a, b
0403+  1473 07 85 14      call print_number
0404+  1476 11            mov a, b
0405+  1477 26 0A 00      mov b, 10
0406+  147A AE            div a, b
0407+  147B 07 85 14      call print_number
0408+  147E 1B            mov al, bl      ; 1's coeff in bl
0409+  147F 07 85 14      call print_number
0410+  1482 E5            pop b
0411+  1483 E4            pop a
0412+  1484 09            ret
0413+  1485             
0414+  1485             ;-----------------------------------------------------------------------------
0415+  1485             ; print AL
0416+  1485             ;-----------------------------------------------------------------------------
0417+  1485             print_number:
0418+  1485 6A 30         add al, $30
0419+  1487 23            mov ah, al
0420+  1488 07 EA 12      call _putchar
0421+  148B 09            ret
0422+  148C             
0423+  148C             ;-----------------------------------------------------------------------------
0424+  148C             ; PRINT 16BIT HEX INTEGER
0425+  148C             ; integer value in reg B
0426+  148C             ;-----------------------------------------------------------------------------
0427+  148C             print_u16x:
0428+  148C D7            push a
0429+  148D D8            push b
0430+  148E DD            push bl
0431+  148F 30            mov bl, bh
0432+  1490 07 B8 12      call _itoa        ; convert bh to char in A
0433+  1493 2F            mov bl, al        ; save al
0434+  1494 19 00         mov al, 0
0435+  1496 05 03         syscall sys_io        ; display AH
0436+  1498 24            mov ah, bl        ; retrieve al
0437+  1499 19 00         mov al, 0
0438+  149B 05 03         syscall sys_io        ; display AL
0439+  149D             
0440+  149D EA            pop bl
0441+  149E 07 B8 12      call _itoa        ; convert bh to char in A
0442+  14A1 2F            mov bl, al        ; save al
0443+  14A2 19 00         mov al, 0
0444+  14A4 05 03         syscall sys_io        ; display AH
0445+  14A6 24            mov ah, bl        ; retrieve al
0446+  14A7 19 00         mov al, 0
0447+  14A9 05 03         syscall sys_io        ; display AL
0448+  14AB             
0449+  14AB E5            pop b
0450+  14AC E4            pop a
0451+  14AD 09            ret
0452+  14AE             
0453+  14AE             ;-----------------------------------------------------------------------------
0454+  14AE             ; INPUT 16BIT HEX INTEGER
0455+  14AE             ; read 16bit integer into A
0456+  14AE             ;-----------------------------------------------------------------------------
0457+  14AE             scan_u16x:
0458+  14AE F8 10 00      enter 16
0459+  14B1 D8            push b
0460+  14B2 DA            push d
0461+  14B3             
0462+  14B3 FA F1 FF      lea d, [bp + -15]
0463+  14B6 07 F1 12      call _gets        ; get number
0464+  14B9             
0465+  14B9 32            mov bl, [d]
0466+  14BA 37            mov bh, bl
0467+  14BB 33 01 00      mov bl, [d + 1]
0468+  14BE 07 A7 12      call _atoi        ; convert to int in AL
0469+  14C1 23            mov ah, al        ; move to AH
0470+  14C2             
0471+  14C2 33 02 00      mov bl, [d + 2]
0472+  14C5 37            mov bh, bl
0473+  14C6 33 03 00      mov bl, [d + 3]
0474+  14C9 07 A7 12      call _atoi        ; convert to int in AL
0475+  14CC             
0476+  14CC E7            pop d
0477+  14CD E5            pop b
0478+  14CE F9            leave
0479+  14CF 09            ret
0480+  14D0             
0481+  14D0             ;-----------------------------------------------------------------------------
0482+  14D0             ; PRINT 8bit HEX INTEGER
0483+  14D0             ; integer value in reg bl
0484+  14D0             ;-----------------------------------------------------------------------------
0485+  14D0             print_u8x:
0486+  14D0 D7            push a
0487+  14D1 DD            push bl
0488+  14D2             
0489+  14D2 07 B8 12      call _itoa        ; convert bl to char in A
0490+  14D5 2F            mov bl, al        ; save al
0491+  14D6 19 00         mov al, 0
0492+  14D8 05 03         syscall sys_io        ; display AH
0493+  14DA 24            mov ah, bl        ; retrieve al
0494+  14DB 19 00         mov al, 0
0495+  14DD 05 03         syscall sys_io        ; display AL
0496+  14DF             
0497+  14DF EA            pop bl
0498+  14E0 E4            pop a
0499+  14E1 09            ret
0500+  14E2             
0501+  14E2             ;-----------------------------------------------------------------------------
0502+  14E2             ; print 8bit decimal unsigned number
0503+  14E2             ; input number in AL
0504+  14E2             ;-----------------------------------------------------------------------------
0505+  14E2             print_u8d:
0506+  14E2 D7            push a
0507+  14E3 D8            push b
0508+  14E4             
0509+  14E4 22 00         mov ah, 0
0510+  14E6 26 64 00      mov b, 100
0511+  14E9 AE            div a, b
0512+  14EA D8            push b      ; save remainder
0513+  14EB B9 00         cmp al, 0
0514+  14ED C6 F7 14      je skip100
0515+  14F0 6A 30         add al, $30
0516+  14F2 23            mov ah, al
0517+  14F3 19 00         mov al, 0
0518+  14F5 05 03         syscall sys_io  ; print coeff
0519+  14F7             skip100:
0520+  14F7 E4            pop a
0521+  14F8 22 00         mov ah, 0
0522+  14FA 26 0A 00      mov b, 10
0523+  14FD AE            div a, b
0524+  14FE D8            push b      ; save remainder
0525+  14FF B9 00         cmp al, 0
0526+  1501 C6 0B 15      je skip10
0527+  1504 6A 30         add al, $30
0528+  1506 23            mov ah, al
0529+  1507 19 00         mov al, 0
0530+  1509 05 03         syscall sys_io  ; print coeff
0531+  150B             skip10:
0532+  150B E4            pop a
0533+  150C 1B            mov al, bl
0534+  150D 6A 30         add al, $30
0535+  150F 23            mov ah, al
0536+  1510 19 00         mov al, 0
0537+  1512 05 03         syscall sys_io  ; print coeff
0538+  1514 E5            pop b
0539+  1515 E4            pop a
0540+  1516 09            ret
0541+  1517             
0542+  1517             ;-----------------------------------------------------------------------------
0543+  1517             ; INPUT 8BIT HEX INTEGER
0544+  1517             ; read 8bit integer into AL
0545+  1517             ;-----------------------------------------------------------------------------
0546+  1517             scan_u8x:
0547+  1517 F8 04 00      enter 4
0548+  151A D8            push b
0549+  151B DA            push d
0550+  151C             
0551+  151C FA FD FF      lea d, [bp + -3]
0552+  151F 07 F1 12      call _gets        ; get number
0553+  1522             
0554+  1522 32            mov bl, [d]
0555+  1523 37            mov bh, bl
0556+  1524 33 01 00      mov bl, [d + 1]
0557+  1527 07 A7 12      call _atoi        ; convert to int in AL
0558+  152A             
0559+  152A E7            pop d
0560+  152B E5            pop b
0561+  152C F9            leave
0562+  152D 09            ret
0563+  152E             
0564+  152E             ;-----------------------------------------------------------------------------
0565+  152E             ; input decimal number
0566+  152E             ; result in A
0567+  152E             ; 655'\0'
0568+  152E             ; low--------high
0569+  152E             ;-----------------------------------------------------------------------------
0570+  152E             scan_u16d:
0571+  152E F8 08 00      enter 8
0572+  1531 E2            push si
0573+  1532 D8            push b
0574+  1533 D9            push c
0575+  1534 DA            push d
0576+  1535 FA F9 FF      lea d, [bp +- 7]
0577+  1538 07 F1 12      call _gets
0578+  153B 07 49 12      call _strlen      ; get string length in C
0579+  153E 7E            dec c
0580+  153F FD 4E         mov si, d
0581+  1541 12            mov a, c
0582+  1542 FD 99         shl a
0583+  1544 3B 80 15      mov d, table_power
0584+  1547 59            add d, a
0585+  1548 38 00 00      mov c, 0
0586+  154B             mul_loop:
0587+  154B F6            lodsb      ; load ASCII to al
0588+  154C B9 00         cmp al, 0
0589+  154E C6 61 15      je mul_exit
0590+  1551 6F 30         sub al, $30    ; make into integer
0591+  1553 22 00         mov ah, 0
0592+  1555 2A            mov b, [d]
0593+  1556 AC            mul a, b      ; result in B since it fits in 16bits
0594+  1557 11            mov a, b
0595+  1558 28            mov b, c
0596+  1559 54            add a, b
0597+  155A 39            mov c, a
0598+  155B 63 02 00      sub d, 2
0599+  155E 0A 4B 15      jmp mul_loop
0600+  1561             mul_exit:
0601+  1561 12            mov a, c
0602+  1562 E7            pop d
0603+  1563 E6            pop c
0604+  1564 E5            pop b
0605+  1565 EF            pop si
0606+  1566 F9            leave
0607+  1567 09            ret
0608+  1568             
0609+  1568 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  156C 34 35 36 37 
0609+  1570 38 39 41 42 
0609+  1574 43 44 45 46 
0610+  1578 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  157C 1B 5B 48 00 
0611+  1580             
0612+  1580             table_power:
0613+  1580 01 00         .dw 1
0614+  1582 0A 00         .dw 10
0615+  1584 64 00         .dw 100
0616+  1586 E8 03         .dw 1000
0617+  1588 10 27         .dw 100002613   158A             ; --- END INLINE ASM BLOCK
2614   158A             
2615   158A F9            leave
2616   158B 09            ret
2617   158C             
2618   158C             test0:
2619   158C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2620   158F             ; $i 
2621   158F             ; $pass 
2622   158F 10 01 00      mov a, $1
2623   1592 45 FD FF      mov [bp + -3], a
2624   1595 52 04 00      sub sp, 4
2625   1598             ;; for (i = 0; i < 5; i++){ 
2626   1598             _for35_init:
2627   1598 FA FF FF      lea d, [bp + -1] ; $i
2628   159B DA            push d
2629   159C 26 00 00      mov b, $0
2630   159F E7            pop d
2631   15A0 FD 43         mov [d], b
2632   15A2             _for35_cond:
2633   15A2 FA FF FF      lea d, [bp + -1] ; $i
2634   15A5 2A            mov b, [d]
2635   15A6             ; START RELATIONAL
2636   15A6 D7            push a
2637   15A7 11            mov a, b
2638   15A8 26 05 00      mov b, $5
2639   15AB B0            cmp a, b
2640   15AC FD 75         slu ; <= (unsigned)
2641   15AE E4            pop a
2642   15AF             ; END RELATIONAL
2643   15AF C0 00 00      cmp b, 0
2644   15B2 C6 F7 15      je _for35_exit
2645   15B5             _for35_block:
2646   15B5             ;; gca1[i] = 'A' + i; 
2647   15B5 3B B4 24      mov d, _gca1_data ; $gca1
2648   15B8 D7            push a
2649   15B9 DA            push d
2650   15BA FA FF FF      lea d, [bp + -1] ; $i
2651   15BD 2A            mov b, [d]
2652   15BE E7            pop d
2653   15BF 5A            add d, b
2654   15C0 E4            pop a
2655   15C1 DA            push d
2656   15C2 26 41 00      mov b, $41
2657   15C5             ; START TERMS
2658   15C5 D7            push a
2659   15C6 11            mov a, b
2660   15C7 FA FF FF      lea d, [bp + -1] ; $i
2661   15CA 2A            mov b, [d]
2662   15CB 56            add b, a
2663   15CC E4            pop a
2664   15CD             ; END TERMS
2665   15CD E7            pop d
2666   15CE FD 3E         mov [d], bl
2667   15D0             ;; gia1[i] = i; 
2668   15D0 3B B9 24      mov d, _gia1_data ; $gia1
2669   15D3 D7            push a
2670   15D4 DA            push d
2671   15D5 FA FF FF      lea d, [bp + -1] ; $i
2672   15D8 2A            mov b, [d]
2673   15D9 E7            pop d
2674   15DA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2675   15DE E4            pop a
2676   15DF DA            push d
2677   15E0 FA FF FF      lea d, [bp + -1] ; $i
2678   15E3 2A            mov b, [d]
2679   15E4 E7            pop d
2680   15E5 FD 43         mov [d], b
2681   15E7             _for35_update:
2682   15E7 FA FF FF      lea d, [bp + -1] ; $i
2683   15EA 2A            mov b, [d]
2684   15EB D8            push b
2685   15EC FD 77         inc b
2686   15EE FA FF FF      lea d, [bp + -1] ; $i
2687   15F1 FD 43         mov [d], b
2688   15F3 E5            pop b
2689   15F4 0A A2 15      jmp _for35_cond
2690   15F7             _for35_exit:
2691   15F7             ;; for (i = 0; i < 5; i++){ 
2692   15F7             _for36_init:
2693   15F7 FA FF FF      lea d, [bp + -1] ; $i
2694   15FA DA            push d
2695   15FB 26 00 00      mov b, $0
2696   15FE E7            pop d
2697   15FF FD 43         mov [d], b
2698   1601             _for36_cond:
2699   1601 FA FF FF      lea d, [bp + -1] ; $i
2700   1604 2A            mov b, [d]
2701   1605             ; START RELATIONAL
2702   1605 D7            push a
2703   1606 11            mov a, b
2704   1607 26 05 00      mov b, $5
2705   160A B0            cmp a, b
2706   160B FD 75         slu ; <= (unsigned)
2707   160D E4            pop a
2708   160E             ; END RELATIONAL
2709   160E C0 00 00      cmp b, 0
2710   1611 C6 8A 16      je _for36_exit
2711   1614             _for36_block:
2712   1614             ;; if(gca1[i] != 'A' + i){ 
2713   1614             _if37_cond:
2714   1614 3B B4 24      mov d, _gca1_data ; $gca1
2715   1617 D7            push a
2716   1618 DA            push d
2717   1619 FA FF FF      lea d, [bp + -1] ; $i
2718   161C 2A            mov b, [d]
2719   161D E7            pop d
2720   161E 5A            add d, b
2721   161F E4            pop a
2722   1620 32            mov bl, [d]
2723   1621 A7 00         mov bh, 0
2724   1623             ; START RELATIONAL
2725   1623 D7            push a
2726   1624 11            mov a, b
2727   1625 26 41 00      mov b, $41
2728   1628             ; START TERMS
2729   1628 D7            push a
2730   1629 11            mov a, b
2731   162A FA FF FF      lea d, [bp + -1] ; $i
2732   162D 2A            mov b, [d]
2733   162E 56            add b, a
2734   162F E4            pop a
2735   1630             ; END TERMS
2736   1630 B0            cmp a, b
2737   1631 FD 72         sneq ; !=
2738   1633 E4            pop a
2739   1634             ; END RELATIONAL
2740   1634 C0 00 00      cmp b, 0
2741   1637 C6 4A 16      je _if37_exit
2742   163A             _if37_true:
2743   163A             ;; pass = 0; 
2744   163A FA FD FF      lea d, [bp + -3] ; $pass
2745   163D DA            push d
2746   163E 26 00 00      mov b, $0
2747   1641 E7            pop d
2748   1642 FD 43         mov [d], b
2749   1644             ;; break; 
2750   1644 0A 8A 16      jmp _for36_exit ; for break
2751   1647 0A 4A 16      jmp _if37_exit
2752   164A             _if37_exit:
2753   164A             ;; if(gia1[i] != i){ 
2754   164A             _if38_cond:
2755   164A 3B B9 24      mov d, _gia1_data ; $gia1
2756   164D D7            push a
2757   164E DA            push d
2758   164F FA FF FF      lea d, [bp + -1] ; $i
2759   1652 2A            mov b, [d]
2760   1653 E7            pop d
2761   1654 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2762   1658 E4            pop a
2763   1659 2A            mov b, [d]
2764   165A             ; START RELATIONAL
2765   165A D7            push a
2766   165B 11            mov a, b
2767   165C FA FF FF      lea d, [bp + -1] ; $i
2768   165F 2A            mov b, [d]
2769   1660 B0            cmp a, b
2770   1661 FD 72         sneq ; !=
2771   1663 E4            pop a
2772   1664             ; END RELATIONAL
2773   1664 C0 00 00      cmp b, 0
2774   1667 C6 7A 16      je _if38_exit
2775   166A             _if38_true:
2776   166A             ;; pass = 0; 
2777   166A FA FD FF      lea d, [bp + -3] ; $pass
2778   166D DA            push d
2779   166E 26 00 00      mov b, $0
2780   1671 E7            pop d
2781   1672 FD 43         mov [d], b
2782   1674             ;; break; 
2783   1674 0A 8A 16      jmp _for36_exit ; for break
2784   1677 0A 7A 16      jmp _if38_exit
2785   167A             _if38_exit:
2786   167A             _for36_update:
2787   167A FA FF FF      lea d, [bp + -1] ; $i
2788   167D 2A            mov b, [d]
2789   167E D8            push b
2790   167F FD 77         inc b
2791   1681 FA FF FF      lea d, [bp + -1] ; $i
2792   1684 FD 43         mov [d], b
2793   1686 E5            pop b
2794   1687 0A 01 16      jmp _for36_cond
2795   168A             _for36_exit:
2796   168A             ;; return pass; 
2797   168A FA FD FF      lea d, [bp + -3] ; $pass
2798   168D 2A            mov b, [d]
2799   168E F9            leave
2800   168F 09            ret
2801   1690             
2802   1690             test1:
2803   1690 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2804   1693             ; $i 
2805   1693             ; $j 
2806   1693             ; $pass 
2807   1693 10 01 00      mov a, $1
2808   1696 45 FB FF      mov [bp + -5], a
2809   1699 52 06 00      sub sp, 6
2810   169C             ;; for (i = 0; i < 5; i++){ 
2811   169C             _for39_init:
2812   169C FA FF FF      lea d, [bp + -1] ; $i
2813   169F DA            push d
2814   16A0 26 00 00      mov b, $0
2815   16A3 E7            pop d
2816   16A4 FD 43         mov [d], b
2817   16A6             _for39_cond:
2818   16A6 FA FF FF      lea d, [bp + -1] ; $i
2819   16A9 2A            mov b, [d]
2820   16AA             ; START RELATIONAL
2821   16AA D7            push a
2822   16AB 11            mov a, b
2823   16AC 26 05 00      mov b, $5
2824   16AF B0            cmp a, b
2825   16B0 FD 75         slu ; <= (unsigned)
2826   16B2 E4            pop a
2827   16B3             ; END RELATIONAL
2828   16B3 C0 00 00      cmp b, 0
2829   16B6 C6 4C 17      je _for39_exit
2830   16B9             _for39_block:
2831   16B9             ;; for (j = 0; j < 5; j++){ 
2832   16B9             _for40_init:
2833   16B9 FA FD FF      lea d, [bp + -3] ; $j
2834   16BC DA            push d
2835   16BD 26 00 00      mov b, $0
2836   16C0 E7            pop d
2837   16C1 FD 43         mov [d], b
2838   16C3             _for40_cond:
2839   16C3 FA FD FF      lea d, [bp + -3] ; $j
2840   16C6 2A            mov b, [d]
2841   16C7             ; START RELATIONAL
2842   16C7 D7            push a
2843   16C8 11            mov a, b
2844   16C9 26 05 00      mov b, $5
2845   16CC B0            cmp a, b
2846   16CD FD 75         slu ; <= (unsigned)
2847   16CF E4            pop a
2848   16D0             ; END RELATIONAL
2849   16D0 C0 00 00      cmp b, 0
2850   16D3 C6 3C 17      je _for40_exit
2851   16D6             _for40_block:
2852   16D6             ;; gca2[i][j] = 'A' + i + j; 
2853   16D6 3B C3 24      mov d, _gca2_data ; $gca2
2854   16D9 D7            push a
2855   16DA DA            push d
2856   16DB FA FF FF      lea d, [bp + -1] ; $i
2857   16DE 2A            mov b, [d]
2858   16DF E7            pop d
2859   16E0 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
2860   16E4 DA            push d
2861   16E5 FA FD FF      lea d, [bp + -3] ; $j
2862   16E8 2A            mov b, [d]
2863   16E9 E7            pop d
2864   16EA 5A            add d, b
2865   16EB E4            pop a
2866   16EC DA            push d
2867   16ED 26 41 00      mov b, $41
2868   16F0             ; START TERMS
2869   16F0 D7            push a
2870   16F1 11            mov a, b
2871   16F2 FA FF FF      lea d, [bp + -1] ; $i
2872   16F5 2A            mov b, [d]
2873   16F6 56            add b, a
2874   16F7 11            mov a, b
2875   16F8 FA FD FF      lea d, [bp + -3] ; $j
2876   16FB 2A            mov b, [d]
2877   16FC 56            add b, a
2878   16FD E4            pop a
2879   16FE             ; END TERMS
2880   16FE E7            pop d
2881   16FF FD 3E         mov [d], bl
2882   1701             ;; gia2[i][j] = i * j; 
2883   1701 3B DC 24      mov d, _gia2_data ; $gia2
2884   1704 D7            push a
2885   1705 DA            push d
2886   1706 FA FF FF      lea d, [bp + -1] ; $i
2887   1709 2A            mov b, [d]
2888   170A E7            pop d
2889   170B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
2890   170F DA            push d
2891   1710 FA FD FF      lea d, [bp + -3] ; $j
2892   1713 2A            mov b, [d]
2893   1714 E7            pop d
2894   1715 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2895   1719 E4            pop a
2896   171A DA            push d
2897   171B FA FF FF      lea d, [bp + -1] ; $i
2898   171E 2A            mov b, [d]
2899   171F             ; START FACTORS
2900   171F D7            push a
2901   1720 11            mov a, b
2902   1721 FA FD FF      lea d, [bp + -3] ; $j
2903   1724 2A            mov b, [d]
2904   1725 AC            mul a, b ; *
2905   1726 11            mov a, b
2906   1727 27            mov b, a
2907   1728 E4            pop a
2908   1729             ; END FACTORS
2909   1729 E7            pop d
2910   172A FD 43         mov [d], b
2911   172C             _for40_update:
2912   172C FA FD FF      lea d, [bp + -3] ; $j
2913   172F 2A            mov b, [d]
2914   1730 D8            push b
2915   1731 FD 77         inc b
2916   1733 FA FD FF      lea d, [bp + -3] ; $j
2917   1736 FD 43         mov [d], b
2918   1738 E5            pop b
2919   1739 0A C3 16      jmp _for40_cond
2920   173C             _for40_exit:
2921   173C             _for39_update:
2922   173C FA FF FF      lea d, [bp + -1] ; $i
2923   173F 2A            mov b, [d]
2924   1740 D8            push b
2925   1741 FD 77         inc b
2926   1743 FA FF FF      lea d, [bp + -1] ; $i
2927   1746 FD 43         mov [d], b
2928   1748 E5            pop b
2929   1749 0A A6 16      jmp _for39_cond
2930   174C             _for39_exit:
2931   174C             ;; for (i = 0; i < 5; i++){ 
2932   174C             _for41_init:
2933   174C FA FF FF      lea d, [bp + -1] ; $i
2934   174F DA            push d
2935   1750 26 00 00      mov b, $0
2936   1753 E7            pop d
2937   1754 FD 43         mov [d], b
2938   1756             _for41_cond:
2939   1756 FA FF FF      lea d, [bp + -1] ; $i
2940   1759 2A            mov b, [d]
2941   175A             ; START RELATIONAL
2942   175A D7            push a
2943   175B 11            mov a, b
2944   175C 26 05 00      mov b, $5
2945   175F B0            cmp a, b
2946   1760 FD 75         slu ; <= (unsigned)
2947   1762 E4            pop a
2948   1763             ; END RELATIONAL
2949   1763 C0 00 00      cmp b, 0
2950   1766 C6 30 18      je _for41_exit
2951   1769             _for41_block:
2952   1769             ;; for (j = 0; j < 5; j++){ 
2953   1769             _for42_init:
2954   1769 FA FD FF      lea d, [bp + -3] ; $j
2955   176C DA            push d
2956   176D 26 00 00      mov b, $0
2957   1770 E7            pop d
2958   1771 FD 43         mov [d], b
2959   1773             _for42_cond:
2960   1773 FA FD FF      lea d, [bp + -3] ; $j
2961   1776 2A            mov b, [d]
2962   1777             ; START RELATIONAL
2963   1777 D7            push a
2964   1778 11            mov a, b
2965   1779 26 05 00      mov b, $5
2966   177C B0            cmp a, b
2967   177D FD 75         slu ; <= (unsigned)
2968   177F E4            pop a
2969   1780             ; END RELATIONAL
2970   1780 C0 00 00      cmp b, 0
2971   1783 C6 20 18      je _for42_exit
2972   1786             _for42_block:
2973   1786             ;; if(gca2[i][j] != 'A' + i + j){ 
2974   1786             _if43_cond:
2975   1786 3B C3 24      mov d, _gca2_data ; $gca2
2976   1789 D7            push a
2977   178A DA            push d
2978   178B FA FF FF      lea d, [bp + -1] ; $i
2979   178E 2A            mov b, [d]
2980   178F E7            pop d
2981   1790 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
2982   1794 DA            push d
2983   1795 FA FD FF      lea d, [bp + -3] ; $j
2984   1798 2A            mov b, [d]
2985   1799 E7            pop d
2986   179A 5A            add d, b
2987   179B E4            pop a
2988   179C 32            mov bl, [d]
2989   179D A7 00         mov bh, 0
2990   179F             ; START RELATIONAL
2991   179F D7            push a
2992   17A0 11            mov a, b
2993   17A1 26 41 00      mov b, $41
2994   17A4             ; START TERMS
2995   17A4 D7            push a
2996   17A5 11            mov a, b
2997   17A6 FA FF FF      lea d, [bp + -1] ; $i
2998   17A9 2A            mov b, [d]
2999   17AA 56            add b, a
3000   17AB 11            mov a, b
3001   17AC FA FD FF      lea d, [bp + -3] ; $j
3002   17AF 2A            mov b, [d]
3003   17B0 56            add b, a
3004   17B1 E4            pop a
3005   17B2             ; END TERMS
3006   17B2 B0            cmp a, b
3007   17B3 FD 72         sneq ; !=
3008   17B5 E4            pop a
3009   17B6             ; END RELATIONAL
3010   17B6 C0 00 00      cmp b, 0
3011   17B9 C6 CC 17      je _if43_exit
3012   17BC             _if43_true:
3013   17BC             ;; pass = 0; 
3014   17BC FA FB FF      lea d, [bp + -5] ; $pass
3015   17BF DA            push d
3016   17C0 26 00 00      mov b, $0
3017   17C3 E7            pop d
3018   17C4 FD 43         mov [d], b
3019   17C6             ;; break; 
3020   17C6 0A 20 18      jmp _for42_exit ; for break
3021   17C9 0A CC 17      jmp _if43_exit
3022   17CC             _if43_exit:
3023   17CC             ;; if(gia2[i][j] != i * j){ 
3024   17CC             _if44_cond:
3025   17CC 3B DC 24      mov d, _gia2_data ; $gia2
3026   17CF D7            push a
3027   17D0 DA            push d
3028   17D1 FA FF FF      lea d, [bp + -1] ; $i
3029   17D4 2A            mov b, [d]
3030   17D5 E7            pop d
3031   17D6 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3032   17DA DA            push d
3033   17DB FA FD FF      lea d, [bp + -3] ; $j
3034   17DE 2A            mov b, [d]
3035   17DF E7            pop d
3036   17E0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3037   17E4 E4            pop a
3038   17E5 2A            mov b, [d]
3039   17E6             ; START RELATIONAL
3040   17E6 D7            push a
3041   17E7 11            mov a, b
3042   17E8 FA FF FF      lea d, [bp + -1] ; $i
3043   17EB 2A            mov b, [d]
3044   17EC             ; START FACTORS
3045   17EC D7            push a
3046   17ED 11            mov a, b
3047   17EE FA FD FF      lea d, [bp + -3] ; $j
3048   17F1 2A            mov b, [d]
3049   17F2 AC            mul a, b ; *
3050   17F3 11            mov a, b
3051   17F4 27            mov b, a
3052   17F5 E4            pop a
3053   17F6             ; END FACTORS
3054   17F6 B0            cmp a, b
3055   17F7 FD 72         sneq ; !=
3056   17F9 E4            pop a
3057   17FA             ; END RELATIONAL
3058   17FA C0 00 00      cmp b, 0
3059   17FD C6 10 18      je _if44_exit
3060   1800             _if44_true:
3061   1800             ;; pass = 0; 
3062   1800 FA FB FF      lea d, [bp + -5] ; $pass
3063   1803 DA            push d
3064   1804 26 00 00      mov b, $0
3065   1807 E7            pop d
3066   1808 FD 43         mov [d], b
3067   180A             ;; break; 
3068   180A 0A 20 18      jmp _for42_exit ; for break
3069   180D 0A 10 18      jmp _if44_exit
3070   1810             _if44_exit:
3071   1810             _for42_update:
3072   1810 FA FD FF      lea d, [bp + -3] ; $j
3073   1813 2A            mov b, [d]
3074   1814 D8            push b
3075   1815 FD 77         inc b
3076   1817 FA FD FF      lea d, [bp + -3] ; $j
3077   181A FD 43         mov [d], b
3078   181C E5            pop b
3079   181D 0A 73 17      jmp _for42_cond
3080   1820             _for42_exit:
3081   1820             _for41_update:
3082   1820 FA FF FF      lea d, [bp + -1] ; $i
3083   1823 2A            mov b, [d]
3084   1824 D8            push b
3085   1825 FD 77         inc b
3086   1827 FA FF FF      lea d, [bp + -1] ; $i
3087   182A FD 43         mov [d], b
3088   182C E5            pop b
3089   182D 0A 56 17      jmp _for41_cond
3090   1830             _for41_exit:
3091   1830             ;; return pass; 
3092   1830 FA FB FF      lea d, [bp + -5] ; $pass
3093   1833 2A            mov b, [d]
3094   1834 F9            leave
3095   1835 09            ret
3096   1836             
3097   1836             test2:
3098   1836 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3099   1839             ; $i 
3100   1839             ; $j 
3101   1839             ; $lca 
3102   1839             ; $lia 
3103   1839             ; $pass 
3104   1839 10 01 00      mov a, $1
3105   183C 45 EC FF      mov [bp + -20], a
3106   183F 52 15 00      sub sp, 21
3107   1842             ;; for (i = 0; i < 5; i++){ 
3108   1842             _for45_init:
3109   1842 FA FF FF      lea d, [bp + -1] ; $i
3110   1845 DA            push d
3111   1846 26 00 00      mov b, $0
3112   1849 E7            pop d
3113   184A FD 43         mov [d], b
3114   184C             _for45_cond:
3115   184C FA FF FF      lea d, [bp + -1] ; $i
3116   184F 2A            mov b, [d]
3117   1850             ; START RELATIONAL
3118   1850 D7            push a
3119   1851 11            mov a, b
3120   1852 26 05 00      mov b, $5
3121   1855 B0            cmp a, b
3122   1856 FD 75         slu ; <= (unsigned)
3123   1858 E4            pop a
3124   1859             ; END RELATIONAL
3125   1859 C0 00 00      cmp b, 0
3126   185C C6 B1 18      je _for45_exit
3127   185F             _for45_block:
3128   185F             ;; lca[i] = 'A' + i + j; 
3129   185F FA F8 FF      lea d, [bp + -8] ; $lca
3130   1862 D7            push a
3131   1863 DA            push d
3132   1864 FA FF FF      lea d, [bp + -1] ; $i
3133   1867 2A            mov b, [d]
3134   1868 E7            pop d
3135   1869 5A            add d, b
3136   186A E4            pop a
3137   186B DA            push d
3138   186C 26 41 00      mov b, $41
3139   186F             ; START TERMS
3140   186F D7            push a
3141   1870 11            mov a, b
3142   1871 FA FF FF      lea d, [bp + -1] ; $i
3143   1874 2A            mov b, [d]
3144   1875 56            add b, a
3145   1876 11            mov a, b
3146   1877 FA FD FF      lea d, [bp + -3] ; $j
3147   187A 2A            mov b, [d]
3148   187B 56            add b, a
3149   187C E4            pop a
3150   187D             ; END TERMS
3151   187D E7            pop d
3152   187E FD 3E         mov [d], bl
3153   1880             ;; lia[i] = i * j; 
3154   1880 FA EE FF      lea d, [bp + -18] ; $lia
3155   1883 D7            push a
3156   1884 DA            push d
3157   1885 FA FF FF      lea d, [bp + -1] ; $i
3158   1888 2A            mov b, [d]
3159   1889 E7            pop d
3160   188A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3161   188E E4            pop a
3162   188F DA            push d
3163   1890 FA FF FF      lea d, [bp + -1] ; $i
3164   1893 2A            mov b, [d]
3165   1894             ; START FACTORS
3166   1894 D7            push a
3167   1895 11            mov a, b
3168   1896 FA FD FF      lea d, [bp + -3] ; $j
3169   1899 2A            mov b, [d]
3170   189A AC            mul a, b ; *
3171   189B 11            mov a, b
3172   189C 27            mov b, a
3173   189D E4            pop a
3174   189E             ; END FACTORS
3175   189E E7            pop d
3176   189F FD 43         mov [d], b
3177   18A1             _for45_update:
3178   18A1 FA FF FF      lea d, [bp + -1] ; $i
3179   18A4 2A            mov b, [d]
3180   18A5 D8            push b
3181   18A6 FD 77         inc b
3182   18A8 FA FF FF      lea d, [bp + -1] ; $i
3183   18AB FD 43         mov [d], b
3184   18AD E5            pop b
3185   18AE 0A 4C 18      jmp _for45_cond
3186   18B1             _for45_exit:
3187   18B1             ;; for (i = 0; i < 5; i++){ 
3188   18B1             _for46_init:
3189   18B1 FA FF FF      lea d, [bp + -1] ; $i
3190   18B4 DA            push d
3191   18B5 26 00 00      mov b, $0
3192   18B8 E7            pop d
3193   18B9 FD 43         mov [d], b
3194   18BB             _for46_cond:
3195   18BB FA FF FF      lea d, [bp + -1] ; $i
3196   18BE 2A            mov b, [d]
3197   18BF             ; START RELATIONAL
3198   18BF D7            push a
3199   18C0 11            mov a, b
3200   18C1 26 05 00      mov b, $5
3201   18C4 B0            cmp a, b
3202   18C5 FD 75         slu ; <= (unsigned)
3203   18C7 E4            pop a
3204   18C8             ; END RELATIONAL
3205   18C8 C0 00 00      cmp b, 0
3206   18CB C6 54 19      je _for46_exit
3207   18CE             _for46_block:
3208   18CE             ;; if(lca[i] != 'A' + i + j){ 
3209   18CE             _if47_cond:
3210   18CE FA F8 FF      lea d, [bp + -8] ; $lca
3211   18D1 D7            push a
3212   18D2 DA            push d
3213   18D3 FA FF FF      lea d, [bp + -1] ; $i
3214   18D6 2A            mov b, [d]
3215   18D7 E7            pop d
3216   18D8 5A            add d, b
3217   18D9 E4            pop a
3218   18DA 32            mov bl, [d]
3219   18DB A7 00         mov bh, 0
3220   18DD             ; START RELATIONAL
3221   18DD D7            push a
3222   18DE 11            mov a, b
3223   18DF 26 41 00      mov b, $41
3224   18E2             ; START TERMS
3225   18E2 D7            push a
3226   18E3 11            mov a, b
3227   18E4 FA FF FF      lea d, [bp + -1] ; $i
3228   18E7 2A            mov b, [d]
3229   18E8 56            add b, a
3230   18E9 11            mov a, b
3231   18EA FA FD FF      lea d, [bp + -3] ; $j
3232   18ED 2A            mov b, [d]
3233   18EE 56            add b, a
3234   18EF E4            pop a
3235   18F0             ; END TERMS
3236   18F0 B0            cmp a, b
3237   18F1 FD 72         sneq ; !=
3238   18F3 E4            pop a
3239   18F4             ; END RELATIONAL
3240   18F4 C0 00 00      cmp b, 0
3241   18F7 C6 0A 19      je _if47_exit
3242   18FA             _if47_true:
3243   18FA             ;; pass = 0; 
3244   18FA FA EC FF      lea d, [bp + -20] ; $pass
3245   18FD DA            push d
3246   18FE 26 00 00      mov b, $0
3247   1901 E7            pop d
3248   1902 FD 43         mov [d], b
3249   1904             ;; break; 
3250   1904 0A 54 19      jmp _for46_exit ; for break
3251   1907 0A 0A 19      jmp _if47_exit
3252   190A             _if47_exit:
3253   190A             ;; if(lia[i] != i * j){ 
3254   190A             _if48_cond:
3255   190A FA EE FF      lea d, [bp + -18] ; $lia
3256   190D D7            push a
3257   190E DA            push d
3258   190F FA FF FF      lea d, [bp + -1] ; $i
3259   1912 2A            mov b, [d]
3260   1913 E7            pop d
3261   1914 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3262   1918 E4            pop a
3263   1919 2A            mov b, [d]
3264   191A             ; START RELATIONAL
3265   191A D7            push a
3266   191B 11            mov a, b
3267   191C FA FF FF      lea d, [bp + -1] ; $i
3268   191F 2A            mov b, [d]
3269   1920             ; START FACTORS
3270   1920 D7            push a
3271   1921 11            mov a, b
3272   1922 FA FD FF      lea d, [bp + -3] ; $j
3273   1925 2A            mov b, [d]
3274   1926 AC            mul a, b ; *
3275   1927 11            mov a, b
3276   1928 27            mov b, a
3277   1929 E4            pop a
3278   192A             ; END FACTORS
3279   192A B0            cmp a, b
3280   192B FD 72         sneq ; !=
3281   192D E4            pop a
3282   192E             ; END RELATIONAL
3283   192E C0 00 00      cmp b, 0
3284   1931 C6 44 19      je _if48_exit
3285   1934             _if48_true:
3286   1934             ;; pass = 0; 
3287   1934 FA EC FF      lea d, [bp + -20] ; $pass
3288   1937 DA            push d
3289   1938 26 00 00      mov b, $0
3290   193B E7            pop d
3291   193C FD 43         mov [d], b
3292   193E             ;; break; 
3293   193E 0A 54 19      jmp _for46_exit ; for break
3294   1941 0A 44 19      jmp _if48_exit
3295   1944             _if48_exit:
3296   1944             _for46_update:
3297   1944 FA FF FF      lea d, [bp + -1] ; $i
3298   1947 2A            mov b, [d]
3299   1948 D8            push b
3300   1949 FD 77         inc b
3301   194B FA FF FF      lea d, [bp + -1] ; $i
3302   194E FD 43         mov [d], b
3303   1950 E5            pop b
3304   1951 0A BB 18      jmp _for46_cond
3305   1954             _for46_exit:
3306   1954             ;; return pass; 
3307   1954 FA EC FF      lea d, [bp + -20] ; $pass
3308   1957 2A            mov b, [d]
3309   1958 F9            leave
3310   1959 09            ret
3311   195A             
3312   195A             test3:
3313   195A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3314   195D             ; $i 
3315   195D             ; $j 
3316   195D             ; $lca 
3317   195D             ; $lia 
3318   195D             ; $pass 
3319   195D 10 01 00      mov a, $1
3320   1960 45 B0 FF      mov [bp + -80], a
3321   1963 52 51 00      sub sp, 81
3322   1966             ;; for (i = 0; i < 5; i++){ 
3323   1966             _for49_init:
3324   1966 FA FF FF      lea d, [bp + -1] ; $i
3325   1969 DA            push d
3326   196A 26 00 00      mov b, $0
3327   196D E7            pop d
3328   196E FD 43         mov [d], b
3329   1970             _for49_cond:
3330   1970 FA FF FF      lea d, [bp + -1] ; $i
3331   1973 2A            mov b, [d]
3332   1974             ; START RELATIONAL
3333   1974 D7            push a
3334   1975 11            mov a, b
3335   1976 26 05 00      mov b, $5
3336   1979 B0            cmp a, b
3337   197A FD 75         slu ; <= (unsigned)
3338   197C E4            pop a
3339   197D             ; END RELATIONAL
3340   197D C0 00 00      cmp b, 0
3341   1980 C6 16 1A      je _for49_exit
3342   1983             _for49_block:
3343   1983             ;; for (j = 0; j < 5; j++){ 
3344   1983             _for50_init:
3345   1983 FA FD FF      lea d, [bp + -3] ; $j
3346   1986 DA            push d
3347   1987 26 00 00      mov b, $0
3348   198A E7            pop d
3349   198B FD 43         mov [d], b
3350   198D             _for50_cond:
3351   198D FA FD FF      lea d, [bp + -3] ; $j
3352   1990 2A            mov b, [d]
3353   1991             ; START RELATIONAL
3354   1991 D7            push a
3355   1992 11            mov a, b
3356   1993 26 05 00      mov b, $5
3357   1996 B0            cmp a, b
3358   1997 FD 75         slu ; <= (unsigned)
3359   1999 E4            pop a
3360   199A             ; END RELATIONAL
3361   199A C0 00 00      cmp b, 0
3362   199D C6 06 1A      je _for50_exit
3363   19A0             _for50_block:
3364   19A0             ;; lca[i][j] = 'A' + i + j; 
3365   19A0 FA E4 FF      lea d, [bp + -28] ; $lca
3366   19A3 D7            push a
3367   19A4 DA            push d
3368   19A5 FA FF FF      lea d, [bp + -1] ; $i
3369   19A8 2A            mov b, [d]
3370   19A9 E7            pop d
3371   19AA FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
3372   19AE DA            push d
3373   19AF FA FD FF      lea d, [bp + -3] ; $j
3374   19B2 2A            mov b, [d]
3375   19B3 E7            pop d
3376   19B4 5A            add d, b
3377   19B5 E4            pop a
3378   19B6 DA            push d
3379   19B7 26 41 00      mov b, $41
3380   19BA             ; START TERMS
3381   19BA D7            push a
3382   19BB 11            mov a, b
3383   19BC FA FF FF      lea d, [bp + -1] ; $i
3384   19BF 2A            mov b, [d]
3385   19C0 56            add b, a
3386   19C1 11            mov a, b
3387   19C2 FA FD FF      lea d, [bp + -3] ; $j
3388   19C5 2A            mov b, [d]
3389   19C6 56            add b, a
3390   19C7 E4            pop a
3391   19C8             ; END TERMS
3392   19C8 E7            pop d
3393   19C9 FD 3E         mov [d], bl
3394   19CB             ;; lia[i][j] = i * j; 
3395   19CB FA B2 FF      lea d, [bp + -78] ; $lia
3396   19CE D7            push a
3397   19CF DA            push d
3398   19D0 FA FF FF      lea d, [bp + -1] ; $i
3399   19D3 2A            mov b, [d]
3400   19D4 E7            pop d
3401   19D5 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3402   19D9 DA            push d
3403   19DA FA FD FF      lea d, [bp + -3] ; $j
3404   19DD 2A            mov b, [d]
3405   19DE E7            pop d
3406   19DF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3407   19E3 E4            pop a
3408   19E4 DA            push d
3409   19E5 FA FF FF      lea d, [bp + -1] ; $i
3410   19E8 2A            mov b, [d]
3411   19E9             ; START FACTORS
3412   19E9 D7            push a
3413   19EA 11            mov a, b
3414   19EB FA FD FF      lea d, [bp + -3] ; $j
3415   19EE 2A            mov b, [d]
3416   19EF AC            mul a, b ; *
3417   19F0 11            mov a, b
3418   19F1 27            mov b, a
3419   19F2 E4            pop a
3420   19F3             ; END FACTORS
3421   19F3 E7            pop d
3422   19F4 FD 43         mov [d], b
3423   19F6             _for50_update:
3424   19F6 FA FD FF      lea d, [bp + -3] ; $j
3425   19F9 2A            mov b, [d]
3426   19FA D8            push b
3427   19FB FD 77         inc b
3428   19FD FA FD FF      lea d, [bp + -3] ; $j
3429   1A00 FD 43         mov [d], b
3430   1A02 E5            pop b
3431   1A03 0A 8D 19      jmp _for50_cond
3432   1A06             _for50_exit:
3433   1A06             _for49_update:
3434   1A06 FA FF FF      lea d, [bp + -1] ; $i
3435   1A09 2A            mov b, [d]
3436   1A0A D8            push b
3437   1A0B FD 77         inc b
3438   1A0D FA FF FF      lea d, [bp + -1] ; $i
3439   1A10 FD 43         mov [d], b
3440   1A12 E5            pop b
3441   1A13 0A 70 19      jmp _for49_cond
3442   1A16             _for49_exit:
3443   1A16             ;; for (i = 0; i < 5; i++){ 
3444   1A16             _for51_init:
3445   1A16 FA FF FF      lea d, [bp + -1] ; $i
3446   1A19 DA            push d
3447   1A1A 26 00 00      mov b, $0
3448   1A1D E7            pop d
3449   1A1E FD 43         mov [d], b
3450   1A20             _for51_cond:
3451   1A20 FA FF FF      lea d, [bp + -1] ; $i
3452   1A23 2A            mov b, [d]
3453   1A24             ; START RELATIONAL
3454   1A24 D7            push a
3455   1A25 11            mov a, b
3456   1A26 26 05 00      mov b, $5
3457   1A29 B0            cmp a, b
3458   1A2A FD 75         slu ; <= (unsigned)
3459   1A2C E4            pop a
3460   1A2D             ; END RELATIONAL
3461   1A2D C0 00 00      cmp b, 0
3462   1A30 C6 FA 1A      je _for51_exit
3463   1A33             _for51_block:
3464   1A33             ;; for (j = 0; j < 5; j++){ 
3465   1A33             _for52_init:
3466   1A33 FA FD FF      lea d, [bp + -3] ; $j
3467   1A36 DA            push d
3468   1A37 26 00 00      mov b, $0
3469   1A3A E7            pop d
3470   1A3B FD 43         mov [d], b
3471   1A3D             _for52_cond:
3472   1A3D FA FD FF      lea d, [bp + -3] ; $j
3473   1A40 2A            mov b, [d]
3474   1A41             ; START RELATIONAL
3475   1A41 D7            push a
3476   1A42 11            mov a, b
3477   1A43 26 05 00      mov b, $5
3478   1A46 B0            cmp a, b
3479   1A47 FD 75         slu ; <= (unsigned)
3480   1A49 E4            pop a
3481   1A4A             ; END RELATIONAL
3482   1A4A C0 00 00      cmp b, 0
3483   1A4D C6 EA 1A      je _for52_exit
3484   1A50             _for52_block:
3485   1A50             ;; if(lca[i][j] != 'A' + i + j){ 
3486   1A50             _if53_cond:
3487   1A50 FA E4 FF      lea d, [bp + -28] ; $lca
3488   1A53 D7            push a
3489   1A54 DA            push d
3490   1A55 FA FF FF      lea d, [bp + -1] ; $i
3491   1A58 2A            mov b, [d]
3492   1A59 E7            pop d
3493   1A5A FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
3494   1A5E DA            push d
3495   1A5F FA FD FF      lea d, [bp + -3] ; $j
3496   1A62 2A            mov b, [d]
3497   1A63 E7            pop d
3498   1A64 5A            add d, b
3499   1A65 E4            pop a
3500   1A66 32            mov bl, [d]
3501   1A67 A7 00         mov bh, 0
3502   1A69             ; START RELATIONAL
3503   1A69 D7            push a
3504   1A6A 11            mov a, b
3505   1A6B 26 41 00      mov b, $41
3506   1A6E             ; START TERMS
3507   1A6E D7            push a
3508   1A6F 11            mov a, b
3509   1A70 FA FF FF      lea d, [bp + -1] ; $i
3510   1A73 2A            mov b, [d]
3511   1A74 56            add b, a
3512   1A75 11            mov a, b
3513   1A76 FA FD FF      lea d, [bp + -3] ; $j
3514   1A79 2A            mov b, [d]
3515   1A7A 56            add b, a
3516   1A7B E4            pop a
3517   1A7C             ; END TERMS
3518   1A7C B0            cmp a, b
3519   1A7D FD 72         sneq ; !=
3520   1A7F E4            pop a
3521   1A80             ; END RELATIONAL
3522   1A80 C0 00 00      cmp b, 0
3523   1A83 C6 96 1A      je _if53_exit
3524   1A86             _if53_true:
3525   1A86             ;; pass = 0; 
3526   1A86 FA B0 FF      lea d, [bp + -80] ; $pass
3527   1A89 DA            push d
3528   1A8A 26 00 00      mov b, $0
3529   1A8D E7            pop d
3530   1A8E FD 43         mov [d], b
3531   1A90             ;; break; 
3532   1A90 0A EA 1A      jmp _for52_exit ; for break
3533   1A93 0A 96 1A      jmp _if53_exit
3534   1A96             _if53_exit:
3535   1A96             ;; if(lia[i][j] != i * j){ 
3536   1A96             _if54_cond:
3537   1A96 FA B2 FF      lea d, [bp + -78] ; $lia
3538   1A99 D7            push a
3539   1A9A DA            push d
3540   1A9B FA FF FF      lea d, [bp + -1] ; $i
3541   1A9E 2A            mov b, [d]
3542   1A9F E7            pop d
3543   1AA0 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3544   1AA4 DA            push d
3545   1AA5 FA FD FF      lea d, [bp + -3] ; $j
3546   1AA8 2A            mov b, [d]
3547   1AA9 E7            pop d
3548   1AAA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3549   1AAE E4            pop a
3550   1AAF 2A            mov b, [d]
3551   1AB0             ; START RELATIONAL
3552   1AB0 D7            push a
3553   1AB1 11            mov a, b
3554   1AB2 FA FF FF      lea d, [bp + -1] ; $i
3555   1AB5 2A            mov b, [d]
3556   1AB6             ; START FACTORS
3557   1AB6 D7            push a
3558   1AB7 11            mov a, b
3559   1AB8 FA FD FF      lea d, [bp + -3] ; $j
3560   1ABB 2A            mov b, [d]
3561   1ABC AC            mul a, b ; *
3562   1ABD 11            mov a, b
3563   1ABE 27            mov b, a
3564   1ABF E4            pop a
3565   1AC0             ; END FACTORS
3566   1AC0 B0            cmp a, b
3567   1AC1 FD 72         sneq ; !=
3568   1AC3 E4            pop a
3569   1AC4             ; END RELATIONAL
3570   1AC4 C0 00 00      cmp b, 0
3571   1AC7 C6 DA 1A      je _if54_exit
3572   1ACA             _if54_true:
3573   1ACA             ;; pass = 0; 
3574   1ACA FA B0 FF      lea d, [bp + -80] ; $pass
3575   1ACD DA            push d
3576   1ACE 26 00 00      mov b, $0
3577   1AD1 E7            pop d
3578   1AD2 FD 43         mov [d], b
3579   1AD4             ;; break; 
3580   1AD4 0A EA 1A      jmp _for52_exit ; for break
3581   1AD7 0A DA 1A      jmp _if54_exit
3582   1ADA             _if54_exit:
3583   1ADA             _for52_update:
3584   1ADA FA FD FF      lea d, [bp + -3] ; $j
3585   1ADD 2A            mov b, [d]
3586   1ADE D8            push b
3587   1ADF FD 77         inc b
3588   1AE1 FA FD FF      lea d, [bp + -3] ; $j
3589   1AE4 FD 43         mov [d], b
3590   1AE6 E5            pop b
3591   1AE7 0A 3D 1A      jmp _for52_cond
3592   1AEA             _for52_exit:
3593   1AEA             _for51_update:
3594   1AEA FA FF FF      lea d, [bp + -1] ; $i
3595   1AED 2A            mov b, [d]
3596   1AEE D8            push b
3597   1AEF FD 77         inc b
3598   1AF1 FA FF FF      lea d, [bp + -1] ; $i
3599   1AF4 FD 43         mov [d], b
3600   1AF6 E5            pop b
3601   1AF7 0A 20 1A      jmp _for51_cond
3602   1AFA             _for51_exit:
3603   1AFA             ;; return pass; 
3604   1AFA FA B0 FF      lea d, [bp + -80] ; $pass
3605   1AFD 2A            mov b, [d]
3606   1AFE F9            leave
3607   1AFF 09            ret
3608   1B00             
3609   1B00             test4:
3610   1B00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3611   1B03             ; $a 
3612   1B03             ; $b 
3613   1B03             ; $c 
3614   1B03             ; $result 
3615   1B03             ; $pass 
3616   1B03 10 01 00      mov a, $1
3617   1B06 45 F7 FF      mov [bp + -9], a
3618   1B09 52 0A 00      sub sp, 10
3619   1B0C             ;; result = 1 && 1 && 1; 
3620   1B0C FA F9 FF      lea d, [bp + -7] ; $result
3621   1B0F DA            push d
3622   1B10 26 01 00      mov b, $1
3623   1B13 D7            push a
3624   1B14 11            mov a, b
3625   1B15 26 01 00      mov b, $1
3626   1B18 FD A7         sand a, b ; &&
3627   1B1A 11            mov a, b
3628   1B1B 26 01 00      mov b, $1
3629   1B1E FD A7         sand a, b ; &&
3630   1B20 E4            pop a
3631   1B21 E7            pop d
3632   1B22 FD 43         mov [d], b
3633   1B24             ;; pass = pass && result == 1; 
3634   1B24 FA F7 FF      lea d, [bp + -9] ; $pass
3635   1B27 DA            push d
3636   1B28 FA F7 FF      lea d, [bp + -9] ; $pass
3637   1B2B 2A            mov b, [d]
3638   1B2C D7            push a
3639   1B2D 11            mov a, b
3640   1B2E FA F9 FF      lea d, [bp + -7] ; $result
3641   1B31 2A            mov b, [d]
3642   1B32             ; START RELATIONAL
3643   1B32 D7            push a
3644   1B33 11            mov a, b
3645   1B34 26 01 00      mov b, $1
3646   1B37 B0            cmp a, b
3647   1B38 FD 71         seq ; ==
3648   1B3A E4            pop a
3649   1B3B             ; END RELATIONAL
3650   1B3B FD A7         sand a, b ; &&
3651   1B3D E4            pop a
3652   1B3E E7            pop d
3653   1B3F FD 43         mov [d], b
3654   1B41             ;; result = 1 && 0 && 1; 
3655   1B41 FA F9 FF      lea d, [bp + -7] ; $result
3656   1B44 DA            push d
3657   1B45 26 01 00      mov b, $1
3658   1B48 D7            push a
3659   1B49 11            mov a, b
3660   1B4A 26 00 00      mov b, $0
3661   1B4D FD A7         sand a, b ; &&
3662   1B4F 11            mov a, b
3663   1B50 26 01 00      mov b, $1
3664   1B53 FD A7         sand a, b ; &&
3665   1B55 E4            pop a
3666   1B56 E7            pop d
3667   1B57 FD 43         mov [d], b
3668   1B59             ;; pass = pass && result == 0; 
3669   1B59 FA F7 FF      lea d, [bp + -9] ; $pass
3670   1B5C DA            push d
3671   1B5D FA F7 FF      lea d, [bp + -9] ; $pass
3672   1B60 2A            mov b, [d]
3673   1B61 D7            push a
3674   1B62 11            mov a, b
3675   1B63 FA F9 FF      lea d, [bp + -7] ; $result
3676   1B66 2A            mov b, [d]
3677   1B67             ; START RELATIONAL
3678   1B67 D7            push a
3679   1B68 11            mov a, b
3680   1B69 26 00 00      mov b, $0
3681   1B6C B0            cmp a, b
3682   1B6D FD 71         seq ; ==
3683   1B6F E4            pop a
3684   1B70             ; END RELATIONAL
3685   1B70 FD A7         sand a, b ; &&
3686   1B72 E4            pop a
3687   1B73 E7            pop d
3688   1B74 FD 43         mov [d], b
3689   1B76             ;; result = 1 || 1 || 1; 
3690   1B76 FA F9 FF      lea d, [bp + -7] ; $result
3691   1B79 DA            push d
3692   1B7A 26 01 00      mov b, $1
3693   1B7D D7            push a
3694   1B7E 11            mov a, b
3695   1B7F 26 01 00      mov b, $1
3696   1B82 FD A8         sor a, b ; ||
3697   1B84 11            mov a, b
3698   1B85 26 01 00      mov b, $1
3699   1B88 FD A8         sor a, b ; ||
3700   1B8A E4            pop a
3701   1B8B E7            pop d
3702   1B8C FD 43         mov [d], b
3703   1B8E             ;; pass = pass && result == 1; 
3704   1B8E FA F7 FF      lea d, [bp + -9] ; $pass
3705   1B91 DA            push d
3706   1B92 FA F7 FF      lea d, [bp + -9] ; $pass
3707   1B95 2A            mov b, [d]
3708   1B96 D7            push a
3709   1B97 11            mov a, b
3710   1B98 FA F9 FF      lea d, [bp + -7] ; $result
3711   1B9B 2A            mov b, [d]
3712   1B9C             ; START RELATIONAL
3713   1B9C D7            push a
3714   1B9D 11            mov a, b
3715   1B9E 26 01 00      mov b, $1
3716   1BA1 B0            cmp a, b
3717   1BA2 FD 71         seq ; ==
3718   1BA4 E4            pop a
3719   1BA5             ; END RELATIONAL
3720   1BA5 FD A7         sand a, b ; &&
3721   1BA7 E4            pop a
3722   1BA8 E7            pop d
3723   1BA9 FD 43         mov [d], b
3724   1BAB             ;; result = 0 || 1 || 0; 
3725   1BAB FA F9 FF      lea d, [bp + -7] ; $result
3726   1BAE DA            push d
3727   1BAF 26 00 00      mov b, $0
3728   1BB2 D7            push a
3729   1BB3 11            mov a, b
3730   1BB4 26 01 00      mov b, $1
3731   1BB7 FD A8         sor a, b ; ||
3732   1BB9 11            mov a, b
3733   1BBA 26 00 00      mov b, $0
3734   1BBD FD A8         sor a, b ; ||
3735   1BBF E4            pop a
3736   1BC0 E7            pop d
3737   1BC1 FD 43         mov [d], b
3738   1BC3             ;; pass = pass && result == 1; 
3739   1BC3 FA F7 FF      lea d, [bp + -9] ; $pass
3740   1BC6 DA            push d
3741   1BC7 FA F7 FF      lea d, [bp + -9] ; $pass
3742   1BCA 2A            mov b, [d]
3743   1BCB D7            push a
3744   1BCC 11            mov a, b
3745   1BCD FA F9 FF      lea d, [bp + -7] ; $result
3746   1BD0 2A            mov b, [d]
3747   1BD1             ; START RELATIONAL
3748   1BD1 D7            push a
3749   1BD2 11            mov a, b
3750   1BD3 26 01 00      mov b, $1
3751   1BD6 B0            cmp a, b
3752   1BD7 FD 71         seq ; ==
3753   1BD9 E4            pop a
3754   1BDA             ; END RELATIONAL
3755   1BDA FD A7         sand a, b ; &&
3756   1BDC E4            pop a
3757   1BDD E7            pop d
3758   1BDE FD 43         mov [d], b
3759   1BE0             ;; result = 1 || 0 && 1; 
3760   1BE0 FA F9 FF      lea d, [bp + -7] ; $result
3761   1BE3 DA            push d
3762   1BE4 26 01 00      mov b, $1
3763   1BE7 D7            push a
3764   1BE8 11            mov a, b
3765   1BE9 26 00 00      mov b, $0
3766   1BEC D7            push a
3767   1BED 11            mov a, b
3768   1BEE 26 01 00      mov b, $1
3769   1BF1 FD A7         sand a, b ; &&
3770   1BF3 E4            pop a
3771   1BF4 FD A8         sor a, b ; ||
3772   1BF6 E4            pop a
3773   1BF7 E7            pop d
3774   1BF8 FD 43         mov [d], b
3775   1BFA             ;; pass = pass && result == 1; 
3776   1BFA FA F7 FF      lea d, [bp + -9] ; $pass
3777   1BFD DA            push d
3778   1BFE FA F7 FF      lea d, [bp + -9] ; $pass
3779   1C01 2A            mov b, [d]
3780   1C02 D7            push a
3781   1C03 11            mov a, b
3782   1C04 FA F9 FF      lea d, [bp + -7] ; $result
3783   1C07 2A            mov b, [d]
3784   1C08             ; START RELATIONAL
3785   1C08 D7            push a
3786   1C09 11            mov a, b
3787   1C0A 26 01 00      mov b, $1
3788   1C0D B0            cmp a, b
3789   1C0E FD 71         seq ; ==
3790   1C10 E4            pop a
3791   1C11             ; END RELATIONAL
3792   1C11 FD A7         sand a, b ; &&
3793   1C13 E4            pop a
3794   1C14 E7            pop d
3795   1C15 FD 43         mov [d], b
3796   1C17             ;; result = 0 || 0 || 0; 
3797   1C17 FA F9 FF      lea d, [bp + -7] ; $result
3798   1C1A DA            push d
3799   1C1B 26 00 00      mov b, $0
3800   1C1E D7            push a
3801   1C1F 11            mov a, b
3802   1C20 26 00 00      mov b, $0
3803   1C23 FD A8         sor a, b ; ||
3804   1C25 11            mov a, b
3805   1C26 26 00 00      mov b, $0
3806   1C29 FD A8         sor a, b ; ||
3807   1C2B E4            pop a
3808   1C2C E7            pop d
3809   1C2D FD 43         mov [d], b
3810   1C2F             ;; pass = pass && result == 0; 
3811   1C2F FA F7 FF      lea d, [bp + -9] ; $pass
3812   1C32 DA            push d
3813   1C33 FA F7 FF      lea d, [bp + -9] ; $pass
3814   1C36 2A            mov b, [d]
3815   1C37 D7            push a
3816   1C38 11            mov a, b
3817   1C39 FA F9 FF      lea d, [bp + -7] ; $result
3818   1C3C 2A            mov b, [d]
3819   1C3D             ; START RELATIONAL
3820   1C3D D7            push a
3821   1C3E 11            mov a, b
3822   1C3F 26 00 00      mov b, $0
3823   1C42 B0            cmp a, b
3824   1C43 FD 71         seq ; ==
3825   1C45 E4            pop a
3826   1C46             ; END RELATIONAL
3827   1C46 FD A7         sand a, b ; &&
3828   1C48 E4            pop a
3829   1C49 E7            pop d
3830   1C4A FD 43         mov [d], b
3831   1C4C             ;; a = 1; b = 1; c = 1; 
3832   1C4C FA FF FF      lea d, [bp + -1] ; $a
3833   1C4F DA            push d
3834   1C50 26 01 00      mov b, $1
3835   1C53 E7            pop d
3836   1C54 FD 43         mov [d], b
3837   1C56             ;; b = 1; c = 1; 
3838   1C56 FA FD FF      lea d, [bp + -3] ; $b
3839   1C59 DA            push d
3840   1C5A 26 01 00      mov b, $1
3841   1C5D E7            pop d
3842   1C5E FD 43         mov [d], b
3843   1C60             ;; c = 1; 
3844   1C60 FA FB FF      lea d, [bp + -5] ; $c
3845   1C63 DA            push d
3846   1C64 26 01 00      mov b, $1
3847   1C67 E7            pop d
3848   1C68 FD 43         mov [d], b
3849   1C6A             ;; result = a && b && c; 
3850   1C6A FA F9 FF      lea d, [bp + -7] ; $result
3851   1C6D DA            push d
3852   1C6E FA FF FF      lea d, [bp + -1] ; $a
3853   1C71 2A            mov b, [d]
3854   1C72 D7            push a
3855   1C73 11            mov a, b
3856   1C74 FA FD FF      lea d, [bp + -3] ; $b
3857   1C77 2A            mov b, [d]
3858   1C78 FD A7         sand a, b ; &&
3859   1C7A 11            mov a, b
3860   1C7B FA FB FF      lea d, [bp + -5] ; $c
3861   1C7E 2A            mov b, [d]
3862   1C7F FD A7         sand a, b ; &&
3863   1C81 E4            pop a
3864   1C82 E7            pop d
3865   1C83 FD 43         mov [d], b
3866   1C85             ;; pass = pass && result == 1; 
3867   1C85 FA F7 FF      lea d, [bp + -9] ; $pass
3868   1C88 DA            push d
3869   1C89 FA F7 FF      lea d, [bp + -9] ; $pass
3870   1C8C 2A            mov b, [d]
3871   1C8D D7            push a
3872   1C8E 11            mov a, b
3873   1C8F FA F9 FF      lea d, [bp + -7] ; $result
3874   1C92 2A            mov b, [d]
3875   1C93             ; START RELATIONAL
3876   1C93 D7            push a
3877   1C94 11            mov a, b
3878   1C95 26 01 00      mov b, $1
3879   1C98 B0            cmp a, b
3880   1C99 FD 71         seq ; ==
3881   1C9B E4            pop a
3882   1C9C             ; END RELATIONAL
3883   1C9C FD A7         sand a, b ; &&
3884   1C9E E4            pop a
3885   1C9F E7            pop d
3886   1CA0 FD 43         mov [d], b
3887   1CA2             ;; a = 1; b = 0; c = 1; 
3888   1CA2 FA FF FF      lea d, [bp + -1] ; $a
3889   1CA5 DA            push d
3890   1CA6 26 01 00      mov b, $1
3891   1CA9 E7            pop d
3892   1CAA FD 43         mov [d], b
3893   1CAC             ;; b = 0; c = 1; 
3894   1CAC FA FD FF      lea d, [bp + -3] ; $b
3895   1CAF DA            push d
3896   1CB0 26 00 00      mov b, $0
3897   1CB3 E7            pop d
3898   1CB4 FD 43         mov [d], b
3899   1CB6             ;; c = 1; 
3900   1CB6 FA FB FF      lea d, [bp + -5] ; $c
3901   1CB9 DA            push d
3902   1CBA 26 01 00      mov b, $1
3903   1CBD E7            pop d
3904   1CBE FD 43         mov [d], b
3905   1CC0             ;; result = a && b && c; 
3906   1CC0 FA F9 FF      lea d, [bp + -7] ; $result
3907   1CC3 DA            push d
3908   1CC4 FA FF FF      lea d, [bp + -1] ; $a
3909   1CC7 2A            mov b, [d]
3910   1CC8 D7            push a
3911   1CC9 11            mov a, b
3912   1CCA FA FD FF      lea d, [bp + -3] ; $b
3913   1CCD 2A            mov b, [d]
3914   1CCE FD A7         sand a, b ; &&
3915   1CD0 11            mov a, b
3916   1CD1 FA FB FF      lea d, [bp + -5] ; $c
3917   1CD4 2A            mov b, [d]
3918   1CD5 FD A7         sand a, b ; &&
3919   1CD7 E4            pop a
3920   1CD8 E7            pop d
3921   1CD9 FD 43         mov [d], b
3922   1CDB             ;; pass = pass && result == 0; 
3923   1CDB FA F7 FF      lea d, [bp + -9] ; $pass
3924   1CDE DA            push d
3925   1CDF FA F7 FF      lea d, [bp + -9] ; $pass
3926   1CE2 2A            mov b, [d]
3927   1CE3 D7            push a
3928   1CE4 11            mov a, b
3929   1CE5 FA F9 FF      lea d, [bp + -7] ; $result
3930   1CE8 2A            mov b, [d]
3931   1CE9             ; START RELATIONAL
3932   1CE9 D7            push a
3933   1CEA 11            mov a, b
3934   1CEB 26 00 00      mov b, $0
3935   1CEE B0            cmp a, b
3936   1CEF FD 71         seq ; ==
3937   1CF1 E4            pop a
3938   1CF2             ; END RELATIONAL
3939   1CF2 FD A7         sand a, b ; &&
3940   1CF4 E4            pop a
3941   1CF5 E7            pop d
3942   1CF6 FD 43         mov [d], b
3943   1CF8             ;; a = 1; b = 1; c = 1; 
3944   1CF8 FA FF FF      lea d, [bp + -1] ; $a
3945   1CFB DA            push d
3946   1CFC 26 01 00      mov b, $1
3947   1CFF E7            pop d
3948   1D00 FD 43         mov [d], b
3949   1D02             ;; b = 1; c = 1; 
3950   1D02 FA FD FF      lea d, [bp + -3] ; $b
3951   1D05 DA            push d
3952   1D06 26 01 00      mov b, $1
3953   1D09 E7            pop d
3954   1D0A FD 43         mov [d], b
3955   1D0C             ;; c = 1; 
3956   1D0C FA FB FF      lea d, [bp + -5] ; $c
3957   1D0F DA            push d
3958   1D10 26 01 00      mov b, $1
3959   1D13 E7            pop d
3960   1D14 FD 43         mov [d], b
3961   1D16             ;; result = a || b || b; 
3962   1D16 FA F9 FF      lea d, [bp + -7] ; $result
3963   1D19 DA            push d
3964   1D1A FA FF FF      lea d, [bp + -1] ; $a
3965   1D1D 2A            mov b, [d]
3966   1D1E D7            push a
3967   1D1F 11            mov a, b
3968   1D20 FA FD FF      lea d, [bp + -3] ; $b
3969   1D23 2A            mov b, [d]
3970   1D24 FD A8         sor a, b ; ||
3971   1D26 11            mov a, b
3972   1D27 FA FD FF      lea d, [bp + -3] ; $b
3973   1D2A 2A            mov b, [d]
3974   1D2B FD A8         sor a, b ; ||
3975   1D2D E4            pop a
3976   1D2E E7            pop d
3977   1D2F FD 43         mov [d], b
3978   1D31             ;; pass = pass && result == 1; 
3979   1D31 FA F7 FF      lea d, [bp + -9] ; $pass
3980   1D34 DA            push d
3981   1D35 FA F7 FF      lea d, [bp + -9] ; $pass
3982   1D38 2A            mov b, [d]
3983   1D39 D7            push a
3984   1D3A 11            mov a, b
3985   1D3B FA F9 FF      lea d, [bp + -7] ; $result
3986   1D3E 2A            mov b, [d]
3987   1D3F             ; START RELATIONAL
3988   1D3F D7            push a
3989   1D40 11            mov a, b
3990   1D41 26 01 00      mov b, $1
3991   1D44 B0            cmp a, b
3992   1D45 FD 71         seq ; ==
3993   1D47 E4            pop a
3994   1D48             ; END RELATIONAL
3995   1D48 FD A7         sand a, b ; &&
3996   1D4A E4            pop a
3997   1D4B E7            pop d
3998   1D4C FD 43         mov [d], b
3999   1D4E             ;; a = 0; b = 1; c = 0; 
4000   1D4E FA FF FF      lea d, [bp + -1] ; $a
4001   1D51 DA            push d
4002   1D52 26 00 00      mov b, $0
4003   1D55 E7            pop d
4004   1D56 FD 43         mov [d], b
4005   1D58             ;; b = 1; c = 0; 
4006   1D58 FA FD FF      lea d, [bp + -3] ; $b
4007   1D5B DA            push d
4008   1D5C 26 01 00      mov b, $1
4009   1D5F E7            pop d
4010   1D60 FD 43         mov [d], b
4011   1D62             ;; c = 0; 
4012   1D62 FA FB FF      lea d, [bp + -5] ; $c
4013   1D65 DA            push d
4014   1D66 26 00 00      mov b, $0
4015   1D69 E7            pop d
4016   1D6A FD 43         mov [d], b
4017   1D6C             ;; result = a || b || b; 
4018   1D6C FA F9 FF      lea d, [bp + -7] ; $result
4019   1D6F DA            push d
4020   1D70 FA FF FF      lea d, [bp + -1] ; $a
4021   1D73 2A            mov b, [d]
4022   1D74 D7            push a
4023   1D75 11            mov a, b
4024   1D76 FA FD FF      lea d, [bp + -3] ; $b
4025   1D79 2A            mov b, [d]
4026   1D7A FD A8         sor a, b ; ||
4027   1D7C 11            mov a, b
4028   1D7D FA FD FF      lea d, [bp + -3] ; $b
4029   1D80 2A            mov b, [d]
4030   1D81 FD A8         sor a, b ; ||
4031   1D83 E4            pop a
4032   1D84 E7            pop d
4033   1D85 FD 43         mov [d], b
4034   1D87             ;; pass = pass && result == 1; 
4035   1D87 FA F7 FF      lea d, [bp + -9] ; $pass
4036   1D8A DA            push d
4037   1D8B FA F7 FF      lea d, [bp + -9] ; $pass
4038   1D8E 2A            mov b, [d]
4039   1D8F D7            push a
4040   1D90 11            mov a, b
4041   1D91 FA F9 FF      lea d, [bp + -7] ; $result
4042   1D94 2A            mov b, [d]
4043   1D95             ; START RELATIONAL
4044   1D95 D7            push a
4045   1D96 11            mov a, b
4046   1D97 26 01 00      mov b, $1
4047   1D9A B0            cmp a, b
4048   1D9B FD 71         seq ; ==
4049   1D9D E4            pop a
4050   1D9E             ; END RELATIONAL
4051   1D9E FD A7         sand a, b ; &&
4052   1DA0 E4            pop a
4053   1DA1 E7            pop d
4054   1DA2 FD 43         mov [d], b
4055   1DA4             ;; a = 1; b = 0; c = 1; 
4056   1DA4 FA FF FF      lea d, [bp + -1] ; $a
4057   1DA7 DA            push d
4058   1DA8 26 01 00      mov b, $1
4059   1DAB E7            pop d
4060   1DAC FD 43         mov [d], b
4061   1DAE             ;; b = 0; c = 1; 
4062   1DAE FA FD FF      lea d, [bp + -3] ; $b
4063   1DB1 DA            push d
4064   1DB2 26 00 00      mov b, $0
4065   1DB5 E7            pop d
4066   1DB6 FD 43         mov [d], b
4067   1DB8             ;; c = 1; 
4068   1DB8 FA FB FF      lea d, [bp + -5] ; $c
4069   1DBB DA            push d
4070   1DBC 26 01 00      mov b, $1
4071   1DBF E7            pop d
4072   1DC0 FD 43         mov [d], b
4073   1DC2             ;; result = a || b && b; 
4074   1DC2 FA F9 FF      lea d, [bp + -7] ; $result
4075   1DC5 DA            push d
4076   1DC6 FA FF FF      lea d, [bp + -1] ; $a
4077   1DC9 2A            mov b, [d]
4078   1DCA D7            push a
4079   1DCB 11            mov a, b
4080   1DCC FA FD FF      lea d, [bp + -3] ; $b
4081   1DCF 2A            mov b, [d]
4082   1DD0 D7            push a
4083   1DD1 11            mov a, b
4084   1DD2 FA FD FF      lea d, [bp + -3] ; $b
4085   1DD5 2A            mov b, [d]
4086   1DD6 FD A7         sand a, b ; &&
4087   1DD8 E4            pop a
4088   1DD9 FD A8         sor a, b ; ||
4089   1DDB E4            pop a
4090   1DDC E7            pop d
4091   1DDD FD 43         mov [d], b
4092   1DDF             ;; pass = pass && result == 1; 
4093   1DDF FA F7 FF      lea d, [bp + -9] ; $pass
4094   1DE2 DA            push d
4095   1DE3 FA F7 FF      lea d, [bp + -9] ; $pass
4096   1DE6 2A            mov b, [d]
4097   1DE7 D7            push a
4098   1DE8 11            mov a, b
4099   1DE9 FA F9 FF      lea d, [bp + -7] ; $result
4100   1DEC 2A            mov b, [d]
4101   1DED             ; START RELATIONAL
4102   1DED D7            push a
4103   1DEE 11            mov a, b
4104   1DEF 26 01 00      mov b, $1
4105   1DF2 B0            cmp a, b
4106   1DF3 FD 71         seq ; ==
4107   1DF5 E4            pop a
4108   1DF6             ; END RELATIONAL
4109   1DF6 FD A7         sand a, b ; &&
4110   1DF8 E4            pop a
4111   1DF9 E7            pop d
4112   1DFA FD 43         mov [d], b
4113   1DFC             ;; a = 0; b = 0; c = 0; 
4114   1DFC FA FF FF      lea d, [bp + -1] ; $a
4115   1DFF DA            push d
4116   1E00 26 00 00      mov b, $0
4117   1E03 E7            pop d
4118   1E04 FD 43         mov [d], b
4119   1E06             ;; b = 0; c = 0; 
4120   1E06 FA FD FF      lea d, [bp + -3] ; $b
4121   1E09 DA            push d
4122   1E0A 26 00 00      mov b, $0
4123   1E0D E7            pop d
4124   1E0E FD 43         mov [d], b
4125   1E10             ;; c = 0; 
4126   1E10 FA FB FF      lea d, [bp + -5] ; $c
4127   1E13 DA            push d
4128   1E14 26 00 00      mov b, $0
4129   1E17 E7            pop d
4130   1E18 FD 43         mov [d], b
4131   1E1A             ;; result = a || b || b; 
4132   1E1A FA F9 FF      lea d, [bp + -7] ; $result
4133   1E1D DA            push d
4134   1E1E FA FF FF      lea d, [bp + -1] ; $a
4135   1E21 2A            mov b, [d]
4136   1E22 D7            push a
4137   1E23 11            mov a, b
4138   1E24 FA FD FF      lea d, [bp + -3] ; $b
4139   1E27 2A            mov b, [d]
4140   1E28 FD A8         sor a, b ; ||
4141   1E2A 11            mov a, b
4142   1E2B FA FD FF      lea d, [bp + -3] ; $b
4143   1E2E 2A            mov b, [d]
4144   1E2F FD A8         sor a, b ; ||
4145   1E31 E4            pop a
4146   1E32 E7            pop d
4147   1E33 FD 43         mov [d], b
4148   1E35             ;; pass = pass && result == 0; 
4149   1E35 FA F7 FF      lea d, [bp + -9] ; $pass
4150   1E38 DA            push d
4151   1E39 FA F7 FF      lea d, [bp + -9] ; $pass
4152   1E3C 2A            mov b, [d]
4153   1E3D D7            push a
4154   1E3E 11            mov a, b
4155   1E3F FA F9 FF      lea d, [bp + -7] ; $result
4156   1E42 2A            mov b, [d]
4157   1E43             ; START RELATIONAL
4158   1E43 D7            push a
4159   1E44 11            mov a, b
4160   1E45 26 00 00      mov b, $0
4161   1E48 B0            cmp a, b
4162   1E49 FD 71         seq ; ==
4163   1E4B E4            pop a
4164   1E4C             ; END RELATIONAL
4165   1E4C FD A7         sand a, b ; &&
4166   1E4E E4            pop a
4167   1E4F E7            pop d
4168   1E50 FD 43         mov [d], b
4169   1E52             ;; return pass; 
4170   1E52 FA F7 FF      lea d, [bp + -9] ; $pass
4171   1E55 2A            mov b, [d]
4172   1E56 F9            leave
4173   1E57 09            ret
4174   1E58             
4175   1E58             test5:
4176   1E58 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4177   1E5B             ; $pass 
4178   1E5B             ; $i 
4179   1E5B             ; $j 
4180   1E5B             ; $k 
4181   1E5B             ; $a1 
4182   1E5B             ; $a2 
4183   1E5B             ; $a3 
4184   1E5B 52 26 00      sub sp, 38
4185   1E5E             ;; i = 1; 
4186   1E5E FA FD FF      lea d, [bp + -3] ; $i
4187   1E61 DA            push d
4188   1E62 26 01 00      mov b, $1
4189   1E65 E7            pop d
4190   1E66 FD 43         mov [d], b
4191   1E68             ;; j = 1; 
4192   1E68 FA FB FF      lea d, [bp + -5] ; $j
4193   1E6B DA            push d
4194   1E6C 26 01 00      mov b, $1
4195   1E6F E7            pop d
4196   1E70 FD 43         mov [d], b
4197   1E72             ;; k = 1; 
4198   1E72 FA F9 FF      lea d, [bp + -7] ; $k
4199   1E75 DA            push d
4200   1E76 26 01 00      mov b, $1
4201   1E79 E7            pop d
4202   1E7A FD 43         mov [d], b
4203   1E7C             ;; a1[3] = 1; 
4204   1E7C FA EF FF      lea d, [bp + -17] ; $a1
4205   1E7F D7            push a
4206   1E80 DA            push d
4207   1E81 26 03 00      mov b, $3
4208   1E84 E7            pop d
4209   1E85 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4210   1E89 E4            pop a
4211   1E8A DA            push d
4212   1E8B 26 01 00      mov b, $1
4213   1E8E E7            pop d
4214   1E8F FD 43         mov [d], b
4215   1E91             ;; a2[2] = 1; 
4216   1E91 FA E5 FF      lea d, [bp + -27] ; $a2
4217   1E94 D7            push a
4218   1E95 DA            push d
4219   1E96 26 02 00      mov b, $2
4220   1E99 E7            pop d
4221   1E9A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4222   1E9E E4            pop a
4223   1E9F DA            push d
4224   1EA0 26 01 00      mov b, $1
4225   1EA3 E7            pop d
4226   1EA4 FD 43         mov [d], b
4227   1EA6             ;; a3[a2[a1[i + j + (k && 1) + (1 && 0)] + (i && 1)] + (0 || j)] = 56; 
4228   1EA6 FA DB FF      lea d, [bp + -37] ; $a3
4229   1EA9 D7            push a
4230   1EAA DA            push d
4231   1EAB FA E5 FF      lea d, [bp + -27] ; $a2
4232   1EAE D7            push a
4233   1EAF DA            push d
4234   1EB0 FA EF FF      lea d, [bp + -17] ; $a1
4235   1EB3 D7            push a
4236   1EB4 DA            push d
4237   1EB5 FA FD FF      lea d, [bp + -3] ; $i
4238   1EB8 2A            mov b, [d]
4239   1EB9             ; START TERMS
4240   1EB9 D7            push a
4241   1EBA 11            mov a, b
4242   1EBB FA FB FF      lea d, [bp + -5] ; $j
4243   1EBE 2A            mov b, [d]
4244   1EBF 56            add b, a
4245   1EC0 11            mov a, b
4246   1EC1 FA F9 FF      lea d, [bp + -7] ; $k
4247   1EC4 2A            mov b, [d]
4248   1EC5 D7            push a
4249   1EC6 11            mov a, b
4250   1EC7 26 01 00      mov b, $1
4251   1ECA FD A7         sand a, b ; &&
4252   1ECC E4            pop a
4253   1ECD 56            add b, a
4254   1ECE 11            mov a, b
4255   1ECF 26 01 00      mov b, $1
4256   1ED2 D7            push a
4257   1ED3 11            mov a, b
4258   1ED4 26 00 00      mov b, $0
4259   1ED7 FD A7         sand a, b ; &&
4260   1ED9 E4            pop a
4261   1EDA 56            add b, a
4262   1EDB E4            pop a
4263   1EDC             ; END TERMS
4264   1EDC E7            pop d
4265   1EDD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4266   1EE1 E4            pop a
4267   1EE2 2A            mov b, [d]
4268   1EE3             ; START TERMS
4269   1EE3 D7            push a
4270   1EE4 11            mov a, b
4271   1EE5 FA FD FF      lea d, [bp + -3] ; $i
4272   1EE8 2A            mov b, [d]
4273   1EE9 D7            push a
4274   1EEA 11            mov a, b
4275   1EEB 26 01 00      mov b, $1
4276   1EEE FD A7         sand a, b ; &&
4277   1EF0 E4            pop a
4278   1EF1 56            add b, a
4279   1EF2 E4            pop a
4280   1EF3             ; END TERMS
4281   1EF3 E7            pop d
4282   1EF4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4283   1EF8 E4            pop a
4284   1EF9 2A            mov b, [d]
4285   1EFA             ; START TERMS
4286   1EFA D7            push a
4287   1EFB 11            mov a, b
4288   1EFC 26 00 00      mov b, $0
4289   1EFF D7            push a
4290   1F00 11            mov a, b
4291   1F01 FA FB FF      lea d, [bp + -5] ; $j
4292   1F04 2A            mov b, [d]
4293   1F05 FD A8         sor a, b ; ||
4294   1F07 E4            pop a
4295   1F08 56            add b, a
4296   1F09 E4            pop a
4297   1F0A             ; END TERMS
4298   1F0A E7            pop d
4299   1F0B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4300   1F0F E4            pop a
4301   1F10 DA            push d
4302   1F11 26 38 00      mov b, $38
4303   1F14 E7            pop d
4304   1F15 FD 43         mov [d], b
4305   1F17             ;; pass = a3[2] == 56; 
4306   1F17 FA FF FF      lea d, [bp + -1] ; $pass
4307   1F1A DA            push d
4308   1F1B FA DB FF      lea d, [bp + -37] ; $a3
4309   1F1E D7            push a
4310   1F1F DA            push d
4311   1F20 26 02 00      mov b, $2
4312   1F23 E7            pop d
4313   1F24 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4314   1F28 E4            pop a
4315   1F29 2A            mov b, [d]
4316   1F2A             ; START RELATIONAL
4317   1F2A D7            push a
4318   1F2B 11            mov a, b
4319   1F2C 26 38 00      mov b, $38
4320   1F2F B0            cmp a, b
4321   1F30 FD 71         seq ; ==
4322   1F32 E4            pop a
4323   1F33             ; END RELATIONAL
4324   1F33 E7            pop d
4325   1F34 FD 43         mov [d], b
4326   1F36             ;; return pass; 
4327   1F36 FA FF FF      lea d, [bp + -1] ; $pass
4328   1F39 2A            mov b, [d]
4329   1F3A F9            leave
4330   1F3B 09            ret
4331   1F3C             
4332   1F3C             test6:
4333   1F3C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4334   1F3F             ; $pass 
4335   1F3F 10 01 00      mov a, $1
4336   1F42 45 FF FF      mov [bp + -1], a
4337   1F45             ; $i 
4338   1F45             ; $j 
4339   1F45             ; $k 
4340   1F45 52 08 00      sub sp, 8
4341   1F48             ;; test6_struct.c1 = 'A'; 
4342   1F48 3B 0E 25      mov d, _test6_struct_data ; $test6_struct
4343   1F4B 58 00 00      add d, 0
4344   1F4E DA            push d
4345   1F4F 26 41 00      mov b, $41
4346   1F52 E7            pop d
4347   1F53 FD 3E         mov [d], bl
4348   1F55             ;; pass = pass && test6_struct.c1 == 'A'; 
4349   1F55 FA FF FF      lea d, [bp + -1] ; $pass
4350   1F58 DA            push d
4351   1F59 FA FF FF      lea d, [bp + -1] ; $pass
4352   1F5C 2A            mov b, [d]
4353   1F5D D7            push a
4354   1F5E 11            mov a, b
4355   1F5F 3B 0E 25      mov d, _test6_struct_data ; $test6_struct
4356   1F62 58 00 00      add d, 0
4357   1F65 32            mov bl, [d]
4358   1F66 A7 00         mov bh, 0
4359   1F68             ; START RELATIONAL
4360   1F68 D7            push a
4361   1F69 11            mov a, b
4362   1F6A 26 41 00      mov b, $41
4363   1F6D B0            cmp a, b
4364   1F6E FD 71         seq ; ==
4365   1F70 E4            pop a
4366   1F71             ; END RELATIONAL
4367   1F71 FD A7         sand a, b ; &&
4368   1F73 E4            pop a
4369   1F74 E7            pop d
4370   1F75 FD 43         mov [d], b
4371   1F77             ;; for(i = 0; i < 5; i++){ 
4372   1F77             _for55_init:
4373   1F77 FA FD FF      lea d, [bp + -3] ; $i
4374   1F7A DA            push d
4375   1F7B 26 00 00      mov b, $0
4376   1F7E E7            pop d
4377   1F7F FD 43         mov [d], b
4378   1F81             _for55_cond:
4379   1F81 FA FD FF      lea d, [bp + -3] ; $i
4380   1F84 2A            mov b, [d]
4381   1F85             ; START RELATIONAL
4382   1F85 D7            push a
4383   1F86 11            mov a, b
4384   1F87 26 05 00      mov b, $5
4385   1F8A B0            cmp a, b
4386   1F8B FD 75         slu ; <= (unsigned)
4387   1F8D E4            pop a
4388   1F8E             ; END RELATIONAL
4389   1F8E C0 00 00      cmp b, 0
4390   1F91 C6 E7 1F      je _for55_exit
4391   1F94             _for55_block:
4392   1F94             ;; test6_struct.ca[i] = i; 
4393   1F94 3B 0E 25      mov d, _test6_struct_data ; $test6_struct
4394   1F97 58 01 00      add d, 1
4395   1F9A D7            push a
4396   1F9B DA            push d
4397   1F9C FA FD FF      lea d, [bp + -3] ; $i
4398   1F9F 2A            mov b, [d]
4399   1FA0 E7            pop d
4400   1FA1 5A            add d, b
4401   1FA2 E4            pop a
4402   1FA3 DA            push d
4403   1FA4 FA FD FF      lea d, [bp + -3] ; $i
4404   1FA7 2A            mov b, [d]
4405   1FA8 E7            pop d
4406   1FA9 FD 3E         mov [d], bl
4407   1FAB             ;; pass = pass && test6_struct.ca[i] == i; 
4408   1FAB FA FF FF      lea d, [bp + -1] ; $pass
4409   1FAE DA            push d
4410   1FAF FA FF FF      lea d, [bp + -1] ; $pass
4411   1FB2 2A            mov b, [d]
4412   1FB3 D7            push a
4413   1FB4 11            mov a, b
4414   1FB5 3B 0E 25      mov d, _test6_struct_data ; $test6_struct
4415   1FB8 58 01 00      add d, 1
4416   1FBB D7            push a
4417   1FBC DA            push d
4418   1FBD FA FD FF      lea d, [bp + -3] ; $i
4419   1FC0 2A            mov b, [d]
4420   1FC1 E7            pop d
4421   1FC2 5A            add d, b
4422   1FC3 E4            pop a
4423   1FC4 32            mov bl, [d]
4424   1FC5 A7 00         mov bh, 0
4425   1FC7             ; START RELATIONAL
4426   1FC7 D7            push a
4427   1FC8 11            mov a, b
4428   1FC9 FA FD FF      lea d, [bp + -3] ; $i
4429   1FCC 2A            mov b, [d]
4430   1FCD B0            cmp a, b
4431   1FCE FD 71         seq ; ==
4432   1FD0 E4            pop a
4433   1FD1             ; END RELATIONAL
4434   1FD1 FD A7         sand a, b ; &&
4435   1FD3 E4            pop a
4436   1FD4 E7            pop d
4437   1FD5 FD 43         mov [d], b
4438   1FD7             _for55_update:
4439   1FD7 FA FD FF      lea d, [bp + -3] ; $i
4440   1FDA 2A            mov b, [d]
4441   1FDB D8            push b
4442   1FDC FD 77         inc b
4443   1FDE FA FD FF      lea d, [bp + -3] ; $i
4444   1FE1 FD 43         mov [d], b
4445   1FE3 E5            pop b
4446   1FE4 0A 81 1F      jmp _for55_cond
4447   1FE7             _for55_exit:
4448   1FE7             ;; test6_struct.i1 = 55555; 
4449   1FE7 3B 0E 25      mov d, _test6_struct_data ; $test6_struct
4450   1FEA 58 06 00      add d, 6
4451   1FED DA            push d
4452   1FEE 26 03 D9      mov b, $d903
4453   1FF1 E7            pop d
4454   1FF2 FD 43         mov [d], b
4455   1FF4             ;; pass = pass && test6_struct.i1 == 55555; 
4456   1FF4 FA FF FF      lea d, [bp + -1] ; $pass
4457   1FF7 DA            push d
4458   1FF8 FA FF FF      lea d, [bp + -1] ; $pass
4459   1FFB 2A            mov b, [d]
4460   1FFC D7            push a
4461   1FFD 11            mov a, b
4462   1FFE 3B 0E 25      mov d, _test6_struct_data ; $test6_struct
4463   2001 58 06 00      add d, 6
4464   2004 2A            mov b, [d]
4465   2005             ; START RELATIONAL
4466   2005 D7            push a
4467   2006 11            mov a, b
4468   2007 26 03 D9      mov b, $d903
4469   200A B0            cmp a, b
4470   200B FD 71         seq ; ==
4471   200D E4            pop a
4472   200E             ; END RELATIONAL
4473   200E FD A7         sand a, b ; &&
4474   2010 E4            pop a
4475   2011 E7            pop d
4476   2012 FD 43         mov [d], b
4477   2014             ;; for(i = 0; i < 5; i++){ 
4478   2014             _for56_init:
4479   2014 FA FD FF      lea d, [bp + -3] ; $i
4480   2017 DA            push d
4481   2018 26 00 00      mov b, $0
4482   201B E7            pop d
4483   201C FD 43         mov [d], b
4484   201E             _for56_cond:
4485   201E FA FD FF      lea d, [bp + -3] ; $i
4486   2021 2A            mov b, [d]
4487   2022             ; START RELATIONAL
4488   2022 D7            push a
4489   2023 11            mov a, b
4490   2024 26 05 00      mov b, $5
4491   2027 B0            cmp a, b
4492   2028 FD 75         slu ; <= (unsigned)
4493   202A E4            pop a
4494   202B             ; END RELATIONAL
4495   202B C0 00 00      cmp b, 0
4496   202E C6 88 20      je _for56_exit
4497   2031             _for56_block:
4498   2031             ;; test6_struct.ia[i] = i; 
4499   2031 3B 0E 25      mov d, _test6_struct_data ; $test6_struct
4500   2034 58 08 00      add d, 8
4501   2037 D7            push a
4502   2038 DA            push d
4503   2039 FA FD FF      lea d, [bp + -3] ; $i
4504   203C 2A            mov b, [d]
4505   203D E7            pop d
4506   203E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4507   2042 E4            pop a
4508   2043 DA            push d
4509   2044 FA FD FF      lea d, [bp + -3] ; $i
4510   2047 2A            mov b, [d]
4511   2048 E7            pop d
4512   2049 FD 43         mov [d], b
4513   204B             ;; pass = pass && test6_struct.ia[i] == i; 
4514   204B FA FF FF      lea d, [bp + -1] ; $pass
4515   204E DA            push d
4516   204F FA FF FF      lea d, [bp + -1] ; $pass
4517   2052 2A            mov b, [d]
4518   2053 D7            push a
4519   2054 11            mov a, b
4520   2055 3B 0E 25      mov d, _test6_struct_data ; $test6_struct
4521   2058 58 08 00      add d, 8
4522   205B D7            push a
4523   205C DA            push d
4524   205D FA FD FF      lea d, [bp + -3] ; $i
4525   2060 2A            mov b, [d]
4526   2061 E7            pop d
4527   2062 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4528   2066 E4            pop a
4529   2067 2A            mov b, [d]
4530   2068             ; START RELATIONAL
4531   2068 D7            push a
4532   2069 11            mov a, b
4533   206A FA FD FF      lea d, [bp + -3] ; $i
4534   206D 2A            mov b, [d]
4535   206E B0            cmp a, b
4536   206F FD 71         seq ; ==
4537   2071 E4            pop a
4538   2072             ; END RELATIONAL
4539   2072 FD A7         sand a, b ; &&
4540   2074 E4            pop a
4541   2075 E7            pop d
4542   2076 FD 43         mov [d], b
4543   2078             _for56_update:
4544   2078 FA FD FF      lea d, [bp + -3] ; $i
4545   207B 2A            mov b, [d]
4546   207C D8            push b
4547   207D FD 77         inc b
4548   207F FA FD FF      lea d, [bp + -3] ; $i
4549   2082 FD 43         mov [d], b
4550   2084 E5            pop b
4551   2085 0A 1E 20      jmp _for56_cond
4552   2088             _for56_exit:
4553   2088             ;; return pass; 
4554   2088 FA FF FF      lea d, [bp + -1] ; $pass
4555   208B 2A            mov b, [d]
4556   208C F9            leave
4557   208D 09            ret
4558   208E             
4559   208E             test7:
4560   208E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4561   2091             ; $pass 
4562   2091 10 01 00      mov a, $1
4563   2094 45 FF FF      mov [bp + -1], a
4564   2097             ; $i 
4565   2097             ; $j 
4566   2097             ; $k 
4567   2097 52 08 00      sub sp, 8
4568   209A             ;; test7_struct.test7_substruct.c1 = 'A'; 
4569   209A 3B 20 25      mov d, _test7_struct_data ; $test7_struct
4570   209D 58 06 00      add d, 6
4571   20A0 58 00 00      add d, 0
4572   20A3 DA            push d
4573   20A4 26 41 00      mov b, $41
4574   20A7 E7            pop d
4575   20A8 FD 3E         mov [d], bl
4576   20AA             ;; pass = pass && test7_struct.test7_substruct.c1 == 'A'; 
4577   20AA FA FF FF      lea d, [bp + -1] ; $pass
4578   20AD DA            push d
4579   20AE FA FF FF      lea d, [bp + -1] ; $pass
4580   20B1 2A            mov b, [d]
4581   20B2 D7            push a
4582   20B3 11            mov a, b
4583   20B4 3B 20 25      mov d, _test7_struct_data ; $test7_struct
4584   20B7 58 06 00      add d, 6
4585   20BA 58 00 00      add d, 0
4586   20BD 32            mov bl, [d]
4587   20BE A7 00         mov bh, 0
4588   20C0             ; START RELATIONAL
4589   20C0 D7            push a
4590   20C1 11            mov a, b
4591   20C2 26 41 00      mov b, $41
4592   20C5 B0            cmp a, b
4593   20C6 FD 71         seq ; ==
4594   20C8 E4            pop a
4595   20C9             ; END RELATIONAL
4596   20C9 FD A7         sand a, b ; &&
4597   20CB E4            pop a
4598   20CC E7            pop d
4599   20CD FD 43         mov [d], b
4600   20CF             ;; for(i = 0; i < 5; i++){ 
4601   20CF             _for57_init:
4602   20CF FA FD FF      lea d, [bp + -3] ; $i
4603   20D2 DA            push d
4604   20D3 26 00 00      mov b, $0
4605   20D6 E7            pop d
4606   20D7 FD 43         mov [d], b
4607   20D9             _for57_cond:
4608   20D9 FA FD FF      lea d, [bp + -3] ; $i
4609   20DC 2A            mov b, [d]
4610   20DD             ; START RELATIONAL
4611   20DD D7            push a
4612   20DE 11            mov a, b
4613   20DF 26 05 00      mov b, $5
4614   20E2 B0            cmp a, b
4615   20E3 FD 75         slu ; <= (unsigned)
4616   20E5 E4            pop a
4617   20E6             ; END RELATIONAL
4618   20E6 C0 00 00      cmp b, 0
4619   20E9 C6 45 21      je _for57_exit
4620   20EC             _for57_block:
4621   20EC             ;; test7_struct.test7_substruct.ca[i] = i; 
4622   20EC 3B 20 25      mov d, _test7_struct_data ; $test7_struct
4623   20EF 58 06 00      add d, 6
4624   20F2 58 01 00      add d, 1
4625   20F5 D7            push a
4626   20F6 DA            push d
4627   20F7 FA FD FF      lea d, [bp + -3] ; $i
4628   20FA 2A            mov b, [d]
4629   20FB E7            pop d
4630   20FC 5A            add d, b
4631   20FD E4            pop a
4632   20FE DA            push d
4633   20FF FA FD FF      lea d, [bp + -3] ; $i
4634   2102 2A            mov b, [d]
4635   2103 E7            pop d
4636   2104 FD 3E         mov [d], bl
4637   2106             ;; pass = pass && test7_struct.test7_substruct.ca[i] == i; 
4638   2106 FA FF FF      lea d, [bp + -1] ; $pass
4639   2109 DA            push d
4640   210A FA FF FF      lea d, [bp + -1] ; $pass
4641   210D 2A            mov b, [d]
4642   210E D7            push a
4643   210F 11            mov a, b
4644   2110 3B 20 25      mov d, _test7_struct_data ; $test7_struct
4645   2113 58 06 00      add d, 6
4646   2116 58 01 00      add d, 1
4647   2119 D7            push a
4648   211A DA            push d
4649   211B FA FD FF      lea d, [bp + -3] ; $i
4650   211E 2A            mov b, [d]
4651   211F E7            pop d
4652   2120 5A            add d, b
4653   2121 E4            pop a
4654   2122 32            mov bl, [d]
4655   2123 A7 00         mov bh, 0
4656   2125             ; START RELATIONAL
4657   2125 D7            push a
4658   2126 11            mov a, b
4659   2127 FA FD FF      lea d, [bp + -3] ; $i
4660   212A 2A            mov b, [d]
4661   212B B0            cmp a, b
4662   212C FD 71         seq ; ==
4663   212E E4            pop a
4664   212F             ; END RELATIONAL
4665   212F FD A7         sand a, b ; &&
4666   2131 E4            pop a
4667   2132 E7            pop d
4668   2133 FD 43         mov [d], b
4669   2135             _for57_update:
4670   2135 FA FD FF      lea d, [bp + -3] ; $i
4671   2138 2A            mov b, [d]
4672   2139 D8            push b
4673   213A FD 77         inc b
4674   213C FA FD FF      lea d, [bp + -3] ; $i
4675   213F FD 43         mov [d], b
4676   2141 E5            pop b
4677   2142 0A D9 20      jmp _for57_cond
4678   2145             _for57_exit:
4679   2145             ;; test7_struct.test7_substruct.i1 = 55555; 
4680   2145 3B 20 25      mov d, _test7_struct_data ; $test7_struct
4681   2148 58 06 00      add d, 6
4682   214B 58 06 00      add d, 6
4683   214E DA            push d
4684   214F 26 03 D9      mov b, $d903
4685   2152 E7            pop d
4686   2153 FD 43         mov [d], b
4687   2155             ;; pass = pass && test7_struct.test7_substruct.i1 == 55555; 
4688   2155 FA FF FF      lea d, [bp + -1] ; $pass
4689   2158 DA            push d
4690   2159 FA FF FF      lea d, [bp + -1] ; $pass
4691   215C 2A            mov b, [d]
4692   215D D7            push a
4693   215E 11            mov a, b
4694   215F 3B 20 25      mov d, _test7_struct_data ; $test7_struct
4695   2162 58 06 00      add d, 6
4696   2165 58 06 00      add d, 6
4697   2168 2A            mov b, [d]
4698   2169             ; START RELATIONAL
4699   2169 D7            push a
4700   216A 11            mov a, b
4701   216B 26 03 D9      mov b, $d903
4702   216E B0            cmp a, b
4703   216F FD 71         seq ; ==
4704   2171 E4            pop a
4705   2172             ; END RELATIONAL
4706   2172 FD A7         sand a, b ; &&
4707   2174 E4            pop a
4708   2175 E7            pop d
4709   2176 FD 43         mov [d], b
4710   2178             ;; for(i = 0; i < 5; i++){ 
4711   2178             _for58_init:
4712   2178 FA FD FF      lea d, [bp + -3] ; $i
4713   217B DA            push d
4714   217C 26 00 00      mov b, $0
4715   217F E7            pop d
4716   2180 FD 43         mov [d], b
4717   2182             _for58_cond:
4718   2182 FA FD FF      lea d, [bp + -3] ; $i
4719   2185 2A            mov b, [d]
4720   2186             ; START RELATIONAL
4721   2186 D7            push a
4722   2187 11            mov a, b
4723   2188 26 05 00      mov b, $5
4724   218B B0            cmp a, b
4725   218C FD 75         slu ; <= (unsigned)
4726   218E E4            pop a
4727   218F             ; END RELATIONAL
4728   218F C0 00 00      cmp b, 0
4729   2192 C6 F2 21      je _for58_exit
4730   2195             _for58_block:
4731   2195             ;; test7_struct.test7_substruct.ia[i] = i; 
4732   2195 3B 20 25      mov d, _test7_struct_data ; $test7_struct
4733   2198 58 06 00      add d, 6
4734   219B 58 08 00      add d, 8
4735   219E D7            push a
4736   219F DA            push d
4737   21A0 FA FD FF      lea d, [bp + -3] ; $i
4738   21A3 2A            mov b, [d]
4739   21A4 E7            pop d
4740   21A5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4741   21A9 E4            pop a
4742   21AA DA            push d
4743   21AB FA FD FF      lea d, [bp + -3] ; $i
4744   21AE 2A            mov b, [d]
4745   21AF E7            pop d
4746   21B0 FD 43         mov [d], b
4747   21B2             ;; pass = pass && test7_struct.test7_substruct.ia[i] == i; 
4748   21B2 FA FF FF      lea d, [bp + -1] ; $pass
4749   21B5 DA            push d
4750   21B6 FA FF FF      lea d, [bp + -1] ; $pass
4751   21B9 2A            mov b, [d]
4752   21BA D7            push a
4753   21BB 11            mov a, b
4754   21BC 3B 20 25      mov d, _test7_struct_data ; $test7_struct
4755   21BF 58 06 00      add d, 6
4756   21C2 58 08 00      add d, 8
4757   21C5 D7            push a
4758   21C6 DA            push d
4759   21C7 FA FD FF      lea d, [bp + -3] ; $i
4760   21CA 2A            mov b, [d]
4761   21CB E7            pop d
4762   21CC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4763   21D0 E4            pop a
4764   21D1 2A            mov b, [d]
4765   21D2             ; START RELATIONAL
4766   21D2 D7            push a
4767   21D3 11            mov a, b
4768   21D4 FA FD FF      lea d, [bp + -3] ; $i
4769   21D7 2A            mov b, [d]
4770   21D8 B0            cmp a, b
4771   21D9 FD 71         seq ; ==
4772   21DB E4            pop a
4773   21DC             ; END RELATIONAL
4774   21DC FD A7         sand a, b ; &&
4775   21DE E4            pop a
4776   21DF E7            pop d
4777   21E0 FD 43         mov [d], b
4778   21E2             _for58_update:
4779   21E2 FA FD FF      lea d, [bp + -3] ; $i
4780   21E5 2A            mov b, [d]
4781   21E6 D8            push b
4782   21E7 FD 77         inc b
4783   21E9 FA FD FF      lea d, [bp + -3] ; $i
4784   21EC FD 43         mov [d], b
4785   21EE E5            pop b
4786   21EF 0A 82 21      jmp _for58_cond
4787   21F2             _for58_exit:
4788   21F2             ;; return pass; 
4789   21F2 FA FF FF      lea d, [bp + -1] ; $pass
4790   21F5 2A            mov b, [d]
4791   21F6 F9            leave
4792   21F7 09            ret
4793   21F8             
4794   21F8             test8:
4795   21F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4796   21FB             ; $pass 
4797   21FB 10 01 00      mov a, $1
4798   21FE 45 FF FF      mov [bp + -1], a
4799   2201             ; $i 
4800   2201             ; $j 
4801   2201             ; $k 
4802   2201             ; $test8_struct 
4803   2201 52 1A 00      sub sp, 26
4804   2204             ;; test8_struct.c1 = 'A'; 
4805   2204 FA E7 FF      lea d, [bp + -25] ; $test8_struct
4806   2207 58 00 00      add d, 0
4807   220A DA            push d
4808   220B 26 41 00      mov b, $41
4809   220E E7            pop d
4810   220F FD 3E         mov [d], bl
4811   2211             ;; pass = pass && test8_struct.c1 == 'A'; 
4812   2211 FA FF FF      lea d, [bp + -1] ; $pass
4813   2214 DA            push d
4814   2215 FA FF FF      lea d, [bp + -1] ; $pass
4815   2218 2A            mov b, [d]
4816   2219 D7            push a
4817   221A 11            mov a, b
4818   221B FA E7 FF      lea d, [bp + -25] ; $test8_struct
4819   221E 58 00 00      add d, 0
4820   2221 32            mov bl, [d]
4821   2222 A7 00         mov bh, 0
4822   2224             ; START RELATIONAL
4823   2224 D7            push a
4824   2225 11            mov a, b
4825   2226 26 41 00      mov b, $41
4826   2229 B0            cmp a, b
4827   222A FD 71         seq ; ==
4828   222C E4            pop a
4829   222D             ; END RELATIONAL
4830   222D FD A7         sand a, b ; &&
4831   222F E4            pop a
4832   2230 E7            pop d
4833   2231 FD 43         mov [d], b
4834   2233             ;; for(i = 0; i < 5; i++){ 
4835   2233             _for59_init:
4836   2233 FA FD FF      lea d, [bp + -3] ; $i
4837   2236 DA            push d
4838   2237 26 00 00      mov b, $0
4839   223A E7            pop d
4840   223B FD 43         mov [d], b
4841   223D             _for59_cond:
4842   223D FA FD FF      lea d, [bp + -3] ; $i
4843   2240 2A            mov b, [d]
4844   2241             ; START RELATIONAL
4845   2241 D7            push a
4846   2242 11            mov a, b
4847   2243 26 05 00      mov b, $5
4848   2246 B0            cmp a, b
4849   2247 FD 75         slu ; <= (unsigned)
4850   2249 E4            pop a
4851   224A             ; END RELATIONAL
4852   224A C0 00 00      cmp b, 0
4853   224D C6 A3 22      je _for59_exit
4854   2250             _for59_block:
4855   2250             ;; test8_struct.ca[i] = i; 
4856   2250 FA E7 FF      lea d, [bp + -25] ; $test8_struct
4857   2253 58 01 00      add d, 1
4858   2256 D7            push a
4859   2257 DA            push d
4860   2258 FA FD FF      lea d, [bp + -3] ; $i
4861   225B 2A            mov b, [d]
4862   225C E7            pop d
4863   225D 5A            add d, b
4864   225E E4            pop a
4865   225F DA            push d
4866   2260 FA FD FF      lea d, [bp + -3] ; $i
4867   2263 2A            mov b, [d]
4868   2264 E7            pop d
4869   2265 FD 3E         mov [d], bl
4870   2267             ;; pass = pass && test8_struct.ca[i] == i; 
4871   2267 FA FF FF      lea d, [bp + -1] ; $pass
4872   226A DA            push d
4873   226B FA FF FF      lea d, [bp + -1] ; $pass
4874   226E 2A            mov b, [d]
4875   226F D7            push a
4876   2270 11            mov a, b
4877   2271 FA E7 FF      lea d, [bp + -25] ; $test8_struct
4878   2274 58 01 00      add d, 1
4879   2277 D7            push a
4880   2278 DA            push d
4881   2279 FA FD FF      lea d, [bp + -3] ; $i
4882   227C 2A            mov b, [d]
4883   227D E7            pop d
4884   227E 5A            add d, b
4885   227F E4            pop a
4886   2280 32            mov bl, [d]
4887   2281 A7 00         mov bh, 0
4888   2283             ; START RELATIONAL
4889   2283 D7            push a
4890   2284 11            mov a, b
4891   2285 FA FD FF      lea d, [bp + -3] ; $i
4892   2288 2A            mov b, [d]
4893   2289 B0            cmp a, b
4894   228A FD 71         seq ; ==
4895   228C E4            pop a
4896   228D             ; END RELATIONAL
4897   228D FD A7         sand a, b ; &&
4898   228F E4            pop a
4899   2290 E7            pop d
4900   2291 FD 43         mov [d], b
4901   2293             _for59_update:
4902   2293 FA FD FF      lea d, [bp + -3] ; $i
4903   2296 2A            mov b, [d]
4904   2297 D8            push b
4905   2298 FD 77         inc b
4906   229A FA FD FF      lea d, [bp + -3] ; $i
4907   229D FD 43         mov [d], b
4908   229F E5            pop b
4909   22A0 0A 3D 22      jmp _for59_cond
4910   22A3             _for59_exit:
4911   22A3             ;; test8_struct.i1 = 55555; 
4912   22A3 FA E7 FF      lea d, [bp + -25] ; $test8_struct
4913   22A6 58 06 00      add d, 6
4914   22A9 DA            push d
4915   22AA 26 03 D9      mov b, $d903
4916   22AD E7            pop d
4917   22AE FD 43         mov [d], b
4918   22B0             ;; pass = pass && test8_struct.i1 == 55555; 
4919   22B0 FA FF FF      lea d, [bp + -1] ; $pass
4920   22B3 DA            push d
4921   22B4 FA FF FF      lea d, [bp + -1] ; $pass
4922   22B7 2A            mov b, [d]
4923   22B8 D7            push a
4924   22B9 11            mov a, b
4925   22BA FA E7 FF      lea d, [bp + -25] ; $test8_struct
4926   22BD 58 06 00      add d, 6
4927   22C0 2A            mov b, [d]
4928   22C1             ; START RELATIONAL
4929   22C1 D7            push a
4930   22C2 11            mov a, b
4931   22C3 26 03 D9      mov b, $d903
4932   22C6 B0            cmp a, b
4933   22C7 FD 71         seq ; ==
4934   22C9 E4            pop a
4935   22CA             ; END RELATIONAL
4936   22CA FD A7         sand a, b ; &&
4937   22CC E4            pop a
4938   22CD E7            pop d
4939   22CE FD 43         mov [d], b
4940   22D0             ;; for(i = 0; i < 5; i++){ 
4941   22D0             _for60_init:
4942   22D0 FA FD FF      lea d, [bp + -3] ; $i
4943   22D3 DA            push d
4944   22D4 26 00 00      mov b, $0
4945   22D7 E7            pop d
4946   22D8 FD 43         mov [d], b
4947   22DA             _for60_cond:
4948   22DA FA FD FF      lea d, [bp + -3] ; $i
4949   22DD 2A            mov b, [d]
4950   22DE             ; START RELATIONAL
4951   22DE D7            push a
4952   22DF 11            mov a, b
4953   22E0 26 05 00      mov b, $5
4954   22E3 B0            cmp a, b
4955   22E4 FD 75         slu ; <= (unsigned)
4956   22E6 E4            pop a
4957   22E7             ; END RELATIONAL
4958   22E7 C0 00 00      cmp b, 0
4959   22EA C6 44 23      je _for60_exit
4960   22ED             _for60_block:
4961   22ED             ;; test8_struct.ia[i] = i; 
4962   22ED FA E7 FF      lea d, [bp + -25] ; $test8_struct
4963   22F0 58 08 00      add d, 8
4964   22F3 D7            push a
4965   22F4 DA            push d
4966   22F5 FA FD FF      lea d, [bp + -3] ; $i
4967   22F8 2A            mov b, [d]
4968   22F9 E7            pop d
4969   22FA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4970   22FE E4            pop a
4971   22FF DA            push d
4972   2300 FA FD FF      lea d, [bp + -3] ; $i
4973   2303 2A            mov b, [d]
4974   2304 E7            pop d
4975   2305 FD 43         mov [d], b
4976   2307             ;; pass = pass && test8_struct.ia[i] == i; 
4977   2307 FA FF FF      lea d, [bp + -1] ; $pass
4978   230A DA            push d
4979   230B FA FF FF      lea d, [bp + -1] ; $pass
4980   230E 2A            mov b, [d]
4981   230F D7            push a
4982   2310 11            mov a, b
4983   2311 FA E7 FF      lea d, [bp + -25] ; $test8_struct
4984   2314 58 08 00      add d, 8
4985   2317 D7            push a
4986   2318 DA            push d
4987   2319 FA FD FF      lea d, [bp + -3] ; $i
4988   231C 2A            mov b, [d]
4989   231D E7            pop d
4990   231E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4991   2322 E4            pop a
4992   2323 2A            mov b, [d]
4993   2324             ; START RELATIONAL
4994   2324 D7            push a
4995   2325 11            mov a, b
4996   2326 FA FD FF      lea d, [bp + -3] ; $i
4997   2329 2A            mov b, [d]
4998   232A B0            cmp a, b
4999   232B FD 71         seq ; ==
5000   232D E4            pop a
5001   232E             ; END RELATIONAL
5002   232E FD A7         sand a, b ; &&
5003   2330 E4            pop a
5004   2331 E7            pop d
5005   2332 FD 43         mov [d], b
5006   2334             _for60_update:
5007   2334 FA FD FF      lea d, [bp + -3] ; $i
5008   2337 2A            mov b, [d]
5009   2338 D8            push b
5010   2339 FD 77         inc b
5011   233B FA FD FF      lea d, [bp + -3] ; $i
5012   233E FD 43         mov [d], b
5013   2340 E5            pop b
5014   2341 0A DA 22      jmp _for60_cond
5015   2344             _for60_exit:
5016   2344             ;; return pass; 
5017   2344 FA FF FF      lea d, [bp + -1] ; $pass
5018   2347 2A            mov b, [d]
5019   2348 F9            leave
5020   2349 09            ret
5021   234A             
5022   234A             test9:
5023   234A F8 00 00      enter 0 ; (push bp; mov bp, sp)
5024   234D             ; $pass 
5025   234D 10 01 00      mov a, $1
5026   2350 45 FF FF      mov [bp + -1], a
5027   2353             ; $i 
5028   2353             ; $j 
5029   2353             ; $k 
5030   2353             ; $test9_struct 
5031   2353 52 2C 00      sub sp, 44
5032   2356             ;; test9_struct.test9_substruct.c1 = 'A'; 
5033   2356 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5034   2359 58 06 00      add d, 6
5035   235C 58 00 00      add d, 0
5036   235F DA            push d
5037   2360 26 41 00      mov b, $41
5038   2363 E7            pop d
5039   2364 FD 3E         mov [d], bl
5040   2366             ;; pass = pass && test9_struct.test9_substruct.c1 == 'A'; 
5041   2366 FA FF FF      lea d, [bp + -1] ; $pass
5042   2369 DA            push d
5043   236A FA FF FF      lea d, [bp + -1] ; $pass
5044   236D 2A            mov b, [d]
5045   236E D7            push a
5046   236F 11            mov a, b
5047   2370 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5048   2373 58 06 00      add d, 6
5049   2376 58 00 00      add d, 0
5050   2379 32            mov bl, [d]
5051   237A A7 00         mov bh, 0
5052   237C             ; START RELATIONAL
5053   237C D7            push a
5054   237D 11            mov a, b
5055   237E 26 41 00      mov b, $41
5056   2381 B0            cmp a, b
5057   2382 FD 71         seq ; ==
5058   2384 E4            pop a
5059   2385             ; END RELATIONAL
5060   2385 FD A7         sand a, b ; &&
5061   2387 E4            pop a
5062   2388 E7            pop d
5063   2389 FD 43         mov [d], b
5064   238B             ;; for(i = 0; i < 5; i++){ 
5065   238B             _for61_init:
5066   238B FA FD FF      lea d, [bp + -3] ; $i
5067   238E DA            push d
5068   238F 26 00 00      mov b, $0
5069   2392 E7            pop d
5070   2393 FD 43         mov [d], b
5071   2395             _for61_cond:
5072   2395 FA FD FF      lea d, [bp + -3] ; $i
5073   2398 2A            mov b, [d]
5074   2399             ; START RELATIONAL
5075   2399 D7            push a
5076   239A 11            mov a, b
5077   239B 26 05 00      mov b, $5
5078   239E B0            cmp a, b
5079   239F FD 75         slu ; <= (unsigned)
5080   23A1 E4            pop a
5081   23A2             ; END RELATIONAL
5082   23A2 C0 00 00      cmp b, 0
5083   23A5 C6 01 24      je _for61_exit
5084   23A8             _for61_block:
5085   23A8             ;; test9_struct.test9_substruct.ca[i] = i; 
5086   23A8 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5087   23AB 58 06 00      add d, 6
5088   23AE 58 01 00      add d, 1
5089   23B1 D7            push a
5090   23B2 DA            push d
5091   23B3 FA FD FF      lea d, [bp + -3] ; $i
5092   23B6 2A            mov b, [d]
5093   23B7 E7            pop d
5094   23B8 5A            add d, b
5095   23B9 E4            pop a
5096   23BA DA            push d
5097   23BB FA FD FF      lea d, [bp + -3] ; $i
5098   23BE 2A            mov b, [d]
5099   23BF E7            pop d
5100   23C0 FD 3E         mov [d], bl
5101   23C2             ;; pass = pass && test9_struct.test9_substruct.ca[i] == i; 
5102   23C2 FA FF FF      lea d, [bp + -1] ; $pass
5103   23C5 DA            push d
5104   23C6 FA FF FF      lea d, [bp + -1] ; $pass
5105   23C9 2A            mov b, [d]
5106   23CA D7            push a
5107   23CB 11            mov a, b
5108   23CC FA D5 FF      lea d, [bp + -43] ; $test9_struct
5109   23CF 58 06 00      add d, 6
5110   23D2 58 01 00      add d, 1
5111   23D5 D7            push a
5112   23D6 DA            push d
5113   23D7 FA FD FF      lea d, [bp + -3] ; $i
5114   23DA 2A            mov b, [d]
5115   23DB E7            pop d
5116   23DC 5A            add d, b
5117   23DD E4            pop a
5118   23DE 32            mov bl, [d]
5119   23DF A7 00         mov bh, 0
5120   23E1             ; START RELATIONAL
5121   23E1 D7            push a
5122   23E2 11            mov a, b
5123   23E3 FA FD FF      lea d, [bp + -3] ; $i
5124   23E6 2A            mov b, [d]
5125   23E7 B0            cmp a, b
5126   23E8 FD 71         seq ; ==
5127   23EA E4            pop a
5128   23EB             ; END RELATIONAL
5129   23EB FD A7         sand a, b ; &&
5130   23ED E4            pop a
5131   23EE E7            pop d
5132   23EF FD 43         mov [d], b
5133   23F1             _for61_update:
5134   23F1 FA FD FF      lea d, [bp + -3] ; $i
5135   23F4 2A            mov b, [d]
5136   23F5 D8            push b
5137   23F6 FD 77         inc b
5138   23F8 FA FD FF      lea d, [bp + -3] ; $i
5139   23FB FD 43         mov [d], b
5140   23FD E5            pop b
5141   23FE 0A 95 23      jmp _for61_cond
5142   2401             _for61_exit:
5143   2401             ;; test9_struct.test9_substruct.i1 = 55555; 
5144   2401 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5145   2404 58 06 00      add d, 6
5146   2407 58 06 00      add d, 6
5147   240A DA            push d
5148   240B 26 03 D9      mov b, $d903
5149   240E E7            pop d
5150   240F FD 43         mov [d], b
5151   2411             ;; pass = pass && test9_struct.test9_substruct.i1 == 55555; 
5152   2411 FA FF FF      lea d, [bp + -1] ; $pass
5153   2414 DA            push d
5154   2415 FA FF FF      lea d, [bp + -1] ; $pass
5155   2418 2A            mov b, [d]
5156   2419 D7            push a
5157   241A 11            mov a, b
5158   241B FA D5 FF      lea d, [bp + -43] ; $test9_struct
5159   241E 58 06 00      add d, 6
5160   2421 58 06 00      add d, 6
5161   2424 2A            mov b, [d]
5162   2425             ; START RELATIONAL
5163   2425 D7            push a
5164   2426 11            mov a, b
5165   2427 26 03 D9      mov b, $d903
5166   242A B0            cmp a, b
5167   242B FD 71         seq ; ==
5168   242D E4            pop a
5169   242E             ; END RELATIONAL
5170   242E FD A7         sand a, b ; &&
5171   2430 E4            pop a
5172   2431 E7            pop d
5173   2432 FD 43         mov [d], b
5174   2434             ;; for(i = 0; i < 5; i++){ 
5175   2434             _for62_init:
5176   2434 FA FD FF      lea d, [bp + -3] ; $i
5177   2437 DA            push d
5178   2438 26 00 00      mov b, $0
5179   243B E7            pop d
5180   243C FD 43         mov [d], b
5181   243E             _for62_cond:
5182   243E FA FD FF      lea d, [bp + -3] ; $i
5183   2441 2A            mov b, [d]
5184   2442             ; START RELATIONAL
5185   2442 D7            push a
5186   2443 11            mov a, b
5187   2444 26 05 00      mov b, $5
5188   2447 B0            cmp a, b
5189   2448 FD 75         slu ; <= (unsigned)
5190   244A E4            pop a
5191   244B             ; END RELATIONAL
5192   244B C0 00 00      cmp b, 0
5193   244E C6 AE 24      je _for62_exit
5194   2451             _for62_block:
5195   2451             ;; test9_struct.test9_substruct.ia[i] = i; 
5196   2451 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5197   2454 58 06 00      add d, 6
5198   2457 58 08 00      add d, 8
5199   245A D7            push a
5200   245B DA            push d
5201   245C FA FD FF      lea d, [bp + -3] ; $i
5202   245F 2A            mov b, [d]
5203   2460 E7            pop d
5204   2461 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5205   2465 E4            pop a
5206   2466 DA            push d
5207   2467 FA FD FF      lea d, [bp + -3] ; $i
5208   246A 2A            mov b, [d]
5209   246B E7            pop d
5210   246C FD 43         mov [d], b
5211   246E             ;; pass = pass && test9_struct.test9_substruct.ia[i] == i; 
5212   246E FA FF FF      lea d, [bp + -1] ; $pass
5213   2471 DA            push d
5214   2472 FA FF FF      lea d, [bp + -1] ; $pass
5215   2475 2A            mov b, [d]
5216   2476 D7            push a
5217   2477 11            mov a, b
5218   2478 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5219   247B 58 06 00      add d, 6
5220   247E 58 08 00      add d, 8
5221   2481 D7            push a
5222   2482 DA            push d
5223   2483 FA FD FF      lea d, [bp + -3] ; $i
5224   2486 2A            mov b, [d]
5225   2487 E7            pop d
5226   2488 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5227   248C E4            pop a
5228   248D 2A            mov b, [d]
5229   248E             ; START RELATIONAL
5230   248E D7            push a
5231   248F 11            mov a, b
5232   2490 FA FD FF      lea d, [bp + -3] ; $i
5233   2493 2A            mov b, [d]
5234   2494 B0            cmp a, b
5235   2495 FD 71         seq ; ==
5236   2497 E4            pop a
5237   2498             ; END RELATIONAL
5238   2498 FD A7         sand a, b ; &&
5239   249A E4            pop a
5240   249B E7            pop d
5241   249C FD 43         mov [d], b
5242   249E             _for62_update:
5243   249E FA FD FF      lea d, [bp + -3] ; $i
5244   24A1 2A            mov b, [d]
5245   24A2 D8            push b
5246   24A3 FD 77         inc b
5247   24A5 FA FD FF      lea d, [bp + -3] ; $i
5248   24A8 FD 43         mov [d], b
5249   24AA E5            pop b
5250   24AB 0A 3E 24      jmp _for62_cond
5251   24AE             _for62_exit:
5252   24AE             ;; return pass; 
5253   24AE FA FF FF      lea d, [bp + -1] ; $pass
5254   24B1 2A            mov b, [d]
5255   24B2 F9            leave
5256   24B3 09            ret
5257   24B4             ; --- END TEXT BLOCK
5258   24B4             
5259   24B4             ; --- BEGIN DATA BLOCK
5260   24B4             _gca1_data: 
5261   24B4 30 31 32 33 .db $30,$31,$32,$33,$34,
5261   24B8 34 
5262   24B9             _gia1_data: 
5263   24B9 00 00 01 00 .dw 0,1,2,3,4,
5263   24BD 02 00 03 00 
5263   24C1 04 00 
5264   24C3 00 00 00 00 _gca2_data: .fill 25, 0
5264   24C7 00 00 00 00 
5264   24CB 00 00 00 00 
5264   24CF 00 00 00 00 
5264   24D3 00 00 00 00 
5264   24D7 00 00 00 00 
5264   24DB 00 
5265   24DC 00 00 00 00 _gia2_data: .fill 50, 0
5265   24E0 00 00 00 00 
5265   24E4 00 00 00 00 
5265   24E8 00 00 00 00 
5265   24EC 00 00 00 00 
5265   24F0 00 00 00 00 
5265   24F4 00 00 00 00 
5265   24F8 00 00 00 00 
5265   24FC 00 00 00 00 
5265   2500 00 00 00 00 
5265   2504 00 00 00 00 
5265   2508 00 00 00 00 
5265   250C 00 00 
5266   250E 00 00 00 00 _test6_struct_data: .fill 18, 0
5266   2512 00 00 00 00 
5266   2516 00 00 00 00 
5266   251A 00 00 00 00 
5266   251E 00 00 
5267   2520 00 00 00 00 _test7_struct_data: .fill 36, 0
5267   2524 00 00 00 00 
5267   2528 00 00 00 00 
5267   252C 00 00 00 00 
5267   2530 00 00 00 00 
5267   2534 00 00 00 00 
5267   2538 00 00 00 00 
5267   253C 00 00 00 00 
5267   2540 00 00 00 00 
5268   2544 54 65 73 74 __s0: .db "Test %d, Result: %d\n", 0
5268   2548 20 25 64 2C 
5268   254C 20 52 65 73 
5268   2550 75 6C 74 3A 
5268   2554 20 25 64 0A 
5268   2558 00 
5269   2559 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
5269   255D 70 65 63 74 
5269   2561 65 64 20 66 
5269   2565 6F 72 6D 61 
5269   2569 74 20 69 6E 
5269   256D 20 70 72 69 
5269   2571 6E 74 66 2E 
5269   2575 00 
5270   2576 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
5270   257A 72 3A 20 55 
5270   257E 6E 6B 6E 6F 
5270   2582 77 6E 20 61 
5270   2586 72 67 75 6D 
5270   258A 65 6E 74 20 
5270   258E 74 79 70 65 
5270   2592 2E 0A 00 
5271   2595 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
5271   2599 1B 5B 48 00 
5272   259D             
5273   259D 9F 25       _heap_top: .dw _heap
5274   259F 00          _heap: .db 0
5275   25A0             ; --- END DATA BLOCK
5276   25A0             
5277   25A0             .end
tasm: Number of errors = 0
