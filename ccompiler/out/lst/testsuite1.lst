0001   0000             ; --- FILENAME: ctestsuite/testsuite1
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $pass 
0011   0408             ; $i 
0012   0408             ; $nbr_tests 
0013   0408 10 0A 00      mov a, $a
0014   040B 45 E9 FF      mov [bp + -23], a
0015   040E 52 18 00      sub sp, 24
0016   0411             ;; for(i = 0; i < nbr_tests; i++){ 
0017   0411             _for1_init:
0018   0411 FA EB FF      lea d, [bp + -21] ; $i
0019   0414 DA            push d
0020   0415 26 00 00      mov b, $0
0021   0418 E7            pop d
0022   0419 FD 43         mov [d], b
0023   041B             _for1_cond:
0024   041B FA EB FF      lea d, [bp + -21] ; $i
0025   041E 2A            mov b, [d]
0026   041F             ; START RELATIONAL
0027   041F D7            push a
0028   0420 11            mov a, b
0029   0421 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0030   0424 2A            mov b, [d]
0031   0425 B0            cmp a, b
0032   0426 FD 73         slt ; <= (signed)
0033   0428 E4            pop a
0034   0429             ; END RELATIONAL
0035   0429 C0 00 00      cmp b, 0
0036   042C C6 55 04      je _for1_exit
0037   042F             _for1_block:
0038   042F             ;; pass[i] = -1; 
0039   042F FA ED FF      lea d, [bp + -19] ; $pass
0040   0432 D7            push a
0041   0433 DA            push d
0042   0434 FA EB FF      lea d, [bp + -21] ; $i
0043   0437 2A            mov b, [d]
0044   0438 E7            pop d
0045   0439 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0046   043D E4            pop a
0047   043E DA            push d
0048   043F 26 FF FF      mov b, $ffffffff
0049   0442 E7            pop d
0050   0443 FD 43         mov [d], b
0051   0445             _for1_update:
0052   0445 FA EB FF      lea d, [bp + -21] ; $i
0053   0448 2A            mov b, [d]
0054   0449 D8            push b
0055   044A FD 77         inc b
0056   044C FA EB FF      lea d, [bp + -21] ; $i
0057   044F FD 43         mov [d], b
0058   0451 E5            pop b
0059   0452 0A 1B 04      jmp _for1_cond
0060   0455             _for1_exit:
0061   0455             ;; pass[0] = test0(); 
0062   0455 FA ED FF      lea d, [bp + -19] ; $pass
0063   0458 D7            push a
0064   0459 DA            push d
0065   045A 26 00 00      mov b, $0
0066   045D E7            pop d
0067   045E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0068   0462 E4            pop a
0069   0463 DA            push d
0070   0464 07 A1 15      call test0
0071   0467 E7            pop d
0072   0468 FD 43         mov [d], b
0073   046A             ;; pass[1] = test1(); 
0074   046A FA ED FF      lea d, [bp + -19] ; $pass
0075   046D D7            push a
0076   046E DA            push d
0077   046F 26 01 00      mov b, $1
0078   0472 E7            pop d
0079   0473 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0080   0477 E4            pop a
0081   0478 DA            push d
0082   0479 07 A7 16      call test1
0083   047C E7            pop d
0084   047D FD 43         mov [d], b
0085   047F             ;; pass[2] = test2(); 
0086   047F FA ED FF      lea d, [bp + -19] ; $pass
0087   0482 D7            push a
0088   0483 DA            push d
0089   0484 26 02 00      mov b, $2
0090   0487 E7            pop d
0091   0488 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0092   048C E4            pop a
0093   048D DA            push d
0094   048E 07 4F 18      call test2
0095   0491 E7            pop d
0096   0492 FD 43         mov [d], b
0097   0494             ;; pass[3] = test3(); 
0098   0494 FA ED FF      lea d, [bp + -19] ; $pass
0099   0497 D7            push a
0100   0498 DA            push d
0101   0499 26 03 00      mov b, $3
0102   049C E7            pop d
0103   049D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0104   04A1 E4            pop a
0105   04A2 DA            push d
0106   04A3 07 75 19      call test3
0107   04A6 E7            pop d
0108   04A7 FD 43         mov [d], b
0109   04A9             ;; pass[4] = test4(); 
0110   04A9 FA ED FF      lea d, [bp + -19] ; $pass
0111   04AC D7            push a
0112   04AD DA            push d
0113   04AE 26 04 00      mov b, $4
0114   04B1 E7            pop d
0115   04B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0116   04B6 E4            pop a
0117   04B7 DA            push d
0118   04B8 07 1D 1B      call test4
0119   04BB E7            pop d
0120   04BC FD 43         mov [d], b
0121   04BE             ;; pass[5] = test5(); 
0122   04BE FA ED FF      lea d, [bp + -19] ; $pass
0123   04C1 D7            push a
0124   04C2 DA            push d
0125   04C3 26 05 00      mov b, $5
0126   04C6 E7            pop d
0127   04C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0128   04CB E4            pop a
0129   04CC DA            push d
0130   04CD 07 75 1E      call test5
0131   04D0 E7            pop d
0132   04D1 FD 43         mov [d], b
0133   04D3             ;; pass[6] = test6(); 
0134   04D3 FA ED FF      lea d, [bp + -19] ; $pass
0135   04D6 D7            push a
0136   04D7 DA            push d
0137   04D8 26 06 00      mov b, $6
0138   04DB E7            pop d
0139   04DC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0140   04E0 E4            pop a
0141   04E1 DA            push d
0142   04E2 07 5C 1F      call test6
0143   04E5 E7            pop d
0144   04E6 FD 43         mov [d], b
0145   04E8             ;; pass[7] = test7(); 
0146   04E8 FA ED FF      lea d, [bp + -19] ; $pass
0147   04EB D7            push a
0148   04EC DA            push d
0149   04ED 26 07 00      mov b, $7
0150   04F0 E7            pop d
0151   04F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0152   04F5 E4            pop a
0153   04F6 DA            push d
0154   04F7 07 AE 20      call test7
0155   04FA E7            pop d
0156   04FB FD 43         mov [d], b
0157   04FD             ;; pass[8] = test8(); 
0158   04FD FA ED FF      lea d, [bp + -19] ; $pass
0159   0500 D7            push a
0160   0501 DA            push d
0161   0502 26 08 00      mov b, $8
0162   0505 E7            pop d
0163   0506 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0164   050A E4            pop a
0165   050B DA            push d
0166   050C 07 18 22      call test8
0167   050F E7            pop d
0168   0510 FD 43         mov [d], b
0169   0512             ;; pass[9] = test9(); 
0170   0512 FA ED FF      lea d, [bp + -19] ; $pass
0171   0515 D7            push a
0172   0516 DA            push d
0173   0517 26 09 00      mov b, $9
0174   051A E7            pop d
0175   051B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0176   051F E4            pop a
0177   0520 DA            push d
0178   0521 07 6A 23      call test9
0179   0524 E7            pop d
0180   0525 FD 43         mov [d], b
0181   0527             ;; for(i = 0; i < nbr_tests; i++) 
0182   0527             _for2_init:
0183   0527 FA EB FF      lea d, [bp + -21] ; $i
0184   052A DA            push d
0185   052B 26 00 00      mov b, $0
0186   052E E7            pop d
0187   052F FD 43         mov [d], b
0188   0531             _for2_cond:
0189   0531 FA EB FF      lea d, [bp + -21] ; $i
0190   0534 2A            mov b, [d]
0191   0535             ; START RELATIONAL
0192   0535 D7            push a
0193   0536 11            mov a, b
0194   0537 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0195   053A 2A            mov b, [d]
0196   053B B0            cmp a, b
0197   053C FD 73         slt ; <= (signed)
0198   053E E4            pop a
0199   053F             ; END RELATIONAL
0200   053F C0 00 00      cmp b, 0
0201   0542 C6 78 05      je _for2_exit
0202   0545             _for2_block:
0203   0545             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0204   0545 FA ED FF      lea d, [bp + -19] ; $pass
0205   0548 D7            push a
0206   0549 DA            push d
0207   054A FA EB FF      lea d, [bp + -21] ; $i
0208   054D 2A            mov b, [d]
0209   054E E7            pop d
0210   054F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0211   0553 E4            pop a
0212   0554 2A            mov b, [d]
0213   0555 FD AB         swp b
0214   0557 D8            push b
0215   0558 FA EB FF      lea d, [bp + -21] ; $i
0216   055B 2A            mov b, [d]
0217   055C FD AB         swp b
0218   055E D8            push b
0219   055F 26 64 25      mov b, __s0 ; "Test %d, Result: %d\n"
0220   0562 FD AB         swp b
0221   0564 D8            push b
0222   0565 07 21 09      call printf
0223   0568             _for2_update:
0224   0568 FA EB FF      lea d, [bp + -21] ; $i
0225   056B 2A            mov b, [d]
0226   056C D8            push b
0227   056D FD 77         inc b
0228   056F FA EB FF      lea d, [bp + -21] ; $i
0229   0572 FD 43         mov [d], b
0230   0574 E5            pop b
0231   0575 0A 31 05      jmp _for2_cond
0232   0578             _for2_exit:
0233   0578 05 0B         syscall sys_terminate_proc
0234   057A             
0235   057A             strcpy:
0236   057A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0237   057D             ; $psrc 
0238   057D             ; $pdest 
0239   057D 52 04 00      sub sp, 4
0240   0580             ;; psrc = src; 
0241   0580 FA FF FF      lea d, [bp + -1] ; $psrc
0242   0583 DA            push d
0243   0584 FA 07 00      lea d, [bp + 7] ; $src
0244   0587 2A            mov b, [d]
0245   0588 E7            pop d
0246   0589 FD 43         mov [d], b
0247   058B             ;; pdest = dest; 
0248   058B FA FD FF      lea d, [bp + -3] ; $pdest
0249   058E DA            push d
0250   058F FA 05 00      lea d, [bp + 5] ; $dest
0251   0592 2A            mov b, [d]
0252   0593 E7            pop d
0253   0594 FD 43         mov [d], b
0254   0596             ;; while(*psrc) *pdest++ = *psrc++; 
0255   0596             _while3_cond:
0256   0596 FA FF FF      lea d, [bp + -1] ; $psrc
0257   0599 2A            mov b, [d]
0258   059A 74            mov d, b
0259   059B 32            mov bl, [d]
0260   059C A7 00         mov bh, 0
0261   059E C0 00 00      cmp b, 0
0262   05A1 C6 C9 05      je _while3_exit
0263   05A4             _while3_block:
0264   05A4             ;; *pdest++ = *psrc++; 
0265   05A4 FA FD FF      lea d, [bp + -3] ; $pdest
0266   05A7 2A            mov b, [d]
0267   05A8 D8            push b
0268   05A9 FD 77         inc b
0269   05AB FA FD FF      lea d, [bp + -3] ; $pdest
0270   05AE FD 43         mov [d], b
0271   05B0 E5            pop b
0272   05B1 D8            push b
0273   05B2 FA FF FF      lea d, [bp + -1] ; $psrc
0274   05B5 2A            mov b, [d]
0275   05B6 D8            push b
0276   05B7 FD 77         inc b
0277   05B9 FA FF FF      lea d, [bp + -1] ; $psrc
0278   05BC FD 43         mov [d], b
0279   05BE E5            pop b
0280   05BF 74            mov d, b
0281   05C0 32            mov bl, [d]
0282   05C1 A7 00         mov bh, 0
0283   05C3 E7            pop d
0284   05C4 FD 3E         mov [d], bl
0285   05C6 0A 96 05      jmp _while3_cond
0286   05C9             _while3_exit:
0287   05C9             ;; *pdest = '\0'; 
0288   05C9 FA FD FF      lea d, [bp + -3] ; $pdest
0289   05CC 2A            mov b, [d]
0290   05CD D8            push b
0291   05CE 26 00 00      mov b, $0
0292   05D1 E7            pop d
0293   05D2 FD 3E         mov [d], bl
0294   05D4 F9            leave
0295   05D5 09            ret
0296   05D6             
0297   05D6             strcmp:
0298   05D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0299   05D9             ;; while (*s1 && (*s1 == *s2)) { 
0300   05D9             _while4_cond:
0301   05D9 FA 05 00      lea d, [bp + 5] ; $s1
0302   05DC 2A            mov b, [d]
0303   05DD 74            mov d, b
0304   05DE 32            mov bl, [d]
0305   05DF A7 00         mov bh, 0
0306   05E1 D7            push a
0307   05E2 11            mov a, b
0308   05E3 FA 05 00      lea d, [bp + 5] ; $s1
0309   05E6 2A            mov b, [d]
0310   05E7 74            mov d, b
0311   05E8 32            mov bl, [d]
0312   05E9 A7 00         mov bh, 0
0313   05EB             ; START RELATIONAL
0314   05EB D7            push a
0315   05EC 11            mov a, b
0316   05ED FA 07 00      lea d, [bp + 7] ; $s2
0317   05F0 2A            mov b, [d]
0318   05F1 74            mov d, b
0319   05F2 32            mov bl, [d]
0320   05F3 A7 00         mov bh, 0
0321   05F5 B0            cmp a, b
0322   05F6 FD 71         seq ; ==
0323   05F8 E4            pop a
0324   05F9             ; END RELATIONAL
0325   05F9 FD A7         sand a, b ; &&
0326   05FB E4            pop a
0327   05FC C0 00 00      cmp b, 0
0328   05FF C6 1F 06      je _while4_exit
0329   0602             _while4_block:
0330   0602             ;; s1++; 
0331   0602 FA 05 00      lea d, [bp + 5] ; $s1
0332   0605 2A            mov b, [d]
0333   0606 D8            push b
0334   0607 FD 77         inc b
0335   0609 FA 05 00      lea d, [bp + 5] ; $s1
0336   060C FD 43         mov [d], b
0337   060E E5            pop b
0338   060F             ;; s2++; 
0339   060F FA 07 00      lea d, [bp + 7] ; $s2
0340   0612 2A            mov b, [d]
0341   0613 D8            push b
0342   0614 FD 77         inc b
0343   0616 FA 07 00      lea d, [bp + 7] ; $s2
0344   0619 FD 43         mov [d], b
0345   061B E5            pop b
0346   061C 0A D9 05      jmp _while4_cond
0347   061F             _while4_exit:
0348   061F             ;; return *s1 - *s2; 
0349   061F FA 05 00      lea d, [bp + 5] ; $s1
0350   0622 2A            mov b, [d]
0351   0623 74            mov d, b
0352   0624 32            mov bl, [d]
0353   0625 A7 00         mov bh, 0
0354   0627             ; START TERMS
0355   0627 D7            push a
0356   0628 11            mov a, b
0357   0629 FA 07 00      lea d, [bp + 7] ; $s2
0358   062C 2A            mov b, [d]
0359   062D 74            mov d, b
0360   062E 32            mov bl, [d]
0361   062F A7 00         mov bh, 0
0362   0631 60            sub a, b
0363   0632 27            mov b, a
0364   0633 E4            pop a
0365   0634             ; END TERMS
0366   0634 F9            leave
0367   0635 09            ret
0368   0636             
0369   0636             strcat:
0370   0636 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0371   0639             ; $dest_len 
0372   0639             ; $i 
0373   0639 52 04 00      sub sp, 4
0374   063C             ;; dest_len = strlen(dest); 
0375   063C FA FF FF      lea d, [bp + -1] ; $dest_len
0376   063F DA            push d
0377   0640 FA 05 00      lea d, [bp + 5] ; $dest
0378   0643 2A            mov b, [d]
0379   0644 FD AB         swp b
0380   0646 D8            push b
0381   0647 07 EC 06      call strlen
0382   064A 51 02 00      add sp, 2
0383   064D E7            pop d
0384   064E FD 43         mov [d], b
0385   0650             ;; for (i = 0; src[i] != 0; i=i+1) { 
0386   0650             _for5_init:
0387   0650 FA FD FF      lea d, [bp + -3] ; $i
0388   0653 DA            push d
0389   0654 26 00 00      mov b, $0
0390   0657 E7            pop d
0391   0658 FD 43         mov [d], b
0392   065A             _for5_cond:
0393   065A FA 07 00      lea d, [bp + 7] ; $src
0394   065D FD 2A         mov d, [d]
0395   065F D7            push a
0396   0660 DA            push d
0397   0661 FA FD FF      lea d, [bp + -3] ; $i
0398   0664 2A            mov b, [d]
0399   0665 E7            pop d
0400   0666 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0401   066A E4            pop a
0402   066B 32            mov bl, [d]
0403   066C A7 00         mov bh, 0
0404   066E             ; START RELATIONAL
0405   066E D7            push a
0406   066F 11            mov a, b
0407   0670 26 00 00      mov b, $0
0408   0673 B0            cmp a, b
0409   0674 FD 72         sneq ; !=
0410   0676 E4            pop a
0411   0677             ; END RELATIONAL
0412   0677 C0 00 00      cmp b, 0
0413   067A C6 C5 06      je _for5_exit
0414   067D             _for5_block:
0415   067D             ;; dest[dest_len + i] = src[i]; 
0416   067D FA 05 00      lea d, [bp + 5] ; $dest
0417   0680 FD 2A         mov d, [d]
0418   0682 D7            push a
0419   0683 DA            push d
0420   0684 FA FF FF      lea d, [bp + -1] ; $dest_len
0421   0687 2A            mov b, [d]
0422   0688             ; START TERMS
0423   0688 D7            push a
0424   0689 11            mov a, b
0425   068A FA FD FF      lea d, [bp + -3] ; $i
0426   068D 2A            mov b, [d]
0427   068E 54            add a, b
0428   068F 27            mov b, a
0429   0690 E4            pop a
0430   0691             ; END TERMS
0431   0691 E7            pop d
0432   0692 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0433   0696 E4            pop a
0434   0697 DA            push d
0435   0698 FA 07 00      lea d, [bp + 7] ; $src
0436   069B FD 2A         mov d, [d]
0437   069D D7            push a
0438   069E DA            push d
0439   069F FA FD FF      lea d, [bp + -3] ; $i
0440   06A2 2A            mov b, [d]
0441   06A3 E7            pop d
0442   06A4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0443   06A8 E4            pop a
0444   06A9 32            mov bl, [d]
0445   06AA A7 00         mov bh, 0
0446   06AC E7            pop d
0447   06AD FD 3E         mov [d], bl
0448   06AF             _for5_update:
0449   06AF FA FD FF      lea d, [bp + -3] ; $i
0450   06B2 DA            push d
0451   06B3 FA FD FF      lea d, [bp + -3] ; $i
0452   06B6 2A            mov b, [d]
0453   06B7             ; START TERMS
0454   06B7 D7            push a
0455   06B8 11            mov a, b
0456   06B9 26 01 00      mov b, $1
0457   06BC 54            add a, b
0458   06BD 27            mov b, a
0459   06BE E4            pop a
0460   06BF             ; END TERMS
0461   06BF E7            pop d
0462   06C0 FD 43         mov [d], b
0463   06C2 0A 5A 06      jmp _for5_cond
0464   06C5             _for5_exit:
0465   06C5             ;; dest[dest_len + i] = 0; 
0466   06C5 FA 05 00      lea d, [bp + 5] ; $dest
0467   06C8 FD 2A         mov d, [d]
0468   06CA D7            push a
0469   06CB DA            push d
0470   06CC FA FF FF      lea d, [bp + -1] ; $dest_len
0471   06CF 2A            mov b, [d]
0472   06D0             ; START TERMS
0473   06D0 D7            push a
0474   06D1 11            mov a, b
0475   06D2 FA FD FF      lea d, [bp + -3] ; $i
0476   06D5 2A            mov b, [d]
0477   06D6 54            add a, b
0478   06D7 27            mov b, a
0479   06D8 E4            pop a
0480   06D9             ; END TERMS
0481   06D9 E7            pop d
0482   06DA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0483   06DE E4            pop a
0484   06DF DA            push d
0485   06E0 26 00 00      mov b, $0
0486   06E3 E7            pop d
0487   06E4 FD 3E         mov [d], bl
0488   06E6             ;; return dest; 
0489   06E6 FA 05 00      lea d, [bp + 5] ; $dest
0490   06E9 2A            mov b, [d]
0491   06EA F9            leave
0492   06EB 09            ret
0493   06EC             
0494   06EC             strlen:
0495   06EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0496   06EF             ; $length 
0497   06EF 52 02 00      sub sp, 2
0498   06F2             ;; length = 0; 
0499   06F2 FA FF FF      lea d, [bp + -1] ; $length
0500   06F5 DA            push d
0501   06F6 26 00 00      mov b, $0
0502   06F9 E7            pop d
0503   06FA FD 43         mov [d], b
0504   06FC             ;; while (str[length] != 0) { 
0505   06FC             _while6_cond:
0506   06FC FA 05 00      lea d, [bp + 5] ; $str
0507   06FF FD 2A         mov d, [d]
0508   0701 D7            push a
0509   0702 DA            push d
0510   0703 FA FF FF      lea d, [bp + -1] ; $length
0511   0706 2A            mov b, [d]
0512   0707 E7            pop d
0513   0708 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0514   070C E4            pop a
0515   070D 32            mov bl, [d]
0516   070E A7 00         mov bh, 0
0517   0710             ; START RELATIONAL
0518   0710 D7            push a
0519   0711 11            mov a, b
0520   0712 26 00 00      mov b, $0
0521   0715 B0            cmp a, b
0522   0716 FD 72         sneq ; !=
0523   0718 E4            pop a
0524   0719             ; END RELATIONAL
0525   0719 C0 00 00      cmp b, 0
0526   071C C6 2F 07      je _while6_exit
0527   071F             _while6_block:
0528   071F             ;; length++; 
0529   071F FA FF FF      lea d, [bp + -1] ; $length
0530   0722 2A            mov b, [d]
0531   0723 D8            push b
0532   0724 FD 77         inc b
0533   0726 FA FF FF      lea d, [bp + -1] ; $length
0534   0729 FD 43         mov [d], b
0535   072B E5            pop b
0536   072C 0A FC 06      jmp _while6_cond
0537   072F             _while6_exit:
0538   072F             ;; return length; 
0539   072F FA FF FF      lea d, [bp + -1] ; $length
0540   0732 2A            mov b, [d]
0541   0733 F9            leave
0542   0734 09            ret
0543   0735             
0544   0735             exit:
0545   0735 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0546   0738             
0547   0738             ; --- BEGIN INLINE ASM BLOCK
0548   0738 05 0B         syscall sys_terminate_proc
0549   073A             ; --- END INLINE ASM BLOCK
0550   073A             
0551   073A F9            leave
0552   073B 09            ret
0553   073C             
0554   073C             atoi:
0555   073C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0556   073F             ; $result 
0557   073F 10 00 00      mov a, $0
0558   0742 45 FF FF      mov [bp + -1], a
0559   0745             ; $sign 
0560   0745 10 01 00      mov a, $1
0561   0748 45 FD FF      mov [bp + -3], a
0562   074B 52 04 00      sub sp, 4
0563   074E             ;; while (*str == ' ') str++; 
0564   074E             _while7_cond:
0565   074E FA 05 00      lea d, [bp + 5] ; $str
0566   0751 2A            mov b, [d]
0567   0752 74            mov d, b
0568   0753 32            mov bl, [d]
0569   0754 A7 00         mov bh, 0
0570   0756             ; START RELATIONAL
0571   0756 D7            push a
0572   0757 11            mov a, b
0573   0758 26 20 00      mov b, $20
0574   075B B0            cmp a, b
0575   075C FD 71         seq ; ==
0576   075E E4            pop a
0577   075F             ; END RELATIONAL
0578   075F C0 00 00      cmp b, 0
0579   0762 C6 75 07      je _while7_exit
0580   0765             _while7_block:
0581   0765             ;; str++; 
0582   0765 FA 05 00      lea d, [bp + 5] ; $str
0583   0768 2A            mov b, [d]
0584   0769 D8            push b
0585   076A FD 77         inc b
0586   076C FA 05 00      lea d, [bp + 5] ; $str
0587   076F FD 43         mov [d], b
0588   0771 E5            pop b
0589   0772 0A 4E 07      jmp _while7_cond
0590   0775             _while7_exit:
0591   0775             ;; if (*str == '-' || *str == '+') { 
0592   0775             _if8_cond:
0593   0775 FA 05 00      lea d, [bp + 5] ; $str
0594   0778 2A            mov b, [d]
0595   0779 74            mov d, b
0596   077A 32            mov bl, [d]
0597   077B A7 00         mov bh, 0
0598   077D             ; START RELATIONAL
0599   077D D7            push a
0600   077E 11            mov a, b
0601   077F 26 2D 00      mov b, $2d
0602   0782 B0            cmp a, b
0603   0783 FD 71         seq ; ==
0604   0785 E4            pop a
0605   0786             ; END RELATIONAL
0606   0786 D7            push a
0607   0787 11            mov a, b
0608   0788 FA 05 00      lea d, [bp + 5] ; $str
0609   078B 2A            mov b, [d]
0610   078C 74            mov d, b
0611   078D 32            mov bl, [d]
0612   078E A7 00         mov bh, 0
0613   0790             ; START RELATIONAL
0614   0790 D7            push a
0615   0791 11            mov a, b
0616   0792 26 2B 00      mov b, $2b
0617   0795 B0            cmp a, b
0618   0796 FD 71         seq ; ==
0619   0798 E4            pop a
0620   0799             ; END RELATIONAL
0621   0799 FD A8         sor a, b ; ||
0622   079B E4            pop a
0623   079C C0 00 00      cmp b, 0
0624   079F C6 D6 07      je _if8_exit
0625   07A2             _if8_true:
0626   07A2             ;; if (*str == '-') sign = -1; 
0627   07A2             _if9_cond:
0628   07A2 FA 05 00      lea d, [bp + 5] ; $str
0629   07A5 2A            mov b, [d]
0630   07A6 74            mov d, b
0631   07A7 32            mov bl, [d]
0632   07A8 A7 00         mov bh, 0
0633   07AA             ; START RELATIONAL
0634   07AA D7            push a
0635   07AB 11            mov a, b
0636   07AC 26 2D 00      mov b, $2d
0637   07AF B0            cmp a, b
0638   07B0 FD 71         seq ; ==
0639   07B2 E4            pop a
0640   07B3             ; END RELATIONAL
0641   07B3 C0 00 00      cmp b, 0
0642   07B6 C6 C6 07      je _if9_exit
0643   07B9             _if9_true:
0644   07B9             ;; sign = -1; 
0645   07B9 FA FD FF      lea d, [bp + -3] ; $sign
0646   07BC DA            push d
0647   07BD 26 FF FF      mov b, $ffffffff
0648   07C0 E7            pop d
0649   07C1 FD 43         mov [d], b
0650   07C3 0A C6 07      jmp _if9_exit
0651   07C6             _if9_exit:
0652   07C6             ;; str++; 
0653   07C6 FA 05 00      lea d, [bp + 5] ; $str
0654   07C9 2A            mov b, [d]
0655   07CA D8            push b
0656   07CB FD 77         inc b
0657   07CD FA 05 00      lea d, [bp + 5] ; $str
0658   07D0 FD 43         mov [d], b
0659   07D2 E5            pop b
0660   07D3 0A D6 07      jmp _if8_exit
0661   07D6             _if8_exit:
0662   07D6             ;; while (*str >= '0' && *str <= '9') { 
0663   07D6             _while10_cond:
0664   07D6 FA 05 00      lea d, [bp + 5] ; $str
0665   07D9 2A            mov b, [d]
0666   07DA 74            mov d, b
0667   07DB 32            mov bl, [d]
0668   07DC A7 00         mov bh, 0
0669   07DE             ; START RELATIONAL
0670   07DE D7            push a
0671   07DF 11            mov a, b
0672   07E0 26 30 00      mov b, $30
0673   07E3 B0            cmp a, b
0674   07E4 FD 82         sgeu ; >= (unsigned)
0675   07E6 E4            pop a
0676   07E7             ; END RELATIONAL
0677   07E7 D7            push a
0678   07E8 11            mov a, b
0679   07E9 FA 05 00      lea d, [bp + 5] ; $str
0680   07EC 2A            mov b, [d]
0681   07ED 74            mov d, b
0682   07EE 32            mov bl, [d]
0683   07EF A7 00         mov bh, 0
0684   07F1             ; START RELATIONAL
0685   07F1 D7            push a
0686   07F2 11            mov a, b
0687   07F3 26 39 00      mov b, $39
0688   07F6 B0            cmp a, b
0689   07F7 FD 76         sleu ; <= (unsigned)
0690   07F9 E4            pop a
0691   07FA             ; END RELATIONAL
0692   07FA FD A7         sand a, b ; &&
0693   07FC E4            pop a
0694   07FD C0 00 00      cmp b, 0
0695   0800 C6 3C 08      je _while10_exit
0696   0803             _while10_block:
0697   0803             ;; result = result * 10 + (*str - '0'); 
0698   0803 FA FF FF      lea d, [bp + -1] ; $result
0699   0806 DA            push d
0700   0807 FA FF FF      lea d, [bp + -1] ; $result
0701   080A 2A            mov b, [d]
0702   080B             ; START FACTORS
0703   080B D7            push a
0704   080C 11            mov a, b
0705   080D 26 0A 00      mov b, $a
0706   0810 AC            mul a, b ; *
0707   0811 11            mov a, b
0708   0812 27            mov b, a
0709   0813 E4            pop a
0710   0814             ; END FACTORS
0711   0814             ; START TERMS
0712   0814 D7            push a
0713   0815 11            mov a, b
0714   0816 FA 05 00      lea d, [bp + 5] ; $str
0715   0819 2A            mov b, [d]
0716   081A 74            mov d, b
0717   081B 32            mov bl, [d]
0718   081C A7 00         mov bh, 0
0719   081E             ; START TERMS
0720   081E D7            push a
0721   081F 11            mov a, b
0722   0820 26 30 00      mov b, $30
0723   0823 60            sub a, b
0724   0824 27            mov b, a
0725   0825 E4            pop a
0726   0826             ; END TERMS
0727   0826 54            add a, b
0728   0827 27            mov b, a
0729   0828 E4            pop a
0730   0829             ; END TERMS
0731   0829 E7            pop d
0732   082A FD 43         mov [d], b
0733   082C             ;; str++; 
0734   082C FA 05 00      lea d, [bp + 5] ; $str
0735   082F 2A            mov b, [d]
0736   0830 D8            push b
0737   0831 FD 77         inc b
0738   0833 FA 05 00      lea d, [bp + 5] ; $str
0739   0836 FD 43         mov [d], b
0740   0838 E5            pop b
0741   0839 0A D6 07      jmp _while10_cond
0742   083C             _while10_exit:
0743   083C             ;; return sign * result; 
0744   083C FA FD FF      lea d, [bp + -3] ; $sign
0745   083F 2A            mov b, [d]
0746   0840             ; START FACTORS
0747   0840 D7            push a
0748   0841 11            mov a, b
0749   0842 FA FF FF      lea d, [bp + -1] ; $result
0750   0845 2A            mov b, [d]
0751   0846 AC            mul a, b ; *
0752   0847 11            mov a, b
0753   0848 27            mov b, a
0754   0849 E4            pop a
0755   084A             ; END FACTORS
0756   084A F9            leave
0757   084B 09            ret
0758   084C             
0759   084C             rand:
0760   084C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0761   084F             ; $sec 
0762   084F 52 02 00      sub sp, 2
0763   0852             
0764   0852             ; --- BEGIN INLINE ASM BLOCK
0765   0852 19 00         mov al, 0
0766   0854 05 01         syscall sys_rtc					
0767   0856 1A            mov al, ah
0768   0857 FA FF FF      lea d, [bp + -1] ; $sec
0769   085A 1E            mov al, [d]
0770   085B 22 00         mov ah, 0
0771   085D             ; --- END INLINE ASM BLOCK
0772   085D             
0773   085D             ;; return sec; 
0774   085D FA FF FF      lea d, [bp + -1] ; $sec
0775   0860 2A            mov b, [d]
0776   0861 F9            leave
0777   0862 09            ret
0778   0863             
0779   0863             srand:
0780   0863 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0781   0866 F9            leave
0782   0867 09            ret
0783   0868             
0784   0868             malloc:
0785   0868 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0786   086B F9            leave
0787   086C 09            ret
0788   086D             
0789   086D             calloc:
0790   086D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0791   0870 F9            leave
0792   0871 09            ret
0793   0872             
0794   0872             realloc:
0795   0872 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0796   0875 F9            leave
0797   0876 09            ret
0798   0877             
0799   0877             alloc:
0800   0877 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0801   087A             ;; heap_top = heap_top + bytes; 
0802   087A 3B BD 25      mov d, _heap_top ; $heap_top
0803   087D DA            push d
0804   087E 3B BD 25      mov d, _heap_top ; $heap_top
0805   0881 2A            mov b, [d]
0806   0882             ; START TERMS
0807   0882 D7            push a
0808   0883 11            mov a, b
0809   0884 FA 05 00      lea d, [bp + 5] ; $bytes
0810   0887 2A            mov b, [d]
0811   0888 54            add a, b
0812   0889 27            mov b, a
0813   088A E4            pop a
0814   088B             ; END TERMS
0815   088B E7            pop d
0816   088C FD 43         mov [d], b
0817   088E             ;; return heap_top - bytes; 
0818   088E 3B BD 25      mov d, _heap_top ; $heap_top
0819   0891 2A            mov b, [d]
0820   0892             ; START TERMS
0821   0892 D7            push a
0822   0893 11            mov a, b
0823   0894 FA 05 00      lea d, [bp + 5] ; $bytes
0824   0897 2A            mov b, [d]
0825   0898 60            sub a, b
0826   0899 27            mov b, a
0827   089A E4            pop a
0828   089B             ; END TERMS
0829   089B F9            leave
0830   089C 09            ret
0831   089D             
0832   089D             free:
0833   089D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0834   08A0             ;; return heap_top = heap_top - bytes; 
0835   08A0 3B BD 25      mov d, _heap_top ; $heap_top
0836   08A3 DA            push d
0837   08A4 3B BD 25      mov d, _heap_top ; $heap_top
0838   08A7 2A            mov b, [d]
0839   08A8             ; START TERMS
0840   08A8 D7            push a
0841   08A9 11            mov a, b
0842   08AA FA 05 00      lea d, [bp + 5] ; $bytes
0843   08AD 2A            mov b, [d]
0844   08AE 60            sub a, b
0845   08AF 27            mov b, a
0846   08B0 E4            pop a
0847   08B1             ; END TERMS
0848   08B1 E7            pop d
0849   08B2 FD 43         mov [d], b
0850   08B4 F9            leave
0851   08B5 09            ret
0852   08B6             
0853   08B6             va_start:
0854   08B6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0855   08B9             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
0856   08B9 FA 05 00      lea d, [bp + 5] ; $argp
0857   08BC FD 2A         mov d, [d]
0858   08BE 58 00 00      add d, 0
0859   08C1 DA            push d
0860   08C2 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
0861   08C5 2A            mov b, [d]
0862   08C6             ; START TERMS
0863   08C6 D7            push a
0864   08C7 11            mov a, b
0865   08C8 26 02 00      mov b, 2
0866   08CB 54            add a, b
0867   08CC 27            mov b, a
0868   08CD E4            pop a
0869   08CE             ; END TERMS
0870   08CE E7            pop d
0871   08CF FD 43         mov [d], b
0872   08D1 F9            leave
0873   08D2 09            ret
0874   08D3             
0875   08D3             va_arg:
0876   08D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0877   08D6             ; $p 
0878   08D6 52 02 00      sub sp, 2
0879   08D9             ;; p = argp->current_arg; 
0880   08D9 FA FF FF      lea d, [bp + -1] ; $p
0881   08DC DA            push d
0882   08DD FA 05 00      lea d, [bp + 5] ; $argp
0883   08E0 FD 2A         mov d, [d]
0884   08E2 58 00 00      add d, 0
0885   08E5 2A            mov b, [d]
0886   08E6 E7            pop d
0887   08E7 FD 43         mov [d], b
0888   08E9             ;; argp->current_arg = argp->current_arg + size; 
0889   08E9 FA 05 00      lea d, [bp + 5] ; $argp
0890   08EC FD 2A         mov d, [d]
0891   08EE 58 00 00      add d, 0
0892   08F1 DA            push d
0893   08F2 FA 05 00      lea d, [bp + 5] ; $argp
0894   08F5 FD 2A         mov d, [d]
0895   08F7 58 00 00      add d, 0
0896   08FA 2A            mov b, [d]
0897   08FB             ; START TERMS
0898   08FB D7            push a
0899   08FC 11            mov a, b
0900   08FD FA 07 00      lea d, [bp + 7] ; $size
0901   0900 2A            mov b, [d]
0902   0901 54            add a, b
0903   0902 27            mov b, a
0904   0903 E4            pop a
0905   0904             ; END TERMS
0906   0904 E7            pop d
0907   0905 FD 43         mov [d], b
0908   0907             ;; return p; 
0909   0907 FA FF FF      lea d, [bp + -1] ; $p
0910   090A 2A            mov b, [d]
0911   090B F9            leave
0912   090C 09            ret
0913   090D             
0914   090D             va_end:
0915   090D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0916   0910             ;; argp->current_arg =   0   ; 
0917   0910 FA 05 00      lea d, [bp + 5] ; $argp
0918   0913 FD 2A         mov d, [d]
0919   0915 58 00 00      add d, 0
0920   0918 DA            push d
0921   0919 26 00 00      mov b, $0
0922   091C E7            pop d
0923   091D FD 43         mov [d], b
0924   091F F9            leave
0925   0920 09            ret
0926   0921             
0927   0921             printf:
0928   0921 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0929   0924             ; $p 
0930   0924             ; $fp 
0931   0924             ; $i 
0932   0924 52 06 00      sub sp, 6
0933   0927             ;; fp = format; 
0934   0927 FA FD FF      lea d, [bp + -3] ; $fp
0935   092A DA            push d
0936   092B FA 05 00      lea d, [bp + 5] ; $format
0937   092E 2A            mov b, [d]
0938   092F E7            pop d
0939   0930 FD 43         mov [d], b
0940   0932             ;; p = &format + 2; 
0941   0932 FA FF FF      lea d, [bp + -1] ; $p
0942   0935 DA            push d
0943   0936 FA 05 00      lea d, [bp + 5] ; $format
0944   0939 2D            mov b, d
0945   093A             ; START TERMS
0946   093A D7            push a
0947   093B 11            mov a, b
0948   093C 26 02 00      mov b, $2
0949   093F 54            add a, b
0950   0940 27            mov b, a
0951   0941 E4            pop a
0952   0942             ; END TERMS
0953   0942 E7            pop d
0954   0943 FD 43         mov [d], b
0955   0945             ;; for(;;){ 
0956   0945             _for11_init:
0957   0945             _for11_cond:
0958   0945             _for11_block:
0959   0945             ;; if(!*fp) break; 
0960   0945             _if12_cond:
0961   0945 FA FD FF      lea d, [bp + -3] ; $fp
0962   0948 2A            mov b, [d]
0963   0949 74            mov d, b
0964   094A 32            mov bl, [d]
0965   094B A7 00         mov bh, 0
0966   094D C0 00 00      cmp b, 0
0967   0950 FD 71         seq ; !
0968   0952 C0 00 00      cmp b, 0
0969   0955 C6 5E 09      je _if12_else
0970   0958             _if12_true:
0971   0958             ;; break; 
0972   0958 0A 6A 0B      jmp _for11_exit ; for break
0973   095B 0A 67 0B      jmp _if12_exit
0974   095E             _if12_else:
0975   095E             ;; if(*fp == '%'){ 
0976   095E             _if13_cond:
0977   095E FA FD FF      lea d, [bp + -3] ; $fp
0978   0961 2A            mov b, [d]
0979   0962 74            mov d, b
0980   0963 32            mov bl, [d]
0981   0964 A7 00         mov bh, 0
0982   0966             ; START RELATIONAL
0983   0966 D7            push a
0984   0967 11            mov a, b
0985   0968 26 25 00      mov b, $25
0986   096B B0            cmp a, b
0987   096C FD 71         seq ; ==
0988   096E E4            pop a
0989   096F             ; END RELATIONAL
0990   096F C0 00 00      cmp b, 0
0991   0972 C6 4B 0B      je _if13_else
0992   0975             _if13_true:
0993   0975             ;; fp++; 
0994   0975 FA FD FF      lea d, [bp + -3] ; $fp
0995   0978 2A            mov b, [d]
0996   0979 D8            push b
0997   097A FD 77         inc b
0998   097C FA FD FF      lea d, [bp + -3] ; $fp
0999   097F FD 43         mov [d], b
1000   0981 E5            pop b
1001   0982             ;; switch(*fp){ 
1002   0982             _switch14_expr:
1003   0982 FA FD FF      lea d, [bp + -3] ; $fp
1004   0985 2A            mov b, [d]
1005   0986 74            mov d, b
1006   0987 32            mov bl, [d]
1007   0988 A7 00         mov bh, 0
1008   098A             _switch14_comparisons:
1009   098A C1 6C         cmp bl, $6c
1010   098C C6 B8 09      je _switch14_case0
1011   098F C1 4C         cmp bl, $4c
1012   0991 C6 B8 09      je _switch14_case1
1013   0994 C1 64         cmp bl, $64
1014   0996 C6 86 0A      je _switch14_case2
1015   0999 C1 69         cmp bl, $69
1016   099B C6 86 0A      je _switch14_case3
1017   099E C1 75         cmp bl, $75
1018   09A0 C6 AB 0A      je _switch14_case4
1019   09A3 C1 78         cmp bl, $78
1020   09A5 C6 D0 0A      je _switch14_case5
1021   09A8 C1 63         cmp bl, $63
1022   09AA C6 EF 0A      je _switch14_case6
1023   09AD C1 73         cmp bl, $73
1024   09AF C6 0F 0B      je _switch14_case7
1025   09B2 0A 2F 0B      jmp _switch14_default
1026   09B5 0A 3B 0B      jmp _switch14_exit
1027   09B8             _switch14_case0:
1028   09B8             _switch14_case1:
1029   09B8             ;; fp++; 
1030   09B8 FA FD FF      lea d, [bp + -3] ; $fp
1031   09BB 2A            mov b, [d]
1032   09BC D8            push b
1033   09BD FD 77         inc b
1034   09BF FA FD FF      lea d, [bp + -3] ; $fp
1035   09C2 FD 43         mov [d], b
1036   09C4 E5            pop b
1037   09C5             ;; if(*fp == 'd' || *fp == 'i') 
1038   09C5             _if15_cond:
1039   09C5 FA FD FF      lea d, [bp + -3] ; $fp
1040   09C8 2A            mov b, [d]
1041   09C9 74            mov d, b
1042   09CA 32            mov bl, [d]
1043   09CB A7 00         mov bh, 0
1044   09CD             ; START RELATIONAL
1045   09CD D7            push a
1046   09CE 11            mov a, b
1047   09CF 26 64 00      mov b, $64
1048   09D2 B0            cmp a, b
1049   09D3 FD 71         seq ; ==
1050   09D5 E4            pop a
1051   09D6             ; END RELATIONAL
1052   09D6 D7            push a
1053   09D7 11            mov a, b
1054   09D8 FA FD FF      lea d, [bp + -3] ; $fp
1055   09DB 2A            mov b, [d]
1056   09DC 74            mov d, b
1057   09DD 32            mov bl, [d]
1058   09DE A7 00         mov bh, 0
1059   09E0             ; START RELATIONAL
1060   09E0 D7            push a
1061   09E1 11            mov a, b
1062   09E2 26 69 00      mov b, $69
1063   09E5 B0            cmp a, b
1064   09E6 FD 71         seq ; ==
1065   09E8 E4            pop a
1066   09E9             ; END RELATIONAL
1067   09E9 FD A8         sor a, b ; ||
1068   09EB E4            pop a
1069   09EC C0 00 00      cmp b, 0
1070   09EF C6 06 0A      je _if15_else
1071   09F2             _if15_true:
1072   09F2             ;; print_signed_long(*(long *)p); 
1073   09F2 FD 79         mov g, b
1074   09F4 28            mov b, c
1075   09F5 FD AB         swp b
1076   09F7 D8            push b
1077   09F8 FD 27         mov b, g
1078   09FA FD AB         swp b
1079   09FC D8            push b
1080   09FD 07 FC 0D      call print_signed_long
1081   0A00 51 04 00      add sp, 4
1082   0A03 0A 70 0A      jmp _if15_exit
1083   0A06             _if15_else:
1084   0A06             ;; if(*fp == 'u') 
1085   0A06             _if16_cond:
1086   0A06 FA FD FF      lea d, [bp + -3] ; $fp
1087   0A09 2A            mov b, [d]
1088   0A0A 74            mov d, b
1089   0A0B 32            mov bl, [d]
1090   0A0C A7 00         mov bh, 0
1091   0A0E             ; START RELATIONAL
1092   0A0E D7            push a
1093   0A0F 11            mov a, b
1094   0A10 26 75 00      mov b, $75
1095   0A13 B0            cmp a, b
1096   0A14 FD 71         seq ; ==
1097   0A16 E4            pop a
1098   0A17             ; END RELATIONAL
1099   0A17 C0 00 00      cmp b, 0
1100   0A1A C6 31 0A      je _if16_else
1101   0A1D             _if16_true:
1102   0A1D             ;; print_unsigned_long(*(unsigned long *)p); 
1103   0A1D FD 79         mov g, b
1104   0A1F 28            mov b, c
1105   0A20 FD AB         swp b
1106   0A22 D8            push b
1107   0A23 FD 27         mov b, g
1108   0A25 FD AB         swp b
1109   0A27 D8            push b
1110   0A28 07 4F 0F      call print_unsigned_long
1111   0A2B 51 04 00      add sp, 4
1112   0A2E 0A 70 0A      jmp _if16_exit
1113   0A31             _if16_else:
1114   0A31             ;; if(*fp == 'x') 
1115   0A31             _if17_cond:
1116   0A31 FA FD FF      lea d, [bp + -3] ; $fp
1117   0A34 2A            mov b, [d]
1118   0A35 74            mov d, b
1119   0A36 32            mov bl, [d]
1120   0A37 A7 00         mov bh, 0
1121   0A39             ; START RELATIONAL
1122   0A39 D7            push a
1123   0A3A 11            mov a, b
1124   0A3B 26 78 00      mov b, $78
1125   0A3E B0            cmp a, b
1126   0A3F FD 71         seq ; ==
1127   0A41 E4            pop a
1128   0A42             ; END RELATIONAL
1129   0A42 C0 00 00      cmp b, 0
1130   0A45 C6 67 0A      je _if17_else
1131   0A48             _if17_true:
1132   0A48             ;; printx32(*(long int *)p); 
1133   0A48 FA FF FF      lea d, [bp + -1] ; $p
1134   0A4B 2A            mov b, [d]
1135   0A4C 74            mov d, b
1136   0A4D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1137   0A50 FD 39         mov c, b ; And place it into C
1138   0A52 2A            mov b, [d] ; Lower Word in B
1139   0A53 FD 79         mov g, b
1140   0A55 28            mov b, c
1141   0A56 FD AB         swp b
1142   0A58 D8            push b
1143   0A59 FD 27         mov b, g
1144   0A5B FD AB         swp b
1145   0A5D D8            push b
1146   0A5E 07 81 0B      call printx32
1147   0A61 51 04 00      add sp, 4
1148   0A64 0A 70 0A      jmp _if17_exit
1149   0A67             _if17_else:
1150   0A67             ;; err("Unexpected format in printf."); 
1151   0A67 26 79 25      mov b, __s1 ; "Unexpected format in printf."
1152   0A6A FD AB         swp b
1153   0A6C D8            push b
1154   0A6D 07 6C 0B      call err
1155   0A70             _if17_exit:
1156   0A70             _if16_exit:
1157   0A70             _if15_exit:
1158   0A70             ;; p = p + 4; 
1159   0A70 FA FF FF      lea d, [bp + -1] ; $p
1160   0A73 DA            push d
1161   0A74 FA FF FF      lea d, [bp + -1] ; $p
1162   0A77 2A            mov b, [d]
1163   0A78             ; START TERMS
1164   0A78 D7            push a
1165   0A79 11            mov a, b
1166   0A7A 26 04 00      mov b, $4
1167   0A7D 54            add a, b
1168   0A7E 27            mov b, a
1169   0A7F E4            pop a
1170   0A80             ; END TERMS
1171   0A80 E7            pop d
1172   0A81 FD 43         mov [d], b
1173   0A83             ;; break; 
1174   0A83 0A 3B 0B      jmp _switch14_exit ; case break
1175   0A86             _switch14_case2:
1176   0A86             _switch14_case3:
1177   0A86             ;; print_signed(*(int*)p); 
1178   0A86 FA FF FF      lea d, [bp + -1] ; $p
1179   0A89 2A            mov b, [d]
1180   0A8A 74            mov d, b
1181   0A8B 2A            mov b, [d]
1182   0A8C FD AB         swp b
1183   0A8E D8            push b
1184   0A8F 07 0B 0D      call print_signed
1185   0A92 51 02 00      add sp, 2
1186   0A95             ;; p = p + 2; 
1187   0A95 FA FF FF      lea d, [bp + -1] ; $p
1188   0A98 DA            push d
1189   0A99 FA FF FF      lea d, [bp + -1] ; $p
1190   0A9C 2A            mov b, [d]
1191   0A9D             ; START TERMS
1192   0A9D D7            push a
1193   0A9E 11            mov a, b
1194   0A9F 26 02 00      mov b, $2
1195   0AA2 54            add a, b
1196   0AA3 27            mov b, a
1197   0AA4 E4            pop a
1198   0AA5             ; END TERMS
1199   0AA5 E7            pop d
1200   0AA6 FD 43         mov [d], b
1201   0AA8             ;; break; 
1202   0AA8 0A 3B 0B      jmp _switch14_exit ; case break
1203   0AAB             _switch14_case4:
1204   0AAB             ;; print_unsigned(*(unsigned int*)p); 
1205   0AAB FA FF FF      lea d, [bp + -1] ; $p
1206   0AAE 2A            mov b, [d]
1207   0AAF 74            mov d, b
1208   0AB0 2A            mov b, [d]
1209   0AB1 FD AB         swp b
1210   0AB3 D8            push b
1211   0AB4 07 4D 10      call print_unsigned
1212   0AB7 51 02 00      add sp, 2
1213   0ABA             ;; p = p + 2; 
1214   0ABA FA FF FF      lea d, [bp + -1] ; $p
1215   0ABD DA            push d
1216   0ABE FA FF FF      lea d, [bp + -1] ; $p
1217   0AC1 2A            mov b, [d]
1218   0AC2             ; START TERMS
1219   0AC2 D7            push a
1220   0AC3 11            mov a, b
1221   0AC4 26 02 00      mov b, $2
1222   0AC7 54            add a, b
1223   0AC8 27            mov b, a
1224   0AC9 E4            pop a
1225   0ACA             ; END TERMS
1226   0ACA E7            pop d
1227   0ACB FD 43         mov [d], b
1228   0ACD             ;; break; 
1229   0ACD 0A 3B 0B      jmp _switch14_exit ; case break
1230   0AD0             _switch14_case5:
1231   0AD0             
1232   0AD0             ; --- BEGIN INLINE ASM BLOCK
1233   0AD0 FA FF FF      lea d, [bp + -1] ; $p
1234   0AD3 FD 2A         mov d, [d]
1235   0AD5 2A            mov b, [d]
1236   0AD6 07 A1 14      call print_u16x
1237   0AD9             ; --- END INLINE ASM BLOCK
1238   0AD9             
1239   0AD9             ;; p = p + 2; 
1240   0AD9 FA FF FF      lea d, [bp + -1] ; $p
1241   0ADC DA            push d
1242   0ADD FA FF FF      lea d, [bp + -1] ; $p
1243   0AE0 2A            mov b, [d]
1244   0AE1             ; START TERMS
1245   0AE1 D7            push a
1246   0AE2 11            mov a, b
1247   0AE3 26 02 00      mov b, $2
1248   0AE6 54            add a, b
1249   0AE7 27            mov b, a
1250   0AE8 E4            pop a
1251   0AE9             ; END TERMS
1252   0AE9 E7            pop d
1253   0AEA FD 43         mov [d], b
1254   0AEC             ;; break; 
1255   0AEC 0A 3B 0B      jmp _switch14_exit ; case break
1256   0AEF             _switch14_case6:
1257   0AEF             
1258   0AEF             ; --- BEGIN INLINE ASM BLOCK
1259   0AEF FA FF FF      lea d, [bp + -1] ; $p
1260   0AF2 FD 2A         mov d, [d]
1261   0AF4 1E            mov al, [d]
1262   0AF5 23            mov ah, al
1263   0AF6 07 FF 12      call _putchar
1264   0AF9             ; --- END INLINE ASM BLOCK
1265   0AF9             
1266   0AF9             ;; p = p + 2; 
1267   0AF9 FA FF FF      lea d, [bp + -1] ; $p
1268   0AFC DA            push d
1269   0AFD FA FF FF      lea d, [bp + -1] ; $p
1270   0B00 2A            mov b, [d]
1271   0B01             ; START TERMS
1272   0B01 D7            push a
1273   0B02 11            mov a, b
1274   0B03 26 02 00      mov b, $2
1275   0B06 54            add a, b
1276   0B07 27            mov b, a
1277   0B08 E4            pop a
1278   0B09             ; END TERMS
1279   0B09 E7            pop d
1280   0B0A FD 43         mov [d], b
1281   0B0C             ;; break; 
1282   0B0C 0A 3B 0B      jmp _switch14_exit ; case break
1283   0B0F             _switch14_case7:
1284   0B0F             
1285   0B0F             ; --- BEGIN INLINE ASM BLOCK
1286   0B0F FA FF FF      lea d, [bp + -1] ; $p
1287   0B12 FD 2A         mov d, [d]
1288   0B14 FD 2A         mov d, [d]
1289   0B16 07 49 14      call _puts
1290   0B19             ; --- END INLINE ASM BLOCK
1291   0B19             
1292   0B19             ;; p = p + 2; 
1293   0B19 FA FF FF      lea d, [bp + -1] ; $p
1294   0B1C DA            push d
1295   0B1D FA FF FF      lea d, [bp + -1] ; $p
1296   0B20 2A            mov b, [d]
1297   0B21             ; START TERMS
1298   0B21 D7            push a
1299   0B22 11            mov a, b
1300   0B23 26 02 00      mov b, $2
1301   0B26 54            add a, b
1302   0B27 27            mov b, a
1303   0B28 E4            pop a
1304   0B29             ; END TERMS
1305   0B29 E7            pop d
1306   0B2A FD 43         mov [d], b
1307   0B2C             ;; break; 
1308   0B2C 0A 3B 0B      jmp _switch14_exit ; case break
1309   0B2F             _switch14_default:
1310   0B2F             ;; print("Error: Unknown argument type.\n"); 
1311   0B2F 26 96 25      mov b, __s2 ; "Error: Unknown argument type.\n"
1312   0B32 FD AB         swp b
1313   0B34 D8            push b
1314   0B35 07 66 11      call print
1315   0B38 51 02 00      add sp, 2
1316   0B3B             _switch14_exit:
1317   0B3B             ;; fp++; 
1318   0B3B FA FD FF      lea d, [bp + -3] ; $fp
1319   0B3E 2A            mov b, [d]
1320   0B3F D8            push b
1321   0B40 FD 77         inc b
1322   0B42 FA FD FF      lea d, [bp + -3] ; $fp
1323   0B45 FD 43         mov [d], b
1324   0B47 E5            pop b
1325   0B48 0A 67 0B      jmp _if13_exit
1326   0B4B             _if13_else:
1327   0B4B             ;; putchar(*fp); 
1328   0B4B FA FD FF      lea d, [bp + -3] ; $fp
1329   0B4E 2A            mov b, [d]
1330   0B4F 74            mov d, b
1331   0B50 32            mov bl, [d]
1332   0B51 A7 00         mov bh, 0
1333   0B53 DD            push bl
1334   0B54 07 1E 11      call putchar
1335   0B57 51 01 00      add sp, 1
1336   0B5A             ;; fp++; 
1337   0B5A FA FD FF      lea d, [bp + -3] ; $fp
1338   0B5D 2A            mov b, [d]
1339   0B5E D8            push b
1340   0B5F FD 77         inc b
1341   0B61 FA FD FF      lea d, [bp + -3] ; $fp
1342   0B64 FD 43         mov [d], b
1343   0B66 E5            pop b
1344   0B67             _if13_exit:
1345   0B67             _if12_exit:
1346   0B67             _for11_update:
1347   0B67 0A 45 09      jmp _for11_cond
1348   0B6A             _for11_exit:
1349   0B6A F9            leave
1350   0B6B 09            ret
1351   0B6C             
1352   0B6C             err:
1353   0B6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1354   0B6F             ;; print(e); 
1355   0B6F FA 05 00      lea d, [bp + 5] ; $e
1356   0B72 2A            mov b, [d]
1357   0B73 FD AB         swp b
1358   0B75 D8            push b
1359   0B76 07 66 11      call print
1360   0B79 51 02 00      add sp, 2
1361   0B7C             ;; exit(); 
1362   0B7C 07 35 07      call exit
1363   0B7F F9            leave
1364   0B80 09            ret
1365   0B81             
1366   0B81             printx32:
1367   0B81 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1368   0B84             
1369   0B84             ; --- BEGIN INLINE ASM BLOCK
1370   0B84 FA 05 00      lea d, [bp + 5] ; $hex
1371   0B87 2B 02 00      mov b, [d+2]
1372   0B8A 07 A1 14      call print_u16x
1373   0B8D 2A            mov b, [d]
1374   0B8E 07 A1 14      call print_u16x
1375   0B91             ; --- END INLINE ASM BLOCK
1376   0B91             
1377   0B91 F9            leave
1378   0B92 09            ret
1379   0B93             
1380   0B93             printx16:
1381   0B93 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1382   0B96             
1383   0B96             ; --- BEGIN INLINE ASM BLOCK
1384   0B96 FA 05 00      lea d, [bp + 5] ; $hex
1385   0B99 2A            mov b, [d]
1386   0B9A 07 A1 14      call print_u16x
1387   0B9D             ; --- END INLINE ASM BLOCK
1388   0B9D             
1389   0B9D F9            leave
1390   0B9E 09            ret
1391   0B9F             
1392   0B9F             printx8:
1393   0B9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1394   0BA2             
1395   0BA2             ; --- BEGIN INLINE ASM BLOCK
1396   0BA2 FA 05 00      lea d, [bp + 5] ; $hex
1397   0BA5 32            mov bl, [d]
1398   0BA6 07 E5 14      call print_u8x
1399   0BA9             ; --- END INLINE ASM BLOCK
1400   0BA9             
1401   0BA9 F9            leave
1402   0BAA 09            ret
1403   0BAB             
1404   0BAB             hex_to_int:
1405   0BAB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1406   0BAE             ; $value 
1407   0BAE 10 00 00      mov a, $0
1408   0BB1 45 FF FF      mov [bp + -1], a
1409   0BB4             ; $i 
1410   0BB4             ; $hex_char 
1411   0BB4             ; $len 
1412   0BB4 52 07 00      sub sp, 7
1413   0BB7             ;; len = strlen(hex_string); 
1414   0BB7 FA FA FF      lea d, [bp + -6] ; $len
1415   0BBA DA            push d
1416   0BBB FA 05 00      lea d, [bp + 5] ; $hex_string
1417   0BBE 2A            mov b, [d]
1418   0BBF FD AB         swp b
1419   0BC1 D8            push b
1420   0BC2 07 EC 06      call strlen
1421   0BC5 51 02 00      add sp, 2
1422   0BC8 E7            pop d
1423   0BC9 FD 43         mov [d], b
1424   0BCB             ;; for (i = 0; i < len; i++) { 
1425   0BCB             _for18_init:
1426   0BCB FA FD FF      lea d, [bp + -3] ; $i
1427   0BCE DA            push d
1428   0BCF 26 00 00      mov b, $0
1429   0BD2 E7            pop d
1430   0BD3 FD 43         mov [d], b
1431   0BD5             _for18_cond:
1432   0BD5 FA FD FF      lea d, [bp + -3] ; $i
1433   0BD8 2A            mov b, [d]
1434   0BD9             ; START RELATIONAL
1435   0BD9 D7            push a
1436   0BDA 11            mov a, b
1437   0BDB FA FA FF      lea d, [bp + -6] ; $len
1438   0BDE 2A            mov b, [d]
1439   0BDF B0            cmp a, b
1440   0BE0 FD 73         slt ; <= (signed)
1441   0BE2 E4            pop a
1442   0BE3             ; END RELATIONAL
1443   0BE3 C0 00 00      cmp b, 0
1444   0BE6 C6 EB 0C      je _for18_exit
1445   0BE9             _for18_block:
1446   0BE9             ;; hex_char = hex_string[i]; 
1447   0BE9 FA FC FF      lea d, [bp + -4] ; $hex_char
1448   0BEC DA            push d
1449   0BED FA 05 00      lea d, [bp + 5] ; $hex_string
1450   0BF0 FD 2A         mov d, [d]
1451   0BF2 D7            push a
1452   0BF3 DA            push d
1453   0BF4 FA FD FF      lea d, [bp + -3] ; $i
1454   0BF7 2A            mov b, [d]
1455   0BF8 E7            pop d
1456   0BF9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1457   0BFD E4            pop a
1458   0BFE 32            mov bl, [d]
1459   0BFF A7 00         mov bh, 0
1460   0C01 E7            pop d
1461   0C02 FD 3E         mov [d], bl
1462   0C04             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1463   0C04             _if19_cond:
1464   0C04 FA FC FF      lea d, [bp + -4] ; $hex_char
1465   0C07 32            mov bl, [d]
1466   0C08 A7 00         mov bh, 0
1467   0C0A             ; START RELATIONAL
1468   0C0A D7            push a
1469   0C0B 11            mov a, b
1470   0C0C 26 61 00      mov b, $61
1471   0C0F B0            cmp a, b
1472   0C10 FD 80         sge ; >=
1473   0C12 E4            pop a
1474   0C13             ; END RELATIONAL
1475   0C13 D7            push a
1476   0C14 11            mov a, b
1477   0C15 FA FC FF      lea d, [bp + -4] ; $hex_char
1478   0C18 32            mov bl, [d]
1479   0C19 A7 00         mov bh, 0
1480   0C1B             ; START RELATIONAL
1481   0C1B D7            push a
1482   0C1C 11            mov a, b
1483   0C1D 26 66 00      mov b, $66
1484   0C20 B0            cmp a, b
1485   0C21 FD 74         sle ; <=
1486   0C23 E4            pop a
1487   0C24             ; END RELATIONAL
1488   0C24 FD A7         sand a, b ; &&
1489   0C26 E4            pop a
1490   0C27 C0 00 00      cmp b, 0
1491   0C2A C6 5C 0C      je _if19_else
1492   0C2D             _if19_true:
1493   0C2D             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1494   0C2D FA FF FF      lea d, [bp + -1] ; $value
1495   0C30 DA            push d
1496   0C31 FA FF FF      lea d, [bp + -1] ; $value
1497   0C34 2A            mov b, [d]
1498   0C35             ; START FACTORS
1499   0C35 D7            push a
1500   0C36 11            mov a, b
1501   0C37 26 10 00      mov b, $10
1502   0C3A AC            mul a, b ; *
1503   0C3B 11            mov a, b
1504   0C3C 27            mov b, a
1505   0C3D E4            pop a
1506   0C3E             ; END FACTORS
1507   0C3E             ; START TERMS
1508   0C3E D7            push a
1509   0C3F 11            mov a, b
1510   0C40 FA FC FF      lea d, [bp + -4] ; $hex_char
1511   0C43 32            mov bl, [d]
1512   0C44 A7 00         mov bh, 0
1513   0C46             ; START TERMS
1514   0C46 D7            push a
1515   0C47 11            mov a, b
1516   0C48 26 61 00      mov b, $61
1517   0C4B 60            sub a, b
1518   0C4C 11            mov a, b
1519   0C4D 26 0A 00      mov b, $a
1520   0C50 54            add a, b
1521   0C51 27            mov b, a
1522   0C52 E4            pop a
1523   0C53             ; END TERMS
1524   0C53 54            add a, b
1525   0C54 27            mov b, a
1526   0C55 E4            pop a
1527   0C56             ; END TERMS
1528   0C56 E7            pop d
1529   0C57 FD 43         mov [d], b
1530   0C59 0A DB 0C      jmp _if19_exit
1531   0C5C             _if19_else:
1532   0C5C             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1533   0C5C             _if20_cond:
1534   0C5C FA FC FF      lea d, [bp + -4] ; $hex_char
1535   0C5F 32            mov bl, [d]
1536   0C60 A7 00         mov bh, 0
1537   0C62             ; START RELATIONAL
1538   0C62 D7            push a
1539   0C63 11            mov a, b
1540   0C64 26 41 00      mov b, $41
1541   0C67 B0            cmp a, b
1542   0C68 FD 80         sge ; >=
1543   0C6A E4            pop a
1544   0C6B             ; END RELATIONAL
1545   0C6B D7            push a
1546   0C6C 11            mov a, b
1547   0C6D FA FC FF      lea d, [bp + -4] ; $hex_char
1548   0C70 32            mov bl, [d]
1549   0C71 A7 00         mov bh, 0
1550   0C73             ; START RELATIONAL
1551   0C73 D7            push a
1552   0C74 11            mov a, b
1553   0C75 26 46 00      mov b, $46
1554   0C78 B0            cmp a, b
1555   0C79 FD 74         sle ; <=
1556   0C7B E4            pop a
1557   0C7C             ; END RELATIONAL
1558   0C7C FD A7         sand a, b ; &&
1559   0C7E E4            pop a
1560   0C7F C0 00 00      cmp b, 0
1561   0C82 C6 B4 0C      je _if20_else
1562   0C85             _if20_true:
1563   0C85             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1564   0C85 FA FF FF      lea d, [bp + -1] ; $value
1565   0C88 DA            push d
1566   0C89 FA FF FF      lea d, [bp + -1] ; $value
1567   0C8C 2A            mov b, [d]
1568   0C8D             ; START FACTORS
1569   0C8D D7            push a
1570   0C8E 11            mov a, b
1571   0C8F 26 10 00      mov b, $10
1572   0C92 AC            mul a, b ; *
1573   0C93 11            mov a, b
1574   0C94 27            mov b, a
1575   0C95 E4            pop a
1576   0C96             ; END FACTORS
1577   0C96             ; START TERMS
1578   0C96 D7            push a
1579   0C97 11            mov a, b
1580   0C98 FA FC FF      lea d, [bp + -4] ; $hex_char
1581   0C9B 32            mov bl, [d]
1582   0C9C A7 00         mov bh, 0
1583   0C9E             ; START TERMS
1584   0C9E D7            push a
1585   0C9F 11            mov a, b
1586   0CA0 26 41 00      mov b, $41
1587   0CA3 60            sub a, b
1588   0CA4 11            mov a, b
1589   0CA5 26 0A 00      mov b, $a
1590   0CA8 54            add a, b
1591   0CA9 27            mov b, a
1592   0CAA E4            pop a
1593   0CAB             ; END TERMS
1594   0CAB 54            add a, b
1595   0CAC 27            mov b, a
1596   0CAD E4            pop a
1597   0CAE             ; END TERMS
1598   0CAE E7            pop d
1599   0CAF FD 43         mov [d], b
1600   0CB1 0A DB 0C      jmp _if20_exit
1601   0CB4             _if20_else:
1602   0CB4             ;; value = (value * 16) + (hex_char - '0'); 
1603   0CB4 FA FF FF      lea d, [bp + -1] ; $value
1604   0CB7 DA            push d
1605   0CB8 FA FF FF      lea d, [bp + -1] ; $value
1606   0CBB 2A            mov b, [d]
1607   0CBC             ; START FACTORS
1608   0CBC D7            push a
1609   0CBD 11            mov a, b
1610   0CBE 26 10 00      mov b, $10
1611   0CC1 AC            mul a, b ; *
1612   0CC2 11            mov a, b
1613   0CC3 27            mov b, a
1614   0CC4 E4            pop a
1615   0CC5             ; END FACTORS
1616   0CC5             ; START TERMS
1617   0CC5 D7            push a
1618   0CC6 11            mov a, b
1619   0CC7 FA FC FF      lea d, [bp + -4] ; $hex_char
1620   0CCA 32            mov bl, [d]
1621   0CCB A7 00         mov bh, 0
1622   0CCD             ; START TERMS
1623   0CCD D7            push a
1624   0CCE 11            mov a, b
1625   0CCF 26 30 00      mov b, $30
1626   0CD2 60            sub a, b
1627   0CD3 27            mov b, a
1628   0CD4 E4            pop a
1629   0CD5             ; END TERMS
1630   0CD5 54            add a, b
1631   0CD6 27            mov b, a
1632   0CD7 E4            pop a
1633   0CD8             ; END TERMS
1634   0CD8 E7            pop d
1635   0CD9 FD 43         mov [d], b
1636   0CDB             _if20_exit:
1637   0CDB             _if19_exit:
1638   0CDB             _for18_update:
1639   0CDB FA FD FF      lea d, [bp + -3] ; $i
1640   0CDE 2A            mov b, [d]
1641   0CDF D8            push b
1642   0CE0 FD 77         inc b
1643   0CE2 FA FD FF      lea d, [bp + -3] ; $i
1644   0CE5 FD 43         mov [d], b
1645   0CE7 E5            pop b
1646   0CE8 0A D5 0B      jmp _for18_cond
1647   0CEB             _for18_exit:
1648   0CEB             ;; return value; 
1649   0CEB FA FF FF      lea d, [bp + -1] ; $value
1650   0CEE 2A            mov b, [d]
1651   0CEF F9            leave
1652   0CF0 09            ret
1653   0CF1             
1654   0CF1             gets:
1655   0CF1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1656   0CF4             
1657   0CF4             ; --- BEGIN INLINE ASM BLOCK
1658   0CF4 FA 05 00      lea d, [bp + 5] ; $s
1659   0CF7 15            mov a, [d]
1660   0CF8 3C            mov d, a
1661   0CF9 07 06 13      call _gets
1662   0CFC             ; --- END INLINE ASM BLOCK
1663   0CFC             
1664   0CFC             ;; return strlen(s); 
1665   0CFC FA 05 00      lea d, [bp + 5] ; $s
1666   0CFF 2A            mov b, [d]
1667   0D00 FD AB         swp b
1668   0D02 D8            push b
1669   0D03 07 EC 06      call strlen
1670   0D06 51 02 00      add sp, 2
1671   0D09 F9            leave
1672   0D0A 09            ret
1673   0D0B             
1674   0D0B             print_signed:
1675   0D0B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1676   0D0E             ; $digits 
1677   0D0E             ; $i 
1678   0D0E 10 00 00      mov a, $0
1679   0D11 45 FA FF      mov [bp + -6], a
1680   0D14 52 07 00      sub sp, 7
1681   0D17             ;; if (num < 0) { 
1682   0D17             _if21_cond:
1683   0D17 FA 05 00      lea d, [bp + 5] ; $num
1684   0D1A 2A            mov b, [d]
1685   0D1B             ; START RELATIONAL
1686   0D1B D7            push a
1687   0D1C 11            mov a, b
1688   0D1D 26 00 00      mov b, $0
1689   0D20 B0            cmp a, b
1690   0D21 FD 73         slt ; <= (signed)
1691   0D23 E4            pop a
1692   0D24             ; END RELATIONAL
1693   0D24 C0 00 00      cmp b, 0
1694   0D27 C6 44 0D      je _if21_else
1695   0D2A             _if21_true:
1696   0D2A             ;; putchar('-'); 
1697   0D2A 26 2D 00      mov b, $2d
1698   0D2D DD            push bl
1699   0D2E 07 1E 11      call putchar
1700   0D31 51 01 00      add sp, 1
1701   0D34             ;; num = -num; 
1702   0D34 FA 05 00      lea d, [bp + 5] ; $num
1703   0D37 DA            push d
1704   0D38 FA 05 00      lea d, [bp + 5] ; $num
1705   0D3B 2A            mov b, [d]
1706   0D3C FD 97         neg b
1707   0D3E E7            pop d
1708   0D3F FD 43         mov [d], b
1709   0D41 0A 66 0D      jmp _if21_exit
1710   0D44             _if21_else:
1711   0D44             ;; if (num == 0) { 
1712   0D44             _if22_cond:
1713   0D44 FA 05 00      lea d, [bp + 5] ; $num
1714   0D47 2A            mov b, [d]
1715   0D48             ; START RELATIONAL
1716   0D48 D7            push a
1717   0D49 11            mov a, b
1718   0D4A 26 00 00      mov b, $0
1719   0D4D B0            cmp a, b
1720   0D4E FD 71         seq ; ==
1721   0D50 E4            pop a
1722   0D51             ; END RELATIONAL
1723   0D51 C0 00 00      cmp b, 0
1724   0D54 C6 66 0D      je _if22_exit
1725   0D57             _if22_true:
1726   0D57             ;; putchar('0'); 
1727   0D57 26 30 00      mov b, $30
1728   0D5A DD            push bl
1729   0D5B 07 1E 11      call putchar
1730   0D5E 51 01 00      add sp, 1
1731   0D61             ;; return; 
1732   0D61 F9            leave
1733   0D62 09            ret
1734   0D63 0A 66 0D      jmp _if22_exit
1735   0D66             _if22_exit:
1736   0D66             _if21_exit:
1737   0D66             ;; while (num > 0) { 
1738   0D66             _while23_cond:
1739   0D66 FA 05 00      lea d, [bp + 5] ; $num
1740   0D69 2A            mov b, [d]
1741   0D6A             ; START RELATIONAL
1742   0D6A D7            push a
1743   0D6B 11            mov a, b
1744   0D6C 26 00 00      mov b, $0
1745   0D6F B0            cmp a, b
1746   0D70 FD 7F         sgt ; >
1747   0D72 E4            pop a
1748   0D73             ; END RELATIONAL
1749   0D73 C0 00 00      cmp b, 0
1750   0D76 C6 C1 0D      je _while23_exit
1751   0D79             _while23_block:
1752   0D79             ;; digits[i] = '0' + (num % 10); 
1753   0D79 FA FC FF      lea d, [bp + -4] ; $digits
1754   0D7C D7            push a
1755   0D7D DA            push d
1756   0D7E FA FA FF      lea d, [bp + -6] ; $i
1757   0D81 2A            mov b, [d]
1758   0D82 E7            pop d
1759   0D83 5A            add d, b
1760   0D84 E4            pop a
1761   0D85 DA            push d
1762   0D86 26 30 00      mov b, $30
1763   0D89             ; START TERMS
1764   0D89 D7            push a
1765   0D8A 11            mov a, b
1766   0D8B FA 05 00      lea d, [bp + 5] ; $num
1767   0D8E 2A            mov b, [d]
1768   0D8F             ; START FACTORS
1769   0D8F D7            push a
1770   0D90 11            mov a, b
1771   0D91 26 0A 00      mov b, $a
1772   0D94 AE            div a, b ; 
1773   0D95 11            mov a, b
1774   0D96 27            mov b, a
1775   0D97 E4            pop a
1776   0D98             ; END FACTORS
1777   0D98 54            add a, b
1778   0D99 27            mov b, a
1779   0D9A E4            pop a
1780   0D9B             ; END TERMS
1781   0D9B E7            pop d
1782   0D9C FD 3E         mov [d], bl
1783   0D9E             ;; num = num / 10; 
1784   0D9E FA 05 00      lea d, [bp + 5] ; $num
1785   0DA1 DA            push d
1786   0DA2 FA 05 00      lea d, [bp + 5] ; $num
1787   0DA5 2A            mov b, [d]
1788   0DA6             ; START FACTORS
1789   0DA6 D7            push a
1790   0DA7 11            mov a, b
1791   0DA8 26 0A 00      mov b, $a
1792   0DAB AE            div a, b
1793   0DAC 27            mov b, a
1794   0DAD E4            pop a
1795   0DAE             ; END FACTORS
1796   0DAE E7            pop d
1797   0DAF FD 43         mov [d], b
1798   0DB1             ;; i++; 
1799   0DB1 FA FA FF      lea d, [bp + -6] ; $i
1800   0DB4 2A            mov b, [d]
1801   0DB5 D8            push b
1802   0DB6 FD 77         inc b
1803   0DB8 FA FA FF      lea d, [bp + -6] ; $i
1804   0DBB FD 43         mov [d], b
1805   0DBD E5            pop b
1806   0DBE 0A 66 0D      jmp _while23_cond
1807   0DC1             _while23_exit:
1808   0DC1             ;; while (i > 0) { 
1809   0DC1             _while24_cond:
1810   0DC1 FA FA FF      lea d, [bp + -6] ; $i
1811   0DC4 2A            mov b, [d]
1812   0DC5             ; START RELATIONAL
1813   0DC5 D7            push a
1814   0DC6 11            mov a, b
1815   0DC7 26 00 00      mov b, $0
1816   0DCA B0            cmp a, b
1817   0DCB FD 7F         sgt ; >
1818   0DCD E4            pop a
1819   0DCE             ; END RELATIONAL
1820   0DCE C0 00 00      cmp b, 0
1821   0DD1 C6 FA 0D      je _while24_exit
1822   0DD4             _while24_block:
1823   0DD4             ;; i--; 
1824   0DD4 FA FA FF      lea d, [bp + -6] ; $i
1825   0DD7 2A            mov b, [d]
1826   0DD8 D8            push b
1827   0DD9 FD 7D         dec b
1828   0DDB FA FA FF      lea d, [bp + -6] ; $i
1829   0DDE FD 43         mov [d], b
1830   0DE0 E5            pop b
1831   0DE1             ;; putchar(digits[i]); 
1832   0DE1 FA FC FF      lea d, [bp + -4] ; $digits
1833   0DE4 D7            push a
1834   0DE5 DA            push d
1835   0DE6 FA FA FF      lea d, [bp + -6] ; $i
1836   0DE9 2A            mov b, [d]
1837   0DEA E7            pop d
1838   0DEB 5A            add d, b
1839   0DEC E4            pop a
1840   0DED 32            mov bl, [d]
1841   0DEE A7 00         mov bh, 0
1842   0DF0 DD            push bl
1843   0DF1 07 1E 11      call putchar
1844   0DF4 51 01 00      add sp, 1
1845   0DF7 0A C1 0D      jmp _while24_cond
1846   0DFA             _while24_exit:
1847   0DFA F9            leave
1848   0DFB 09            ret
1849   0DFC             
1850   0DFC             print_signed_long:
1851   0DFC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1852   0DFF             ; $digits 
1853   0DFF             ; $i 
1854   0DFF 10 00 00      mov a, $0
1855   0E02 45 F5 FF      mov [bp + -11], a
1856   0E05 52 0C 00      sub sp, 12
1857   0E08             ;; if (num < 0) { 
1858   0E08             _if25_cond:
1859   0E08 FA 05 00      lea d, [bp + 5] ; $num
1860   0E0B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1861   0E0E FD 39         mov c, b ; And place it into C
1862   0E10 2A            mov b, [d] ; Lower Word in B
1863   0E11             ; START RELATIONAL
1864   0E11 D7            push a
1865   0E12 FD D8         push g
1866   0E14 11            mov a, b
1867   0E15 FD 7A         mov g, c
1868   0E17 26 00 00      mov b, $0
1869   0E1A 4D            mov si, a
1870   0E1B 11            mov a, b
1871   0E1C 4F            mov di, a
1872   0E1D FD 12         mov a, g
1873   0E1F 28            mov b, c
1874   0E20 B0            cmp a, b
1875   0E21 FD 75         slu ; <
1876   0E23 D8            push b
1877   0E24 28            mov b, c
1878   0E25 FD 71         seq ; ==
1879   0E27 D8            push b
1880   0E28 50            mov a, di
1881   0E29 27            mov b, a
1882   0E2A 4E            mov a, si
1883   0E2B B0            cmp a, b
1884   0E2C FD 75         slu ; <
1885   0E2E E4            pop a
1886   0E2F FD 92         and b, a
1887   0E31 E4            pop a
1888   0E32 FD 70         or b, a
1889   0E34               
1890   0E34 FD F1         pop g
1891   0E36 E4            pop a
1892   0E37             ; END RELATIONAL
1893   0E37 C0 00 00      cmp b, 0
1894   0E3A C6 61 0E      je _if25_else
1895   0E3D             _if25_true:
1896   0E3D             ;; putchar('-'); 
1897   0E3D 26 2D 00      mov b, $2d
1898   0E40 DD            push bl
1899   0E41 07 1E 11      call putchar
1900   0E44 51 01 00      add sp, 1
1901   0E47             ;; num = -num; 
1902   0E47 FA 05 00      lea d, [bp + 5] ; $num
1903   0E4A DA            push d
1904   0E4B FA 05 00      lea d, [bp + 5] ; $num
1905   0E4E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1906   0E51 FD 39         mov c, b ; And place it into C
1907   0E53 2A            mov b, [d] ; Lower Word in B
1908   0E54 FD 97         neg b
1909   0E56 E7            pop d
1910   0E57 FD 43         mov [d], b
1911   0E59 28            mov b, c
1912   0E5A FD 44 02 00   mov [d + 2], b
1913   0E5E 0A 98 0E      jmp _if25_exit
1914   0E61             _if25_else:
1915   0E61             ;; if (num == 0) { 
1916   0E61             _if26_cond:
1917   0E61 FA 05 00      lea d, [bp + 5] ; $num
1918   0E64 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1919   0E67 FD 39         mov c, b ; And place it into C
1920   0E69 2A            mov b, [d] ; Lower Word in B
1921   0E6A             ; START RELATIONAL
1922   0E6A D7            push a
1923   0E6B FD D8         push g
1924   0E6D 11            mov a, b
1925   0E6E FD 7A         mov g, c
1926   0E70 26 00 00      mov b, $0
1927   0E73 B0            cmp a, b
1928   0E74 FD 71         seq ; ==
1929   0E76 D8            push b
1930   0E77 12            mov a, c
1931   0E78 FD 27         mov b, g
1932   0E7A B0            cmp a, b
1933   0E7B FD 71         seq ; ==
1934   0E7D E4            pop a
1935   0E7E FD A7         sand a, b
1936   0E80 FD F1         pop g
1937   0E82 E4            pop a
1938   0E83             ; END RELATIONAL
1939   0E83 C0 00 00      cmp b, 0
1940   0E86 C6 98 0E      je _if26_exit
1941   0E89             _if26_true:
1942   0E89             ;; putchar('0'); 
1943   0E89 26 30 00      mov b, $30
1944   0E8C DD            push bl
1945   0E8D 07 1E 11      call putchar
1946   0E90 51 01 00      add sp, 1
1947   0E93             ;; return; 
1948   0E93 F9            leave
1949   0E94 09            ret
1950   0E95 0A 98 0E      jmp _if26_exit
1951   0E98             _if26_exit:
1952   0E98             _if25_exit:
1953   0E98             ;; while (num > 0) { 
1954   0E98             _while27_cond:
1955   0E98 FA 05 00      lea d, [bp + 5] ; $num
1956   0E9B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1957   0E9E FD 39         mov c, b ; And place it into C
1958   0EA0 2A            mov b, [d] ; Lower Word in B
1959   0EA1             ; START RELATIONAL
1960   0EA1 D7            push a
1961   0EA2 FD D8         push g
1962   0EA4 11            mov a, b
1963   0EA5 FD 7A         mov g, c
1964   0EA7 26 00 00      mov b, $0
1965   0EAA B0            cmp a, b
1966   0EAB FD 7F         sgt ; >
1967   0EAD FD F1         pop g
1968   0EAF E4            pop a
1969   0EB0             ; END RELATIONAL
1970   0EB0 C0 00 00      cmp b, 0
1971   0EB3 C6 14 0F      je _while27_exit
1972   0EB6             _while27_block:
1973   0EB6             ;; digits[i] = '0' + (num % 10); 
1974   0EB6 FA F7 FF      lea d, [bp + -9] ; $digits
1975   0EB9 D7            push a
1976   0EBA DA            push d
1977   0EBB FA F5 FF      lea d, [bp + -11] ; $i
1978   0EBE 2A            mov b, [d]
1979   0EBF E7            pop d
1980   0EC0 5A            add d, b
1981   0EC1 E4            pop a
1982   0EC2 DA            push d
1983   0EC3 26 30 00      mov b, $30
1984   0EC6             ; START TERMS
1985   0EC6 D7            push a
1986   0EC7 11            mov a, b
1987   0EC8 FA 05 00      lea d, [bp + 5] ; $num
1988   0ECB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1989   0ECE FD 39         mov c, b ; And place it into C
1990   0ED0 2A            mov b, [d] ; Lower Word in B
1991   0ED1             ; START FACTORS
1992   0ED1 D7            push a
1993   0ED2 11            mov a, b
1994   0ED3 26 0A 00      mov b, $a
1995   0ED6 AE            div a, b ; 
1996   0ED7 11            mov a, b
1997   0ED8 27            mov b, a
1998   0ED9 E4            pop a
1999   0EDA             ; END FACTORS
2000   0EDA 54            add a, b
2001   0EDB D7            push a
2002   0EDC FD 12         mov a, g
2003   0EDE 28            mov b, c
2004   0EDF 5C            adc a, b
2005   0EE0 39            mov c, a
2006   0EE1 E5            pop b
2007   0EE2 27            mov b, a
2008   0EE3 E4            pop a
2009   0EE4             ; END TERMS
2010   0EE4 E7            pop d
2011   0EE5 FD 3E         mov [d], bl
2012   0EE7             ;; num = num / 10; 
2013   0EE7 FA 05 00      lea d, [bp + 5] ; $num
2014   0EEA DA            push d
2015   0EEB FA 05 00      lea d, [bp + 5] ; $num
2016   0EEE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2017   0EF1 FD 39         mov c, b ; And place it into C
2018   0EF3 2A            mov b, [d] ; Lower Word in B
2019   0EF4             ; START FACTORS
2020   0EF4 D7            push a
2021   0EF5 11            mov a, b
2022   0EF6 26 0A 00      mov b, $a
2023   0EF9 AE            div a, b
2024   0EFA 27            mov b, a
2025   0EFB E4            pop a
2026   0EFC             ; END FACTORS
2027   0EFC E7            pop d
2028   0EFD FD 43         mov [d], b
2029   0EFF 28            mov b, c
2030   0F00 FD 44 02 00   mov [d + 2], b
2031   0F04             ;; i++; 
2032   0F04 FA F5 FF      lea d, [bp + -11] ; $i
2033   0F07 2A            mov b, [d]
2034   0F08 D8            push b
2035   0F09 FD 77         inc b
2036   0F0B FA F5 FF      lea d, [bp + -11] ; $i
2037   0F0E FD 43         mov [d], b
2038   0F10 E5            pop b
2039   0F11 0A 98 0E      jmp _while27_cond
2040   0F14             _while27_exit:
2041   0F14             ;; while (i > 0) { 
2042   0F14             _while28_cond:
2043   0F14 FA F5 FF      lea d, [bp + -11] ; $i
2044   0F17 2A            mov b, [d]
2045   0F18             ; START RELATIONAL
2046   0F18 D7            push a
2047   0F19 11            mov a, b
2048   0F1A 26 00 00      mov b, $0
2049   0F1D B0            cmp a, b
2050   0F1E FD 7F         sgt ; >
2051   0F20 E4            pop a
2052   0F21             ; END RELATIONAL
2053   0F21 C0 00 00      cmp b, 0
2054   0F24 C6 4D 0F      je _while28_exit
2055   0F27             _while28_block:
2056   0F27             ;; i--; 
2057   0F27 FA F5 FF      lea d, [bp + -11] ; $i
2058   0F2A 2A            mov b, [d]
2059   0F2B D8            push b
2060   0F2C FD 7D         dec b
2061   0F2E FA F5 FF      lea d, [bp + -11] ; $i
2062   0F31 FD 43         mov [d], b
2063   0F33 E5            pop b
2064   0F34             ;; putchar(digits[i]); 
2065   0F34 FA F7 FF      lea d, [bp + -9] ; $digits
2066   0F37 D7            push a
2067   0F38 DA            push d
2068   0F39 FA F5 FF      lea d, [bp + -11] ; $i
2069   0F3C 2A            mov b, [d]
2070   0F3D E7            pop d
2071   0F3E 5A            add d, b
2072   0F3F E4            pop a
2073   0F40 32            mov bl, [d]
2074   0F41 A7 00         mov bh, 0
2075   0F43 DD            push bl
2076   0F44 07 1E 11      call putchar
2077   0F47 51 01 00      add sp, 1
2078   0F4A 0A 14 0F      jmp _while28_cond
2079   0F4D             _while28_exit:
2080   0F4D F9            leave
2081   0F4E 09            ret
2082   0F4F             
2083   0F4F             print_unsigned_long:
2084   0F4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2085   0F52             ; $digits 
2086   0F52             ; $i 
2087   0F52 52 0C 00      sub sp, 12
2088   0F55             ;; i = 0; 
2089   0F55 FA F5 FF      lea d, [bp + -11] ; $i
2090   0F58 DA            push d
2091   0F59 26 00 00      mov b, $0
2092   0F5C E7            pop d
2093   0F5D FD 43         mov [d], b
2094   0F5F             ;; if(num == 0){ 
2095   0F5F             _if29_cond:
2096   0F5F FA 05 00      lea d, [bp + 5] ; $num
2097   0F62 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2098   0F65 FD 39         mov c, b ; And place it into C
2099   0F67 2A            mov b, [d] ; Lower Word in B
2100   0F68             ; START RELATIONAL
2101   0F68 D7            push a
2102   0F69 FD D8         push g
2103   0F6B 11            mov a, b
2104   0F6C FD 7A         mov g, c
2105   0F6E 26 00 00      mov b, $0
2106   0F71 B0            cmp a, b
2107   0F72 FD 71         seq ; ==
2108   0F74 D8            push b
2109   0F75 12            mov a, c
2110   0F76 FD 27         mov b, g
2111   0F78 B0            cmp a, b
2112   0F79 FD 71         seq ; ==
2113   0F7B E4            pop a
2114   0F7C FD A7         sand a, b
2115   0F7E FD F1         pop g
2116   0F80 E4            pop a
2117   0F81             ; END RELATIONAL
2118   0F81 C0 00 00      cmp b, 0
2119   0F84 C6 96 0F      je _if29_exit
2120   0F87             _if29_true:
2121   0F87             ;; putchar('0'); 
2122   0F87 26 30 00      mov b, $30
2123   0F8A DD            push bl
2124   0F8B 07 1E 11      call putchar
2125   0F8E 51 01 00      add sp, 1
2126   0F91             ;; return; 
2127   0F91 F9            leave
2128   0F92 09            ret
2129   0F93 0A 96 0F      jmp _if29_exit
2130   0F96             _if29_exit:
2131   0F96             ;; while (num > 0) { 
2132   0F96             _while30_cond:
2133   0F96 FA 05 00      lea d, [bp + 5] ; $num
2134   0F99 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2135   0F9C FD 39         mov c, b ; And place it into C
2136   0F9E 2A            mov b, [d] ; Lower Word in B
2137   0F9F             ; START RELATIONAL
2138   0F9F D7            push a
2139   0FA0 FD D8         push g
2140   0FA2 11            mov a, b
2141   0FA3 FD 7A         mov g, c
2142   0FA5 26 00 00      mov b, $0
2143   0FA8 B0            cmp a, b
2144   0FA9 FD 81         sgu ; > (unsigned)
2145   0FAB FD F1         pop g
2146   0FAD E4            pop a
2147   0FAE             ; END RELATIONAL
2148   0FAE C0 00 00      cmp b, 0
2149   0FB1 C6 12 10      je _while30_exit
2150   0FB4             _while30_block:
2151   0FB4             ;; digits[i] = '0' + (num % 10); 
2152   0FB4 FA F7 FF      lea d, [bp + -9] ; $digits
2153   0FB7 D7            push a
2154   0FB8 DA            push d
2155   0FB9 FA F5 FF      lea d, [bp + -11] ; $i
2156   0FBC 2A            mov b, [d]
2157   0FBD E7            pop d
2158   0FBE 5A            add d, b
2159   0FBF E4            pop a
2160   0FC0 DA            push d
2161   0FC1 26 30 00      mov b, $30
2162   0FC4             ; START TERMS
2163   0FC4 D7            push a
2164   0FC5 11            mov a, b
2165   0FC6 FA 05 00      lea d, [bp + 5] ; $num
2166   0FC9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2167   0FCC FD 39         mov c, b ; And place it into C
2168   0FCE 2A            mov b, [d] ; Lower Word in B
2169   0FCF             ; START FACTORS
2170   0FCF D7            push a
2171   0FD0 11            mov a, b
2172   0FD1 26 0A 00      mov b, $a
2173   0FD4 AE            div a, b ; 
2174   0FD5 11            mov a, b
2175   0FD6 27            mov b, a
2176   0FD7 E4            pop a
2177   0FD8             ; END FACTORS
2178   0FD8 54            add a, b
2179   0FD9 D7            push a
2180   0FDA FD 12         mov a, g
2181   0FDC 28            mov b, c
2182   0FDD 5C            adc a, b
2183   0FDE 39            mov c, a
2184   0FDF E5            pop b
2185   0FE0 27            mov b, a
2186   0FE1 E4            pop a
2187   0FE2             ; END TERMS
2188   0FE2 E7            pop d
2189   0FE3 FD 3E         mov [d], bl
2190   0FE5             ;; num = num / 10; 
2191   0FE5 FA 05 00      lea d, [bp + 5] ; $num
2192   0FE8 DA            push d
2193   0FE9 FA 05 00      lea d, [bp + 5] ; $num
2194   0FEC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2195   0FEF FD 39         mov c, b ; And place it into C
2196   0FF1 2A            mov b, [d] ; Lower Word in B
2197   0FF2             ; START FACTORS
2198   0FF2 D7            push a
2199   0FF3 11            mov a, b
2200   0FF4 26 0A 00      mov b, $a
2201   0FF7 AE            div a, b
2202   0FF8 27            mov b, a
2203   0FF9 E4            pop a
2204   0FFA             ; END FACTORS
2205   0FFA E7            pop d
2206   0FFB FD 43         mov [d], b
2207   0FFD 28            mov b, c
2208   0FFE FD 44 02 00   mov [d + 2], b
2209   1002             ;; i++; 
2210   1002 FA F5 FF      lea d, [bp + -11] ; $i
2211   1005 2A            mov b, [d]
2212   1006 D8            push b
2213   1007 FD 77         inc b
2214   1009 FA F5 FF      lea d, [bp + -11] ; $i
2215   100C FD 43         mov [d], b
2216   100E E5            pop b
2217   100F 0A 96 0F      jmp _while30_cond
2218   1012             _while30_exit:
2219   1012             ;; while (i > 0) { 
2220   1012             _while31_cond:
2221   1012 FA F5 FF      lea d, [bp + -11] ; $i
2222   1015 2A            mov b, [d]
2223   1016             ; START RELATIONAL
2224   1016 D7            push a
2225   1017 11            mov a, b
2226   1018 26 00 00      mov b, $0
2227   101B B0            cmp a, b
2228   101C FD 7F         sgt ; >
2229   101E E4            pop a
2230   101F             ; END RELATIONAL
2231   101F C0 00 00      cmp b, 0
2232   1022 C6 4B 10      je _while31_exit
2233   1025             _while31_block:
2234   1025             ;; i--; 
2235   1025 FA F5 FF      lea d, [bp + -11] ; $i
2236   1028 2A            mov b, [d]
2237   1029 D8            push b
2238   102A FD 7D         dec b
2239   102C FA F5 FF      lea d, [bp + -11] ; $i
2240   102F FD 43         mov [d], b
2241   1031 E5            pop b
2242   1032             ;; putchar(digits[i]); 
2243   1032 FA F7 FF      lea d, [bp + -9] ; $digits
2244   1035 D7            push a
2245   1036 DA            push d
2246   1037 FA F5 FF      lea d, [bp + -11] ; $i
2247   103A 2A            mov b, [d]
2248   103B E7            pop d
2249   103C 5A            add d, b
2250   103D E4            pop a
2251   103E 32            mov bl, [d]
2252   103F A7 00         mov bh, 0
2253   1041 DD            push bl
2254   1042 07 1E 11      call putchar
2255   1045 51 01 00      add sp, 1
2256   1048 0A 12 10      jmp _while31_cond
2257   104B             _while31_exit:
2258   104B F9            leave
2259   104C 09            ret
2260   104D             
2261   104D             print_unsigned:
2262   104D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2263   1050             ; $digits 
2264   1050             ; $i 
2265   1050 52 07 00      sub sp, 7
2266   1053             ;; i = 0; 
2267   1053 FA FA FF      lea d, [bp + -6] ; $i
2268   1056 DA            push d
2269   1057 26 00 00      mov b, $0
2270   105A E7            pop d
2271   105B FD 43         mov [d], b
2272   105D             ;; if(num == 0){ 
2273   105D             _if32_cond:
2274   105D FA 05 00      lea d, [bp + 5] ; $num
2275   1060 2A            mov b, [d]
2276   1061             ; START RELATIONAL
2277   1061 D7            push a
2278   1062 11            mov a, b
2279   1063 26 00 00      mov b, $0
2280   1066 B0            cmp a, b
2281   1067 FD 71         seq ; ==
2282   1069 E4            pop a
2283   106A             ; END RELATIONAL
2284   106A C0 00 00      cmp b, 0
2285   106D C6 7F 10      je _if32_exit
2286   1070             _if32_true:
2287   1070             ;; putchar('0'); 
2288   1070 26 30 00      mov b, $30
2289   1073 DD            push bl
2290   1074 07 1E 11      call putchar
2291   1077 51 01 00      add sp, 1
2292   107A             ;; return; 
2293   107A F9            leave
2294   107B 09            ret
2295   107C 0A 7F 10      jmp _if32_exit
2296   107F             _if32_exit:
2297   107F             ;; while (num > 0) { 
2298   107F             _while33_cond:
2299   107F FA 05 00      lea d, [bp + 5] ; $num
2300   1082 2A            mov b, [d]
2301   1083             ; START RELATIONAL
2302   1083 D7            push a
2303   1084 11            mov a, b
2304   1085 26 00 00      mov b, $0
2305   1088 B0            cmp a, b
2306   1089 FD 81         sgu ; > (unsigned)
2307   108B E4            pop a
2308   108C             ; END RELATIONAL
2309   108C C0 00 00      cmp b, 0
2310   108F C6 DA 10      je _while33_exit
2311   1092             _while33_block:
2312   1092             ;; digits[i] = '0' + (num % 10); 
2313   1092 FA FC FF      lea d, [bp + -4] ; $digits
2314   1095 D7            push a
2315   1096 DA            push d
2316   1097 FA FA FF      lea d, [bp + -6] ; $i
2317   109A 2A            mov b, [d]
2318   109B E7            pop d
2319   109C 5A            add d, b
2320   109D E4            pop a
2321   109E DA            push d
2322   109F 26 30 00      mov b, $30
2323   10A2             ; START TERMS
2324   10A2 D7            push a
2325   10A3 11            mov a, b
2326   10A4 FA 05 00      lea d, [bp + 5] ; $num
2327   10A7 2A            mov b, [d]
2328   10A8             ; START FACTORS
2329   10A8 D7            push a
2330   10A9 11            mov a, b
2331   10AA 26 0A 00      mov b, $a
2332   10AD AE            div a, b ; 
2333   10AE 11            mov a, b
2334   10AF 27            mov b, a
2335   10B0 E4            pop a
2336   10B1             ; END FACTORS
2337   10B1 54            add a, b
2338   10B2 27            mov b, a
2339   10B3 E4            pop a
2340   10B4             ; END TERMS
2341   10B4 E7            pop d
2342   10B5 FD 3E         mov [d], bl
2343   10B7             ;; num = num / 10; 
2344   10B7 FA 05 00      lea d, [bp + 5] ; $num
2345   10BA DA            push d
2346   10BB FA 05 00      lea d, [bp + 5] ; $num
2347   10BE 2A            mov b, [d]
2348   10BF             ; START FACTORS
2349   10BF D7            push a
2350   10C0 11            mov a, b
2351   10C1 26 0A 00      mov b, $a
2352   10C4 AE            div a, b
2353   10C5 27            mov b, a
2354   10C6 E4            pop a
2355   10C7             ; END FACTORS
2356   10C7 E7            pop d
2357   10C8 FD 43         mov [d], b
2358   10CA             ;; i++; 
2359   10CA FA FA FF      lea d, [bp + -6] ; $i
2360   10CD 2A            mov b, [d]
2361   10CE D8            push b
2362   10CF FD 77         inc b
2363   10D1 FA FA FF      lea d, [bp + -6] ; $i
2364   10D4 FD 43         mov [d], b
2365   10D6 E5            pop b
2366   10D7 0A 7F 10      jmp _while33_cond
2367   10DA             _while33_exit:
2368   10DA             ;; while (i > 0) { 
2369   10DA             _while34_cond:
2370   10DA FA FA FF      lea d, [bp + -6] ; $i
2371   10DD 2A            mov b, [d]
2372   10DE             ; START RELATIONAL
2373   10DE D7            push a
2374   10DF 11            mov a, b
2375   10E0 26 00 00      mov b, $0
2376   10E3 B0            cmp a, b
2377   10E4 FD 7F         sgt ; >
2378   10E6 E4            pop a
2379   10E7             ; END RELATIONAL
2380   10E7 C0 00 00      cmp b, 0
2381   10EA C6 13 11      je _while34_exit
2382   10ED             _while34_block:
2383   10ED             ;; i--; 
2384   10ED FA FA FF      lea d, [bp + -6] ; $i
2385   10F0 2A            mov b, [d]
2386   10F1 D8            push b
2387   10F2 FD 7D         dec b
2388   10F4 FA FA FF      lea d, [bp + -6] ; $i
2389   10F7 FD 43         mov [d], b
2390   10F9 E5            pop b
2391   10FA             ;; putchar(digits[i]); 
2392   10FA FA FC FF      lea d, [bp + -4] ; $digits
2393   10FD D7            push a
2394   10FE DA            push d
2395   10FF FA FA FF      lea d, [bp + -6] ; $i
2396   1102 2A            mov b, [d]
2397   1103 E7            pop d
2398   1104 5A            add d, b
2399   1105 E4            pop a
2400   1106 32            mov bl, [d]
2401   1107 A7 00         mov bh, 0
2402   1109 DD            push bl
2403   110A 07 1E 11      call putchar
2404   110D 51 01 00      add sp, 1
2405   1110 0A DA 10      jmp _while34_cond
2406   1113             _while34_exit:
2407   1113 F9            leave
2408   1114 09            ret
2409   1115             
2410   1115             date:
2411   1115 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2412   1118             
2413   1118             ; --- BEGIN INLINE ASM BLOCK
2414   1118 19 00         mov al, 0 
2415   111A 05 07         syscall sys_datetime
2416   111C             ; --- END INLINE ASM BLOCK
2417   111C             
2418   111C F9            leave
2419   111D 09            ret
2420   111E             
2421   111E             putchar:
2422   111E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2423   1121             
2424   1121             ; --- BEGIN INLINE ASM BLOCK
2425   1121 FA 05 00      lea d, [bp + 5] ; $c
2426   1124 1E            mov al, [d]
2427   1125 23            mov ah, al
2428   1126 07 FF 12      call _putchar
2429   1129             ; --- END INLINE ASM BLOCK
2430   1129             
2431   1129 F9            leave
2432   112A 09            ret
2433   112B             
2434   112B             getchar:
2435   112B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2436   112E             ; $c 
2437   112E 52 01 00      sub sp, 1
2438   1131             
2439   1131             ; --- BEGIN INLINE ASM BLOCK
2440   1131 07 F8 12      call getch
2441   1134 1A            mov al, ah
2442   1135 FA 00 00      lea d, [bp + 0] ; $c
2443   1138 3E            mov [d], al
2444   1139             ; --- END INLINE ASM BLOCK
2445   1139             
2446   1139             ;; return c; 
2447   1139 FA 00 00      lea d, [bp + 0] ; $c
2448   113C 32            mov bl, [d]
2449   113D A7 00         mov bh, 0
2450   113F F9            leave
2451   1140 09            ret
2452   1141             
2453   1141             scann:
2454   1141 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2455   1144             ; $m 
2456   1144 52 02 00      sub sp, 2
2457   1147             
2458   1147             ; --- BEGIN INLINE ASM BLOCK
2459   1147 07 43 15      call scan_u16d
2460   114A FA FF FF      lea d, [bp + -1] ; $m
2461   114D 43            mov [d], a
2462   114E             ; --- END INLINE ASM BLOCK
2463   114E             
2464   114E             ;; return m; 
2465   114E FA FF FF      lea d, [bp + -1] ; $m
2466   1151 2A            mov b, [d]
2467   1152 F9            leave
2468   1153 09            ret
2469   1154             
2470   1154             puts:
2471   1154 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2472   1157             
2473   1157             ; --- BEGIN INLINE ASM BLOCK
2474   1157 FA 05 00      lea d, [bp + 5] ; $s
2475   115A 15            mov a, [d]
2476   115B 3C            mov d, a
2477   115C 07 49 14      call _puts
2478   115F 10 00 0A      mov a, $0A00
2479   1162 05 03         syscall sys_io
2480   1164             ; --- END INLINE ASM BLOCK
2481   1164             
2482   1164 F9            leave
2483   1165 09            ret
2484   1166             
2485   1166             print:
2486   1166 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2487   1169             
2488   1169             ; --- BEGIN INLINE ASM BLOCK
2489   1169 FA 05 00      lea d, [bp + 5] ; $s
2490   116C FD 2A         mov d, [d]
2491   116E 07 49 14      call _puts
2492   1171             ; --- END INLINE ASM BLOCK
2493   1171             
2494   1171 F9            leave
2495   1172 09            ret
2496   1173             
2497   1173             loadfile:
2498   1173 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2499   1176             
2500   1176             ; --- BEGIN INLINE ASM BLOCK
2501   1176 FA 07 00      lea d, [bp + 7] ; $destination
2502   1179 15            mov a, [d]
2503   117A 4F            mov di, a
2504   117B FA 05 00      lea d, [bp + 5] ; $filename
2505   117E FD 2A         mov d, [d]
2506   1180 19 14         mov al, 20
2507   1182 05 04         syscall sys_filesystem
2508   1184             ; --- END INLINE ASM BLOCK
2509   1184             
2510   1184 F9            leave
2511   1185 09            ret
2512   1186             
2513   1186             create_file:
2514   1186 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2515   1189 F9            leave
2516   118A 09            ret
2517   118B             
2518   118B             delete_file:
2519   118B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2520   118E             
2521   118E             ; --- BEGIN INLINE ASM BLOCK
2522   118E FA 05 00      lea d, [bp + 5] ; $filename
2523   1191 19 0A         mov al, 10
2524   1193 05 04         syscall sys_filesystem
2525   1195             ; --- END INLINE ASM BLOCK
2526   1195             
2527   1195 F9            leave
2528   1196 09            ret
2529   1197             
2530   1197             fopen:
2531   1197 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2532   119A F9            leave
2533   119B 09            ret
2534   119C             
2535   119C             fclose:
2536   119C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2537   119F F9            leave
2538   11A0 09            ret
2539   11A1             
2540   11A1             load_hex:
2541   11A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2542   11A4             ; $temp 
2543   11A4 52 02 00      sub sp, 2
2544   11A7             ;; temp = alloc(32768); 
2545   11A7 FA FF FF      lea d, [bp + -1] ; $temp
2546   11AA DA            push d
2547   11AB 26 00 80      mov b, $8000
2548   11AE FD AB         swp b
2549   11B0 D8            push b
2550   11B1 07 77 08      call alloc
2551   11B4 51 02 00      add sp, 2
2552   11B7 E7            pop d
2553   11B8 FD 43         mov [d], b
2554   11BA             
2555   11BA             ; --- BEGIN INLINE ASM BLOCK
2556   11BA               
2557   11BA               
2558   11BA               
2559   11BA               
2560   11BA               
2561   11BA             _load_hex:
2562   11BA D7            push a
2563   11BB D8            push b
2564   11BC DA            push d
2565   11BD E2            push si
2566   11BE E3            push di
2567   11BF 52 00 80      sub sp, $8000      
2568   11C2 38 00 00      mov c, 0
2569   11C5 48            mov a, sp
2570   11C6 77            inc a
2571   11C7 3C            mov d, a          
2572   11C8 07 06 13      call _gets        
2573   11CB 4D            mov si, a
2574   11CC             __load_hex_loop:
2575   11CC F6            lodsb             
2576   11CD B9 00         cmp al, 0         
2577   11CF C6 DD 11      jz __load_hex_ret
2578   11D2 36            mov bh, al
2579   11D3 F6            lodsb
2580   11D4 2F            mov bl, al
2581   11D5 07 BC 12      call _atoi        
2582   11D8 F7            stosb             
2583   11D9 78            inc c
2584   11DA 0A CC 11      jmp __load_hex_loop
2585   11DD             __load_hex_ret:
2586   11DD 51 00 80      add sp, $8000
2587   11E0 F0            pop di
2588   11E1 EF            pop si
2589   11E2 E7            pop d
2590   11E3 E5            pop b
2591   11E4 E4            pop a
2592   11E5             ; --- END INLINE ASM BLOCK
2593   11E5             
2594   11E5 F9            leave
2595   11E6 09            ret
2596   11E7             
2597   11E7             getparam:
2598   11E7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2599   11EA             ; $data 
2600   11EA 52 01 00      sub sp, 1
2601   11ED             
2602   11ED             ; --- BEGIN INLINE ASM BLOCK
2603   11ED 19 04         mov al, 4
2604   11EF FA 05 00      lea d, [bp + 5] ; $address
2605   11F2 FD 2A         mov d, [d]
2606   11F4 05 0C         syscall sys_system
2607   11F6 FA 00 00      lea d, [bp + 0] ; $data
2608   11F9 FD 3E         mov [d], bl
2609   11FB             ; --- END INLINE ASM BLOCK
2610   11FB             
2611   11FB             ;; return data; 
2612   11FB FA 00 00      lea d, [bp + 0] ; $data
2613   11FE 32            mov bl, [d]
2614   11FF A7 00         mov bh, 0
2615   1201 F9            leave
2616   1202 09            ret
2617   1203             
2618   1203             clear:
2619   1203 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2620   1206             ;; print("\033[2J\033[H"); 
2621   1206 26 B5 25      mov b, __s3 ; "\033[2J\033[H"
2622   1209 FD AB         swp b
2623   120B D8            push b
2624   120C 07 66 11      call print
2625   120F 51 02 00      add sp, 2
2626   1212 F9            leave
2627   1213 09            ret
2628   1214             
2629   1214             include_stdio_asm:
2630   1214 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2631   1217             
2632   1217             ; --- BEGIN INLINE ASM BLOCK
2633   1217             .include "lib/asm/stdio.asm"
0001+  1217             ;-----------------------------------------------------------------------------
0002+  1217             ; stdio.s
0003+  1217             ;-----------------------------------------------------------------------------
0004+  1217             .include "lib/asm/string.asm"
0001++ 1217             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1217             ; string.s
0003++ 1217             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1217             
0005++ 1217             
0006++ 1217             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1217             ; _strrev
0008++ 1217             ; reverse a string
0009++ 1217             ; D = string address
0010++ 1217             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1217             ; 01234
0012++ 1217             _strrev:
0013++ 1217 4B          	pusha
0014++ 1218 07 5E 12    	call _strlen	; length in C
0015++ 121B 12          	mov a, c
0016++ 121C AF 01 00    	cmp a, 1
0017++ 121F D0 39 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1222 7D          	dec a
0019++ 1223 FD 4E       	mov si, d	; beginning of string
0020++ 1225 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1227 59          	add d, a	; end of string
0022++ 1228 12          	mov a, c
0023++ 1229 FD 9B       	shr a		; divide by 2
0024++ 122B 39          	mov c, a	; C now counts the steps
0025++ 122C             _strrev_L0:
0026++ 122C 32          	mov bl, [d]	; save load right-side char into BL
0027++ 122D F6          	lodsb		; load left-side char into AL; increase SI
0028++ 122E 3E          	mov [d], al	; store left char into right side
0029++ 122F 1B          	mov al, bl
0030++ 1230 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1231 7E          	dec c
0032++ 1232 7F          	dec d
0033++ 1233 C2 00 00    	cmp c, 0
0034++ 1236 C7 2C 12    	jne _strrev_L0
0035++ 1239             _strrev_end:
0036++ 1239 4C          	popa
0037++ 123A 09          	ret
0038++ 123B             	
0039++ 123B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 123B             ; _strchr
0041++ 123B             ; search string in D for char in AL
0042++ 123B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 123B             _strchr:
0044++ 123B             _strchr_L0:
0045++ 123B 32          	mov bl, [d]
0046++ 123C C1 00       	cmp bl, 0
0047++ 123E C6 49 12    	je _strchr_end
0048++ 1241 BA          	cmp al, bl
0049++ 1242 C6 49 12    	je _strchr_end
0050++ 1245 79          	inc d
0051++ 1246 0A 3B 12    	jmp _strchr_L0
0052++ 1249             _strchr_end:
0053++ 1249 1B          	mov al, bl
0054++ 124A 09          	ret
0055++ 124B             
0056++ 124B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 124B             ; _strstr
0058++ 124B             ; find sub-string
0059++ 124B             ; str1 in SI
0060++ 124B             ; str2 in DI
0061++ 124B             ; SI points to end of source string
0062++ 124B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 124B             _strstr:
0064++ 124B DB          	push al
0065++ 124C DA          	push d
0066++ 124D E3          	push di
0067++ 124E             _strstr_loop:
0068++ 124E F3          	cmpsb					; compare a byte of the strings
0069++ 124F C7 5A 12    	jne _strstr_ret
0070++ 1252 FC 00 00    	lea d, [di + 0]
0071++ 1255 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1257 C7 4E 12    	jne _strstr_loop				; equal chars but not at end
0073++ 125A             _strstr_ret:
0074++ 125A F0          	pop di
0075++ 125B E7          	pop d
0076++ 125C E8          	pop al
0077++ 125D 09          	ret
0078++ 125E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 125E             ; length of null terminated string
0080++ 125E             ; result in C
0081++ 125E             ; pointer in D
0082++ 125E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 125E             _strlen:
0084++ 125E DA          	push d
0085++ 125F 38 00 00    	mov c, 0
0086++ 1262             _strlen_L1:
0087++ 1262 BD 00       	cmp byte [d], 0
0088++ 1264 C6 6C 12    	je _strlen_ret
0089++ 1267 79          	inc d
0090++ 1268 78          	inc c
0091++ 1269 0A 62 12    	jmp _strlen_L1
0092++ 126C             _strlen_ret:
0093++ 126C E7          	pop d
0094++ 126D 09          	ret
0095++ 126E             
0096++ 126E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 126E             ; STRCMP
0098++ 126E             ; compare two strings
0099++ 126E             ; str1 in SI
0100++ 126E             ; str2 in DI
0101++ 126E             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 126E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 126E             _strcmp:
0104++ 126E DB          	push al
0105++ 126F DA          	push d
0106++ 1270 E3          	push di
0107++ 1271 E2          	push si
0108++ 1272             _strcmp_loop:
0109++ 1272 F3          	cmpsb					; compare a byte of the strings
0110++ 1273 C7 7E 12    	jne _strcmp_ret
0111++ 1276 FB FF FF    	lea d, [si +- 1]
0112++ 1279 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 127B C7 72 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 127E             _strcmp_ret:
0115++ 127E EF          	pop si
0116++ 127F F0          	pop di
0117++ 1280 E7          	pop d
0118++ 1281 E8          	pop al
0119++ 1282 09          	ret
0120++ 1283             
0121++ 1283             
0122++ 1283             ; STRCPY
0123++ 1283             ; copy null terminated string from SI to DI
0124++ 1283             ; source in SI
0125++ 1283             ; destination in DI
0126++ 1283             _strcpy:
0127++ 1283 E2          	push si
0128++ 1284 E3          	push di
0129++ 1285 DB          	push al
0130++ 1286             _strcpy_L1:
0131++ 1286 F6          	lodsb
0132++ 1287 F7          	stosb
0133++ 1288 B9 00       	cmp al, 0
0134++ 128A C7 86 12    	jne _strcpy_L1
0135++ 128D             _strcpy_end:
0136++ 128D E8          	pop al
0137++ 128E F0          	pop di
0138++ 128F EF          	pop si
0139++ 1290 09          	ret
0140++ 1291             
0141++ 1291             ; STRCAT
0142++ 1291             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1291             ; source in SI
0144++ 1291             ; destination in DI
0145++ 1291             _strcat:
0146++ 1291 E2          	push si
0147++ 1292 E3          	push di
0148++ 1293 D7          	push a
0149++ 1294 DA          	push d
0150++ 1295 50          	mov a, di
0151++ 1296 3C          	mov d, a
0152++ 1297             _strcat_goto_end_L1:
0153++ 1297 BD 00       	cmp byte[d], 0
0154++ 1299 C6 A0 12    	je _strcat_start
0155++ 129C 79          	inc d
0156++ 129D 0A 97 12    	jmp _strcat_goto_end_L1
0157++ 12A0             _strcat_start:
0158++ 12A0 FD 50       	mov di, d
0159++ 12A2             _strcat_L1:
0160++ 12A2 F6          	lodsb
0161++ 12A3 F7          	stosb
0162++ 12A4 B9 00       	cmp al, 0
0163++ 12A6 C7 A2 12    	jne _strcat_L1
0164++ 12A9             _strcat_end:
0165++ 12A9 E7          	pop d
0166++ 12AA E4          	pop a
0167++ 12AB F0          	pop di
0168++ 12AC EF          	pop si
0169++ 12AD 09          	ret
0170++ 12AE             
0171++ 12AE             
0005+  12AE             
0006+  12AE             ;-----------------------------------------------------------------------------
0007+  12AE             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  12AE             ; ASCII in BL
0009+  12AE             ; result in AL
0010+  12AE             ; ascii for F = 0100 0110
0011+  12AE             ; ascii for 9 = 0011 1001
0012+  12AE             ;-----------------------------------------------------------------------------
0013+  12AE             hex_ascii_encode:
0014+  12AE 1B            mov al, bl
0015+  12AF 93 40         test al, $40        ; test if letter or number
0016+  12B1 C7 B7 12      jnz hex_letter
0017+  12B4 87 0F         and al, $0F        ; get number
0018+  12B6 09            ret
0019+  12B7             hex_letter:
0020+  12B7 87 0F         and al, $0F        ; get letter
0021+  12B9 6A 09         add al, 9
0022+  12BB 09            ret
0023+  12BC             
0024+  12BC             ;-----------------------------------------------------------------------------
0025+  12BC             ; ATOI
0026+  12BC             ; 2 letter hex string in B
0027+  12BC             ; 8bit integer returned in AL
0028+  12BC             ;-----------------------------------------------------------------------------
0029+  12BC             _atoi:
0030+  12BC D8            push b
0031+  12BD 07 AE 12      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  12C0 30            mov bl, bh
0033+  12C1 DB            push al          ; save a
0034+  12C2 07 AE 12      call hex_ascii_encode
0035+  12C5 EA            pop bl  
0036+  12C6 FD 9E 04      shl al, 4
0037+  12C9 8C            or al, bl
0038+  12CA E5            pop b
0039+  12CB 09            ret  
0040+  12CC             
0041+  12CC             ;-----------------------------------------------------------------------------
0042+  12CC             ; scanf
0043+  12CC             ; no need for explanations!
0044+  12CC             ;-----------------------------------------------------------------------------
0045+  12CC             scanf:
0046+  12CC 09            ret
0047+  12CD             
0048+  12CD             ;-----------------------------------------------------------------------------
0049+  12CD             ; ITOA
0050+  12CD             ; 8bit value in BL
0051+  12CD             ; 2 byte ASCII result in A
0052+  12CD             ;-----------------------------------------------------------------------------
0053+  12CD             _itoa:
0054+  12CD DA            push d
0055+  12CE D8            push b
0056+  12CF A7 00         mov bh, 0
0057+  12D1 FD A4 04      shr bl, 4  
0058+  12D4 74            mov d, b
0059+  12D5 1F 7D 15      mov al, [d + s_hex_digits]
0060+  12D8 23            mov ah, al
0061+  12D9               
0062+  12D9 E5            pop b
0063+  12DA D8            push b
0064+  12DB A7 00         mov bh, 0
0065+  12DD FD 87 0F      and bl, $0F
0066+  12E0 74            mov d, b
0067+  12E1 1F 7D 15      mov al, [d + s_hex_digits]
0068+  12E4 E5            pop b
0069+  12E5 E7            pop d
0070+  12E6 09            ret
0071+  12E7             
0072+  12E7             ;-----------------------------------------------------------------------------
0073+  12E7             ; HEX STRING TO BINARY
0074+  12E7             ; di = destination address
0075+  12E7             ; si = source
0076+  12E7             ;-----------------------------------------------------------------------------
0077+  12E7             _hex_to_int:
0078+  12E7             _hex_to_int_L1:
0079+  12E7 F6            lodsb          ; load from [SI] to AL
0080+  12E8 B9 00         cmp al, 0        ; check if ASCII 0
0081+  12EA C6 F7 12      jz _hex_to_int_ret
0082+  12ED 36            mov bh, al
0083+  12EE F6            lodsb
0084+  12EF 2F            mov bl, al
0085+  12F0 07 BC 12      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  12F3 F7            stosb          ; store AL to [DI]
0087+  12F4 0A E7 12      jmp _hex_to_int_L1
0088+  12F7             _hex_to_int_ret:
0089+  12F7 09            ret    
0090+  12F8             
0091+  12F8             ;-----------------------------------------------------------------------------
0092+  12F8             ; GETCHAR
0093+  12F8             ; char in ah
0094+  12F8             ;-----------------------------------------------------------------------------
0095+  12F8             getch:
0096+  12F8 DB            push al
0097+  12F9             getch_retry:
0098+  12F9 19 01         mov al, 1
0099+  12FB 05 03         syscall sys_io      ; receive in AH
0100+  12FD E8            pop al
0101+  12FE 09            ret
0102+  12FF             
0103+  12FF             ;-----------------------------------------------------------------------------
0104+  12FF             ; PUTCHAR
0105+  12FF             ; char in ah
0106+  12FF             ;-----------------------------------------------------------------------------
0107+  12FF             _putchar:
0108+  12FF D7            push a
0109+  1300 19 00         mov al, 0
0110+  1302 05 03         syscall sys_io      ; char in AH
0111+  1304 E4            pop a
0112+  1305 09            ret
0113+  1306             
0114+  1306             ;-----------------------------------------------------------------------------
0115+  1306             ;; INPUT A STRING
0116+  1306             ;; terminates with null
0117+  1306             ;; pointer in D
0118+  1306             ;-----------------------------------------------------------------------------
0119+  1306             _gets:
0120+  1306 D7            push a
0121+  1307 DA            push d
0122+  1308             _gets_loop:
0123+  1308 19 01         mov al, 1
0124+  130A 05 03         syscall sys_io      ; receive in AH
0125+  130C B9 00         cmp al, 0        ; check error code (AL)
0126+  130E C6 08 13      je _gets_loop      ; if no char received, retry
0127+  1311             
0128+  1311 76 1B         cmp ah, 27
0129+  1313 C6 34 13      je _gets_ansi_esc
0130+  1316 76 0A         cmp ah, $0A        ; LF
0131+  1318 C6 9F 13      je _gets_end
0132+  131B 76 0D         cmp ah, $0D        ; CR
0133+  131D C6 9F 13      je _gets_end
0134+  1320 76 5C         cmp ah, $5C        ; '\\'
0135+  1322 C6 60 13      je _gets_escape
0136+  1325               
0137+  1325 76 08         cmp ah, $08      ; check for backspace
0138+  1327 C6 30 13      je _gets_backspace
0139+  132A             
0140+  132A 1A            mov al, ah
0141+  132B 3E            mov [d], al
0142+  132C 79            inc d
0143+  132D 0A 08 13      jmp _gets_loop
0144+  1330             _gets_backspace:
0145+  1330 7F            dec d
0146+  1331 0A 08 13      jmp _gets_loop
0147+  1334             _gets_ansi_esc:
0148+  1334 19 01         mov al, 1
0149+  1336 05 03         syscall sys_io        ; receive in AH without echo
0150+  1338 B9 00         cmp al, 0          ; check error code (AL)
0151+  133A C6 34 13      je _gets_ansi_esc    ; if no char received, retry
0152+  133D 76 5B         cmp ah, '['
0153+  133F C7 08 13      jne _gets_loop
0154+  1342             _gets_ansi_esc_2:
0155+  1342 19 01         mov al, 1
0156+  1344 05 03         syscall sys_io          ; receive in AH without echo
0157+  1346 B9 00         cmp al, 0            ; check error code (AL)
0158+  1348 C6 42 13      je _gets_ansi_esc_2  ; if no char received, retry
0159+  134B 76 44         cmp ah, 'D'
0160+  134D C6 58 13      je _gets_left_arrow
0161+  1350 76 43         cmp ah, 'C'
0162+  1352 C6 5C 13      je _gets_right_arrow
0163+  1355 0A 08 13      jmp _gets_loop
0164+  1358             _gets_left_arrow:
0165+  1358 7F            dec d
0166+  1359 0A 08 13      jmp _gets_loop
0167+  135C             _gets_right_arrow:
0168+  135C 79            inc d
0169+  135D 0A 08 13      jmp _gets_loop
0170+  1360             _gets_escape:
0171+  1360 19 01         mov al, 1
0172+  1362 05 03         syscall sys_io      ; receive in AH
0173+  1364 B9 00         cmp al, 0        ; check error code (AL)
0174+  1366 C6 60 13      je _gets_escape      ; if no char received, retry
0175+  1369 76 6E         cmp ah, 'n'
0176+  136B C6 8A 13      je _gets_LF
0177+  136E 76 72         cmp ah, 'r'
0178+  1370 C6 91 13      je _gets_CR
0179+  1373 76 30         cmp ah, '0'
0180+  1375 C6 98 13      je _gets_NULL
0181+  1378 76 5C         cmp ah, $5C  ; '\'
0182+  137A C6 83 13      je _gets_slash
0183+  137D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  137E 3E            mov [d], al
0185+  137F 79            inc d
0186+  1380 0A 08 13      jmp _gets_loop
0187+  1383             _gets_slash:
0188+  1383 19 5C         mov al, $5C
0189+  1385 3E            mov [d], al
0190+  1386 79            inc d
0191+  1387 0A 08 13      jmp _gets_loop
0192+  138A             _gets_LF:
0193+  138A 19 0A         mov al, $0A
0194+  138C 3E            mov [d], al
0195+  138D 79            inc d
0196+  138E 0A 08 13      jmp _gets_loop
0197+  1391             _gets_CR:
0198+  1391 19 0D         mov al, $0D
0199+  1393 3E            mov [d], al
0200+  1394 79            inc d
0201+  1395 0A 08 13      jmp _gets_loop
0202+  1398             _gets_NULL:
0203+  1398 19 00         mov al, $00
0204+  139A 3E            mov [d], al
0205+  139B 79            inc d
0206+  139C 0A 08 13      jmp _gets_loop
0207+  139F             _gets_end:
0208+  139F 19 00         mov al, 0
0209+  13A1 3E            mov [d], al        ; terminate string
0210+  13A2 E7            pop d
0211+  13A3 E4            pop a
0212+  13A4 09            ret
0213+  13A5             
0214+  13A5             ;-----------------------------------------------------------------------------
0215+  13A5             ;; INPUT TEXT
0216+  13A5             ;; terminated with CTRL+D
0217+  13A5             ;; pointer in D
0218+  13A5             ;-----------------------------------------------------------------------------
0219+  13A5             _gettxt:
0220+  13A5 D7            push a
0221+  13A6 DA            push d
0222+  13A7             _gettxt_loop:
0223+  13A7 19 01         mov al, 1
0224+  13A9 05 03         syscall sys_io      ; receive in AH
0225+  13AB B9 00         cmp al, 0        ; check error code (AL)
0226+  13AD C6 A7 13      je _gettxt_loop    ; if no char received, retry
0227+  13B0 76 04         cmp ah, 4      ; EOT
0228+  13B2 C6 F0 13      je _gettxt_end
0229+  13B5 76 08         cmp ah, $08      ; check for backspace
0230+  13B7 C6 EC 13      je _gettxt_backspace
0231+  13BA 76 5C         cmp ah, $5C        ; '\'
0232+  13BC C6 C5 13      je _gettxt_escape
0233+  13BF 1A            mov al, ah
0234+  13C0 3E            mov [d], al
0235+  13C1 79            inc d
0236+  13C2 0A A7 13      jmp _gettxt_loop
0237+  13C5             _gettxt_escape:
0238+  13C5 19 01         mov al, 1
0239+  13C7 05 03         syscall sys_io      ; receive in AH
0240+  13C9 B9 00         cmp al, 0        ; check error code (AL)
0241+  13CB C6 C5 13      je _gettxt_escape    ; if no char received, retry
0242+  13CE 76 6E         cmp ah, 'n'
0243+  13D0 C6 DE 13      je _gettxt_LF
0244+  13D3 76 72         cmp ah, 'r'
0245+  13D5 C6 E5 13      je _gettxt_CR
0246+  13D8 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  13D9 3E            mov [d], al
0248+  13DA 79            inc d
0249+  13DB 0A A7 13      jmp _gettxt_loop
0250+  13DE             _gettxt_LF:
0251+  13DE 19 0A         mov al, $0A
0252+  13E0 3E            mov [d], al
0253+  13E1 79            inc d
0254+  13E2 0A A7 13      jmp _gettxt_loop
0255+  13E5             _gettxt_CR:
0256+  13E5 19 0D         mov al, $0D
0257+  13E7 3E            mov [d], al
0258+  13E8 79            inc d
0259+  13E9 0A A7 13      jmp _gettxt_loop
0260+  13EC             _gettxt_backspace:
0261+  13EC 7F            dec d
0262+  13ED 0A A7 13      jmp _gettxt_loop
0263+  13F0             _gettxt_end:
0264+  13F0 19 00         mov al, 0
0265+  13F2 3E            mov [d], al        ; terminate string
0266+  13F3 E7            pop d
0267+  13F4 E4            pop a
0268+  13F5 09            ret
0269+  13F6             
0270+  13F6             ;-----------------------------------------------------------------------------
0271+  13F6             ; PRINT NEW LINE
0272+  13F6             ;-----------------------------------------------------------------------------
0273+  13F6             printnl:
0274+  13F6 D7            push a
0275+  13F7 10 00 0A      mov a, $0A00
0276+  13FA 05 03         syscall sys_io
0277+  13FC 10 00 0D      mov a, $0D00
0278+  13FF 05 03         syscall sys_io
0279+  1401 E4            pop a
0280+  1402 09            ret
0281+  1403             
0282+  1403             ;-----------------------------------------------------------------------------
0283+  1403             ; _strtoint
0284+  1403             ; 4 digit hex string number in d
0285+  1403             ; integer returned in A
0286+  1403             ;-----------------------------------------------------------------------------
0287+  1403             _strtointx:
0288+  1403 D8            push b
0289+  1404 32            mov bl, [d]
0290+  1405 37            mov bh, bl
0291+  1406 33 01 00      mov bl, [d + 1]
0292+  1409 07 BC 12      call _atoi        ; convert to int in AL
0293+  140C 23            mov ah, al        ; move to AH
0294+  140D 33 02 00      mov bl, [d + 2]
0295+  1410 37            mov bh, bl
0296+  1411 33 03 00      mov bl, [d + 3]
0297+  1414 07 BC 12      call _atoi        ; convert to int in AL
0298+  1417 E5            pop b
0299+  1418 09            ret
0300+  1419             
0301+  1419             ;-----------------------------------------------------------------------------
0302+  1419             ; _strtoint
0303+  1419             ; 5 digit base10 string number in d
0304+  1419             ; integer returned in A
0305+  1419             ;-----------------------------------------------------------------------------
0306+  1419             _strtoint:
0307+  1419 E2            push si
0308+  141A D8            push b
0309+  141B D9            push c
0310+  141C DA            push d
0311+  141D 07 5E 12      call _strlen      ; get string length in C
0312+  1420 7E            dec c
0313+  1421 FD 4E         mov si, d
0314+  1423 12            mov a, c
0315+  1424 FD 99         shl a
0316+  1426 3B 95 15      mov d, table_power
0317+  1429 59            add d, a
0318+  142A 38 00 00      mov c, 0
0319+  142D             _strtoint_L0:
0320+  142D F6            lodsb      ; load ASCII to al
0321+  142E B9 00         cmp al, 0
0322+  1430 C6 43 14      je _strtoint_end
0323+  1433 6F 30         sub al, $30    ; make into integer
0324+  1435 22 00         mov ah, 0
0325+  1437 2A            mov b, [d]
0326+  1438 AC            mul a, b      ; result in B since it fits in 16bits
0327+  1439 11            mov a, b
0328+  143A 28            mov b, c
0329+  143B 54            add a, b
0330+  143C 39            mov c, a
0331+  143D 63 02 00      sub d, 2
0332+  1440 0A 2D 14      jmp _strtoint_L0
0333+  1443             _strtoint_end:
0334+  1443 12            mov a, c
0335+  1444 E7            pop d
0336+  1445 E6            pop c
0337+  1446 E5            pop b
0338+  1447 EF            pop si
0339+  1448 09            ret
0340+  1449             
0341+  1449             ;-----------------------------------------------------------------------------
0342+  1449             ; PRINT NULL TERMINATED STRING
0343+  1449             ; pointer in D
0344+  1449             ;-----------------------------------------------------------------------------
0345+  1449             _puts:
0346+  1449 D7            push a
0347+  144A DA            push d
0348+  144B             _puts_L1:
0349+  144B 1E            mov al, [d]
0350+  144C B9 00         cmp al, 0
0351+  144E C6 5A 14      jz _puts_END
0352+  1451 23            mov ah, al
0353+  1452 19 00         mov al, 0
0354+  1454 05 03         syscall sys_io
0355+  1456 79            inc d
0356+  1457 0A 4B 14      jmp _puts_L1
0357+  145A             _puts_END:
0358+  145A E7            pop d
0359+  145B E4            pop a
0360+  145C 09            ret
0361+  145D             
0362+  145D             ;-----------------------------------------------------------------------------
0363+  145D             ; PRINT N SIZE STRING
0364+  145D             ; pointer in D
0365+  145D             ; size in C
0366+  145D             ;-----------------------------------------------------------------------------
0367+  145D             _putsn:
0368+  145D DB            push al
0369+  145E DA            push d
0370+  145F D9            push c
0371+  1460             _putsn_L0:
0372+  1460 1E            mov al, [d]
0373+  1461 23            mov ah, al
0374+  1462 19 00         mov al, 0
0375+  1464 05 03         syscall sys_io
0376+  1466 79            inc d
0377+  1467 7E            dec c  
0378+  1468 C2 00 00      cmp c, 0
0379+  146B C7 60 14      jne _putsn_L0
0380+  146E             _putsn_end:
0381+  146E E6            pop c
0382+  146F E7            pop d
0383+  1470 E8            pop al
0384+  1471 09            ret
0385+  1472             
0386+  1472             ;-----------------------------------------------------------------------------
0387+  1472             ; print 16bit decimal number
0388+  1472             ; input number in A
0389+  1472             ;-----------------------------------------------------------------------------
0390+  1472             print_u16d:
0391+  1472 D7            push a
0392+  1473 D8            push b
0393+  1474 26 10 27      mov b, 10000
0394+  1477 AE            div a, b      ; get 10000's coeff.
0395+  1478 07 9A 14      call print_number
0396+  147B 11            mov a, b
0397+  147C 26 E8 03      mov b, 1000
0398+  147F AE            div a, b      ; get 1000's coeff.
0399+  1480 07 9A 14      call print_number
0400+  1483 11            mov a, b
0401+  1484 26 64 00      mov b, 100
0402+  1487 AE            div a, b
0403+  1488 07 9A 14      call print_number
0404+  148B 11            mov a, b
0405+  148C 26 0A 00      mov b, 10
0406+  148F AE            div a, b
0407+  1490 07 9A 14      call print_number
0408+  1493 1B            mov al, bl      ; 1's coeff in bl
0409+  1494 07 9A 14      call print_number
0410+  1497 E5            pop b
0411+  1498 E4            pop a
0412+  1499 09            ret
0413+  149A             
0414+  149A             ;-----------------------------------------------------------------------------
0415+  149A             ; print AL
0416+  149A             ;-----------------------------------------------------------------------------
0417+  149A             print_number:
0418+  149A 6A 30         add al, $30
0419+  149C 23            mov ah, al
0420+  149D 07 FF 12      call _putchar
0421+  14A0 09            ret
0422+  14A1             
0423+  14A1             ;-----------------------------------------------------------------------------
0424+  14A1             ; PRINT 16BIT HEX INTEGER
0425+  14A1             ; integer value in reg B
0426+  14A1             ;-----------------------------------------------------------------------------
0427+  14A1             print_u16x:
0428+  14A1 D7            push a
0429+  14A2 D8            push b
0430+  14A3 DD            push bl
0431+  14A4 30            mov bl, bh
0432+  14A5 07 CD 12      call _itoa        ; convert bh to char in A
0433+  14A8 2F            mov bl, al        ; save al
0434+  14A9 19 00         mov al, 0
0435+  14AB 05 03         syscall sys_io        ; display AH
0436+  14AD 24            mov ah, bl        ; retrieve al
0437+  14AE 19 00         mov al, 0
0438+  14B0 05 03         syscall sys_io        ; display AL
0439+  14B2             
0440+  14B2 EA            pop bl
0441+  14B3 07 CD 12      call _itoa        ; convert bh to char in A
0442+  14B6 2F            mov bl, al        ; save al
0443+  14B7 19 00         mov al, 0
0444+  14B9 05 03         syscall sys_io        ; display AH
0445+  14BB 24            mov ah, bl        ; retrieve al
0446+  14BC 19 00         mov al, 0
0447+  14BE 05 03         syscall sys_io        ; display AL
0448+  14C0             
0449+  14C0 E5            pop b
0450+  14C1 E4            pop a
0451+  14C2 09            ret
0452+  14C3             
0453+  14C3             ;-----------------------------------------------------------------------------
0454+  14C3             ; INPUT 16BIT HEX INTEGER
0455+  14C3             ; read 16bit integer into A
0456+  14C3             ;-----------------------------------------------------------------------------
0457+  14C3             scan_u16x:
0458+  14C3 F8 10 00      enter 16
0459+  14C6 D8            push b
0460+  14C7 DA            push d
0461+  14C8             
0462+  14C8 FA F1 FF      lea d, [bp + -15]
0463+  14CB 07 06 13      call _gets        ; get number
0464+  14CE             
0465+  14CE 32            mov bl, [d]
0466+  14CF 37            mov bh, bl
0467+  14D0 33 01 00      mov bl, [d + 1]
0468+  14D3 07 BC 12      call _atoi        ; convert to int in AL
0469+  14D6 23            mov ah, al        ; move to AH
0470+  14D7             
0471+  14D7 33 02 00      mov bl, [d + 2]
0472+  14DA 37            mov bh, bl
0473+  14DB 33 03 00      mov bl, [d + 3]
0474+  14DE 07 BC 12      call _atoi        ; convert to int in AL
0475+  14E1             
0476+  14E1 E7            pop d
0477+  14E2 E5            pop b
0478+  14E3 F9            leave
0479+  14E4 09            ret
0480+  14E5             
0481+  14E5             ;-----------------------------------------------------------------------------
0482+  14E5             ; PRINT 8bit HEX INTEGER
0483+  14E5             ; integer value in reg bl
0484+  14E5             ;-----------------------------------------------------------------------------
0485+  14E5             print_u8x:
0486+  14E5 D7            push a
0487+  14E6 DD            push bl
0488+  14E7             
0489+  14E7 07 CD 12      call _itoa        ; convert bl to char in A
0490+  14EA 2F            mov bl, al        ; save al
0491+  14EB 19 00         mov al, 0
0492+  14ED 05 03         syscall sys_io        ; display AH
0493+  14EF 24            mov ah, bl        ; retrieve al
0494+  14F0 19 00         mov al, 0
0495+  14F2 05 03         syscall sys_io        ; display AL
0496+  14F4             
0497+  14F4 EA            pop bl
0498+  14F5 E4            pop a
0499+  14F6 09            ret
0500+  14F7             
0501+  14F7             ;-----------------------------------------------------------------------------
0502+  14F7             ; print 8bit decimal unsigned number
0503+  14F7             ; input number in AL
0504+  14F7             ;-----------------------------------------------------------------------------
0505+  14F7             print_u8d:
0506+  14F7 D7            push a
0507+  14F8 D8            push b
0508+  14F9             
0509+  14F9 22 00         mov ah, 0
0510+  14FB 26 64 00      mov b, 100
0511+  14FE AE            div a, b
0512+  14FF D8            push b      ; save remainder
0513+  1500 B9 00         cmp al, 0
0514+  1502 C6 0C 15      je skip100
0515+  1505 6A 30         add al, $30
0516+  1507 23            mov ah, al
0517+  1508 19 00         mov al, 0
0518+  150A 05 03         syscall sys_io  ; print coeff
0519+  150C             skip100:
0520+  150C E4            pop a
0521+  150D 22 00         mov ah, 0
0522+  150F 26 0A 00      mov b, 10
0523+  1512 AE            div a, b
0524+  1513 D8            push b      ; save remainder
0525+  1514 B9 00         cmp al, 0
0526+  1516 C6 20 15      je skip10
0527+  1519 6A 30         add al, $30
0528+  151B 23            mov ah, al
0529+  151C 19 00         mov al, 0
0530+  151E 05 03         syscall sys_io  ; print coeff
0531+  1520             skip10:
0532+  1520 E4            pop a
0533+  1521 1B            mov al, bl
0534+  1522 6A 30         add al, $30
0535+  1524 23            mov ah, al
0536+  1525 19 00         mov al, 0
0537+  1527 05 03         syscall sys_io  ; print coeff
0538+  1529 E5            pop b
0539+  152A E4            pop a
0540+  152B 09            ret
0541+  152C             
0542+  152C             ;-----------------------------------------------------------------------------
0543+  152C             ; INPUT 8BIT HEX INTEGER
0544+  152C             ; read 8bit integer into AL
0545+  152C             ;-----------------------------------------------------------------------------
0546+  152C             scan_u8x:
0547+  152C F8 04 00      enter 4
0548+  152F D8            push b
0549+  1530 DA            push d
0550+  1531             
0551+  1531 FA FD FF      lea d, [bp + -3]
0552+  1534 07 06 13      call _gets        ; get number
0553+  1537             
0554+  1537 32            mov bl, [d]
0555+  1538 37            mov bh, bl
0556+  1539 33 01 00      mov bl, [d + 1]
0557+  153C 07 BC 12      call _atoi        ; convert to int in AL
0558+  153F             
0559+  153F E7            pop d
0560+  1540 E5            pop b
0561+  1541 F9            leave
0562+  1542 09            ret
0563+  1543             
0564+  1543             ;-----------------------------------------------------------------------------
0565+  1543             ; input decimal number
0566+  1543             ; result in A
0567+  1543             ; 655'\0'
0568+  1543             ; low--------high
0569+  1543             ;-----------------------------------------------------------------------------
0570+  1543             scan_u16d:
0571+  1543 F8 08 00      enter 8
0572+  1546 E2            push si
0573+  1547 D8            push b
0574+  1548 D9            push c
0575+  1549 DA            push d
0576+  154A FA F9 FF      lea d, [bp +- 7]
0577+  154D 07 06 13      call _gets
0578+  1550 07 5E 12      call _strlen      ; get string length in C
0579+  1553 7E            dec c
0580+  1554 FD 4E         mov si, d
0581+  1556 12            mov a, c
0582+  1557 FD 99         shl a
0583+  1559 3B 95 15      mov d, table_power
0584+  155C 59            add d, a
0585+  155D 38 00 00      mov c, 0
0586+  1560             mul_loop:
0587+  1560 F6            lodsb      ; load ASCII to al
0588+  1561 B9 00         cmp al, 0
0589+  1563 C6 76 15      je mul_exit
0590+  1566 6F 30         sub al, $30    ; make into integer
0591+  1568 22 00         mov ah, 0
0592+  156A 2A            mov b, [d]
0593+  156B AC            mul a, b      ; result in B since it fits in 16bits
0594+  156C 11            mov a, b
0595+  156D 28            mov b, c
0596+  156E 54            add a, b
0597+  156F 39            mov c, a
0598+  1570 63 02 00      sub d, 2
0599+  1573 0A 60 15      jmp mul_loop
0600+  1576             mul_exit:
0601+  1576 12            mov a, c
0602+  1577 E7            pop d
0603+  1578 E6            pop c
0604+  1579 E5            pop b
0605+  157A EF            pop si
0606+  157B F9            leave
0607+  157C 09            ret
0608+  157D             
0609+  157D 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1581 34 35 36 37 
0609+  1585 38 39 41 42 
0609+  1589 43 44 45 46 
0610+  158D 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1591 1B 5B 48 00 
0611+  1595             
0612+  1595             table_power:
0613+  1595 01 00         .dw 1
0614+  1597 0A 00         .dw 10
0615+  1599 64 00         .dw 100
0616+  159B E8 03         .dw 1000
0617+  159D 10 27         .dw 100002634   159F             ; --- END INLINE ASM BLOCK
2635   159F             
2636   159F F9            leave
2637   15A0 09            ret
2638   15A1             
2639   15A1             test0:
2640   15A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2641   15A4             ; $i 
2642   15A4             ; $pass 
2643   15A4 10 01 00      mov a, $1
2644   15A7 45 FD FF      mov [bp + -3], a
2645   15AA 52 04 00      sub sp, 4
2646   15AD             ;; for (i = 0; i < 5; i++){ 
2647   15AD             _for35_init:
2648   15AD FA FF FF      lea d, [bp + -1] ; $i
2649   15B0 DA            push d
2650   15B1 26 00 00      mov b, $0
2651   15B4 E7            pop d
2652   15B5 FD 43         mov [d], b
2653   15B7             _for35_cond:
2654   15B7 FA FF FF      lea d, [bp + -1] ; $i
2655   15BA 2A            mov b, [d]
2656   15BB             ; START RELATIONAL
2657   15BB D7            push a
2658   15BC 11            mov a, b
2659   15BD 26 05 00      mov b, $5
2660   15C0 B0            cmp a, b
2661   15C1 FD 73         slt ; <= (signed)
2662   15C3 E4            pop a
2663   15C4             ; END RELATIONAL
2664   15C4 C0 00 00      cmp b, 0
2665   15C7 C6 0D 16      je _for35_exit
2666   15CA             _for35_block:
2667   15CA             ;; gca1[i] = 'A' + i; 
2668   15CA 3B D4 24      mov d, _gca1_data ; $gca1
2669   15CD D7            push a
2670   15CE DA            push d
2671   15CF FA FF FF      lea d, [bp + -1] ; $i
2672   15D2 2A            mov b, [d]
2673   15D3 E7            pop d
2674   15D4 5A            add d, b
2675   15D5 E4            pop a
2676   15D6 DA            push d
2677   15D7 26 41 00      mov b, $41
2678   15DA             ; START TERMS
2679   15DA D7            push a
2680   15DB 11            mov a, b
2681   15DC FA FF FF      lea d, [bp + -1] ; $i
2682   15DF 2A            mov b, [d]
2683   15E0 54            add a, b
2684   15E1 27            mov b, a
2685   15E2 E4            pop a
2686   15E3             ; END TERMS
2687   15E3 E7            pop d
2688   15E4 FD 3E         mov [d], bl
2689   15E6             ;; gia1[i] = i; 
2690   15E6 3B D9 24      mov d, _gia1_data ; $gia1
2691   15E9 D7            push a
2692   15EA DA            push d
2693   15EB FA FF FF      lea d, [bp + -1] ; $i
2694   15EE 2A            mov b, [d]
2695   15EF E7            pop d
2696   15F0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2697   15F4 E4            pop a
2698   15F5 DA            push d
2699   15F6 FA FF FF      lea d, [bp + -1] ; $i
2700   15F9 2A            mov b, [d]
2701   15FA E7            pop d
2702   15FB FD 43         mov [d], b
2703   15FD             _for35_update:
2704   15FD FA FF FF      lea d, [bp + -1] ; $i
2705   1600 2A            mov b, [d]
2706   1601 D8            push b
2707   1602 FD 77         inc b
2708   1604 FA FF FF      lea d, [bp + -1] ; $i
2709   1607 FD 43         mov [d], b
2710   1609 E5            pop b
2711   160A 0A B7 15      jmp _for35_cond
2712   160D             _for35_exit:
2713   160D             ;; for (i = 0; i < 5; i++){ 
2714   160D             _for36_init:
2715   160D FA FF FF      lea d, [bp + -1] ; $i
2716   1610 DA            push d
2717   1611 26 00 00      mov b, $0
2718   1614 E7            pop d
2719   1615 FD 43         mov [d], b
2720   1617             _for36_cond:
2721   1617 FA FF FF      lea d, [bp + -1] ; $i
2722   161A 2A            mov b, [d]
2723   161B             ; START RELATIONAL
2724   161B D7            push a
2725   161C 11            mov a, b
2726   161D 26 05 00      mov b, $5
2727   1620 B0            cmp a, b
2728   1621 FD 73         slt ; <= (signed)
2729   1623 E4            pop a
2730   1624             ; END RELATIONAL
2731   1624 C0 00 00      cmp b, 0
2732   1627 C6 A1 16      je _for36_exit
2733   162A             _for36_block:
2734   162A             ;; if(gca1[i] != 'A' + i){ 
2735   162A             _if37_cond:
2736   162A 3B D4 24      mov d, _gca1_data ; $gca1
2737   162D D7            push a
2738   162E DA            push d
2739   162F FA FF FF      lea d, [bp + -1] ; $i
2740   1632 2A            mov b, [d]
2741   1633 E7            pop d
2742   1634 5A            add d, b
2743   1635 E4            pop a
2744   1636 32            mov bl, [d]
2745   1637 A7 00         mov bh, 0
2746   1639             ; START RELATIONAL
2747   1639 D7            push a
2748   163A 11            mov a, b
2749   163B 26 41 00      mov b, $41
2750   163E             ; START TERMS
2751   163E D7            push a
2752   163F 11            mov a, b
2753   1640 FA FF FF      lea d, [bp + -1] ; $i
2754   1643 2A            mov b, [d]
2755   1644 54            add a, b
2756   1645 27            mov b, a
2757   1646 E4            pop a
2758   1647             ; END TERMS
2759   1647 B0            cmp a, b
2760   1648 FD 72         sneq ; !=
2761   164A E4            pop a
2762   164B             ; END RELATIONAL
2763   164B C0 00 00      cmp b, 0
2764   164E C6 61 16      je _if37_exit
2765   1651             _if37_true:
2766   1651             ;; pass = 0; 
2767   1651 FA FD FF      lea d, [bp + -3] ; $pass
2768   1654 DA            push d
2769   1655 26 00 00      mov b, $0
2770   1658 E7            pop d
2771   1659 FD 43         mov [d], b
2772   165B             ;; break; 
2773   165B 0A A1 16      jmp _for36_exit ; for break
2774   165E 0A 61 16      jmp _if37_exit
2775   1661             _if37_exit:
2776   1661             ;; if(gia1[i] != i){ 
2777   1661             _if38_cond:
2778   1661 3B D9 24      mov d, _gia1_data ; $gia1
2779   1664 D7            push a
2780   1665 DA            push d
2781   1666 FA FF FF      lea d, [bp + -1] ; $i
2782   1669 2A            mov b, [d]
2783   166A E7            pop d
2784   166B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2785   166F E4            pop a
2786   1670 2A            mov b, [d]
2787   1671             ; START RELATIONAL
2788   1671 D7            push a
2789   1672 11            mov a, b
2790   1673 FA FF FF      lea d, [bp + -1] ; $i
2791   1676 2A            mov b, [d]
2792   1677 B0            cmp a, b
2793   1678 FD 72         sneq ; !=
2794   167A E4            pop a
2795   167B             ; END RELATIONAL
2796   167B C0 00 00      cmp b, 0
2797   167E C6 91 16      je _if38_exit
2798   1681             _if38_true:
2799   1681             ;; pass = 0; 
2800   1681 FA FD FF      lea d, [bp + -3] ; $pass
2801   1684 DA            push d
2802   1685 26 00 00      mov b, $0
2803   1688 E7            pop d
2804   1689 FD 43         mov [d], b
2805   168B             ;; break; 
2806   168B 0A A1 16      jmp _for36_exit ; for break
2807   168E 0A 91 16      jmp _if38_exit
2808   1691             _if38_exit:
2809   1691             _for36_update:
2810   1691 FA FF FF      lea d, [bp + -1] ; $i
2811   1694 2A            mov b, [d]
2812   1695 D8            push b
2813   1696 FD 77         inc b
2814   1698 FA FF FF      lea d, [bp + -1] ; $i
2815   169B FD 43         mov [d], b
2816   169D E5            pop b
2817   169E 0A 17 16      jmp _for36_cond
2818   16A1             _for36_exit:
2819   16A1             ;; return pass; 
2820   16A1 FA FD FF      lea d, [bp + -3] ; $pass
2821   16A4 2A            mov b, [d]
2822   16A5 F9            leave
2823   16A6 09            ret
2824   16A7             
2825   16A7             test1:
2826   16A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2827   16AA             ; $i 
2828   16AA             ; $j 
2829   16AA             ; $pass 
2830   16AA 10 01 00      mov a, $1
2831   16AD 45 FB FF      mov [bp + -5], a
2832   16B0 52 06 00      sub sp, 6
2833   16B3             ;; for (i = 0; i < 5; i++){ 
2834   16B3             _for39_init:
2835   16B3 FA FF FF      lea d, [bp + -1] ; $i
2836   16B6 DA            push d
2837   16B7 26 00 00      mov b, $0
2838   16BA E7            pop d
2839   16BB FD 43         mov [d], b
2840   16BD             _for39_cond:
2841   16BD FA FF FF      lea d, [bp + -1] ; $i
2842   16C0 2A            mov b, [d]
2843   16C1             ; START RELATIONAL
2844   16C1 D7            push a
2845   16C2 11            mov a, b
2846   16C3 26 05 00      mov b, $5
2847   16C6 B0            cmp a, b
2848   16C7 FD 73         slt ; <= (signed)
2849   16C9 E4            pop a
2850   16CA             ; END RELATIONAL
2851   16CA C0 00 00      cmp b, 0
2852   16CD C6 64 17      je _for39_exit
2853   16D0             _for39_block:
2854   16D0             ;; for (j = 0; j < 5; j++){ 
2855   16D0             _for40_init:
2856   16D0 FA FD FF      lea d, [bp + -3] ; $j
2857   16D3 DA            push d
2858   16D4 26 00 00      mov b, $0
2859   16D7 E7            pop d
2860   16D8 FD 43         mov [d], b
2861   16DA             _for40_cond:
2862   16DA FA FD FF      lea d, [bp + -3] ; $j
2863   16DD 2A            mov b, [d]
2864   16DE             ; START RELATIONAL
2865   16DE D7            push a
2866   16DF 11            mov a, b
2867   16E0 26 05 00      mov b, $5
2868   16E3 B0            cmp a, b
2869   16E4 FD 73         slt ; <= (signed)
2870   16E6 E4            pop a
2871   16E7             ; END RELATIONAL
2872   16E7 C0 00 00      cmp b, 0
2873   16EA C6 54 17      je _for40_exit
2874   16ED             _for40_block:
2875   16ED             ;; gca2[i][j] = 'A' + i + j; 
2876   16ED 3B E3 24      mov d, _gca2_data ; $gca2
2877   16F0 D7            push a
2878   16F1 DA            push d
2879   16F2 FA FF FF      lea d, [bp + -1] ; $i
2880   16F5 2A            mov b, [d]
2881   16F6 E7            pop d
2882   16F7 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
2883   16FB DA            push d
2884   16FC FA FD FF      lea d, [bp + -3] ; $j
2885   16FF 2A            mov b, [d]
2886   1700 E7            pop d
2887   1701 5A            add d, b
2888   1702 E4            pop a
2889   1703 DA            push d
2890   1704 26 41 00      mov b, $41
2891   1707             ; START TERMS
2892   1707 D7            push a
2893   1708 11            mov a, b
2894   1709 FA FF FF      lea d, [bp + -1] ; $i
2895   170C 2A            mov b, [d]
2896   170D 54            add a, b
2897   170E 11            mov a, b
2898   170F FA FD FF      lea d, [bp + -3] ; $j
2899   1712 2A            mov b, [d]
2900   1713 54            add a, b
2901   1714 27            mov b, a
2902   1715 E4            pop a
2903   1716             ; END TERMS
2904   1716 E7            pop d
2905   1717 FD 3E         mov [d], bl
2906   1719             ;; gia2[i][j] = i * j; 
2907   1719 3B FC 24      mov d, _gia2_data ; $gia2
2908   171C D7            push a
2909   171D DA            push d
2910   171E FA FF FF      lea d, [bp + -1] ; $i
2911   1721 2A            mov b, [d]
2912   1722 E7            pop d
2913   1723 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
2914   1727 DA            push d
2915   1728 FA FD FF      lea d, [bp + -3] ; $j
2916   172B 2A            mov b, [d]
2917   172C E7            pop d
2918   172D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2919   1731 E4            pop a
2920   1732 DA            push d
2921   1733 FA FF FF      lea d, [bp + -1] ; $i
2922   1736 2A            mov b, [d]
2923   1737             ; START FACTORS
2924   1737 D7            push a
2925   1738 11            mov a, b
2926   1739 FA FD FF      lea d, [bp + -3] ; $j
2927   173C 2A            mov b, [d]
2928   173D AC            mul a, b ; *
2929   173E 11            mov a, b
2930   173F 27            mov b, a
2931   1740 E4            pop a
2932   1741             ; END FACTORS
2933   1741 E7            pop d
2934   1742 FD 43         mov [d], b
2935   1744             _for40_update:
2936   1744 FA FD FF      lea d, [bp + -3] ; $j
2937   1747 2A            mov b, [d]
2938   1748 D8            push b
2939   1749 FD 77         inc b
2940   174B FA FD FF      lea d, [bp + -3] ; $j
2941   174E FD 43         mov [d], b
2942   1750 E5            pop b
2943   1751 0A DA 16      jmp _for40_cond
2944   1754             _for40_exit:
2945   1754             _for39_update:
2946   1754 FA FF FF      lea d, [bp + -1] ; $i
2947   1757 2A            mov b, [d]
2948   1758 D8            push b
2949   1759 FD 77         inc b
2950   175B FA FF FF      lea d, [bp + -1] ; $i
2951   175E FD 43         mov [d], b
2952   1760 E5            pop b
2953   1761 0A BD 16      jmp _for39_cond
2954   1764             _for39_exit:
2955   1764             ;; for (i = 0; i < 5; i++){ 
2956   1764             _for41_init:
2957   1764 FA FF FF      lea d, [bp + -1] ; $i
2958   1767 DA            push d
2959   1768 26 00 00      mov b, $0
2960   176B E7            pop d
2961   176C FD 43         mov [d], b
2962   176E             _for41_cond:
2963   176E FA FF FF      lea d, [bp + -1] ; $i
2964   1771 2A            mov b, [d]
2965   1772             ; START RELATIONAL
2966   1772 D7            push a
2967   1773 11            mov a, b
2968   1774 26 05 00      mov b, $5
2969   1777 B0            cmp a, b
2970   1778 FD 73         slt ; <= (signed)
2971   177A E4            pop a
2972   177B             ; END RELATIONAL
2973   177B C0 00 00      cmp b, 0
2974   177E C6 49 18      je _for41_exit
2975   1781             _for41_block:
2976   1781             ;; for (j = 0; j < 5; j++){ 
2977   1781             _for42_init:
2978   1781 FA FD FF      lea d, [bp + -3] ; $j
2979   1784 DA            push d
2980   1785 26 00 00      mov b, $0
2981   1788 E7            pop d
2982   1789 FD 43         mov [d], b
2983   178B             _for42_cond:
2984   178B FA FD FF      lea d, [bp + -3] ; $j
2985   178E 2A            mov b, [d]
2986   178F             ; START RELATIONAL
2987   178F D7            push a
2988   1790 11            mov a, b
2989   1791 26 05 00      mov b, $5
2990   1794 B0            cmp a, b
2991   1795 FD 73         slt ; <= (signed)
2992   1797 E4            pop a
2993   1798             ; END RELATIONAL
2994   1798 C0 00 00      cmp b, 0
2995   179B C6 39 18      je _for42_exit
2996   179E             _for42_block:
2997   179E             ;; if(gca2[i][j] != 'A' + i + j){ 
2998   179E             _if43_cond:
2999   179E 3B E3 24      mov d, _gca2_data ; $gca2
3000   17A1 D7            push a
3001   17A2 DA            push d
3002   17A3 FA FF FF      lea d, [bp + -1] ; $i
3003   17A6 2A            mov b, [d]
3004   17A7 E7            pop d
3005   17A8 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
3006   17AC DA            push d
3007   17AD FA FD FF      lea d, [bp + -3] ; $j
3008   17B0 2A            mov b, [d]
3009   17B1 E7            pop d
3010   17B2 5A            add d, b
3011   17B3 E4            pop a
3012   17B4 32            mov bl, [d]
3013   17B5 A7 00         mov bh, 0
3014   17B7             ; START RELATIONAL
3015   17B7 D7            push a
3016   17B8 11            mov a, b
3017   17B9 26 41 00      mov b, $41
3018   17BC             ; START TERMS
3019   17BC D7            push a
3020   17BD 11            mov a, b
3021   17BE FA FF FF      lea d, [bp + -1] ; $i
3022   17C1 2A            mov b, [d]
3023   17C2 54            add a, b
3024   17C3 11            mov a, b
3025   17C4 FA FD FF      lea d, [bp + -3] ; $j
3026   17C7 2A            mov b, [d]
3027   17C8 54            add a, b
3028   17C9 27            mov b, a
3029   17CA E4            pop a
3030   17CB             ; END TERMS
3031   17CB B0            cmp a, b
3032   17CC FD 72         sneq ; !=
3033   17CE E4            pop a
3034   17CF             ; END RELATIONAL
3035   17CF C0 00 00      cmp b, 0
3036   17D2 C6 E5 17      je _if43_exit
3037   17D5             _if43_true:
3038   17D5             ;; pass = 0; 
3039   17D5 FA FB FF      lea d, [bp + -5] ; $pass
3040   17D8 DA            push d
3041   17D9 26 00 00      mov b, $0
3042   17DC E7            pop d
3043   17DD FD 43         mov [d], b
3044   17DF             ;; break; 
3045   17DF 0A 39 18      jmp _for42_exit ; for break
3046   17E2 0A E5 17      jmp _if43_exit
3047   17E5             _if43_exit:
3048   17E5             ;; if(gia2[i][j] != i * j){ 
3049   17E5             _if44_cond:
3050   17E5 3B FC 24      mov d, _gia2_data ; $gia2
3051   17E8 D7            push a
3052   17E9 DA            push d
3053   17EA FA FF FF      lea d, [bp + -1] ; $i
3054   17ED 2A            mov b, [d]
3055   17EE E7            pop d
3056   17EF FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3057   17F3 DA            push d
3058   17F4 FA FD FF      lea d, [bp + -3] ; $j
3059   17F7 2A            mov b, [d]
3060   17F8 E7            pop d
3061   17F9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3062   17FD E4            pop a
3063   17FE 2A            mov b, [d]
3064   17FF             ; START RELATIONAL
3065   17FF D7            push a
3066   1800 11            mov a, b
3067   1801 FA FF FF      lea d, [bp + -1] ; $i
3068   1804 2A            mov b, [d]
3069   1805             ; START FACTORS
3070   1805 D7            push a
3071   1806 11            mov a, b
3072   1807 FA FD FF      lea d, [bp + -3] ; $j
3073   180A 2A            mov b, [d]
3074   180B AC            mul a, b ; *
3075   180C 11            mov a, b
3076   180D 27            mov b, a
3077   180E E4            pop a
3078   180F             ; END FACTORS
3079   180F B0            cmp a, b
3080   1810 FD 72         sneq ; !=
3081   1812 E4            pop a
3082   1813             ; END RELATIONAL
3083   1813 C0 00 00      cmp b, 0
3084   1816 C6 29 18      je _if44_exit
3085   1819             _if44_true:
3086   1819             ;; pass = 0; 
3087   1819 FA FB FF      lea d, [bp + -5] ; $pass
3088   181C DA            push d
3089   181D 26 00 00      mov b, $0
3090   1820 E7            pop d
3091   1821 FD 43         mov [d], b
3092   1823             ;; break; 
3093   1823 0A 39 18      jmp _for42_exit ; for break
3094   1826 0A 29 18      jmp _if44_exit
3095   1829             _if44_exit:
3096   1829             _for42_update:
3097   1829 FA FD FF      lea d, [bp + -3] ; $j
3098   182C 2A            mov b, [d]
3099   182D D8            push b
3100   182E FD 77         inc b
3101   1830 FA FD FF      lea d, [bp + -3] ; $j
3102   1833 FD 43         mov [d], b
3103   1835 E5            pop b
3104   1836 0A 8B 17      jmp _for42_cond
3105   1839             _for42_exit:
3106   1839             _for41_update:
3107   1839 FA FF FF      lea d, [bp + -1] ; $i
3108   183C 2A            mov b, [d]
3109   183D D8            push b
3110   183E FD 77         inc b
3111   1840 FA FF FF      lea d, [bp + -1] ; $i
3112   1843 FD 43         mov [d], b
3113   1845 E5            pop b
3114   1846 0A 6E 17      jmp _for41_cond
3115   1849             _for41_exit:
3116   1849             ;; return pass; 
3117   1849 FA FB FF      lea d, [bp + -5] ; $pass
3118   184C 2A            mov b, [d]
3119   184D F9            leave
3120   184E 09            ret
3121   184F             
3122   184F             test2:
3123   184F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3124   1852             ; $i 
3125   1852             ; $j 
3126   1852             ; $lca 
3127   1852             ; $lia 
3128   1852             ; $pass 
3129   1852 10 01 00      mov a, $1
3130   1855 45 EC FF      mov [bp + -20], a
3131   1858 52 15 00      sub sp, 21
3132   185B             ;; for (i = 0; i < 5; i++){ 
3133   185B             _for45_init:
3134   185B FA FF FF      lea d, [bp + -1] ; $i
3135   185E DA            push d
3136   185F 26 00 00      mov b, $0
3137   1862 E7            pop d
3138   1863 FD 43         mov [d], b
3139   1865             _for45_cond:
3140   1865 FA FF FF      lea d, [bp + -1] ; $i
3141   1868 2A            mov b, [d]
3142   1869             ; START RELATIONAL
3143   1869 D7            push a
3144   186A 11            mov a, b
3145   186B 26 05 00      mov b, $5
3146   186E B0            cmp a, b
3147   186F FD 73         slt ; <= (signed)
3148   1871 E4            pop a
3149   1872             ; END RELATIONAL
3150   1872 C0 00 00      cmp b, 0
3151   1875 C6 CB 18      je _for45_exit
3152   1878             _for45_block:
3153   1878             ;; lca[i] = 'A' + i + j; 
3154   1878 FA F8 FF      lea d, [bp + -8] ; $lca
3155   187B D7            push a
3156   187C DA            push d
3157   187D FA FF FF      lea d, [bp + -1] ; $i
3158   1880 2A            mov b, [d]
3159   1881 E7            pop d
3160   1882 5A            add d, b
3161   1883 E4            pop a
3162   1884 DA            push d
3163   1885 26 41 00      mov b, $41
3164   1888             ; START TERMS
3165   1888 D7            push a
3166   1889 11            mov a, b
3167   188A FA FF FF      lea d, [bp + -1] ; $i
3168   188D 2A            mov b, [d]
3169   188E 54            add a, b
3170   188F 11            mov a, b
3171   1890 FA FD FF      lea d, [bp + -3] ; $j
3172   1893 2A            mov b, [d]
3173   1894 54            add a, b
3174   1895 27            mov b, a
3175   1896 E4            pop a
3176   1897             ; END TERMS
3177   1897 E7            pop d
3178   1898 FD 3E         mov [d], bl
3179   189A             ;; lia[i] = i * j; 
3180   189A FA EE FF      lea d, [bp + -18] ; $lia
3181   189D D7            push a
3182   189E DA            push d
3183   189F FA FF FF      lea d, [bp + -1] ; $i
3184   18A2 2A            mov b, [d]
3185   18A3 E7            pop d
3186   18A4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3187   18A8 E4            pop a
3188   18A9 DA            push d
3189   18AA FA FF FF      lea d, [bp + -1] ; $i
3190   18AD 2A            mov b, [d]
3191   18AE             ; START FACTORS
3192   18AE D7            push a
3193   18AF 11            mov a, b
3194   18B0 FA FD FF      lea d, [bp + -3] ; $j
3195   18B3 2A            mov b, [d]
3196   18B4 AC            mul a, b ; *
3197   18B5 11            mov a, b
3198   18B6 27            mov b, a
3199   18B7 E4            pop a
3200   18B8             ; END FACTORS
3201   18B8 E7            pop d
3202   18B9 FD 43         mov [d], b
3203   18BB             _for45_update:
3204   18BB FA FF FF      lea d, [bp + -1] ; $i
3205   18BE 2A            mov b, [d]
3206   18BF D8            push b
3207   18C0 FD 77         inc b
3208   18C2 FA FF FF      lea d, [bp + -1] ; $i
3209   18C5 FD 43         mov [d], b
3210   18C7 E5            pop b
3211   18C8 0A 65 18      jmp _for45_cond
3212   18CB             _for45_exit:
3213   18CB             ;; for (i = 0; i < 5; i++){ 
3214   18CB             _for46_init:
3215   18CB FA FF FF      lea d, [bp + -1] ; $i
3216   18CE DA            push d
3217   18CF 26 00 00      mov b, $0
3218   18D2 E7            pop d
3219   18D3 FD 43         mov [d], b
3220   18D5             _for46_cond:
3221   18D5 FA FF FF      lea d, [bp + -1] ; $i
3222   18D8 2A            mov b, [d]
3223   18D9             ; START RELATIONAL
3224   18D9 D7            push a
3225   18DA 11            mov a, b
3226   18DB 26 05 00      mov b, $5
3227   18DE B0            cmp a, b
3228   18DF FD 73         slt ; <= (signed)
3229   18E1 E4            pop a
3230   18E2             ; END RELATIONAL
3231   18E2 C0 00 00      cmp b, 0
3232   18E5 C6 6F 19      je _for46_exit
3233   18E8             _for46_block:
3234   18E8             ;; if(lca[i] != 'A' + i + j){ 
3235   18E8             _if47_cond:
3236   18E8 FA F8 FF      lea d, [bp + -8] ; $lca
3237   18EB D7            push a
3238   18EC DA            push d
3239   18ED FA FF FF      lea d, [bp + -1] ; $i
3240   18F0 2A            mov b, [d]
3241   18F1 E7            pop d
3242   18F2 5A            add d, b
3243   18F3 E4            pop a
3244   18F4 32            mov bl, [d]
3245   18F5 A7 00         mov bh, 0
3246   18F7             ; START RELATIONAL
3247   18F7 D7            push a
3248   18F8 11            mov a, b
3249   18F9 26 41 00      mov b, $41
3250   18FC             ; START TERMS
3251   18FC D7            push a
3252   18FD 11            mov a, b
3253   18FE FA FF FF      lea d, [bp + -1] ; $i
3254   1901 2A            mov b, [d]
3255   1902 54            add a, b
3256   1903 11            mov a, b
3257   1904 FA FD FF      lea d, [bp + -3] ; $j
3258   1907 2A            mov b, [d]
3259   1908 54            add a, b
3260   1909 27            mov b, a
3261   190A E4            pop a
3262   190B             ; END TERMS
3263   190B B0            cmp a, b
3264   190C FD 72         sneq ; !=
3265   190E E4            pop a
3266   190F             ; END RELATIONAL
3267   190F C0 00 00      cmp b, 0
3268   1912 C6 25 19      je _if47_exit
3269   1915             _if47_true:
3270   1915             ;; pass = 0; 
3271   1915 FA EC FF      lea d, [bp + -20] ; $pass
3272   1918 DA            push d
3273   1919 26 00 00      mov b, $0
3274   191C E7            pop d
3275   191D FD 43         mov [d], b
3276   191F             ;; break; 
3277   191F 0A 6F 19      jmp _for46_exit ; for break
3278   1922 0A 25 19      jmp _if47_exit
3279   1925             _if47_exit:
3280   1925             ;; if(lia[i] != i * j){ 
3281   1925             _if48_cond:
3282   1925 FA EE FF      lea d, [bp + -18] ; $lia
3283   1928 D7            push a
3284   1929 DA            push d
3285   192A FA FF FF      lea d, [bp + -1] ; $i
3286   192D 2A            mov b, [d]
3287   192E E7            pop d
3288   192F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3289   1933 E4            pop a
3290   1934 2A            mov b, [d]
3291   1935             ; START RELATIONAL
3292   1935 D7            push a
3293   1936 11            mov a, b
3294   1937 FA FF FF      lea d, [bp + -1] ; $i
3295   193A 2A            mov b, [d]
3296   193B             ; START FACTORS
3297   193B D7            push a
3298   193C 11            mov a, b
3299   193D FA FD FF      lea d, [bp + -3] ; $j
3300   1940 2A            mov b, [d]
3301   1941 AC            mul a, b ; *
3302   1942 11            mov a, b
3303   1943 27            mov b, a
3304   1944 E4            pop a
3305   1945             ; END FACTORS
3306   1945 B0            cmp a, b
3307   1946 FD 72         sneq ; !=
3308   1948 E4            pop a
3309   1949             ; END RELATIONAL
3310   1949 C0 00 00      cmp b, 0
3311   194C C6 5F 19      je _if48_exit
3312   194F             _if48_true:
3313   194F             ;; pass = 0; 
3314   194F FA EC FF      lea d, [bp + -20] ; $pass
3315   1952 DA            push d
3316   1953 26 00 00      mov b, $0
3317   1956 E7            pop d
3318   1957 FD 43         mov [d], b
3319   1959             ;; break; 
3320   1959 0A 6F 19      jmp _for46_exit ; for break
3321   195C 0A 5F 19      jmp _if48_exit
3322   195F             _if48_exit:
3323   195F             _for46_update:
3324   195F FA FF FF      lea d, [bp + -1] ; $i
3325   1962 2A            mov b, [d]
3326   1963 D8            push b
3327   1964 FD 77         inc b
3328   1966 FA FF FF      lea d, [bp + -1] ; $i
3329   1969 FD 43         mov [d], b
3330   196B E5            pop b
3331   196C 0A D5 18      jmp _for46_cond
3332   196F             _for46_exit:
3333   196F             ;; return pass; 
3334   196F FA EC FF      lea d, [bp + -20] ; $pass
3335   1972 2A            mov b, [d]
3336   1973 F9            leave
3337   1974 09            ret
3338   1975             
3339   1975             test3:
3340   1975 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3341   1978             ; $i 
3342   1978             ; $j 
3343   1978             ; $lca 
3344   1978             ; $lia 
3345   1978             ; $pass 
3346   1978 10 01 00      mov a, $1
3347   197B 45 B0 FF      mov [bp + -80], a
3348   197E 52 51 00      sub sp, 81
3349   1981             ;; for (i = 0; i < 5; i++){ 
3350   1981             _for49_init:
3351   1981 FA FF FF      lea d, [bp + -1] ; $i
3352   1984 DA            push d
3353   1985 26 00 00      mov b, $0
3354   1988 E7            pop d
3355   1989 FD 43         mov [d], b
3356   198B             _for49_cond:
3357   198B FA FF FF      lea d, [bp + -1] ; $i
3358   198E 2A            mov b, [d]
3359   198F             ; START RELATIONAL
3360   198F D7            push a
3361   1990 11            mov a, b
3362   1991 26 05 00      mov b, $5
3363   1994 B0            cmp a, b
3364   1995 FD 73         slt ; <= (signed)
3365   1997 E4            pop a
3366   1998             ; END RELATIONAL
3367   1998 C0 00 00      cmp b, 0
3368   199B C6 32 1A      je _for49_exit
3369   199E             _for49_block:
3370   199E             ;; for (j = 0; j < 5; j++){ 
3371   199E             _for50_init:
3372   199E FA FD FF      lea d, [bp + -3] ; $j
3373   19A1 DA            push d
3374   19A2 26 00 00      mov b, $0
3375   19A5 E7            pop d
3376   19A6 FD 43         mov [d], b
3377   19A8             _for50_cond:
3378   19A8 FA FD FF      lea d, [bp + -3] ; $j
3379   19AB 2A            mov b, [d]
3380   19AC             ; START RELATIONAL
3381   19AC D7            push a
3382   19AD 11            mov a, b
3383   19AE 26 05 00      mov b, $5
3384   19B1 B0            cmp a, b
3385   19B2 FD 73         slt ; <= (signed)
3386   19B4 E4            pop a
3387   19B5             ; END RELATIONAL
3388   19B5 C0 00 00      cmp b, 0
3389   19B8 C6 22 1A      je _for50_exit
3390   19BB             _for50_block:
3391   19BB             ;; lca[i][j] = 'A' + i + j; 
3392   19BB FA E4 FF      lea d, [bp + -28] ; $lca
3393   19BE D7            push a
3394   19BF DA            push d
3395   19C0 FA FF FF      lea d, [bp + -1] ; $i
3396   19C3 2A            mov b, [d]
3397   19C4 E7            pop d
3398   19C5 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
3399   19C9 DA            push d
3400   19CA FA FD FF      lea d, [bp + -3] ; $j
3401   19CD 2A            mov b, [d]
3402   19CE E7            pop d
3403   19CF 5A            add d, b
3404   19D0 E4            pop a
3405   19D1 DA            push d
3406   19D2 26 41 00      mov b, $41
3407   19D5             ; START TERMS
3408   19D5 D7            push a
3409   19D6 11            mov a, b
3410   19D7 FA FF FF      lea d, [bp + -1] ; $i
3411   19DA 2A            mov b, [d]
3412   19DB 54            add a, b
3413   19DC 11            mov a, b
3414   19DD FA FD FF      lea d, [bp + -3] ; $j
3415   19E0 2A            mov b, [d]
3416   19E1 54            add a, b
3417   19E2 27            mov b, a
3418   19E3 E4            pop a
3419   19E4             ; END TERMS
3420   19E4 E7            pop d
3421   19E5 FD 3E         mov [d], bl
3422   19E7             ;; lia[i][j] = i * j; 
3423   19E7 FA B2 FF      lea d, [bp + -78] ; $lia
3424   19EA D7            push a
3425   19EB DA            push d
3426   19EC FA FF FF      lea d, [bp + -1] ; $i
3427   19EF 2A            mov b, [d]
3428   19F0 E7            pop d
3429   19F1 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3430   19F5 DA            push d
3431   19F6 FA FD FF      lea d, [bp + -3] ; $j
3432   19F9 2A            mov b, [d]
3433   19FA E7            pop d
3434   19FB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3435   19FF E4            pop a
3436   1A00 DA            push d
3437   1A01 FA FF FF      lea d, [bp + -1] ; $i
3438   1A04 2A            mov b, [d]
3439   1A05             ; START FACTORS
3440   1A05 D7            push a
3441   1A06 11            mov a, b
3442   1A07 FA FD FF      lea d, [bp + -3] ; $j
3443   1A0A 2A            mov b, [d]
3444   1A0B AC            mul a, b ; *
3445   1A0C 11            mov a, b
3446   1A0D 27            mov b, a
3447   1A0E E4            pop a
3448   1A0F             ; END FACTORS
3449   1A0F E7            pop d
3450   1A10 FD 43         mov [d], b
3451   1A12             _for50_update:
3452   1A12 FA FD FF      lea d, [bp + -3] ; $j
3453   1A15 2A            mov b, [d]
3454   1A16 D8            push b
3455   1A17 FD 77         inc b
3456   1A19 FA FD FF      lea d, [bp + -3] ; $j
3457   1A1C FD 43         mov [d], b
3458   1A1E E5            pop b
3459   1A1F 0A A8 19      jmp _for50_cond
3460   1A22             _for50_exit:
3461   1A22             _for49_update:
3462   1A22 FA FF FF      lea d, [bp + -1] ; $i
3463   1A25 2A            mov b, [d]
3464   1A26 D8            push b
3465   1A27 FD 77         inc b
3466   1A29 FA FF FF      lea d, [bp + -1] ; $i
3467   1A2C FD 43         mov [d], b
3468   1A2E E5            pop b
3469   1A2F 0A 8B 19      jmp _for49_cond
3470   1A32             _for49_exit:
3471   1A32             ;; for (i = 0; i < 5; i++){ 
3472   1A32             _for51_init:
3473   1A32 FA FF FF      lea d, [bp + -1] ; $i
3474   1A35 DA            push d
3475   1A36 26 00 00      mov b, $0
3476   1A39 E7            pop d
3477   1A3A FD 43         mov [d], b
3478   1A3C             _for51_cond:
3479   1A3C FA FF FF      lea d, [bp + -1] ; $i
3480   1A3F 2A            mov b, [d]
3481   1A40             ; START RELATIONAL
3482   1A40 D7            push a
3483   1A41 11            mov a, b
3484   1A42 26 05 00      mov b, $5
3485   1A45 B0            cmp a, b
3486   1A46 FD 73         slt ; <= (signed)
3487   1A48 E4            pop a
3488   1A49             ; END RELATIONAL
3489   1A49 C0 00 00      cmp b, 0
3490   1A4C C6 17 1B      je _for51_exit
3491   1A4F             _for51_block:
3492   1A4F             ;; for (j = 0; j < 5; j++){ 
3493   1A4F             _for52_init:
3494   1A4F FA FD FF      lea d, [bp + -3] ; $j
3495   1A52 DA            push d
3496   1A53 26 00 00      mov b, $0
3497   1A56 E7            pop d
3498   1A57 FD 43         mov [d], b
3499   1A59             _for52_cond:
3500   1A59 FA FD FF      lea d, [bp + -3] ; $j
3501   1A5C 2A            mov b, [d]
3502   1A5D             ; START RELATIONAL
3503   1A5D D7            push a
3504   1A5E 11            mov a, b
3505   1A5F 26 05 00      mov b, $5
3506   1A62 B0            cmp a, b
3507   1A63 FD 73         slt ; <= (signed)
3508   1A65 E4            pop a
3509   1A66             ; END RELATIONAL
3510   1A66 C0 00 00      cmp b, 0
3511   1A69 C6 07 1B      je _for52_exit
3512   1A6C             _for52_block:
3513   1A6C             ;; if(lca[i][j] != 'A' + i + j){ 
3514   1A6C             _if53_cond:
3515   1A6C FA E4 FF      lea d, [bp + -28] ; $lca
3516   1A6F D7            push a
3517   1A70 DA            push d
3518   1A71 FA FF FF      lea d, [bp + -1] ; $i
3519   1A74 2A            mov b, [d]
3520   1A75 E7            pop d
3521   1A76 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
3522   1A7A DA            push d
3523   1A7B FA FD FF      lea d, [bp + -3] ; $j
3524   1A7E 2A            mov b, [d]
3525   1A7F E7            pop d
3526   1A80 5A            add d, b
3527   1A81 E4            pop a
3528   1A82 32            mov bl, [d]
3529   1A83 A7 00         mov bh, 0
3530   1A85             ; START RELATIONAL
3531   1A85 D7            push a
3532   1A86 11            mov a, b
3533   1A87 26 41 00      mov b, $41
3534   1A8A             ; START TERMS
3535   1A8A D7            push a
3536   1A8B 11            mov a, b
3537   1A8C FA FF FF      lea d, [bp + -1] ; $i
3538   1A8F 2A            mov b, [d]
3539   1A90 54            add a, b
3540   1A91 11            mov a, b
3541   1A92 FA FD FF      lea d, [bp + -3] ; $j
3542   1A95 2A            mov b, [d]
3543   1A96 54            add a, b
3544   1A97 27            mov b, a
3545   1A98 E4            pop a
3546   1A99             ; END TERMS
3547   1A99 B0            cmp a, b
3548   1A9A FD 72         sneq ; !=
3549   1A9C E4            pop a
3550   1A9D             ; END RELATIONAL
3551   1A9D C0 00 00      cmp b, 0
3552   1AA0 C6 B3 1A      je _if53_exit
3553   1AA3             _if53_true:
3554   1AA3             ;; pass = 0; 
3555   1AA3 FA B0 FF      lea d, [bp + -80] ; $pass
3556   1AA6 DA            push d
3557   1AA7 26 00 00      mov b, $0
3558   1AAA E7            pop d
3559   1AAB FD 43         mov [d], b
3560   1AAD             ;; break; 
3561   1AAD 0A 07 1B      jmp _for52_exit ; for break
3562   1AB0 0A B3 1A      jmp _if53_exit
3563   1AB3             _if53_exit:
3564   1AB3             ;; if(lia[i][j] != i * j){ 
3565   1AB3             _if54_cond:
3566   1AB3 FA B2 FF      lea d, [bp + -78] ; $lia
3567   1AB6 D7            push a
3568   1AB7 DA            push d
3569   1AB8 FA FF FF      lea d, [bp + -1] ; $i
3570   1ABB 2A            mov b, [d]
3571   1ABC E7            pop d
3572   1ABD FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3573   1AC1 DA            push d
3574   1AC2 FA FD FF      lea d, [bp + -3] ; $j
3575   1AC5 2A            mov b, [d]
3576   1AC6 E7            pop d
3577   1AC7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3578   1ACB E4            pop a
3579   1ACC 2A            mov b, [d]
3580   1ACD             ; START RELATIONAL
3581   1ACD D7            push a
3582   1ACE 11            mov a, b
3583   1ACF FA FF FF      lea d, [bp + -1] ; $i
3584   1AD2 2A            mov b, [d]
3585   1AD3             ; START FACTORS
3586   1AD3 D7            push a
3587   1AD4 11            mov a, b
3588   1AD5 FA FD FF      lea d, [bp + -3] ; $j
3589   1AD8 2A            mov b, [d]
3590   1AD9 AC            mul a, b ; *
3591   1ADA 11            mov a, b
3592   1ADB 27            mov b, a
3593   1ADC E4            pop a
3594   1ADD             ; END FACTORS
3595   1ADD B0            cmp a, b
3596   1ADE FD 72         sneq ; !=
3597   1AE0 E4            pop a
3598   1AE1             ; END RELATIONAL
3599   1AE1 C0 00 00      cmp b, 0
3600   1AE4 C6 F7 1A      je _if54_exit
3601   1AE7             _if54_true:
3602   1AE7             ;; pass = 0; 
3603   1AE7 FA B0 FF      lea d, [bp + -80] ; $pass
3604   1AEA DA            push d
3605   1AEB 26 00 00      mov b, $0
3606   1AEE E7            pop d
3607   1AEF FD 43         mov [d], b
3608   1AF1             ;; break; 
3609   1AF1 0A 07 1B      jmp _for52_exit ; for break
3610   1AF4 0A F7 1A      jmp _if54_exit
3611   1AF7             _if54_exit:
3612   1AF7             _for52_update:
3613   1AF7 FA FD FF      lea d, [bp + -3] ; $j
3614   1AFA 2A            mov b, [d]
3615   1AFB D8            push b
3616   1AFC FD 77         inc b
3617   1AFE FA FD FF      lea d, [bp + -3] ; $j
3618   1B01 FD 43         mov [d], b
3619   1B03 E5            pop b
3620   1B04 0A 59 1A      jmp _for52_cond
3621   1B07             _for52_exit:
3622   1B07             _for51_update:
3623   1B07 FA FF FF      lea d, [bp + -1] ; $i
3624   1B0A 2A            mov b, [d]
3625   1B0B D8            push b
3626   1B0C FD 77         inc b
3627   1B0E FA FF FF      lea d, [bp + -1] ; $i
3628   1B11 FD 43         mov [d], b
3629   1B13 E5            pop b
3630   1B14 0A 3C 1A      jmp _for51_cond
3631   1B17             _for51_exit:
3632   1B17             ;; return pass; 
3633   1B17 FA B0 FF      lea d, [bp + -80] ; $pass
3634   1B1A 2A            mov b, [d]
3635   1B1B F9            leave
3636   1B1C 09            ret
3637   1B1D             
3638   1B1D             test4:
3639   1B1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3640   1B20             ; $a 
3641   1B20             ; $b 
3642   1B20             ; $c 
3643   1B20             ; $result 
3644   1B20             ; $pass 
3645   1B20 10 01 00      mov a, $1
3646   1B23 45 F7 FF      mov [bp + -9], a
3647   1B26 52 0A 00      sub sp, 10
3648   1B29             ;; result = 1 && 1 && 1; 
3649   1B29 FA F9 FF      lea d, [bp + -7] ; $result
3650   1B2C DA            push d
3651   1B2D 26 01 00      mov b, $1
3652   1B30 D7            push a
3653   1B31 11            mov a, b
3654   1B32 26 01 00      mov b, $1
3655   1B35 FD A7         sand a, b ; &&
3656   1B37 11            mov a, b
3657   1B38 26 01 00      mov b, $1
3658   1B3B FD A7         sand a, b ; &&
3659   1B3D E4            pop a
3660   1B3E E7            pop d
3661   1B3F FD 43         mov [d], b
3662   1B41             ;; pass = pass && result == 1; 
3663   1B41 FA F7 FF      lea d, [bp + -9] ; $pass
3664   1B44 DA            push d
3665   1B45 FA F7 FF      lea d, [bp + -9] ; $pass
3666   1B48 2A            mov b, [d]
3667   1B49 D7            push a
3668   1B4A 11            mov a, b
3669   1B4B FA F9 FF      lea d, [bp + -7] ; $result
3670   1B4E 2A            mov b, [d]
3671   1B4F             ; START RELATIONAL
3672   1B4F D7            push a
3673   1B50 11            mov a, b
3674   1B51 26 01 00      mov b, $1
3675   1B54 B0            cmp a, b
3676   1B55 FD 71         seq ; ==
3677   1B57 E4            pop a
3678   1B58             ; END RELATIONAL
3679   1B58 FD A7         sand a, b ; &&
3680   1B5A E4            pop a
3681   1B5B E7            pop d
3682   1B5C FD 43         mov [d], b
3683   1B5E             ;; result = 1 && 0 && 1; 
3684   1B5E FA F9 FF      lea d, [bp + -7] ; $result
3685   1B61 DA            push d
3686   1B62 26 01 00      mov b, $1
3687   1B65 D7            push a
3688   1B66 11            mov a, b
3689   1B67 26 00 00      mov b, $0
3690   1B6A FD A7         sand a, b ; &&
3691   1B6C 11            mov a, b
3692   1B6D 26 01 00      mov b, $1
3693   1B70 FD A7         sand a, b ; &&
3694   1B72 E4            pop a
3695   1B73 E7            pop d
3696   1B74 FD 43         mov [d], b
3697   1B76             ;; pass = pass && result == 0; 
3698   1B76 FA F7 FF      lea d, [bp + -9] ; $pass
3699   1B79 DA            push d
3700   1B7A FA F7 FF      lea d, [bp + -9] ; $pass
3701   1B7D 2A            mov b, [d]
3702   1B7E D7            push a
3703   1B7F 11            mov a, b
3704   1B80 FA F9 FF      lea d, [bp + -7] ; $result
3705   1B83 2A            mov b, [d]
3706   1B84             ; START RELATIONAL
3707   1B84 D7            push a
3708   1B85 11            mov a, b
3709   1B86 26 00 00      mov b, $0
3710   1B89 B0            cmp a, b
3711   1B8A FD 71         seq ; ==
3712   1B8C E4            pop a
3713   1B8D             ; END RELATIONAL
3714   1B8D FD A7         sand a, b ; &&
3715   1B8F E4            pop a
3716   1B90 E7            pop d
3717   1B91 FD 43         mov [d], b
3718   1B93             ;; result = 1 || 1 || 1; 
3719   1B93 FA F9 FF      lea d, [bp + -7] ; $result
3720   1B96 DA            push d
3721   1B97 26 01 00      mov b, $1
3722   1B9A D7            push a
3723   1B9B 11            mov a, b
3724   1B9C 26 01 00      mov b, $1
3725   1B9F FD A8         sor a, b ; ||
3726   1BA1 11            mov a, b
3727   1BA2 26 01 00      mov b, $1
3728   1BA5 FD A8         sor a, b ; ||
3729   1BA7 E4            pop a
3730   1BA8 E7            pop d
3731   1BA9 FD 43         mov [d], b
3732   1BAB             ;; pass = pass && result == 1; 
3733   1BAB FA F7 FF      lea d, [bp + -9] ; $pass
3734   1BAE DA            push d
3735   1BAF FA F7 FF      lea d, [bp + -9] ; $pass
3736   1BB2 2A            mov b, [d]
3737   1BB3 D7            push a
3738   1BB4 11            mov a, b
3739   1BB5 FA F9 FF      lea d, [bp + -7] ; $result
3740   1BB8 2A            mov b, [d]
3741   1BB9             ; START RELATIONAL
3742   1BB9 D7            push a
3743   1BBA 11            mov a, b
3744   1BBB 26 01 00      mov b, $1
3745   1BBE B0            cmp a, b
3746   1BBF FD 71         seq ; ==
3747   1BC1 E4            pop a
3748   1BC2             ; END RELATIONAL
3749   1BC2 FD A7         sand a, b ; &&
3750   1BC4 E4            pop a
3751   1BC5 E7            pop d
3752   1BC6 FD 43         mov [d], b
3753   1BC8             ;; result = 0 || 1 || 0; 
3754   1BC8 FA F9 FF      lea d, [bp + -7] ; $result
3755   1BCB DA            push d
3756   1BCC 26 00 00      mov b, $0
3757   1BCF D7            push a
3758   1BD0 11            mov a, b
3759   1BD1 26 01 00      mov b, $1
3760   1BD4 FD A8         sor a, b ; ||
3761   1BD6 11            mov a, b
3762   1BD7 26 00 00      mov b, $0
3763   1BDA FD A8         sor a, b ; ||
3764   1BDC E4            pop a
3765   1BDD E7            pop d
3766   1BDE FD 43         mov [d], b
3767   1BE0             ;; pass = pass && result == 1; 
3768   1BE0 FA F7 FF      lea d, [bp + -9] ; $pass
3769   1BE3 DA            push d
3770   1BE4 FA F7 FF      lea d, [bp + -9] ; $pass
3771   1BE7 2A            mov b, [d]
3772   1BE8 D7            push a
3773   1BE9 11            mov a, b
3774   1BEA FA F9 FF      lea d, [bp + -7] ; $result
3775   1BED 2A            mov b, [d]
3776   1BEE             ; START RELATIONAL
3777   1BEE D7            push a
3778   1BEF 11            mov a, b
3779   1BF0 26 01 00      mov b, $1
3780   1BF3 B0            cmp a, b
3781   1BF4 FD 71         seq ; ==
3782   1BF6 E4            pop a
3783   1BF7             ; END RELATIONAL
3784   1BF7 FD A7         sand a, b ; &&
3785   1BF9 E4            pop a
3786   1BFA E7            pop d
3787   1BFB FD 43         mov [d], b
3788   1BFD             ;; result = 1 || 0 && 1; 
3789   1BFD FA F9 FF      lea d, [bp + -7] ; $result
3790   1C00 DA            push d
3791   1C01 26 01 00      mov b, $1
3792   1C04 D7            push a
3793   1C05 11            mov a, b
3794   1C06 26 00 00      mov b, $0
3795   1C09 D7            push a
3796   1C0A 11            mov a, b
3797   1C0B 26 01 00      mov b, $1
3798   1C0E FD A7         sand a, b ; &&
3799   1C10 E4            pop a
3800   1C11 FD A8         sor a, b ; ||
3801   1C13 E4            pop a
3802   1C14 E7            pop d
3803   1C15 FD 43         mov [d], b
3804   1C17             ;; pass = pass && result == 1; 
3805   1C17 FA F7 FF      lea d, [bp + -9] ; $pass
3806   1C1A DA            push d
3807   1C1B FA F7 FF      lea d, [bp + -9] ; $pass
3808   1C1E 2A            mov b, [d]
3809   1C1F D7            push a
3810   1C20 11            mov a, b
3811   1C21 FA F9 FF      lea d, [bp + -7] ; $result
3812   1C24 2A            mov b, [d]
3813   1C25             ; START RELATIONAL
3814   1C25 D7            push a
3815   1C26 11            mov a, b
3816   1C27 26 01 00      mov b, $1
3817   1C2A B0            cmp a, b
3818   1C2B FD 71         seq ; ==
3819   1C2D E4            pop a
3820   1C2E             ; END RELATIONAL
3821   1C2E FD A7         sand a, b ; &&
3822   1C30 E4            pop a
3823   1C31 E7            pop d
3824   1C32 FD 43         mov [d], b
3825   1C34             ;; result = 0 || 0 || 0; 
3826   1C34 FA F9 FF      lea d, [bp + -7] ; $result
3827   1C37 DA            push d
3828   1C38 26 00 00      mov b, $0
3829   1C3B D7            push a
3830   1C3C 11            mov a, b
3831   1C3D 26 00 00      mov b, $0
3832   1C40 FD A8         sor a, b ; ||
3833   1C42 11            mov a, b
3834   1C43 26 00 00      mov b, $0
3835   1C46 FD A8         sor a, b ; ||
3836   1C48 E4            pop a
3837   1C49 E7            pop d
3838   1C4A FD 43         mov [d], b
3839   1C4C             ;; pass = pass && result == 0; 
3840   1C4C FA F7 FF      lea d, [bp + -9] ; $pass
3841   1C4F DA            push d
3842   1C50 FA F7 FF      lea d, [bp + -9] ; $pass
3843   1C53 2A            mov b, [d]
3844   1C54 D7            push a
3845   1C55 11            mov a, b
3846   1C56 FA F9 FF      lea d, [bp + -7] ; $result
3847   1C59 2A            mov b, [d]
3848   1C5A             ; START RELATIONAL
3849   1C5A D7            push a
3850   1C5B 11            mov a, b
3851   1C5C 26 00 00      mov b, $0
3852   1C5F B0            cmp a, b
3853   1C60 FD 71         seq ; ==
3854   1C62 E4            pop a
3855   1C63             ; END RELATIONAL
3856   1C63 FD A7         sand a, b ; &&
3857   1C65 E4            pop a
3858   1C66 E7            pop d
3859   1C67 FD 43         mov [d], b
3860   1C69             ;; a = 1; b = 1; c = 1; 
3861   1C69 FA FF FF      lea d, [bp + -1] ; $a
3862   1C6C DA            push d
3863   1C6D 26 01 00      mov b, $1
3864   1C70 E7            pop d
3865   1C71 FD 43         mov [d], b
3866   1C73             ;; b = 1; c = 1; 
3867   1C73 FA FD FF      lea d, [bp + -3] ; $b
3868   1C76 DA            push d
3869   1C77 26 01 00      mov b, $1
3870   1C7A E7            pop d
3871   1C7B FD 43         mov [d], b
3872   1C7D             ;; c = 1; 
3873   1C7D FA FB FF      lea d, [bp + -5] ; $c
3874   1C80 DA            push d
3875   1C81 26 01 00      mov b, $1
3876   1C84 E7            pop d
3877   1C85 FD 43         mov [d], b
3878   1C87             ;; result = a && b && c; 
3879   1C87 FA F9 FF      lea d, [bp + -7] ; $result
3880   1C8A DA            push d
3881   1C8B FA FF FF      lea d, [bp + -1] ; $a
3882   1C8E 2A            mov b, [d]
3883   1C8F D7            push a
3884   1C90 11            mov a, b
3885   1C91 FA FD FF      lea d, [bp + -3] ; $b
3886   1C94 2A            mov b, [d]
3887   1C95 FD A7         sand a, b ; &&
3888   1C97 11            mov a, b
3889   1C98 FA FB FF      lea d, [bp + -5] ; $c
3890   1C9B 2A            mov b, [d]
3891   1C9C FD A7         sand a, b ; &&
3892   1C9E E4            pop a
3893   1C9F E7            pop d
3894   1CA0 FD 43         mov [d], b
3895   1CA2             ;; pass = pass && result == 1; 
3896   1CA2 FA F7 FF      lea d, [bp + -9] ; $pass
3897   1CA5 DA            push d
3898   1CA6 FA F7 FF      lea d, [bp + -9] ; $pass
3899   1CA9 2A            mov b, [d]
3900   1CAA D7            push a
3901   1CAB 11            mov a, b
3902   1CAC FA F9 FF      lea d, [bp + -7] ; $result
3903   1CAF 2A            mov b, [d]
3904   1CB0             ; START RELATIONAL
3905   1CB0 D7            push a
3906   1CB1 11            mov a, b
3907   1CB2 26 01 00      mov b, $1
3908   1CB5 B0            cmp a, b
3909   1CB6 FD 71         seq ; ==
3910   1CB8 E4            pop a
3911   1CB9             ; END RELATIONAL
3912   1CB9 FD A7         sand a, b ; &&
3913   1CBB E4            pop a
3914   1CBC E7            pop d
3915   1CBD FD 43         mov [d], b
3916   1CBF             ;; a = 1; b = 0; c = 1; 
3917   1CBF FA FF FF      lea d, [bp + -1] ; $a
3918   1CC2 DA            push d
3919   1CC3 26 01 00      mov b, $1
3920   1CC6 E7            pop d
3921   1CC7 FD 43         mov [d], b
3922   1CC9             ;; b = 0; c = 1; 
3923   1CC9 FA FD FF      lea d, [bp + -3] ; $b
3924   1CCC DA            push d
3925   1CCD 26 00 00      mov b, $0
3926   1CD0 E7            pop d
3927   1CD1 FD 43         mov [d], b
3928   1CD3             ;; c = 1; 
3929   1CD3 FA FB FF      lea d, [bp + -5] ; $c
3930   1CD6 DA            push d
3931   1CD7 26 01 00      mov b, $1
3932   1CDA E7            pop d
3933   1CDB FD 43         mov [d], b
3934   1CDD             ;; result = a && b && c; 
3935   1CDD FA F9 FF      lea d, [bp + -7] ; $result
3936   1CE0 DA            push d
3937   1CE1 FA FF FF      lea d, [bp + -1] ; $a
3938   1CE4 2A            mov b, [d]
3939   1CE5 D7            push a
3940   1CE6 11            mov a, b
3941   1CE7 FA FD FF      lea d, [bp + -3] ; $b
3942   1CEA 2A            mov b, [d]
3943   1CEB FD A7         sand a, b ; &&
3944   1CED 11            mov a, b
3945   1CEE FA FB FF      lea d, [bp + -5] ; $c
3946   1CF1 2A            mov b, [d]
3947   1CF2 FD A7         sand a, b ; &&
3948   1CF4 E4            pop a
3949   1CF5 E7            pop d
3950   1CF6 FD 43         mov [d], b
3951   1CF8             ;; pass = pass && result == 0; 
3952   1CF8 FA F7 FF      lea d, [bp + -9] ; $pass
3953   1CFB DA            push d
3954   1CFC FA F7 FF      lea d, [bp + -9] ; $pass
3955   1CFF 2A            mov b, [d]
3956   1D00 D7            push a
3957   1D01 11            mov a, b
3958   1D02 FA F9 FF      lea d, [bp + -7] ; $result
3959   1D05 2A            mov b, [d]
3960   1D06             ; START RELATIONAL
3961   1D06 D7            push a
3962   1D07 11            mov a, b
3963   1D08 26 00 00      mov b, $0
3964   1D0B B0            cmp a, b
3965   1D0C FD 71         seq ; ==
3966   1D0E E4            pop a
3967   1D0F             ; END RELATIONAL
3968   1D0F FD A7         sand a, b ; &&
3969   1D11 E4            pop a
3970   1D12 E7            pop d
3971   1D13 FD 43         mov [d], b
3972   1D15             ;; a = 1; b = 1; c = 1; 
3973   1D15 FA FF FF      lea d, [bp + -1] ; $a
3974   1D18 DA            push d
3975   1D19 26 01 00      mov b, $1
3976   1D1C E7            pop d
3977   1D1D FD 43         mov [d], b
3978   1D1F             ;; b = 1; c = 1; 
3979   1D1F FA FD FF      lea d, [bp + -3] ; $b
3980   1D22 DA            push d
3981   1D23 26 01 00      mov b, $1
3982   1D26 E7            pop d
3983   1D27 FD 43         mov [d], b
3984   1D29             ;; c = 1; 
3985   1D29 FA FB FF      lea d, [bp + -5] ; $c
3986   1D2C DA            push d
3987   1D2D 26 01 00      mov b, $1
3988   1D30 E7            pop d
3989   1D31 FD 43         mov [d], b
3990   1D33             ;; result = a || b || b; 
3991   1D33 FA F9 FF      lea d, [bp + -7] ; $result
3992   1D36 DA            push d
3993   1D37 FA FF FF      lea d, [bp + -1] ; $a
3994   1D3A 2A            mov b, [d]
3995   1D3B D7            push a
3996   1D3C 11            mov a, b
3997   1D3D FA FD FF      lea d, [bp + -3] ; $b
3998   1D40 2A            mov b, [d]
3999   1D41 FD A8         sor a, b ; ||
4000   1D43 11            mov a, b
4001   1D44 FA FD FF      lea d, [bp + -3] ; $b
4002   1D47 2A            mov b, [d]
4003   1D48 FD A8         sor a, b ; ||
4004   1D4A E4            pop a
4005   1D4B E7            pop d
4006   1D4C FD 43         mov [d], b
4007   1D4E             ;; pass = pass && result == 1; 
4008   1D4E FA F7 FF      lea d, [bp + -9] ; $pass
4009   1D51 DA            push d
4010   1D52 FA F7 FF      lea d, [bp + -9] ; $pass
4011   1D55 2A            mov b, [d]
4012   1D56 D7            push a
4013   1D57 11            mov a, b
4014   1D58 FA F9 FF      lea d, [bp + -7] ; $result
4015   1D5B 2A            mov b, [d]
4016   1D5C             ; START RELATIONAL
4017   1D5C D7            push a
4018   1D5D 11            mov a, b
4019   1D5E 26 01 00      mov b, $1
4020   1D61 B0            cmp a, b
4021   1D62 FD 71         seq ; ==
4022   1D64 E4            pop a
4023   1D65             ; END RELATIONAL
4024   1D65 FD A7         sand a, b ; &&
4025   1D67 E4            pop a
4026   1D68 E7            pop d
4027   1D69 FD 43         mov [d], b
4028   1D6B             ;; a = 0; b = 1; c = 0; 
4029   1D6B FA FF FF      lea d, [bp + -1] ; $a
4030   1D6E DA            push d
4031   1D6F 26 00 00      mov b, $0
4032   1D72 E7            pop d
4033   1D73 FD 43         mov [d], b
4034   1D75             ;; b = 1; c = 0; 
4035   1D75 FA FD FF      lea d, [bp + -3] ; $b
4036   1D78 DA            push d
4037   1D79 26 01 00      mov b, $1
4038   1D7C E7            pop d
4039   1D7D FD 43         mov [d], b
4040   1D7F             ;; c = 0; 
4041   1D7F FA FB FF      lea d, [bp + -5] ; $c
4042   1D82 DA            push d
4043   1D83 26 00 00      mov b, $0
4044   1D86 E7            pop d
4045   1D87 FD 43         mov [d], b
4046   1D89             ;; result = a || b || b; 
4047   1D89 FA F9 FF      lea d, [bp + -7] ; $result
4048   1D8C DA            push d
4049   1D8D FA FF FF      lea d, [bp + -1] ; $a
4050   1D90 2A            mov b, [d]
4051   1D91 D7            push a
4052   1D92 11            mov a, b
4053   1D93 FA FD FF      lea d, [bp + -3] ; $b
4054   1D96 2A            mov b, [d]
4055   1D97 FD A8         sor a, b ; ||
4056   1D99 11            mov a, b
4057   1D9A FA FD FF      lea d, [bp + -3] ; $b
4058   1D9D 2A            mov b, [d]
4059   1D9E FD A8         sor a, b ; ||
4060   1DA0 E4            pop a
4061   1DA1 E7            pop d
4062   1DA2 FD 43         mov [d], b
4063   1DA4             ;; pass = pass && result == 1; 
4064   1DA4 FA F7 FF      lea d, [bp + -9] ; $pass
4065   1DA7 DA            push d
4066   1DA8 FA F7 FF      lea d, [bp + -9] ; $pass
4067   1DAB 2A            mov b, [d]
4068   1DAC D7            push a
4069   1DAD 11            mov a, b
4070   1DAE FA F9 FF      lea d, [bp + -7] ; $result
4071   1DB1 2A            mov b, [d]
4072   1DB2             ; START RELATIONAL
4073   1DB2 D7            push a
4074   1DB3 11            mov a, b
4075   1DB4 26 01 00      mov b, $1
4076   1DB7 B0            cmp a, b
4077   1DB8 FD 71         seq ; ==
4078   1DBA E4            pop a
4079   1DBB             ; END RELATIONAL
4080   1DBB FD A7         sand a, b ; &&
4081   1DBD E4            pop a
4082   1DBE E7            pop d
4083   1DBF FD 43         mov [d], b
4084   1DC1             ;; a = 1; b = 0; c = 1; 
4085   1DC1 FA FF FF      lea d, [bp + -1] ; $a
4086   1DC4 DA            push d
4087   1DC5 26 01 00      mov b, $1
4088   1DC8 E7            pop d
4089   1DC9 FD 43         mov [d], b
4090   1DCB             ;; b = 0; c = 1; 
4091   1DCB FA FD FF      lea d, [bp + -3] ; $b
4092   1DCE DA            push d
4093   1DCF 26 00 00      mov b, $0
4094   1DD2 E7            pop d
4095   1DD3 FD 43         mov [d], b
4096   1DD5             ;; c = 1; 
4097   1DD5 FA FB FF      lea d, [bp + -5] ; $c
4098   1DD8 DA            push d
4099   1DD9 26 01 00      mov b, $1
4100   1DDC E7            pop d
4101   1DDD FD 43         mov [d], b
4102   1DDF             ;; result = a || b && b; 
4103   1DDF FA F9 FF      lea d, [bp + -7] ; $result
4104   1DE2 DA            push d
4105   1DE3 FA FF FF      lea d, [bp + -1] ; $a
4106   1DE6 2A            mov b, [d]
4107   1DE7 D7            push a
4108   1DE8 11            mov a, b
4109   1DE9 FA FD FF      lea d, [bp + -3] ; $b
4110   1DEC 2A            mov b, [d]
4111   1DED D7            push a
4112   1DEE 11            mov a, b
4113   1DEF FA FD FF      lea d, [bp + -3] ; $b
4114   1DF2 2A            mov b, [d]
4115   1DF3 FD A7         sand a, b ; &&
4116   1DF5 E4            pop a
4117   1DF6 FD A8         sor a, b ; ||
4118   1DF8 E4            pop a
4119   1DF9 E7            pop d
4120   1DFA FD 43         mov [d], b
4121   1DFC             ;; pass = pass && result == 1; 
4122   1DFC FA F7 FF      lea d, [bp + -9] ; $pass
4123   1DFF DA            push d
4124   1E00 FA F7 FF      lea d, [bp + -9] ; $pass
4125   1E03 2A            mov b, [d]
4126   1E04 D7            push a
4127   1E05 11            mov a, b
4128   1E06 FA F9 FF      lea d, [bp + -7] ; $result
4129   1E09 2A            mov b, [d]
4130   1E0A             ; START RELATIONAL
4131   1E0A D7            push a
4132   1E0B 11            mov a, b
4133   1E0C 26 01 00      mov b, $1
4134   1E0F B0            cmp a, b
4135   1E10 FD 71         seq ; ==
4136   1E12 E4            pop a
4137   1E13             ; END RELATIONAL
4138   1E13 FD A7         sand a, b ; &&
4139   1E15 E4            pop a
4140   1E16 E7            pop d
4141   1E17 FD 43         mov [d], b
4142   1E19             ;; a = 0; b = 0; c = 0; 
4143   1E19 FA FF FF      lea d, [bp + -1] ; $a
4144   1E1C DA            push d
4145   1E1D 26 00 00      mov b, $0
4146   1E20 E7            pop d
4147   1E21 FD 43         mov [d], b
4148   1E23             ;; b = 0; c = 0; 
4149   1E23 FA FD FF      lea d, [bp + -3] ; $b
4150   1E26 DA            push d
4151   1E27 26 00 00      mov b, $0
4152   1E2A E7            pop d
4153   1E2B FD 43         mov [d], b
4154   1E2D             ;; c = 0; 
4155   1E2D FA FB FF      lea d, [bp + -5] ; $c
4156   1E30 DA            push d
4157   1E31 26 00 00      mov b, $0
4158   1E34 E7            pop d
4159   1E35 FD 43         mov [d], b
4160   1E37             ;; result = a || b || b; 
4161   1E37 FA F9 FF      lea d, [bp + -7] ; $result
4162   1E3A DA            push d
4163   1E3B FA FF FF      lea d, [bp + -1] ; $a
4164   1E3E 2A            mov b, [d]
4165   1E3F D7            push a
4166   1E40 11            mov a, b
4167   1E41 FA FD FF      lea d, [bp + -3] ; $b
4168   1E44 2A            mov b, [d]
4169   1E45 FD A8         sor a, b ; ||
4170   1E47 11            mov a, b
4171   1E48 FA FD FF      lea d, [bp + -3] ; $b
4172   1E4B 2A            mov b, [d]
4173   1E4C FD A8         sor a, b ; ||
4174   1E4E E4            pop a
4175   1E4F E7            pop d
4176   1E50 FD 43         mov [d], b
4177   1E52             ;; pass = pass && result == 0; 
4178   1E52 FA F7 FF      lea d, [bp + -9] ; $pass
4179   1E55 DA            push d
4180   1E56 FA F7 FF      lea d, [bp + -9] ; $pass
4181   1E59 2A            mov b, [d]
4182   1E5A D7            push a
4183   1E5B 11            mov a, b
4184   1E5C FA F9 FF      lea d, [bp + -7] ; $result
4185   1E5F 2A            mov b, [d]
4186   1E60             ; START RELATIONAL
4187   1E60 D7            push a
4188   1E61 11            mov a, b
4189   1E62 26 00 00      mov b, $0
4190   1E65 B0            cmp a, b
4191   1E66 FD 71         seq ; ==
4192   1E68 E4            pop a
4193   1E69             ; END RELATIONAL
4194   1E69 FD A7         sand a, b ; &&
4195   1E6B E4            pop a
4196   1E6C E7            pop d
4197   1E6D FD 43         mov [d], b
4198   1E6F             ;; return pass; 
4199   1E6F FA F7 FF      lea d, [bp + -9] ; $pass
4200   1E72 2A            mov b, [d]
4201   1E73 F9            leave
4202   1E74 09            ret
4203   1E75             
4204   1E75             test5:
4205   1E75 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4206   1E78             ; $pass 
4207   1E78             ; $i 
4208   1E78             ; $j 
4209   1E78             ; $k 
4210   1E78             ; $a1 
4211   1E78             ; $a2 
4212   1E78             ; $a3 
4213   1E78 52 26 00      sub sp, 38
4214   1E7B             ;; i = 1; 
4215   1E7B FA FD FF      lea d, [bp + -3] ; $i
4216   1E7E DA            push d
4217   1E7F 26 01 00      mov b, $1
4218   1E82 E7            pop d
4219   1E83 FD 43         mov [d], b
4220   1E85             ;; j = 1; 
4221   1E85 FA FB FF      lea d, [bp + -5] ; $j
4222   1E88 DA            push d
4223   1E89 26 01 00      mov b, $1
4224   1E8C E7            pop d
4225   1E8D FD 43         mov [d], b
4226   1E8F             ;; k = 1; 
4227   1E8F FA F9 FF      lea d, [bp + -7] ; $k
4228   1E92 DA            push d
4229   1E93 26 01 00      mov b, $1
4230   1E96 E7            pop d
4231   1E97 FD 43         mov [d], b
4232   1E99             ;; a1[3] = 1; 
4233   1E99 FA EF FF      lea d, [bp + -17] ; $a1
4234   1E9C D7            push a
4235   1E9D DA            push d
4236   1E9E 26 03 00      mov b, $3
4237   1EA1 E7            pop d
4238   1EA2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4239   1EA6 E4            pop a
4240   1EA7 DA            push d
4241   1EA8 26 01 00      mov b, $1
4242   1EAB E7            pop d
4243   1EAC FD 43         mov [d], b
4244   1EAE             ;; a2[2] = 1; 
4245   1EAE FA E5 FF      lea d, [bp + -27] ; $a2
4246   1EB1 D7            push a
4247   1EB2 DA            push d
4248   1EB3 26 02 00      mov b, $2
4249   1EB6 E7            pop d
4250   1EB7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4251   1EBB E4            pop a
4252   1EBC DA            push d
4253   1EBD 26 01 00      mov b, $1
4254   1EC0 E7            pop d
4255   1EC1 FD 43         mov [d], b
4256   1EC3             ;; a3[a2[a1[i + j + (k && 1) + (1 && 0)] + (i && 1)] + (0 || j)] = 56; 
4257   1EC3 FA DB FF      lea d, [bp + -37] ; $a3
4258   1EC6 D7            push a
4259   1EC7 DA            push d
4260   1EC8 FA E5 FF      lea d, [bp + -27] ; $a2
4261   1ECB D7            push a
4262   1ECC DA            push d
4263   1ECD FA EF FF      lea d, [bp + -17] ; $a1
4264   1ED0 D7            push a
4265   1ED1 DA            push d
4266   1ED2 FA FD FF      lea d, [bp + -3] ; $i
4267   1ED5 2A            mov b, [d]
4268   1ED6             ; START TERMS
4269   1ED6 D7            push a
4270   1ED7 11            mov a, b
4271   1ED8 FA FB FF      lea d, [bp + -5] ; $j
4272   1EDB 2A            mov b, [d]
4273   1EDC 54            add a, b
4274   1EDD 11            mov a, b
4275   1EDE FA F9 FF      lea d, [bp + -7] ; $k
4276   1EE1 2A            mov b, [d]
4277   1EE2 D7            push a
4278   1EE3 11            mov a, b
4279   1EE4 26 01 00      mov b, $1
4280   1EE7 FD A7         sand a, b ; &&
4281   1EE9 E4            pop a
4282   1EEA 54            add a, b
4283   1EEB 11            mov a, b
4284   1EEC 26 01 00      mov b, $1
4285   1EEF D7            push a
4286   1EF0 11            mov a, b
4287   1EF1 26 00 00      mov b, $0
4288   1EF4 FD A7         sand a, b ; &&
4289   1EF6 E4            pop a
4290   1EF7 54            add a, b
4291   1EF8 27            mov b, a
4292   1EF9 E4            pop a
4293   1EFA             ; END TERMS
4294   1EFA E7            pop d
4295   1EFB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4296   1EFF E4            pop a
4297   1F00 2A            mov b, [d]
4298   1F01             ; START TERMS
4299   1F01 D7            push a
4300   1F02 11            mov a, b
4301   1F03 FA FD FF      lea d, [bp + -3] ; $i
4302   1F06 2A            mov b, [d]
4303   1F07 D7            push a
4304   1F08 11            mov a, b
4305   1F09 26 01 00      mov b, $1
4306   1F0C FD A7         sand a, b ; &&
4307   1F0E E4            pop a
4308   1F0F 54            add a, b
4309   1F10 27            mov b, a
4310   1F11 E4            pop a
4311   1F12             ; END TERMS
4312   1F12 E7            pop d
4313   1F13 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4314   1F17 E4            pop a
4315   1F18 2A            mov b, [d]
4316   1F19             ; START TERMS
4317   1F19 D7            push a
4318   1F1A 11            mov a, b
4319   1F1B 26 00 00      mov b, $0
4320   1F1E D7            push a
4321   1F1F 11            mov a, b
4322   1F20 FA FB FF      lea d, [bp + -5] ; $j
4323   1F23 2A            mov b, [d]
4324   1F24 FD A8         sor a, b ; ||
4325   1F26 E4            pop a
4326   1F27 54            add a, b
4327   1F28 27            mov b, a
4328   1F29 E4            pop a
4329   1F2A             ; END TERMS
4330   1F2A E7            pop d
4331   1F2B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4332   1F2F E4            pop a
4333   1F30 DA            push d
4334   1F31 26 38 00      mov b, $38
4335   1F34 E7            pop d
4336   1F35 FD 43         mov [d], b
4337   1F37             ;; pass = a3[2] == 56; 
4338   1F37 FA FF FF      lea d, [bp + -1] ; $pass
4339   1F3A DA            push d
4340   1F3B FA DB FF      lea d, [bp + -37] ; $a3
4341   1F3E D7            push a
4342   1F3F DA            push d
4343   1F40 26 02 00      mov b, $2
4344   1F43 E7            pop d
4345   1F44 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4346   1F48 E4            pop a
4347   1F49 2A            mov b, [d]
4348   1F4A             ; START RELATIONAL
4349   1F4A D7            push a
4350   1F4B 11            mov a, b
4351   1F4C 26 38 00      mov b, $38
4352   1F4F B0            cmp a, b
4353   1F50 FD 71         seq ; ==
4354   1F52 E4            pop a
4355   1F53             ; END RELATIONAL
4356   1F53 E7            pop d
4357   1F54 FD 43         mov [d], b
4358   1F56             ;; return pass; 
4359   1F56 FA FF FF      lea d, [bp + -1] ; $pass
4360   1F59 2A            mov b, [d]
4361   1F5A F9            leave
4362   1F5B 09            ret
4363   1F5C             
4364   1F5C             test6:
4365   1F5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4366   1F5F             ; $pass 
4367   1F5F 10 01 00      mov a, $1
4368   1F62 45 FF FF      mov [bp + -1], a
4369   1F65             ; $i 
4370   1F65             ; $j 
4371   1F65             ; $k 
4372   1F65 52 08 00      sub sp, 8
4373   1F68             ;; test6_struct.c1 = 'A'; 
4374   1F68 3B 2E 25      mov d, _test6_struct_data ; $test6_struct
4375   1F6B 58 00 00      add d, 0
4376   1F6E DA            push d
4377   1F6F 26 41 00      mov b, $41
4378   1F72 E7            pop d
4379   1F73 FD 3E         mov [d], bl
4380   1F75             ;; pass = pass && test6_struct.c1 == 'A'; 
4381   1F75 FA FF FF      lea d, [bp + -1] ; $pass
4382   1F78 DA            push d
4383   1F79 FA FF FF      lea d, [bp + -1] ; $pass
4384   1F7C 2A            mov b, [d]
4385   1F7D D7            push a
4386   1F7E 11            mov a, b
4387   1F7F 3B 2E 25      mov d, _test6_struct_data ; $test6_struct
4388   1F82 58 00 00      add d, 0
4389   1F85 32            mov bl, [d]
4390   1F86 A7 00         mov bh, 0
4391   1F88             ; START RELATIONAL
4392   1F88 D7            push a
4393   1F89 11            mov a, b
4394   1F8A 26 41 00      mov b, $41
4395   1F8D B0            cmp a, b
4396   1F8E FD 71         seq ; ==
4397   1F90 E4            pop a
4398   1F91             ; END RELATIONAL
4399   1F91 FD A7         sand a, b ; &&
4400   1F93 E4            pop a
4401   1F94 E7            pop d
4402   1F95 FD 43         mov [d], b
4403   1F97             ;; for(i = 0; i < 5; i++){ 
4404   1F97             _for55_init:
4405   1F97 FA FD FF      lea d, [bp + -3] ; $i
4406   1F9A DA            push d
4407   1F9B 26 00 00      mov b, $0
4408   1F9E E7            pop d
4409   1F9F FD 43         mov [d], b
4410   1FA1             _for55_cond:
4411   1FA1 FA FD FF      lea d, [bp + -3] ; $i
4412   1FA4 2A            mov b, [d]
4413   1FA5             ; START RELATIONAL
4414   1FA5 D7            push a
4415   1FA6 11            mov a, b
4416   1FA7 26 05 00      mov b, $5
4417   1FAA B0            cmp a, b
4418   1FAB FD 73         slt ; <= (signed)
4419   1FAD E4            pop a
4420   1FAE             ; END RELATIONAL
4421   1FAE C0 00 00      cmp b, 0
4422   1FB1 C6 07 20      je _for55_exit
4423   1FB4             _for55_block:
4424   1FB4             ;; test6_struct.ca[i] = i; 
4425   1FB4 3B 2E 25      mov d, _test6_struct_data ; $test6_struct
4426   1FB7 58 01 00      add d, 1
4427   1FBA D7            push a
4428   1FBB DA            push d
4429   1FBC FA FD FF      lea d, [bp + -3] ; $i
4430   1FBF 2A            mov b, [d]
4431   1FC0 E7            pop d
4432   1FC1 5A            add d, b
4433   1FC2 E4            pop a
4434   1FC3 DA            push d
4435   1FC4 FA FD FF      lea d, [bp + -3] ; $i
4436   1FC7 2A            mov b, [d]
4437   1FC8 E7            pop d
4438   1FC9 FD 3E         mov [d], bl
4439   1FCB             ;; pass = pass && test6_struct.ca[i] == i; 
4440   1FCB FA FF FF      lea d, [bp + -1] ; $pass
4441   1FCE DA            push d
4442   1FCF FA FF FF      lea d, [bp + -1] ; $pass
4443   1FD2 2A            mov b, [d]
4444   1FD3 D7            push a
4445   1FD4 11            mov a, b
4446   1FD5 3B 2E 25      mov d, _test6_struct_data ; $test6_struct
4447   1FD8 58 01 00      add d, 1
4448   1FDB D7            push a
4449   1FDC DA            push d
4450   1FDD FA FD FF      lea d, [bp + -3] ; $i
4451   1FE0 2A            mov b, [d]
4452   1FE1 E7            pop d
4453   1FE2 5A            add d, b
4454   1FE3 E4            pop a
4455   1FE4 32            mov bl, [d]
4456   1FE5 A7 00         mov bh, 0
4457   1FE7             ; START RELATIONAL
4458   1FE7 D7            push a
4459   1FE8 11            mov a, b
4460   1FE9 FA FD FF      lea d, [bp + -3] ; $i
4461   1FEC 2A            mov b, [d]
4462   1FED B0            cmp a, b
4463   1FEE FD 71         seq ; ==
4464   1FF0 E4            pop a
4465   1FF1             ; END RELATIONAL
4466   1FF1 FD A7         sand a, b ; &&
4467   1FF3 E4            pop a
4468   1FF4 E7            pop d
4469   1FF5 FD 43         mov [d], b
4470   1FF7             _for55_update:
4471   1FF7 FA FD FF      lea d, [bp + -3] ; $i
4472   1FFA 2A            mov b, [d]
4473   1FFB D8            push b
4474   1FFC FD 77         inc b
4475   1FFE FA FD FF      lea d, [bp + -3] ; $i
4476   2001 FD 43         mov [d], b
4477   2003 E5            pop b
4478   2004 0A A1 1F      jmp _for55_cond
4479   2007             _for55_exit:
4480   2007             ;; test6_struct.i1 = 55555; 
4481   2007 3B 2E 25      mov d, _test6_struct_data ; $test6_struct
4482   200A 58 06 00      add d, 6
4483   200D DA            push d
4484   200E 26 03 D9      mov b, $d903
4485   2011 E7            pop d
4486   2012 FD 43         mov [d], b
4487   2014             ;; pass = pass && test6_struct.i1 == 55555; 
4488   2014 FA FF FF      lea d, [bp + -1] ; $pass
4489   2017 DA            push d
4490   2018 FA FF FF      lea d, [bp + -1] ; $pass
4491   201B 2A            mov b, [d]
4492   201C D7            push a
4493   201D 11            mov a, b
4494   201E 3B 2E 25      mov d, _test6_struct_data ; $test6_struct
4495   2021 58 06 00      add d, 6
4496   2024 2A            mov b, [d]
4497   2025             ; START RELATIONAL
4498   2025 D7            push a
4499   2026 11            mov a, b
4500   2027 26 03 D9      mov b, $d903
4501   202A B0            cmp a, b
4502   202B FD 71         seq ; ==
4503   202D E4            pop a
4504   202E             ; END RELATIONAL
4505   202E FD A7         sand a, b ; &&
4506   2030 E4            pop a
4507   2031 E7            pop d
4508   2032 FD 43         mov [d], b
4509   2034             ;; for(i = 0; i < 5; i++){ 
4510   2034             _for56_init:
4511   2034 FA FD FF      lea d, [bp + -3] ; $i
4512   2037 DA            push d
4513   2038 26 00 00      mov b, $0
4514   203B E7            pop d
4515   203C FD 43         mov [d], b
4516   203E             _for56_cond:
4517   203E FA FD FF      lea d, [bp + -3] ; $i
4518   2041 2A            mov b, [d]
4519   2042             ; START RELATIONAL
4520   2042 D7            push a
4521   2043 11            mov a, b
4522   2044 26 05 00      mov b, $5
4523   2047 B0            cmp a, b
4524   2048 FD 73         slt ; <= (signed)
4525   204A E4            pop a
4526   204B             ; END RELATIONAL
4527   204B C0 00 00      cmp b, 0
4528   204E C6 A8 20      je _for56_exit
4529   2051             _for56_block:
4530   2051             ;; test6_struct.ia[i] = i; 
4531   2051 3B 2E 25      mov d, _test6_struct_data ; $test6_struct
4532   2054 58 08 00      add d, 8
4533   2057 D7            push a
4534   2058 DA            push d
4535   2059 FA FD FF      lea d, [bp + -3] ; $i
4536   205C 2A            mov b, [d]
4537   205D E7            pop d
4538   205E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4539   2062 E4            pop a
4540   2063 DA            push d
4541   2064 FA FD FF      lea d, [bp + -3] ; $i
4542   2067 2A            mov b, [d]
4543   2068 E7            pop d
4544   2069 FD 43         mov [d], b
4545   206B             ;; pass = pass && test6_struct.ia[i] == i; 
4546   206B FA FF FF      lea d, [bp + -1] ; $pass
4547   206E DA            push d
4548   206F FA FF FF      lea d, [bp + -1] ; $pass
4549   2072 2A            mov b, [d]
4550   2073 D7            push a
4551   2074 11            mov a, b
4552   2075 3B 2E 25      mov d, _test6_struct_data ; $test6_struct
4553   2078 58 08 00      add d, 8
4554   207B D7            push a
4555   207C DA            push d
4556   207D FA FD FF      lea d, [bp + -3] ; $i
4557   2080 2A            mov b, [d]
4558   2081 E7            pop d
4559   2082 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4560   2086 E4            pop a
4561   2087 2A            mov b, [d]
4562   2088             ; START RELATIONAL
4563   2088 D7            push a
4564   2089 11            mov a, b
4565   208A FA FD FF      lea d, [bp + -3] ; $i
4566   208D 2A            mov b, [d]
4567   208E B0            cmp a, b
4568   208F FD 71         seq ; ==
4569   2091 E4            pop a
4570   2092             ; END RELATIONAL
4571   2092 FD A7         sand a, b ; &&
4572   2094 E4            pop a
4573   2095 E7            pop d
4574   2096 FD 43         mov [d], b
4575   2098             _for56_update:
4576   2098 FA FD FF      lea d, [bp + -3] ; $i
4577   209B 2A            mov b, [d]
4578   209C D8            push b
4579   209D FD 77         inc b
4580   209F FA FD FF      lea d, [bp + -3] ; $i
4581   20A2 FD 43         mov [d], b
4582   20A4 E5            pop b
4583   20A5 0A 3E 20      jmp _for56_cond
4584   20A8             _for56_exit:
4585   20A8             ;; return pass; 
4586   20A8 FA FF FF      lea d, [bp + -1] ; $pass
4587   20AB 2A            mov b, [d]
4588   20AC F9            leave
4589   20AD 09            ret
4590   20AE             
4591   20AE             test7:
4592   20AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4593   20B1             ; $pass 
4594   20B1 10 01 00      mov a, $1
4595   20B4 45 FF FF      mov [bp + -1], a
4596   20B7             ; $i 
4597   20B7             ; $j 
4598   20B7             ; $k 
4599   20B7 52 08 00      sub sp, 8
4600   20BA             ;; test7_struct.test7_substruct.c1 = 'A'; 
4601   20BA 3B 40 25      mov d, _test7_struct_data ; $test7_struct
4602   20BD 58 06 00      add d, 6
4603   20C0 58 00 00      add d, 0
4604   20C3 DA            push d
4605   20C4 26 41 00      mov b, $41
4606   20C7 E7            pop d
4607   20C8 FD 3E         mov [d], bl
4608   20CA             ;; pass = pass && test7_struct.test7_substruct.c1 == 'A'; 
4609   20CA FA FF FF      lea d, [bp + -1] ; $pass
4610   20CD DA            push d
4611   20CE FA FF FF      lea d, [bp + -1] ; $pass
4612   20D1 2A            mov b, [d]
4613   20D2 D7            push a
4614   20D3 11            mov a, b
4615   20D4 3B 40 25      mov d, _test7_struct_data ; $test7_struct
4616   20D7 58 06 00      add d, 6
4617   20DA 58 00 00      add d, 0
4618   20DD 32            mov bl, [d]
4619   20DE A7 00         mov bh, 0
4620   20E0             ; START RELATIONAL
4621   20E0 D7            push a
4622   20E1 11            mov a, b
4623   20E2 26 41 00      mov b, $41
4624   20E5 B0            cmp a, b
4625   20E6 FD 71         seq ; ==
4626   20E8 E4            pop a
4627   20E9             ; END RELATIONAL
4628   20E9 FD A7         sand a, b ; &&
4629   20EB E4            pop a
4630   20EC E7            pop d
4631   20ED FD 43         mov [d], b
4632   20EF             ;; for(i = 0; i < 5; i++){ 
4633   20EF             _for57_init:
4634   20EF FA FD FF      lea d, [bp + -3] ; $i
4635   20F2 DA            push d
4636   20F3 26 00 00      mov b, $0
4637   20F6 E7            pop d
4638   20F7 FD 43         mov [d], b
4639   20F9             _for57_cond:
4640   20F9 FA FD FF      lea d, [bp + -3] ; $i
4641   20FC 2A            mov b, [d]
4642   20FD             ; START RELATIONAL
4643   20FD D7            push a
4644   20FE 11            mov a, b
4645   20FF 26 05 00      mov b, $5
4646   2102 B0            cmp a, b
4647   2103 FD 73         slt ; <= (signed)
4648   2105 E4            pop a
4649   2106             ; END RELATIONAL
4650   2106 C0 00 00      cmp b, 0
4651   2109 C6 65 21      je _for57_exit
4652   210C             _for57_block:
4653   210C             ;; test7_struct.test7_substruct.ca[i] = i; 
4654   210C 3B 40 25      mov d, _test7_struct_data ; $test7_struct
4655   210F 58 06 00      add d, 6
4656   2112 58 01 00      add d, 1
4657   2115 D7            push a
4658   2116 DA            push d
4659   2117 FA FD FF      lea d, [bp + -3] ; $i
4660   211A 2A            mov b, [d]
4661   211B E7            pop d
4662   211C 5A            add d, b
4663   211D E4            pop a
4664   211E DA            push d
4665   211F FA FD FF      lea d, [bp + -3] ; $i
4666   2122 2A            mov b, [d]
4667   2123 E7            pop d
4668   2124 FD 3E         mov [d], bl
4669   2126             ;; pass = pass && test7_struct.test7_substruct.ca[i] == i; 
4670   2126 FA FF FF      lea d, [bp + -1] ; $pass
4671   2129 DA            push d
4672   212A FA FF FF      lea d, [bp + -1] ; $pass
4673   212D 2A            mov b, [d]
4674   212E D7            push a
4675   212F 11            mov a, b
4676   2130 3B 40 25      mov d, _test7_struct_data ; $test7_struct
4677   2133 58 06 00      add d, 6
4678   2136 58 01 00      add d, 1
4679   2139 D7            push a
4680   213A DA            push d
4681   213B FA FD FF      lea d, [bp + -3] ; $i
4682   213E 2A            mov b, [d]
4683   213F E7            pop d
4684   2140 5A            add d, b
4685   2141 E4            pop a
4686   2142 32            mov bl, [d]
4687   2143 A7 00         mov bh, 0
4688   2145             ; START RELATIONAL
4689   2145 D7            push a
4690   2146 11            mov a, b
4691   2147 FA FD FF      lea d, [bp + -3] ; $i
4692   214A 2A            mov b, [d]
4693   214B B0            cmp a, b
4694   214C FD 71         seq ; ==
4695   214E E4            pop a
4696   214F             ; END RELATIONAL
4697   214F FD A7         sand a, b ; &&
4698   2151 E4            pop a
4699   2152 E7            pop d
4700   2153 FD 43         mov [d], b
4701   2155             _for57_update:
4702   2155 FA FD FF      lea d, [bp + -3] ; $i
4703   2158 2A            mov b, [d]
4704   2159 D8            push b
4705   215A FD 77         inc b
4706   215C FA FD FF      lea d, [bp + -3] ; $i
4707   215F FD 43         mov [d], b
4708   2161 E5            pop b
4709   2162 0A F9 20      jmp _for57_cond
4710   2165             _for57_exit:
4711   2165             ;; test7_struct.test7_substruct.i1 = 55555; 
4712   2165 3B 40 25      mov d, _test7_struct_data ; $test7_struct
4713   2168 58 06 00      add d, 6
4714   216B 58 06 00      add d, 6
4715   216E DA            push d
4716   216F 26 03 D9      mov b, $d903
4717   2172 E7            pop d
4718   2173 FD 43         mov [d], b
4719   2175             ;; pass = pass && test7_struct.test7_substruct.i1 == 55555; 
4720   2175 FA FF FF      lea d, [bp + -1] ; $pass
4721   2178 DA            push d
4722   2179 FA FF FF      lea d, [bp + -1] ; $pass
4723   217C 2A            mov b, [d]
4724   217D D7            push a
4725   217E 11            mov a, b
4726   217F 3B 40 25      mov d, _test7_struct_data ; $test7_struct
4727   2182 58 06 00      add d, 6
4728   2185 58 06 00      add d, 6
4729   2188 2A            mov b, [d]
4730   2189             ; START RELATIONAL
4731   2189 D7            push a
4732   218A 11            mov a, b
4733   218B 26 03 D9      mov b, $d903
4734   218E B0            cmp a, b
4735   218F FD 71         seq ; ==
4736   2191 E4            pop a
4737   2192             ; END RELATIONAL
4738   2192 FD A7         sand a, b ; &&
4739   2194 E4            pop a
4740   2195 E7            pop d
4741   2196 FD 43         mov [d], b
4742   2198             ;; for(i = 0; i < 5; i++){ 
4743   2198             _for58_init:
4744   2198 FA FD FF      lea d, [bp + -3] ; $i
4745   219B DA            push d
4746   219C 26 00 00      mov b, $0
4747   219F E7            pop d
4748   21A0 FD 43         mov [d], b
4749   21A2             _for58_cond:
4750   21A2 FA FD FF      lea d, [bp + -3] ; $i
4751   21A5 2A            mov b, [d]
4752   21A6             ; START RELATIONAL
4753   21A6 D7            push a
4754   21A7 11            mov a, b
4755   21A8 26 05 00      mov b, $5
4756   21AB B0            cmp a, b
4757   21AC FD 73         slt ; <= (signed)
4758   21AE E4            pop a
4759   21AF             ; END RELATIONAL
4760   21AF C0 00 00      cmp b, 0
4761   21B2 C6 12 22      je _for58_exit
4762   21B5             _for58_block:
4763   21B5             ;; test7_struct.test7_substruct.ia[i] = i; 
4764   21B5 3B 40 25      mov d, _test7_struct_data ; $test7_struct
4765   21B8 58 06 00      add d, 6
4766   21BB 58 08 00      add d, 8
4767   21BE D7            push a
4768   21BF DA            push d
4769   21C0 FA FD FF      lea d, [bp + -3] ; $i
4770   21C3 2A            mov b, [d]
4771   21C4 E7            pop d
4772   21C5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4773   21C9 E4            pop a
4774   21CA DA            push d
4775   21CB FA FD FF      lea d, [bp + -3] ; $i
4776   21CE 2A            mov b, [d]
4777   21CF E7            pop d
4778   21D0 FD 43         mov [d], b
4779   21D2             ;; pass = pass && test7_struct.test7_substruct.ia[i] == i; 
4780   21D2 FA FF FF      lea d, [bp + -1] ; $pass
4781   21D5 DA            push d
4782   21D6 FA FF FF      lea d, [bp + -1] ; $pass
4783   21D9 2A            mov b, [d]
4784   21DA D7            push a
4785   21DB 11            mov a, b
4786   21DC 3B 40 25      mov d, _test7_struct_data ; $test7_struct
4787   21DF 58 06 00      add d, 6
4788   21E2 58 08 00      add d, 8
4789   21E5 D7            push a
4790   21E6 DA            push d
4791   21E7 FA FD FF      lea d, [bp + -3] ; $i
4792   21EA 2A            mov b, [d]
4793   21EB E7            pop d
4794   21EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4795   21F0 E4            pop a
4796   21F1 2A            mov b, [d]
4797   21F2             ; START RELATIONAL
4798   21F2 D7            push a
4799   21F3 11            mov a, b
4800   21F4 FA FD FF      lea d, [bp + -3] ; $i
4801   21F7 2A            mov b, [d]
4802   21F8 B0            cmp a, b
4803   21F9 FD 71         seq ; ==
4804   21FB E4            pop a
4805   21FC             ; END RELATIONAL
4806   21FC FD A7         sand a, b ; &&
4807   21FE E4            pop a
4808   21FF E7            pop d
4809   2200 FD 43         mov [d], b
4810   2202             _for58_update:
4811   2202 FA FD FF      lea d, [bp + -3] ; $i
4812   2205 2A            mov b, [d]
4813   2206 D8            push b
4814   2207 FD 77         inc b
4815   2209 FA FD FF      lea d, [bp + -3] ; $i
4816   220C FD 43         mov [d], b
4817   220E E5            pop b
4818   220F 0A A2 21      jmp _for58_cond
4819   2212             _for58_exit:
4820   2212             ;; return pass; 
4821   2212 FA FF FF      lea d, [bp + -1] ; $pass
4822   2215 2A            mov b, [d]
4823   2216 F9            leave
4824   2217 09            ret
4825   2218             
4826   2218             test8:
4827   2218 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4828   221B             ; $pass 
4829   221B 10 01 00      mov a, $1
4830   221E 45 FF FF      mov [bp + -1], a
4831   2221             ; $i 
4832   2221             ; $j 
4833   2221             ; $k 
4834   2221             ; $test8_struct 
4835   2221 52 1A 00      sub sp, 26
4836   2224             ;; test8_struct.c1 = 'A'; 
4837   2224 FA E7 FF      lea d, [bp + -25] ; $test8_struct
4838   2227 58 00 00      add d, 0
4839   222A DA            push d
4840   222B 26 41 00      mov b, $41
4841   222E E7            pop d
4842   222F FD 3E         mov [d], bl
4843   2231             ;; pass = pass && test8_struct.c1 == 'A'; 
4844   2231 FA FF FF      lea d, [bp + -1] ; $pass
4845   2234 DA            push d
4846   2235 FA FF FF      lea d, [bp + -1] ; $pass
4847   2238 2A            mov b, [d]
4848   2239 D7            push a
4849   223A 11            mov a, b
4850   223B FA E7 FF      lea d, [bp + -25] ; $test8_struct
4851   223E 58 00 00      add d, 0
4852   2241 32            mov bl, [d]
4853   2242 A7 00         mov bh, 0
4854   2244             ; START RELATIONAL
4855   2244 D7            push a
4856   2245 11            mov a, b
4857   2246 26 41 00      mov b, $41
4858   2249 B0            cmp a, b
4859   224A FD 71         seq ; ==
4860   224C E4            pop a
4861   224D             ; END RELATIONAL
4862   224D FD A7         sand a, b ; &&
4863   224F E4            pop a
4864   2250 E7            pop d
4865   2251 FD 43         mov [d], b
4866   2253             ;; for(i = 0; i < 5; i++){ 
4867   2253             _for59_init:
4868   2253 FA FD FF      lea d, [bp + -3] ; $i
4869   2256 DA            push d
4870   2257 26 00 00      mov b, $0
4871   225A E7            pop d
4872   225B FD 43         mov [d], b
4873   225D             _for59_cond:
4874   225D FA FD FF      lea d, [bp + -3] ; $i
4875   2260 2A            mov b, [d]
4876   2261             ; START RELATIONAL
4877   2261 D7            push a
4878   2262 11            mov a, b
4879   2263 26 05 00      mov b, $5
4880   2266 B0            cmp a, b
4881   2267 FD 73         slt ; <= (signed)
4882   2269 E4            pop a
4883   226A             ; END RELATIONAL
4884   226A C0 00 00      cmp b, 0
4885   226D C6 C3 22      je _for59_exit
4886   2270             _for59_block:
4887   2270             ;; test8_struct.ca[i] = i; 
4888   2270 FA E7 FF      lea d, [bp + -25] ; $test8_struct
4889   2273 58 01 00      add d, 1
4890   2276 D7            push a
4891   2277 DA            push d
4892   2278 FA FD FF      lea d, [bp + -3] ; $i
4893   227B 2A            mov b, [d]
4894   227C E7            pop d
4895   227D 5A            add d, b
4896   227E E4            pop a
4897   227F DA            push d
4898   2280 FA FD FF      lea d, [bp + -3] ; $i
4899   2283 2A            mov b, [d]
4900   2284 E7            pop d
4901   2285 FD 3E         mov [d], bl
4902   2287             ;; pass = pass && test8_struct.ca[i] == i; 
4903   2287 FA FF FF      lea d, [bp + -1] ; $pass
4904   228A DA            push d
4905   228B FA FF FF      lea d, [bp + -1] ; $pass
4906   228E 2A            mov b, [d]
4907   228F D7            push a
4908   2290 11            mov a, b
4909   2291 FA E7 FF      lea d, [bp + -25] ; $test8_struct
4910   2294 58 01 00      add d, 1
4911   2297 D7            push a
4912   2298 DA            push d
4913   2299 FA FD FF      lea d, [bp + -3] ; $i
4914   229C 2A            mov b, [d]
4915   229D E7            pop d
4916   229E 5A            add d, b
4917   229F E4            pop a
4918   22A0 32            mov bl, [d]
4919   22A1 A7 00         mov bh, 0
4920   22A3             ; START RELATIONAL
4921   22A3 D7            push a
4922   22A4 11            mov a, b
4923   22A5 FA FD FF      lea d, [bp + -3] ; $i
4924   22A8 2A            mov b, [d]
4925   22A9 B0            cmp a, b
4926   22AA FD 71         seq ; ==
4927   22AC E4            pop a
4928   22AD             ; END RELATIONAL
4929   22AD FD A7         sand a, b ; &&
4930   22AF E4            pop a
4931   22B0 E7            pop d
4932   22B1 FD 43         mov [d], b
4933   22B3             _for59_update:
4934   22B3 FA FD FF      lea d, [bp + -3] ; $i
4935   22B6 2A            mov b, [d]
4936   22B7 D8            push b
4937   22B8 FD 77         inc b
4938   22BA FA FD FF      lea d, [bp + -3] ; $i
4939   22BD FD 43         mov [d], b
4940   22BF E5            pop b
4941   22C0 0A 5D 22      jmp _for59_cond
4942   22C3             _for59_exit:
4943   22C3             ;; test8_struct.i1 = 55555; 
4944   22C3 FA E7 FF      lea d, [bp + -25] ; $test8_struct
4945   22C6 58 06 00      add d, 6
4946   22C9 DA            push d
4947   22CA 26 03 D9      mov b, $d903
4948   22CD E7            pop d
4949   22CE FD 43         mov [d], b
4950   22D0             ;; pass = pass && test8_struct.i1 == 55555; 
4951   22D0 FA FF FF      lea d, [bp + -1] ; $pass
4952   22D3 DA            push d
4953   22D4 FA FF FF      lea d, [bp + -1] ; $pass
4954   22D7 2A            mov b, [d]
4955   22D8 D7            push a
4956   22D9 11            mov a, b
4957   22DA FA E7 FF      lea d, [bp + -25] ; $test8_struct
4958   22DD 58 06 00      add d, 6
4959   22E0 2A            mov b, [d]
4960   22E1             ; START RELATIONAL
4961   22E1 D7            push a
4962   22E2 11            mov a, b
4963   22E3 26 03 D9      mov b, $d903
4964   22E6 B0            cmp a, b
4965   22E7 FD 71         seq ; ==
4966   22E9 E4            pop a
4967   22EA             ; END RELATIONAL
4968   22EA FD A7         sand a, b ; &&
4969   22EC E4            pop a
4970   22ED E7            pop d
4971   22EE FD 43         mov [d], b
4972   22F0             ;; for(i = 0; i < 5; i++){ 
4973   22F0             _for60_init:
4974   22F0 FA FD FF      lea d, [bp + -3] ; $i
4975   22F3 DA            push d
4976   22F4 26 00 00      mov b, $0
4977   22F7 E7            pop d
4978   22F8 FD 43         mov [d], b
4979   22FA             _for60_cond:
4980   22FA FA FD FF      lea d, [bp + -3] ; $i
4981   22FD 2A            mov b, [d]
4982   22FE             ; START RELATIONAL
4983   22FE D7            push a
4984   22FF 11            mov a, b
4985   2300 26 05 00      mov b, $5
4986   2303 B0            cmp a, b
4987   2304 FD 73         slt ; <= (signed)
4988   2306 E4            pop a
4989   2307             ; END RELATIONAL
4990   2307 C0 00 00      cmp b, 0
4991   230A C6 64 23      je _for60_exit
4992   230D             _for60_block:
4993   230D             ;; test8_struct.ia[i] = i; 
4994   230D FA E7 FF      lea d, [bp + -25] ; $test8_struct
4995   2310 58 08 00      add d, 8
4996   2313 D7            push a
4997   2314 DA            push d
4998   2315 FA FD FF      lea d, [bp + -3] ; $i
4999   2318 2A            mov b, [d]
5000   2319 E7            pop d
5001   231A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5002   231E E4            pop a
5003   231F DA            push d
5004   2320 FA FD FF      lea d, [bp + -3] ; $i
5005   2323 2A            mov b, [d]
5006   2324 E7            pop d
5007   2325 FD 43         mov [d], b
5008   2327             ;; pass = pass && test8_struct.ia[i] == i; 
5009   2327 FA FF FF      lea d, [bp + -1] ; $pass
5010   232A DA            push d
5011   232B FA FF FF      lea d, [bp + -1] ; $pass
5012   232E 2A            mov b, [d]
5013   232F D7            push a
5014   2330 11            mov a, b
5015   2331 FA E7 FF      lea d, [bp + -25] ; $test8_struct
5016   2334 58 08 00      add d, 8
5017   2337 D7            push a
5018   2338 DA            push d
5019   2339 FA FD FF      lea d, [bp + -3] ; $i
5020   233C 2A            mov b, [d]
5021   233D E7            pop d
5022   233E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5023   2342 E4            pop a
5024   2343 2A            mov b, [d]
5025   2344             ; START RELATIONAL
5026   2344 D7            push a
5027   2345 11            mov a, b
5028   2346 FA FD FF      lea d, [bp + -3] ; $i
5029   2349 2A            mov b, [d]
5030   234A B0            cmp a, b
5031   234B FD 71         seq ; ==
5032   234D E4            pop a
5033   234E             ; END RELATIONAL
5034   234E FD A7         sand a, b ; &&
5035   2350 E4            pop a
5036   2351 E7            pop d
5037   2352 FD 43         mov [d], b
5038   2354             _for60_update:
5039   2354 FA FD FF      lea d, [bp + -3] ; $i
5040   2357 2A            mov b, [d]
5041   2358 D8            push b
5042   2359 FD 77         inc b
5043   235B FA FD FF      lea d, [bp + -3] ; $i
5044   235E FD 43         mov [d], b
5045   2360 E5            pop b
5046   2361 0A FA 22      jmp _for60_cond
5047   2364             _for60_exit:
5048   2364             ;; return pass; 
5049   2364 FA FF FF      lea d, [bp + -1] ; $pass
5050   2367 2A            mov b, [d]
5051   2368 F9            leave
5052   2369 09            ret
5053   236A             
5054   236A             test9:
5055   236A F8 00 00      enter 0 ; (push bp; mov bp, sp)
5056   236D             ; $pass 
5057   236D 10 01 00      mov a, $1
5058   2370 45 FF FF      mov [bp + -1], a
5059   2373             ; $i 
5060   2373             ; $j 
5061   2373             ; $k 
5062   2373             ; $test9_struct 
5063   2373 52 2C 00      sub sp, 44
5064   2376             ;; test9_struct.test9_substruct.c1 = 'A'; 
5065   2376 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5066   2379 58 06 00      add d, 6
5067   237C 58 00 00      add d, 0
5068   237F DA            push d
5069   2380 26 41 00      mov b, $41
5070   2383 E7            pop d
5071   2384 FD 3E         mov [d], bl
5072   2386             ;; pass = pass && test9_struct.test9_substruct.c1 == 'A'; 
5073   2386 FA FF FF      lea d, [bp + -1] ; $pass
5074   2389 DA            push d
5075   238A FA FF FF      lea d, [bp + -1] ; $pass
5076   238D 2A            mov b, [d]
5077   238E D7            push a
5078   238F 11            mov a, b
5079   2390 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5080   2393 58 06 00      add d, 6
5081   2396 58 00 00      add d, 0
5082   2399 32            mov bl, [d]
5083   239A A7 00         mov bh, 0
5084   239C             ; START RELATIONAL
5085   239C D7            push a
5086   239D 11            mov a, b
5087   239E 26 41 00      mov b, $41
5088   23A1 B0            cmp a, b
5089   23A2 FD 71         seq ; ==
5090   23A4 E4            pop a
5091   23A5             ; END RELATIONAL
5092   23A5 FD A7         sand a, b ; &&
5093   23A7 E4            pop a
5094   23A8 E7            pop d
5095   23A9 FD 43         mov [d], b
5096   23AB             ;; for(i = 0; i < 5; i++){ 
5097   23AB             _for61_init:
5098   23AB FA FD FF      lea d, [bp + -3] ; $i
5099   23AE DA            push d
5100   23AF 26 00 00      mov b, $0
5101   23B2 E7            pop d
5102   23B3 FD 43         mov [d], b
5103   23B5             _for61_cond:
5104   23B5 FA FD FF      lea d, [bp + -3] ; $i
5105   23B8 2A            mov b, [d]
5106   23B9             ; START RELATIONAL
5107   23B9 D7            push a
5108   23BA 11            mov a, b
5109   23BB 26 05 00      mov b, $5
5110   23BE B0            cmp a, b
5111   23BF FD 73         slt ; <= (signed)
5112   23C1 E4            pop a
5113   23C2             ; END RELATIONAL
5114   23C2 C0 00 00      cmp b, 0
5115   23C5 C6 21 24      je _for61_exit
5116   23C8             _for61_block:
5117   23C8             ;; test9_struct.test9_substruct.ca[i] = i; 
5118   23C8 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5119   23CB 58 06 00      add d, 6
5120   23CE 58 01 00      add d, 1
5121   23D1 D7            push a
5122   23D2 DA            push d
5123   23D3 FA FD FF      lea d, [bp + -3] ; $i
5124   23D6 2A            mov b, [d]
5125   23D7 E7            pop d
5126   23D8 5A            add d, b
5127   23D9 E4            pop a
5128   23DA DA            push d
5129   23DB FA FD FF      lea d, [bp + -3] ; $i
5130   23DE 2A            mov b, [d]
5131   23DF E7            pop d
5132   23E0 FD 3E         mov [d], bl
5133   23E2             ;; pass = pass && test9_struct.test9_substruct.ca[i] == i; 
5134   23E2 FA FF FF      lea d, [bp + -1] ; $pass
5135   23E5 DA            push d
5136   23E6 FA FF FF      lea d, [bp + -1] ; $pass
5137   23E9 2A            mov b, [d]
5138   23EA D7            push a
5139   23EB 11            mov a, b
5140   23EC FA D5 FF      lea d, [bp + -43] ; $test9_struct
5141   23EF 58 06 00      add d, 6
5142   23F2 58 01 00      add d, 1
5143   23F5 D7            push a
5144   23F6 DA            push d
5145   23F7 FA FD FF      lea d, [bp + -3] ; $i
5146   23FA 2A            mov b, [d]
5147   23FB E7            pop d
5148   23FC 5A            add d, b
5149   23FD E4            pop a
5150   23FE 32            mov bl, [d]
5151   23FF A7 00         mov bh, 0
5152   2401             ; START RELATIONAL
5153   2401 D7            push a
5154   2402 11            mov a, b
5155   2403 FA FD FF      lea d, [bp + -3] ; $i
5156   2406 2A            mov b, [d]
5157   2407 B0            cmp a, b
5158   2408 FD 71         seq ; ==
5159   240A E4            pop a
5160   240B             ; END RELATIONAL
5161   240B FD A7         sand a, b ; &&
5162   240D E4            pop a
5163   240E E7            pop d
5164   240F FD 43         mov [d], b
5165   2411             _for61_update:
5166   2411 FA FD FF      lea d, [bp + -3] ; $i
5167   2414 2A            mov b, [d]
5168   2415 D8            push b
5169   2416 FD 77         inc b
5170   2418 FA FD FF      lea d, [bp + -3] ; $i
5171   241B FD 43         mov [d], b
5172   241D E5            pop b
5173   241E 0A B5 23      jmp _for61_cond
5174   2421             _for61_exit:
5175   2421             ;; test9_struct.test9_substruct.i1 = 55555; 
5176   2421 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5177   2424 58 06 00      add d, 6
5178   2427 58 06 00      add d, 6
5179   242A DA            push d
5180   242B 26 03 D9      mov b, $d903
5181   242E E7            pop d
5182   242F FD 43         mov [d], b
5183   2431             ;; pass = pass && test9_struct.test9_substruct.i1 == 55555; 
5184   2431 FA FF FF      lea d, [bp + -1] ; $pass
5185   2434 DA            push d
5186   2435 FA FF FF      lea d, [bp + -1] ; $pass
5187   2438 2A            mov b, [d]
5188   2439 D7            push a
5189   243A 11            mov a, b
5190   243B FA D5 FF      lea d, [bp + -43] ; $test9_struct
5191   243E 58 06 00      add d, 6
5192   2441 58 06 00      add d, 6
5193   2444 2A            mov b, [d]
5194   2445             ; START RELATIONAL
5195   2445 D7            push a
5196   2446 11            mov a, b
5197   2447 26 03 D9      mov b, $d903
5198   244A B0            cmp a, b
5199   244B FD 71         seq ; ==
5200   244D E4            pop a
5201   244E             ; END RELATIONAL
5202   244E FD A7         sand a, b ; &&
5203   2450 E4            pop a
5204   2451 E7            pop d
5205   2452 FD 43         mov [d], b
5206   2454             ;; for(i = 0; i < 5; i++){ 
5207   2454             _for62_init:
5208   2454 FA FD FF      lea d, [bp + -3] ; $i
5209   2457 DA            push d
5210   2458 26 00 00      mov b, $0
5211   245B E7            pop d
5212   245C FD 43         mov [d], b
5213   245E             _for62_cond:
5214   245E FA FD FF      lea d, [bp + -3] ; $i
5215   2461 2A            mov b, [d]
5216   2462             ; START RELATIONAL
5217   2462 D7            push a
5218   2463 11            mov a, b
5219   2464 26 05 00      mov b, $5
5220   2467 B0            cmp a, b
5221   2468 FD 73         slt ; <= (signed)
5222   246A E4            pop a
5223   246B             ; END RELATIONAL
5224   246B C0 00 00      cmp b, 0
5225   246E C6 CE 24      je _for62_exit
5226   2471             _for62_block:
5227   2471             ;; test9_struct.test9_substruct.ia[i] = i; 
5228   2471 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5229   2474 58 06 00      add d, 6
5230   2477 58 08 00      add d, 8
5231   247A D7            push a
5232   247B DA            push d
5233   247C FA FD FF      lea d, [bp + -3] ; $i
5234   247F 2A            mov b, [d]
5235   2480 E7            pop d
5236   2481 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5237   2485 E4            pop a
5238   2486 DA            push d
5239   2487 FA FD FF      lea d, [bp + -3] ; $i
5240   248A 2A            mov b, [d]
5241   248B E7            pop d
5242   248C FD 43         mov [d], b
5243   248E             ;; pass = pass && test9_struct.test9_substruct.ia[i] == i; 
5244   248E FA FF FF      lea d, [bp + -1] ; $pass
5245   2491 DA            push d
5246   2492 FA FF FF      lea d, [bp + -1] ; $pass
5247   2495 2A            mov b, [d]
5248   2496 D7            push a
5249   2497 11            mov a, b
5250   2498 FA D5 FF      lea d, [bp + -43] ; $test9_struct
5251   249B 58 06 00      add d, 6
5252   249E 58 08 00      add d, 8
5253   24A1 D7            push a
5254   24A2 DA            push d
5255   24A3 FA FD FF      lea d, [bp + -3] ; $i
5256   24A6 2A            mov b, [d]
5257   24A7 E7            pop d
5258   24A8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5259   24AC E4            pop a
5260   24AD 2A            mov b, [d]
5261   24AE             ; START RELATIONAL
5262   24AE D7            push a
5263   24AF 11            mov a, b
5264   24B0 FA FD FF      lea d, [bp + -3] ; $i
5265   24B3 2A            mov b, [d]
5266   24B4 B0            cmp a, b
5267   24B5 FD 71         seq ; ==
5268   24B7 E4            pop a
5269   24B8             ; END RELATIONAL
5270   24B8 FD A7         sand a, b ; &&
5271   24BA E4            pop a
5272   24BB E7            pop d
5273   24BC FD 43         mov [d], b
5274   24BE             _for62_update:
5275   24BE FA FD FF      lea d, [bp + -3] ; $i
5276   24C1 2A            mov b, [d]
5277   24C2 D8            push b
5278   24C3 FD 77         inc b
5279   24C5 FA FD FF      lea d, [bp + -3] ; $i
5280   24C8 FD 43         mov [d], b
5281   24CA E5            pop b
5282   24CB 0A 5E 24      jmp _for62_cond
5283   24CE             _for62_exit:
5284   24CE             ;; return pass; 
5285   24CE FA FF FF      lea d, [bp + -1] ; $pass
5286   24D1 2A            mov b, [d]
5287   24D2 F9            leave
5288   24D3 09            ret
5289   24D4             ; --- END TEXT BLOCK
5290   24D4             
5291   24D4             ; --- BEGIN DATA BLOCK
5292   24D4             _gca1_data: 
5293   24D4 30 31 32 33 .db $30,$31,$32,$33,$34,
5293   24D8 34 
5294   24D9             _gia1_data: 
5295   24D9 00 00 01 00 .dw 0,1,2,3,4,
5295   24DD 02 00 03 00 
5295   24E1 04 00 
5296   24E3 00 00 00 00 _gca2_data: .fill 25, 0
5296   24E7 00 00 00 00 
5296   24EB 00 00 00 00 
5296   24EF 00 00 00 00 
5296   24F3 00 00 00 00 
5296   24F7 00 00 00 00 
5296   24FB 00 
5297   24FC 00 00 00 00 _gia2_data: .fill 50, 0
5297   2500 00 00 00 00 
5297   2504 00 00 00 00 
5297   2508 00 00 00 00 
5297   250C 00 00 00 00 
5297   2510 00 00 00 00 
5297   2514 00 00 00 00 
5297   2518 00 00 00 00 
5297   251C 00 00 00 00 
5297   2520 00 00 00 00 
5297   2524 00 00 00 00 
5297   2528 00 00 00 00 
5297   252C 00 00 
5298   252E 00 00 00 00 _test6_struct_data: .fill 18, 0
5298   2532 00 00 00 00 
5298   2536 00 00 00 00 
5298   253A 00 00 00 00 
5298   253E 00 00 
5299   2540 00 00 00 00 _test7_struct_data: .fill 36, 0
5299   2544 00 00 00 00 
5299   2548 00 00 00 00 
5299   254C 00 00 00 00 
5299   2550 00 00 00 00 
5299   2554 00 00 00 00 
5299   2558 00 00 00 00 
5299   255C 00 00 00 00 
5299   2560 00 00 00 00 
5300   2564 54 65 73 74 __s0: .db "Test %d, Result: %d\n", 0
5300   2568 20 25 64 2C 
5300   256C 20 52 65 73 
5300   2570 75 6C 74 3A 
5300   2574 20 25 64 0A 
5300   2578 00 
5301   2579 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
5301   257D 70 65 63 74 
5301   2581 65 64 20 66 
5301   2585 6F 72 6D 61 
5301   2589 74 20 69 6E 
5301   258D 20 70 72 69 
5301   2591 6E 74 66 2E 
5301   2595 00 
5302   2596 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
5302   259A 72 3A 20 55 
5302   259E 6E 6B 6E 6F 
5302   25A2 77 6E 20 61 
5302   25A6 72 67 75 6D 
5302   25AA 65 6E 74 20 
5302   25AE 74 79 70 65 
5302   25B2 2E 0A 00 
5303   25B5 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
5303   25B9 1B 5B 48 00 
5304   25BD             
5305   25BD BF 25       _heap_top: .dw _heap
5306   25BF 00          _heap: .db 0
5307   25C0             ; --- END DATA BLOCK
5308   25C0             
5309   25C0             .end
tasm: Number of errors = 0
