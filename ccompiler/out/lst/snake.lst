0001   0000             ; --- FILENAME: programs/snake.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int i; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; for (i = 0; i < 8; i++) { 
0013   040B             _for1_init:
0014   040B FA FF FF      lea d, [bp + -1] ; $i
0015   040E DA            push d
0016   040F 26 00 00      mov b, $0
0017   0412 E7            pop d
0018   0413 FD 43         mov [d], b
0019   0415             _for1_cond:
0020   0415 FA FF FF      lea d, [bp + -1] ; $i
0021   0418 2A            mov b, [d]
0022   0419             ; --- START RELATIONAL
0023   0419 D7            push a
0024   041A 11            mov a, b
0025   041B 26 08 00      mov b, $8
0026   041E B0            cmp a, b
0027   041F FD 73         slt ; < (signed)
0028   0421 E4            pop a
0029   0422             ; --- END RELATIONAL
0030   0422 C0 00 00      cmp b, 0
0031   0425 C6 6D 04      je _for1_exit
0032   0428             _for1_block:
0033   0428             ; snake_x[i] = 20 - i; 
0034   0428 3B 54 24      mov d, _snake_x_data ; $snake_x
0035   042B D7            push a
0036   042C DA            push d
0037   042D FA FF FF      lea d, [bp + -1] ; $i
0038   0430 2A            mov b, [d]
0039   0431 E7            pop d
0040   0432 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0041   0436 E4            pop a
0042   0437 DA            push d
0043   0438 26 14 00      mov b, $14
0044   043B             ; --- START TERMS
0045   043B D7            push a
0046   043C 11            mov a, b
0047   043D FA FF FF      lea d, [bp + -1] ; $i
0048   0440 2A            mov b, [d]
0049   0441 60            sub a, b
0050   0442 27            mov b, a
0051   0443 E4            pop a
0052   0444             ; --- END TERMS
0053   0444 E7            pop d
0054   0445 FD 43         mov [d], b
0055   0447             ; snake_y[i] = 10; 
0056   0447 3B 64 24      mov d, _snake_y_data ; $snake_y
0057   044A D7            push a
0058   044B DA            push d
0059   044C FA FF FF      lea d, [bp + -1] ; $i
0060   044F 2A            mov b, [d]
0061   0450 E7            pop d
0062   0451 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0063   0455 E4            pop a
0064   0456 DA            push d
0065   0457 26 0A 00      mov b, $a
0066   045A E7            pop d
0067   045B FD 43         mov [d], b
0068   045D             _for1_update:
0069   045D FA FF FF      lea d, [bp + -1] ; $i
0070   0460 2A            mov b, [d]
0071   0461 FD 77         inc b
0072   0463 FA FF FF      lea d, [bp + -1] ; $i
0073   0466 FD 43         mov [d], b
0074   0468 FD 7D         dec b
0075   046A 0A 15 04      jmp _for1_cond
0076   046D             _for1_exit:
0077   046D             ; while (1) { 
0078   046D             _while2_cond:
0079   046D 26 01 00      mov b, $1
0080   0470 C0 00 00      cmp b, 0
0081   0473 C6 7F 04      je _while2_exit
0082   0476             _while2_block:
0083   0476             ; draw_board(); 
0084   0476 07 F7 1F      call draw_board
0085   0479             ; update_snake(); 
0086   0479 07 7C 21      call update_snake
0087   047C 0A 6D 04      jmp _while2_cond
0088   047F             _while2_exit:
0089   047F             ; return 0; 
0090   047F 26 00 00      mov b, $0
0091   0482 F9            leave
0092   0483 05 0B         syscall sys_terminate_proc
0093   0485             
0094   0485             strcpy:
0095   0485 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0096   0488             ; char *psrc; 
0097   0488 52 02 00      sub sp, 2
0098   048B             ; char *pdest; 
0099   048B 52 02 00      sub sp, 2
0100   048E             ; psrc = src; 
0101   048E FA FF FF      lea d, [bp + -1] ; $psrc
0102   0491 DA            push d
0103   0492 FA 07 00      lea d, [bp + 7] ; $src
0104   0495 2A            mov b, [d]
0105   0496 E7            pop d
0106   0497 FD 43         mov [d], b
0107   0499             ; pdest = dest; 
0108   0499 FA FD FF      lea d, [bp + -3] ; $pdest
0109   049C DA            push d
0110   049D FA 05 00      lea d, [bp + 5] ; $dest
0111   04A0 2A            mov b, [d]
0112   04A1 E7            pop d
0113   04A2 FD 43         mov [d], b
0114   04A4             ; while(*psrc) *pdest++ = *psrc++; 
0115   04A4             _while3_cond:
0116   04A4 FA FF FF      lea d, [bp + -1] ; $psrc
0117   04A7 2A            mov b, [d]
0118   04A8 74            mov d, b
0119   04A9 32            mov bl, [d]
0120   04AA A7 00         mov bh, 0
0121   04AC C0 00 00      cmp b, 0
0122   04AF C6 D7 04      je _while3_exit
0123   04B2             _while3_block:
0124   04B2             ; *pdest++ = *psrc++; 
0125   04B2 FA FD FF      lea d, [bp + -3] ; $pdest
0126   04B5 2A            mov b, [d]
0127   04B6 FD 77         inc b
0128   04B8 FA FD FF      lea d, [bp + -3] ; $pdest
0129   04BB FD 43         mov [d], b
0130   04BD FD 7D         dec b
0131   04BF D8            push b
0132   04C0 FA FF FF      lea d, [bp + -1] ; $psrc
0133   04C3 2A            mov b, [d]
0134   04C4 FD 77         inc b
0135   04C6 FA FF FF      lea d, [bp + -1] ; $psrc
0136   04C9 FD 43         mov [d], b
0137   04CB FD 7D         dec b
0138   04CD 74            mov d, b
0139   04CE 32            mov bl, [d]
0140   04CF A7 00         mov bh, 0
0141   04D1 E7            pop d
0142   04D2 FD 3E         mov [d], bl
0143   04D4 0A A4 04      jmp _while3_cond
0144   04D7             _while3_exit:
0145   04D7             ; *pdest = '\0'; 
0146   04D7 FA FD FF      lea d, [bp + -3] ; $pdest
0147   04DA 2A            mov b, [d]
0148   04DB D8            push b
0149   04DC 26 00 00      mov b, $0
0150   04DF E7            pop d
0151   04E0 FD 3E         mov [d], bl
0152   04E2 F9            leave
0153   04E3 09            ret
0154   04E4             
0155   04E4             strcmp:
0156   04E4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0157   04E7             ; while (*s1 && (*s1 == *s2)) { 
0158   04E7             _while4_cond:
0159   04E7 FA 05 00      lea d, [bp + 5] ; $s1
0160   04EA 2A            mov b, [d]
0161   04EB 74            mov d, b
0162   04EC 32            mov bl, [d]
0163   04ED A7 00         mov bh, 0
0164   04EF             ; --- START LOGICAL AND
0165   04EF D7            push a
0166   04F0 11            mov a, b
0167   04F1 FA 05 00      lea d, [bp + 5] ; $s1
0168   04F4 2A            mov b, [d]
0169   04F5 74            mov d, b
0170   04F6 32            mov bl, [d]
0171   04F7 A7 00         mov bh, 0
0172   04F9             ; --- START RELATIONAL
0173   04F9 D7            push a
0174   04FA 11            mov a, b
0175   04FB FA 07 00      lea d, [bp + 7] ; $s2
0176   04FE 2A            mov b, [d]
0177   04FF 74            mov d, b
0178   0500 32            mov bl, [d]
0179   0501 A7 00         mov bh, 0
0180   0503 B0            cmp a, b
0181   0504 FD 71         seq ; ==
0182   0506 E4            pop a
0183   0507             ; --- END RELATIONAL
0184   0507 FD A7         sand a, b
0185   0509 E4            pop a
0186   050A             ; --- END LOGICAL AND
0187   050A C0 00 00      cmp b, 0
0188   050D C6 2D 05      je _while4_exit
0189   0510             _while4_block:
0190   0510             ; s1++; 
0191   0510 FA 05 00      lea d, [bp + 5] ; $s1
0192   0513 2A            mov b, [d]
0193   0514 FD 77         inc b
0194   0516 FA 05 00      lea d, [bp + 5] ; $s1
0195   0519 FD 43         mov [d], b
0196   051B FD 7D         dec b
0197   051D             ; s2++; 
0198   051D FA 07 00      lea d, [bp + 7] ; $s2
0199   0520 2A            mov b, [d]
0200   0521 FD 77         inc b
0201   0523 FA 07 00      lea d, [bp + 7] ; $s2
0202   0526 FD 43         mov [d], b
0203   0528 FD 7D         dec b
0204   052A 0A E7 04      jmp _while4_cond
0205   052D             _while4_exit:
0206   052D             ; return *s1 - *s2; 
0207   052D FA 05 00      lea d, [bp + 5] ; $s1
0208   0530 2A            mov b, [d]
0209   0531 74            mov d, b
0210   0532 32            mov bl, [d]
0211   0533 A7 00         mov bh, 0
0212   0535             ; --- START TERMS
0213   0535 D7            push a
0214   0536 11            mov a, b
0215   0537 FA 07 00      lea d, [bp + 7] ; $s2
0216   053A 2A            mov b, [d]
0217   053B 74            mov d, b
0218   053C 32            mov bl, [d]
0219   053D A7 00         mov bh, 0
0220   053F 60            sub a, b
0221   0540 27            mov b, a
0222   0541 E4            pop a
0223   0542             ; --- END TERMS
0224   0542 F9            leave
0225   0543 09            ret
0226   0544             
0227   0544             strncmp:
0228   0544 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0229   0547 F9            leave
0230   0548 09            ret
0231   0549             
0232   0549             strcat:
0233   0549 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0234   054C             ; int dest_len; 
0235   054C 52 02 00      sub sp, 2
0236   054F             ; int i; 
0237   054F 52 02 00      sub sp, 2
0238   0552             ; dest_len = strlen(dest); 
0239   0552 FA FF FF      lea d, [bp + -1] ; $dest_len
0240   0555 DA            push d
0241   0556 FA 05 00      lea d, [bp + 5] ; $dest
0242   0559 2A            mov b, [d]
0243   055A FD AB         swp b
0244   055C D8            push b
0245   055D 07 FF 05      call strlen
0246   0560 51 02 00      add sp, 2
0247   0563 E7            pop d
0248   0564 FD 43         mov [d], b
0249   0566             ; for (i = 0; src[i] != 0; i=i+1) { 
0250   0566             _for5_init:
0251   0566 FA FD FF      lea d, [bp + -3] ; $i
0252   0569 DA            push d
0253   056A 26 00 00      mov b, $0
0254   056D E7            pop d
0255   056E FD 43         mov [d], b
0256   0570             _for5_cond:
0257   0570 FA 07 00      lea d, [bp + 7] ; $src
0258   0573 FD 2A         mov d, [d]
0259   0575 D7            push a
0260   0576 DA            push d
0261   0577 FA FD FF      lea d, [bp + -3] ; $i
0262   057A 2A            mov b, [d]
0263   057B E7            pop d
0264   057C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0265   0580 E4            pop a
0266   0581 32            mov bl, [d]
0267   0582 A7 00         mov bh, 0
0268   0584             ; --- START RELATIONAL
0269   0584 D7            push a
0270   0585 11            mov a, b
0271   0586 26 00 00      mov b, $0
0272   0589 B0            cmp a, b
0273   058A FD 72         sneq ; !=
0274   058C E4            pop a
0275   058D             ; --- END RELATIONAL
0276   058D C0 00 00      cmp b, 0
0277   0590 C6 D9 05      je _for5_exit
0278   0593             _for5_block:
0279   0593             ; dest[dest_len + i] = src[i]; 
0280   0593 FA 05 00      lea d, [bp + 5] ; $dest
0281   0596 FD 2A         mov d, [d]
0282   0598 D7            push a
0283   0599 DA            push d
0284   059A FA FF FF      lea d, [bp + -1] ; $dest_len
0285   059D 2A            mov b, [d]
0286   059E             ; --- START TERMS
0287   059E D7            push a
0288   059F 11            mov a, b
0289   05A0 FA FD FF      lea d, [bp + -3] ; $i
0290   05A3 2A            mov b, [d]
0291   05A4 56            add b, a
0292   05A5 E4            pop a
0293   05A6             ; --- END TERMS
0294   05A6 E7            pop d
0295   05A7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0296   05AB E4            pop a
0297   05AC DA            push d
0298   05AD FA 07 00      lea d, [bp + 7] ; $src
0299   05B0 FD 2A         mov d, [d]
0300   05B2 D7            push a
0301   05B3 DA            push d
0302   05B4 FA FD FF      lea d, [bp + -3] ; $i
0303   05B7 2A            mov b, [d]
0304   05B8 E7            pop d
0305   05B9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0306   05BD E4            pop a
0307   05BE 32            mov bl, [d]
0308   05BF A7 00         mov bh, 0
0309   05C1 E7            pop d
0310   05C2 FD 3E         mov [d], bl
0311   05C4             _for5_update:
0312   05C4 FA FD FF      lea d, [bp + -3] ; $i
0313   05C7 DA            push d
0314   05C8 FA FD FF      lea d, [bp + -3] ; $i
0315   05CB 2A            mov b, [d]
0316   05CC             ; --- START TERMS
0317   05CC D7            push a
0318   05CD 11            mov a, b
0319   05CE 26 01 00      mov b, $1
0320   05D1 56            add b, a
0321   05D2 E4            pop a
0322   05D3             ; --- END TERMS
0323   05D3 E7            pop d
0324   05D4 FD 43         mov [d], b
0325   05D6 0A 70 05      jmp _for5_cond
0326   05D9             _for5_exit:
0327   05D9             ; dest[dest_len + i] = 0; 
0328   05D9 FA 05 00      lea d, [bp + 5] ; $dest
0329   05DC FD 2A         mov d, [d]
0330   05DE D7            push a
0331   05DF DA            push d
0332   05E0 FA FF FF      lea d, [bp + -1] ; $dest_len
0333   05E3 2A            mov b, [d]
0334   05E4             ; --- START TERMS
0335   05E4 D7            push a
0336   05E5 11            mov a, b
0337   05E6 FA FD FF      lea d, [bp + -3] ; $i
0338   05E9 2A            mov b, [d]
0339   05EA 56            add b, a
0340   05EB E4            pop a
0341   05EC             ; --- END TERMS
0342   05EC E7            pop d
0343   05ED FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0344   05F1 E4            pop a
0345   05F2 DA            push d
0346   05F3 26 00 00      mov b, $0
0347   05F6 E7            pop d
0348   05F7 FD 3E         mov [d], bl
0349   05F9             ; return dest; 
0350   05F9 FA 05 00      lea d, [bp + 5] ; $dest
0351   05FC 2A            mov b, [d]
0352   05FD F9            leave
0353   05FE 09            ret
0354   05FF             
0355   05FF             strlen:
0356   05FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0357   0602             ; int length; 
0358   0602 52 02 00      sub sp, 2
0359   0605             ; length = 0; 
0360   0605 FA FF FF      lea d, [bp + -1] ; $length
0361   0608 DA            push d
0362   0609 26 00 00      mov b, $0
0363   060C E7            pop d
0364   060D FD 43         mov [d], b
0365   060F             ; while (str[length] != 0) { 
0366   060F             _while6_cond:
0367   060F FA 05 00      lea d, [bp + 5] ; $str
0368   0612 FD 2A         mov d, [d]
0369   0614 D7            push a
0370   0615 DA            push d
0371   0616 FA FF FF      lea d, [bp + -1] ; $length
0372   0619 2A            mov b, [d]
0373   061A E7            pop d
0374   061B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0375   061F E4            pop a
0376   0620 32            mov bl, [d]
0377   0621 A7 00         mov bh, 0
0378   0623             ; --- START RELATIONAL
0379   0623 D7            push a
0380   0624 11            mov a, b
0381   0625 26 00 00      mov b, $0
0382   0628 B0            cmp a, b
0383   0629 FD 72         sneq ; !=
0384   062B E4            pop a
0385   062C             ; --- END RELATIONAL
0386   062C C0 00 00      cmp b, 0
0387   062F C6 42 06      je _while6_exit
0388   0632             _while6_block:
0389   0632             ; length++; 
0390   0632 FA FF FF      lea d, [bp + -1] ; $length
0391   0635 2A            mov b, [d]
0392   0636 FD 77         inc b
0393   0638 FA FF FF      lea d, [bp + -1] ; $length
0394   063B FD 43         mov [d], b
0395   063D FD 7D         dec b
0396   063F 0A 0F 06      jmp _while6_cond
0397   0642             _while6_exit:
0398   0642             ; return length; 
0399   0642 FA FF FF      lea d, [bp + -1] ; $length
0400   0645 2A            mov b, [d]
0401   0646 F9            leave
0402   0647 09            ret
0403   0648             
0404   0648             exit:
0405   0648 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0406   064B             
0407   064B             ; --- BEGIN INLINE ASM SEGMENT
0408   064B 05 0B         syscall sys_terminate_proc
0409   064D             ; --- END INLINE ASM SEGMENT
0410   064D             
0411   064D F9            leave
0412   064E 09            ret
0413   064F             
0414   064F             memset:
0415   064F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0416   0652             ; int i; 
0417   0652 52 02 00      sub sp, 2
0418   0655             ; for(i = 0; i < size; i++){ 
0419   0655             _for7_init:
0420   0655 FA FF FF      lea d, [bp + -1] ; $i
0421   0658 DA            push d
0422   0659 26 00 00      mov b, $0
0423   065C E7            pop d
0424   065D FD 43         mov [d], b
0425   065F             _for7_cond:
0426   065F FA FF FF      lea d, [bp + -1] ; $i
0427   0662 2A            mov b, [d]
0428   0663             ; --- START RELATIONAL
0429   0663 D7            push a
0430   0664 11            mov a, b
0431   0665 FA 08 00      lea d, [bp + 8] ; $size
0432   0668 2A            mov b, [d]
0433   0669 B0            cmp a, b
0434   066A FD 73         slt ; < (signed)
0435   066C E4            pop a
0436   066D             ; --- END RELATIONAL
0437   066D C0 00 00      cmp b, 0
0438   0670 C6 99 06      je _for7_exit
0439   0673             _for7_block:
0440   0673             ; *(s+i) = c; 
0441   0673 FA 05 00      lea d, [bp + 5] ; $s
0442   0676 2A            mov b, [d]
0443   0677             ; --- START TERMS
0444   0677 D7            push a
0445   0678 11            mov a, b
0446   0679 FA FF FF      lea d, [bp + -1] ; $i
0447   067C 2A            mov b, [d]
0448   067D 56            add b, a
0449   067E E4            pop a
0450   067F             ; --- END TERMS
0451   067F D8            push b
0452   0680 FA 07 00      lea d, [bp + 7] ; $c
0453   0683 32            mov bl, [d]
0454   0684 A7 00         mov bh, 0
0455   0686 E7            pop d
0456   0687 FD 3E         mov [d], bl
0457   0689             _for7_update:
0458   0689 FA FF FF      lea d, [bp + -1] ; $i
0459   068C 2A            mov b, [d]
0460   068D FD 77         inc b
0461   068F FA FF FF      lea d, [bp + -1] ; $i
0462   0692 FD 43         mov [d], b
0463   0694 FD 7D         dec b
0464   0696 0A 5F 06      jmp _for7_cond
0465   0699             _for7_exit:
0466   0699             ; return s; 
0467   0699 FA 05 00      lea d, [bp + 5] ; $s
0468   069C 2A            mov b, [d]
0469   069D F9            leave
0470   069E 09            ret
0471   069F             
0472   069F             atoi:
0473   069F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0474   06A2             ; int result = 0;  // Initialize result 
0475   06A2 52 02 00      sub sp, 2
0476   06A5             ; --- START LOCAL VAR INITIALIZATION
0477   06A5 FA FF FF      lea d, [bp + -1] ; $result
0478   06A8 DA            push d
0479   06A9 26 00 00      mov b, $0
0480   06AC E7            pop d
0481   06AD FD 43         mov [d], b
0482   06AF             ; --- END LOCAL VAR INITIALIZATION
0483   06AF             ; int sign = 1;    // Initialize sign as positive 
0484   06AF 52 02 00      sub sp, 2
0485   06B2             ; --- START LOCAL VAR INITIALIZATION
0486   06B2 FA FD FF      lea d, [bp + -3] ; $sign
0487   06B5 DA            push d
0488   06B6 26 01 00      mov b, $1
0489   06B9 E7            pop d
0490   06BA FD 43         mov [d], b
0491   06BC             ; --- END LOCAL VAR INITIALIZATION
0492   06BC             ; while (*str == ' ') str++; 
0493   06BC             _while8_cond:
0494   06BC FA 05 00      lea d, [bp + 5] ; $str
0495   06BF 2A            mov b, [d]
0496   06C0 74            mov d, b
0497   06C1 32            mov bl, [d]
0498   06C2 A7 00         mov bh, 0
0499   06C4             ; --- START RELATIONAL
0500   06C4 D7            push a
0501   06C5 11            mov a, b
0502   06C6 26 20 00      mov b, $20
0503   06C9 B0            cmp a, b
0504   06CA FD 71         seq ; ==
0505   06CC E4            pop a
0506   06CD             ; --- END RELATIONAL
0507   06CD C0 00 00      cmp b, 0
0508   06D0 C6 E3 06      je _while8_exit
0509   06D3             _while8_block:
0510   06D3             ; str++; 
0511   06D3 FA 05 00      lea d, [bp + 5] ; $str
0512   06D6 2A            mov b, [d]
0513   06D7 FD 77         inc b
0514   06D9 FA 05 00      lea d, [bp + 5] ; $str
0515   06DC FD 43         mov [d], b
0516   06DE FD 7D         dec b
0517   06E0 0A BC 06      jmp _while8_cond
0518   06E3             _while8_exit:
0519   06E3             ; if (*str == '-' || *str == '+') { 
0520   06E3             _if9_cond:
0521   06E3 FA 05 00      lea d, [bp + 5] ; $str
0522   06E6 2A            mov b, [d]
0523   06E7 74            mov d, b
0524   06E8 32            mov bl, [d]
0525   06E9 A7 00         mov bh, 0
0526   06EB             ; --- START RELATIONAL
0527   06EB D7            push a
0528   06EC 11            mov a, b
0529   06ED 26 2D 00      mov b, $2d
0530   06F0 B0            cmp a, b
0531   06F1 FD 71         seq ; ==
0532   06F3 E4            pop a
0533   06F4             ; --- END RELATIONAL
0534   06F4             ; --- START LOGICAL OR
0535   06F4 D7            push a
0536   06F5 11            mov a, b
0537   06F6 FA 05 00      lea d, [bp + 5] ; $str
0538   06F9 2A            mov b, [d]
0539   06FA 74            mov d, b
0540   06FB 32            mov bl, [d]
0541   06FC A7 00         mov bh, 0
0542   06FE             ; --- START RELATIONAL
0543   06FE D7            push a
0544   06FF 11            mov a, b
0545   0700 26 2B 00      mov b, $2b
0546   0703 B0            cmp a, b
0547   0704 FD 71         seq ; ==
0548   0706 E4            pop a
0549   0707             ; --- END RELATIONAL
0550   0707 FD A8         sor a, b ; ||
0551   0709 E4            pop a
0552   070A             ; --- END LOGICAL OR
0553   070A C0 00 00      cmp b, 0
0554   070D C6 46 07      je _if9_exit
0555   0710             _if9_true:
0556   0710             ; if (*str == '-') sign = -1; 
0557   0710             _if10_cond:
0558   0710 FA 05 00      lea d, [bp + 5] ; $str
0559   0713 2A            mov b, [d]
0560   0714 74            mov d, b
0561   0715 32            mov bl, [d]
0562   0716 A7 00         mov bh, 0
0563   0718             ; --- START RELATIONAL
0564   0718 D7            push a
0565   0719 11            mov a, b
0566   071A 26 2D 00      mov b, $2d
0567   071D B0            cmp a, b
0568   071E FD 71         seq ; ==
0569   0720 E4            pop a
0570   0721             ; --- END RELATIONAL
0571   0721 C0 00 00      cmp b, 0
0572   0724 C6 36 07      je _if10_exit
0573   0727             _if10_true:
0574   0727             ; sign = -1; 
0575   0727 FA FD FF      lea d, [bp + -3] ; $sign
0576   072A DA            push d
0577   072B 26 01 00      mov b, $1
0578   072E FD 97         neg b
0579   0730 E7            pop d
0580   0731 FD 43         mov [d], b
0581   0733 0A 36 07      jmp _if10_exit
0582   0736             _if10_exit:
0583   0736             ; str++; 
0584   0736 FA 05 00      lea d, [bp + 5] ; $str
0585   0739 2A            mov b, [d]
0586   073A FD 77         inc b
0587   073C FA 05 00      lea d, [bp + 5] ; $str
0588   073F FD 43         mov [d], b
0589   0741 FD 7D         dec b
0590   0743 0A 46 07      jmp _if9_exit
0591   0746             _if9_exit:
0592   0746             ; while (*str >= '0' && *str <= '9') { 
0593   0746             _while11_cond:
0594   0746 FA 05 00      lea d, [bp + 5] ; $str
0595   0749 2A            mov b, [d]
0596   074A 74            mov d, b
0597   074B 32            mov bl, [d]
0598   074C A7 00         mov bh, 0
0599   074E             ; --- START RELATIONAL
0600   074E D7            push a
0601   074F 11            mov a, b
0602   0750 26 30 00      mov b, $30
0603   0753 B0            cmp a, b
0604   0754 FD 82         sgeu ; >= (unsigned)
0605   0756 E4            pop a
0606   0757             ; --- END RELATIONAL
0607   0757             ; --- START LOGICAL AND
0608   0757 D7            push a
0609   0758 11            mov a, b
0610   0759 FA 05 00      lea d, [bp + 5] ; $str
0611   075C 2A            mov b, [d]
0612   075D 74            mov d, b
0613   075E 32            mov bl, [d]
0614   075F A7 00         mov bh, 0
0615   0761             ; --- START RELATIONAL
0616   0761 D7            push a
0617   0762 11            mov a, b
0618   0763 26 39 00      mov b, $39
0619   0766 B0            cmp a, b
0620   0767 FD 76         sleu ; <= (unsigned)
0621   0769 E4            pop a
0622   076A             ; --- END RELATIONAL
0623   076A FD A7         sand a, b
0624   076C E4            pop a
0625   076D             ; --- END LOGICAL AND
0626   076D C0 00 00      cmp b, 0
0627   0770 C6 AB 07      je _while11_exit
0628   0773             _while11_block:
0629   0773             ; result = result * 10 + (*str - '0'); 
0630   0773 FA FF FF      lea d, [bp + -1] ; $result
0631   0776 DA            push d
0632   0777 FA FF FF      lea d, [bp + -1] ; $result
0633   077A 2A            mov b, [d]
0634   077B             ; --- START FACTORS
0635   077B D7            push a
0636   077C 11            mov a, b
0637   077D 26 0A 00      mov b, $a
0638   0780 AC            mul a, b ; *
0639   0781 11            mov a, b
0640   0782 27            mov b, a
0641   0783 E4            pop a
0642   0784             ; --- END FACTORS
0643   0784             ; --- START TERMS
0644   0784 D7            push a
0645   0785 11            mov a, b
0646   0786 FA 05 00      lea d, [bp + 5] ; $str
0647   0789 2A            mov b, [d]
0648   078A 74            mov d, b
0649   078B 32            mov bl, [d]
0650   078C A7 00         mov bh, 0
0651   078E             ; --- START TERMS
0652   078E D7            push a
0653   078F 11            mov a, b
0654   0790 26 30 00      mov b, $30
0655   0793 60            sub a, b
0656   0794 27            mov b, a
0657   0795 E4            pop a
0658   0796             ; --- END TERMS
0659   0796 56            add b, a
0660   0797 E4            pop a
0661   0798             ; --- END TERMS
0662   0798 E7            pop d
0663   0799 FD 43         mov [d], b
0664   079B             ; str++; 
0665   079B FA 05 00      lea d, [bp + 5] ; $str
0666   079E 2A            mov b, [d]
0667   079F FD 77         inc b
0668   07A1 FA 05 00      lea d, [bp + 5] ; $str
0669   07A4 FD 43         mov [d], b
0670   07A6 FD 7D         dec b
0671   07A8 0A 46 07      jmp _while11_cond
0672   07AB             _while11_exit:
0673   07AB             ; return sign * result; 
0674   07AB FA FD FF      lea d, [bp + -3] ; $sign
0675   07AE 2A            mov b, [d]
0676   07AF             ; --- START FACTORS
0677   07AF D7            push a
0678   07B0 11            mov a, b
0679   07B1 FA FF FF      lea d, [bp + -1] ; $result
0680   07B4 2A            mov b, [d]
0681   07B5 AC            mul a, b ; *
0682   07B6 11            mov a, b
0683   07B7 27            mov b, a
0684   07B8 E4            pop a
0685   07B9             ; --- END FACTORS
0686   07B9 F9            leave
0687   07BA 09            ret
0688   07BB             
0689   07BB             rand:
0690   07BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0691   07BE             ; int  sec; 
0692   07BE 52 02 00      sub sp, 2
0693   07C1             
0694   07C1             ; --- BEGIN INLINE ASM SEGMENT
0695   07C1 19 00         mov al, 0
0696   07C3 05 01         syscall sys_rtc					
0697   07C5 1A            mov al, ah
0698   07C6 FA FF FF      lea d, [bp + -1] ; $sec
0699   07C9 1E            mov al, [d]
0700   07CA 22 00         mov ah, 0
0701   07CC             ; --- END INLINE ASM SEGMENT
0702   07CC             
0703   07CC             ; return sec; 
0704   07CC FA FF FF      lea d, [bp + -1] ; $sec
0705   07CF 2A            mov b, [d]
0706   07D0 F9            leave
0707   07D1 09            ret
0708   07D2             
0709   07D2             alloc:
0710   07D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0711   07D5             ; heap_top = heap_top + bytes; 
0712   07D5 3B C3 24      mov d, _heap_top ; $heap_top
0713   07D8 DA            push d
0714   07D9 3B C3 24      mov d, _heap_top ; $heap_top
0715   07DC 2A            mov b, [d]
0716   07DD             ; --- START TERMS
0717   07DD D7            push a
0718   07DE 11            mov a, b
0719   07DF FA 05 00      lea d, [bp + 5] ; $bytes
0720   07E2 2A            mov b, [d]
0721   07E3 56            add b, a
0722   07E4 E4            pop a
0723   07E5             ; --- END TERMS
0724   07E5 E7            pop d
0725   07E6 FD 43         mov [d], b
0726   07E8             ; return heap_top - bytes; 
0727   07E8 3B C3 24      mov d, _heap_top ; $heap_top
0728   07EB 2A            mov b, [d]
0729   07EC             ; --- START TERMS
0730   07EC D7            push a
0731   07ED 11            mov a, b
0732   07EE FA 05 00      lea d, [bp + 5] ; $bytes
0733   07F1 2A            mov b, [d]
0734   07F2 60            sub a, b
0735   07F3 27            mov b, a
0736   07F4 E4            pop a
0737   07F5             ; --- END TERMS
0738   07F5 F9            leave
0739   07F6 09            ret
0740   07F7             
0741   07F7             free:
0742   07F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0743   07FA             ; return heap_top = heap_top - bytes; 
0744   07FA 3B C3 24      mov d, _heap_top ; $heap_top
0745   07FD DA            push d
0746   07FE 3B C3 24      mov d, _heap_top ; $heap_top
0747   0801 2A            mov b, [d]
0748   0802             ; --- START TERMS
0749   0802 D7            push a
0750   0803 11            mov a, b
0751   0804 FA 05 00      lea d, [bp + 5] ; $bytes
0752   0807 2A            mov b, [d]
0753   0808 60            sub a, b
0754   0809 27            mov b, a
0755   080A E4            pop a
0756   080B             ; --- END TERMS
0757   080B E7            pop d
0758   080C FD 43         mov [d], b
0759   080E F9            leave
0760   080F 09            ret
0761   0810             
0762   0810             fopen:
0763   0810 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0764   0813             ; FILE *fp; 
0765   0813 52 02 00      sub sp, 2
0766   0816             ; static int max_handle = 0; 
0767   0816 52 02 00      sub sp, 2
0768   0819             ; fp = alloc(sizeof(FILE)); 
0769   0819 FA FF FF      lea d, [bp + -1] ; $fp
0770   081C DA            push d
0771   081D 26 04 01      mov b, 260
0772   0820 FD AB         swp b
0773   0822 D8            push b
0774   0823 07 D2 07      call alloc
0775   0826 51 02 00      add sp, 2
0776   0829 E7            pop d
0777   082A FD 43         mov [d], b
0778   082C             ; strcpy(fp->filename, filename); 
0779   082C FA 05 00      lea d, [bp + 5] ; $filename
0780   082F 2A            mov b, [d]
0781   0830 FD AB         swp b
0782   0832 D8            push b
0783   0833 FA FF FF      lea d, [bp + -1] ; $fp
0784   0836 FD 2A         mov d, [d]
0785   0838 58 02 00      add d, 2
0786   083B 2D            mov b, d
0787   083C FD AB         swp b
0788   083E D8            push b
0789   083F 07 85 04      call strcpy
0790   0842 51 04 00      add sp, 4
0791   0845             ; fp->handle = max_handle; 
0792   0845 FA FF FF      lea d, [bp + -1] ; $fp
0793   0848 FD 2A         mov d, [d]
0794   084A 58 00 00      add d, 0
0795   084D DA            push d
0796   084E 3B 78 24      mov d, st_fopen_max_handle ; static max_handle
0797   0851 2A            mov b, [d]
0798   0852 E7            pop d
0799   0853 FD 43         mov [d], b
0800   0855             ; fp->mode = mode; 
0801   0855 FA FF FF      lea d, [bp + -1] ; $fp
0802   0858 FD 2A         mov d, [d]
0803   085A 58 02 01      add d, 258
0804   085D DA            push d
0805   085E FA 07 00      lea d, [bp + 7] ; $mode
0806   0861 32            mov bl, [d]
0807   0862 A7 00         mov bh, 0
0808   0864 E7            pop d
0809   0865 FD 3E         mov [d], bl
0810   0867             ; fp->loc = 0; 
0811   0867 FA FF FF      lea d, [bp + -1] ; $fp
0812   086A FD 2A         mov d, [d]
0813   086C 58 03 01      add d, 259
0814   086F DA            push d
0815   0870 26 00 00      mov b, $0
0816   0873 E7            pop d
0817   0874 FD 3E         mov [d], bl
0818   0876             ; max_handle++; 
0819   0876 3B 78 24      mov d, st_fopen_max_handle ; static max_handle
0820   0879 2A            mov b, [d]
0821   087A FD 77         inc b
0822   087C 3B 78 24      mov d, st_fopen_max_handle ; static max_handle
0823   087F FD 43         mov [d], b
0824   0881 FD 7D         dec b
0825   0883 F9            leave
0826   0884 09            ret
0827   0885             
0828   0885             fclose:
0829   0885 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0830   0888             ; free(sizeof(FILE)); 
0831   0888 26 04 01      mov b, 260
0832   088B FD AB         swp b
0833   088D D8            push b
0834   088E 07 F7 07      call free
0835   0891 51 02 00      add sp, 2
0836   0894 F9            leave
0837   0895 09            ret
0838   0896             
0839   0896             printf:
0840   0896 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0841   0899             ; char *p, *format_p; 
0842   0899 52 02 00      sub sp, 2
0843   089C 52 02 00      sub sp, 2
0844   089F             ; format_p = format; 
0845   089F FA FD FF      lea d, [bp + -3] ; $format_p
0846   08A2 DA            push d
0847   08A3 FA 05 00      lea d, [bp + 5] ; $format
0848   08A6 2A            mov b, [d]
0849   08A7 E7            pop d
0850   08A8 FD 43         mov [d], b
0851   08AA             ; p = &format + 2; 
0852   08AA FA FF FF      lea d, [bp + -1] ; $p
0853   08AD DA            push d
0854   08AE FA 05 00      lea d, [bp + 5] ; $format
0855   08B1 2D            mov b, d
0856   08B2             ; --- START TERMS
0857   08B2 D7            push a
0858   08B3 11            mov a, b
0859   08B4 26 02 00      mov b, $2
0860   08B7 56            add b, a
0861   08B8 E4            pop a
0862   08B9             ; --- END TERMS
0863   08B9 E7            pop d
0864   08BA FD 43         mov [d], b
0865   08BC             ; for(;;){ 
0866   08BC             _for12_init:
0867   08BC             _for12_cond:
0868   08BC             _for12_block:
0869   08BC             ; if(!*format_p) break; 
0870   08BC             _if13_cond:
0871   08BC FA FD FF      lea d, [bp + -3] ; $format_p
0872   08BF 2A            mov b, [d]
0873   08C0 74            mov d, b
0874   08C1 32            mov bl, [d]
0875   08C2 A7 00         mov bh, 0
0876   08C4 C0 00 00      cmp b, 0
0877   08C7 FD 71         seq ; !
0878   08C9 C0 00 00      cmp b, 0
0879   08CC C6 D5 08      je _if13_else
0880   08CF             _if13_true:
0881   08CF             ; break; 
0882   08CF 0A FC 0A      jmp _for12_exit ; for break
0883   08D2 0A F9 0A      jmp _if13_exit
0884   08D5             _if13_else:
0885   08D5             ; if(*format_p == '%'){ 
0886   08D5             _if14_cond:
0887   08D5 FA FD FF      lea d, [bp + -3] ; $format_p
0888   08D8 2A            mov b, [d]
0889   08D9 74            mov d, b
0890   08DA 32            mov bl, [d]
0891   08DB A7 00         mov bh, 0
0892   08DD             ; --- START RELATIONAL
0893   08DD D7            push a
0894   08DE 11            mov a, b
0895   08DF 26 25 00      mov b, $25
0896   08E2 B0            cmp a, b
0897   08E3 FD 71         seq ; ==
0898   08E5 E4            pop a
0899   08E6             ; --- END RELATIONAL
0900   08E6 C0 00 00      cmp b, 0
0901   08E9 C6 DD 0A      je _if14_else
0902   08EC             _if14_true:
0903   08EC             ; format_p++; 
0904   08EC FA FD FF      lea d, [bp + -3] ; $format_p
0905   08EF 2A            mov b, [d]
0906   08F0 FD 77         inc b
0907   08F2 FA FD FF      lea d, [bp + -3] ; $format_p
0908   08F5 FD 43         mov [d], b
0909   08F7 FD 7D         dec b
0910   08F9             ; switch(*format_p){ 
0911   08F9             _switch15_expr:
0912   08F9 FA FD FF      lea d, [bp + -3] ; $format_p
0913   08FC 2A            mov b, [d]
0914   08FD 74            mov d, b
0915   08FE 32            mov bl, [d]
0916   08FF A7 00         mov bh, 0
0917   0901             _switch15_comparisons:
0918   0901 C1 6C         cmp bl, $6c
0919   0903 C6 2F 09      je _switch15_case0
0920   0906 C1 4C         cmp bl, $4c
0921   0908 C6 2F 09      je _switch15_case1
0922   090B C1 64         cmp bl, $64
0923   090D C6 1D 0A      je _switch15_case2
0924   0910 C1 69         cmp bl, $69
0925   0912 C6 1D 0A      je _switch15_case3
0926   0915 C1 75         cmp bl, $75
0927   0917 C6 41 0A      je _switch15_case4
0928   091A C1 78         cmp bl, $78
0929   091C C6 65 0A      je _switch15_case5
0930   091F C1 63         cmp bl, $63
0931   0921 C6 83 0A      je _switch15_case6
0932   0924 C1 73         cmp bl, $73
0933   0926 C6 A2 0A      je _switch15_case7
0934   0929 0A C1 0A      jmp _switch15_default
0935   092C 0A CD 0A      jmp _switch15_exit
0936   092F             _switch15_case0:
0937   092F             _switch15_case1:
0938   092F             ; format_p++; 
0939   092F FA FD FF      lea d, [bp + -3] ; $format_p
0940   0932 2A            mov b, [d]
0941   0933 FD 77         inc b
0942   0935 FA FD FF      lea d, [bp + -3] ; $format_p
0943   0938 FD 43         mov [d], b
0944   093A FD 7D         dec b
0945   093C             ; if(*format_p == 'd' || *format_p == 'i') 
0946   093C             _if16_cond:
0947   093C FA FD FF      lea d, [bp + -3] ; $format_p
0948   093F 2A            mov b, [d]
0949   0940 74            mov d, b
0950   0941 32            mov bl, [d]
0951   0942 A7 00         mov bh, 0
0952   0944             ; --- START RELATIONAL
0953   0944 D7            push a
0954   0945 11            mov a, b
0955   0946 26 64 00      mov b, $64
0956   0949 B0            cmp a, b
0957   094A FD 71         seq ; ==
0958   094C E4            pop a
0959   094D             ; --- END RELATIONAL
0960   094D             ; --- START LOGICAL OR
0961   094D D7            push a
0962   094E 11            mov a, b
0963   094F FA FD FF      lea d, [bp + -3] ; $format_p
0964   0952 2A            mov b, [d]
0965   0953 74            mov d, b
0966   0954 32            mov bl, [d]
0967   0955 A7 00         mov bh, 0
0968   0957             ; --- START RELATIONAL
0969   0957 D7            push a
0970   0958 11            mov a, b
0971   0959 26 69 00      mov b, $69
0972   095C B0            cmp a, b
0973   095D FD 71         seq ; ==
0974   095F E4            pop a
0975   0960             ; --- END RELATIONAL
0976   0960 FD A8         sor a, b ; ||
0977   0962 E4            pop a
0978   0963             ; --- END LOGICAL OR
0979   0963 C0 00 00      cmp b, 0
0980   0966 C6 8B 09      je _if16_else
0981   0969             _if16_true:
0982   0969             ; print_signed_long(*(long *)p); 
0983   0969 FA FF FF      lea d, [bp + -1] ; $p
0984   096C 2A            mov b, [d]
0985   096D AB            snex b
0986   096E FD 39         mov c, b
0987   0970 74            mov d, b
0988   0971 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0989   0974 FD 39         mov c, b ; And place it into C
0990   0976 2A            mov b, [d] ; Lower Word in B
0991   0977 FD 79         mov g, b
0992   0979 28            mov b, c
0993   097A FD AB         swp b
0994   097C D8            push b
0995   097D FD 27         mov b, g
0996   097F FD AB         swp b
0997   0981 D8            push b
0998   0982 07 ED 12      call print_signed_long
0999   0985 51 04 00      add sp, 4
1000   0988 0A 08 0A      jmp _if16_exit
1001   098B             _if16_else:
1002   098B             ; if(*format_p == 'u') 
1003   098B             _if17_cond:
1004   098B FA FD FF      lea d, [bp + -3] ; $format_p
1005   098E 2A            mov b, [d]
1006   098F 74            mov d, b
1007   0990 32            mov bl, [d]
1008   0991 A7 00         mov bh, 0
1009   0993             ; --- START RELATIONAL
1010   0993 D7            push a
1011   0994 11            mov a, b
1012   0995 26 75 00      mov b, $75
1013   0998 B0            cmp a, b
1014   0999 FD 71         seq ; ==
1015   099B E4            pop a
1016   099C             ; --- END RELATIONAL
1017   099C C0 00 00      cmp b, 0
1018   099F C6 C6 09      je _if17_else
1019   09A2             _if17_true:
1020   09A2             ; print_unsigned_long(*(unsigned long *)p); 
1021   09A2 FA FF FF      lea d, [bp + -1] ; $p
1022   09A5 2A            mov b, [d]
1023   09A6 A7 00         mov bh, 0
1024   09A8 38 00 00      mov c, 0
1025   09AB 74            mov d, b
1026   09AC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1027   09AF FD 39         mov c, b ; And place it into C
1028   09B1 2A            mov b, [d] ; Lower Word in B
1029   09B2 FD 79         mov g, b
1030   09B4 28            mov b, c
1031   09B5 FD AB         swp b
1032   09B7 D8            push b
1033   09B8 FD 27         mov b, g
1034   09BA FD AB         swp b
1035   09BC D8            push b
1036   09BD 07 2D 16      call print_unsigned_long
1037   09C0 51 04 00      add sp, 4
1038   09C3 0A 08 0A      jmp _if17_exit
1039   09C6             _if17_else:
1040   09C6             ; if(*format_p == 'x') 
1041   09C6             _if18_cond:
1042   09C6 FA FD FF      lea d, [bp + -3] ; $format_p
1043   09C9 2A            mov b, [d]
1044   09CA 74            mov d, b
1045   09CB 32            mov bl, [d]
1046   09CC A7 00         mov bh, 0
1047   09CE             ; --- START RELATIONAL
1048   09CE D7            push a
1049   09CF 11            mov a, b
1050   09D0 26 78 00      mov b, $78
1051   09D3 B0            cmp a, b
1052   09D4 FD 71         seq ; ==
1053   09D6 E4            pop a
1054   09D7             ; --- END RELATIONAL
1055   09D7 C0 00 00      cmp b, 0
1056   09DA C6 FC 09      je _if18_else
1057   09DD             _if18_true:
1058   09DD             ; printx32(*(long int *)p); 
1059   09DD FA FF FF      lea d, [bp + -1] ; $p
1060   09E0 2A            mov b, [d]
1061   09E1 74            mov d, b
1062   09E2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1063   09E5 FD 39         mov c, b ; And place it into C
1064   09E7 2A            mov b, [d] ; Lower Word in B
1065   09E8 FD 79         mov g, b
1066   09EA 28            mov b, c
1067   09EB FD AB         swp b
1068   09ED D8            push b
1069   09EE FD 27         mov b, g
1070   09F0 FD AB         swp b
1071   09F2 D8            push b
1072   09F3 07 62 10      call printx32
1073   09F6 51 04 00      add sp, 4
1074   09F9 0A 08 0A      jmp _if18_exit
1075   09FC             _if18_else:
1076   09FC             ; err("Unexpected format in printf."); 
1077   09FC 26 7A 24      mov b, _s0 ; "Unexpected format in printf."
1078   09FF FD AB         swp b
1079   0A01 D8            push b
1080   0A02 07 50 10      call err
1081   0A05 51 02 00      add sp, 2
1082   0A08             _if18_exit:
1083   0A08             _if17_exit:
1084   0A08             _if16_exit:
1085   0A08             ; p = p + 4; 
1086   0A08 FA FF FF      lea d, [bp + -1] ; $p
1087   0A0B DA            push d
1088   0A0C FA FF FF      lea d, [bp + -1] ; $p
1089   0A0F 2A            mov b, [d]
1090   0A10             ; --- START TERMS
1091   0A10 D7            push a
1092   0A11 11            mov a, b
1093   0A12 26 04 00      mov b, $4
1094   0A15 56            add b, a
1095   0A16 E4            pop a
1096   0A17             ; --- END TERMS
1097   0A17 E7            pop d
1098   0A18 FD 43         mov [d], b
1099   0A1A             ; break; 
1100   0A1A 0A CD 0A      jmp _switch15_exit ; case break
1101   0A1D             _switch15_case2:
1102   0A1D             _switch15_case3:
1103   0A1D             ; print_signed(*(int*)p); 
1104   0A1D FA FF FF      lea d, [bp + -1] ; $p
1105   0A20 2A            mov b, [d]
1106   0A21 74            mov d, b
1107   0A22 2A            mov b, [d]
1108   0A23 FD AB         swp b
1109   0A25 D8            push b
1110   0A26 07 F6 11      call print_signed
1111   0A29 51 02 00      add sp, 2
1112   0A2C             ; p = p + 2; 
1113   0A2C FA FF FF      lea d, [bp + -1] ; $p
1114   0A2F DA            push d
1115   0A30 FA FF FF      lea d, [bp + -1] ; $p
1116   0A33 2A            mov b, [d]
1117   0A34             ; --- START TERMS
1118   0A34 D7            push a
1119   0A35 11            mov a, b
1120   0A36 26 02 00      mov b, $2
1121   0A39 56            add b, a
1122   0A3A E4            pop a
1123   0A3B             ; --- END TERMS
1124   0A3B E7            pop d
1125   0A3C FD 43         mov [d], b
1126   0A3E             ; break; 
1127   0A3E 0A CD 0A      jmp _switch15_exit ; case break
1128   0A41             _switch15_case4:
1129   0A41             ; print_unsigned(*(unsigned int*)p); 
1130   0A41 FA FF FF      lea d, [bp + -1] ; $p
1131   0A44 2A            mov b, [d]
1132   0A45 74            mov d, b
1133   0A46 2A            mov b, [d]
1134   0A47 FD AB         swp b
1135   0A49 D8            push b
1136   0A4A 07 32 19      call print_unsigned
1137   0A4D 51 02 00      add sp, 2
1138   0A50             ; p = p + 2; 
1139   0A50 FA FF FF      lea d, [bp + -1] ; $p
1140   0A53 DA            push d
1141   0A54 FA FF FF      lea d, [bp + -1] ; $p
1142   0A57 2A            mov b, [d]
1143   0A58             ; --- START TERMS
1144   0A58 D7            push a
1145   0A59 11            mov a, b
1146   0A5A 26 02 00      mov b, $2
1147   0A5D 56            add b, a
1148   0A5E E4            pop a
1149   0A5F             ; --- END TERMS
1150   0A5F E7            pop d
1151   0A60 FD 43         mov [d], b
1152   0A62             ; break; 
1153   0A62 0A CD 0A      jmp _switch15_exit ; case break
1154   0A65             _switch15_case5:
1155   0A65             
1156   0A65             ; --- BEGIN INLINE ASM SEGMENT
1157   0A65 FA FF FF      lea d, [bp + -1] ; $p
1158   0A68 FD 2A         mov d, [d]
1159   0A6A 2A            mov b, [d]
1160   0A6B 07 F7 1E      call print_u16x
1161   0A6E             ; --- END INLINE ASM SEGMENT
1162   0A6E             
1163   0A6E             ; p = p + 2; 
1164   0A6E FA FF FF      lea d, [bp + -1] ; $p
1165   0A71 DA            push d
1166   0A72 FA FF FF      lea d, [bp + -1] ; $p
1167   0A75 2A            mov b, [d]
1168   0A76             ; --- START TERMS
1169   0A76 D7            push a
1170   0A77 11            mov a, b
1171   0A78 26 02 00      mov b, $2
1172   0A7B 56            add b, a
1173   0A7C E4            pop a
1174   0A7D             ; --- END TERMS
1175   0A7D E7            pop d
1176   0A7E FD 43         mov [d], b
1177   0A80             ; break; 
1178   0A80 0A CD 0A      jmp _switch15_exit ; case break
1179   0A83             _switch15_case6:
1180   0A83             
1181   0A83             ; --- BEGIN INLINE ASM SEGMENT
1182   0A83 FA FF FF      lea d, [bp + -1] ; $p
1183   0A86 FD 2A         mov d, [d]
1184   0A88 1E            mov al, [d]
1185   0A89 23            mov ah, al
1186   0A8A 07 55 1D      call _putchar
1187   0A8D             ; --- END INLINE ASM SEGMENT
1188   0A8D             
1189   0A8D             ; p = p + 1; 
1190   0A8D FA FF FF      lea d, [bp + -1] ; $p
1191   0A90 DA            push d
1192   0A91 FA FF FF      lea d, [bp + -1] ; $p
1193   0A94 2A            mov b, [d]
1194   0A95             ; --- START TERMS
1195   0A95 D7            push a
1196   0A96 11            mov a, b
1197   0A97 26 01 00      mov b, $1
1198   0A9A 56            add b, a
1199   0A9B E4            pop a
1200   0A9C             ; --- END TERMS
1201   0A9C E7            pop d
1202   0A9D FD 43         mov [d], b
1203   0A9F             ; break; 
1204   0A9F 0A CD 0A      jmp _switch15_exit ; case break
1205   0AA2             _switch15_case7:
1206   0AA2             
1207   0AA2             ; --- BEGIN INLINE ASM SEGMENT
1208   0AA2 FA FF FF      lea d, [bp + -1] ; $p
1209   0AA5 FD 2A         mov d, [d]
1210   0AA7 FD 2A         mov d, [d]
1211   0AA9 07 9F 1E      call _puts
1212   0AAC             ; --- END INLINE ASM SEGMENT
1213   0AAC             
1214   0AAC             ; p = p + 2; 
1215   0AAC FA FF FF      lea d, [bp + -1] ; $p
1216   0AAF DA            push d
1217   0AB0 FA FF FF      lea d, [bp + -1] ; $p
1218   0AB3 2A            mov b, [d]
1219   0AB4             ; --- START TERMS
1220   0AB4 D7            push a
1221   0AB5 11            mov a, b
1222   0AB6 26 02 00      mov b, $2
1223   0AB9 56            add b, a
1224   0ABA E4            pop a
1225   0ABB             ; --- END TERMS
1226   0ABB E7            pop d
1227   0ABC FD 43         mov [d], b
1228   0ABE             ; break; 
1229   0ABE 0A CD 0A      jmp _switch15_exit ; case break
1230   0AC1             _switch15_default:
1231   0AC1             ; print("Error: Unknown argument type.\n"); 
1232   0AC1 26 97 24      mov b, _s1 ; "Error: Unknown argument type.\n"
1233   0AC4 FD AB         swp b
1234   0AC6 D8            push b
1235   0AC7 07 A6 1B      call print
1236   0ACA 51 02 00      add sp, 2
1237   0ACD             _switch15_exit:
1238   0ACD             ; format_p++; 
1239   0ACD FA FD FF      lea d, [bp + -3] ; $format_p
1240   0AD0 2A            mov b, [d]
1241   0AD1 FD 77         inc b
1242   0AD3 FA FD FF      lea d, [bp + -3] ; $format_p
1243   0AD6 FD 43         mov [d], b
1244   0AD8 FD 7D         dec b
1245   0ADA 0A F9 0A      jmp _if14_exit
1246   0ADD             _if14_else:
1247   0ADD             ; putchar(*format_p); 
1248   0ADD FA FD FF      lea d, [bp + -3] ; $format_p
1249   0AE0 2A            mov b, [d]
1250   0AE1 74            mov d, b
1251   0AE2 32            mov bl, [d]
1252   0AE3 A7 00         mov bh, 0
1253   0AE5 DD            push bl
1254   0AE6 07 5E 1B      call putchar
1255   0AE9 51 01 00      add sp, 1
1256   0AEC             ; format_p++; 
1257   0AEC FA FD FF      lea d, [bp + -3] ; $format_p
1258   0AEF 2A            mov b, [d]
1259   0AF0 FD 77         inc b
1260   0AF2 FA FD FF      lea d, [bp + -3] ; $format_p
1261   0AF5 FD 43         mov [d], b
1262   0AF7 FD 7D         dec b
1263   0AF9             _if14_exit:
1264   0AF9             _if13_exit:
1265   0AF9             _for12_update:
1266   0AF9 0A BC 08      jmp _for12_cond
1267   0AFC             _for12_exit:
1268   0AFC F9            leave
1269   0AFD 09            ret
1270   0AFE             
1271   0AFE             scanf:
1272   0AFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1273   0B01             ; char *p, *format_p; 
1274   0B01 52 02 00      sub sp, 2
1275   0B04 52 02 00      sub sp, 2
1276   0B07             ; char c; 
1277   0B07 52 01 00      sub sp, 1
1278   0B0A             ; int i; 
1279   0B0A 52 02 00      sub sp, 2
1280   0B0D             ; char input_string[  512                    ]; 
1281   0B0D 52 00 02      sub sp, 512
1282   0B10             ; format_p = format; 
1283   0B10 FA FD FF      lea d, [bp + -3] ; $format_p
1284   0B13 DA            push d
1285   0B14 FA 05 00      lea d, [bp + 5] ; $format
1286   0B17 2A            mov b, [d]
1287   0B18 E7            pop d
1288   0B19 FD 43         mov [d], b
1289   0B1B             ; p = &format + 2; 
1290   0B1B FA FF FF      lea d, [bp + -1] ; $p
1291   0B1E DA            push d
1292   0B1F FA 05 00      lea d, [bp + 5] ; $format
1293   0B22 2D            mov b, d
1294   0B23             ; --- START TERMS
1295   0B23 D7            push a
1296   0B24 11            mov a, b
1297   0B25 26 02 00      mov b, $2
1298   0B28 56            add b, a
1299   0B29 E4            pop a
1300   0B2A             ; --- END TERMS
1301   0B2A E7            pop d
1302   0B2B FD 43         mov [d], b
1303   0B2D             ; for(;;){ 
1304   0B2D             _for19_init:
1305   0B2D             _for19_cond:
1306   0B2D             _for19_block:
1307   0B2D             ; if(!*format_p) break; 
1308   0B2D             _if20_cond:
1309   0B2D FA FD FF      lea d, [bp + -3] ; $format_p
1310   0B30 2A            mov b, [d]
1311   0B31 74            mov d, b
1312   0B32 32            mov bl, [d]
1313   0B33 A7 00         mov bh, 0
1314   0B35 C0 00 00      cmp b, 0
1315   0B38 FD 71         seq ; !
1316   0B3A C0 00 00      cmp b, 0
1317   0B3D C6 46 0B      je _if20_else
1318   0B40             _if20_true:
1319   0B40             ; break; 
1320   0B40 0A 47 0D      jmp _for19_exit ; for break
1321   0B43 0A 44 0D      jmp _if20_exit
1322   0B46             _if20_else:
1323   0B46             ; if(*format_p == '%'){ 
1324   0B46             _if21_cond:
1325   0B46 FA FD FF      lea d, [bp + -3] ; $format_p
1326   0B49 2A            mov b, [d]
1327   0B4A 74            mov d, b
1328   0B4B 32            mov bl, [d]
1329   0B4C A7 00         mov bh, 0
1330   0B4E             ; --- START RELATIONAL
1331   0B4E D7            push a
1332   0B4F 11            mov a, b
1333   0B50 26 25 00      mov b, $25
1334   0B53 B0            cmp a, b
1335   0B54 FD 71         seq ; ==
1336   0B56 E4            pop a
1337   0B57             ; --- END RELATIONAL
1338   0B57 C0 00 00      cmp b, 0
1339   0B5A C6 28 0D      je _if21_else
1340   0B5D             _if21_true:
1341   0B5D             ; format_p++; 
1342   0B5D FA FD FF      lea d, [bp + -3] ; $format_p
1343   0B60 2A            mov b, [d]
1344   0B61 FD 77         inc b
1345   0B63 FA FD FF      lea d, [bp + -3] ; $format_p
1346   0B66 FD 43         mov [d], b
1347   0B68 FD 7D         dec b
1348   0B6A             ; switch(*format_p){ 
1349   0B6A             _switch22_expr:
1350   0B6A FA FD FF      lea d, [bp + -3] ; $format_p
1351   0B6D 2A            mov b, [d]
1352   0B6E 74            mov d, b
1353   0B6F 32            mov bl, [d]
1354   0B70 A7 00         mov bh, 0
1355   0B72             _switch22_comparisons:
1356   0B72 C1 6C         cmp bl, $6c
1357   0B74 C6 A0 0B      je _switch22_case0
1358   0B77 C1 4C         cmp bl, $4c
1359   0B79 C6 A0 0B      je _switch22_case1
1360   0B7C C1 64         cmp bl, $64
1361   0B7E C6 32 0C      je _switch22_case2
1362   0B81 C1 69         cmp bl, $69
1363   0B83 C6 32 0C      je _switch22_case3
1364   0B86 C1 75         cmp bl, $75
1365   0B88 C6 5F 0C      je _switch22_case4
1366   0B8B C1 78         cmp bl, $78
1367   0B8D C6 8C 0C      je _switch22_case5
1368   0B90 C1 63         cmp bl, $63
1369   0B92 C6 A1 0C      je _switch22_case6
1370   0B95 C1 73         cmp bl, $73
1371   0B97 C6 D4 0C      je _switch22_case7
1372   0B9A 0A 0C 0D      jmp _switch22_default
1373   0B9D 0A 18 0D      jmp _switch22_exit
1374   0BA0             _switch22_case0:
1375   0BA0             _switch22_case1:
1376   0BA0             ; format_p++; 
1377   0BA0 FA FD FF      lea d, [bp + -3] ; $format_p
1378   0BA3 2A            mov b, [d]
1379   0BA4 FD 77         inc b
1380   0BA6 FA FD FF      lea d, [bp + -3] ; $format_p
1381   0BA9 FD 43         mov [d], b
1382   0BAB FD 7D         dec b
1383   0BAD             ; if(*format_p == 'd' || *format_p == 'i'); 
1384   0BAD             _if23_cond:
1385   0BAD FA FD FF      lea d, [bp + -3] ; $format_p
1386   0BB0 2A            mov b, [d]
1387   0BB1 74            mov d, b
1388   0BB2 32            mov bl, [d]
1389   0BB3 A7 00         mov bh, 0
1390   0BB5             ; --- START RELATIONAL
1391   0BB5 D7            push a
1392   0BB6 11            mov a, b
1393   0BB7 26 64 00      mov b, $64
1394   0BBA B0            cmp a, b
1395   0BBB FD 71         seq ; ==
1396   0BBD E4            pop a
1397   0BBE             ; --- END RELATIONAL
1398   0BBE             ; --- START LOGICAL OR
1399   0BBE D7            push a
1400   0BBF 11            mov a, b
1401   0BC0 FA FD FF      lea d, [bp + -3] ; $format_p
1402   0BC3 2A            mov b, [d]
1403   0BC4 74            mov d, b
1404   0BC5 32            mov bl, [d]
1405   0BC6 A7 00         mov bh, 0
1406   0BC8             ; --- START RELATIONAL
1407   0BC8 D7            push a
1408   0BC9 11            mov a, b
1409   0BCA 26 69 00      mov b, $69
1410   0BCD B0            cmp a, b
1411   0BCE FD 71         seq ; ==
1412   0BD0 E4            pop a
1413   0BD1             ; --- END RELATIONAL
1414   0BD1 FD A8         sor a, b ; ||
1415   0BD3 E4            pop a
1416   0BD4             ; --- END LOGICAL OR
1417   0BD4 C0 00 00      cmp b, 0
1418   0BD7 C6 DD 0B      je _if23_else
1419   0BDA             _if23_true:
1420   0BDA             ; ; 
1421   0BDA 0A 1D 0C      jmp _if23_exit
1422   0BDD             _if23_else:
1423   0BDD             ; if(*format_p == 'u'); 
1424   0BDD             _if24_cond:
1425   0BDD FA FD FF      lea d, [bp + -3] ; $format_p
1426   0BE0 2A            mov b, [d]
1427   0BE1 74            mov d, b
1428   0BE2 32            mov bl, [d]
1429   0BE3 A7 00         mov bh, 0
1430   0BE5             ; --- START RELATIONAL
1431   0BE5 D7            push a
1432   0BE6 11            mov a, b
1433   0BE7 26 75 00      mov b, $75
1434   0BEA B0            cmp a, b
1435   0BEB FD 71         seq ; ==
1436   0BED E4            pop a
1437   0BEE             ; --- END RELATIONAL
1438   0BEE C0 00 00      cmp b, 0
1439   0BF1 C6 F7 0B      je _if24_else
1440   0BF4             _if24_true:
1441   0BF4             ; ; 
1442   0BF4 0A 1D 0C      jmp _if24_exit
1443   0BF7             _if24_else:
1444   0BF7             ; if(*format_p == 'x'); 
1445   0BF7             _if25_cond:
1446   0BF7 FA FD FF      lea d, [bp + -3] ; $format_p
1447   0BFA 2A            mov b, [d]
1448   0BFB 74            mov d, b
1449   0BFC 32            mov bl, [d]
1450   0BFD A7 00         mov bh, 0
1451   0BFF             ; --- START RELATIONAL
1452   0BFF D7            push a
1453   0C00 11            mov a, b
1454   0C01 26 78 00      mov b, $78
1455   0C04 B0            cmp a, b
1456   0C05 FD 71         seq ; ==
1457   0C07 E4            pop a
1458   0C08             ; --- END RELATIONAL
1459   0C08 C0 00 00      cmp b, 0
1460   0C0B C6 11 0C      je _if25_else
1461   0C0E             _if25_true:
1462   0C0E             ; ; 
1463   0C0E 0A 1D 0C      jmp _if25_exit
1464   0C11             _if25_else:
1465   0C11             ; err("Unexpected format in printf."); 
1466   0C11 26 7A 24      mov b, _s0 ; "Unexpected format in printf."
1467   0C14 FD AB         swp b
1468   0C16 D8            push b
1469   0C17 07 50 10      call err
1470   0C1A 51 02 00      add sp, 2
1471   0C1D             _if25_exit:
1472   0C1D             _if24_exit:
1473   0C1D             _if23_exit:
1474   0C1D             ; p = p + 4; 
1475   0C1D FA FF FF      lea d, [bp + -1] ; $p
1476   0C20 DA            push d
1477   0C21 FA FF FF      lea d, [bp + -1] ; $p
1478   0C24 2A            mov b, [d]
1479   0C25             ; --- START TERMS
1480   0C25 D7            push a
1481   0C26 11            mov a, b
1482   0C27 26 04 00      mov b, $4
1483   0C2A 56            add b, a
1484   0C2B E4            pop a
1485   0C2C             ; --- END TERMS
1486   0C2C E7            pop d
1487   0C2D FD 43         mov [d], b
1488   0C2F             ; break; 
1489   0C2F 0A 18 0D      jmp _switch22_exit ; case break
1490   0C32             _switch22_case2:
1491   0C32             _switch22_case3:
1492   0C32             ; i = scann(); 
1493   0C32 FA FA FF      lea d, [bp + -6] ; $i
1494   0C35 DA            push d
1495   0C36 07 81 1B      call scann
1496   0C39 E7            pop d
1497   0C3A FD 43         mov [d], b
1498   0C3C             ; **(int **)p = i; 
1499   0C3C FA FF FF      lea d, [bp + -1] ; $p
1500   0C3F 2A            mov b, [d]
1501   0C40 74            mov d, b
1502   0C41 2A            mov b, [d]
1503   0C42 D8            push b
1504   0C43 FA FA FF      lea d, [bp + -6] ; $i
1505   0C46 2A            mov b, [d]
1506   0C47 E7            pop d
1507   0C48 FD 43         mov [d], b
1508   0C4A             ; p = p + 2; 
1509   0C4A FA FF FF      lea d, [bp + -1] ; $p
1510   0C4D DA            push d
1511   0C4E FA FF FF      lea d, [bp + -1] ; $p
1512   0C51 2A            mov b, [d]
1513   0C52             ; --- START TERMS
1514   0C52 D7            push a
1515   0C53 11            mov a, b
1516   0C54 26 02 00      mov b, $2
1517   0C57 56            add b, a
1518   0C58 E4            pop a
1519   0C59             ; --- END TERMS
1520   0C59 E7            pop d
1521   0C5A FD 43         mov [d], b
1522   0C5C             ; break; 
1523   0C5C 0A 18 0D      jmp _switch22_exit ; case break
1524   0C5F             _switch22_case4:
1525   0C5F             ; i = scann(); 
1526   0C5F FA FA FF      lea d, [bp + -6] ; $i
1527   0C62 DA            push d
1528   0C63 07 81 1B      call scann
1529   0C66 E7            pop d
1530   0C67 FD 43         mov [d], b
1531   0C69             ; **(int **)p = i; 
1532   0C69 FA FF FF      lea d, [bp + -1] ; $p
1533   0C6C 2A            mov b, [d]
1534   0C6D 74            mov d, b
1535   0C6E 2A            mov b, [d]
1536   0C6F D8            push b
1537   0C70 FA FA FF      lea d, [bp + -6] ; $i
1538   0C73 2A            mov b, [d]
1539   0C74 E7            pop d
1540   0C75 FD 43         mov [d], b
1541   0C77             ; p = p + 2; 
1542   0C77 FA FF FF      lea d, [bp + -1] ; $p
1543   0C7A DA            push d
1544   0C7B FA FF FF      lea d, [bp + -1] ; $p
1545   0C7E 2A            mov b, [d]
1546   0C7F             ; --- START TERMS
1547   0C7F D7            push a
1548   0C80 11            mov a, b
1549   0C81 26 02 00      mov b, $2
1550   0C84 56            add b, a
1551   0C85 E4            pop a
1552   0C86             ; --- END TERMS
1553   0C86 E7            pop d
1554   0C87 FD 43         mov [d], b
1555   0C89             ; break; 
1556   0C89 0A 18 0D      jmp _switch22_exit ; case break
1557   0C8C             _switch22_case5:
1558   0C8C             ; p = p + 2; 
1559   0C8C FA FF FF      lea d, [bp + -1] ; $p
1560   0C8F DA            push d
1561   0C90 FA FF FF      lea d, [bp + -1] ; $p
1562   0C93 2A            mov b, [d]
1563   0C94             ; --- START TERMS
1564   0C94 D7            push a
1565   0C95 11            mov a, b
1566   0C96 26 02 00      mov b, $2
1567   0C99 56            add b, a
1568   0C9A E4            pop a
1569   0C9B             ; --- END TERMS
1570   0C9B E7            pop d
1571   0C9C FD 43         mov [d], b
1572   0C9E             ; break; 
1573   0C9E 0A 18 0D      jmp _switch22_exit ; case break
1574   0CA1             _switch22_case6:
1575   0CA1             ; c = getchar(); 
1576   0CA1 FA FC FF      lea d, [bp + -4] ; $c
1577   0CA4 DA            push d
1578   0CA5 07 6B 1B      call getchar
1579   0CA8 E7            pop d
1580   0CA9 FD 3E         mov [d], bl
1581   0CAB             ; **(char **)p = *(char *)c; 
1582   0CAB FA FF FF      lea d, [bp + -1] ; $p
1583   0CAE 2A            mov b, [d]
1584   0CAF 74            mov d, b
1585   0CB0 2A            mov b, [d]
1586   0CB1 D8            push b
1587   0CB2 FA FC FF      lea d, [bp + -4] ; $c
1588   0CB5 32            mov bl, [d]
1589   0CB6 A7 00         mov bh, 0
1590   0CB8 74            mov d, b
1591   0CB9 32            mov bl, [d]
1592   0CBA A7 00         mov bh, 0
1593   0CBC E7            pop d
1594   0CBD FD 43         mov [d], b
1595   0CBF             ; p = p + 1; 
1596   0CBF FA FF FF      lea d, [bp + -1] ; $p
1597   0CC2 DA            push d
1598   0CC3 FA FF FF      lea d, [bp + -1] ; $p
1599   0CC6 2A            mov b, [d]
1600   0CC7             ; --- START TERMS
1601   0CC7 D7            push a
1602   0CC8 11            mov a, b
1603   0CC9 26 01 00      mov b, $1
1604   0CCC 56            add b, a
1605   0CCD E4            pop a
1606   0CCE             ; --- END TERMS
1607   0CCE E7            pop d
1608   0CCF FD 43         mov [d], b
1609   0CD1             ; break; 
1610   0CD1 0A 18 0D      jmp _switch22_exit ; case break
1611   0CD4             _switch22_case7:
1612   0CD4             ; gets(input_string); 
1613   0CD4 FA FA FD      lea d, [bp + -518] ; $input_string
1614   0CD7 2D            mov b, d
1615   0CD8 FD AB         swp b
1616   0CDA D8            push b
1617   0CDB 07 DC 11      call gets
1618   0CDE 51 02 00      add sp, 2
1619   0CE1             ; strcpy(*(char **)p, input_string); 
1620   0CE1 FA FA FD      lea d, [bp + -518] ; $input_string
1621   0CE4 2D            mov b, d
1622   0CE5 FD AB         swp b
1623   0CE7 D8            push b
1624   0CE8 FA FF FF      lea d, [bp + -1] ; $p
1625   0CEB 2A            mov b, [d]
1626   0CEC 74            mov d, b
1627   0CED 2A            mov b, [d]
1628   0CEE FD AB         swp b
1629   0CF0 D8            push b
1630   0CF1 07 85 04      call strcpy
1631   0CF4 51 04 00      add sp, 4
1632   0CF7             ; p = p + 2; 
1633   0CF7 FA FF FF      lea d, [bp + -1] ; $p
1634   0CFA DA            push d
1635   0CFB FA FF FF      lea d, [bp + -1] ; $p
1636   0CFE 2A            mov b, [d]
1637   0CFF             ; --- START TERMS
1638   0CFF D7            push a
1639   0D00 11            mov a, b
1640   0D01 26 02 00      mov b, $2
1641   0D04 56            add b, a
1642   0D05 E4            pop a
1643   0D06             ; --- END TERMS
1644   0D06 E7            pop d
1645   0D07 FD 43         mov [d], b
1646   0D09             ; break; 
1647   0D09 0A 18 0D      jmp _switch22_exit ; case break
1648   0D0C             _switch22_default:
1649   0D0C             ; print("Error: Unknown argument type.\n"); 
1650   0D0C 26 97 24      mov b, _s1 ; "Error: Unknown argument type.\n"
1651   0D0F FD AB         swp b
1652   0D11 D8            push b
1653   0D12 07 A6 1B      call print
1654   0D15 51 02 00      add sp, 2
1655   0D18             _switch22_exit:
1656   0D18             ; format_p++; 
1657   0D18 FA FD FF      lea d, [bp + -3] ; $format_p
1658   0D1B 2A            mov b, [d]
1659   0D1C FD 77         inc b
1660   0D1E FA FD FF      lea d, [bp + -3] ; $format_p
1661   0D21 FD 43         mov [d], b
1662   0D23 FD 7D         dec b
1663   0D25 0A 44 0D      jmp _if21_exit
1664   0D28             _if21_else:
1665   0D28             ; putchar(*format_p); 
1666   0D28 FA FD FF      lea d, [bp + -3] ; $format_p
1667   0D2B 2A            mov b, [d]
1668   0D2C 74            mov d, b
1669   0D2D 32            mov bl, [d]
1670   0D2E A7 00         mov bh, 0
1671   0D30 DD            push bl
1672   0D31 07 5E 1B      call putchar
1673   0D34 51 01 00      add sp, 1
1674   0D37             ; format_p++; 
1675   0D37 FA FD FF      lea d, [bp + -3] ; $format_p
1676   0D3A 2A            mov b, [d]
1677   0D3B FD 77         inc b
1678   0D3D FA FD FF      lea d, [bp + -3] ; $format_p
1679   0D40 FD 43         mov [d], b
1680   0D42 FD 7D         dec b
1681   0D44             _if21_exit:
1682   0D44             _if20_exit:
1683   0D44             _for19_update:
1684   0D44 0A 2D 0B      jmp _for19_cond
1685   0D47             _for19_exit:
1686   0D47 F9            leave
1687   0D48 09            ret
1688   0D49             
1689   0D49             sprintf:
1690   0D49 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1691   0D4C             ; char *p, *format_p; 
1692   0D4C 52 02 00      sub sp, 2
1693   0D4F 52 02 00      sub sp, 2
1694   0D52             ; char *sp; 
1695   0D52 52 02 00      sub sp, 2
1696   0D55             ; sp = dest; 
1697   0D55 FA FB FF      lea d, [bp + -5] ; $sp
1698   0D58 DA            push d
1699   0D59 FA 05 00      lea d, [bp + 5] ; $dest
1700   0D5C 2A            mov b, [d]
1701   0D5D E7            pop d
1702   0D5E FD 43         mov [d], b
1703   0D60             ; format_p = format; 
1704   0D60 FA FD FF      lea d, [bp + -3] ; $format_p
1705   0D63 DA            push d
1706   0D64 FA 07 00      lea d, [bp + 7] ; $format
1707   0D67 2A            mov b, [d]
1708   0D68 E7            pop d
1709   0D69 FD 43         mov [d], b
1710   0D6B             ; p = &format + 2; 
1711   0D6B FA FF FF      lea d, [bp + -1] ; $p
1712   0D6E DA            push d
1713   0D6F FA 07 00      lea d, [bp + 7] ; $format
1714   0D72 2D            mov b, d
1715   0D73             ; --- START TERMS
1716   0D73 D7            push a
1717   0D74 11            mov a, b
1718   0D75 26 02 00      mov b, $2
1719   0D78 56            add b, a
1720   0D79 E4            pop a
1721   0D7A             ; --- END TERMS
1722   0D7A E7            pop d
1723   0D7B FD 43         mov [d], b
1724   0D7D             ; for(;;){ 
1725   0D7D             _for26_init:
1726   0D7D             _for26_cond:
1727   0D7D             _for26_block:
1728   0D7D             ; if(!*format_p) break; 
1729   0D7D             _if27_cond:
1730   0D7D FA FD FF      lea d, [bp + -3] ; $format_p
1731   0D80 2A            mov b, [d]
1732   0D81 74            mov d, b
1733   0D82 32            mov bl, [d]
1734   0D83 A7 00         mov bh, 0
1735   0D85 C0 00 00      cmp b, 0
1736   0D88 FD 71         seq ; !
1737   0D8A C0 00 00      cmp b, 0
1738   0D8D C6 96 0D      je _if27_else
1739   0D90             _if27_true:
1740   0D90             ; break; 
1741   0D90 0A 36 10      jmp _for26_exit ; for break
1742   0D93 0A 33 10      jmp _if27_exit
1743   0D96             _if27_else:
1744   0D96             ; if(*format_p == '%'){ 
1745   0D96             _if28_cond:
1746   0D96 FA FD FF      lea d, [bp + -3] ; $format_p
1747   0D99 2A            mov b, [d]
1748   0D9A 74            mov d, b
1749   0D9B 32            mov bl, [d]
1750   0D9C A7 00         mov bh, 0
1751   0D9E             ; --- START RELATIONAL
1752   0D9E D7            push a
1753   0D9F 11            mov a, b
1754   0DA0 26 25 00      mov b, $25
1755   0DA3 B0            cmp a, b
1756   0DA4 FD 71         seq ; ==
1757   0DA6 E4            pop a
1758   0DA7             ; --- END RELATIONAL
1759   0DA7 C0 00 00      cmp b, 0
1760   0DAA C6 11 10      je _if28_else
1761   0DAD             _if28_true:
1762   0DAD             ; format_p++; 
1763   0DAD FA FD FF      lea d, [bp + -3] ; $format_p
1764   0DB0 2A            mov b, [d]
1765   0DB1 FD 77         inc b
1766   0DB3 FA FD FF      lea d, [bp + -3] ; $format_p
1767   0DB6 FD 43         mov [d], b
1768   0DB8 FD 7D         dec b
1769   0DBA             ; switch(*format_p){ 
1770   0DBA             _switch29_expr:
1771   0DBA FA FD FF      lea d, [bp + -3] ; $format_p
1772   0DBD 2A            mov b, [d]
1773   0DBE 74            mov d, b
1774   0DBF 32            mov bl, [d]
1775   0DC0 A7 00         mov bh, 0
1776   0DC2             _switch29_comparisons:
1777   0DC2 C1 6C         cmp bl, $6c
1778   0DC4 C6 F0 0D      je _switch29_case0
1779   0DC7 C1 4C         cmp bl, $4c
1780   0DC9 C6 F0 0D      je _switch29_case1
1781   0DCC C1 64         cmp bl, $64
1782   0DCE C6 DE 0E      je _switch29_case2
1783   0DD1 C1 69         cmp bl, $69
1784   0DD3 C6 DE 0E      je _switch29_case3
1785   0DD6 C1 75         cmp bl, $75
1786   0DD8 C6 18 0F      je _switch29_case4
1787   0DDB C1 78         cmp bl, $78
1788   0DDD C6 52 0F      je _switch29_case5
1789   0DE0 C1 63         cmp bl, $63
1790   0DE2 C6 70 0F      je _switch29_case6
1791   0DE5 C1 73         cmp bl, $73
1792   0DE7 C6 9E 0F      je _switch29_case7
1793   0DEA 0A F5 0F      jmp _switch29_default
1794   0DED 0A 01 10      jmp _switch29_exit
1795   0DF0             _switch29_case0:
1796   0DF0             _switch29_case1:
1797   0DF0             ; format_p++; 
1798   0DF0 FA FD FF      lea d, [bp + -3] ; $format_p
1799   0DF3 2A            mov b, [d]
1800   0DF4 FD 77         inc b
1801   0DF6 FA FD FF      lea d, [bp + -3] ; $format_p
1802   0DF9 FD 43         mov [d], b
1803   0DFB FD 7D         dec b
1804   0DFD             ; if(*format_p == 'd' || *format_p == 'i') 
1805   0DFD             _if30_cond:
1806   0DFD FA FD FF      lea d, [bp + -3] ; $format_p
1807   0E00 2A            mov b, [d]
1808   0E01 74            mov d, b
1809   0E02 32            mov bl, [d]
1810   0E03 A7 00         mov bh, 0
1811   0E05             ; --- START RELATIONAL
1812   0E05 D7            push a
1813   0E06 11            mov a, b
1814   0E07 26 64 00      mov b, $64
1815   0E0A B0            cmp a, b
1816   0E0B FD 71         seq ; ==
1817   0E0D E4            pop a
1818   0E0E             ; --- END RELATIONAL
1819   0E0E             ; --- START LOGICAL OR
1820   0E0E D7            push a
1821   0E0F 11            mov a, b
1822   0E10 FA FD FF      lea d, [bp + -3] ; $format_p
1823   0E13 2A            mov b, [d]
1824   0E14 74            mov d, b
1825   0E15 32            mov bl, [d]
1826   0E16 A7 00         mov bh, 0
1827   0E18             ; --- START RELATIONAL
1828   0E18 D7            push a
1829   0E19 11            mov a, b
1830   0E1A 26 69 00      mov b, $69
1831   0E1D B0            cmp a, b
1832   0E1E FD 71         seq ; ==
1833   0E20 E4            pop a
1834   0E21             ; --- END RELATIONAL
1835   0E21 FD A8         sor a, b ; ||
1836   0E23 E4            pop a
1837   0E24             ; --- END LOGICAL OR
1838   0E24 C0 00 00      cmp b, 0
1839   0E27 C6 4C 0E      je _if30_else
1840   0E2A             _if30_true:
1841   0E2A             ; print_signed_long(*(long *)p); 
1842   0E2A FA FF FF      lea d, [bp + -1] ; $p
1843   0E2D 2A            mov b, [d]
1844   0E2E AB            snex b
1845   0E2F FD 39         mov c, b
1846   0E31 74            mov d, b
1847   0E32 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1848   0E35 FD 39         mov c, b ; And place it into C
1849   0E37 2A            mov b, [d] ; Lower Word in B
1850   0E38 FD 79         mov g, b
1851   0E3A 28            mov b, c
1852   0E3B FD AB         swp b
1853   0E3D D8            push b
1854   0E3E FD 27         mov b, g
1855   0E40 FD AB         swp b
1856   0E42 D8            push b
1857   0E43 07 ED 12      call print_signed_long
1858   0E46 51 04 00      add sp, 4
1859   0E49 0A C9 0E      jmp _if30_exit
1860   0E4C             _if30_else:
1861   0E4C             ; if(*format_p == 'u') 
1862   0E4C             _if31_cond:
1863   0E4C FA FD FF      lea d, [bp + -3] ; $format_p
1864   0E4F 2A            mov b, [d]
1865   0E50 74            mov d, b
1866   0E51 32            mov bl, [d]
1867   0E52 A7 00         mov bh, 0
1868   0E54             ; --- START RELATIONAL
1869   0E54 D7            push a
1870   0E55 11            mov a, b
1871   0E56 26 75 00      mov b, $75
1872   0E59 B0            cmp a, b
1873   0E5A FD 71         seq ; ==
1874   0E5C E4            pop a
1875   0E5D             ; --- END RELATIONAL
1876   0E5D C0 00 00      cmp b, 0
1877   0E60 C6 87 0E      je _if31_else
1878   0E63             _if31_true:
1879   0E63             ; print_unsigned_long(*(unsigned long *)p); 
1880   0E63 FA FF FF      lea d, [bp + -1] ; $p
1881   0E66 2A            mov b, [d]
1882   0E67 A7 00         mov bh, 0
1883   0E69 38 00 00      mov c, 0
1884   0E6C 74            mov d, b
1885   0E6D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1886   0E70 FD 39         mov c, b ; And place it into C
1887   0E72 2A            mov b, [d] ; Lower Word in B
1888   0E73 FD 79         mov g, b
1889   0E75 28            mov b, c
1890   0E76 FD AB         swp b
1891   0E78 D8            push b
1892   0E79 FD 27         mov b, g
1893   0E7B FD AB         swp b
1894   0E7D D8            push b
1895   0E7E 07 2D 16      call print_unsigned_long
1896   0E81 51 04 00      add sp, 4
1897   0E84 0A C9 0E      jmp _if31_exit
1898   0E87             _if31_else:
1899   0E87             ; if(*format_p == 'x') 
1900   0E87             _if32_cond:
1901   0E87 FA FD FF      lea d, [bp + -3] ; $format_p
1902   0E8A 2A            mov b, [d]
1903   0E8B 74            mov d, b
1904   0E8C 32            mov bl, [d]
1905   0E8D A7 00         mov bh, 0
1906   0E8F             ; --- START RELATIONAL
1907   0E8F D7            push a
1908   0E90 11            mov a, b
1909   0E91 26 78 00      mov b, $78
1910   0E94 B0            cmp a, b
1911   0E95 FD 71         seq ; ==
1912   0E97 E4            pop a
1913   0E98             ; --- END RELATIONAL
1914   0E98 C0 00 00      cmp b, 0
1915   0E9B C6 BD 0E      je _if32_else
1916   0E9E             _if32_true:
1917   0E9E             ; printx32(*(long int *)p); 
1918   0E9E FA FF FF      lea d, [bp + -1] ; $p
1919   0EA1 2A            mov b, [d]
1920   0EA2 74            mov d, b
1921   0EA3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1922   0EA6 FD 39         mov c, b ; And place it into C
1923   0EA8 2A            mov b, [d] ; Lower Word in B
1924   0EA9 FD 79         mov g, b
1925   0EAB 28            mov b, c
1926   0EAC FD AB         swp b
1927   0EAE D8            push b
1928   0EAF FD 27         mov b, g
1929   0EB1 FD AB         swp b
1930   0EB3 D8            push b
1931   0EB4 07 62 10      call printx32
1932   0EB7 51 04 00      add sp, 4
1933   0EBA 0A C9 0E      jmp _if32_exit
1934   0EBD             _if32_else:
1935   0EBD             ; err("Unexpected format in printf."); 
1936   0EBD 26 7A 24      mov b, _s0 ; "Unexpected format in printf."
1937   0EC0 FD AB         swp b
1938   0EC2 D8            push b
1939   0EC3 07 50 10      call err
1940   0EC6 51 02 00      add sp, 2
1941   0EC9             _if32_exit:
1942   0EC9             _if31_exit:
1943   0EC9             _if30_exit:
1944   0EC9             ; p = p + 4; 
1945   0EC9 FA FF FF      lea d, [bp + -1] ; $p
1946   0ECC DA            push d
1947   0ECD FA FF FF      lea d, [bp + -1] ; $p
1948   0ED0 2A            mov b, [d]
1949   0ED1             ; --- START TERMS
1950   0ED1 D7            push a
1951   0ED2 11            mov a, b
1952   0ED3 26 04 00      mov b, $4
1953   0ED6 56            add b, a
1954   0ED7 E4            pop a
1955   0ED8             ; --- END TERMS
1956   0ED8 E7            pop d
1957   0ED9 FD 43         mov [d], b
1958   0EDB             ; break; 
1959   0EDB 0A 01 10      jmp _switch29_exit ; case break
1960   0EDE             _switch29_case2:
1961   0EDE             _switch29_case3:
1962   0EDE             ; sp = sp + sprint_signed(sp, *(int*)p); 
1963   0EDE FA FB FF      lea d, [bp + -5] ; $sp
1964   0EE1 DA            push d
1965   0EE2 FA FB FF      lea d, [bp + -5] ; $sp
1966   0EE5 2A            mov b, [d]
1967   0EE6             ; --- START TERMS
1968   0EE6 D7            push a
1969   0EE7 11            mov a, b
1970   0EE8 FA FF FF      lea d, [bp + -1] ; $p
1971   0EEB 2A            mov b, [d]
1972   0EEC 74            mov d, b
1973   0EED 2A            mov b, [d]
1974   0EEE FD AB         swp b
1975   0EF0 D8            push b
1976   0EF1 FA FB FF      lea d, [bp + -5] ; $sp
1977   0EF4 2A            mov b, [d]
1978   0EF5 FD AB         swp b
1979   0EF7 D8            push b
1980   0EF8 07 FC 19      call sprint_signed
1981   0EFB 51 04 00      add sp, 4
1982   0EFE 56            add b, a
1983   0EFF E4            pop a
1984   0F00             ; --- END TERMS
1985   0F00 E7            pop d
1986   0F01 FD 43         mov [d], b
1987   0F03             ; p = p + 2; 
1988   0F03 FA FF FF      lea d, [bp + -1] ; $p
1989   0F06 DA            push d
1990   0F07 FA FF FF      lea d, [bp + -1] ; $p
1991   0F0A 2A            mov b, [d]
1992   0F0B             ; --- START TERMS
1993   0F0B D7            push a
1994   0F0C 11            mov a, b
1995   0F0D 26 02 00      mov b, $2
1996   0F10 56            add b, a
1997   0F11 E4            pop a
1998   0F12             ; --- END TERMS
1999   0F12 E7            pop d
2000   0F13 FD 43         mov [d], b
2001   0F15             ; break; 
2002   0F15 0A 01 10      jmp _switch29_exit ; case break
2003   0F18             _switch29_case4:
2004   0F18             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2005   0F18 FA FB FF      lea d, [bp + -5] ; $sp
2006   0F1B DA            push d
2007   0F1C FA FB FF      lea d, [bp + -5] ; $sp
2008   0F1F 2A            mov b, [d]
2009   0F20             ; --- START TERMS
2010   0F20 D7            push a
2011   0F21 11            mov a, b
2012   0F22 FA FF FF      lea d, [bp + -1] ; $p
2013   0F25 2A            mov b, [d]
2014   0F26 74            mov d, b
2015   0F27 2A            mov b, [d]
2016   0F28 FD AB         swp b
2017   0F2A D8            push b
2018   0F2B FA FB FF      lea d, [bp + -5] ; $sp
2019   0F2E 2A            mov b, [d]
2020   0F2F FD AB         swp b
2021   0F31 D8            push b
2022   0F32 07 28 18      call sprint_unsigned
2023   0F35 51 04 00      add sp, 4
2024   0F38 56            add b, a
2025   0F39 E4            pop a
2026   0F3A             ; --- END TERMS
2027   0F3A E7            pop d
2028   0F3B FD 43         mov [d], b
2029   0F3D             ; p = p + 2; 
2030   0F3D FA FF FF      lea d, [bp + -1] ; $p
2031   0F40 DA            push d
2032   0F41 FA FF FF      lea d, [bp + -1] ; $p
2033   0F44 2A            mov b, [d]
2034   0F45             ; --- START TERMS
2035   0F45 D7            push a
2036   0F46 11            mov a, b
2037   0F47 26 02 00      mov b, $2
2038   0F4A 56            add b, a
2039   0F4B E4            pop a
2040   0F4C             ; --- END TERMS
2041   0F4C E7            pop d
2042   0F4D FD 43         mov [d], b
2043   0F4F             ; break; 
2044   0F4F 0A 01 10      jmp _switch29_exit ; case break
2045   0F52             _switch29_case5:
2046   0F52             
2047   0F52             ; --- BEGIN INLINE ASM SEGMENT
2048   0F52 FA FF FF      lea d, [bp + -1] ; $p
2049   0F55 FD 2A         mov d, [d]
2050   0F57 2A            mov b, [d]
2051   0F58 07 F7 1E      call print_u16x
2052   0F5B             ; --- END INLINE ASM SEGMENT
2053   0F5B             
2054   0F5B             ; p = p + 2; 
2055   0F5B FA FF FF      lea d, [bp + -1] ; $p
2056   0F5E DA            push d
2057   0F5F FA FF FF      lea d, [bp + -1] ; $p
2058   0F62 2A            mov b, [d]
2059   0F63             ; --- START TERMS
2060   0F63 D7            push a
2061   0F64 11            mov a, b
2062   0F65 26 02 00      mov b, $2
2063   0F68 56            add b, a
2064   0F69 E4            pop a
2065   0F6A             ; --- END TERMS
2066   0F6A E7            pop d
2067   0F6B FD 43         mov [d], b
2068   0F6D             ; break; 
2069   0F6D 0A 01 10      jmp _switch29_exit ; case break
2070   0F70             _switch29_case6:
2071   0F70             ; *sp++ = *(char *)p; 
2072   0F70 FA FB FF      lea d, [bp + -5] ; $sp
2073   0F73 2A            mov b, [d]
2074   0F74 FD 77         inc b
2075   0F76 FA FB FF      lea d, [bp + -5] ; $sp
2076   0F79 FD 43         mov [d], b
2077   0F7B FD 7D         dec b
2078   0F7D D8            push b
2079   0F7E FA FF FF      lea d, [bp + -1] ; $p
2080   0F81 2A            mov b, [d]
2081   0F82 74            mov d, b
2082   0F83 32            mov bl, [d]
2083   0F84 A7 00         mov bh, 0
2084   0F86 E7            pop d
2085   0F87 FD 3E         mov [d], bl
2086   0F89             ; p = p + 1; 
2087   0F89 FA FF FF      lea d, [bp + -1] ; $p
2088   0F8C DA            push d
2089   0F8D FA FF FF      lea d, [bp + -1] ; $p
2090   0F90 2A            mov b, [d]
2091   0F91             ; --- START TERMS
2092   0F91 D7            push a
2093   0F92 11            mov a, b
2094   0F93 26 01 00      mov b, $1
2095   0F96 56            add b, a
2096   0F97 E4            pop a
2097   0F98             ; --- END TERMS
2098   0F98 E7            pop d
2099   0F99 FD 43         mov [d], b
2100   0F9B             ; break; 
2101   0F9B 0A 01 10      jmp _switch29_exit ; case break
2102   0F9E             _switch29_case7:
2103   0F9E             ; int len = strlen(*(char **)p); 
2104   0F9E 52 02 00      sub sp, 2
2105   0FA1             ; --- START LOCAL VAR INITIALIZATION
2106   0FA1 FA F9 FF      lea d, [bp + -7] ; $len
2107   0FA4 DA            push d
2108   0FA5 FA FF FF      lea d, [bp + -1] ; $p
2109   0FA8 2A            mov b, [d]
2110   0FA9 74            mov d, b
2111   0FAA 2A            mov b, [d]
2112   0FAB FD AB         swp b
2113   0FAD D8            push b
2114   0FAE 07 FF 05      call strlen
2115   0FB1 51 02 00      add sp, 2
2116   0FB4 E7            pop d
2117   0FB5 FD 43         mov [d], b
2118   0FB7             ; --- END LOCAL VAR INITIALIZATION
2119   0FB7             ; strcpy(sp, *(char **)p); 
2120   0FB7 FA FF FF      lea d, [bp + -1] ; $p
2121   0FBA 2A            mov b, [d]
2122   0FBB 74            mov d, b
2123   0FBC 2A            mov b, [d]
2124   0FBD FD AB         swp b
2125   0FBF D8            push b
2126   0FC0 FA FB FF      lea d, [bp + -5] ; $sp
2127   0FC3 2A            mov b, [d]
2128   0FC4 FD AB         swp b
2129   0FC6 D8            push b
2130   0FC7 07 85 04      call strcpy
2131   0FCA 51 04 00      add sp, 4
2132   0FCD             ; sp = sp + len; 
2133   0FCD FA FB FF      lea d, [bp + -5] ; $sp
2134   0FD0 DA            push d
2135   0FD1 FA FB FF      lea d, [bp + -5] ; $sp
2136   0FD4 2A            mov b, [d]
2137   0FD5             ; --- START TERMS
2138   0FD5 D7            push a
2139   0FD6 11            mov a, b
2140   0FD7 FA F9 FF      lea d, [bp + -7] ; $len
2141   0FDA 2A            mov b, [d]
2142   0FDB 56            add b, a
2143   0FDC E4            pop a
2144   0FDD             ; --- END TERMS
2145   0FDD E7            pop d
2146   0FDE FD 43         mov [d], b
2147   0FE0             ; p = p + 2; 
2148   0FE0 FA FF FF      lea d, [bp + -1] ; $p
2149   0FE3 DA            push d
2150   0FE4 FA FF FF      lea d, [bp + -1] ; $p
2151   0FE7 2A            mov b, [d]
2152   0FE8             ; --- START TERMS
2153   0FE8 D7            push a
2154   0FE9 11            mov a, b
2155   0FEA 26 02 00      mov b, $2
2156   0FED 56            add b, a
2157   0FEE E4            pop a
2158   0FEF             ; --- END TERMS
2159   0FEF E7            pop d
2160   0FF0 FD 43         mov [d], b
2161   0FF2             ; break; 
2162   0FF2 0A 01 10      jmp _switch29_exit ; case break
2163   0FF5             _switch29_default:
2164   0FF5             ; print("Error: Unknown argument type.\n"); 
2165   0FF5 26 97 24      mov b, _s1 ; "Error: Unknown argument type.\n"
2166   0FF8 FD AB         swp b
2167   0FFA D8            push b
2168   0FFB 07 A6 1B      call print
2169   0FFE 51 02 00      add sp, 2
2170   1001             _switch29_exit:
2171   1001             ; format_p++; 
2172   1001 FA FD FF      lea d, [bp + -3] ; $format_p
2173   1004 2A            mov b, [d]
2174   1005 FD 77         inc b
2175   1007 FA FD FF      lea d, [bp + -3] ; $format_p
2176   100A FD 43         mov [d], b
2177   100C FD 7D         dec b
2178   100E 0A 33 10      jmp _if28_exit
2179   1011             _if28_else:
2180   1011             ; *sp++ = *format_p++; 
2181   1011 FA FB FF      lea d, [bp + -5] ; $sp
2182   1014 2A            mov b, [d]
2183   1015 FD 77         inc b
2184   1017 FA FB FF      lea d, [bp + -5] ; $sp
2185   101A FD 43         mov [d], b
2186   101C FD 7D         dec b
2187   101E D8            push b
2188   101F FA FD FF      lea d, [bp + -3] ; $format_p
2189   1022 2A            mov b, [d]
2190   1023 FD 77         inc b
2191   1025 FA FD FF      lea d, [bp + -3] ; $format_p
2192   1028 FD 43         mov [d], b
2193   102A FD 7D         dec b
2194   102C 74            mov d, b
2195   102D 32            mov bl, [d]
2196   102E A7 00         mov bh, 0
2197   1030 E7            pop d
2198   1031 FD 3E         mov [d], bl
2199   1033             _if28_exit:
2200   1033             _if27_exit:
2201   1033             _for26_update:
2202   1033 0A 7D 0D      jmp _for26_cond
2203   1036             _for26_exit:
2204   1036             ; *sp = '\0'; 
2205   1036 FA FB FF      lea d, [bp + -5] ; $sp
2206   1039 2A            mov b, [d]
2207   103A D8            push b
2208   103B 26 00 00      mov b, $0
2209   103E E7            pop d
2210   103F FD 3E         mov [d], bl
2211   1041             ; return sp - dest; // return total number of chars written 
2212   1041 FA FB FF      lea d, [bp + -5] ; $sp
2213   1044 2A            mov b, [d]
2214   1045             ; --- START TERMS
2215   1045 D7            push a
2216   1046 11            mov a, b
2217   1047 FA 05 00      lea d, [bp + 5] ; $dest
2218   104A 2A            mov b, [d]
2219   104B 60            sub a, b
2220   104C 27            mov b, a
2221   104D E4            pop a
2222   104E             ; --- END TERMS
2223   104E F9            leave
2224   104F 09            ret
2225   1050             
2226   1050             err:
2227   1050 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2228   1053             ; print(e); 
2229   1053 FA 05 00      lea d, [bp + 5] ; $e
2230   1056 2A            mov b, [d]
2231   1057 FD AB         swp b
2232   1059 D8            push b
2233   105A 07 A6 1B      call print
2234   105D 51 02 00      add sp, 2
2235   1060 F9            leave
2236   1061 09            ret
2237   1062             
2238   1062             printx32:
2239   1062 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2240   1065             
2241   1065             ; --- BEGIN INLINE ASM SEGMENT
2242   1065 FA 05 00      lea d, [bp + 5] ; $hex
2243   1068 2B 02 00      mov b, [d+2]
2244   106B 07 F7 1E      call print_u16x
2245   106E 2A            mov b, [d]
2246   106F 07 F7 1E      call print_u16x
2247   1072             ; --- END INLINE ASM SEGMENT
2248   1072             
2249   1072 F9            leave
2250   1073 09            ret
2251   1074             
2252   1074             printx16:
2253   1074 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2254   1077             
2255   1077             ; --- BEGIN INLINE ASM SEGMENT
2256   1077 FA 05 00      lea d, [bp + 5] ; $hex
2257   107A 2A            mov b, [d]
2258   107B 07 F7 1E      call print_u16x
2259   107E             ; --- END INLINE ASM SEGMENT
2260   107E             
2261   107E F9            leave
2262   107F 09            ret
2263   1080             
2264   1080             printx8:
2265   1080 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2266   1083             
2267   1083             ; --- BEGIN INLINE ASM SEGMENT
2268   1083 FA 05 00      lea d, [bp + 5] ; $hex
2269   1086 32            mov bl, [d]
2270   1087 07 3B 1F      call print_u8x
2271   108A             ; --- END INLINE ASM SEGMENT
2272   108A             
2273   108A F9            leave
2274   108B 09            ret
2275   108C             
2276   108C             hex_str_to_int:
2277   108C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2278   108F             ; int value = 0; 
2279   108F 52 02 00      sub sp, 2
2280   1092             ; --- START LOCAL VAR INITIALIZATION
2281   1092 FA FF FF      lea d, [bp + -1] ; $value
2282   1095 DA            push d
2283   1096 26 00 00      mov b, $0
2284   1099 E7            pop d
2285   109A FD 43         mov [d], b
2286   109C             ; --- END LOCAL VAR INITIALIZATION
2287   109C             ; int i; 
2288   109C 52 02 00      sub sp, 2
2289   109F             ; char hex_char; 
2290   109F 52 01 00      sub sp, 1
2291   10A2             ; int len; 
2292   10A2 52 02 00      sub sp, 2
2293   10A5             ; len = strlen(hex_string); 
2294   10A5 FA FA FF      lea d, [bp + -6] ; $len
2295   10A8 DA            push d
2296   10A9 FA 05 00      lea d, [bp + 5] ; $hex_string
2297   10AC 2A            mov b, [d]
2298   10AD FD AB         swp b
2299   10AF D8            push b
2300   10B0 07 FF 05      call strlen
2301   10B3 51 02 00      add sp, 2
2302   10B6 E7            pop d
2303   10B7 FD 43         mov [d], b
2304   10B9             ; for (i = 0; i < len; i++) { 
2305   10B9             _for33_init:
2306   10B9 FA FD FF      lea d, [bp + -3] ; $i
2307   10BC DA            push d
2308   10BD 26 00 00      mov b, $0
2309   10C0 E7            pop d
2310   10C1 FD 43         mov [d], b
2311   10C3             _for33_cond:
2312   10C3 FA FD FF      lea d, [bp + -3] ; $i
2313   10C6 2A            mov b, [d]
2314   10C7             ; --- START RELATIONAL
2315   10C7 D7            push a
2316   10C8 11            mov a, b
2317   10C9 FA FA FF      lea d, [bp + -6] ; $len
2318   10CC 2A            mov b, [d]
2319   10CD B0            cmp a, b
2320   10CE FD 73         slt ; < (signed)
2321   10D0 E4            pop a
2322   10D1             ; --- END RELATIONAL
2323   10D1 C0 00 00      cmp b, 0
2324   10D4 C6 D6 11      je _for33_exit
2325   10D7             _for33_block:
2326   10D7             ; hex_char = hex_string[i]; 
2327   10D7 FA FC FF      lea d, [bp + -4] ; $hex_char
2328   10DA DA            push d
2329   10DB FA 05 00      lea d, [bp + 5] ; $hex_string
2330   10DE FD 2A         mov d, [d]
2331   10E0 D7            push a
2332   10E1 DA            push d
2333   10E2 FA FD FF      lea d, [bp + -3] ; $i
2334   10E5 2A            mov b, [d]
2335   10E6 E7            pop d
2336   10E7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2337   10EB E4            pop a
2338   10EC 32            mov bl, [d]
2339   10ED A7 00         mov bh, 0
2340   10EF E7            pop d
2341   10F0 FD 3E         mov [d], bl
2342   10F2             ; if (hex_char >= 'a' && hex_char <= 'f')  
2343   10F2             _if34_cond:
2344   10F2 FA FC FF      lea d, [bp + -4] ; $hex_char
2345   10F5 32            mov bl, [d]
2346   10F6 A7 00         mov bh, 0
2347   10F8             ; --- START RELATIONAL
2348   10F8 D7            push a
2349   10F9 11            mov a, b
2350   10FA 26 61 00      mov b, $61
2351   10FD B0            cmp a, b
2352   10FE FD 80         sge ; >=
2353   1100 E4            pop a
2354   1101             ; --- END RELATIONAL
2355   1101             ; --- START LOGICAL AND
2356   1101 D7            push a
2357   1102 11            mov a, b
2358   1103 FA FC FF      lea d, [bp + -4] ; $hex_char
2359   1106 32            mov bl, [d]
2360   1107 A7 00         mov bh, 0
2361   1109             ; --- START RELATIONAL
2362   1109 D7            push a
2363   110A 11            mov a, b
2364   110B 26 66 00      mov b, $66
2365   110E B0            cmp a, b
2366   110F FD 74         sle ; <= (signed)
2367   1111 E4            pop a
2368   1112             ; --- END RELATIONAL
2369   1112 FD A7         sand a, b
2370   1114 E4            pop a
2371   1115             ; --- END LOGICAL AND
2372   1115 C0 00 00      cmp b, 0
2373   1118 C6 49 11      je _if34_else
2374   111B             _if34_true:
2375   111B             ; value = (value * 16) + (hex_char - 'a' + 10); 
2376   111B FA FF FF      lea d, [bp + -1] ; $value
2377   111E DA            push d
2378   111F FA FF FF      lea d, [bp + -1] ; $value
2379   1122 2A            mov b, [d]
2380   1123             ; --- START FACTORS
2381   1123 D7            push a
2382   1124 11            mov a, b
2383   1125 26 10 00      mov b, $10
2384   1128 AC            mul a, b ; *
2385   1129 11            mov a, b
2386   112A 27            mov b, a
2387   112B E4            pop a
2388   112C             ; --- END FACTORS
2389   112C             ; --- START TERMS
2390   112C D7            push a
2391   112D 11            mov a, b
2392   112E FA FC FF      lea d, [bp + -4] ; $hex_char
2393   1131 32            mov bl, [d]
2394   1132 A7 00         mov bh, 0
2395   1134             ; --- START TERMS
2396   1134 D7            push a
2397   1135 11            mov a, b
2398   1136 26 61 00      mov b, $61
2399   1139 60            sub a, b
2400   113A 27            mov b, a
2401   113B 11            mov a, b
2402   113C 26 0A 00      mov b, $a
2403   113F 56            add b, a
2404   1140 E4            pop a
2405   1141             ; --- END TERMS
2406   1141 56            add b, a
2407   1142 E4            pop a
2408   1143             ; --- END TERMS
2409   1143 E7            pop d
2410   1144 FD 43         mov [d], b
2411   1146 0A C6 11      jmp _if34_exit
2412   1149             _if34_else:
2413   1149             ; if (hex_char >= 'A' && hex_char <= 'F')  
2414   1149             _if35_cond:
2415   1149 FA FC FF      lea d, [bp + -4] ; $hex_char
2416   114C 32            mov bl, [d]
2417   114D A7 00         mov bh, 0
2418   114F             ; --- START RELATIONAL
2419   114F D7            push a
2420   1150 11            mov a, b
2421   1151 26 41 00      mov b, $41
2422   1154 B0            cmp a, b
2423   1155 FD 80         sge ; >=
2424   1157 E4            pop a
2425   1158             ; --- END RELATIONAL
2426   1158             ; --- START LOGICAL AND
2427   1158 D7            push a
2428   1159 11            mov a, b
2429   115A FA FC FF      lea d, [bp + -4] ; $hex_char
2430   115D 32            mov bl, [d]
2431   115E A7 00         mov bh, 0
2432   1160             ; --- START RELATIONAL
2433   1160 D7            push a
2434   1161 11            mov a, b
2435   1162 26 46 00      mov b, $46
2436   1165 B0            cmp a, b
2437   1166 FD 74         sle ; <= (signed)
2438   1168 E4            pop a
2439   1169             ; --- END RELATIONAL
2440   1169 FD A7         sand a, b
2441   116B E4            pop a
2442   116C             ; --- END LOGICAL AND
2443   116C C0 00 00      cmp b, 0
2444   116F C6 A0 11      je _if35_else
2445   1172             _if35_true:
2446   1172             ; value = (value * 16) + (hex_char - 'A' + 10); 
2447   1172 FA FF FF      lea d, [bp + -1] ; $value
2448   1175 DA            push d
2449   1176 FA FF FF      lea d, [bp + -1] ; $value
2450   1179 2A            mov b, [d]
2451   117A             ; --- START FACTORS
2452   117A D7            push a
2453   117B 11            mov a, b
2454   117C 26 10 00      mov b, $10
2455   117F AC            mul a, b ; *
2456   1180 11            mov a, b
2457   1181 27            mov b, a
2458   1182 E4            pop a
2459   1183             ; --- END FACTORS
2460   1183             ; --- START TERMS
2461   1183 D7            push a
2462   1184 11            mov a, b
2463   1185 FA FC FF      lea d, [bp + -4] ; $hex_char
2464   1188 32            mov bl, [d]
2465   1189 A7 00         mov bh, 0
2466   118B             ; --- START TERMS
2467   118B D7            push a
2468   118C 11            mov a, b
2469   118D 26 41 00      mov b, $41
2470   1190 60            sub a, b
2471   1191 27            mov b, a
2472   1192 11            mov a, b
2473   1193 26 0A 00      mov b, $a
2474   1196 56            add b, a
2475   1197 E4            pop a
2476   1198             ; --- END TERMS
2477   1198 56            add b, a
2478   1199 E4            pop a
2479   119A             ; --- END TERMS
2480   119A E7            pop d
2481   119B FD 43         mov [d], b
2482   119D 0A C6 11      jmp _if35_exit
2483   11A0             _if35_else:
2484   11A0             ; value = (value * 16) + (hex_char - '0'); 
2485   11A0 FA FF FF      lea d, [bp + -1] ; $value
2486   11A3 DA            push d
2487   11A4 FA FF FF      lea d, [bp + -1] ; $value
2488   11A7 2A            mov b, [d]
2489   11A8             ; --- START FACTORS
2490   11A8 D7            push a
2491   11A9 11            mov a, b
2492   11AA 26 10 00      mov b, $10
2493   11AD AC            mul a, b ; *
2494   11AE 11            mov a, b
2495   11AF 27            mov b, a
2496   11B0 E4            pop a
2497   11B1             ; --- END FACTORS
2498   11B1             ; --- START TERMS
2499   11B1 D7            push a
2500   11B2 11            mov a, b
2501   11B3 FA FC FF      lea d, [bp + -4] ; $hex_char
2502   11B6 32            mov bl, [d]
2503   11B7 A7 00         mov bh, 0
2504   11B9             ; --- START TERMS
2505   11B9 D7            push a
2506   11BA 11            mov a, b
2507   11BB 26 30 00      mov b, $30
2508   11BE 60            sub a, b
2509   11BF 27            mov b, a
2510   11C0 E4            pop a
2511   11C1             ; --- END TERMS
2512   11C1 56            add b, a
2513   11C2 E4            pop a
2514   11C3             ; --- END TERMS
2515   11C3 E7            pop d
2516   11C4 FD 43         mov [d], b
2517   11C6             _if35_exit:
2518   11C6             _if34_exit:
2519   11C6             _for33_update:
2520   11C6 FA FD FF      lea d, [bp + -3] ; $i
2521   11C9 2A            mov b, [d]
2522   11CA FD 77         inc b
2523   11CC FA FD FF      lea d, [bp + -3] ; $i
2524   11CF FD 43         mov [d], b
2525   11D1 FD 7D         dec b
2526   11D3 0A C3 10      jmp _for33_cond
2527   11D6             _for33_exit:
2528   11D6             ; return value; 
2529   11D6 FA FF FF      lea d, [bp + -1] ; $value
2530   11D9 2A            mov b, [d]
2531   11DA F9            leave
2532   11DB 09            ret
2533   11DC             
2534   11DC             gets:
2535   11DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2536   11DF             
2537   11DF             ; --- BEGIN INLINE ASM SEGMENT
2538   11DF FA 05 00      lea d, [bp + 5] ; $s
2539   11E2 15            mov a, [d]
2540   11E3 3C            mov d, a
2541   11E4 07 5C 1D      call _gets
2542   11E7             ; --- END INLINE ASM SEGMENT
2543   11E7             
2544   11E7             ; return strlen(s); 
2545   11E7 FA 05 00      lea d, [bp + 5] ; $s
2546   11EA 2A            mov b, [d]
2547   11EB FD AB         swp b
2548   11ED D8            push b
2549   11EE 07 FF 05      call strlen
2550   11F1 51 02 00      add sp, 2
2551   11F4 F9            leave
2552   11F5 09            ret
2553   11F6             
2554   11F6             print_signed:
2555   11F6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2556   11F9             ; char digits[5]; 
2557   11F9 52 05 00      sub sp, 5
2558   11FC             ; int i = 0; 
2559   11FC 52 02 00      sub sp, 2
2560   11FF             ; --- START LOCAL VAR INITIALIZATION
2561   11FF FA FA FF      lea d, [bp + -6] ; $i
2562   1202 DA            push d
2563   1203 26 00 00      mov b, $0
2564   1206 E7            pop d
2565   1207 FD 43         mov [d], b
2566   1209             ; --- END LOCAL VAR INITIALIZATION
2567   1209             ; if (num < 0) { 
2568   1209             _if36_cond:
2569   1209 FA 05 00      lea d, [bp + 5] ; $num
2570   120C 2A            mov b, [d]
2571   120D             ; --- START RELATIONAL
2572   120D D7            push a
2573   120E 11            mov a, b
2574   120F 26 00 00      mov b, $0
2575   1212 B0            cmp a, b
2576   1213 FD 73         slt ; < (signed)
2577   1215 E4            pop a
2578   1216             ; --- END RELATIONAL
2579   1216 C0 00 00      cmp b, 0
2580   1219 C6 36 12      je _if36_else
2581   121C             _if36_true:
2582   121C             ; putchar('-'); 
2583   121C 26 2D 00      mov b, $2d
2584   121F DD            push bl
2585   1220 07 5E 1B      call putchar
2586   1223 51 01 00      add sp, 1
2587   1226             ; num = -num; 
2588   1226 FA 05 00      lea d, [bp + 5] ; $num
2589   1229 DA            push d
2590   122A FA 05 00      lea d, [bp + 5] ; $num
2591   122D 2A            mov b, [d]
2592   122E FD 97         neg b
2593   1230 E7            pop d
2594   1231 FD 43         mov [d], b
2595   1233 0A 58 12      jmp _if36_exit
2596   1236             _if36_else:
2597   1236             ; if (num == 0) { 
2598   1236             _if37_cond:
2599   1236 FA 05 00      lea d, [bp + 5] ; $num
2600   1239 2A            mov b, [d]
2601   123A             ; --- START RELATIONAL
2602   123A D7            push a
2603   123B 11            mov a, b
2604   123C 26 00 00      mov b, $0
2605   123F B0            cmp a, b
2606   1240 FD 71         seq ; ==
2607   1242 E4            pop a
2608   1243             ; --- END RELATIONAL
2609   1243 C0 00 00      cmp b, 0
2610   1246 C6 58 12      je _if37_exit
2611   1249             _if37_true:
2612   1249             ; putchar('0'); 
2613   1249 26 30 00      mov b, $30
2614   124C DD            push bl
2615   124D 07 5E 1B      call putchar
2616   1250 51 01 00      add sp, 1
2617   1253             ; return; 
2618   1253 F9            leave
2619   1254 09            ret
2620   1255 0A 58 12      jmp _if37_exit
2621   1258             _if37_exit:
2622   1258             _if36_exit:
2623   1258             ; while (num > 0) { 
2624   1258             _while38_cond:
2625   1258 FA 05 00      lea d, [bp + 5] ; $num
2626   125B 2A            mov b, [d]
2627   125C             ; --- START RELATIONAL
2628   125C D7            push a
2629   125D 11            mov a, b
2630   125E 26 00 00      mov b, $0
2631   1261 B0            cmp a, b
2632   1262 FD 7F         sgt ; >
2633   1264 E4            pop a
2634   1265             ; --- END RELATIONAL
2635   1265 C0 00 00      cmp b, 0
2636   1268 C6 B2 12      je _while38_exit
2637   126B             _while38_block:
2638   126B             ; digits[i] = '0' + (num % 10); 
2639   126B FA FC FF      lea d, [bp + -4] ; $digits
2640   126E D7            push a
2641   126F DA            push d
2642   1270 FA FA FF      lea d, [bp + -6] ; $i
2643   1273 2A            mov b, [d]
2644   1274 E7            pop d
2645   1275 5A            add d, b
2646   1276 E4            pop a
2647   1277 DA            push d
2648   1278 26 30 00      mov b, $30
2649   127B             ; --- START TERMS
2650   127B D7            push a
2651   127C 11            mov a, b
2652   127D FA 05 00      lea d, [bp + 5] ; $num
2653   1280 2A            mov b, [d]
2654   1281             ; --- START FACTORS
2655   1281 D7            push a
2656   1282 11            mov a, b
2657   1283 26 0A 00      mov b, $a
2658   1286 AE            div a, b ; 
2659   1287 11            mov a, b
2660   1288 27            mov b, a
2661   1289 E4            pop a
2662   128A             ; --- END FACTORS
2663   128A 56            add b, a
2664   128B E4            pop a
2665   128C             ; --- END TERMS
2666   128C E7            pop d
2667   128D FD 3E         mov [d], bl
2668   128F             ; num = num / 10; 
2669   128F FA 05 00      lea d, [bp + 5] ; $num
2670   1292 DA            push d
2671   1293 FA 05 00      lea d, [bp + 5] ; $num
2672   1296 2A            mov b, [d]
2673   1297             ; --- START FACTORS
2674   1297 D7            push a
2675   1298 11            mov a, b
2676   1299 26 0A 00      mov b, $a
2677   129C AE            div a, b
2678   129D 27            mov b, a
2679   129E E4            pop a
2680   129F             ; --- END FACTORS
2681   129F E7            pop d
2682   12A0 FD 43         mov [d], b
2683   12A2             ; i++; 
2684   12A2 FA FA FF      lea d, [bp + -6] ; $i
2685   12A5 2A            mov b, [d]
2686   12A6 FD 77         inc b
2687   12A8 FA FA FF      lea d, [bp + -6] ; $i
2688   12AB FD 43         mov [d], b
2689   12AD FD 7D         dec b
2690   12AF 0A 58 12      jmp _while38_cond
2691   12B2             _while38_exit:
2692   12B2             ; while (i > 0) { 
2693   12B2             _while39_cond:
2694   12B2 FA FA FF      lea d, [bp + -6] ; $i
2695   12B5 2A            mov b, [d]
2696   12B6             ; --- START RELATIONAL
2697   12B6 D7            push a
2698   12B7 11            mov a, b
2699   12B8 26 00 00      mov b, $0
2700   12BB B0            cmp a, b
2701   12BC FD 7F         sgt ; >
2702   12BE E4            pop a
2703   12BF             ; --- END RELATIONAL
2704   12BF C0 00 00      cmp b, 0
2705   12C2 C6 EB 12      je _while39_exit
2706   12C5             _while39_block:
2707   12C5             ; i--; 
2708   12C5 FA FA FF      lea d, [bp + -6] ; $i
2709   12C8 2A            mov b, [d]
2710   12C9 FD 7D         dec b
2711   12CB FA FA FF      lea d, [bp + -6] ; $i
2712   12CE FD 43         mov [d], b
2713   12D0 FD 77         inc b
2714   12D2             ; putchar(digits[i]); 
2715   12D2 FA FC FF      lea d, [bp + -4] ; $digits
2716   12D5 D7            push a
2717   12D6 DA            push d
2718   12D7 FA FA FF      lea d, [bp + -6] ; $i
2719   12DA 2A            mov b, [d]
2720   12DB E7            pop d
2721   12DC 5A            add d, b
2722   12DD E4            pop a
2723   12DE 32            mov bl, [d]
2724   12DF A7 00         mov bh, 0
2725   12E1 DD            push bl
2726   12E2 07 5E 1B      call putchar
2727   12E5 51 01 00      add sp, 1
2728   12E8 0A B2 12      jmp _while39_cond
2729   12EB             _while39_exit:
2730   12EB F9            leave
2731   12EC 09            ret
2732   12ED             
2733   12ED             print_signed_long:
2734   12ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
2735   12F0             ; char digits[10]; 
2736   12F0 52 0A 00      sub sp, 10
2737   12F3             ; int i = 0; 
2738   12F3 52 02 00      sub sp, 2
2739   12F6             ; --- START LOCAL VAR INITIALIZATION
2740   12F6 FA F5 FF      lea d, [bp + -11] ; $i
2741   12F9 DA            push d
2742   12FA 26 00 00      mov b, $0
2743   12FD E7            pop d
2744   12FE FD 43         mov [d], b
2745   1300             ; --- END LOCAL VAR INITIALIZATION
2746   1300             ; if (num < 0) { 
2747   1300             _if40_cond:
2748   1300 FA 05 00      lea d, [bp + 5] ; $num
2749   1303 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2750   1306 FD 39         mov c, b ; And place it into C
2751   1308 2A            mov b, [d] ; Lower Word in B
2752   1309             ; --- START RELATIONAL
2753   1309 D7            push a
2754   130A FD D8         push g
2755   130C 11            mov a, b
2756   130D FD 7A         mov g, c
2757   130F 26 00 00      mov b, $0
2758   1312 38 00 00      mov c, 0
2759   1315 FD AF 00 00   cmp32 ga, cb
2759   1319 00 00 00 00 
2759   131D 00 00 00 00 
2759   1321 00 00 00 00 
2759   1325 00 00 00 00 
2759   1329 00 00 00 00 
2759   132D 00 00 00 00 
2759   1331 00 00 00 00 
2759   1335 00 00 00 00 
2759   1339 00 00 00 00 
2759   133D 00 00 00 00 
2759   1341 00 00 00 00 
2759   1345 00 00 00 00 
2759   1349 00 00 00 00 
2759   134D 00 00 00 00 
2759   1351 00 00 00 00 
2759   1355 00 00 00 00 
2759   1359 00 00 00 00 
2759   135D 00 00 00 00 
2759   1361 00 00 00 00 
2759   1365 00 00 00 00 
2759   1369 00 00 00 00 
2759   136D 00 00 00 00 
2759   1371 00 00 00 00 
2759   1375 00 00 00 00 
2759   1379 00 00 00 00 
2759   137D 00 00 00 00 
2759   1381 00 00 00 00 
2759   1385 00 00 00 00 
2759   1389 00 00 00 00 
2759   138D 00 00 00 00 
2759   1391 00 00 00 00 
2759   1395 00 00 00 00 
2759   1399 00 00 00 00 
2759   139D 00 00 00 00 
2759   13A1 00 00 00 00 
2759   13A5 00 00 00 00 
2759   13A9 00 00 00 00 
2759   13AD 00 00 00 00 
2759   13B1 00 00 00 00 
2759   13B5 00 00 00 00 
2759   13B9 00 00 00 00 
2759   13BD 00 00 00 00 
2759   13C1 00 00 00 00 
2759   13C5 00 00 00 00 
2759   13C9 00 00 00 00 
2759   13CD 00 00 00 00 
2759   13D1 00 00 00 00 
2759   13D5 00 00 00 00 
2759   13D9 00 00 00 00 
2759   13DD 00 00 00 00 
2759   13E1 00 00 00 00 
2759   13E5 00 00 00 00 
2759   13E9 00 00 00 00 
2759   13ED 00 00 00 00 
2759   13F1 00 00 00 00 
2759   13F5 00 00 00 00 
2759   13F9 00 00 00 00 
2759   13FD 00 00 00 00 
2759   1401 00 00 00 00 
2759   1405 00 00 00 00 
2759   1409 00 00 00 00 
2759   140D 00 00 00 00 
2759   1411 00 00 00 00 
2759   1415 00 
2760   1416 FD 73         slt ; <
2761   1418 FD F1         pop g
2762   141A E4            pop a
2763   141B             ; --- END RELATIONAL
2764   141B C0 00 00      cmp b, 0
2765   141E C6 45 14      je _if40_else
2766   1421             _if40_true:
2767   1421             ; putchar('-'); 
2768   1421 26 2D 00      mov b, $2d
2769   1424 DD            push bl
2770   1425 07 5E 1B      call putchar
2771   1428 51 01 00      add sp, 1
2772   142B             ; num = -num; 
2773   142B FA 05 00      lea d, [bp + 5] ; $num
2774   142E DA            push d
2775   142F FA 05 00      lea d, [bp + 5] ; $num
2776   1432 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2777   1435 FD 39         mov c, b ; And place it into C
2778   1437 2A            mov b, [d] ; Lower Word in B
2779   1438 FD 97         neg b
2780   143A E7            pop d
2781   143B FD 43         mov [d], b
2782   143D 28            mov b, c
2783   143E FD 44 02 00   mov [d + 2], b
2784   1442 0A 75 15      jmp _if40_exit
2785   1445             _if40_else:
2786   1445             ; if (num == 0) { 
2787   1445             _if41_cond:
2788   1445 FA 05 00      lea d, [bp + 5] ; $num
2789   1448 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2790   144B FD 39         mov c, b ; And place it into C
2791   144D 2A            mov b, [d] ; Lower Word in B
2792   144E             ; --- START RELATIONAL
2793   144E D7            push a
2794   144F FD D8         push g
2795   1451 11            mov a, b
2796   1452 FD 7A         mov g, c
2797   1454 26 00 00      mov b, $0
2798   1457 38 00 00      mov c, 0
2799   145A FD AF 00 00   cmp32 ga, cb
2799   145E 00 00 00 00 
2799   1462 00 00 00 00 
2799   1466 00 00 00 00 
2799   146A 00 00 00 00 
2799   146E 00 00 00 00 
2799   1472 00 00 00 00 
2799   1476 00 00 00 00 
2799   147A 00 00 00 00 
2799   147E 00 00 00 00 
2799   1482 00 00 00 00 
2799   1486 00 00 00 00 
2799   148A 00 00 00 00 
2799   148E 00 00 00 00 
2799   1492 00 00 00 00 
2799   1496 00 00 00 00 
2799   149A 00 00 00 00 
2799   149E 00 00 00 00 
2799   14A2 00 00 00 00 
2799   14A6 00 00 00 00 
2799   14AA 00 00 00 00 
2799   14AE 00 00 00 00 
2799   14B2 00 00 00 00 
2799   14B6 00 00 00 00 
2799   14BA 00 00 00 00 
2799   14BE 00 00 00 00 
2799   14C2 00 00 00 00 
2799   14C6 00 00 00 00 
2799   14CA 00 00 00 00 
2799   14CE 00 00 00 00 
2799   14D2 00 00 00 00 
2799   14D6 00 00 00 00 
2799   14DA 00 00 00 00 
2799   14DE 00 00 00 00 
2799   14E2 00 00 00 00 
2799   14E6 00 00 00 00 
2799   14EA 00 00 00 00 
2799   14EE 00 00 00 00 
2799   14F2 00 00 00 00 
2799   14F6 00 00 00 00 
2799   14FA 00 00 00 00 
2799   14FE 00 00 00 00 
2799   1502 00 00 00 00 
2799   1506 00 00 00 00 
2799   150A 00 00 00 00 
2799   150E 00 00 00 00 
2799   1512 00 00 00 00 
2799   1516 00 00 00 00 
2799   151A 00 00 00 00 
2799   151E 00 00 00 00 
2799   1522 00 00 00 00 
2799   1526 00 00 00 00 
2799   152A 00 00 00 00 
2799   152E 00 00 00 00 
2799   1532 00 00 00 00 
2799   1536 00 00 00 00 
2799   153A 00 00 00 00 
2799   153E 00 00 00 00 
2799   1542 00 00 00 00 
2799   1546 00 00 00 00 
2799   154A 00 00 00 00 
2799   154E 00 00 00 00 
2799   1552 00 00 00 00 
2799   1556 00 00 00 00 
2799   155A 00 
2800   155B FD 71         seq ; ==
2801   155D FD F1         pop g
2802   155F E4            pop a
2803   1560             ; --- END RELATIONAL
2804   1560 C0 00 00      cmp b, 0
2805   1563 C6 75 15      je _if41_exit
2806   1566             _if41_true:
2807   1566             ; putchar('0'); 
2808   1566 26 30 00      mov b, $30
2809   1569 DD            push bl
2810   156A 07 5E 1B      call putchar
2811   156D 51 01 00      add sp, 1
2812   1570             ; return; 
2813   1570 F9            leave
2814   1571 09            ret
2815   1572 0A 75 15      jmp _if41_exit
2816   1575             _if41_exit:
2817   1575             _if40_exit:
2818   1575             ; while (num > 0) { 
2819   1575             _while42_cond:
2820   1575 FA 05 00      lea d, [bp + 5] ; $num
2821   1578 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2822   157B FD 39         mov c, b ; And place it into C
2823   157D 2A            mov b, [d] ; Lower Word in B
2824   157E             ; --- START RELATIONAL
2825   157E D7            push a
2826   157F FD D8         push g
2827   1581 11            mov a, b
2828   1582 FD 7A         mov g, c
2829   1584 26 00 00      mov b, $0
2830   1587 38 00 00      mov c, 0
2831   158A FD 7F         sgt
2832   158C FD F1         pop g
2833   158E E4            pop a
2834   158F             ; --- END RELATIONAL
2835   158F C0 00 00      cmp b, 0
2836   1592 C6 F2 15      je _while42_exit
2837   1595             _while42_block:
2838   1595             ; digits[i] = '0' + (num % 10); 
2839   1595 FA F7 FF      lea d, [bp + -9] ; $digits
2840   1598 D7            push a
2841   1599 DA            push d
2842   159A FA F5 FF      lea d, [bp + -11] ; $i
2843   159D 2A            mov b, [d]
2844   159E E7            pop d
2845   159F 5A            add d, b
2846   15A0 E4            pop a
2847   15A1 DA            push d
2848   15A2 26 30 00      mov b, $30
2849   15A5             ; --- START TERMS
2850   15A5 D7            push a
2851   15A6 11            mov a, b
2852   15A7 FA 05 00      lea d, [bp + 5] ; $num
2853   15AA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2854   15AD FD 39         mov c, b ; And place it into C
2855   15AF 2A            mov b, [d] ; Lower Word in B
2856   15B0             ; --- START FACTORS
2857   15B0 D7            push a
2858   15B1 11            mov a, b
2859   15B2 26 0A 00      mov b, $a
2860   15B5 AE            div a, b ; 
2861   15B6 11            mov a, b
2862   15B7 27            mov b, a
2863   15B8 E4            pop a
2864   15B9             ; --- END FACTORS
2865   15B9 54            add a, b
2866   15BA D7            push a
2867   15BB FD 12         mov a, g
2868   15BD 28            mov b, c
2869   15BE 5C            adc a, b
2870   15BF 39            mov c, a
2871   15C0 E5            pop b
2872   15C1 E4            pop a
2873   15C2             ; --- END TERMS
2874   15C2 E7            pop d
2875   15C3 FD 3E         mov [d], bl
2876   15C5             ; num = num / 10; 
2877   15C5 FA 05 00      lea d, [bp + 5] ; $num
2878   15C8 DA            push d
2879   15C9 FA 05 00      lea d, [bp + 5] ; $num
2880   15CC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2881   15CF FD 39         mov c, b ; And place it into C
2882   15D1 2A            mov b, [d] ; Lower Word in B
2883   15D2             ; --- START FACTORS
2884   15D2 D7            push a
2885   15D3 11            mov a, b
2886   15D4 26 0A 00      mov b, $a
2887   15D7 AE            div a, b
2888   15D8 27            mov b, a
2889   15D9 E4            pop a
2890   15DA             ; --- END FACTORS
2891   15DA E7            pop d
2892   15DB FD 43         mov [d], b
2893   15DD 28            mov b, c
2894   15DE FD 44 02 00   mov [d + 2], b
2895   15E2             ; i++; 
2896   15E2 FA F5 FF      lea d, [bp + -11] ; $i
2897   15E5 2A            mov b, [d]
2898   15E6 FD 77         inc b
2899   15E8 FA F5 FF      lea d, [bp + -11] ; $i
2900   15EB FD 43         mov [d], b
2901   15ED FD 7D         dec b
2902   15EF 0A 75 15      jmp _while42_cond
2903   15F2             _while42_exit:
2904   15F2             ; while (i > 0) { 
2905   15F2             _while43_cond:
2906   15F2 FA F5 FF      lea d, [bp + -11] ; $i
2907   15F5 2A            mov b, [d]
2908   15F6             ; --- START RELATIONAL
2909   15F6 D7            push a
2910   15F7 11            mov a, b
2911   15F8 26 00 00      mov b, $0
2912   15FB B0            cmp a, b
2913   15FC FD 7F         sgt ; >
2914   15FE E4            pop a
2915   15FF             ; --- END RELATIONAL
2916   15FF C0 00 00      cmp b, 0
2917   1602 C6 2B 16      je _while43_exit
2918   1605             _while43_block:
2919   1605             ; i--; 
2920   1605 FA F5 FF      lea d, [bp + -11] ; $i
2921   1608 2A            mov b, [d]
2922   1609 FD 7D         dec b
2923   160B FA F5 FF      lea d, [bp + -11] ; $i
2924   160E FD 43         mov [d], b
2925   1610 FD 77         inc b
2926   1612             ; putchar(digits[i]); 
2927   1612 FA F7 FF      lea d, [bp + -9] ; $digits
2928   1615 D7            push a
2929   1616 DA            push d
2930   1617 FA F5 FF      lea d, [bp + -11] ; $i
2931   161A 2A            mov b, [d]
2932   161B E7            pop d
2933   161C 5A            add d, b
2934   161D E4            pop a
2935   161E 32            mov bl, [d]
2936   161F A7 00         mov bh, 0
2937   1621 DD            push bl
2938   1622 07 5E 1B      call putchar
2939   1625 51 01 00      add sp, 1
2940   1628 0A F2 15      jmp _while43_cond
2941   162B             _while43_exit:
2942   162B F9            leave
2943   162C 09            ret
2944   162D             
2945   162D             print_unsigned_long:
2946   162D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2947   1630             ; char digits[10]; 
2948   1630 52 0A 00      sub sp, 10
2949   1633             ; int i; 
2950   1633 52 02 00      sub sp, 2
2951   1636             ; i = 0; 
2952   1636 FA F5 FF      lea d, [bp + -11] ; $i
2953   1639 DA            push d
2954   163A 26 00 00      mov b, $0
2955   163D E7            pop d
2956   163E FD 43         mov [d], b
2957   1640             ; if(num == 0){ 
2958   1640             _if44_cond:
2959   1640 FA 05 00      lea d, [bp + 5] ; $num
2960   1643 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2961   1646 FD 39         mov c, b ; And place it into C
2962   1648 2A            mov b, [d] ; Lower Word in B
2963   1649             ; --- START RELATIONAL
2964   1649 D7            push a
2965   164A FD D8         push g
2966   164C 11            mov a, b
2967   164D FD 7A         mov g, c
2968   164F 26 00 00      mov b, $0
2969   1652 38 00 00      mov c, 0
2970   1655 FD AF 00 00   cmp32 ga, cb
2970   1659 00 00 00 00 
2970   165D 00 00 00 00 
2970   1661 00 00 00 00 
2970   1665 00 00 00 00 
2970   1669 00 00 00 00 
2970   166D 00 00 00 00 
2970   1671 00 00 00 00 
2970   1675 00 00 00 00 
2970   1679 00 00 00 00 
2970   167D 00 00 00 00 
2970   1681 00 00 00 00 
2970   1685 00 00 00 00 
2970   1689 00 00 00 00 
2970   168D 00 00 00 00 
2970   1691 00 00 00 00 
2970   1695 00 00 00 00 
2970   1699 00 00 00 00 
2970   169D 00 00 00 00 
2970   16A1 00 00 00 00 
2970   16A5 00 00 00 00 
2970   16A9 00 00 00 00 
2970   16AD 00 00 00 00 
2970   16B1 00 00 00 00 
2970   16B5 00 00 00 00 
2970   16B9 00 00 00 00 
2970   16BD 00 00 00 00 
2970   16C1 00 00 00 00 
2970   16C5 00 00 00 00 
2970   16C9 00 00 00 00 
2970   16CD 00 00 00 00 
2970   16D1 00 00 00 00 
2970   16D5 00 00 00 00 
2970   16D9 00 00 00 00 
2970   16DD 00 00 00 00 
2970   16E1 00 00 00 00 
2970   16E5 00 00 00 00 
2970   16E9 00 00 00 00 
2970   16ED 00 00 00 00 
2970   16F1 00 00 00 00 
2970   16F5 00 00 00 00 
2970   16F9 00 00 00 00 
2970   16FD 00 00 00 00 
2970   1701 00 00 00 00 
2970   1705 00 00 00 00 
2970   1709 00 00 00 00 
2970   170D 00 00 00 00 
2970   1711 00 00 00 00 
2970   1715 00 00 00 00 
2970   1719 00 00 00 00 
2970   171D 00 00 00 00 
2970   1721 00 00 00 00 
2970   1725 00 00 00 00 
2970   1729 00 00 00 00 
2970   172D 00 00 00 00 
2970   1731 00 00 00 00 
2970   1735 00 00 00 00 
2970   1739 00 00 00 00 
2970   173D 00 00 00 00 
2970   1741 00 00 00 00 
2970   1745 00 00 00 00 
2970   1749 00 00 00 00 
2970   174D 00 00 00 00 
2970   1751 00 00 00 00 
2970   1755 00 
2971   1756 FD 71         seq ; ==
2972   1758 FD F1         pop g
2973   175A E4            pop a
2974   175B             ; --- END RELATIONAL
2975   175B C0 00 00      cmp b, 0
2976   175E C6 70 17      je _if44_exit
2977   1761             _if44_true:
2978   1761             ; putchar('0'); 
2979   1761 26 30 00      mov b, $30
2980   1764 DD            push bl
2981   1765 07 5E 1B      call putchar
2982   1768 51 01 00      add sp, 1
2983   176B             ; return; 
2984   176B F9            leave
2985   176C 09            ret
2986   176D 0A 70 17      jmp _if44_exit
2987   1770             _if44_exit:
2988   1770             ; while (num > 0) { 
2989   1770             _while45_cond:
2990   1770 FA 05 00      lea d, [bp + 5] ; $num
2991   1773 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2992   1776 FD 39         mov c, b ; And place it into C
2993   1778 2A            mov b, [d] ; Lower Word in B
2994   1779             ; --- START RELATIONAL
2995   1779 D7            push a
2996   177A FD D8         push g
2997   177C 11            mov a, b
2998   177D FD 7A         mov g, c
2999   177F 26 00 00      mov b, $0
3000   1782 38 00 00      mov c, 0
3001   1785 FD 81         sgu
3002   1787 FD F1         pop g
3003   1789 E4            pop a
3004   178A             ; --- END RELATIONAL
3005   178A C0 00 00      cmp b, 0
3006   178D C6 ED 17      je _while45_exit
3007   1790             _while45_block:
3008   1790             ; digits[i] = '0' + (num % 10); 
3009   1790 FA F7 FF      lea d, [bp + -9] ; $digits
3010   1793 D7            push a
3011   1794 DA            push d
3012   1795 FA F5 FF      lea d, [bp + -11] ; $i
3013   1798 2A            mov b, [d]
3014   1799 E7            pop d
3015   179A 5A            add d, b
3016   179B E4            pop a
3017   179C DA            push d
3018   179D 26 30 00      mov b, $30
3019   17A0             ; --- START TERMS
3020   17A0 D7            push a
3021   17A1 11            mov a, b
3022   17A2 FA 05 00      lea d, [bp + 5] ; $num
3023   17A5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3024   17A8 FD 39         mov c, b ; And place it into C
3025   17AA 2A            mov b, [d] ; Lower Word in B
3026   17AB             ; --- START FACTORS
3027   17AB D7            push a
3028   17AC 11            mov a, b
3029   17AD 26 0A 00      mov b, $a
3030   17B0 AE            div a, b ; 
3031   17B1 11            mov a, b
3032   17B2 27            mov b, a
3033   17B3 E4            pop a
3034   17B4             ; --- END FACTORS
3035   17B4 54            add a, b
3036   17B5 D7            push a
3037   17B6 FD 12         mov a, g
3038   17B8 28            mov b, c
3039   17B9 5C            adc a, b
3040   17BA 39            mov c, a
3041   17BB E5            pop b
3042   17BC E4            pop a
3043   17BD             ; --- END TERMS
3044   17BD E7            pop d
3045   17BE FD 3E         mov [d], bl
3046   17C0             ; num = num / 10; 
3047   17C0 FA 05 00      lea d, [bp + 5] ; $num
3048   17C3 DA            push d
3049   17C4 FA 05 00      lea d, [bp + 5] ; $num
3050   17C7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3051   17CA FD 39         mov c, b ; And place it into C
3052   17CC 2A            mov b, [d] ; Lower Word in B
3053   17CD             ; --- START FACTORS
3054   17CD D7            push a
3055   17CE 11            mov a, b
3056   17CF 26 0A 00      mov b, $a
3057   17D2 AE            div a, b
3058   17D3 27            mov b, a
3059   17D4 E4            pop a
3060   17D5             ; --- END FACTORS
3061   17D5 E7            pop d
3062   17D6 FD 43         mov [d], b
3063   17D8 28            mov b, c
3064   17D9 FD 44 02 00   mov [d + 2], b
3065   17DD             ; i++; 
3066   17DD FA F5 FF      lea d, [bp + -11] ; $i
3067   17E0 2A            mov b, [d]
3068   17E1 FD 77         inc b
3069   17E3 FA F5 FF      lea d, [bp + -11] ; $i
3070   17E6 FD 43         mov [d], b
3071   17E8 FD 7D         dec b
3072   17EA 0A 70 17      jmp _while45_cond
3073   17ED             _while45_exit:
3074   17ED             ; while (i > 0) { 
3075   17ED             _while46_cond:
3076   17ED FA F5 FF      lea d, [bp + -11] ; $i
3077   17F0 2A            mov b, [d]
3078   17F1             ; --- START RELATIONAL
3079   17F1 D7            push a
3080   17F2 11            mov a, b
3081   17F3 26 00 00      mov b, $0
3082   17F6 B0            cmp a, b
3083   17F7 FD 7F         sgt ; >
3084   17F9 E4            pop a
3085   17FA             ; --- END RELATIONAL
3086   17FA C0 00 00      cmp b, 0
3087   17FD C6 26 18      je _while46_exit
3088   1800             _while46_block:
3089   1800             ; i--; 
3090   1800 FA F5 FF      lea d, [bp + -11] ; $i
3091   1803 2A            mov b, [d]
3092   1804 FD 7D         dec b
3093   1806 FA F5 FF      lea d, [bp + -11] ; $i
3094   1809 FD 43         mov [d], b
3095   180B FD 77         inc b
3096   180D             ; putchar(digits[i]); 
3097   180D FA F7 FF      lea d, [bp + -9] ; $digits
3098   1810 D7            push a
3099   1811 DA            push d
3100   1812 FA F5 FF      lea d, [bp + -11] ; $i
3101   1815 2A            mov b, [d]
3102   1816 E7            pop d
3103   1817 5A            add d, b
3104   1818 E4            pop a
3105   1819 32            mov bl, [d]
3106   181A A7 00         mov bh, 0
3107   181C DD            push bl
3108   181D 07 5E 1B      call putchar
3109   1820 51 01 00      add sp, 1
3110   1823 0A ED 17      jmp _while46_cond
3111   1826             _while46_exit:
3112   1826 F9            leave
3113   1827 09            ret
3114   1828             
3115   1828             sprint_unsigned:
3116   1828 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3117   182B             ; char digits[5]; 
3118   182B 52 05 00      sub sp, 5
3119   182E             ; int i; 
3120   182E 52 02 00      sub sp, 2
3121   1831             ; int len = 0; 
3122   1831 52 02 00      sub sp, 2
3123   1834             ; --- START LOCAL VAR INITIALIZATION
3124   1834 FA F8 FF      lea d, [bp + -8] ; $len
3125   1837 DA            push d
3126   1838 26 00 00      mov b, $0
3127   183B E7            pop d
3128   183C FD 43         mov [d], b
3129   183E             ; --- END LOCAL VAR INITIALIZATION
3130   183E             ; i = 0; 
3131   183E FA FA FF      lea d, [bp + -6] ; $i
3132   1841 DA            push d
3133   1842 26 00 00      mov b, $0
3134   1845 E7            pop d
3135   1846 FD 43         mov [d], b
3136   1848             ; if(num == 0){ 
3137   1848             _if47_cond:
3138   1848 FA 07 00      lea d, [bp + 7] ; $num
3139   184B 2A            mov b, [d]
3140   184C             ; --- START RELATIONAL
3141   184C D7            push a
3142   184D 11            mov a, b
3143   184E 26 00 00      mov b, $0
3144   1851 B0            cmp a, b
3145   1852 FD 71         seq ; ==
3146   1854 E4            pop a
3147   1855             ; --- END RELATIONAL
3148   1855 C0 00 00      cmp b, 0
3149   1858 C6 77 18      je _if47_exit
3150   185B             _if47_true:
3151   185B             ; *dest++ = '0'; 
3152   185B FA 05 00      lea d, [bp + 5] ; $dest
3153   185E 2A            mov b, [d]
3154   185F FD 77         inc b
3155   1861 FA 05 00      lea d, [bp + 5] ; $dest
3156   1864 FD 43         mov [d], b
3157   1866 FD 7D         dec b
3158   1868 D8            push b
3159   1869 26 30 00      mov b, $30
3160   186C E7            pop d
3161   186D FD 3E         mov [d], bl
3162   186F             ; return 1; 
3163   186F 26 01 00      mov b, $1
3164   1872 F9            leave
3165   1873 09            ret
3166   1874 0A 77 18      jmp _if47_exit
3167   1877             _if47_exit:
3168   1877             ; while (num > 0) { 
3169   1877             _while48_cond:
3170   1877 FA 07 00      lea d, [bp + 7] ; $num
3171   187A 2A            mov b, [d]
3172   187B             ; --- START RELATIONAL
3173   187B D7            push a
3174   187C 11            mov a, b
3175   187D 26 00 00      mov b, $0
3176   1880 B0            cmp a, b
3177   1881 FD 81         sgu ; > (unsigned)
3178   1883 E4            pop a
3179   1884             ; --- END RELATIONAL
3180   1884 C0 00 00      cmp b, 0
3181   1887 C6 D1 18      je _while48_exit
3182   188A             _while48_block:
3183   188A             ; digits[i] = '0' + (num % 10); 
3184   188A FA FC FF      lea d, [bp + -4] ; $digits
3185   188D D7            push a
3186   188E DA            push d
3187   188F FA FA FF      lea d, [bp + -6] ; $i
3188   1892 2A            mov b, [d]
3189   1893 E7            pop d
3190   1894 5A            add d, b
3191   1895 E4            pop a
3192   1896 DA            push d
3193   1897 26 30 00      mov b, $30
3194   189A             ; --- START TERMS
3195   189A D7            push a
3196   189B 11            mov a, b
3197   189C FA 07 00      lea d, [bp + 7] ; $num
3198   189F 2A            mov b, [d]
3199   18A0             ; --- START FACTORS
3200   18A0 D7            push a
3201   18A1 11            mov a, b
3202   18A2 26 0A 00      mov b, $a
3203   18A5 AE            div a, b ; 
3204   18A6 11            mov a, b
3205   18A7 27            mov b, a
3206   18A8 E4            pop a
3207   18A9             ; --- END FACTORS
3208   18A9 56            add b, a
3209   18AA E4            pop a
3210   18AB             ; --- END TERMS
3211   18AB E7            pop d
3212   18AC FD 3E         mov [d], bl
3213   18AE             ; num = num / 10; 
3214   18AE FA 07 00      lea d, [bp + 7] ; $num
3215   18B1 DA            push d
3216   18B2 FA 07 00      lea d, [bp + 7] ; $num
3217   18B5 2A            mov b, [d]
3218   18B6             ; --- START FACTORS
3219   18B6 D7            push a
3220   18B7 11            mov a, b
3221   18B8 26 0A 00      mov b, $a
3222   18BB AE            div a, b
3223   18BC 27            mov b, a
3224   18BD E4            pop a
3225   18BE             ; --- END FACTORS
3226   18BE E7            pop d
3227   18BF FD 43         mov [d], b
3228   18C1             ; i++; 
3229   18C1 FA FA FF      lea d, [bp + -6] ; $i
3230   18C4 2A            mov b, [d]
3231   18C5 FD 77         inc b
3232   18C7 FA FA FF      lea d, [bp + -6] ; $i
3233   18CA FD 43         mov [d], b
3234   18CC FD 7D         dec b
3235   18CE 0A 77 18      jmp _while48_cond
3236   18D1             _while48_exit:
3237   18D1             ; while (i > 0) { 
3238   18D1             _while49_cond:
3239   18D1 FA FA FF      lea d, [bp + -6] ; $i
3240   18D4 2A            mov b, [d]
3241   18D5             ; --- START RELATIONAL
3242   18D5 D7            push a
3243   18D6 11            mov a, b
3244   18D7 26 00 00      mov b, $0
3245   18DA B0            cmp a, b
3246   18DB FD 7F         sgt ; >
3247   18DD E4            pop a
3248   18DE             ; --- END RELATIONAL
3249   18DE C0 00 00      cmp b, 0
3250   18E1 C6 21 19      je _while49_exit
3251   18E4             _while49_block:
3252   18E4             ; i--; 
3253   18E4 FA FA FF      lea d, [bp + -6] ; $i
3254   18E7 2A            mov b, [d]
3255   18E8 FD 7D         dec b
3256   18EA FA FA FF      lea d, [bp + -6] ; $i
3257   18ED FD 43         mov [d], b
3258   18EF FD 77         inc b
3259   18F1             ; *dest++ = digits[i]; 
3260   18F1 FA 05 00      lea d, [bp + 5] ; $dest
3261   18F4 2A            mov b, [d]
3262   18F5 FD 77         inc b
3263   18F7 FA 05 00      lea d, [bp + 5] ; $dest
3264   18FA FD 43         mov [d], b
3265   18FC FD 7D         dec b
3266   18FE D8            push b
3267   18FF FA FC FF      lea d, [bp + -4] ; $digits
3268   1902 D7            push a
3269   1903 DA            push d
3270   1904 FA FA FF      lea d, [bp + -6] ; $i
3271   1907 2A            mov b, [d]
3272   1908 E7            pop d
3273   1909 5A            add d, b
3274   190A E4            pop a
3275   190B 32            mov bl, [d]
3276   190C A7 00         mov bh, 0
3277   190E E7            pop d
3278   190F FD 3E         mov [d], bl
3279   1911             ; len++; 
3280   1911 FA F8 FF      lea d, [bp + -8] ; $len
3281   1914 2A            mov b, [d]
3282   1915 FD 77         inc b
3283   1917 FA F8 FF      lea d, [bp + -8] ; $len
3284   191A FD 43         mov [d], b
3285   191C FD 7D         dec b
3286   191E 0A D1 18      jmp _while49_cond
3287   1921             _while49_exit:
3288   1921             ; *dest = '\0'; 
3289   1921 FA 05 00      lea d, [bp + 5] ; $dest
3290   1924 2A            mov b, [d]
3291   1925 D8            push b
3292   1926 26 00 00      mov b, $0
3293   1929 E7            pop d
3294   192A FD 3E         mov [d], bl
3295   192C             ; return len; 
3296   192C FA F8 FF      lea d, [bp + -8] ; $len
3297   192F 2A            mov b, [d]
3298   1930 F9            leave
3299   1931 09            ret
3300   1932             
3301   1932             print_unsigned:
3302   1932 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3303   1935             ; char digits[5]; 
3304   1935 52 05 00      sub sp, 5
3305   1938             ; int i; 
3306   1938 52 02 00      sub sp, 2
3307   193B             ; i = 0; 
3308   193B FA FA FF      lea d, [bp + -6] ; $i
3309   193E DA            push d
3310   193F 26 00 00      mov b, $0
3311   1942 E7            pop d
3312   1943 FD 43         mov [d], b
3313   1945             ; if(num == 0){ 
3314   1945             _if50_cond:
3315   1945 FA 05 00      lea d, [bp + 5] ; $num
3316   1948 2A            mov b, [d]
3317   1949             ; --- START RELATIONAL
3318   1949 D7            push a
3319   194A 11            mov a, b
3320   194B 26 00 00      mov b, $0
3321   194E B0            cmp a, b
3322   194F FD 71         seq ; ==
3323   1951 E4            pop a
3324   1952             ; --- END RELATIONAL
3325   1952 C0 00 00      cmp b, 0
3326   1955 C6 67 19      je _if50_exit
3327   1958             _if50_true:
3328   1958             ; putchar('0'); 
3329   1958 26 30 00      mov b, $30
3330   195B DD            push bl
3331   195C 07 5E 1B      call putchar
3332   195F 51 01 00      add sp, 1
3333   1962             ; return; 
3334   1962 F9            leave
3335   1963 09            ret
3336   1964 0A 67 19      jmp _if50_exit
3337   1967             _if50_exit:
3338   1967             ; while (num > 0) { 
3339   1967             _while51_cond:
3340   1967 FA 05 00      lea d, [bp + 5] ; $num
3341   196A 2A            mov b, [d]
3342   196B             ; --- START RELATIONAL
3343   196B D7            push a
3344   196C 11            mov a, b
3345   196D 26 00 00      mov b, $0
3346   1970 B0            cmp a, b
3347   1971 FD 81         sgu ; > (unsigned)
3348   1973 E4            pop a
3349   1974             ; --- END RELATIONAL
3350   1974 C0 00 00      cmp b, 0
3351   1977 C6 C1 19      je _while51_exit
3352   197A             _while51_block:
3353   197A             ; digits[i] = '0' + (num % 10); 
3354   197A FA FC FF      lea d, [bp + -4] ; $digits
3355   197D D7            push a
3356   197E DA            push d
3357   197F FA FA FF      lea d, [bp + -6] ; $i
3358   1982 2A            mov b, [d]
3359   1983 E7            pop d
3360   1984 5A            add d, b
3361   1985 E4            pop a
3362   1986 DA            push d
3363   1987 26 30 00      mov b, $30
3364   198A             ; --- START TERMS
3365   198A D7            push a
3366   198B 11            mov a, b
3367   198C FA 05 00      lea d, [bp + 5] ; $num
3368   198F 2A            mov b, [d]
3369   1990             ; --- START FACTORS
3370   1990 D7            push a
3371   1991 11            mov a, b
3372   1992 26 0A 00      mov b, $a
3373   1995 AE            div a, b ; 
3374   1996 11            mov a, b
3375   1997 27            mov b, a
3376   1998 E4            pop a
3377   1999             ; --- END FACTORS
3378   1999 56            add b, a
3379   199A E4            pop a
3380   199B             ; --- END TERMS
3381   199B E7            pop d
3382   199C FD 3E         mov [d], bl
3383   199E             ; num = num / 10; 
3384   199E FA 05 00      lea d, [bp + 5] ; $num
3385   19A1 DA            push d
3386   19A2 FA 05 00      lea d, [bp + 5] ; $num
3387   19A5 2A            mov b, [d]
3388   19A6             ; --- START FACTORS
3389   19A6 D7            push a
3390   19A7 11            mov a, b
3391   19A8 26 0A 00      mov b, $a
3392   19AB AE            div a, b
3393   19AC 27            mov b, a
3394   19AD E4            pop a
3395   19AE             ; --- END FACTORS
3396   19AE E7            pop d
3397   19AF FD 43         mov [d], b
3398   19B1             ; i++; 
3399   19B1 FA FA FF      lea d, [bp + -6] ; $i
3400   19B4 2A            mov b, [d]
3401   19B5 FD 77         inc b
3402   19B7 FA FA FF      lea d, [bp + -6] ; $i
3403   19BA FD 43         mov [d], b
3404   19BC FD 7D         dec b
3405   19BE 0A 67 19      jmp _while51_cond
3406   19C1             _while51_exit:
3407   19C1             ; while (i > 0) { 
3408   19C1             _while52_cond:
3409   19C1 FA FA FF      lea d, [bp + -6] ; $i
3410   19C4 2A            mov b, [d]
3411   19C5             ; --- START RELATIONAL
3412   19C5 D7            push a
3413   19C6 11            mov a, b
3414   19C7 26 00 00      mov b, $0
3415   19CA B0            cmp a, b
3416   19CB FD 7F         sgt ; >
3417   19CD E4            pop a
3418   19CE             ; --- END RELATIONAL
3419   19CE C0 00 00      cmp b, 0
3420   19D1 C6 FA 19      je _while52_exit
3421   19D4             _while52_block:
3422   19D4             ; i--; 
3423   19D4 FA FA FF      lea d, [bp + -6] ; $i
3424   19D7 2A            mov b, [d]
3425   19D8 FD 7D         dec b
3426   19DA FA FA FF      lea d, [bp + -6] ; $i
3427   19DD FD 43         mov [d], b
3428   19DF FD 77         inc b
3429   19E1             ; putchar(digits[i]); 
3430   19E1 FA FC FF      lea d, [bp + -4] ; $digits
3431   19E4 D7            push a
3432   19E5 DA            push d
3433   19E6 FA FA FF      lea d, [bp + -6] ; $i
3434   19E9 2A            mov b, [d]
3435   19EA E7            pop d
3436   19EB 5A            add d, b
3437   19EC E4            pop a
3438   19ED 32            mov bl, [d]
3439   19EE A7 00         mov bh, 0
3440   19F0 DD            push bl
3441   19F1 07 5E 1B      call putchar
3442   19F4 51 01 00      add sp, 1
3443   19F7 0A C1 19      jmp _while52_cond
3444   19FA             _while52_exit:
3445   19FA F9            leave
3446   19FB 09            ret
3447   19FC             
3448   19FC             sprint_signed:
3449   19FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3450   19FF             ; char digits[5]; 
3451   19FF 52 05 00      sub sp, 5
3452   1A02             ; int i = 0; 
3453   1A02 52 02 00      sub sp, 2
3454   1A05             ; --- START LOCAL VAR INITIALIZATION
3455   1A05 FA FA FF      lea d, [bp + -6] ; $i
3456   1A08 DA            push d
3457   1A09 26 00 00      mov b, $0
3458   1A0C E7            pop d
3459   1A0D FD 43         mov [d], b
3460   1A0F             ; --- END LOCAL VAR INITIALIZATION
3461   1A0F             ; int len = 0; 
3462   1A0F 52 02 00      sub sp, 2
3463   1A12             ; --- START LOCAL VAR INITIALIZATION
3464   1A12 FA F8 FF      lea d, [bp + -8] ; $len
3465   1A15 DA            push d
3466   1A16 26 00 00      mov b, $0
3467   1A19 E7            pop d
3468   1A1A FD 43         mov [d], b
3469   1A1C             ; --- END LOCAL VAR INITIALIZATION
3470   1A1C             ; if (num < 0) { 
3471   1A1C             _if53_cond:
3472   1A1C FA 07 00      lea d, [bp + 7] ; $num
3473   1A1F 2A            mov b, [d]
3474   1A20             ; --- START RELATIONAL
3475   1A20 D7            push a
3476   1A21 11            mov a, b
3477   1A22 26 00 00      mov b, $0
3478   1A25 B0            cmp a, b
3479   1A26 FD 73         slt ; < (signed)
3480   1A28 E4            pop a
3481   1A29             ; --- END RELATIONAL
3482   1A29 C0 00 00      cmp b, 0
3483   1A2C C6 60 1A      je _if53_else
3484   1A2F             _if53_true:
3485   1A2F             ; *dest++ = '-'; 
3486   1A2F FA 05 00      lea d, [bp + 5] ; $dest
3487   1A32 2A            mov b, [d]
3488   1A33 FD 77         inc b
3489   1A35 FA 05 00      lea d, [bp + 5] ; $dest
3490   1A38 FD 43         mov [d], b
3491   1A3A FD 7D         dec b
3492   1A3C D8            push b
3493   1A3D 26 2D 00      mov b, $2d
3494   1A40 E7            pop d
3495   1A41 FD 3E         mov [d], bl
3496   1A43             ; num = -num; 
3497   1A43 FA 07 00      lea d, [bp + 7] ; $num
3498   1A46 DA            push d
3499   1A47 FA 07 00      lea d, [bp + 7] ; $num
3500   1A4A 2A            mov b, [d]
3501   1A4B FD 97         neg b
3502   1A4D E7            pop d
3503   1A4E FD 43         mov [d], b
3504   1A50             ; len++; 
3505   1A50 FA F8 FF      lea d, [bp + -8] ; $len
3506   1A53 2A            mov b, [d]
3507   1A54 FD 77         inc b
3508   1A56 FA F8 FF      lea d, [bp + -8] ; $len
3509   1A59 FD 43         mov [d], b
3510   1A5B FD 7D         dec b
3511   1A5D 0A 9A 1A      jmp _if53_exit
3512   1A60             _if53_else:
3513   1A60             ; if (num == 0) { 
3514   1A60             _if54_cond:
3515   1A60 FA 07 00      lea d, [bp + 7] ; $num
3516   1A63 2A            mov b, [d]
3517   1A64             ; --- START RELATIONAL
3518   1A64 D7            push a
3519   1A65 11            mov a, b
3520   1A66 26 00 00      mov b, $0
3521   1A69 B0            cmp a, b
3522   1A6A FD 71         seq ; ==
3523   1A6C E4            pop a
3524   1A6D             ; --- END RELATIONAL
3525   1A6D C0 00 00      cmp b, 0
3526   1A70 C6 9A 1A      je _if54_exit
3527   1A73             _if54_true:
3528   1A73             ; *dest++ = '0'; 
3529   1A73 FA 05 00      lea d, [bp + 5] ; $dest
3530   1A76 2A            mov b, [d]
3531   1A77 FD 77         inc b
3532   1A79 FA 05 00      lea d, [bp + 5] ; $dest
3533   1A7C FD 43         mov [d], b
3534   1A7E FD 7D         dec b
3535   1A80 D8            push b
3536   1A81 26 30 00      mov b, $30
3537   1A84 E7            pop d
3538   1A85 FD 3E         mov [d], bl
3539   1A87             ; *dest = '\0'; 
3540   1A87 FA 05 00      lea d, [bp + 5] ; $dest
3541   1A8A 2A            mov b, [d]
3542   1A8B D8            push b
3543   1A8C 26 00 00      mov b, $0
3544   1A8F E7            pop d
3545   1A90 FD 3E         mov [d], bl
3546   1A92             ; return 1; 
3547   1A92 26 01 00      mov b, $1
3548   1A95 F9            leave
3549   1A96 09            ret
3550   1A97 0A 9A 1A      jmp _if54_exit
3551   1A9A             _if54_exit:
3552   1A9A             _if53_exit:
3553   1A9A             ; while (num > 0) { 
3554   1A9A             _while55_cond:
3555   1A9A FA 07 00      lea d, [bp + 7] ; $num
3556   1A9D 2A            mov b, [d]
3557   1A9E             ; --- START RELATIONAL
3558   1A9E D7            push a
3559   1A9F 11            mov a, b
3560   1AA0 26 00 00      mov b, $0
3561   1AA3 B0            cmp a, b
3562   1AA4 FD 7F         sgt ; >
3563   1AA6 E4            pop a
3564   1AA7             ; --- END RELATIONAL
3565   1AA7 C0 00 00      cmp b, 0
3566   1AAA C6 F4 1A      je _while55_exit
3567   1AAD             _while55_block:
3568   1AAD             ; digits[i] = '0' + (num % 10); 
3569   1AAD FA FC FF      lea d, [bp + -4] ; $digits
3570   1AB0 D7            push a
3571   1AB1 DA            push d
3572   1AB2 FA FA FF      lea d, [bp + -6] ; $i
3573   1AB5 2A            mov b, [d]
3574   1AB6 E7            pop d
3575   1AB7 5A            add d, b
3576   1AB8 E4            pop a
3577   1AB9 DA            push d
3578   1ABA 26 30 00      mov b, $30
3579   1ABD             ; --- START TERMS
3580   1ABD D7            push a
3581   1ABE 11            mov a, b
3582   1ABF FA 07 00      lea d, [bp + 7] ; $num
3583   1AC2 2A            mov b, [d]
3584   1AC3             ; --- START FACTORS
3585   1AC3 D7            push a
3586   1AC4 11            mov a, b
3587   1AC5 26 0A 00      mov b, $a
3588   1AC8 AE            div a, b ; 
3589   1AC9 11            mov a, b
3590   1ACA 27            mov b, a
3591   1ACB E4            pop a
3592   1ACC             ; --- END FACTORS
3593   1ACC 56            add b, a
3594   1ACD E4            pop a
3595   1ACE             ; --- END TERMS
3596   1ACE E7            pop d
3597   1ACF FD 3E         mov [d], bl
3598   1AD1             ; num = num / 10; 
3599   1AD1 FA 07 00      lea d, [bp + 7] ; $num
3600   1AD4 DA            push d
3601   1AD5 FA 07 00      lea d, [bp + 7] ; $num
3602   1AD8 2A            mov b, [d]
3603   1AD9             ; --- START FACTORS
3604   1AD9 D7            push a
3605   1ADA 11            mov a, b
3606   1ADB 26 0A 00      mov b, $a
3607   1ADE AE            div a, b
3608   1ADF 27            mov b, a
3609   1AE0 E4            pop a
3610   1AE1             ; --- END FACTORS
3611   1AE1 E7            pop d
3612   1AE2 FD 43         mov [d], b
3613   1AE4             ; i++; 
3614   1AE4 FA FA FF      lea d, [bp + -6] ; $i
3615   1AE7 2A            mov b, [d]
3616   1AE8 FD 77         inc b
3617   1AEA FA FA FF      lea d, [bp + -6] ; $i
3618   1AED FD 43         mov [d], b
3619   1AEF FD 7D         dec b
3620   1AF1 0A 9A 1A      jmp _while55_cond
3621   1AF4             _while55_exit:
3622   1AF4             ; while (i > 0) { 
3623   1AF4             _while56_cond:
3624   1AF4 FA FA FF      lea d, [bp + -6] ; $i
3625   1AF7 2A            mov b, [d]
3626   1AF8             ; --- START RELATIONAL
3627   1AF8 D7            push a
3628   1AF9 11            mov a, b
3629   1AFA 26 00 00      mov b, $0
3630   1AFD B0            cmp a, b
3631   1AFE FD 7F         sgt ; >
3632   1B00 E4            pop a
3633   1B01             ; --- END RELATIONAL
3634   1B01 C0 00 00      cmp b, 0
3635   1B04 C6 44 1B      je _while56_exit
3636   1B07             _while56_block:
3637   1B07             ; i--; 
3638   1B07 FA FA FF      lea d, [bp + -6] ; $i
3639   1B0A 2A            mov b, [d]
3640   1B0B FD 7D         dec b
3641   1B0D FA FA FF      lea d, [bp + -6] ; $i
3642   1B10 FD 43         mov [d], b
3643   1B12 FD 77         inc b
3644   1B14             ; *dest++ = digits[i]; 
3645   1B14 FA 05 00      lea d, [bp + 5] ; $dest
3646   1B17 2A            mov b, [d]
3647   1B18 FD 77         inc b
3648   1B1A FA 05 00      lea d, [bp + 5] ; $dest
3649   1B1D FD 43         mov [d], b
3650   1B1F FD 7D         dec b
3651   1B21 D8            push b
3652   1B22 FA FC FF      lea d, [bp + -4] ; $digits
3653   1B25 D7            push a
3654   1B26 DA            push d
3655   1B27 FA FA FF      lea d, [bp + -6] ; $i
3656   1B2A 2A            mov b, [d]
3657   1B2B E7            pop d
3658   1B2C 5A            add d, b
3659   1B2D E4            pop a
3660   1B2E 32            mov bl, [d]
3661   1B2F A7 00         mov bh, 0
3662   1B31 E7            pop d
3663   1B32 FD 3E         mov [d], bl
3664   1B34             ; len++; 
3665   1B34 FA F8 FF      lea d, [bp + -8] ; $len
3666   1B37 2A            mov b, [d]
3667   1B38 FD 77         inc b
3668   1B3A FA F8 FF      lea d, [bp + -8] ; $len
3669   1B3D FD 43         mov [d], b
3670   1B3F FD 7D         dec b
3671   1B41 0A F4 1A      jmp _while56_cond
3672   1B44             _while56_exit:
3673   1B44             ; *dest = '\0'; 
3674   1B44 FA 05 00      lea d, [bp + 5] ; $dest
3675   1B47 2A            mov b, [d]
3676   1B48 D8            push b
3677   1B49 26 00 00      mov b, $0
3678   1B4C E7            pop d
3679   1B4D FD 3E         mov [d], bl
3680   1B4F             ; return len; 
3681   1B4F FA F8 FF      lea d, [bp + -8] ; $len
3682   1B52 2A            mov b, [d]
3683   1B53 F9            leave
3684   1B54 09            ret
3685   1B55             
3686   1B55             date:
3687   1B55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3688   1B58             
3689   1B58             ; --- BEGIN INLINE ASM SEGMENT
3690   1B58 19 00         mov al, 0 
3691   1B5A 05 07         syscall sys_datetime
3692   1B5C             ; --- END INLINE ASM SEGMENT
3693   1B5C             
3694   1B5C F9            leave
3695   1B5D 09            ret
3696   1B5E             
3697   1B5E             putchar:
3698   1B5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3699   1B61             
3700   1B61             ; --- BEGIN INLINE ASM SEGMENT
3701   1B61 FA 05 00      lea d, [bp + 5] ; $c
3702   1B64 1E            mov al, [d]
3703   1B65 23            mov ah, al
3704   1B66 07 55 1D      call _putchar
3705   1B69             ; --- END INLINE ASM SEGMENT
3706   1B69             
3707   1B69 F9            leave
3708   1B6A 09            ret
3709   1B6B             
3710   1B6B             getchar:
3711   1B6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3712   1B6E             ; char c; 
3713   1B6E 52 01 00      sub sp, 1
3714   1B71             
3715   1B71             ; --- BEGIN INLINE ASM SEGMENT
3716   1B71 07 4E 1D      call getch
3717   1B74 1A            mov al, ah
3718   1B75 FA 00 00      lea d, [bp + 0] ; $c
3719   1B78 3E            mov [d], al
3720   1B79             ; --- END INLINE ASM SEGMENT
3721   1B79             
3722   1B79             ; return c; 
3723   1B79 FA 00 00      lea d, [bp + 0] ; $c
3724   1B7C 32            mov bl, [d]
3725   1B7D A7 00         mov bh, 0
3726   1B7F F9            leave
3727   1B80 09            ret
3728   1B81             
3729   1B81             scann:
3730   1B81 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3731   1B84             ; int m; 
3732   1B84 52 02 00      sub sp, 2
3733   1B87             
3734   1B87             ; --- BEGIN INLINE ASM SEGMENT
3735   1B87 07 99 1F      call scan_u16d
3736   1B8A FA FF FF      lea d, [bp + -1] ; $m
3737   1B8D 43            mov [d], a
3738   1B8E             ; --- END INLINE ASM SEGMENT
3739   1B8E             
3740   1B8E             ; return m; 
3741   1B8E FA FF FF      lea d, [bp + -1] ; $m
3742   1B91 2A            mov b, [d]
3743   1B92 F9            leave
3744   1B93 09            ret
3745   1B94             
3746   1B94             puts:
3747   1B94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3748   1B97             
3749   1B97             ; --- BEGIN INLINE ASM SEGMENT
3750   1B97 FA 05 00      lea d, [bp + 5] ; $s
3751   1B9A 15            mov a, [d]
3752   1B9B 3C            mov d, a
3753   1B9C 07 9F 1E      call _puts
3754   1B9F 10 00 0A      mov a, $0A00
3755   1BA2 05 03         syscall sys_io
3756   1BA4             ; --- END INLINE ASM SEGMENT
3757   1BA4             
3758   1BA4 F9            leave
3759   1BA5 09            ret
3760   1BA6             
3761   1BA6             print:
3762   1BA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3763   1BA9             
3764   1BA9             ; --- BEGIN INLINE ASM SEGMENT
3765   1BA9 FA 05 00      lea d, [bp + 5] ; $s
3766   1BAC FD 2A         mov d, [d]
3767   1BAE 07 9F 1E      call _puts
3768   1BB1             ; --- END INLINE ASM SEGMENT
3769   1BB1             
3770   1BB1 F9            leave
3771   1BB2 09            ret
3772   1BB3             
3773   1BB3             getparam:
3774   1BB3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3775   1BB6             ; char data; 
3776   1BB6 52 01 00      sub sp, 1
3777   1BB9             
3778   1BB9             ; --- BEGIN INLINE ASM SEGMENT
3779   1BB9 19 04         mov al, 4
3780   1BBB FA 05 00      lea d, [bp + 5] ; $address
3781   1BBE FD 2A         mov d, [d]
3782   1BC0 05 0C         syscall sys_system
3783   1BC2 FA 00 00      lea d, [bp + 0] ; $data
3784   1BC5 FD 3E         mov [d], bl
3785   1BC7             ; --- END INLINE ASM SEGMENT
3786   1BC7             
3787   1BC7             ; return data; 
3788   1BC7 FA 00 00      lea d, [bp + 0] ; $data
3789   1BCA 32            mov bl, [d]
3790   1BCB A7 00         mov bh, 0
3791   1BCD F9            leave
3792   1BCE 09            ret
3793   1BCF             
3794   1BCF             clear:
3795   1BCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3796   1BD2             ; print("\033[2J\033[H"); 
3797   1BD2 26 B6 24      mov b, _s2 ; "\033[2J\033[H"
3798   1BD5 FD AB         swp b
3799   1BD7 D8            push b
3800   1BD8 07 A6 1B      call print
3801   1BDB 51 02 00      add sp, 2
3802   1BDE F9            leave
3803   1BDF 09            ret
3804   1BE0             
3805   1BE0             abs:
3806   1BE0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3807   1BE3             ; return i < 0 ? -i : i; 
3808   1BE3             _ternary57_cond:
3809   1BE3 FA 05 00      lea d, [bp + 5] ; $i
3810   1BE6 2A            mov b, [d]
3811   1BE7             ; --- START RELATIONAL
3812   1BE7 D7            push a
3813   1BE8 11            mov a, b
3814   1BE9 26 00 00      mov b, $0
3815   1BEC B0            cmp a, b
3816   1BED FD 73         slt ; < (signed)
3817   1BEF E4            pop a
3818   1BF0             ; --- END RELATIONAL
3819   1BF0 C0 00 00      cmp b, 0
3820   1BF3 C6 FF 1B      je _ternary57_false
3821   1BF6             _ternary57_true:
3822   1BF6 FA 05 00      lea d, [bp + 5] ; $i
3823   1BF9 2A            mov b, [d]
3824   1BFA FD 97         neg b
3825   1BFC 0A 03 1C      jmp _ternary57_exit
3826   1BFF             _ternary57_false:
3827   1BFF FA 05 00      lea d, [bp + 5] ; $i
3828   1C02 2A            mov b, [d]
3829   1C03             _ternary57_exit:
3830   1C03 F9            leave
3831   1C04 09            ret
3832   1C05             
3833   1C05             loadfile:
3834   1C05 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3835   1C08             
3836   1C08             ; --- BEGIN INLINE ASM SEGMENT
3837   1C08 FA 07 00      lea d, [bp + 7] ; $destination
3838   1C0B 15            mov a, [d]
3839   1C0C 4F            mov di, a
3840   1C0D FA 05 00      lea d, [bp + 5] ; $filename
3841   1C10 FD 2A         mov d, [d]
3842   1C12 19 14         mov al, 20
3843   1C14 05 04         syscall sys_filesystem
3844   1C16             ; --- END INLINE ASM SEGMENT
3845   1C16             
3846   1C16 F9            leave
3847   1C17 09            ret
3848   1C18             
3849   1C18             create_file:
3850   1C18 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3851   1C1B F9            leave
3852   1C1C 09            ret
3853   1C1D             
3854   1C1D             delete_file:
3855   1C1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3856   1C20             
3857   1C20             ; --- BEGIN INLINE ASM SEGMENT
3858   1C20 FA 05 00      lea d, [bp + 5] ; $filename
3859   1C23 19 0A         mov al, 10
3860   1C25 05 04         syscall sys_filesystem
3861   1C27             ; --- END INLINE ASM SEGMENT
3862   1C27             
3863   1C27 F9            leave
3864   1C28 09            ret
3865   1C29             
3866   1C29             load_hex:
3867   1C29 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3868   1C2C             ; char *temp; 
3869   1C2C 52 02 00      sub sp, 2
3870   1C2F             ; temp = alloc(32768); 
3871   1C2F FA FF FF      lea d, [bp + -1] ; $temp
3872   1C32 DA            push d
3873   1C33 26 00 80      mov b, $8000
3874   1C36 FD AB         swp b
3875   1C38 D8            push b
3876   1C39 07 D2 07      call alloc
3877   1C3C 51 02 00      add sp, 2
3878   1C3F E7            pop d
3879   1C40 FD 43         mov [d], b
3880   1C42             
3881   1C42             ; --- BEGIN INLINE ASM SEGMENT
3882   1C42               
3883   1C42               
3884   1C42               
3885   1C42             _load_hex:
3886   1C42 FA 05 00      lea d, [bp + 5] ; $destination
3887   1C45 FD 2A         mov d, [d]
3888   1C47 FD 50         mov di, d
3889   1C49 FA FF FF      lea d, [bp + -1] ; $temp
3890   1C4C FD 2A         mov d, [d]
3891   1C4E 38 00 00      mov c, 0
3892   1C51 48            mov a, sp
3893   1C52 77            inc a
3894   1C53 3C            mov d, a          
3895   1C54 07 5C 1D      call _gets        
3896   1C57 4D            mov si, a
3897   1C58             __load_hex_loop:
3898   1C58 F6            lodsb             
3899   1C59 B9 00         cmp al, 0         
3900   1C5B C6 69 1C      jz __load_hex_ret
3901   1C5E 36            mov bh, al
3902   1C5F F6            lodsb
3903   1C60 2F            mov bl, al
3904   1C61 07 13 1D      call _atoi        
3905   1C64 F7            stosb             
3906   1C65 78            inc c
3907   1C66 0A 58 1C      jmp __load_hex_loop
3908   1C69             __load_hex_ret:
3909   1C69             ; --- END INLINE ASM SEGMENT
3910   1C69             
3911   1C69 F9            leave
3912   1C6A 09            ret
3913   1C6B             
3914   1C6B             include_stdio_asm:
3915   1C6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3916   1C6E             
3917   1C6E             ; --- BEGIN INLINE ASM SEGMENT
3918   1C6E             .include "lib/asm/stdio.asm"
0001+  1C6E             ;-----------------------------------------------------------------------------
0002+  1C6E             ; stdio.s
0003+  1C6E             ;-----------------------------------------------------------------------------
0004+  1C6E             .include "lib/asm/string.asm"
0001++ 1C6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1C6E             ; string.s
0003++ 1C6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1C6E             
0005++ 1C6E             
0006++ 1C6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1C6E             ; _strrev
0008++ 1C6E             ; reverse a string
0009++ 1C6E             ; D = string address
0010++ 1C6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1C6E             ; 01234
0012++ 1C6E             _strrev:
0013++ 1C6E 4B          	pusha
0014++ 1C6F 07 B5 1C    	call _strlen	; length in C
0015++ 1C72 12          	mov a, c
0016++ 1C73 AF 01 00    	cmp a, 1
0017++ 1C76 D0 90 1C    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1C79 7D          	dec a
0019++ 1C7A FD 4E       	mov si, d	; beginning of string
0020++ 1C7C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1C7E 59          	add d, a	; end of string
0022++ 1C7F 12          	mov a, c
0023++ 1C80 FD 9B       	shr a		; divide by 2
0024++ 1C82 39          	mov c, a	; C now counts the steps
0025++ 1C83             _strrev_L0:
0026++ 1C83 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1C84 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1C85 3E          	mov [d], al	; store left char into right side
0029++ 1C86 1B          	mov al, bl
0030++ 1C87 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1C88 7E          	dec c
0032++ 1C89 7F          	dec d
0033++ 1C8A C2 00 00    	cmp c, 0
0034++ 1C8D C7 83 1C    	jne _strrev_L0
0035++ 1C90             _strrev_end:
0036++ 1C90 4C          	popa
0037++ 1C91 09          	ret
0038++ 1C92             	
0039++ 1C92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1C92             ; _strchr
0041++ 1C92             ; search string in D for char in AL
0042++ 1C92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1C92             _strchr:
0044++ 1C92             _strchr_L0:
0045++ 1C92 32          	mov bl, [d]
0046++ 1C93 C1 00       	cmp bl, 0
0047++ 1C95 C6 A0 1C    	je _strchr_end
0048++ 1C98 BA          	cmp al, bl
0049++ 1C99 C6 A0 1C    	je _strchr_end
0050++ 1C9C 79          	inc d
0051++ 1C9D 0A 92 1C    	jmp _strchr_L0
0052++ 1CA0             _strchr_end:
0053++ 1CA0 1B          	mov al, bl
0054++ 1CA1 09          	ret
0055++ 1CA2             
0056++ 1CA2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1CA2             ; _strstr
0058++ 1CA2             ; find sub-string
0059++ 1CA2             ; str1 in SI
0060++ 1CA2             ; str2 in DI
0061++ 1CA2             ; SI points to end of source string
0062++ 1CA2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1CA2             _strstr:
0064++ 1CA2 DB          	push al
0065++ 1CA3 DA          	push d
0066++ 1CA4 E3          	push di
0067++ 1CA5             _strstr_loop:
0068++ 1CA5 F3          	cmpsb					; compare a byte of the strings
0069++ 1CA6 C7 B1 1C    	jne _strstr_ret
0070++ 1CA9 FC 00 00    	lea d, [di + 0]
0071++ 1CAC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1CAE C7 A5 1C    	jne _strstr_loop				; equal chars but not at end
0073++ 1CB1             _strstr_ret:
0074++ 1CB1 F0          	pop di
0075++ 1CB2 E7          	pop d
0076++ 1CB3 E8          	pop al
0077++ 1CB4 09          	ret
0078++ 1CB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1CB5             ; length of null terminated string
0080++ 1CB5             ; result in C
0081++ 1CB5             ; pointer in D
0082++ 1CB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1CB5             _strlen:
0084++ 1CB5 DA          	push d
0085++ 1CB6 38 00 00    	mov c, 0
0086++ 1CB9             _strlen_L1:
0087++ 1CB9 BD 00       	cmp byte [d], 0
0088++ 1CBB C6 C3 1C    	je _strlen_ret
0089++ 1CBE 79          	inc d
0090++ 1CBF 78          	inc c
0091++ 1CC0 0A B9 1C    	jmp _strlen_L1
0092++ 1CC3             _strlen_ret:
0093++ 1CC3 E7          	pop d
0094++ 1CC4 09          	ret
0095++ 1CC5             
0096++ 1CC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1CC5             ; STRCMP
0098++ 1CC5             ; compare two strings
0099++ 1CC5             ; str1 in SI
0100++ 1CC5             ; str2 in DI
0101++ 1CC5             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1CC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1CC5             _strcmp:
0104++ 1CC5 DB          	push al
0105++ 1CC6 DA          	push d
0106++ 1CC7 E3          	push di
0107++ 1CC8 E2          	push si
0108++ 1CC9             _strcmp_loop:
0109++ 1CC9 F3          	cmpsb					; compare a byte of the strings
0110++ 1CCA C7 D5 1C    	jne _strcmp_ret
0111++ 1CCD FB FF FF    	lea d, [si +- 1]
0112++ 1CD0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1CD2 C7 C9 1C    	jne _strcmp_loop				; equal chars but not at end
0114++ 1CD5             _strcmp_ret:
0115++ 1CD5 EF          	pop si
0116++ 1CD6 F0          	pop di
0117++ 1CD7 E7          	pop d
0118++ 1CD8 E8          	pop al
0119++ 1CD9 09          	ret
0120++ 1CDA             
0121++ 1CDA             
0122++ 1CDA             ; STRCPY
0123++ 1CDA             ; copy null terminated string from SI to DI
0124++ 1CDA             ; source in SI
0125++ 1CDA             ; destination in DI
0126++ 1CDA             _strcpy:
0127++ 1CDA E2          	push si
0128++ 1CDB E3          	push di
0129++ 1CDC DB          	push al
0130++ 1CDD             _strcpy_L1:
0131++ 1CDD F6          	lodsb
0132++ 1CDE F7          	stosb
0133++ 1CDF B9 00       	cmp al, 0
0134++ 1CE1 C7 DD 1C    	jne _strcpy_L1
0135++ 1CE4             _strcpy_end:
0136++ 1CE4 E8          	pop al
0137++ 1CE5 F0          	pop di
0138++ 1CE6 EF          	pop si
0139++ 1CE7 09          	ret
0140++ 1CE8             
0141++ 1CE8             ; STRCAT
0142++ 1CE8             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1CE8             ; source in SI
0144++ 1CE8             ; destination in DI
0145++ 1CE8             _strcat:
0146++ 1CE8 E2          	push si
0147++ 1CE9 E3          	push di
0148++ 1CEA D7          	push a
0149++ 1CEB DA          	push d
0150++ 1CEC 50          	mov a, di
0151++ 1CED 3C          	mov d, a
0152++ 1CEE             _strcat_goto_end_L1:
0153++ 1CEE BD 00       	cmp byte[d], 0
0154++ 1CF0 C6 F7 1C    	je _strcat_start
0155++ 1CF3 79          	inc d
0156++ 1CF4 0A EE 1C    	jmp _strcat_goto_end_L1
0157++ 1CF7             _strcat_start:
0158++ 1CF7 FD 50       	mov di, d
0159++ 1CF9             _strcat_L1:
0160++ 1CF9 F6          	lodsb
0161++ 1CFA F7          	stosb
0162++ 1CFB B9 00       	cmp al, 0
0163++ 1CFD C7 F9 1C    	jne _strcat_L1
0164++ 1D00             _strcat_end:
0165++ 1D00 E7          	pop d
0166++ 1D01 E4          	pop a
0167++ 1D02 F0          	pop di
0168++ 1D03 EF          	pop si
0169++ 1D04 09          	ret
0170++ 1D05             
0171++ 1D05             
0005+  1D05             
0006+  1D05             ;-----------------------------------------------------------------------------
0007+  1D05             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1D05             ; ASCII in BL
0009+  1D05             ; result in AL
0010+  1D05             ; ascii for F = 0100 0110
0011+  1D05             ; ascii for 9 = 0011 1001
0012+  1D05             ;-----------------------------------------------------------------------------
0013+  1D05             hex_ascii_encode:
0014+  1D05 1B            mov al, bl
0015+  1D06 93 40         test al, $40        ; test if letter or number
0016+  1D08 C7 0E 1D      jnz hex_letter
0017+  1D0B 87 0F         and al, $0F        ; get number
0018+  1D0D 09            ret
0019+  1D0E             hex_letter:
0020+  1D0E 87 0F         and al, $0F        ; get letter
0021+  1D10 6A 09         add al, 9
0022+  1D12 09            ret
0023+  1D13             
0024+  1D13             ;-----------------------------------------------------------------------------
0025+  1D13             ; ATOI
0026+  1D13             ; 2 letter hex string in B
0027+  1D13             ; 8bit integer returned in AL
0028+  1D13             ;-----------------------------------------------------------------------------
0029+  1D13             _atoi:
0030+  1D13 D8            push b
0031+  1D14 07 05 1D      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1D17 30            mov bl, bh
0033+  1D18 DB            push al          ; save a
0034+  1D19 07 05 1D      call hex_ascii_encode
0035+  1D1C EA            pop bl  
0036+  1D1D FD 9E 04      shl al, 4
0037+  1D20 8C            or al, bl
0038+  1D21 E5            pop b
0039+  1D22 09            ret  
0040+  1D23             
0041+  1D23             
0042+  1D23             ;-----------------------------------------------------------------------------
0043+  1D23             ; ITOA
0044+  1D23             ; 8bit value in BL
0045+  1D23             ; 2 byte ASCII result in A
0046+  1D23             ;-----------------------------------------------------------------------------
0047+  1D23             _itoa:
0048+  1D23 DA            push d
0049+  1D24 D8            push b
0050+  1D25 A7 00         mov bh, 0
0051+  1D27 FD A4 04      shr bl, 4  
0052+  1D2A 74            mov d, b
0053+  1D2B 1F D3 1F      mov al, [d + s_hex_digits]
0054+  1D2E 23            mov ah, al
0055+  1D2F               
0056+  1D2F E5            pop b
0057+  1D30 D8            push b
0058+  1D31 A7 00         mov bh, 0
0059+  1D33 FD 87 0F      and bl, $0F
0060+  1D36 74            mov d, b
0061+  1D37 1F D3 1F      mov al, [d + s_hex_digits]
0062+  1D3A E5            pop b
0063+  1D3B E7            pop d
0064+  1D3C 09            ret
0065+  1D3D             
0066+  1D3D             ;-----------------------------------------------------------------------------
0067+  1D3D             ; HEX STRING TO BINARY
0068+  1D3D             ; di = destination address
0069+  1D3D             ; si = source
0070+  1D3D             ;-----------------------------------------------------------------------------
0071+  1D3D             _hex_to_int:
0072+  1D3D             _hex_to_int_L1:
0073+  1D3D F6            lodsb          ; load from [SI] to AL
0074+  1D3E B9 00         cmp al, 0        ; check if ASCII 0
0075+  1D40 C6 4D 1D      jz _hex_to_int_ret
0076+  1D43 36            mov bh, al
0077+  1D44 F6            lodsb
0078+  1D45 2F            mov bl, al
0079+  1D46 07 13 1D      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1D49 F7            stosb          ; store AL to [DI]
0081+  1D4A 0A 3D 1D      jmp _hex_to_int_L1
0082+  1D4D             _hex_to_int_ret:
0083+  1D4D 09            ret    
0084+  1D4E             
0085+  1D4E             ;-----------------------------------------------------------------------------
0086+  1D4E             ; GETCHAR
0087+  1D4E             ; char in ah
0088+  1D4E             ;-----------------------------------------------------------------------------
0089+  1D4E             getch:
0090+  1D4E DB            push al
0091+  1D4F             getch_retry:
0092+  1D4F 19 01         mov al, 1
0093+  1D51 05 03         syscall sys_io      ; receive in AH
0094+  1D53 E8            pop al
0095+  1D54 09            ret
0096+  1D55             
0097+  1D55             ;-----------------------------------------------------------------------------
0098+  1D55             ; PUTCHAR
0099+  1D55             ; char in ah
0100+  1D55             ;-----------------------------------------------------------------------------
0101+  1D55             _putchar:
0102+  1D55 D7            push a
0103+  1D56 19 00         mov al, 0
0104+  1D58 05 03         syscall sys_io      ; char in AH
0105+  1D5A E4            pop a
0106+  1D5B 09            ret
0107+  1D5C             
0108+  1D5C             ;-----------------------------------------------------------------------------
0109+  1D5C             ;; INPUT A STRING
0110+  1D5C             ;; terminates with null
0111+  1D5C             ;; pointer in D
0112+  1D5C             ;-----------------------------------------------------------------------------
0113+  1D5C             _gets:
0114+  1D5C D7            push a
0115+  1D5D DA            push d
0116+  1D5E             _gets_loop:
0117+  1D5E 19 01         mov al, 1
0118+  1D60 05 03         syscall sys_io      ; receive in AH
0119+  1D62 B9 00         cmp al, 0        ; check error code (AL)
0120+  1D64 C6 5E 1D      je _gets_loop      ; if no char received, retry
0121+  1D67             
0122+  1D67 76 1B         cmp ah, 27
0123+  1D69 C6 8A 1D      je _gets_ansi_esc
0124+  1D6C 76 0A         cmp ah, $0A        ; LF
0125+  1D6E C6 F5 1D      je _gets_end
0126+  1D71 76 0D         cmp ah, $0D        ; CR
0127+  1D73 C6 F5 1D      je _gets_end
0128+  1D76 76 5C         cmp ah, $5C        ; '\\'
0129+  1D78 C6 B6 1D      je _gets_escape
0130+  1D7B               
0131+  1D7B 76 08         cmp ah, $08      ; check for backspace
0132+  1D7D C6 86 1D      je _gets_backspace
0133+  1D80             
0134+  1D80 1A            mov al, ah
0135+  1D81 3E            mov [d], al
0136+  1D82 79            inc d
0137+  1D83 0A 5E 1D      jmp _gets_loop
0138+  1D86             _gets_backspace:
0139+  1D86 7F            dec d
0140+  1D87 0A 5E 1D      jmp _gets_loop
0141+  1D8A             _gets_ansi_esc:
0142+  1D8A 19 01         mov al, 1
0143+  1D8C 05 03         syscall sys_io        ; receive in AH without echo
0144+  1D8E B9 00         cmp al, 0          ; check error code (AL)
0145+  1D90 C6 8A 1D      je _gets_ansi_esc    ; if no char received, retry
0146+  1D93 76 5B         cmp ah, '['
0147+  1D95 C7 5E 1D      jne _gets_loop
0148+  1D98             _gets_ansi_esc_2:
0149+  1D98 19 01         mov al, 1
0150+  1D9A 05 03         syscall sys_io          ; receive in AH without echo
0151+  1D9C B9 00         cmp al, 0            ; check error code (AL)
0152+  1D9E C6 98 1D      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1DA1 76 44         cmp ah, 'D'
0154+  1DA3 C6 AE 1D      je _gets_left_arrow
0155+  1DA6 76 43         cmp ah, 'C'
0156+  1DA8 C6 B2 1D      je _gets_right_arrow
0157+  1DAB 0A 5E 1D      jmp _gets_loop
0158+  1DAE             _gets_left_arrow:
0159+  1DAE 7F            dec d
0160+  1DAF 0A 5E 1D      jmp _gets_loop
0161+  1DB2             _gets_right_arrow:
0162+  1DB2 79            inc d
0163+  1DB3 0A 5E 1D      jmp _gets_loop
0164+  1DB6             _gets_escape:
0165+  1DB6 19 01         mov al, 1
0166+  1DB8 05 03         syscall sys_io      ; receive in AH
0167+  1DBA B9 00         cmp al, 0        ; check error code (AL)
0168+  1DBC C6 B6 1D      je _gets_escape      ; if no char received, retry
0169+  1DBF 76 6E         cmp ah, 'n'
0170+  1DC1 C6 E0 1D      je _gets_LF
0171+  1DC4 76 72         cmp ah, 'r'
0172+  1DC6 C6 E7 1D      je _gets_CR
0173+  1DC9 76 30         cmp ah, '0'
0174+  1DCB C6 EE 1D      je _gets_NULL
0175+  1DCE 76 5C         cmp ah, $5C  ; '\'
0176+  1DD0 C6 D9 1D      je _gets_slash
0177+  1DD3 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1DD4 3E            mov [d], al
0179+  1DD5 79            inc d
0180+  1DD6 0A 5E 1D      jmp _gets_loop
0181+  1DD9             _gets_slash:
0182+  1DD9 19 5C         mov al, $5C
0183+  1DDB 3E            mov [d], al
0184+  1DDC 79            inc d
0185+  1DDD 0A 5E 1D      jmp _gets_loop
0186+  1DE0             _gets_LF:
0187+  1DE0 19 0A         mov al, $0A
0188+  1DE2 3E            mov [d], al
0189+  1DE3 79            inc d
0190+  1DE4 0A 5E 1D      jmp _gets_loop
0191+  1DE7             _gets_CR:
0192+  1DE7 19 0D         mov al, $0D
0193+  1DE9 3E            mov [d], al
0194+  1DEA 79            inc d
0195+  1DEB 0A 5E 1D      jmp _gets_loop
0196+  1DEE             _gets_NULL:
0197+  1DEE 19 00         mov al, $00
0198+  1DF0 3E            mov [d], al
0199+  1DF1 79            inc d
0200+  1DF2 0A 5E 1D      jmp _gets_loop
0201+  1DF5             _gets_end:
0202+  1DF5 19 00         mov al, 0
0203+  1DF7 3E            mov [d], al        ; terminate string
0204+  1DF8 E7            pop d
0205+  1DF9 E4            pop a
0206+  1DFA 09            ret
0207+  1DFB             
0208+  1DFB             ;-----------------------------------------------------------------------------
0209+  1DFB             ;; INPUT TEXT
0210+  1DFB             ;; terminated with CTRL+D
0211+  1DFB             ;; pointer in D
0212+  1DFB             ;-----------------------------------------------------------------------------
0213+  1DFB             _gettxt:
0214+  1DFB D7            push a
0215+  1DFC DA            push d
0216+  1DFD             _gettxt_loop:
0217+  1DFD 19 01         mov al, 1
0218+  1DFF 05 03         syscall sys_io      ; receive in AH
0219+  1E01 B9 00         cmp al, 0        ; check error code (AL)
0220+  1E03 C6 FD 1D      je _gettxt_loop    ; if no char received, retry
0221+  1E06 76 04         cmp ah, 4      ; EOT
0222+  1E08 C6 46 1E      je _gettxt_end
0223+  1E0B 76 08         cmp ah, $08      ; check for backspace
0224+  1E0D C6 42 1E      je _gettxt_backspace
0225+  1E10 76 5C         cmp ah, $5C        ; '\'
0226+  1E12 C6 1B 1E      je _gettxt_escape
0227+  1E15 1A            mov al, ah
0228+  1E16 3E            mov [d], al
0229+  1E17 79            inc d
0230+  1E18 0A FD 1D      jmp _gettxt_loop
0231+  1E1B             _gettxt_escape:
0232+  1E1B 19 01         mov al, 1
0233+  1E1D 05 03         syscall sys_io      ; receive in AH
0234+  1E1F B9 00         cmp al, 0        ; check error code (AL)
0235+  1E21 C6 1B 1E      je _gettxt_escape    ; if no char received, retry
0236+  1E24 76 6E         cmp ah, 'n'
0237+  1E26 C6 34 1E      je _gettxt_LF
0238+  1E29 76 72         cmp ah, 'r'
0239+  1E2B C6 3B 1E      je _gettxt_CR
0240+  1E2E 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1E2F 3E            mov [d], al
0242+  1E30 79            inc d
0243+  1E31 0A FD 1D      jmp _gettxt_loop
0244+  1E34             _gettxt_LF:
0245+  1E34 19 0A         mov al, $0A
0246+  1E36 3E            mov [d], al
0247+  1E37 79            inc d
0248+  1E38 0A FD 1D      jmp _gettxt_loop
0249+  1E3B             _gettxt_CR:
0250+  1E3B 19 0D         mov al, $0D
0251+  1E3D 3E            mov [d], al
0252+  1E3E 79            inc d
0253+  1E3F 0A FD 1D      jmp _gettxt_loop
0254+  1E42             _gettxt_backspace:
0255+  1E42 7F            dec d
0256+  1E43 0A FD 1D      jmp _gettxt_loop
0257+  1E46             _gettxt_end:
0258+  1E46 19 00         mov al, 0
0259+  1E48 3E            mov [d], al        ; terminate string
0260+  1E49 E7            pop d
0261+  1E4A E4            pop a
0262+  1E4B 09            ret
0263+  1E4C             
0264+  1E4C             ;-----------------------------------------------------------------------------
0265+  1E4C             ; PRINT NEW LINE
0266+  1E4C             ;-----------------------------------------------------------------------------
0267+  1E4C             printnl:
0268+  1E4C D7            push a
0269+  1E4D 10 00 0A      mov a, $0A00
0270+  1E50 05 03         syscall sys_io
0271+  1E52 10 00 0D      mov a, $0D00
0272+  1E55 05 03         syscall sys_io
0273+  1E57 E4            pop a
0274+  1E58 09            ret
0275+  1E59             
0276+  1E59             ;-----------------------------------------------------------------------------
0277+  1E59             ; _strtoint
0278+  1E59             ; 4 digit hex string number in d
0279+  1E59             ; integer returned in A
0280+  1E59             ;-----------------------------------------------------------------------------
0281+  1E59             _strtointx:
0282+  1E59 D8            push b
0283+  1E5A 32            mov bl, [d]
0284+  1E5B 37            mov bh, bl
0285+  1E5C 33 01 00      mov bl, [d + 1]
0286+  1E5F 07 13 1D      call _atoi        ; convert to int in AL
0287+  1E62 23            mov ah, al        ; move to AH
0288+  1E63 33 02 00      mov bl, [d + 2]
0289+  1E66 37            mov bh, bl
0290+  1E67 33 03 00      mov bl, [d + 3]
0291+  1E6A 07 13 1D      call _atoi        ; convert to int in AL
0292+  1E6D E5            pop b
0293+  1E6E 09            ret
0294+  1E6F             
0295+  1E6F             ;-----------------------------------------------------------------------------
0296+  1E6F             ; _strtoint
0297+  1E6F             ; 5 digit base10 string number in d
0298+  1E6F             ; integer returned in A
0299+  1E6F             ;-----------------------------------------------------------------------------
0300+  1E6F             _strtoint:
0301+  1E6F E2            push si
0302+  1E70 D8            push b
0303+  1E71 D9            push c
0304+  1E72 DA            push d
0305+  1E73 07 B5 1C      call _strlen      ; get string length in C
0306+  1E76 7E            dec c
0307+  1E77 FD 4E         mov si, d
0308+  1E79 12            mov a, c
0309+  1E7A FD 99         shl a
0310+  1E7C 3B EB 1F      mov d, table_power
0311+  1E7F 59            add d, a
0312+  1E80 38 00 00      mov c, 0
0313+  1E83             _strtoint_L0:
0314+  1E83 F6            lodsb      ; load ASCII to al
0315+  1E84 B9 00         cmp al, 0
0316+  1E86 C6 99 1E      je _strtoint_end
0317+  1E89 6F 30         sub al, $30    ; make into integer
0318+  1E8B 22 00         mov ah, 0
0319+  1E8D 2A            mov b, [d]
0320+  1E8E AC            mul a, b      ; result in B since it fits in 16bits
0321+  1E8F 11            mov a, b
0322+  1E90 28            mov b, c
0323+  1E91 54            add a, b
0324+  1E92 39            mov c, a
0325+  1E93 63 02 00      sub d, 2
0326+  1E96 0A 83 1E      jmp _strtoint_L0
0327+  1E99             _strtoint_end:
0328+  1E99 12            mov a, c
0329+  1E9A E7            pop d
0330+  1E9B E6            pop c
0331+  1E9C E5            pop b
0332+  1E9D EF            pop si
0333+  1E9E 09            ret
0334+  1E9F             
0335+  1E9F             ;-----------------------------------------------------------------------------
0336+  1E9F             ; PRINT NULL TERMINATED STRING
0337+  1E9F             ; pointer in D
0338+  1E9F             ;-----------------------------------------------------------------------------
0339+  1E9F             _puts:
0340+  1E9F D7            push a
0341+  1EA0 DA            push d
0342+  1EA1             _puts_L1:
0343+  1EA1 1E            mov al, [d]
0344+  1EA2 B9 00         cmp al, 0
0345+  1EA4 C6 B0 1E      jz _puts_END
0346+  1EA7 23            mov ah, al
0347+  1EA8 19 00         mov al, 0
0348+  1EAA 05 03         syscall sys_io
0349+  1EAC 79            inc d
0350+  1EAD 0A A1 1E      jmp _puts_L1
0351+  1EB0             _puts_END:
0352+  1EB0 E7            pop d
0353+  1EB1 E4            pop a
0354+  1EB2 09            ret
0355+  1EB3             
0356+  1EB3             ;-----------------------------------------------------------------------------
0357+  1EB3             ; PRINT N SIZE STRING
0358+  1EB3             ; pointer in D
0359+  1EB3             ; size in C
0360+  1EB3             ;-----------------------------------------------------------------------------
0361+  1EB3             _putsn:
0362+  1EB3 DB            push al
0363+  1EB4 DA            push d
0364+  1EB5 D9            push c
0365+  1EB6             _putsn_L0:
0366+  1EB6 1E            mov al, [d]
0367+  1EB7 23            mov ah, al
0368+  1EB8 19 00         mov al, 0
0369+  1EBA 05 03         syscall sys_io
0370+  1EBC 79            inc d
0371+  1EBD 7E            dec c  
0372+  1EBE C2 00 00      cmp c, 0
0373+  1EC1 C7 B6 1E      jne _putsn_L0
0374+  1EC4             _putsn_end:
0375+  1EC4 E6            pop c
0376+  1EC5 E7            pop d
0377+  1EC6 E8            pop al
0378+  1EC7 09            ret
0379+  1EC8             
0380+  1EC8             ;-----------------------------------------------------------------------------
0381+  1EC8             ; print 16bit decimal number
0382+  1EC8             ; input number in A
0383+  1EC8             ;-----------------------------------------------------------------------------
0384+  1EC8             print_u16d:
0385+  1EC8 D7            push a
0386+  1EC9 D8            push b
0387+  1ECA 26 10 27      mov b, 10000
0388+  1ECD AE            div a, b      ; get 10000's coeff.
0389+  1ECE 07 F0 1E      call print_number
0390+  1ED1 11            mov a, b
0391+  1ED2 26 E8 03      mov b, 1000
0392+  1ED5 AE            div a, b      ; get 1000's coeff.
0393+  1ED6 07 F0 1E      call print_number
0394+  1ED9 11            mov a, b
0395+  1EDA 26 64 00      mov b, 100
0396+  1EDD AE            div a, b
0397+  1EDE 07 F0 1E      call print_number
0398+  1EE1 11            mov a, b
0399+  1EE2 26 0A 00      mov b, 10
0400+  1EE5 AE            div a, b
0401+  1EE6 07 F0 1E      call print_number
0402+  1EE9 1B            mov al, bl      ; 1's coeff in bl
0403+  1EEA 07 F0 1E      call print_number
0404+  1EED E5            pop b
0405+  1EEE E4            pop a
0406+  1EEF 09            ret
0407+  1EF0             
0408+  1EF0             ;-----------------------------------------------------------------------------
0409+  1EF0             ; print AL
0410+  1EF0             ;-----------------------------------------------------------------------------
0411+  1EF0             print_number:
0412+  1EF0 6A 30         add al, $30
0413+  1EF2 23            mov ah, al
0414+  1EF3 07 55 1D      call _putchar
0415+  1EF6 09            ret
0416+  1EF7             
0417+  1EF7             ;-----------------------------------------------------------------------------
0418+  1EF7             ; PRINT 16BIT HEX INTEGER
0419+  1EF7             ; integer value in reg B
0420+  1EF7             ;-----------------------------------------------------------------------------
0421+  1EF7             print_u16x:
0422+  1EF7 D7            push a
0423+  1EF8 D8            push b
0424+  1EF9 DD            push bl
0425+  1EFA 30            mov bl, bh
0426+  1EFB 07 23 1D      call _itoa        ; convert bh to char in A
0427+  1EFE 2F            mov bl, al        ; save al
0428+  1EFF 19 00         mov al, 0
0429+  1F01 05 03         syscall sys_io        ; display AH
0430+  1F03 24            mov ah, bl        ; retrieve al
0431+  1F04 19 00         mov al, 0
0432+  1F06 05 03         syscall sys_io        ; display AL
0433+  1F08             
0434+  1F08 EA            pop bl
0435+  1F09 07 23 1D      call _itoa        ; convert bh to char in A
0436+  1F0C 2F            mov bl, al        ; save al
0437+  1F0D 19 00         mov al, 0
0438+  1F0F 05 03         syscall sys_io        ; display AH
0439+  1F11 24            mov ah, bl        ; retrieve al
0440+  1F12 19 00         mov al, 0
0441+  1F14 05 03         syscall sys_io        ; display AL
0442+  1F16             
0443+  1F16 E5            pop b
0444+  1F17 E4            pop a
0445+  1F18 09            ret
0446+  1F19             
0447+  1F19             ;-----------------------------------------------------------------------------
0448+  1F19             ; INPUT 16BIT HEX INTEGER
0449+  1F19             ; read 16bit integer into A
0450+  1F19             ;-----------------------------------------------------------------------------
0451+  1F19             scan_u16x:
0452+  1F19 F8 10 00      enter 16
0453+  1F1C D8            push b
0454+  1F1D DA            push d
0455+  1F1E             
0456+  1F1E FA F1 FF      lea d, [bp + -15]
0457+  1F21 07 5C 1D      call _gets        ; get number
0458+  1F24             
0459+  1F24 32            mov bl, [d]
0460+  1F25 37            mov bh, bl
0461+  1F26 33 01 00      mov bl, [d + 1]
0462+  1F29 07 13 1D      call _atoi        ; convert to int in AL
0463+  1F2C 23            mov ah, al        ; move to AH
0464+  1F2D             
0465+  1F2D 33 02 00      mov bl, [d + 2]
0466+  1F30 37            mov bh, bl
0467+  1F31 33 03 00      mov bl, [d + 3]
0468+  1F34 07 13 1D      call _atoi        ; convert to int in AL
0469+  1F37             
0470+  1F37 E7            pop d
0471+  1F38 E5            pop b
0472+  1F39 F9            leave
0473+  1F3A 09            ret
0474+  1F3B             
0475+  1F3B             ;-----------------------------------------------------------------------------
0476+  1F3B             ; PRINT 8bit HEX INTEGER
0477+  1F3B             ; integer value in reg bl
0478+  1F3B             ;-----------------------------------------------------------------------------
0479+  1F3B             print_u8x:
0480+  1F3B D7            push a
0481+  1F3C DD            push bl
0482+  1F3D             
0483+  1F3D 07 23 1D      call _itoa        ; convert bl to char in A
0484+  1F40 2F            mov bl, al        ; save al
0485+  1F41 19 00         mov al, 0
0486+  1F43 05 03         syscall sys_io        ; display AH
0487+  1F45 24            mov ah, bl        ; retrieve al
0488+  1F46 19 00         mov al, 0
0489+  1F48 05 03         syscall sys_io        ; display AL
0490+  1F4A             
0491+  1F4A EA            pop bl
0492+  1F4B E4            pop a
0493+  1F4C 09            ret
0494+  1F4D             
0495+  1F4D             ;-----------------------------------------------------------------------------
0496+  1F4D             ; print 8bit decimal unsigned number
0497+  1F4D             ; input number in AL
0498+  1F4D             ;-----------------------------------------------------------------------------
0499+  1F4D             print_u8d:
0500+  1F4D D7            push a
0501+  1F4E D8            push b
0502+  1F4F             
0503+  1F4F 22 00         mov ah, 0
0504+  1F51 26 64 00      mov b, 100
0505+  1F54 AE            div a, b
0506+  1F55 D8            push b      ; save remainder
0507+  1F56 B9 00         cmp al, 0
0508+  1F58 C6 62 1F      je skip100
0509+  1F5B 6A 30         add al, $30
0510+  1F5D 23            mov ah, al
0511+  1F5E 19 00         mov al, 0
0512+  1F60 05 03         syscall sys_io  ; print coeff
0513+  1F62             skip100:
0514+  1F62 E4            pop a
0515+  1F63 22 00         mov ah, 0
0516+  1F65 26 0A 00      mov b, 10
0517+  1F68 AE            div a, b
0518+  1F69 D8            push b      ; save remainder
0519+  1F6A B9 00         cmp al, 0
0520+  1F6C C6 76 1F      je skip10
0521+  1F6F 6A 30         add al, $30
0522+  1F71 23            mov ah, al
0523+  1F72 19 00         mov al, 0
0524+  1F74 05 03         syscall sys_io  ; print coeff
0525+  1F76             skip10:
0526+  1F76 E4            pop a
0527+  1F77 1B            mov al, bl
0528+  1F78 6A 30         add al, $30
0529+  1F7A 23            mov ah, al
0530+  1F7B 19 00         mov al, 0
0531+  1F7D 05 03         syscall sys_io  ; print coeff
0532+  1F7F E5            pop b
0533+  1F80 E4            pop a
0534+  1F81 09            ret
0535+  1F82             
0536+  1F82             ;-----------------------------------------------------------------------------
0537+  1F82             ; INPUT 8BIT HEX INTEGER
0538+  1F82             ; read 8bit integer into AL
0539+  1F82             ;-----------------------------------------------------------------------------
0540+  1F82             scan_u8x:
0541+  1F82 F8 04 00      enter 4
0542+  1F85 D8            push b
0543+  1F86 DA            push d
0544+  1F87             
0545+  1F87 FA FD FF      lea d, [bp + -3]
0546+  1F8A 07 5C 1D      call _gets        ; get number
0547+  1F8D             
0548+  1F8D 32            mov bl, [d]
0549+  1F8E 37            mov bh, bl
0550+  1F8F 33 01 00      mov bl, [d + 1]
0551+  1F92 07 13 1D      call _atoi        ; convert to int in AL
0552+  1F95             
0553+  1F95 E7            pop d
0554+  1F96 E5            pop b
0555+  1F97 F9            leave
0556+  1F98 09            ret
0557+  1F99             
0558+  1F99             ;-----------------------------------------------------------------------------
0559+  1F99             ; input decimal number
0560+  1F99             ; result in A
0561+  1F99             ; 655'\0'
0562+  1F99             ; low--------high
0563+  1F99             ;-----------------------------------------------------------------------------
0564+  1F99             scan_u16d:
0565+  1F99 F8 08 00      enter 8
0566+  1F9C E2            push si
0567+  1F9D D8            push b
0568+  1F9E D9            push c
0569+  1F9F DA            push d
0570+  1FA0 FA F9 FF      lea d, [bp +- 7]
0571+  1FA3 07 5C 1D      call _gets
0572+  1FA6 07 B5 1C      call _strlen      ; get string length in C
0573+  1FA9 7E            dec c
0574+  1FAA FD 4E         mov si, d
0575+  1FAC 12            mov a, c
0576+  1FAD FD 99         shl a
0577+  1FAF 3B EB 1F      mov d, table_power
0578+  1FB2 59            add d, a
0579+  1FB3 38 00 00      mov c, 0
0580+  1FB6             mul_loop:
0581+  1FB6 F6            lodsb      ; load ASCII to al
0582+  1FB7 B9 00         cmp al, 0
0583+  1FB9 C6 CC 1F      je mul_exit
0584+  1FBC 6F 30         sub al, $30    ; make into integer
0585+  1FBE 22 00         mov ah, 0
0586+  1FC0 2A            mov b, [d]
0587+  1FC1 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1FC2 11            mov a, b
0589+  1FC3 28            mov b, c
0590+  1FC4 54            add a, b
0591+  1FC5 39            mov c, a
0592+  1FC6 63 02 00      sub d, 2
0593+  1FC9 0A B6 1F      jmp mul_loop
0594+  1FCC             mul_exit:
0595+  1FCC 12            mov a, c
0596+  1FCD E7            pop d
0597+  1FCE E6            pop c
0598+  1FCF E5            pop b
0599+  1FD0 EF            pop si
0600+  1FD1 F9            leave
0601+  1FD2 09            ret
0602+  1FD3             
0603+  1FD3 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1FD7 34 35 36 37 
0603+  1FDB 38 39 41 42 
0603+  1FDF 43 44 45 46 
0604+  1FE3 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1FE7 1B 5B 48 00 
0605+  1FEB             
0606+  1FEB             table_power:
0607+  1FEB 01 00         .dw 1
0608+  1FED 0A 00         .dw 10
0609+  1FEF 64 00         .dw 100
0610+  1FF1 E8 03         .dw 1000
0611+  1FF3 10 27         .dw 100003919   1FF5             ; --- END INLINE ASM SEGMENT
3920   1FF5             
3921   1FF5 F9            leave
3922   1FF6 09            ret
3923   1FF7             
3924   1FF7             draw_board:
3925   1FF7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3926   1FFA             ; int x, y; 
3927   1FFA 52 02 00      sub sp, 2
3928   1FFD 52 02 00      sub sp, 2
3929   2000             ; int i; 
3930   2000 52 02 00      sub sp, 2
3931   2003             ; char c; 
3932   2003 52 01 00      sub sp, 1
3933   2006             ; print(s); 
3934   2006 3B 4B 24      mov d, _s_data ; $s
3935   2009 2D            mov b, d
3936   200A FD AB         swp b
3937   200C D8            push b
3938   200D 07 A6 1B      call print
3939   2010 51 02 00      add sp, 2
3940   2013             ; printf("%d", rand()); 
3941   2013 07 BB 07      call rand
3942   2016 FD AB         swp b
3943   2018 D8            push b
3944   2019 26 BE 24      mov b, _s3 ; "%d"
3945   201C FD AB         swp b
3946   201E D8            push b
3947   201F 07 96 08      call printf
3948   2022 51 04 00      add sp, 4
3949   2025             ; print("\n"); 
3950   2025 26 C1 24      mov b, _s4 ; "\n"
3951   2028 FD AB         swp b
3952   202A D8            push b
3953   202B 07 A6 1B      call print
3954   202E 51 02 00      add sp, 2
3955   2031             ; for (y = 0; y < 20; y++) { 
3956   2031             _for58_init:
3957   2031 FA FD FF      lea d, [bp + -3] ; $y
3958   2034 DA            push d
3959   2035 26 00 00      mov b, $0
3960   2038 E7            pop d
3961   2039 FD 43         mov [d], b
3962   203B             _for58_cond:
3963   203B FA FD FF      lea d, [bp + -3] ; $y
3964   203E 2A            mov b, [d]
3965   203F             ; --- START RELATIONAL
3966   203F D7            push a
3967   2040 11            mov a, b
3968   2041 26 14 00      mov b, $14
3969   2044 B0            cmp a, b
3970   2045 FD 73         slt ; < (signed)
3971   2047 E4            pop a
3972   2048             ; --- END RELATIONAL
3973   2048 C0 00 00      cmp b, 0
3974   204B C6 7A 21      je _for58_exit
3975   204E             _for58_block:
3976   204E             ; for (x = 0; x < 40; x++) { 
3977   204E             _for59_init:
3978   204E FA FF FF      lea d, [bp + -1] ; $x
3979   2051 DA            push d
3980   2052 26 00 00      mov b, $0
3981   2055 E7            pop d
3982   2056 FD 43         mov [d], b
3983   2058             _for59_cond:
3984   2058 FA FF FF      lea d, [bp + -1] ; $x
3985   205B 2A            mov b, [d]
3986   205C             ; --- START RELATIONAL
3987   205C D7            push a
3988   205D 11            mov a, b
3989   205E 26 28 00      mov b, $28
3990   2061 B0            cmp a, b
3991   2062 FD 73         slt ; < (signed)
3992   2064 E4            pop a
3993   2065             ; --- END RELATIONAL
3994   2065 C0 00 00      cmp b, 0
3995   2068 C6 60 21      je _for59_exit
3996   206B             _for59_block:
3997   206B             ; c = ' '; 
3998   206B FA FA FF      lea d, [bp + -6] ; $c
3999   206E DA            push d
4000   206F 26 20 00      mov b, $20
4001   2072 E7            pop d
4002   2073 FD 3E         mov [d], bl
4003   2075             ; if (x == 0 || x == 39 || y == 0 || y == 19) { 
4004   2075             _if60_cond:
4005   2075 FA FF FF      lea d, [bp + -1] ; $x
4006   2078 2A            mov b, [d]
4007   2079             ; --- START RELATIONAL
4008   2079 D7            push a
4009   207A 11            mov a, b
4010   207B 26 00 00      mov b, $0
4011   207E B0            cmp a, b
4012   207F FD 71         seq ; ==
4013   2081 E4            pop a
4014   2082             ; --- END RELATIONAL
4015   2082             ; --- START LOGICAL OR
4016   2082 D7            push a
4017   2083 11            mov a, b
4018   2084 FA FF FF      lea d, [bp + -1] ; $x
4019   2087 2A            mov b, [d]
4020   2088             ; --- START RELATIONAL
4021   2088 D7            push a
4022   2089 11            mov a, b
4023   208A 26 27 00      mov b, $27
4024   208D B0            cmp a, b
4025   208E FD 71         seq ; ==
4026   2090 E4            pop a
4027   2091             ; --- END RELATIONAL
4028   2091 FD A8         sor a, b ; ||
4029   2093 11            mov a, b
4030   2094 FA FD FF      lea d, [bp + -3] ; $y
4031   2097 2A            mov b, [d]
4032   2098             ; --- START RELATIONAL
4033   2098 D7            push a
4034   2099 11            mov a, b
4035   209A 26 00 00      mov b, $0
4036   209D B0            cmp a, b
4037   209E FD 71         seq ; ==
4038   20A0 E4            pop a
4039   20A1             ; --- END RELATIONAL
4040   20A1 FD A8         sor a, b ; ||
4041   20A3 11            mov a, b
4042   20A4 FA FD FF      lea d, [bp + -3] ; $y
4043   20A7 2A            mov b, [d]
4044   20A8             ; --- START RELATIONAL
4045   20A8 D7            push a
4046   20A9 11            mov a, b
4047   20AA 26 13 00      mov b, $13
4048   20AD B0            cmp a, b
4049   20AE FD 71         seq ; ==
4050   20B0 E4            pop a
4051   20B1             ; --- END RELATIONAL
4052   20B1 FD A8         sor a, b ; ||
4053   20B3 E4            pop a
4054   20B4             ; --- END LOGICAL OR
4055   20B4 C0 00 00      cmp b, 0
4056   20B7 C6 C7 20      je _if60_else
4057   20BA             _if60_true:
4058   20BA             ; c = '#'; 
4059   20BA FA FA FF      lea d, [bp + -6] ; $c
4060   20BD DA            push d
4061   20BE 26 23 00      mov b, $23
4062   20C1 E7            pop d
4063   20C2 FD 3E         mov [d], bl
4064   20C4 0A 43 21      jmp _if60_exit
4065   20C7             _if60_else:
4066   20C7             ; for (i = 0; i < 8; i++) { 
4067   20C7             _for61_init:
4068   20C7 FA FB FF      lea d, [bp + -5] ; $i
4069   20CA DA            push d
4070   20CB 26 00 00      mov b, $0
4071   20CE E7            pop d
4072   20CF FD 43         mov [d], b
4073   20D1             _for61_cond:
4074   20D1 FA FB FF      lea d, [bp + -5] ; $i
4075   20D4 2A            mov b, [d]
4076   20D5             ; --- START RELATIONAL
4077   20D5 D7            push a
4078   20D6 11            mov a, b
4079   20D7 26 08 00      mov b, $8
4080   20DA B0            cmp a, b
4081   20DB FD 73         slt ; < (signed)
4082   20DD E4            pop a
4083   20DE             ; --- END RELATIONAL
4084   20DE C0 00 00      cmp b, 0
4085   20E1 C6 43 21      je _for61_exit
4086   20E4             _for61_block:
4087   20E4             ; if (x == snake_x[i] && y == snake_y[i]) { 
4088   20E4             _if62_cond:
4089   20E4 FA FF FF      lea d, [bp + -1] ; $x
4090   20E7 2A            mov b, [d]
4091   20E8             ; --- START RELATIONAL
4092   20E8 D7            push a
4093   20E9 11            mov a, b
4094   20EA 3B 54 24      mov d, _snake_x_data ; $snake_x
4095   20ED D7            push a
4096   20EE DA            push d
4097   20EF FA FB FF      lea d, [bp + -5] ; $i
4098   20F2 2A            mov b, [d]
4099   20F3 E7            pop d
4100   20F4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4101   20F8 E4            pop a
4102   20F9 2A            mov b, [d]
4103   20FA B0            cmp a, b
4104   20FB FD 71         seq ; ==
4105   20FD E4            pop a
4106   20FE             ; --- END RELATIONAL
4107   20FE             ; --- START LOGICAL AND
4108   20FE D7            push a
4109   20FF 11            mov a, b
4110   2100 FA FD FF      lea d, [bp + -3] ; $y
4111   2103 2A            mov b, [d]
4112   2104             ; --- START RELATIONAL
4113   2104 D7            push a
4114   2105 11            mov a, b
4115   2106 3B 64 24      mov d, _snake_y_data ; $snake_y
4116   2109 D7            push a
4117   210A DA            push d
4118   210B FA FB FF      lea d, [bp + -5] ; $i
4119   210E 2A            mov b, [d]
4120   210F E7            pop d
4121   2110 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4122   2114 E4            pop a
4123   2115 2A            mov b, [d]
4124   2116 B0            cmp a, b
4125   2117 FD 71         seq ; ==
4126   2119 E4            pop a
4127   211A             ; --- END RELATIONAL
4128   211A FD A7         sand a, b
4129   211C E4            pop a
4130   211D             ; --- END LOGICAL AND
4131   211D C0 00 00      cmp b, 0
4132   2120 C6 33 21      je _if62_exit
4133   2123             _if62_true:
4134   2123             ; c = 'o'; 
4135   2123 FA FA FF      lea d, [bp + -6] ; $c
4136   2126 DA            push d
4137   2127 26 6F 00      mov b, $6f
4138   212A E7            pop d
4139   212B FD 3E         mov [d], bl
4140   212D             ; break; 
4141   212D 0A 43 21      jmp _for61_exit ; for break
4142   2130 0A 33 21      jmp _if62_exit
4143   2133             _if62_exit:
4144   2133             _for61_update:
4145   2133 FA FB FF      lea d, [bp + -5] ; $i
4146   2136 2A            mov b, [d]
4147   2137 FD 77         inc b
4148   2139 FA FB FF      lea d, [bp + -5] ; $i
4149   213C FD 43         mov [d], b
4150   213E FD 7D         dec b
4151   2140 0A D1 20      jmp _for61_cond
4152   2143             _for61_exit:
4153   2143             _if60_exit:
4154   2143             ; putchar(c); 
4155   2143 FA FA FF      lea d, [bp + -6] ; $c
4156   2146 32            mov bl, [d]
4157   2147 A7 00         mov bh, 0
4158   2149 DD            push bl
4159   214A 07 5E 1B      call putchar
4160   214D 51 01 00      add sp, 1
4161   2150             _for59_update:
4162   2150 FA FF FF      lea d, [bp + -1] ; $x
4163   2153 2A            mov b, [d]
4164   2154 FD 77         inc b
4165   2156 FA FF FF      lea d, [bp + -1] ; $x
4166   2159 FD 43         mov [d], b
4167   215B FD 7D         dec b
4168   215D 0A 58 20      jmp _for59_cond
4169   2160             _for59_exit:
4170   2160             ; putchar('\n'); 
4171   2160 26 0A 00      mov b, $a
4172   2163 DD            push bl
4173   2164 07 5E 1B      call putchar
4174   2167 51 01 00      add sp, 1
4175   216A             _for58_update:
4176   216A FA FD FF      lea d, [bp + -3] ; $y
4177   216D 2A            mov b, [d]
4178   216E FD 77         inc b
4179   2170 FA FD FF      lea d, [bp + -3] ; $y
4180   2173 FD 43         mov [d], b
4181   2175 FD 7D         dec b
4182   2177 0A 3B 20      jmp _for58_cond
4183   217A             _for58_exit:
4184   217A             ; return; 
4185   217A F9            leave
4186   217B 09            ret
4187   217C             
4188   217C             update_snake:
4189   217C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4190   217F             ; int i; 
4191   217F 52 02 00      sub sp, 2
4192   2182             ; int snkx, snky; 
4193   2182 52 02 00      sub sp, 2
4194   2185 52 02 00      sub sp, 2
4195   2188             ; for (i = 8 - 1; i > 0; i--) { 
4196   2188             _for63_init:
4197   2188 FA FF FF      lea d, [bp + -1] ; $i
4198   218B DA            push d
4199   218C 26 08 00      mov b, $8
4200   218F             ; --- START TERMS
4201   218F D7            push a
4202   2190 11            mov a, b
4203   2191 26 01 00      mov b, $1
4204   2194 60            sub a, b
4205   2195 27            mov b, a
4206   2196 E4            pop a
4207   2197             ; --- END TERMS
4208   2197 E7            pop d
4209   2198 FD 43         mov [d], b
4210   219A             _for63_cond:
4211   219A FA FF FF      lea d, [bp + -1] ; $i
4212   219D 2A            mov b, [d]
4213   219E             ; --- START RELATIONAL
4214   219E D7            push a
4215   219F 11            mov a, b
4216   21A0 26 00 00      mov b, $0
4217   21A3 B0            cmp a, b
4218   21A4 FD 7F         sgt ; >
4219   21A6 E4            pop a
4220   21A7             ; --- END RELATIONAL
4221   21A7 C0 00 00      cmp b, 0
4222   21AA C6 13 22      je _for63_exit
4223   21AD             _for63_block:
4224   21AD             ; snake_x[i] = snake_x[i - 1]; 
4225   21AD 3B 54 24      mov d, _snake_x_data ; $snake_x
4226   21B0 D7            push a
4227   21B1 DA            push d
4228   21B2 FA FF FF      lea d, [bp + -1] ; $i
4229   21B5 2A            mov b, [d]
4230   21B6 E7            pop d
4231   21B7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4232   21BB E4            pop a
4233   21BC DA            push d
4234   21BD 3B 54 24      mov d, _snake_x_data ; $snake_x
4235   21C0 D7            push a
4236   21C1 DA            push d
4237   21C2 FA FF FF      lea d, [bp + -1] ; $i
4238   21C5 2A            mov b, [d]
4239   21C6             ; --- START TERMS
4240   21C6 D7            push a
4241   21C7 11            mov a, b
4242   21C8 26 01 00      mov b, $1
4243   21CB 60            sub a, b
4244   21CC 27            mov b, a
4245   21CD E4            pop a
4246   21CE             ; --- END TERMS
4247   21CE E7            pop d
4248   21CF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4249   21D3 E4            pop a
4250   21D4 2A            mov b, [d]
4251   21D5 E7            pop d
4252   21D6 FD 43         mov [d], b
4253   21D8             ; snake_y[i] = snake_y[i - 1]; 
4254   21D8 3B 64 24      mov d, _snake_y_data ; $snake_y
4255   21DB D7            push a
4256   21DC DA            push d
4257   21DD FA FF FF      lea d, [bp + -1] ; $i
4258   21E0 2A            mov b, [d]
4259   21E1 E7            pop d
4260   21E2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4261   21E6 E4            pop a
4262   21E7 DA            push d
4263   21E8 3B 64 24      mov d, _snake_y_data ; $snake_y
4264   21EB D7            push a
4265   21EC DA            push d
4266   21ED FA FF FF      lea d, [bp + -1] ; $i
4267   21F0 2A            mov b, [d]
4268   21F1             ; --- START TERMS
4269   21F1 D7            push a
4270   21F2 11            mov a, b
4271   21F3 26 01 00      mov b, $1
4272   21F6 60            sub a, b
4273   21F7 27            mov b, a
4274   21F8 E4            pop a
4275   21F9             ; --- END TERMS
4276   21F9 E7            pop d
4277   21FA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4278   21FE E4            pop a
4279   21FF 2A            mov b, [d]
4280   2200 E7            pop d
4281   2201 FD 43         mov [d], b
4282   2203             _for63_update:
4283   2203 FA FF FF      lea d, [bp + -1] ; $i
4284   2206 2A            mov b, [d]
4285   2207 FD 7D         dec b
4286   2209 FA FF FF      lea d, [bp + -1] ; $i
4287   220C FD 43         mov [d], b
4288   220E FD 77         inc b
4289   2210 0A 9A 21      jmp _for63_cond
4290   2213             _for63_exit:
4291   2213             ; snake_x[0] = snake_x[0] + dx; 
4292   2213 3B 54 24      mov d, _snake_x_data ; $snake_x
4293   2216 D7            push a
4294   2217 DA            push d
4295   2218 26 00 00      mov b, $0
4296   221B E7            pop d
4297   221C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4298   2220 E4            pop a
4299   2221 DA            push d
4300   2222 3B 54 24      mov d, _snake_x_data ; $snake_x
4301   2225 D7            push a
4302   2226 DA            push d
4303   2227 26 00 00      mov b, $0
4304   222A E7            pop d
4305   222B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4306   222F E4            pop a
4307   2230 2A            mov b, [d]
4308   2231             ; --- START TERMS
4309   2231 D7            push a
4310   2232 11            mov a, b
4311   2233 3B 74 24      mov d, _dx ; $dx
4312   2236 2A            mov b, [d]
4313   2237 56            add b, a
4314   2238 E4            pop a
4315   2239             ; --- END TERMS
4316   2239 E7            pop d
4317   223A FD 43         mov [d], b
4318   223C             ; snake_y[0] = snake_y[0] + dy; 
4319   223C 3B 64 24      mov d, _snake_y_data ; $snake_y
4320   223F D7            push a
4321   2240 DA            push d
4322   2241 26 00 00      mov b, $0
4323   2244 E7            pop d
4324   2245 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4325   2249 E4            pop a
4326   224A DA            push d
4327   224B 3B 64 24      mov d, _snake_y_data ; $snake_y
4328   224E D7            push a
4329   224F DA            push d
4330   2250 26 00 00      mov b, $0
4331   2253 E7            pop d
4332   2254 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4333   2258 E4            pop a
4334   2259 2A            mov b, [d]
4335   225A             ; --- START TERMS
4336   225A D7            push a
4337   225B 11            mov a, b
4338   225C 3B 76 24      mov d, _dy ; $dy
4339   225F 2A            mov b, [d]
4340   2260 56            add b, a
4341   2261 E4            pop a
4342   2262             ; --- END TERMS
4343   2262 E7            pop d
4344   2263 FD 43         mov [d], b
4345   2265             ; if (rand() % 10 < 2) { // Randomly change direction 
4346   2265             _if64_cond:
4347   2265 07 BB 07      call rand
4348   2268             ; --- START FACTORS
4349   2268 D7            push a
4350   2269 11            mov a, b
4351   226A 26 0A 00      mov b, $a
4352   226D AE            div a, b ; 
4353   226E 11            mov a, b
4354   226F 27            mov b, a
4355   2270 E4            pop a
4356   2271             ; --- END FACTORS
4357   2271             ; --- START RELATIONAL
4358   2271 D7            push a
4359   2272 11            mov a, b
4360   2273 26 02 00      mov b, $2
4361   2276 B0            cmp a, b
4362   2277 FD 73         slt ; < (signed)
4363   2279 E4            pop a
4364   227A             ; --- END RELATIONAL
4365   227A C0 00 00      cmp b, 0
4366   227D C6 1D 23      je _if64_exit
4367   2280             _if64_true:
4368   2280             ; if (dx != 0) { 
4369   2280             _if65_cond:
4370   2280 3B 74 24      mov d, _dx ; $dx
4371   2283 2A            mov b, [d]
4372   2284             ; --- START RELATIONAL
4373   2284 D7            push a
4374   2285 11            mov a, b
4375   2286 26 00 00      mov b, $0
4376   2289 B0            cmp a, b
4377   228A FD 72         sneq ; !=
4378   228C E4            pop a
4379   228D             ; --- END RELATIONAL
4380   228D C0 00 00      cmp b, 0
4381   2290 C6 CD 22      je _if65_else
4382   2293             _if65_true:
4383   2293             ; dy = rand() % 2 == 0 ? 1 : -1; 
4384   2293 3B 76 24      mov d, _dy ; $dy
4385   2296 DA            push d
4386   2297             _ternary66_cond:
4387   2297 07 BB 07      call rand
4388   229A             ; --- START FACTORS
4389   229A D7            push a
4390   229B 11            mov a, b
4391   229C 26 02 00      mov b, $2
4392   229F AE            div a, b ; 
4393   22A0 11            mov a, b
4394   22A1 27            mov b, a
4395   22A2 E4            pop a
4396   22A3             ; --- END FACTORS
4397   22A3             ; --- START RELATIONAL
4398   22A3 D7            push a
4399   22A4 11            mov a, b
4400   22A5 26 00 00      mov b, $0
4401   22A8 B0            cmp a, b
4402   22A9 FD 71         seq ; ==
4403   22AB E4            pop a
4404   22AC             ; --- END RELATIONAL
4405   22AC C0 00 00      cmp b, 0
4406   22AF C6 B8 22      je _ternary66_false
4407   22B2             _ternary66_true:
4408   22B2 26 01 00      mov b, $1
4409   22B5 0A BD 22      jmp _ternary66_exit
4410   22B8             _ternary66_false:
4411   22B8 26 01 00      mov b, $1
4412   22BB FD 97         neg b
4413   22BD             _ternary66_exit:
4414   22BD E7            pop d
4415   22BE FD 43         mov [d], b
4416   22C0             ; dx = 0; 
4417   22C0 3B 74 24      mov d, _dx ; $dx
4418   22C3 DA            push d
4419   22C4 26 00 00      mov b, $0
4420   22C7 E7            pop d
4421   22C8 FD 43         mov [d], b
4422   22CA 0A 1A 23      jmp _if65_exit
4423   22CD             _if65_else:
4424   22CD             ; if (dy != 0) { 
4425   22CD             _if67_cond:
4426   22CD 3B 76 24      mov d, _dy ; $dy
4427   22D0 2A            mov b, [d]
4428   22D1             ; --- START RELATIONAL
4429   22D1 D7            push a
4430   22D2 11            mov a, b
4431   22D3 26 00 00      mov b, $0
4432   22D6 B0            cmp a, b
4433   22D7 FD 72         sneq ; !=
4434   22D9 E4            pop a
4435   22DA             ; --- END RELATIONAL
4436   22DA C0 00 00      cmp b, 0
4437   22DD C6 1A 23      je _if67_exit
4438   22E0             _if67_true:
4439   22E0             ; dx = rand() % 2 == 0 ? 1 : -1; 
4440   22E0 3B 74 24      mov d, _dx ; $dx
4441   22E3 DA            push d
4442   22E4             _ternary68_cond:
4443   22E4 07 BB 07      call rand
4444   22E7             ; --- START FACTORS
4445   22E7 D7            push a
4446   22E8 11            mov a, b
4447   22E9 26 02 00      mov b, $2
4448   22EC AE            div a, b ; 
4449   22ED 11            mov a, b
4450   22EE 27            mov b, a
4451   22EF E4            pop a
4452   22F0             ; --- END FACTORS
4453   22F0             ; --- START RELATIONAL
4454   22F0 D7            push a
4455   22F1 11            mov a, b
4456   22F2 26 00 00      mov b, $0
4457   22F5 B0            cmp a, b
4458   22F6 FD 71         seq ; ==
4459   22F8 E4            pop a
4460   22F9             ; --- END RELATIONAL
4461   22F9 C0 00 00      cmp b, 0
4462   22FC C6 05 23      je _ternary68_false
4463   22FF             _ternary68_true:
4464   22FF 26 01 00      mov b, $1
4465   2302 0A 0A 23      jmp _ternary68_exit
4466   2305             _ternary68_false:
4467   2305 26 01 00      mov b, $1
4468   2308 FD 97         neg b
4469   230A             _ternary68_exit:
4470   230A E7            pop d
4471   230B FD 43         mov [d], b
4472   230D             ; dy = 0; 
4473   230D 3B 76 24      mov d, _dy ; $dy
4474   2310 DA            push d
4475   2311 26 00 00      mov b, $0
4476   2314 E7            pop d
4477   2315 FD 43         mov [d], b
4478   2317 0A 1A 23      jmp _if67_exit
4479   231A             _if67_exit:
4480   231A             _if65_exit:
4481   231A 0A 1D 23      jmp _if64_exit
4482   231D             _if64_exit:
4483   231D             ; snkx = snake_x[0]; 
4484   231D FA FD FF      lea d, [bp + -3] ; $snkx
4485   2320 DA            push d
4486   2321 3B 54 24      mov d, _snake_x_data ; $snake_x
4487   2324 D7            push a
4488   2325 DA            push d
4489   2326 26 00 00      mov b, $0
4490   2329 E7            pop d
4491   232A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4492   232E E4            pop a
4493   232F 2A            mov b, [d]
4494   2330 E7            pop d
4495   2331 FD 43         mov [d], b
4496   2333             ; snky = snake_y[0]; 
4497   2333 FA FB FF      lea d, [bp + -5] ; $snky
4498   2336 DA            push d
4499   2337 3B 64 24      mov d, _snake_y_data ; $snake_y
4500   233A D7            push a
4501   233B DA            push d
4502   233C 26 00 00      mov b, $0
4503   233F E7            pop d
4504   2340 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4505   2344 E4            pop a
4506   2345 2A            mov b, [d]
4507   2346 E7            pop d
4508   2347 FD 43         mov [d], b
4509   2349             ; if (snkx <= 0) { 
4510   2349             _if69_cond:
4511   2349 FA FD FF      lea d, [bp + -3] ; $snkx
4512   234C 2A            mov b, [d]
4513   234D             ; --- START RELATIONAL
4514   234D D7            push a
4515   234E 11            mov a, b
4516   234F 26 00 00      mov b, $0
4517   2352 B0            cmp a, b
4518   2353 FD 74         sle ; <= (signed)
4519   2355 E4            pop a
4520   2356             ; --- END RELATIONAL
4521   2356 C0 00 00      cmp b, 0
4522   2359 C6 88 23      je _if69_else
4523   235C             _if69_true:
4524   235C             ; snake_x[0] = 1; 
4525   235C 3B 54 24      mov d, _snake_x_data ; $snake_x
4526   235F D7            push a
4527   2360 DA            push d
4528   2361 26 00 00      mov b, $0
4529   2364 E7            pop d
4530   2365 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4531   2369 E4            pop a
4532   236A DA            push d
4533   236B 26 01 00      mov b, $1
4534   236E E7            pop d
4535   236F FD 43         mov [d], b
4536   2371             ; dx = 1; 
4537   2371 3B 74 24      mov d, _dx ; $dx
4538   2374 DA            push d
4539   2375 26 01 00      mov b, $1
4540   2378 E7            pop d
4541   2379 FD 43         mov [d], b
4542   237B             ; dy = 0; 
4543   237B 3B 76 24      mov d, _dy ; $dy
4544   237E DA            push d
4545   237F 26 00 00      mov b, $0
4546   2382 E7            pop d
4547   2383 FD 43         mov [d], b
4548   2385 0A 49 24      jmp _if69_exit
4549   2388             _if69_else:
4550   2388             ; if (snkx >= 39) { 
4551   2388             _if70_cond:
4552   2388 FA FD FF      lea d, [bp + -3] ; $snkx
4553   238B 2A            mov b, [d]
4554   238C             ; --- START RELATIONAL
4555   238C D7            push a
4556   238D 11            mov a, b
4557   238E 26 27 00      mov b, $27
4558   2391 B0            cmp a, b
4559   2392 FD 80         sge ; >=
4560   2394 E4            pop a
4561   2395             ; --- END RELATIONAL
4562   2395 C0 00 00      cmp b, 0
4563   2398 C6 C9 23      je _if70_else
4564   239B             _if70_true:
4565   239B             ; snake_x[0] = 38; 
4566   239B 3B 54 24      mov d, _snake_x_data ; $snake_x
4567   239E D7            push a
4568   239F DA            push d
4569   23A0 26 00 00      mov b, $0
4570   23A3 E7            pop d
4571   23A4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4572   23A8 E4            pop a
4573   23A9 DA            push d
4574   23AA 26 26 00      mov b, $26
4575   23AD E7            pop d
4576   23AE FD 43         mov [d], b
4577   23B0             ; dx = -1; 
4578   23B0 3B 74 24      mov d, _dx ; $dx
4579   23B3 DA            push d
4580   23B4 26 01 00      mov b, $1
4581   23B7 FD 97         neg b
4582   23B9 E7            pop d
4583   23BA FD 43         mov [d], b
4584   23BC             ; dy = 0; 
4585   23BC 3B 76 24      mov d, _dy ; $dy
4586   23BF DA            push d
4587   23C0 26 00 00      mov b, $0
4588   23C3 E7            pop d
4589   23C4 FD 43         mov [d], b
4590   23C6 0A 49 24      jmp _if70_exit
4591   23C9             _if70_else:
4592   23C9             ; if (snky <= 0) { 
4593   23C9             _if71_cond:
4594   23C9 FA FB FF      lea d, [bp + -5] ; $snky
4595   23CC 2A            mov b, [d]
4596   23CD             ; --- START RELATIONAL
4597   23CD D7            push a
4598   23CE 11            mov a, b
4599   23CF 26 00 00      mov b, $0
4600   23D2 B0            cmp a, b
4601   23D3 FD 74         sle ; <= (signed)
4602   23D5 E4            pop a
4603   23D6             ; --- END RELATIONAL
4604   23D6 C0 00 00      cmp b, 0
4605   23D9 C6 08 24      je _if71_else
4606   23DC             _if71_true:
4607   23DC             ; snake_y[0] = 1; 
4608   23DC 3B 64 24      mov d, _snake_y_data ; $snake_y
4609   23DF D7            push a
4610   23E0 DA            push d
4611   23E1 26 00 00      mov b, $0
4612   23E4 E7            pop d
4613   23E5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4614   23E9 E4            pop a
4615   23EA DA            push d
4616   23EB 26 01 00      mov b, $1
4617   23EE E7            pop d
4618   23EF FD 43         mov [d], b
4619   23F1             ; dy = 1; 
4620   23F1 3B 76 24      mov d, _dy ; $dy
4621   23F4 DA            push d
4622   23F5 26 01 00      mov b, $1
4623   23F8 E7            pop d
4624   23F9 FD 43         mov [d], b
4625   23FB             ; dx = 0; 
4626   23FB 3B 74 24      mov d, _dx ; $dx
4627   23FE DA            push d
4628   23FF 26 00 00      mov b, $0
4629   2402 E7            pop d
4630   2403 FD 43         mov [d], b
4631   2405 0A 49 24      jmp _if71_exit
4632   2408             _if71_else:
4633   2408             ; if (snky >= 19) { 
4634   2408             _if72_cond:
4635   2408 FA FB FF      lea d, [bp + -5] ; $snky
4636   240B 2A            mov b, [d]
4637   240C             ; --- START RELATIONAL
4638   240C D7            push a
4639   240D 11            mov a, b
4640   240E 26 13 00      mov b, $13
4641   2411 B0            cmp a, b
4642   2412 FD 80         sge ; >=
4643   2414 E4            pop a
4644   2415             ; --- END RELATIONAL
4645   2415 C0 00 00      cmp b, 0
4646   2418 C6 49 24      je _if72_exit
4647   241B             _if72_true:
4648   241B             ; snake_y[0] = 18; 
4649   241B 3B 64 24      mov d, _snake_y_data ; $snake_y
4650   241E D7            push a
4651   241F DA            push d
4652   2420 26 00 00      mov b, $0
4653   2423 E7            pop d
4654   2424 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4655   2428 E4            pop a
4656   2429 DA            push d
4657   242A 26 12 00      mov b, $12
4658   242D E7            pop d
4659   242E FD 43         mov [d], b
4660   2430             ; dy = -1; 
4661   2430 3B 76 24      mov d, _dy ; $dy
4662   2433 DA            push d
4663   2434 26 01 00      mov b, $1
4664   2437 FD 97         neg b
4665   2439 E7            pop d
4666   243A FD 43         mov [d], b
4667   243C             ; dx = 0; 
4668   243C 3B 74 24      mov d, _dx ; $dx
4669   243F DA            push d
4670   2440 26 00 00      mov b, $0
4671   2443 E7            pop d
4672   2444 FD 43         mov [d], b
4673   2446 0A 49 24      jmp _if72_exit
4674   2449             _if72_exit:
4675   2449             _if71_exit:
4676   2449             _if70_exit:
4677   2449             _if69_exit:
4678   2449             ; return; 
4679   2449 F9            leave
4680   244A 09            ret
4681   244B             ; --- END TEXT SEGMENT
4682   244B             
4683   244B             ; --- BEGIN DATA SEGMENT
4684   244B             _s_data: 
4685   244B 00          .db 
4686   244C 1B 5B 32 4A .db $1b,$5b,$32,$4a,$1b,$5b,$48,$0,
4686   2450 1B 5B 48 00 
4687   2454 00 00 00 00 _snake_x_data: .fill 16, 0
4687   2458 00 00 00 00 
4687   245C 00 00 00 00 
4687   2460 00 00 00 00 
4688   2464 00 00 00 00 _snake_y_data: .fill 16, 0
4688   2468 00 00 00 00 
4688   246C 00 00 00 00 
4688   2470 00 00 00 00 
4689   2474 01 00       _dx: .dw 1
4690   2476 00 00       _dy: .dw 0
4691   2478 00 00       st_fopen_max_handle: .dw 0
4692   247A 55 6E 65 78 _s0: .db "Unexpected format in printf.", 0
4692   247E 70 65 63 74 
4692   2482 65 64 20 66 
4692   2486 6F 72 6D 61 
4692   248A 74 20 69 6E 
4692   248E 20 70 72 69 
4692   2492 6E 74 66 2E 
4692   2496 00 
4693   2497 45 72 72 6F _s1: .db "Error: Unknown argument type.\n", 0
4693   249B 72 3A 20 55 
4693   249F 6E 6B 6E 6F 
4693   24A3 77 6E 20 61 
4693   24A7 72 67 75 6D 
4693   24AB 65 6E 74 20 
4693   24AF 74 79 70 65 
4693   24B3 2E 0A 00 
4694   24B6 1B 5B 32 4A _s2: .db "\033[2J\033[H", 0
4694   24BA 1B 5B 48 00 
4695   24BE 25 64 00    _s3: .db "%d", 0
4696   24C1 0A 00       _s4: .db "\n", 0
4697   24C3             
4698   24C3 C5 24       _heap_top: .dw _heap
4699   24C5 00          _heap: .db 0
4700   24C6             ; --- END DATA SEGMENT
4701   24C6             
4702   24C6             .end
tasm: Number of errors = 0
