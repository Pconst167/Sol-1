	ORG $1900       JMP PRGM  ;COMMENTS: ;  TFTP;;  BOTH ZIP AND GAME;  ARE PHYSICALLY WRITTEN BY;  SECTORS THEN THE DIRECTORY IS SET;  TO FOOL SYSTEM TO SEE ZIP (!BOOT);  AS A FILE SO IT WILL AUTO BOOT;;  THE GAME IS WRITTEN USING ONLY;  8 SECTORS PER TRACK TO MAKE IT;  EASIER ON THE INT. MATH.  TO MAKE;  THE AUTO BOOT WORK !BOOT (ZIP) ;  WAS MADE A FULL 10 SECTORS PER;  TRACK SO IT WOULD BE LIKE A FILECMDCHR EQU  $7ECMDDAT EQU    0CMDACK EQU    2CMDNAK EQU    5CMDEOF EQU    4 BLKHDR: DFB	1,0,$0FE,$0FF  BKHDSZ	 EQU	*-BLKHDR;ALL FILE INFO FOR !BOOT;LOAD,LOAD,EXEC,EXEC;LENGTH,LENGTH (FILLED BY PRGM);HIGH BITS, START SECTOR;(I'M NOT SURE WHY BUT HIGH BITS;NEED TO BE CC)FILELN: DFB    00,$11,00,$11ZPSIZE: DFB    00,00,$CC,02FLNSZ   EQU    *-FILELNSECBLK EQU   0      ;BLK FOR SEC R/WDRIVE  EQU  SECBLKMEMADD EQU  SECBLK+1PARAMS EQU  SECBLK+5COMMD  EQU  SECBLK+6TRACK  EQU  SECBLK+7SECTOR EQU  SECBLK+8SECLNG EQU  SECBLK+9RESULT EQU  SECBLK+10 ;RET HERE   CHKSMH EQU  RESULT+1  ;CHECK SUMCHKSML EQU  RESULT+2MHOLDH EQU  RESULT+3  ;MSG TO PRINTMHOLDL EQU  RESULT+4MLENG  EQU  RESULT+5  ;MSG LENGTHTRYHLD EQU  RESULT+6  ;HOLD LOOP CNTWCHFIL EQU  RESULT+7                      ;AS 1 SCT = 256 BYTESSPERT  EQU  RESULT+9  ;SECTORS PER TRACK (DIFFERS);*****MESSAGES*******MRATE  ASC  "BAUD RATE = 4800"       DFB  $0D,$0AMRATEL EQU  *-MRATEMDRV   ASC  "PLACE GAME DISK IN DRIVE 1"       DFB  $0D,$0A       ASC  "HIT ANY KEY TO CONTINUE"MDRVL  EQU  *-MDRV MGO    ASC  "    OK, STARTED"       DFB  $0D,$0AMGOL   EQU  *-MGOMFILE  ASC  "TRANSFER (Z)IP / (G)AME"       DFB  $0D,$0AMFILEL EQU  *-MFILE MBADWR ASC  "BAD WRITE"       DFB  $0D,$0AMBADWL EQU  *-MBADWRMOK    ASC  "DONE"       DFB  $0D,$0AMOKL   EQU  *-MOK           F     ASC  ":1.ZORK"      DFB  &0D;***********BUFFR EQU $0C00;***********READ   EQU  $53   ;SECTOR READWRITE  EQU  $4B   ;SECTOR WRITEBOOT   EQU    6   ;6TH BYTE IN.FLSIZE EQU  $0D   ;MIDDLE SIZE BYTE                  ;SIZE IN BYTES;*****SET UP FEATURES*****RATE   EQU  6     ;BAUD RATE 4800;*****SYSTEM EQUATES*****OSFIND EQU $FFCEOSRDCH EQU $FFE0OSWRCH EQU $FFEEOSWORD EQU $FFF1OSBYTE EQU $FFF4;***********************************PRGM        LDA #229        ;ESCAPE KEY        LDX #1          ;TO GIVE              JSR OSBYTE      ;ASCII CODE        ;SET BAUD RATE        ;FIRST TELL USER                   ;INCIDENTALLY, A RANGE OF RATES IS POSSIBLE I CHOSE         ;THE MOST APPROPRIATE I BELIEVE        ;(USING DEFAULT DATA FORMAT 8 BITS, 2 STOP, NO PARITY)ASKBD   LDY #<MRATE     ;MSG        LDX #>MRATE        LDA #MRATEL     ;LENGTH        JSR TPE         LDX #RATE       ;BAUD RATE = 4800        LDY #0        LDA #7          ;SET RECEIVE        JSR OSBYTE          LDX #RATE        LDY #0        LDA #8          ;SET SEND        JSR OSBYTE         ;ASK WHICH FILE        LDY #<MFILE     ;"WHICH?"        LDX #>MFILE        LDA #MFILEL     ;LENGTH        JSR TPEFLOOP   JSR OSRDCH      ;GET ANSWER        CMP #'G'        BEQ FOK        CMP #'Z'        BNE FLOOP       ;SAYWHAT?FOK     STA WCHFIL      ;SAVE WHICH FILE        ;TELL USER DRIVE #        LDY #<MDRV        LDX #>MDRV         LDA #MDRVL        JSR TPE        JSR OSRDCH      ;WAIT FOR 'EM        LDY #<MGO       ;"STARTED"        LDX #>MGO         LDA #MGOL        JSR TPE        ;NOW GO DO APPROPRIATE TRANSFER        LDA WCHFIL        CMP #'Z'        BEQ WRZIP        JMP WRGAME  ;***********************WRZIP  ;CREATE ZIP ON DISK       ;AS !BOOT FILE SO CAN       ;AUTO BOOTCREATE  LDY #<F      ;CREATE FILE        LDX #>F        LDA #&80     ;(OPEN TO WRT)        JSR OSFIND        ;DROP THRU FOR REST OF OPERATION;************************ WRGAME  ;WRITE ->DISK BY SECTORS        ;******INIT INSTRUCTION BLOCK        ;SET UP SECTOR WRITE,         LDA #1       ;DRIVE           STA DRIVE         LDA #0         STA MEMADD+2 ;MEMORY ADDR        STA MEMADD+3         LDX #>BUFFR        LDY #<BUFFR        STY MEMADD+1         STX MEMADD           LDA #3       ;3 PARAMETERS        STA PARAMS         LDA #&21     ;SECTOR LNG = 256 (+1)        STA SECLNG        LDA #$4B     ;WRITE        STA COMMD        LDA #0            STA RESULT   ;CLEAR RESULT        STA ZPSIZE   ;COUNT SECTORS FOR ZIP SIZE        STA ZPSIZE+1        LDA WCHFIL   ;CHECK WHICH FILE        CMP #'Z'        BNE GAME        LDA #0       ;PLACE INT. ON        STA TRACK    ;TRACK 0        LDA #2               STA SECTOR   ;SECTOR 2        LDA #10      ;SET TO USE 10        STA SPERT    ;SECT PER TRACK        JMP GNXT     ;SKIP GAME STUFFGAME    LDA #4       ;START GAME        STA TRACK    ;TRACK 4        LDA #0       ;SECTOR 0        STA SECTOR                 LDA #8       ;GAME ONLY USES        STA SPERT    ;8 SEC PER TRACK        	;*******START OF LOOP TO WRITEGNXT    JSR RECEIV   ;MOVE A BLOCK OF DATA TO BUFFR        BCC WRTODK   ;OK,WRITE OUT THAT BLOCK        JMP DONE     ;GET HERE WHEN "RECEIVE" NO MORE SO - DONEWRTODK  ;WRITE A SECTOR        LDA #2       ;COUNT-MAKE 2 ATTEMPTS TO WRITE        STA TRYHLD   ;SAVE FOR NOWWRTD    LDY #<SECBLK ;INSTR BLOCK HIGH BYTE        LDX #>SECBLK        LDA #&7F     ;SECTOR WRITE INDICATOR        JSR OSWORD   ;WRITE SECTOR TO DISK        LDA RESULT        CMP #0         BEQ WRTOK    ;SUCCESS        DEC TRYHLD   ;CHECK IF TRIED 2CE        BNE WRTD     ;NOT YET, TRY AGAIN        JMP BADWRT   ;"FAILED"WRTOK   ;INC SECTOR/TRACK FOR NEXT BLOCK        INC SECTOR         LDA SPERT        CMP SECTOR   ;ALL SECTORS?        BNE UNDR     ;NO, SKIP ALONG        INC TRACK    ;YES, NXT TRK        LDA #0       ;START WITH SECTOR #0 EACH TRACK        STA SECTOR UNDR    JSR SNDACK   ;SEND ACK         INC ZPSIZE+1 ;COUNT SECTORS (ONLY WILL BE USED W/ZIP)         JMP GNXT     ;GET NEXT BLK;**********END OF WRITE LOOP;**************************;HERE FOLLOW GENERAL ROUTINESBADWRT  ;DID NOT WRITE SUC. TO DSK        JSR SETVID   ;SET OUTPUT STREAM TO VIDEO        LDY #<MBADWR ;"BAD WRITE"         LDX #>MBADWR         LDA #MBADWL  ;MSG LENGTH        JSR TPE        RTS          ;LEAVE PRGM DONE    ;SEND EOF ACK & DISP "DONE"        JSR SNDACK   ;SEND ACK        LDA WCHFIL   ;CHECK, IF ZIP        CMP #'Z'     ;SET AUTO BOOT        BNE OUT      ;OTHERWISE, SKIP, DON'T BOTHER        ;SET AUTO BOOT BYTE AT BIT        ;4,5 OF BYTE 6 SCT 1 TRK 0        ;2 = AUTO *RUN THE FILE        LDA #0        STA RESULT   ;CLEAR RESULT        STA TRACK    ;TRACK 0        LDA #1        STA SECTOR   ;SECTOR 1                LDA #READ    ;SET INST BLK TO READ        STA COMMD         LDY #<SECBLK ;INST BLK        LDX #>SECBLK        LDA #$7F     ;R/W SECTOR        JSR OSWORD   ;READ SCTR 1 TRK 0           LDX #BOOT    ;OFFSET OF AUTO BOOT BYTE         LDA BUFFR,X    ;GET BYTE TO SET        AND #%11001111 ;CLEAR AUTO BITS        ORA #%00100000 ;SET TO *RUN        STA BUFFR,X         ;NOW SET LOAD & EXEC ADDRESSES        ;FILE LENGTH AND START SECTOR        LDX #0       ;OFFSET IN DATA        LDY #8       ;OFFSET IN BUFRDLOOP   LDA FILELN,X ;MOVE DATA IN        STA BUFFR,Y  ;TO BUFFR THAT        INY          ;WILL BE SECTOR        INX          ;1 - TRACK 0        CPX #FLNSZ   ;(DIRECTORY INFO)        BNE DLOOP        LDA #WRITE        STA COMMD          LDA #0        STA RESULT         LDY #<SECBLK  ;SET TO WRITE         LDX #>SECBLK  ;BACK OUT TO        LDA #$7F      ;DISK        JSR OSWORD    ;DO IT OUT     LDY #<MOK    ;"DONE OK"        LDX #>MOK        LDA #MOKL        JSR TPE        RTS          ;RETURN OUT;*****RECEIV  ;SET IN&OUT STREAM->RS423        ;RET C=0 IF OK C=1 IF DONE        ;IF PROB, REPEAT RECEIV         JSR SETRS         ;GET&CHECK HEADERRCVHDR  JSR OSRDCH   ;GET CHAR        BCS RCVHDR        CMP #CMDCHR  ;CMD CHAR?        BNE RCVHDR   ;NO, TRY AGIN        JSR OSRDCH   ;NEXT CHAR        BCS RCVHDR   ;BAD         CMP #CMDEOF  ;END OF FILE?        BNE DAT      ;NO, KEEP GOING        SEC        RTS          ;EOF        ;CHECK IF DATADAT     CMP #CMDDAT   ;DATA INDICATOR?        BNE RCVHDR   ;NO,TRY AGAIN        ;CONTINUE, GET REST OF HEADER            LDX #0       ;CLEAR INDEXHDRNX   JSR OSRDCH   ;GET NEXT HDR BYTE        CMP BLKHDR,X ;DOES IT MATCH CORRECT SEQUENCE?        BNE RBERR    ;ERR IF NOT        INX         CPX #BKHDSZ   ;DONE?        BMI HDRNX    ;LOOP IF NOT        ;GET BLOCK, COMPUTING WORD CHECKSUM        LDY #0       ;CLEAR INDEX        STY CHKSMH        STY CHKSML   ;AND CHECKSUMNXBYTE  JSR OSRDCH   ;GET NEXT BYTE        STA BUFFR,Y  ;STORE        CLC          ;CLEAR FOR ADD        ADC CHKSML   ;ADD TO CURNT        STA CHKSML          BCC RBNX1        INC CHKSMH   ;HIGHER BYTERBNX1   INY          ;BUMP INDEX        BNE NXBYTE   ;256 TIMES        ;COMPARE CHECKSUM         JSR OSRDCH   ;GET HI BYTE        CMP CHKSMH  ;SAME?         BNE RBERR    ;NO, ERROR        JSR OSRDCH   ;GET LOW BYTE        CMP CHKSML   ;SAME?        BNE RBERR    ;NO, ERROR         CLC        RTS          ;RET, BLOCK OKRBERR   ;ERROR IN RECEIVING BLOCK        JSR SNDNAK   ;SEND NAK        JMP RECEIV   ;GO GET BLOCK AGAIN;*****  SNDACK  LDA #CMDCHR        JSR OSWRCH   ;SEND CMD CHR        LDA #CMDACK        JSR OSWRCH   ;AND ACK        JSR SETVID   ;SET STREAM TO VIDEO        LDA #'A'     ;ACK TO VID        JSR OSWRCH        RTSSNDNAK  LDA #CMDCHR  ;SEND CMD CHR        JSR OSWRCH        LDA #CMDNAK  ;AND NAK         JSR OSWRCH        JSR SETVID   ;SET OUTPUT STREAM TO VIDEO        LDA #'N'     ;NAK TO SCREEN        JSR OSWRCH        RTS;*****SETVID ;GET CHAR FROM KEYBOARD       ;(ENABLE RS423)        LDA #2          LDX #2             JSR OSBYTE        ;OUTPUT TO SCREEN ONLY        LDA #3           LDX #4             JSR OSBYTE        RTS SETRS   ;GET CHAR FROM RS423        LDA #2          LDX #1             JSR OSBYTE        ;OUTPUT TO RS423        LDA #3           LDX #7              JSR OSBYTE          RTS  ;*****TPE     ;DISP MSG TO SCREEN         STX MHOLDH    ;SAVE MSG LOC        STY MHOLDL         STA MLENG     ;SAVE LENGTH         LDY #0        ;CLEAR INDEXTLOOP   LDA (MHOLDH),Y        JSR OSWRCH    ;DISP A CHAR        INY         CPY MLENG        BNE TLOOP        RTS           ;ALL DONE      DONE     